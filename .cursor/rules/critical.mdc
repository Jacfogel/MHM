---
alwaysApply: true
description: "Essential project rules that must always be followed"
globs: ["**/*"]
priority: 1
lastUpdated: "2025-10-22"
---

# Critical Rules - Always Apply

## Who You're Helping
- Beginner programmer with ADHD/depression, building a personal mental health assistant.
- PowerShell commands required
- User prefers step-by-step explanations, and constructive correction.
- Values learning and efficiency over being "right"; relies on the assistant for thoroughness.

## Safety & Workflow
- Use PowerShell-safe syntax (`;`, `-and`, `$LASTEXITCODE`). Never assume a command succeeded; verify and report the outcome.
- Maintain test isolation: tests must not write outside the `tests/` directory and the full suite must pass before declaring success.
- Keep the Python virtual environment active; do not install dependencies globally (`venv\Scripts\activate`, `pip install -r requirements.txt`).
- Validate runtime health after changes with `python run_headless_service.py start` when functionality is affected.
- Work in small, tested increments; take a backup before risky edits when practical (for example `Copy-Item -Path "." -Destination "../backup_$(Get-Date -Format 'yyyyMMdd_HHmmss')" -Recurse`).
- Follow the audit-first protocol: run `python ai_development_tools/ai_tools_runner.py audit` (or `--full` when required) before producing documentation or broad assessments.
- Confirm with the user before launching documentation or broad analysis work as part of the audit-first protocol.
- Keep paired documentation in sync (human and AI guides, changelog pairs) whenever any member of a pair changes.
- Legacy code is allowed only when strictly necessary, clearly labelled `LEGACY COMPATIBILITY`, logged on use, and paired with a removal plan.
- Ask rather than guess. If intent or scope is unclear, pause and clarify instead of assuming; escalate questions early with concrete context if requirements or safety steps are unclear.
