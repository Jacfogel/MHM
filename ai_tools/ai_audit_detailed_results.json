{
  "timestamp": "2025-08-04T02:25:35.040263",
  "successful": [
    "function_discovery",
    "decision_support",
    "audit_function_registry",
    "audit_module_dependencies",
    "analyze_documentation"
  ],
  "failed": [],
  "results": {
    "function_discovery": {
      "success": true,
      "output": "[SCAN] Scanning for all functions...\nError parsing scripts\\testing\\test_all_dialogs.py: unterminated triple-quoted string literal (detected at line 204) (<unknown>, line 3)\nFound 1757 functions.\n\n=== FUNCTION DISCOVERY SUMMARY ===\n\nHANDLERS (579):\n  - get_last_cleanup_timestamp (file: auto_cleanup.py, complexity: 57)\n  - update_cleanup_timestamp (file: auto_cleanup.py, complexity: 63)\n  - get_cleanup_status (file: auto_cleanup.py, complexity: 102)\n  - create_automatic_backup (file: backup_manager.py, complexity: 63)\n  - validate_system_state (file: backup_manager.py, complexity: 166)\n  - create_backup (file: backup_manager.py, complexity: 183)\n  - _create_backup_manifest (file: backup_manager.py, complexity: 86)\n  - _get_backup_info (file: backup_manager.py, complexity: 181)\n  - validate_backup (file: backup_manager.py, complexity: 249)\n  - get_mood_trends (file: checkin_analytics.py, complexity: 381)\n  ...and 569 more.\n\nTESTS (654):\n  - verify_file_access (file: file_operations.py, complexity: 48)\n  - check_and_fix_logging (file: service.py, complexity: 353)\n  - check_test_message_requests (file: service.py, complexity: 270)\n  - cleanup_test_message_requests (file: service.py, complexity: 105)\n  - check_reschedule_requests (file: service.py, complexity: 315)\n  - _test_lm_studio_connection (file: ai_chatbot.py, complexity: 146)\n  - test_system_prompt_integration (file: ai_chatbot.py, complexity: 134)\n  - _check_logging_health (file: communication_manager.py, complexity: 95)\n  - _check_dns_resolution (file: discord_bot.py, complexity: 245)\n  - _check_network_connectivity (file: discord_bot.py, complexity: 176)\n  ...and 644 more.\n\nCOMPLEX (364):\n  - should_run_cleanup (file: auto_cleanup.py, complexity: 96)\n  - find_pycache_dirs (file: auto_cleanup.py, complexity: 63)\n  - find_pyc_files (file: auto_cleanup.py, complexity: 73)\n  - calculate_cache_size (file: auto_cleanup.py, complexity: 158)\n  - perform_cleanup (file: auto_cleanup.py, complexity: 302)\n  - auto_cleanup_if_needed (file: auto_cleanup.py, complexity: 51)\n  - perform_safe_operation (file: backup_manager.py, complexity: 107)\n  - ensure_backup_directory (file: backup_manager.py, complexity: 55)\n  - _backup_user_data (file: backup_manager.py, complexity: 95)\n  - _backup_config_files (file: backup_manager.py, complexity: 72)\n  ...and 354 more.\n\nUNDOCUMENTED (19):\n  - sort_key (file: schedule_management.py, complexity: 39)\n  - __init__ (file: ai_chatbot.py, complexity: 27)\n  - __init__ (file: interaction_manager.py, complexity: 45)\n  - sort_key (file: schedule_editor_dialog.py, complexity: 42)\n  - qtTrId (file: account_creator_dialog_pyqt.py, complexity: 6)\n  - qtTrId (file: category_management_dialog_pyqt.py, complexity: 6)\n  - qtTrId (file: category_selection_widget_pyqt.py, complexity: 6)\n  - qtTrId (file: channel_management_dialog_pyqt.py, complexity: 6)\n  - qtTrId (file: channel_selection_widget_pyqt.py, complexity: 6)\n  - qtTrId (file: checkin_element_template_pyqt.py, complexity: 6)\n  ...and 9 more.\n\nSPECIAL_METHODS (11):\n  - __init__ (file: checkin_analytics.py, complexity: 6)\n  - __init__ (file: error_handling.py, complexity: 14)\n  - __init__ (file: error_handling.py, complexity: 14)\n  - __init__ (file: service_utilities.py, complexity: 19)\n  - __new__ (file: ai_chatbot.py, complexity: 39)\n  - __post_init__ (file: base_channel.py, complexity: 19)\n  - __init__ (file: conversation_manager.py, complexity: 11)\n  - __init__ (file: ui_app_qt.py, complexity: 11)\n  - __post_init__ (file: dynamic_list_container.py, complexity: 13)\n  - __new__ (file: user_context.py, complexity: 49)\n  ...and 1 more.\n\nOTHER (130):\n  - __init__ (file: backup_manager.py, complexity: 32)\n  - _restore_config_files (file: backup_manager.py, complexity: 49)\n  - __init__ (file: error_handling.py, complexity: 25)\n  - recover (file: error_handling.py, complexity: 24)\n  - __init__ (file: error_handling.py, complexity: 46)\n  - __enter__ (file: error_handling.py, complexity: 8)\n  - __exit__ (file: error_handling.py, complexity: 34)\n  - disable_module_logging (file: logger.py, complexity: 42)\n  - __init__ (file: scheduler.py, complexity: 46)\n  - schedule_task_reminder (file: scheduler.py, complexity: 24)\n  ...and 120 more.\n\nNote: 11 special Python methods excluded from undocumented count\n\nTip: Use this output to quickly find handlers, tests, complex, or undocumented functions.\n",
      "error": ""
    },
    "decision_support": {
      "success": true,
      "output": "[SCAN] Gathering actionable insights for AI decision-making...\nError parsing scripts\\testing\\test_all_dialogs.py: unterminated triple-quoted string literal (detected at line 204) (<unknown>, line 3)\n\n=== AI DECISION SUPPORT DASHBOARD ===\nTotal functions: 1757\n\n[WARN] High Complexity Functions (>50 nodes): 1273\n  - get_last_cleanup_timestamp (file: auto_cleanup.py, complexity: 57)\n  - update_cleanup_timestamp (file: auto_cleanup.py, complexity: 63)\n  - should_run_cleanup (file: auto_cleanup.py, complexity: 96)\n  - find_pycache_dirs (file: auto_cleanup.py, complexity: 63)\n  - find_pyc_files (file: auto_cleanup.py, complexity: 73)\n  - calculate_cache_size (file: auto_cleanup.py, complexity: 158)\n  - perform_cleanup (file: auto_cleanup.py, complexity: 302)\n  - auto_cleanup_if_needed (file: auto_cleanup.py, complexity: 51)\n  - get_cleanup_status (file: auto_cleanup.py, complexity: 102)\n  - create_automatic_backup (file: backup_manager.py, complexity: 63)\n  ...and 1263 more.\n\n[DOC] Undocumented Handlers: 68\n  - validate_time_format (file: user_data_validation.py)\n  - get_user_data (file: user_management.py)\n  - save_user_data (file: user_management.py)\n  - save_user_data_transaction (file: user_management.py)\n  - can_handle (file: interaction_handlers.py)\n  - handle (file: interaction_handlers.py)\n  - get_help (file: interaction_handlers.py)\n  - get_examples (file: interaction_handlers.py)\n  - can_handle (file: interaction_handlers.py)\n  - handle (file: interaction_handlers.py)\n  ...and 58 more.\n\n[DUPE] Duplicate Function Names: 104\n  - __init__: backup_manager.py, checkin_analytics.py, config.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, logger.py, scheduler.py, service.py, service_utilities.py, user_data_manager.py, ai_chatbot.py, ai_chatbot.py, ai_chatbot.py, base_channel.py, communication_manager.py, conversation_manager.py, discord_bot.py, email_bot.py, enhanced_command_parser.py, interaction_manager.py, telegram_bot.py, user_context_manager.py, ui_app_qt.py, ui_app_qt.py, account_creator_dialog.py, admin_panel.py, category_management_dialog.py, channel_management_dialog.py, checkin_management_dialog.py, schedule_editor_dialog.py, task_completion_dialog.py, task_crud_dialog.py, task_edit_dialog.py, task_management_dialog.py, user_profile_dialog.py, category_selection_widget.py, channel_selection_widget.py, checkin_settings_widget.py, dynamic_list_container.py, dynamic_list_field.py, period_row_widget.py, tag_widget.py, task_settings_widget.py, user_profile_settings_widget.py, user_preferences.py, audit_legacy_channels.py, focused_legacy_audit.py, test_discord_commands.py, discord_connectivity_diagnostic.py, migrate_user_data_structure.py, test_cleanup.py\n  - create_backup: backup_manager.py, cleanup_duplicate_messages.py\n  - get_available_channels: config.py, channel_factory.py, communication_manager.py\n  - can_handle: error_handling.py, error_handling.py, error_handling.py, interaction_handlers.py, interaction_handlers.py, interaction_handlers.py, interaction_handlers.py, interaction_handlers.py, interaction_handlers.py, interaction_handlers.py\n  - recover: error_handling.py, error_handling.py, error_handling.py\n  ...and 99 more.\n\n=== SUGGESTED NEXT STEPS ===\n- Refactor high-complexity functions for maintainability.\n- Add docstrings to undocumented handler/utility functions.\n- Review duplicate function names for possible consolidation or renaming.\n\nTip: Use this dashboard before major refactoring, documentation, or architectural changes.\n",
      "error": ""
    },
    "audit_function_registry": {
      "success": true,
      "output": "[SCAN] Scanning all Python files...\nError parsing scripts\\testing\\test_all_dialogs.py: unterminated triple-quoted string literal (detected at line 204) (<unknown>, line 3)\nError parsing scripts\\testing\\test_all_dialogs.py: unterminated triple-quoted string literal (detected at line 204) (<unknown>, line 3)\n[DOC] Parsing FUNCTION_REGISTRY_DETAIL.md...\n\n================================================================================\nFUNCTION REGISTRY AUDIT REPORT\n================================================================================\n\n[STATS] OVERALL STATISTICS:\n   Files scanned: 160\n   Functions found: 1757\n   Classes found: 173\n   Functions documented: 1204\n   Coverage: 68.5%\n\n[MISS] MISSING FROM REGISTRY:\n   [FILE] core/checkin_analytics.py:\n      - get_checkin_history\n      - get_completion_rate\n      - get_task_weekly_stats\n   [FILE] core/logger.py:\n      - __init__\n      - cleanup_old_logs\n      - doRollover\n      - get_log_file_info\n   [FILE] core/scheduler.py:\n      - process_category_schedule\n   [FILE] core/schedule_management.py:\n      - sort_key\n   [FILE] core/service.py:\n      - get_scheduler_manager\n   [FILE] bot/communication_manager.py:\n      - _process_retry_queue\n      - _queue_failed_message\n      - _retry_loop\n      - _start_retry_thread\n      - _stop_retry_thread\n      - get_discord_connectivity_status\n   [FILE] bot/discord_bot.py:\n      - _create_action_row\n      - _create_discord_embed\n      - _get_detailed_connection_status\n      - _update_connection_status\n      - get_connection_status_summary\n      - get_health_status\n   [DIR] bot/enhanced_command_parser.py - ENTIRE FILE MISSING\n   [DIR] bot/interaction_handlers.py - ENTIRE FILE MISSING\n   [DIR] bot/interaction_manager.py - ENTIRE FILE MISSING\n   [FILE] ui/ui_app_qt.py:\n      - manage_task_crud\n   [FILE] ui/dialogs/schedule_editor_dialog.py:\n      - find_lowest_available_period_number\n      - handle_save\n      - resort_period_widgets\n      - sort_key\n   [DIR] ui/dialogs/task_completion_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/task_crud_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/task_edit_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/tag_widget_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/task_completion_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/task_crud_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/task_edit_dialog_pyqt.py - ENTIRE FILE MISSING\n   [FILE] ui/widgets/checkin_settings_widget.py:\n      - add_new_period\n   [FILE] ui/widgets/period_row_widget.py:\n      - set_read_only\n   [DIR] ui/widgets/tag_widget.py - ENTIRE FILE MISSING\n   [FILE] ui/widgets/task_settings_widget.py:\n      - get_available_tags\n      - refresh_tags\n   [FILE] tasks/task_management.py:\n      - add_user_task_tag\n      - cleanup_task_reminders\n      - get_user_task_tags\n      - remove_user_task_tag\n      - restore_task\n      - schedule_task_reminders\n      - setup_default_task_tags\n   [DIR] scripts/audit_legacy_channels.py - ENTIRE FILE MISSING\n   [DIR] scripts/focused_legacy_audit.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_ai_parsing.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_ai_raw.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_centralized_config.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_comprehensive_fixes.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_discord_commands.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_discord_connection.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_enhanced_discord_commands.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_enhanced_parser_direct.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_task_response_formatting.py - ENTIRE FILE MISSING\n   [DIR] scripts/debug/discord_connectivity_diagnostic.py - ENTIRE FILE MISSING\n   [DIR] scripts/debug/test_dns_fallback.py - ENTIRE FILE MISSING\n   [DIR] tests/test_utilities.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_ai_chatbot_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_conversation_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_discord_bot_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_interaction_handlers_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_response_tracking_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_schedule_management_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_service_utilities_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_ui_app_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_user_context_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_utilities_demo.py - ENTIRE FILE MISSING\n   [DIR] tests/unit/test_validation.py - ENTIRE FILE MISSING\n   [FILE] run_tests.py:\n      - run_command\n   [DIR] test_user_creation_debug.py - ENTIRE FILE MISSING\n\n   Total missing functions: 574\n\n[EXTRA] EXTRA IN REGISTRY (not found in files):\n   [FILE] bot/communication_manager.py:\n      - __getattr__\n      - _create_legacy_channel_access\n      - _run_async_safely\n      - channels\n      - is_initialized\n      - receive_messages\n      - run_in_thread\n      - send_message\n      - start\n      - stop\n   [FILE] run_tests.py:\n      - run_specific_module\n      - run_test_categories\n      - run_tests_with_pytest\n      - show_test_summary\n   [FILE] tests/behavior/test_communication_behavior.py:\n      - test_legacy_channel_wrapper_method_delegation\n      - test_legacy_channel_wrapper_with_realistic_channel\n   [FILE] ui/generated/admin_panel_pyqt.py:\n      - qtTrId\n   [FILE] ui/generated/task_settings_widget_pyqt.py:\n      - qtTrId\n   [FILE] ui/widgets/checkin_settings_widget.py:\n      - add_new_time_period\n\n   Total extra functions: 19\n\n[ANALYSIS] FUNCTION ANALYSIS FOR DECISION-MAKING:\n   [WARN] HIGH COMPLEXITY FUNCTIONS (may need refactoring):\n      [DOC] ui/generated/user_profile_settings_widget_pyqt.py::setupUi (complexity: 4512)\n      [NO DOC] ui/generated/task_edit_dialog_pyqt.py::setupUi (complexity: 1935)\n      [DOC] ui/generated/account_creator_dialog_pyqt.py::setupUi (complexity: 1696)\n      [DOC] ui/generated/checkin_settings_widget_pyqt.py::setupUi (complexity: 1662)\n      [NO DOC] ui/generated/admin_panel_pyqt.py::setupUi (complexity: 1657)\n      [DOC] ui/widgets/user_profile_settings_widget.py::get_personalization_data (complexity: 1653)\n      [DOC] ui/generated/period_row_template_pyqt.py::setupUi (complexity: 1550)\n      [DOC] core/file_operations.py::create_user_files (complexity: 1486)\n      [DOC] ui/generated/user_profile_settings_widget_pyqt.py::retranslateUi (complexity: 1318)\n      [DOC] bot/interaction_handlers.py::_handle_list_tasks (complexity: 1232)\n   [DOC] UNDOCUMENTED FUNCTIONS (need docstrings):\n      [HANDLER] Handlers/Utilities (60):\n         - ui/widgets/dynamic_list_container.py::_on_preset_toggled\n         - bot/interaction_handlers.py::can_handle\n         - bot/interaction_handlers.py::can_handle\n         - bot/interaction_handlers.py::can_handle\n         - bot/interaction_handlers.py::can_handle\n      [OTHER] Other functions (69):\n         - core/logger.py::__init__\n         - bot/ai_chatbot.py::__init__\n         - bot/enhanced_command_parser.py::__init__\n         - bot/interaction_manager.py::__init__\n         - scripts/audit_legacy_channels.py::__init__\n   [DUPE] POTENTIAL DUPLICATE FUNCTION NAMES:\n      '__init__' found in: core/backup_manager.py, core/checkin_analytics.py, core/config.py, core/error_handling.py, core/error_handling.py, core/error_handling.py, core/error_handling.py, core/error_handling.py, core/error_handling.py, core/logger.py, core/scheduler.py, core/service.py, core/service_utilities.py, core/user_data_manager.py, bot/ai_chatbot.py, bot/ai_chatbot.py, bot/ai_chatbot.py, bot/base_channel.py, bot/communication_manager.py, bot/conversation_manager.py, bot/discord_bot.py, bot/email_bot.py, bot/enhanced_command_parser.py, bot/interaction_manager.py, bot/telegram_bot.py, bot/user_context_manager.py, ui/ui_app_qt.py, ui/ui_app_qt.py, ui/dialogs/account_creator_dialog.py, ui/dialogs/admin_panel.py, ui/dialogs/category_management_dialog.py, ui/dialogs/channel_management_dialog.py, ui/dialogs/checkin_management_dialog.py, ui/dialogs/schedule_editor_dialog.py, ui/dialogs/task_completion_dialog.py, ui/dialogs/task_crud_dialog.py, ui/dialogs/task_edit_dialog.py, ui/dialogs/task_management_dialog.py, ui/dialogs/user_profile_dialog.py, ui/widgets/category_selection_widget.py, ui/widgets/channel_selection_widget.py, ui/widgets/checkin_settings_widget.py, ui/widgets/dynamic_list_container.py, ui/widgets/dynamic_list_field.py, ui/widgets/period_row_widget.py, ui/widgets/tag_widget.py, ui/widgets/task_settings_widget.py, ui/widgets/user_profile_settings_widget.py, user/user_preferences.py, scripts/audit_legacy_channels.py, scripts/focused_legacy_audit.py, scripts/test_discord_commands.py, scripts/debug/discord_connectivity_diagnostic.py, scripts/migration/migrate_user_data_structure.py, tests/unit/test_cleanup.py\n      '__new__' found in: bot/ai_chatbot.py, bot/communication_manager.py, user/user_context.py\n      '__post_init__' found in: bot/base_channel.py, ui/widgets/dynamic_list_container.py\n      '_get_active_schedules' found in: bot/user_context_manager.py, user/user_context.py\n      '_get_default_data' found in: core/error_handling.py, core/error_handling.py\n\n[DIR] BREAKDOWN BY DIRECTORY:\n   ai/: 5 files, 16 functions, 0 classes\n   behavior/: 16 files, 342 functions, 33 classes\n   bot/: 13 files, 247 functions, 32 classes\n   cleanup/: 4 files, 11 functions, 0 classes\n   core/: 19 files, 304 functions, 25 classes\n   debug/: 7 files, 28 functions, 1 classes\n   dialogs/: 11 files, 131 functions, 11 classes\n   generated/: 20 files, 51 functions, 20 classes\n   integration/: 3 files, 35 functions, 5 classes\n   migration/: 5 files, 24 functions, 1 classes\n   refactoring/: 5 files, 8 functions, 0 classes\n   root/: 3 files, 4 functions, 0 classes\n   scripts/: 11 files, 42 functions, 3 classes\n   tasks/: 1 files, 20 functions, 1 classes\n   testing/: 7 files, 14 functions, 0 classes\n   tests/: 2 files, 82 functions, 4 classes\n   ui/: 3 files, 78 functions, 6 classes\n   unit/: 6 files, 176 functions, 20 classes\n   user/: 2 files, 24 functions, 2 classes\n   utilities/: 8 files, 24 functions, 0 classes\n   widgets/: 9 files, 96 functions, 9 classes\n\n[GEN] GENERATING UPDATED REGISTRY SECTIONS...\n\n================================================================================\nUPDATED REGISTRY SECTIONS TO ADD:\n================================================================================\n\n### bot/ai_chatbot.py\n**Functions:**\n- `get_ai_chatbot()` - Return the shared AIChatBot instance.\n- `__init__(self)` - No description\n- `_load_custom_prompt(self)` - Load the custom system prompt from file.\n- `get_system_prompt(self, prompt_type)` - Get the appropriate system prompt for the given type.\n\nArgs:\n    prompt_type: Type of prompt ('wellness', 'command', 'neurodivergent_support')\n    \nReturns:\n    The system prompt string\n- `reload_prompt(self)` - Reload the custom prompt from file (useful for development).\n- `__init__(self, max_size, ttl)` - Initialize the object.\n- `_generate_key(self, prompt, user_id)` - Generate cache key from prompt and optional user context.\n- `get(self, prompt, user_id)` - Get cached response if available and not expired.\n- `set(self, prompt, response, user_id)` - Cache a response.\n- `_cleanup_lru(self)` - Remove least recently used items.\n- `__new__(cls)` - Create a new instance.\n- `__init__(self)` - Initialize the object.\n- `_test_lm_studio_connection(self)` - Test connection to LM Studio server.\n- `_call_lm_studio_api(self, messages, max_tokens, temperature, timeout)` - Make an API call to LM Studio using OpenAI-compatible format.\n- `_get_contextual_fallback(self, user_prompt, user_id)` - Provide contextually aware fallback responses based on user data and prompt analysis.\nNow actually analyzes user's check-in data for meaningful responses.\n- `_get_fallback_response(self, user_prompt)` - Legacy fallback method for backwards compatibility.\n- `_get_fallback_personalized_message(self, user_id)` - Provide fallback personalized messages when AI model is not available.\n- `_optimize_prompt(self, user_prompt, context)` - Create optimized messages array for LM Studio API.\n- `_create_comprehensive_context_prompt(self, user_id, user_prompt)` - Create a comprehensive context prompt with all user data for LM Studio.\n- `_detect_mode(self, user_prompt)` - Detect whether the prompt is a command or a chat query.\n- `_create_command_parsing_prompt(self, user_prompt)` - Create a prompt instructing the model to return strict JSON.\n- `generate_response(self, user_prompt, timeout, user_id, mode)` - Generate a basic AI response from user_prompt, using LM Studio API.\nUses adaptive timeout to prevent blocking for too long with improved performance optimizations.\n- `is_ai_available(self)` - Check if the AI model is available and functional.\n- `reload_system_prompt(self)` - Reload the system prompt from file (useful for development and testing).\n- `test_system_prompt_integration(self)` - Test the system prompt integration and return status information.\n- `get_ai_status(self)` - Get detailed status information about the AI system.\n- `generate_personalized_message(self, user_id, timeout)` - Generate a personalized message by examining the user's recent responses\n(daily check-in data). Uses longer timeout since this is not real-time.\n- `generate_quick_response(self, user_prompt, user_id)` - Generate a quick response for real-time chat (Discord, etc.).\nUses shorter timeout optimized for responsiveness.\n- `generate_contextual_response(self, user_id, user_prompt, timeout)` - Generate a context-aware response using comprehensive user data.\nIntegrates with existing UserContext and UserPreferences systems.\n- `_detect_resource_constraints(self)` - Detect if system is resource-constrained.\n- `_get_adaptive_timeout(self, base_timeout)` - Get adaptive timeout based on system resources.\n**Classes:**\n- `SystemPromptLoader` - Handles loading and managing the AI system prompt from the custom prompt file.\nProvides fallback prompts if the custom file is not available.\n  - `SystemPromptLoader.__init__(self)` - No description\n  - `SystemPromptLoader._load_custom_prompt(self)` - Load the custom system prompt from file.\n  - `SystemPromptLoader.get_system_prompt(self, prompt_type)` - Get the appropriate system prompt for the given type.\n\nArgs:\n    prompt_type: Type of prompt ('wellness', 'command', 'neurodivergent_support')\n    \nReturns:\n    The system prompt string\n  - `SystemPromptLoader.reload_prompt(self)` - Reload the custom prompt from file (useful for development).\n- `ResponseCache` - Simple in-memory cache for AI responses to avoid repeated calculations.\n  - `ResponseCache.__init__(self, max_size, ttl)` - Initialize the object.\n  - `ResponseCache._generate_key(self, prompt, user_id)` - Generate cache key from prompt and optional user context.\n  - `ResponseCache.get(self, prompt, user_id)` - Get cached response if available and not expired.\n  - `ResponseCache.set(self, prompt, response, user_id)` - Cache a response.\n  - `ResponseCache._cleanup_lru(self)` - Remove least recently used items.\n- `AIChatBotSingleton` - A Singleton container for LM Studio API client.\n  - `AIChatBotSingleton.__new__(cls)` - Create a new instance.\n  - `AIChatBotSingleton.__init__(self)` - Initialize the object.\n  - `AIChatBotSingleton._test_lm_studio_connection(self)` - Test connection to LM Studio server.\n  - `AIChatBotSingleton._call_lm_studio_api(self, messages, max_tokens, temperature, timeout)` - Make an API call to LM Studio using OpenAI-compatible format.\n  - `AIChatBotSingleton._get_contextual_fallback(self, user_prompt, user_id)` - Provide contextually aware fallback responses based on user data and prompt analysis.\nNow actually analyzes user's check-in data for meaningful responses.\n  - `AIChatBotSingleton._get_fallback_response(self, user_prompt)` - Legacy fallback method for backwards compatibility.\n  - `AIChatBotSingleton._get_fallback_personalized_message(self, user_id)` - Provide fallback personalized messages when AI model is not available.\n  - `AIChatBotSingleton._optimize_prompt(self, user_prompt, context)` - Create optimized messages array for LM Studio API.\n  - `AIChatBotSingleton._create_comprehensive_context_prompt(self, user_id, user_prompt)` - Create a comprehensive context prompt with all user data for LM Studio.\n  - `AIChatBotSingleton._detect_mode(self, user_prompt)` - Detect whether the prompt is a command or a chat query.\n  - `AIChatBotSingleton._create_command_parsing_prompt(self, user_prompt)` - Create a prompt instructing the model to return strict JSON.\n  - `AIChatBotSingleton.generate_response(self, user_prompt, timeout, user_id, mode)` - Generate a basic AI response from user_prompt, using LM Studio API.\nUses adaptive timeout to prevent blocking for too long with improved performance optimizations.\n  - `AIChatBotSingleton.is_ai_available(self)` - Check if the AI model is available and functional.\n  - `AIChatBotSingleton.reload_system_prompt(self)` - Reload the system prompt from file (useful for development and testing).\n  - `AIChatBotSingleton.test_system_prompt_integration(self)` - Test the system prompt integration and return status information.\n  - `AIChatBotSingleton.get_ai_status(self)` - Get detailed status information about the AI system.\n  - `AIChatBotSingleton.generate_personalized_message(self, user_id, timeout)` - Generate a personalized message by examining the user's recent responses\n(daily check-in data). Uses longer timeout since this is not real-time.\n  - `AIChatBotSingleton.generate_quick_response(self, user_prompt, user_id)` - Generate a quick response for real-time chat (Discord, etc.).\nUses shorter timeout optimized for responsiveness.\n  - `AIChatBotSingleton.generate_contextual_response(self, user_id, user_prompt, timeout)` - Generate a context-aware response using comprehensive user data.\nIntegrates with existing UserContext and UserPreferences systems.\n  - `AIChatBotSingleton._detect_resource_constraints(self)` - Detect if system is resource-constrained.\n  - `AIChatBotSingleton._get_adaptive_timeout(self, base_timeout)` - Get adaptive timeout based on system resources.\n\n### bot/base_channel.py\n**Functions:**\n- `__post_init__(self)` - Post-initialization setup.\n- `__init__(self, config)` - Initialize the object.\n- `channel_type(self)` - Return whether this channel is sync or async\n- `is_ready(self)` - Check if channel is ready to send/receive messages\n- `get_status(self)` - Get current channel status\n- `get_error(self)` - Get last error message\n- `_set_status(self, status, error_message)` - Internal method to update status\n**Classes:**\n- `ChannelStatus` - No description\n- `ChannelType` - No description\n- `ChannelConfig` - Configuration for communication channels\n  - `ChannelConfig.__post_init__(self)` - Post-initialization setup.\n- `BaseChannel` - Abstract base class for all communication channels\n  - `BaseChannel.__init__(self, config)` - Initialize the object.\n  - `BaseChannel.channel_type(self)` - Return whether this channel is sync or async\n  - `BaseChannel.is_ready(self)` - Check if channel is ready to send/receive messages\n  - `BaseChannel.get_status(self)` - Get current channel status\n  - `BaseChannel.get_error(self)` - Get last error message\n  - `BaseChannel._set_status(self, status, error_message)` - Internal method to update status\n\n### bot/channel_factory.py\n**Functions:**\n- `register_channel(cls, name, channel_class)` - Register a new channel type\n- `create_channel(cls, name, config)` - Create a channel instance\n- `get_available_channels(cls)` - Get list of available channel types\n**Classes:**\n- `ChannelFactory` - Factory for creating communication channels\n  - `ChannelFactory.register_channel(cls, name, channel_class)` - Register a new channel type\n  - `ChannelFactory.create_channel(cls, name, config)` - Create a channel instance\n  - `ChannelFactory.get_available_channels(cls)` - Get list of available channel types\n\n### bot/channel_registry.py\n**Functions:**\n- `register_all_channels()` - Register all available communication channels\n\n### bot/communication_manager.py\n**Functions:**\n- `__new__(cls)` - Ensure that only one instance of the CommunicationManager exists (Singleton pattern).\n- `__init__(self)` - Initialize the object.\n- `_setup_event_loop(self)` - Set up a dedicated event loop for async operations\n- `_run_async_sync(self, coro)` - Run async function synchronously using our managed loop\n- `set_scheduler_manager(self, scheduler_manager)` - Set the scheduler manager for the communication manager.\n- `_queue_failed_message(self, user_id, category, message, recipient, channel_name)` - Queue a failed message for retry\n- `_start_retry_thread(self)` - Start the retry thread for failed messages\n- `_stop_retry_thread(self)` - Stop the retry thread\n- `_retry_loop(self)` - Main retry loop for failed messages\n- `_process_retry_queue(self)` - Process the retry queue and attempt to send failed messages\n- `initialize_channels_from_config(self, channel_configs)` - Initialize channels from configuration\n- `_get_default_channel_configs(self)` - Get default channel configurations\n- `start_all(self)` - Start all communication channels\n- `_check_logging_health(self)` - Check if logging is still working and recover if needed.\n\nVerifies that the logging system is functional and attempts to restart it if issues are detected.\n- `send_message_sync(self, channel_name, recipient, message)` - Synchronous wrapper with logging health check\n- `get_discord_connectivity_status(self)` - Get detailed Discord connectivity status if available\n- `stop_all(self)` - Stop all communication channels\n- `_shutdown_sync(self)` - Synchronous shutdown method for all channels.\n\nStops all communication channels and cleans up resources.\n- `handle_message_sending(self, user_id, category)` - Handle sending messages for a user and category with improved recipient resolution.\nNow uses scheduled check-ins instead of random replacement.\n- `_get_recipient_for_service(self, user_id, messaging_service, preferences)` - Get the appropriate recipient ID for the messaging service\n- `_should_send_checkin_prompt(self, user_id, checkin_prefs)` - Determine if it's time to send a check-in prompt based on user preferences.\nFor check-ins, we respect the schedule-based approach - if the scheduler\ntriggered this function, it means it's time for a check-in during the\nscheduled period.\n- `_handle_scheduled_checkin(self, user_id, messaging_service, recipient)` - Handle scheduled check-in messages based on user preferences and frequency.\n- `_send_checkin_prompt(self, user_id, messaging_service, recipient)` - Send a check-in prompt message to start the daily check-in flow.\n- `_send_ai_generated_message(self, user_id, category, messaging_service, recipient)` - Send an AI-generated personalized message using contextual AI\n- `_send_predefined_message(self, user_id, category, messaging_service, recipient)` - Send a pre-defined message from the user's message library\n- `get_available_channels(self)` - Get list of available/initialized channels\n- `is_channel_ready(self, channel_name)` - Check if a specific channel is ready\n- `handle_task_reminder(self, user_id, task_id)` - Handle sending task reminders for a user.\n- `_create_task_reminder_message(self, task)` - Create a formatted task reminder message.\n- `run_event_loop()` - Run the event loop in a separate thread for async operations.\n\nThis nested function is used to manage the event loop for async channel operations.\n**Classes:**\n- `QueuedMessage` - Represents a message that failed to send and is queued for retry\n- `BotInitializationError` - Custom exception for bot initialization failures.\n- `MessageSendError` - Custom exception for message sending failures.\n- `CommunicationManager` - Manages all communication channels with improved modularity\n  - `CommunicationManager.__new__(cls)` - Ensure that only one instance of the CommunicationManager exists (Singleton pattern).\n  - `CommunicationManager.__init__(self)` - Initialize the object.\n  - `CommunicationManager._setup_event_loop(self)` - Set up a dedicated event loop for async operations\n  - `CommunicationManager._run_async_sync(self, coro)` - Run async function synchronously using our managed loop\n  - `CommunicationManager.set_scheduler_manager(self, scheduler_manager)` - Set the scheduler manager for the communication manager.\n  - `CommunicationManager._queue_failed_message(self, user_id, category, message, recipient, channel_name)` - Queue a failed message for retry\n  - `CommunicationManager._start_retry_thread(self)` - Start the retry thread for failed messages\n  - `CommunicationManager._stop_retry_thread(self)` - Stop the retry thread\n  - `CommunicationManager._retry_loop(self)` - Main retry loop for failed messages\n  - `CommunicationManager._process_retry_queue(self)` - Process the retry queue and attempt to send failed messages\n  - `CommunicationManager.initialize_channels_from_config(self, channel_configs)` - Initialize channels from configuration\n  - `CommunicationManager._get_default_channel_configs(self)` - Get default channel configurations\n  - `CommunicationManager.start_all(self)` - Start all communication channels\n  - `CommunicationManager._check_logging_health(self)` - Check if logging is still working and recover if needed.\n\nVerifies that the logging system is functional and attempts to restart it if issues are detected.\n  - `CommunicationManager.send_message_sync(self, channel_name, recipient, message)` - Synchronous wrapper with logging health check\n  - `CommunicationManager.get_discord_connectivity_status(self)` - Get detailed Discord connectivity status if available\n  - `CommunicationManager.stop_all(self)` - Stop all communication channels\n  - `CommunicationManager._shutdown_sync(self)` - Synchronous shutdown method for all channels.\n\nStops all communication channels and cleans up resources.\n  - `CommunicationManager.handle_message_sending(self, user_id, category)` - Handle sending messages for a user and category with improved recipient resolution.\nNow uses scheduled check-ins instead of random replacement.\n  - `CommunicationManager._get_recipient_for_service(self, user_id, messaging_service, preferences)` - Get the appropriate recipient ID for the messaging service\n  - `CommunicationManager._should_send_checkin_prompt(self, user_id, checkin_prefs)` - Determine if it's time to send a check-in prompt based on user preferences.\nFor check-ins, we respect the schedule-based approach - if the scheduler\ntriggered this function, it means it's time for a check-in during the\nscheduled period.\n  - `CommunicationManager._handle_scheduled_checkin(self, user_id, messaging_service, recipient)` - Handle scheduled check-in messages based on user preferences and frequency.\n  - `CommunicationManager._send_checkin_prompt(self, user_id, messaging_service, recipient)` - Send a check-in prompt message to start the daily check-in flow.\n  - `CommunicationManager._send_ai_generated_message(self, user_id, category, messaging_service, recipient)` - Send an AI-generated personalized message using contextual AI\n  - `CommunicationManager._send_predefined_message(self, user_id, category, messaging_service, recipient)` - Send a pre-defined message from the user's message library\n  - `CommunicationManager.get_available_channels(self)` - Get list of available/initialized channels\n  - `CommunicationManager.is_channel_ready(self, channel_name)` - Check if a specific channel is ready\n  - `CommunicationManager.handle_task_reminder(self, user_id, task_id)` - Handle sending task reminders for a user.\n  - `CommunicationManager._create_task_reminder_message(self, task)` - Create a formatted task reminder message.\n\n### bot/conversation_manager.py\n**Functions:**\n- `__init__(self)` - Initialize the object.\n- `handle_inbound_message(self, user_id, message_text)` - Primary entry point. Takes user's message and returns a (reply_text, completed).\n\nNow defaults to contextual chat for all messages unless user is in a specific flow\nor uses a special command.\n- `start_daily_checkin(self, user_id)` - Public method to start a daily check-in flow for a user.\nThis is the proper way to initiate check-ins from external modules.\n- `_start_dynamic_checkin(self, user_id)` - Start a dynamic check-in flow based on user preferences\n- `_get_personalized_welcome(self, user_id, question_count)` - Generate a personalized welcome message based on user history\n- `_get_next_question(self, user_id, user_state)` - Get the next question in the check-in flow\n- `_get_question_text(self, question_key, previous_data)` - Get appropriate question text based on question type and previous responses\n- `_handle_daily_checkin(self, user_id, user_state, message_text)` - Enhanced daily check-in flow with dynamic questions and better validation\n- `_validate_response(self, question_key, response)` - Validate user response based on question type\n- `_complete_checkin(self, user_id, user_state)` - Complete the check-in and provide personalized feedback\n- `_generate_completion_message(self, user_id, data)` - Generate a personalized completion message based on responses\n- `handle_contextual_question(self, user_id, message_text)` - Handle a single contextual question without entering a conversation flow.\nPerfect for one-off questions that benefit from user context.\n**Classes:**\n- `ConversationManager` - No description\n  - `ConversationManager.__init__(self)` - Initialize the object.\n  - `ConversationManager.handle_inbound_message(self, user_id, message_text)` - Primary entry point. Takes user's message and returns a (reply_text, completed).\n\nNow defaults to contextual chat for all messages unless user is in a specific flow\nor uses a special command.\n  - `ConversationManager.start_daily_checkin(self, user_id)` - Public method to start a daily check-in flow for a user.\nThis is the proper way to initiate check-ins from external modules.\n  - `ConversationManager._start_dynamic_checkin(self, user_id)` - Start a dynamic check-in flow based on user preferences\n  - `ConversationManager._get_personalized_welcome(self, user_id, question_count)` - Generate a personalized welcome message based on user history\n  - `ConversationManager._get_next_question(self, user_id, user_state)` - Get the next question in the check-in flow\n  - `ConversationManager._get_question_text(self, question_key, previous_data)` - Get appropriate question text based on question type and previous responses\n  - `ConversationManager._handle_daily_checkin(self, user_id, user_state, message_text)` - Enhanced daily check-in flow with dynamic questions and better validation\n  - `ConversationManager._validate_response(self, question_key, response)` - Validate user response based on question type\n  - `ConversationManager._complete_checkin(self, user_id, user_state)` - Complete the check-in and provide personalized feedback\n  - `ConversationManager._generate_completion_message(self, user_id, data)` - Generate a personalized completion message based on responses\n  - `ConversationManager.handle_contextual_question(self, user_id, message_text)` - Handle a single contextual question without entering a conversation flow.\nPerfect for one-off questions that benefit from user context.\n\n### bot/discord_bot.py\n**Functions:**\n- `__init__(self, config)` - Initialize the object.\n- `channel_type(self)` - Get the channel type for Discord bot.\n\nReturns:\n    ChannelType.ASYNC: Discord bot operates asynchronously\n- `_check_dns_resolution(self, hostname)` - Check DNS resolution for a hostname with fallback to alternative DNS servers\n- `_check_network_connectivity(self, hostname, port)` - Check if network connectivity is available to Discord servers with fallback endpoints\n- `_wait_for_network_recovery(self, max_wait)` - Wait for network connectivity to recover with enhanced DNS and endpoint fallback.\n- `_get_detailed_connection_status(self)` - Get detailed connection status information\n- `_update_connection_status(self, status, error_info)` - Update connection status with detailed error information\n- `_run_bot_in_thread(self)` - Run Discord bot in completely isolated thread with its own event loop\n- `_register_events(self)` - Register Discord event handlers\n- `_register_commands(self)` - Register Discord commands\n- `_create_discord_embed(self, message, rich_data)` - Create a Discord embed from rich data\n- `_create_action_row(self, suggestions)` - Create a Discord action row with buttons from suggestions\n- `get_health_status(self)` - Get comprehensive health status information\n- `get_connection_status_summary(self)` - Get a human-readable connection status summary\n- `is_actually_connected(self)` - Check if the Discord bot is actually connected, regardless of initialization status\n- `start(self)` - Legacy start method.\n\nInitializes the Discord bot if not already running.\n- `stop(self)` - Legacy stop method - thread-safe.\n\nStops the Discord bot and cleans up resources.\n- `is_initialized(self)` - Legacy method for backward compatibility.\n\nReturns:\n    bool: True if the Discord bot is initialized and ready\n**Classes:**\n- `DiscordConnectionStatus` - Detailed Discord connection status for better error reporting\n- `DiscordBot` - No description\n  - `DiscordBot.__init__(self, config)` - Initialize the object.\n  - `DiscordBot.channel_type(self)` - Get the channel type for Discord bot.\n\nReturns:\n    ChannelType.ASYNC: Discord bot operates asynchronously\n  - `DiscordBot._check_dns_resolution(self, hostname)` - Check DNS resolution for a hostname with fallback to alternative DNS servers\n  - `DiscordBot._check_network_connectivity(self, hostname, port)` - Check if network connectivity is available to Discord servers with fallback endpoints\n  - `DiscordBot._wait_for_network_recovery(self, max_wait)` - Wait for network connectivity to recover with enhanced DNS and endpoint fallback.\n  - `DiscordBot._get_detailed_connection_status(self)` - Get detailed connection status information\n  - `DiscordBot._update_connection_status(self, status, error_info)` - Update connection status with detailed error information\n  - `DiscordBot._run_bot_in_thread(self)` - Run Discord bot in completely isolated thread with its own event loop\n  - `DiscordBot._register_events(self)` - Register Discord event handlers\n  - `DiscordBot._register_commands(self)` - Register Discord commands\n  - `DiscordBot._create_discord_embed(self, message, rich_data)` - Create a Discord embed from rich data\n  - `DiscordBot._create_action_row(self, suggestions)` - Create a Discord action row with buttons from suggestions\n  - `DiscordBot.get_health_status(self)` - Get comprehensive health status information\n  - `DiscordBot.get_connection_status_summary(self)` - Get a human-readable connection status summary\n  - `DiscordBot.is_actually_connected(self)` - Check if the Discord bot is actually connected, regardless of initialization status\n  - `DiscordBot.start(self)` - Legacy start method.\n\nInitializes the Discord bot if not already running.\n  - `DiscordBot.stop(self)` - Legacy stop method - thread-safe.\n\nStops the Discord bot and cleans up resources.\n  - `DiscordBot.is_initialized(self)` - Legacy method for backward compatibility.\n\nReturns:\n    bool: True if the Discord bot is initialized and ready\n\n### bot/email_bot.py\n**Functions:**\n- `__init__(self, config)` - Initialize the EmailBot with configuration.\n\nArgs:\n    config: Channel configuration object. If None, creates default config\n           with email-specific settings (max_retries=3, retry_delay=1.0,\n           backoff_multiplier=2.0)\n- `channel_type(self)` - Get the channel type for email bot.\n\nReturns:\n    ChannelType.SYNC: Email operations are synchronous\n- `_test_smtp_connection(self)` - Test SMTP connection synchronously\n- `_test_imap_connection(self)` - Test IMAP connection synchronously\n- `_send_email_sync(self, recipient, message, kwargs)` - Send email synchronously\n- `_receive_emails_sync(self)` - Receive emails synchronously\n- `start(self)` - Legacy start method.\n\nInitializes the email bot using the legacy interface.\n- `stop(self)` - Legacy stop method.\n\nShuts down the email bot using the legacy interface.\n- `is_initialized(self)` - Legacy method for backward compatibility.\n\nReturns:\n    bool: True if the email bot is initialized and ready\n**Classes:**\n- `EmailBotError` - Custom exception for email bot-related errors.\n- `EmailBot` - No description\n  - `EmailBot.__init__(self, config)` - Initialize the EmailBot with configuration.\n\nArgs:\n    config: Channel configuration object. If None, creates default config\n           with email-specific settings (max_retries=3, retry_delay=1.0,\n           backoff_multiplier=2.0)\n  - `EmailBot.channel_type(self)` - Get the channel type for email bot.\n\nReturns:\n    ChannelType.SYNC: Email operations are synchronous\n  - `EmailBot._test_smtp_connection(self)` - Test SMTP connection synchronously\n  - `EmailBot._test_imap_connection(self)` - Test IMAP connection synchronously\n  - `EmailBot._send_email_sync(self, recipient, message, kwargs)` - Send email synchronously\n  - `EmailBot._receive_emails_sync(self)` - Receive emails synchronously\n  - `EmailBot.start(self)` - Legacy start method.\n\nInitializes the email bot using the legacy interface.\n  - `EmailBot.stop(self)` - Legacy stop method.\n\nShuts down the email bot using the legacy interface.\n  - `EmailBot.is_initialized(self)` - Legacy method for backward compatibility.\n\nReturns:\n    bool: True if the email bot is initialized and ready\n\n### bot/enhanced_command_parser.py\n**Functions:**\n- `get_enhanced_command_parser()` - Get the global enhanced command parser instance\n- `parse_command(message)` - Convenience function to parse a command\n- `__init__(self)` - No description\n- `parse(self, message)` - Parse a user message into a structured command.\n\nReturns:\n    ParsingResult with parsed command, confidence, and method used\n- `_rule_based_parse(self, message)` - Parse using rule-based patterns\n- `_ai_enhanced_parse(self, message)` - Parse using AI chatbot capabilities\n- `_extract_entities_rule_based(self, intent, match, message)` - Extract entities using rule-based patterns\n- `_extract_task_entities(self, title)` - Extract task-related entities from title\n- `_extract_task_name_from_context(self, message)` - Extract task name from natural language context\n- `_extract_update_entities(self, update_text)` - Extract update entities from update text\n- `_extract_intent_from_ai_response(self, ai_response)` - Extract intent from AI response text\n- `_extract_entities_from_ai_response(self, ai_response)` - Extract entities from AI response text\n- `_calculate_confidence(self, intent, match, message)` - Calculate confidence score for a parsed command\n- `_is_valid_intent(self, intent)` - Check if intent is supported by any handler\n- `get_suggestions(self, partial_message)` - Get command suggestions based on partial input\n**Classes:**\n- `ParsingResult` - Result of command parsing with confidence and method used\n- `EnhancedCommandParser` - Enhanced command parser that combines rule-based and AI parsing\n  - `EnhancedCommandParser.__init__(self)` - No description\n  - `EnhancedCommandParser.parse(self, message)` - Parse a user message into a structured command.\n\nReturns:\n    ParsingResult with parsed command, confidence, and method used\n  - `EnhancedCommandParser._rule_based_parse(self, message)` - Parse using rule-based patterns\n  - `EnhancedCommandParser._ai_enhanced_parse(self, message)` - Parse using AI chatbot capabilities\n  - `EnhancedCommandParser._extract_entities_rule_based(self, intent, match, message)` - Extract entities using rule-based patterns\n  - `EnhancedCommandParser._extract_task_entities(self, title)` - Extract task-related entities from title\n  - `EnhancedCommandParser._extract_task_name_from_context(self, message)` - Extract task name from natural language context\n  - `EnhancedCommandParser._extract_update_entities(self, update_text)` - Extract update entities from update text\n  - `EnhancedCommandParser._extract_intent_from_ai_response(self, ai_response)` - Extract intent from AI response text\n  - `EnhancedCommandParser._extract_entities_from_ai_response(self, ai_response)` - Extract entities from AI response text\n  - `EnhancedCommandParser._calculate_confidence(self, intent, match, message)` - Calculate confidence score for a parsed command\n  - `EnhancedCommandParser._is_valid_intent(self, intent)` - Check if intent is supported by any handler\n  - `EnhancedCommandParser.get_suggestions(self, partial_message)` - Get command suggestions based on partial input\n\n### bot/interaction_handlers.py\n**Functions:**\n- `get_interaction_handler(intent)` - Get the appropriate handler for an intent\n- `get_all_handlers()` - Get all registered handlers\n- `can_handle(self, intent)` - Check if this handler can handle the given intent\n- `handle(self, user_id, parsed_command)` - Handle the interaction and return a response\n- `get_help(self)` - Get help text for this handler\n- `get_examples(self)` - Get example commands for this handler\n- `can_handle(self, intent)` - No description\n- `handle(self, user_id, parsed_command)` - No description\n- `_handle_create_task(self, user_id, entities)` - Handle task creation\n- `_parse_relative_date(self, date_str)` - Convert relative date strings to proper dates\n- `_handle_list_tasks(self, user_id, entities)` - Handle task listing with enhanced filtering and details\n- `_handle_complete_task(self, user_id, entities)` - Handle task completion\n- `_handle_delete_task(self, user_id, entities)` - Handle task deletion\n- `_handle_update_task(self, user_id, entities)` - Handle task updates\n- `_handle_task_stats(self, user_id, entities)` - Handle task statistics with dynamic time periods\n- `_find_task_by_identifier(self, tasks, identifier)` - Find a task by number, name, or task_id\n- `get_help(self)` - No description\n- `get_examples(self)` - No description\n- `can_handle(self, intent)` - No description\n- `handle(self, user_id, parsed_command)` - No description\n- `_handle_start_checkin(self, user_id)` - Handle starting a check-in by delegating to conversation manager\n- `_handle_continue_checkin(self, user_id, entities)` - Handle continuing a check-in\n- `_handle_checkin_status(self, user_id)` - Handle check-in status request\n- `get_help(self)` - No description\n- `get_examples(self)` - No description\n- `can_handle(self, intent)` - No description\n- `handle(self, user_id, parsed_command)` - No description\n- `_handle_show_profile(self, user_id)` - Handle showing user profile with comprehensive personalization data\n- `_handle_update_profile(self, user_id, entities)` - Handle comprehensive profile updates\n- `_handle_profile_stats(self, user_id)` - Handle profile statistics\n- `get_help(self)` - No description\n- `get_examples(self)` - No description\n- `can_handle(self, intent)` - No description\n- `handle(self, user_id, parsed_command)` - No description\n- `_handle_general_help(self, user_id, entities)` - Handle general help request\n- `_handle_commands_list(self, user_id)` - Handle commands list request\n- `_handle_examples(self, user_id, entities)` - Handle examples request\n- `_handle_status(self, user_id)` - Handle status request with detailed system information\n- `_handle_messages(self, user_id)` - Handle messages request with message history and settings\n- `get_help(self)` - No description\n- `get_examples(self)` - No description\n- `can_handle(self, intent)` - No description\n- `handle(self, user_id, parsed_command)` - No description\n- `_handle_show_schedule(self, user_id, entities)` - Show schedule for a specific category or all categories\n- `_handle_update_schedule(self, user_id, entities)` - Update schedule settings\n- `_handle_schedule_status(self, user_id, entities)` - Show status of schedules\n- `_handle_add_schedule_period(self, user_id, entities)` - Add a new schedule period with enhanced options\n- `_parse_time_format(self, time_str)` - Parse various time formats and convert to standard format\n- `_handle_edit_schedule_period(self, user_id, entities)` - Edit an existing schedule period with enhanced options\n- `get_help(self)` - No description\n- `get_examples(self)` - No description\n- `can_handle(self, intent)` - No description\n- `handle(self, user_id, parsed_command)` - No description\n- `_handle_show_analytics(self, user_id, entities)` - Show comprehensive analytics overview\n- `_handle_mood_trends(self, user_id, entities)` - Show mood trends analysis\n- `_handle_habit_analysis(self, user_id, entities)` - Show habit analysis\n- `_handle_sleep_analysis(self, user_id, entities)` - Show sleep analysis\n- `_handle_wellness_score(self, user_id, entities)` - Show wellness score\n- `_handle_checkin_history(self, user_id, entities)` - Show check-in history\n- `_handle_completion_rate(self, user_id, entities)` - Show completion rate\n- `get_help(self)` - No description\n- `get_examples(self)` - No description\n**Classes:**\n- `InteractionResponse` - Response from an interaction handler\n- `ParsedCommand` - Parsed command with intent and entities\n- `InteractionHandler` - Abstract base class for interaction handlers\n  - `InteractionHandler.can_handle(self, intent)` - Check if this handler can handle the given intent\n  - `InteractionHandler.handle(self, user_id, parsed_command)` - Handle the interaction and return a response\n  - `InteractionHandler.get_help(self)` - Get help text for this handler\n  - `InteractionHandler.get_examples(self)` - Get example commands for this handler\n- `TaskManagementHandler` - Handler for task management interactions\n  - `TaskManagementHandler.can_handle(self, intent)` - No description\n  - `TaskManagementHandler.handle(self, user_id, parsed_command)` - No description\n  - `TaskManagementHandler._handle_create_task(self, user_id, entities)` - Handle task creation\n  - `TaskManagementHandler._parse_relative_date(self, date_str)` - Convert relative date strings to proper dates\n  - `TaskManagementHandler._handle_list_tasks(self, user_id, entities)` - Handle task listing with enhanced filtering and details\n  - `TaskManagementHandler._handle_complete_task(self, user_id, entities)` - Handle task completion\n  - `TaskManagementHandler._handle_delete_task(self, user_id, entities)` - Handle task deletion\n  - `TaskManagementHandler._handle_update_task(self, user_id, entities)` - Handle task updates\n  - `TaskManagementHandler._handle_task_stats(self, user_id, entities)` - Handle task statistics with dynamic time periods\n  - `TaskManagementHandler._find_task_by_identifier(self, tasks, identifier)` - Find a task by number, name, or task_id\n  - `TaskManagementHandler.get_help(self)` - No description\n  - `TaskManagementHandler.get_examples(self)` - No description\n- `CheckinHandler` - Handler for check-in interactions\n  - `CheckinHandler.can_handle(self, intent)` - No description\n  - `CheckinHandler.handle(self, user_id, parsed_command)` - No description\n  - `CheckinHandler._handle_start_checkin(self, user_id)` - Handle starting a check-in by delegating to conversation manager\n  - `CheckinHandler._handle_continue_checkin(self, user_id, entities)` - Handle continuing a check-in\n  - `CheckinHandler._handle_checkin_status(self, user_id)` - Handle check-in status request\n  - `CheckinHandler.get_help(self)` - No description\n  - `CheckinHandler.get_examples(self)` - No description\n- `ProfileHandler` - Handler for profile management interactions\n  - `ProfileHandler.can_handle(self, intent)` - No description\n  - `ProfileHandler.handle(self, user_id, parsed_command)` - No description\n  - `ProfileHandler._handle_show_profile(self, user_id)` - Handle showing user profile with comprehensive personalization data\n  - `ProfileHandler._handle_update_profile(self, user_id, entities)` - Handle comprehensive profile updates\n  - `ProfileHandler._handle_profile_stats(self, user_id)` - Handle profile statistics\n  - `ProfileHandler.get_help(self)` - No description\n  - `ProfileHandler.get_examples(self)` - No description\n- `HelpHandler` - Handler for help and command information\n  - `HelpHandler.can_handle(self, intent)` - No description\n  - `HelpHandler.handle(self, user_id, parsed_command)` - No description\n  - `HelpHandler._handle_general_help(self, user_id, entities)` - Handle general help request\n  - `HelpHandler._handle_commands_list(self, user_id)` - Handle commands list request\n  - `HelpHandler._handle_examples(self, user_id, entities)` - Handle examples request\n  - `HelpHandler._handle_status(self, user_id)` - Handle status request with detailed system information\n  - `HelpHandler._handle_messages(self, user_id)` - Handle messages request with message history and settings\n  - `HelpHandler.get_help(self)` - No description\n  - `HelpHandler.get_examples(self)` - No description\n- `ScheduleManagementHandler` - Handler for schedule management interactions\n  - `ScheduleManagementHandler.can_handle(self, intent)` - No description\n  - `ScheduleManagementHandler.handle(self, user_id, parsed_command)` - No description\n  - `ScheduleManagementHandler._handle_show_schedule(self, user_id, entities)` - Show schedule for a specific category or all categories\n  - `ScheduleManagementHandler._handle_update_schedule(self, user_id, entities)` - Update schedule settings\n  - `ScheduleManagementHandler._handle_schedule_status(self, user_id, entities)` - Show status of schedules\n  - `ScheduleManagementHandler._handle_add_schedule_period(self, user_id, entities)` - Add a new schedule period with enhanced options\n  - `ScheduleManagementHandler._parse_time_format(self, time_str)` - Parse various time formats and convert to standard format\n  - `ScheduleManagementHandler._handle_edit_schedule_period(self, user_id, entities)` - Edit an existing schedule period with enhanced options\n  - `ScheduleManagementHandler.get_help(self)` - No description\n  - `ScheduleManagementHandler.get_examples(self)` - No description\n- `AnalyticsHandler` - Handler for analytics and insights interactions\n  - `AnalyticsHandler.can_handle(self, intent)` - No description\n  - `AnalyticsHandler.handle(self, user_id, parsed_command)` - No description\n  - `AnalyticsHandler._handle_show_analytics(self, user_id, entities)` - Show comprehensive analytics overview\n  - `AnalyticsHandler._handle_mood_trends(self, user_id, entities)` - Show mood trends analysis\n  - `AnalyticsHandler._handle_habit_analysis(self, user_id, entities)` - Show habit analysis\n  - `AnalyticsHandler._handle_sleep_analysis(self, user_id, entities)` - Show sleep analysis\n  - `AnalyticsHandler._handle_wellness_score(self, user_id, entities)` - Show wellness score\n  - `AnalyticsHandler._handle_checkin_history(self, user_id, entities)` - Show check-in history\n  - `AnalyticsHandler._handle_completion_rate(self, user_id, entities)` - Show completion rate\n  - `AnalyticsHandler.get_help(self)` - No description\n  - `AnalyticsHandler.get_examples(self)` - No description\n\n### bot/interaction_manager.py\n**Functions:**\n- `get_interaction_manager()` - Get the global interaction manager instance\n- `handle_user_message(user_id, message, channel_type)` - Convenience function to handle a user message\n- `__init__(self)` - No description\n- `handle_message(self, user_id, message, channel_type)` - Main entry point for handling user messages.\n\nArgs:\n    user_id: The user's ID\n    message: The user's message\n    channel_type: Type of channel (discord, email, telegram, etc.)\n    \nReturns:\n    InteractionResponse with appropriate response\n- `_handle_structured_command(self, user_id, parsing_result, channel_type)` - Handle a structured command using interaction handlers\n- `_handle_contextual_chat(self, user_id, message, channel_type)` - Handle contextual chat using AI chatbot\n- `_enhance_response_with_ai(self, user_id, response, parsed_command)` - Enhance a structured response with AI contextual information\n- `_get_help_response(self, user_id, message)` - Get a help response when command parsing fails\n- `get_available_commands(self, user_id)` - Get list of available commands for the user\n- `get_user_suggestions(self, user_id, context)` - Get personalized suggestions for the user\n- `handle_help_request(self, user_id, topic)` - Handle help requests with topic-specific information\n**Classes:**\n- `InteractionManager` - Main manager for handling user interactions across all channels\n  - `InteractionManager.__init__(self)` - No description\n  - `InteractionManager.handle_message(self, user_id, message, channel_type)` - Main entry point for handling user messages.\n\nArgs:\n    user_id: The user's ID\n    message: The user's message\n    channel_type: Type of channel (discord, email, telegram, etc.)\n    \nReturns:\n    InteractionResponse with appropriate response\n  - `InteractionManager._handle_structured_command(self, user_id, parsing_result, channel_type)` - Handle a structured command using interaction handlers\n  - `InteractionManager._handle_contextual_chat(self, user_id, message, channel_type)` - Handle contextual chat using AI chatbot\n  - `InteractionManager._enhance_response_with_ai(self, user_id, response, parsed_command)` - Enhance a structured response with AI contextual information\n  - `InteractionManager._get_help_response(self, user_id, message)` - Get a help response when command parsing fails\n  - `InteractionManager.get_available_commands(self, user_id)` - Get list of available commands for the user\n  - `InteractionManager.get_user_suggestions(self, user_id, context)` - Get personalized suggestions for the user\n  - `InteractionManager.handle_help_request(self, user_id, topic)` - Handle help requests with topic-specific information\n\n### bot/telegram_bot.py\n**Functions:**\n- `run_telegram_bot_in_background()` - Run the Telegram bot in the background.\n\nCreates and starts a Telegram bot instance for background operation.\n- `__init__(self, config)` - Initialize the object.\n- `channel_type(self)` - Get the channel type for Telegram bot.\n\nReturns:\n    ChannelType.ASYNC: Telegram bot operates asynchronously\n- `run_polling(self)` - Run Telegram polling safely in a separate thread with an event loop.\n- `start(self)` - Legacy start method - calls the new async initialize.\n\nInitializes the Telegram bot using the legacy interface.\n- `stop(self)` - Legacy stop method - calls the new async shutdown.\n\nShuts down the Telegram bot using the legacy interface.\n- `is_initialized(self)` - Legacy method for backward compatibility.\n\nReturns:\n    bool: True if the Telegram bot is initialized and ready\n- `scream_command(self, update, context)` - Handle the /scream command.\n\nToggles screaming mode for the bot's responses.\n\nArgs:\n    update: Telegram update object\n    context: Callback context\n- `whisper_command(self, update, context)` - Handle the /whisper command.\n\nToggles whispering mode for the bot's responses.\n\nArgs:\n    update: Telegram update object\n    context: Callback context\n- `cancel(self, update, context)` - No description\n- `add_message_command(self, update, context)` - No description\n- `prompt_category_selection(self, update, context, action, prompt_message, is_message)` - Prompt user to select a category\n- `handle_category_selection(self, update, context)` - Handle category selection\n- `prompt_for_message(self, update, context, category)` - Prompt user to enter a message\n- `message_received(self, update, context)` - Handle received message text\n- `get_base_days_keyboard(self)` - Create a keyboard with days of the week for user selection.\n\nReturns:\n    InlineKeyboardMarkup: Keyboard with days of the week and submit button\n- `prompt_for_days(self, update, context)` - No description\n- `days_selected(self, update, context)` - Handle days selection\n- `prompt_for_time_periods(self, update, context)` - No description\n- `time_periods_selected(self, update, context)` - Handle time periods selection\n- `update_time_periods_keyboard(self, update, context, selected)` - Update the time periods keyboard to reflect current selections.\n\nArgs:\n    update: Telegram update object\n    context: Callback context\n    selected: List of currently selected time periods\n- `save_new_message(self, update, context)` - Save a new message with selected days and time periods.\n\nArgs:\n    update: Telegram update object\n    context: Callback context containing message data\n- `view_edit_schedule_command(self, update, context)` - View/edit schedule command\n- `handle_schedule_category_selection(self, update, context)` - Handle schedule category selection\n- `show_schedule(self, update, context, category)` - No description\n- `handle_period_selection(self, update, context)` - Handle period selection\n- `edit_schedule_period(self, update, context)` - Edit schedule period\n- `add_new_period(self, update, context)` - Handle adding a new time period to the schedule.\n\nArgs:\n    update: Telegram update object\n    context: Callback context\n    \nReturns:\n    int: Next conversation state\n- `add_message_conv_handler(self)` - Create a conversation handler for adding new messages.\n\nReturns:\n    ConversationHandler: Configured conversation handler for message addition flow\n- `schedule_conv_handler(self)` - Create a conversation handler for schedule management.\n\nReturns:\n    ConversationHandler: Configured conversation handler for schedule editing flow\n- `daily_checkin_conv_handler(self)` - Create a conversation handler for daily check-in flow.\n\nReturns:\n    ConversationHandler: Configured conversation handler for daily check-in flow\n- `ensure_user_exists(self, update)` - No description\n- `get_user_categories(self, user_id)` - Get user's message categories.\n- `handle_user_command(self, update, context)` - Handle /user command to show user information.\n- `get_user_categories_for_telegram(self, user_id)` - Get user's message categories for Telegram bot.\n**Classes:**\n- `TelegramBotError` - Custom exception for Telegram bot-related errors.\n- `TelegramBot` - No description\n  - `TelegramBot.__init__(self, config)` - Initialize the object.\n  - `TelegramBot.channel_type(self)` - Get the channel type for Telegram bot.\n\nReturns:\n    ChannelType.ASYNC: Telegram bot operates asynchronously\n  - `TelegramBot.run_polling(self)` - Run Telegram polling safely in a separate thread with an event loop.\n  - `TelegramBot.start(self)` - Legacy start method - calls the new async initialize.\n\nInitializes the Telegram bot using the legacy interface.\n  - `TelegramBot.stop(self)` - Legacy stop method - calls the new async shutdown.\n\nShuts down the Telegram bot using the legacy interface.\n  - `TelegramBot.is_initialized(self)` - Legacy method for backward compatibility.\n\nReturns:\n    bool: True if the Telegram bot is initialized and ready\n  - `TelegramBot.scream_command(self, update, context)` - Handle the /scream command.\n\nToggles screaming mode for the bot's responses.\n\nArgs:\n    update: Telegram update object\n    context: Callback context\n  - `TelegramBot.whisper_command(self, update, context)` - Handle the /whisper command.\n\nToggles whispering mode for the bot's responses.\n\nArgs:\n    update: Telegram update object\n    context: Callback context\n  - `TelegramBot.cancel(self, update, context)` - No description\n  - `TelegramBot.add_message_command(self, update, context)` - No description\n  - `TelegramBot.prompt_category_selection(self, update, context, action, prompt_message, is_message)` - Prompt user to select a category\n  - `TelegramBot.handle_category_selection(self, update, context)` - Handle category selection\n  - `TelegramBot.prompt_for_message(self, update, context, category)` - Prompt user to enter a message\n  - `TelegramBot.message_received(self, update, context)` - Handle received message text\n  - `TelegramBot.get_base_days_keyboard(self)` - Create a keyboard with days of the week for user selection.\n\nReturns:\n    InlineKeyboardMarkup: Keyboard with days of the week and submit button\n  - `TelegramBot.prompt_for_days(self, update, context)` - No description\n  - `TelegramBot.days_selected(self, update, context)` - Handle days selection\n  - `TelegramBot.prompt_for_time_periods(self, update, context)` - No description\n  - `TelegramBot.time_periods_selected(self, update, context)` - Handle time periods selection\n  - `TelegramBot.update_time_periods_keyboard(self, update, context, selected)` - Update the time periods keyboard to reflect current selections.\n\nArgs:\n    update: Telegram update object\n    context: Callback context\n    selected: List of currently selected time periods\n  - `TelegramBot.save_new_message(self, update, context)` - Save a new message with selected days and time periods.\n\nArgs:\n    update: Telegram update object\n    context: Callback context containing message data\n  - `TelegramBot.view_edit_schedule_command(self, update, context)` - View/edit schedule command\n  - `TelegramBot.handle_schedule_category_selection(self, update, context)` - Handle schedule category selection\n  - `TelegramBot.show_schedule(self, update, context, category)` - No description\n  - `TelegramBot.handle_period_selection(self, update, context)` - Handle period selection\n  - `TelegramBot.edit_schedule_period(self, update, context)` - Edit schedule period\n  - `TelegramBot.add_new_period(self, update, context)` - Handle adding a new time period to the schedule.\n\nArgs:\n    update: Telegram update object\n    context: Callback context\n    \nReturns:\n    int: Next conversation state\n  - `TelegramBot.add_message_conv_handler(self)` - Create a conversation handler for adding new messages.\n\nReturns:\n    ConversationHandler: Configured conversation handler for message addition flow\n  - `TelegramBot.schedule_conv_handler(self)` - Create a conversation handler for schedule management.\n\nReturns:\n    ConversationHandler: Configured conversation handler for schedule editing flow\n  - `TelegramBot.daily_checkin_conv_handler(self)` - Create a conversation handler for daily check-in flow.\n\nReturns:\n    ConversationHandler: Configured conversation handler for daily check-in flow\n  - `TelegramBot.ensure_user_exists(self, update)` - No description\n  - `TelegramBot.get_user_categories(self, user_id)` - Get user's message categories.\n  - `TelegramBot.handle_user_command(self, update, context)` - Handle /user command to show user information.\n  - `TelegramBot.get_user_categories_for_telegram(self, user_id)` - Get user's message categories for Telegram bot.\n\n### bot/user_context_manager.py\n**Functions:**\n- `__init__(self)` - Initialize the UserContextManager.\n\nSets up conversation history storage for tracking user interactions.\n- `get_current_user_context(self, include_conversation_history)` - Get context for the currently logged-in user using the existing UserContext singleton.\n\nArgs:\n    include_conversation_history: Whether to include recent conversation history\n    \nReturns:\n    Dict containing all relevant user context for current user\n- `get_user_context(self, user_id, include_conversation_history)` - Get comprehensive user context for AI conversation.\n\nArgs:\n    user_id: The user's ID\n    include_conversation_history: Whether to include recent conversation history\n    \nReturns:\n    Dict containing all relevant user context\n- `_get_user_profile(self, user_id)` - Get basic user profile information using existing user infrastructure.\n- `_get_recent_activity(self, user_id)` - Get recent user activity and responses.\n- `_get_conversation_insights(self, user_id)` - Get insights from recent chat interactions.\n- `_get_user_preferences(self, user_id)` - Get user preferences using new structure.\n- `_get_mood_trends(self, user_id)` - Analyze recent mood and energy trends.\n- `_get_active_schedules(self, schedules)` - Get list of currently active schedule periods.\n\nArgs:\n    schedules: Dictionary containing schedule periods\n    \nReturns:\n    list: List of active schedule period names\n- `_get_conversation_history(self, user_id)` - Get recent conversation history with this user.\n- `add_conversation_exchange(self, user_id, user_message, ai_response)` - Add a conversation exchange to history.\n\nArgs:\n    user_id: The user's ID\n    user_message: The user's message\n    ai_response: The AI's response\n- `_get_minimal_context(self, user_id)` - Fallback minimal context if full context generation fails.\n\nArgs:\n    user_id: The user's ID (can be None for anonymous context)\n    \nReturns:\n    dict: Minimal context with basic information\n- `format_context_for_ai(self, context)` - Format user context into a concise string for AI prompt.\n\nArgs:\n    context: User context dictionary\n    \nReturns:\n    str: Formatted context string for AI consumption\n**Classes:**\n- `UserContextManager` - Manages rich user context for AI conversations.\n  - `UserContextManager.__init__(self)` - Initialize the UserContextManager.\n\nSets up conversation history storage for tracking user interactions.\n  - `UserContextManager.get_current_user_context(self, include_conversation_history)` - Get context for the currently logged-in user using the existing UserContext singleton.\n\nArgs:\n    include_conversation_history: Whether to include recent conversation history\n    \nReturns:\n    Dict containing all relevant user context for current user\n  - `UserContextManager.get_user_context(self, user_id, include_conversation_history)` - Get comprehensive user context for AI conversation.\n\nArgs:\n    user_id: The user's ID\n    include_conversation_history: Whether to include recent conversation history\n    \nReturns:\n    Dict containing all relevant user context\n  - `UserContextManager._get_user_profile(self, user_id)` - Get basic user profile information using existing user infrastructure.\n  - `UserContextManager._get_recent_activity(self, user_id)` - Get recent user activity and responses.\n  - `UserContextManager._get_conversation_insights(self, user_id)` - Get insights from recent chat interactions.\n  - `UserContextManager._get_user_preferences(self, user_id)` - Get user preferences using new structure.\n  - `UserContextManager._get_mood_trends(self, user_id)` - Analyze recent mood and energy trends.\n  - `UserContextManager._get_active_schedules(self, schedules)` - Get list of currently active schedule periods.\n\nArgs:\n    schedules: Dictionary containing schedule periods\n    \nReturns:\n    list: List of active schedule period names\n  - `UserContextManager._get_conversation_history(self, user_id)` - Get recent conversation history with this user.\n  - `UserContextManager.add_conversation_exchange(self, user_id, user_message, ai_response)` - Add a conversation exchange to history.\n\nArgs:\n    user_id: The user's ID\n    user_message: The user's message\n    ai_response: The AI's response\n  - `UserContextManager._get_minimal_context(self, user_id)` - Fallback minimal context if full context generation fails.\n\nArgs:\n    user_id: The user's ID (can be None for anonymous context)\n    \nReturns:\n    dict: Minimal context with basic information\n  - `UserContextManager.format_context_for_ai(self, context)` - Format user context into a concise string for AI prompt.\n\nArgs:\n    context: User context dictionary\n    \nReturns:\n    str: Formatted context string for AI consumption\n\n### core/auto_cleanup.py\n**Functions:**\n- `get_last_cleanup_timestamp()` - Get the timestamp of the last cleanup from tracker file.\n- `update_cleanup_timestamp()` - Update the cleanup tracker file with current timestamp.\n- `should_run_cleanup(interval_days)` - Check if cleanup should run based on last cleanup time.\n- `find_pycache_dirs(root_path)` - Find all __pycache__ directories recursively.\n- `find_pyc_files(root_path)` - Find all .pyc files recursively.\n- `calculate_cache_size(pycache_dirs, pyc_files)` - Calculate total size of cache files.\n- `perform_cleanup(root_path)` - Perform the actual cleanup of cache files.\n- `auto_cleanup_if_needed(root_path, interval_days)` - Main function to check if cleanup is needed and perform it if so.\nReturns True if cleanup was performed, False if not needed.\n- `get_cleanup_status()` - Get information about the cleanup status.\n\n### core/backup_manager.py\n**Functions:**\n- `create_automatic_backup(operation_name)` - Create an automatic backup before major operations.\n\nArgs:\n    operation_name: Name of the operation being performed\n\nReturns:\n    Path to the backup file, or None if failed\n- `validate_system_state()` - Validate the current system state for consistency.\n\nReturns:\n    True if system is in a valid state, False otherwise\n- `perform_safe_operation(operation_func)` - Perform an operation with automatic backup and rollback capability.\n\nArgs:\n    operation_func: Function to perform\n    *args: Arguments for the operation function\n    **kwargs: Keyword arguments for the operation function\n\nReturns:\n    True if operation succeeded, False if it failed and was rolled back\n- `__init__(self)` - Initialize the BackupManager with default settings.\n\nSets up backup directory, maximum backup count, and ensures backup directory exists.\n- `ensure_backup_directory(self)` - Ensure backup directory exists.\n- `create_backup(self, backup_name, include_users, include_config, include_logs)` - Create a comprehensive backup of the system.\n\nArgs:\n    backup_name: Custom name for the backup (auto-generated if None)\n    include_users: Whether to include user data\n    include_config: Whether to include configuration files\n    include_logs: Whether to include log files\n\nReturns:\n    Path to the backup file, or None if failed\n- `_backup_user_data(self, zipf)` - Backup all user data directories.\n- `_backup_config_files(self, zipf)` - Backup configuration files.\n- `_backup_log_files(self, zipf)` - Backup log files.\n- `_create_backup_manifest(self, zipf, backup_name, include_users, include_config, include_logs)` - Create a manifest file describing the backup contents.\n- `_add_directory_to_zip(self, zipf, directory, zip_path)` - Recursively add a directory to the zip file.\n- `_cleanup_old_backups(self)` - Remove old backups to keep only the most recent ones.\n- `list_backups(self)` - List all available backups with metadata.\n- `_get_backup_info(self, backup_path)` - Get information about a specific backup.\n- `restore_backup(self, backup_path, restore_users, restore_config)` - Restore from a backup file.\n\nArgs:\n    backup_path: Path to the backup file\n    restore_users: Whether to restore user data\n    restore_config: Whether to restore configuration files\n\nReturns:\n    True if restoration was successful, False otherwise\n- `_restore_user_data(self, zipf)` - Restore user data from backup.\n- `_restore_config_files(self, zipf)` - Restore configuration files from backup.\n- `validate_backup(self, backup_path)` - Validate a backup file for integrity and completeness.\n\nArgs:\n    backup_path: Path to the backup file\n\nReturns:\n    Tuple of (is_valid, list_of_errors)\n**Classes:**\n- `BackupManager` - Manages automatic backups and rollback operations.\n  - `BackupManager.__init__(self)` - Initialize the BackupManager with default settings.\n\nSets up backup directory, maximum backup count, and ensures backup directory exists.\n  - `BackupManager.ensure_backup_directory(self)` - Ensure backup directory exists.\n  - `BackupManager.create_backup(self, backup_name, include_users, include_config, include_logs)` - Create a comprehensive backup of the system.\n\nArgs:\n    backup_name: Custom name for the backup (auto-generated if None)\n    include_users: Whether to include user data\n    include_config: Whether to include configuration files\n    include_logs: Whether to include log files\n\nReturns:\n    Path to the backup file, or None if failed\n  - `BackupManager._backup_user_data(self, zipf)` - Backup all user data directories.\n  - `BackupManager._backup_config_files(self, zipf)` - Backup configuration files.\n  - `BackupManager._backup_log_files(self, zipf)` - Backup log files.\n  - `BackupManager._create_backup_manifest(self, zipf, backup_name, include_users, include_config, include_logs)` - Create a manifest file describing the backup contents.\n  - `BackupManager._add_directory_to_zip(self, zipf, directory, zip_path)` - Recursively add a directory to the zip file.\n  - `BackupManager._cleanup_old_backups(self)` - Remove old backups to keep only the most recent ones.\n  - `BackupManager.list_backups(self)` - List all available backups with metadata.\n  - `BackupManager._get_backup_info(self, backup_path)` - Get information about a specific backup.\n  - `BackupManager.restore_backup(self, backup_path, restore_users, restore_config)` - Restore from a backup file.\n\nArgs:\n    backup_path: Path to the backup file\n    restore_users: Whether to restore user data\n    restore_config: Whether to restore configuration files\n\nReturns:\n    True if restoration was successful, False otherwise\n  - `BackupManager._restore_user_data(self, zipf)` - Restore user data from backup.\n  - `BackupManager._restore_config_files(self, zipf)` - Restore configuration files from backup.\n  - `BackupManager.validate_backup(self, backup_path)` - Validate a backup file for integrity and completeness.\n\nArgs:\n    backup_path: Path to the backup file\n\nReturns:\n    Tuple of (is_valid, list_of_errors)\n\n### core/checkin_analytics.py\n**Functions:**\n- `__init__(self)` - Initialize the CheckinAnalytics instance.\n\nThis class provides analytics and insights from daily check-in data.\n- `get_mood_trends(self, user_id, days)` - Analyze mood trends over the specified period\n- `get_habit_analysis(self, user_id, days)` - Analyze habit patterns from check-in data\n- `get_sleep_analysis(self, user_id, days)` - Analyze sleep patterns from check-in data\n- `get_wellness_score(self, user_id, days)` - Calculate overall wellness score from check-in data\n- `get_checkin_history(self, user_id, days)` - Get check-in history with proper date formatting\n- `get_completion_rate(self, user_id, days)` - Calculate overall completion rate for check-ins\n- `get_task_weekly_stats(self, user_id, days)` - Calculate weekly statistics for tasks\n- `_get_mood_distribution(self, moods)` - Calculate distribution of mood scores\n- `_calculate_streak(self, checkins, habit_key)` - Calculate current and best streaks for a habit\n- `_get_habit_status(self, completion_rate)` - Get status description for habit completion rate\n- `_calculate_overall_completion(self, habit_stats)` - Calculate overall habit completion rate\n- `_calculate_sleep_consistency(self, hours)` - Calculate sleep consistency (lower variance = more consistent)\n- `_get_sleep_recommendations(self, avg_hours, avg_quality, poor_days)` - Generate sleep recommendations\n- `_calculate_mood_score(self, checkins)` - Calculate mood score (0-100)\n- `_calculate_habit_score(self, checkins)` - Calculate habit score (0-100)\n- `_calculate_sleep_score(self, checkins)` - Calculate sleep score (0-100)\n- `_get_score_level(self, score)` - Get wellness score level description\n- `_get_wellness_recommendations(self, mood_score, habit_score, sleep_score)` - Generate wellness recommendations based on component scores\n**Classes:**\n- `CheckinAnalytics` - No description\n  - `CheckinAnalytics.__init__(self)` - Initialize the CheckinAnalytics instance.\n\nThis class provides analytics and insights from daily check-in data.\n  - `CheckinAnalytics.get_mood_trends(self, user_id, days)` - Analyze mood trends over the specified period\n  - `CheckinAnalytics.get_habit_analysis(self, user_id, days)` - Analyze habit patterns from check-in data\n  - `CheckinAnalytics.get_sleep_analysis(self, user_id, days)` - Analyze sleep patterns from check-in data\n  - `CheckinAnalytics.get_wellness_score(self, user_id, days)` - Calculate overall wellness score from check-in data\n  - `CheckinAnalytics.get_checkin_history(self, user_id, days)` - Get check-in history with proper date formatting\n  - `CheckinAnalytics.get_completion_rate(self, user_id, days)` - Calculate overall completion rate for check-ins\n  - `CheckinAnalytics.get_task_weekly_stats(self, user_id, days)` - Calculate weekly statistics for tasks\n  - `CheckinAnalytics._get_mood_distribution(self, moods)` - Calculate distribution of mood scores\n  - `CheckinAnalytics._calculate_streak(self, checkins, habit_key)` - Calculate current and best streaks for a habit\n  - `CheckinAnalytics._get_habit_status(self, completion_rate)` - Get status description for habit completion rate\n  - `CheckinAnalytics._calculate_overall_completion(self, habit_stats)` - Calculate overall habit completion rate\n  - `CheckinAnalytics._calculate_sleep_consistency(self, hours)` - Calculate sleep consistency (lower variance = more consistent)\n  - `CheckinAnalytics._get_sleep_recommendations(self, avg_hours, avg_quality, poor_days)` - Generate sleep recommendations\n  - `CheckinAnalytics._calculate_mood_score(self, checkins)` - Calculate mood score (0-100)\n  - `CheckinAnalytics._calculate_habit_score(self, checkins)` - Calculate habit score (0-100)\n  - `CheckinAnalytics._calculate_sleep_score(self, checkins)` - Calculate sleep score (0-100)\n  - `CheckinAnalytics._get_score_level(self, score)` - Get wellness score level description\n  - `CheckinAnalytics._get_wellness_recommendations(self, mood_score, habit_score, sleep_score)` - Generate wellness recommendations based on component scores\n\n### core/config.py\n**Functions:**\n- `validate_core_paths()` - Validate that all core paths are accessible and can be created if needed.\n- `validate_ai_configuration()` - Validate AI-related configuration settings.\n- `validate_communication_channels()` - Validate communication channel configurations.\n- `validate_logging_configuration()` - Validate logging configuration.\n- `validate_scheduler_configuration()` - Validate scheduler configuration.\n- `validate_file_organization_settings()` - Validate file organization settings.\n- `validate_environment_variables()` - Check for common environment variable issues.\n- `validate_all_configuration()` - Comprehensive configuration validation that checks all aspects of the configuration.\n\nReturns:\n    Dict containing validation results with the following structure:\n    {\n        'valid': bool,\n        'errors': List[str],\n        'warnings': List[str],\n        'available_channels': List[str],\n        'summary': str\n    }\n- `validate_and_raise_if_invalid()` - Validate configuration and raise ConfigValidationError if invalid.\n\nReturns:\n    List of available communication channels if validation passes.\n\nRaises:\n    ConfigValidationError: If configuration is invalid with detailed error information.\n- `print_configuration_report()` - Print a detailed configuration report to the console.\n- `get_user_data_dir(user_id)` - Get the data directory for a specific user.\n- `get_user_file_path(user_id, file_type)` - Get the file path for a specific user file type.\n- `ensure_user_directory(user_id)` - Ensure user directory exists if using subdirectories.\n- `validate_telegram_config()` - Validate Telegram configuration (currently deactivated).\n\nRaises:\n    ConfigurationError: Always raised as Telegram channel is deactivated.\n- `validate_email_config()` - Validate email configuration settings.\n\nReturns:\n    bool: True if email configuration is valid\n    \nRaises:\n    ConfigurationError: If required email configuration variables are missing\n- `validate_discord_config()` - Validate Discord configuration settings.\n\nReturns:\n    bool: True if Discord configuration is valid\n    \nRaises:\n    ConfigurationError: If DISCORD_BOT_TOKEN is missing\n- `get_available_channels()` - Get list of available communication channels based on configuration.\n- `validate_minimum_config()` - Ensure at least one communication channel is configured\n- `__init__(self, message, missing_configs, warnings)` - Initialize the object.\n**Classes:**\n- `ConfigValidationError` - Custom exception for configuration validation errors with detailed information.\n  - `ConfigValidationError.__init__(self, message, missing_configs, warnings)` - Initialize the object.\n\n### core/error_handling.py\n**Functions:**\n- `handle_errors(operation, context, user_friendly, default_return)` - Decorator to automatically handle errors in functions.\n\nArgs:\n    operation: Description of the operation (defaults to function name)\n    context: Additional context to pass to error handler\n    user_friendly: Whether to show user-friendly error messages\n    default_return: Value to return if error occurs and can't be recovered\n- `safe_file_operation(file_path, operation, user_id, category)` - Context manager for safe file operations with automatic error handling.\n\nUsage:\n    with safe_file_operation(\"path/to/file.json\", \"loading user data\", user_id=\"123\"):\n        # file operations here\n- `handle_file_error(error, file_path, operation, user_id, category)` - Convenience function for handling file-related errors.\n- `handle_communication_error(error, channel, operation, user_id)` - Convenience function for handling communication errors.\n- `handle_configuration_error(error, setting, operation)` - Convenience function for handling configuration errors.\n- `__init__(self, message, details, recoverable)` - Initialize a new MHM error.\n\nArgs:\n    message: Human-readable error message\n    details: Optional dictionary with additional error details\n    recoverable: Whether this error can be recovered from\n- `__init__(self, name, description)` - Initialize an error recovery strategy.\n\nArgs:\n    name: The name of the recovery strategy\n    description: A description of what this strategy does\n- `can_handle(self, error)` - Check if this strategy can handle the given error.\n- `recover(self, error, context)` - Attempt to recover from the error. Returns True if successful.\n- `__init__(self)` - Initialize the FileNotFoundRecovery strategy.\n- `can_handle(self, error)` - Check if this strategy can handle the given error.\n\nArgs:\n    error: The exception to check\n    \nReturns:\n    True if this strategy can handle FileNotFoundError or file operation errors containing \"not found\"\n- `recover(self, error, context)` - Attempt to recover from the error by creating missing files with default data.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context containing file_path and other relevant information\n    \nReturns:\n    True if recovery was successful, False otherwise\n- `_get_default_data(self, file_path, context)` - Get appropriate default data based on file type.\n- `__init__(self)` - Initialize the JSONDecodeRecovery strategy.\n- `can_handle(self, error)` - Check if this strategy can handle the given error.\n\nArgs:\n    error: The exception to check\n    \nReturns:\n    True if this strategy can handle JSON decode errors or JSON-related file operation errors\n- `recover(self, error, context)` - Attempt to recover from the error by recreating corrupted JSON files.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context containing file_path and other relevant information\n    \nReturns:\n    True if recovery was successful, False otherwise\n- `_get_default_data(self, file_path, context)` - Get appropriate default data based on file type.\n- `__init__(self)` - Initialize the ErrorHandler with default recovery strategies.\n\nSets up recovery strategies for common error types like missing files and corrupted JSON.\n- `handle_error(self, error, context, operation, user_friendly)` - Handle an error with recovery strategies and logging.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context about the error\n    operation: Description of the operation that failed\n    user_friendly: Whether to show user-friendly error messages\n    \nReturns:\n    True if error was recovered from, False otherwise\n- `_log_error(self, error, context)` - Log error with context.\n- `_show_user_error(self, error, context, custom_message)` - Show user-friendly error message.\n- `_get_user_friendly_message(self, error, context)` - Convert technical error to user-friendly message.\n- `decorator(func)` - No description\n- `wrapper()` - No description\n- `__init__(self, file_path, operation, user_id, category)` - Initialize the safe file context.\n\nArgs:\n    file_path: Path to the file being operated on\n    operation: Description of the operation being performed\n    user_id: ID of the user performing the operation\n    category: Category of the operation\n- `__enter__(self)` - Enter the context manager for safe file operations.\n\nReturns:\n    self: The SafeFileContext instance\n- `__exit__(self, exc_type, exc_val, exc_tb)` - Exit the context manager and handle any exceptions.\n\nArgs:\n    exc_type: Type of exception if any occurred\n    exc_val: Exception value if any occurred\n    exc_tb: Exception traceback if any occurred\n**Classes:**\n- `MHMError` - Base exception for all MHM-specific errors.\n  - `MHMError.__init__(self, message, details, recoverable)` - Initialize a new MHM error.\n\nArgs:\n    message: Human-readable error message\n    details: Optional dictionary with additional error details\n    recoverable: Whether this error can be recovered from\n- `DataError` - Raised when there are issues with data files or data integrity.\n- `FileOperationError` - Raised when file operations fail.\n- `ConfigurationError` - Raised when configuration is invalid or missing.\n- `CommunicationError` - Raised when communication channels fail.\n- `SchedulerError` - Raised when scheduler operations fail.\n- `UserInterfaceError` - Raised when UI operations fail.\n- `AIError` - Raised when AI operations fail.\n- `ValidationError` - Raised when data validation fails.\n- `RecoveryError` - Raised when error recovery fails.\n- `ErrorRecoveryStrategy` - Base class for error recovery strategies.\n  - `ErrorRecoveryStrategy.__init__(self, name, description)` - Initialize an error recovery strategy.\n\nArgs:\n    name: The name of the recovery strategy\n    description: A description of what this strategy does\n  - `ErrorRecoveryStrategy.can_handle(self, error)` - Check if this strategy can handle the given error.\n  - `ErrorRecoveryStrategy.recover(self, error, context)` - Attempt to recover from the error. Returns True if successful.\n- `FileNotFoundRecovery` - Recovery strategy for missing files.\n  - `FileNotFoundRecovery.__init__(self)` - Initialize the FileNotFoundRecovery strategy.\n  - `FileNotFoundRecovery.can_handle(self, error)` - Check if this strategy can handle the given error.\n\nArgs:\n    error: The exception to check\n    \nReturns:\n    True if this strategy can handle FileNotFoundError or file operation errors containing \"not found\"\n  - `FileNotFoundRecovery.recover(self, error, context)` - Attempt to recover from the error by creating missing files with default data.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context containing file_path and other relevant information\n    \nReturns:\n    True if recovery was successful, False otherwise\n  - `FileNotFoundRecovery._get_default_data(self, file_path, context)` - Get appropriate default data based on file type.\n- `JSONDecodeRecovery` - Recovery strategy for corrupted JSON files.\n  - `JSONDecodeRecovery.__init__(self)` - Initialize the JSONDecodeRecovery strategy.\n  - `JSONDecodeRecovery.can_handle(self, error)` - Check if this strategy can handle the given error.\n\nArgs:\n    error: The exception to check\n    \nReturns:\n    True if this strategy can handle JSON decode errors or JSON-related file operation errors\n  - `JSONDecodeRecovery.recover(self, error, context)` - Attempt to recover from the error by recreating corrupted JSON files.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context containing file_path and other relevant information\n    \nReturns:\n    True if recovery was successful, False otherwise\n  - `JSONDecodeRecovery._get_default_data(self, file_path, context)` - Get appropriate default data based on file type.\n- `ErrorHandler` - Centralized error handler for MHM.\n  - `ErrorHandler.__init__(self)` - Initialize the ErrorHandler with default recovery strategies.\n\nSets up recovery strategies for common error types like missing files and corrupted JSON.\n  - `ErrorHandler.handle_error(self, error, context, operation, user_friendly)` - Handle an error with recovery strategies and logging.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context about the error\n    operation: Description of the operation that failed\n    user_friendly: Whether to show user-friendly error messages\n    \nReturns:\n    True if error was recovered from, False otherwise\n  - `ErrorHandler._log_error(self, error, context)` - Log error with context.\n  - `ErrorHandler._show_user_error(self, error, context, custom_message)` - Show user-friendly error message.\n  - `ErrorHandler._get_user_friendly_message(self, error, context)` - Convert technical error to user-friendly message.\n- `SafeFileContext` - Context manager for safe file operations.\n  - `SafeFileContext.__init__(self, file_path, operation, user_id, category)` - Initialize the safe file context.\n\nArgs:\n    file_path: Path to the file being operated on\n    operation: Description of the operation being performed\n    user_id: ID of the user performing the operation\n    category: Category of the operation\n  - `SafeFileContext.__enter__(self)` - Enter the context manager for safe file operations.\n\nReturns:\n    self: The SafeFileContext instance\n  - `SafeFileContext.__exit__(self, exc_type, exc_val, exc_tb)` - Exit the context manager and handle any exceptions.\n\nArgs:\n    exc_type: Type of exception if any occurred\n    exc_val: Exception value if any occurred\n    exc_tb: Exception traceback if any occurred\n\n### core/file_operations.py\n**Functions:**\n- `verify_file_access(paths)` - Verify that files exist and are accessible.\n\nArgs:\n    paths: List of file paths to verify\n    \nRaises:\n    FileOperationError: If any file is not found or inaccessible\n- `determine_file_path(file_type, identifier)` - Determine file path based on file type and identifier.\nUpdated to support new organized structure.\n\nArgs:\n    file_type: Type of file ('users', 'messages', 'schedules', 'sent_messages', 'default_messages', 'tasks')\n    identifier: Identifier for the file (format depends on file_type)\n    \nReturns:\n    str: Full file path\n    \nRaises:\n    FileOperationError: If file_type is unknown or identifier format is invalid\n- `load_json_data(file_path)` - Load data from a JSON file with comprehensive error handling and auto-create user files if missing.\n\nArgs:\n    file_path: Path to the JSON file to load\n    \nReturns:\n    dict/list: Loaded JSON data, or None if loading failed\n- `save_json_data(data, file_path)` - Save data to a JSON file with comprehensive error handling.\n\nArgs:\n    data: Data to save (must be JSON serializable)\n    file_path: Path where to save the file\n    \nReturns:\n    bool: True if successful, False if failed\n    \nRaises:\n    FileOperationError: If saving fails\n- `create_user_files(user_id, categories, user_preferences)` - Creates files for a new user in the appropriate structure.\nEnsures schedules.json contains a block for each category, plus checkin and task reminder blocks.\n\nArgs:\n    user_id: The user ID\n    categories: List of message categories the user is opted into\n    user_preferences: Optional user preferences dict to determine which files to create\n\n### core/logger.py\n**Functions:**\n- `get_log_level_from_env()` - Get log level from environment variable, default to WARNING for quiet mode.\n\nReturns:\n    int: Logging level constant (e.g., logging.WARNING, logging.DEBUG)\n- `setup_logging()` - Set up logging with file and console handlers. Ensure it is called only once.\n\nCreates a dual-handler logging system:\n- File handler: Always logs at DEBUG level with rotation\n- Console handler: Respects verbosity settings (WARNING by default)\n\nAutomatically suppresses noisy third-party library logging.\n- `get_logger(name)` - Get a logger with the specified name.\n\nArgs:\n    name: Logger name (usually __name__ from the calling module)\n    \nReturns:\n    logging.Logger: Configured logger instance\n- `suppress_noisy_logging()` - Suppress excessive logging from third-party libraries.\n\nSets logging level to WARNING for common noisy libraries to reduce log spam\nwhile keeping important warnings and errors visible.\n- `set_console_log_level(level)` - Set the console logging level while keeping file logging at DEBUG.\n\nArgs:\n    level: logging level (e.g., logging.DEBUG, logging.INFO, logging.WARNING)\n- `toggle_verbose_logging()` - Toggle between verbose (DEBUG/INFO) and quiet (WARNING+) logging for console output.\nFile logging always remains at DEBUG level.\n\nReturns:\n    bool: True if verbose mode is now enabled, False if quiet mode\n- `get_verbose_mode()` - Get current verbose mode status.\n\nReturns:\n    bool: True if verbose mode is enabled\n- `set_verbose_mode(enabled)` - Explicitly set verbose mode.\n\nArgs:\n    enabled (bool): True to enable verbose mode, False for quiet mode\n- `disable_module_logging(module_name)` - Disable debug logging for a specific module.\n\nArgs:\n    module_name: Name of the module to disable debug logging for\n- `get_log_file_info()` - Get information about current log files and their sizes.\n\nReturns:\n    dict: Information about log files including total size and file count\n- `cleanup_old_logs(max_total_size_mb)` - Clean up old log files if total size exceeds the limit.\n\nArgs:\n    max_total_size_mb (int): Maximum total size in MB before cleanup (default 50MB)\n\nReturns:\n    bool: True if cleanup was performed, False otherwise\n- `force_restart_logging()` - Force restart the logging system by clearing all handlers and reinitializing.\n\nUseful when logging configuration becomes corrupted or needs to be reset.\n\nReturns:\n    bool: True if restart was successful, False otherwise\n- `__init__(self, filename, backup_dir, maxBytes, backupCount, encoding, delay)` - No description\n- `doRollover(self)` - Do a rollover, as described in __init__().\n**Classes:**\n- `BackupDirectoryRotatingFileHandler` - Custom rotating file handler that moves rotated files to a backup directory.\n  - `BackupDirectoryRotatingFileHandler.__init__(self, filename, backup_dir, maxBytes, backupCount, encoding, delay)` - No description\n  - `BackupDirectoryRotatingFileHandler.doRollover(self)` - Do a rollover, as described in __init__().\n\n### core/message_management.py\n**Functions:**\n- `get_message_categories()` - Retrieves message categories from the environment variable CATEGORIES.\nAllows for either a comma-separated string or a JSON array.\n\nReturns:\n    List[str]: List of message categories\n- `load_default_messages(category)` - Load default messages for the given category.\n\nArgs:\n    category: The message category to load defaults for\n    \nReturns:\n    List[dict]: List of default messages for the category\n- `add_message(user_id, category, message_data, index)` - Add a new message to a user's category.\n\nArgs:\n    user_id: The user ID\n    category: The message category\n    message_data: Dictionary containing message data\n    index: Optional position to insert the message (None for append)\n- `edit_message(user_id, category, message_id, updated_data)` - Edit an existing message in a user's category.\n\nArgs:\n    user_id: The user ID\n    category: The message category\n    message_id: The ID of the message to edit\n    updated_data: Dictionary containing updated message data\n    \nRaises:\n    ValidationError: If message ID is not found or category is invalid\n- `update_message(user_id, category, message_id, new_message_data)` - Update a message by its message_id.\n\nArgs:\n    user_id: The user ID\n    category: The message category\n    message_id: The ID of the message to update\n    new_message_data: Complete new message data to replace the existing message\n    \nRaises:\n    ValidationError: If message ID is not found or category is invalid\n- `delete_message(user_id, category, message_id)` - Delete a specific message from a user's category.\n\nArgs:\n    user_id: The user ID\n    category: The message category\n    message_id: The ID of the message to delete\n    \nRaises:\n    ValidationError: If the message ID is not found or the category is invalid\n- `get_last_10_messages(user_id, category)` - Get the last 10 messages for a user and category, sorted by timestamp descending.\n\nArgs:\n    user_id: The user ID\n    category: The message category\n    \nReturns:\n    List[dict]: List of the last 10 sent messages for the category\n- `store_sent_message(user_id, category, message_id, message)` - Store a sent message for a user and category, with per-category grouping and cleanup.\n\nArgs:\n    user_id: The user ID\n    category: The message category\n    message_id: The ID of the sent message\n    message: The message content that was sent\n- `create_message_file_from_defaults(user_id, category)` - Create a user's message file for a specific category from default messages.\nThis is the actual worker function that creates the file.\n\nArgs:\n    user_id: The user ID\n    category: The specific category to create a message file for\n    \nReturns:\n    bool: True if file was created successfully\n- `ensure_user_message_files(user_id, categories)` - Ensure user has message files for specified categories.\nCreates messages directory if missing, checks which files are missing, and creates them.\n\nArgs:\n    user_id: The user ID\n    categories: List of categories to check/create message files for (can be subset of user's categories)\n    \nReturns:\n    dict: Summary of the operation with keys:\n        - success: bool - True if all files were created/validated successfully\n        - directory_created: bool - True if messages directory was created\n        - files_checked: int - Number of categories checked\n        - files_created: int - Number of new files created\n        - files_existing: int - Number of files that already existed\n- `get_timestamp_for_sorting(item)` - Convert timestamp to float for consistent sorting.\n\nArgs:\n    item: Dictionary containing a timestamp field or other data type\n    \nReturns:\n    float: Timestamp as float for sorting, or 0.0 for invalid items\n\n### core/response_tracking.py\n**Functions:**\n- `_get_response_log_filename(response_type)` - Get the filename for a response log type.\n- `store_user_response(user_id, response_data, response_type)` - Store user response data in appropriate file structure.\n- `store_daily_checkin_response(user_id, response_data)` - Store a daily check-in response.\n- `store_chat_interaction(user_id, user_message, ai_response, context_used)` - Store a chat interaction between user and AI.\n- `get_recent_responses(user_id, response_type, limit)` - Get recent responses for a user from appropriate file structure.\n- `get_recent_daily_checkins(user_id, limit)` - Get recent daily check-in responses for a user.\n- `get_recent_chat_interactions(user_id, limit)` - Get recent chat interactions for a user.\n- `get_user_checkin_preferences(user_id)` - Get user's check-in preferences from their preferences file.\n- `is_user_checkins_enabled(user_id)` - Check if check-ins are enabled for a user.\n- `get_user_checkin_questions(user_id)` - Get the enabled check-in questions for a user.\n- `get_user_info_for_tracking(user_id)` - Get user information for response tracking.\n- `track_user_response(user_id, category, response_data)` - Track a user's response to a message.\n- `get_timestamp_for_sorting(item)` - Convert timestamp to float for consistent sorting\n\n### core/schedule_management.py\n**Functions:**\n- `get_schedule_time_periods(user_id, category)` - Get schedule time periods for a specific user and category (new format).\n- `set_schedule_period_active(user_id, category, period_name, active)` - Set whether a schedule period is active or inactive.\n\nArgs:\n    user_id: The user ID\n    category: The schedule category\n    period_name: The name of the period to modify\n    active: Whether the period should be active (default: True)\n    \nReturns:\n    bool: True if the period was found and updated, False otherwise\n- `is_schedule_period_active(user_id, category, period_name)` - Check if a schedule period is currently active.\n\nArgs:\n    user_id: The user ID\n    category: The schedule category\n    period_name: The name of the period to check\n    \nReturns:\n    bool: True if the period is active, False otherwise (defaults to True if field is missing)\n- `get_current_time_periods_with_validation(user_id, category)` - Returns the current active time periods for a user and category.\nIf no active period is found, defaults to the first available period.\n- `add_schedule_period(category, period_name, start_time, end_time, scheduler_manager)` - No description\n- `edit_schedule_period(category, period_name, new_start_time, new_end_time, scheduler_manager)` - No description\n- `delete_schedule_period(category, period_name, scheduler_manager)` - Delete a schedule period from a category.\n\nArgs:\n    category: The schedule category\n    period_name: The name of the period to delete\n    scheduler_manager: Optional scheduler manager for rescheduling (default: None)\n- `clear_schedule_periods_cache(user_id, category)` - Clear the schedule periods cache for a specific user/category or all.\n- `validate_and_format_time(time_str)` - Validate and format a time string to HH:MM format.\n\nArgs:\n    time_str: Time string to validate and format\n    \nReturns:\n    str: Formatted time string in HH:MM format\n    \nRaises:\n    ValueError: If the time format is invalid\n- `time_24h_to_12h_display(time_24h)` - Convert 24-hour time string (HH:MM) to 12-hour display format.\n\nArgs:\n    time_24h (str): Time in 24-hour format (e.g., \"14:30\")\n    \nReturns:\n    tuple: (hour_12, minute, is_pm) where:\n        - hour_12 (int): Hour in 12-hour format (1-12)\n        - minute (int): Minute (0-59)\n        - is_pm (bool): True if PM, False if AM\n- `time_12h_display_to_24h(hour_12, minute, is_pm)` - Convert 12-hour display format to 24-hour time string.\n\nArgs:\n    hour_12 (int): Hour in 12-hour format (1-12)\n    minute (int): Minute (0-59)\n    is_pm (bool): True if PM, False if AM\n    \nReturns:\n    str: Time in 24-hour format (HH:MM)\n- `get_current_day_names()` - Returns the name of the current day plus 'ALL' for universal day messages.\n- `get_reminder_periods_and_days(user_id, category)` - Load reminder periods and days for a category (e.g., 'tasks') from schedules.json.\n- `set_reminder_periods_and_days(user_id, category, periods, days)` - Save reminder periods and days for a category to schedules.json.\n- `set_schedule_periods(user_id, category, periods_dict)` - Replace all schedule periods for a category with the given dict (period_name: {active, days, start_time, end_time}).\n- `get_schedule_days(user_id, category)` - Get the schedule days for a user and category.\n\nArgs:\n    user_id: The user ID\n    category: The schedule category\n    \nReturns:\n    list: List of days for the schedule, defaults to all days of the week\n- `set_schedule_days(user_id, category, days)` - Set the schedule days for a user and category.\n\nArgs:\n    user_id: The user ID\n    category: The schedule category\n    days: List of days to set for the schedule\n- `get_user_info_for_schedule_management(user_id)` - Get user info for schedule management operations.\n- `sort_key(item)` - No description\n\n### core/scheduler.py\n**Functions:**\n- `schedule_all_task_reminders(user_id)` - Standalone function to schedule all task reminders for a user.\nThis can be called from the admin UI without needing a scheduler instance.\n- `cleanup_task_reminders(user_id, task_id)` - Standalone function to clean up task reminders for a user.\nThis can be called from the admin UI without needing a scheduler instance.\n- `get_user_categories(user_id)` - Get user's message categories.\n- `process_user_schedules(user_id)` - Process schedules for a specific user.\n- `process_category_schedule(user_id, category)` - Process schedule for a specific user and category.\n- `get_user_task_preferences(user_id)` - Get user's task preferences.\n- `get_user_checkin_preferences(user_id)` - Get user's check-in preferences.\n- `__init__(self, communication_manager)` - Initialize the SchedulerManager with communication manager.\n\nArgs:\n    communication_manager: The communication manager for sending messages\n- `run_daily_scheduler(self)` - Starts the daily scheduler in a separate thread that handles all users.\n- `stop_scheduler(self)` - Stops the scheduler thread.\n- `reset_and_reschedule_daily_messages(self, category, user_id)` - Resets scheduled tasks for a specific category and reschedules daily messages for that category.\n- `is_job_for_category(self, job, user_id, category)` - Determines if a job is scheduled for a specific user and category.\n- `schedule_all_users_immediately(self)` - Schedule daily messages immediately for all users\n- `schedule_daily_message_job(self, user_id, category)` - Schedules daily messages immediately for the specified user and category.\nSchedules one message per active period in the category.\n- `schedule_message_for_period(self, user_id, category, period_name)` - Schedules a message at a random time within a specific period for a user and category.\n- `schedule_checkin_at_exact_time(self, user_id, period_name)` - Schedule a check-in at the exact time specified in the period.\n- `schedule_message_at_random_time(self, user_id, category)` - Schedules a message at a random time within the user's preferred time periods.\n- `is_time_conflict(self, user_id, schedule_datetime)` - Checks if there is a time conflict with any existing scheduled jobs for the user.\n- `get_random_time_within_period(self, user_id, category, period, timezone_str)` - Get a random time within a specified period for a given category.\n- `log_scheduled_tasks(self)` - Logs all current and upcoming scheduled tasks in a user-friendly manner.\n- `handle_sending_scheduled_message(self, user_id, category, retry_attempts, retry_delay)` - Handles the sending of scheduled messages with retries.\n- `handle_task_reminder(self, user_id, task_id, retry_attempts, retry_delay)` - Handles sending task reminders with retries.\n- `set_wake_timer(self, schedule_time, user_id, category, period, wake_ahead_minutes)` - Set a Windows scheduled task to wake the computer before a scheduled message.\n\nArgs:\n    schedule_time: The datetime when the message is scheduled\n    user_id: The user ID\n    category: The message category\n    period: The time period name\n    wake_ahead_minutes: Minutes before schedule_time to wake the computer (default: 4)\n- `cleanup_old_tasks(self, user_id, category)` - Cleans up all tasks (scheduled jobs and system tasks) associated with a given user and category.\n- `schedule_all_task_reminders(self, user_id)` - Schedule reminders for all active tasks for a user.\nFor each reminder period, pick one random task and schedule it at a random time within the period.\n- `get_random_time_within_task_period(self, start_time, end_time)` - Generate a random time within a task reminder period.\nArgs:\n    start_time: Start time in HH:MM format (e.g., \"17:00\")\n    end_time: End time in HH:MM format (e.g., \"18:00\")\nReturns:\n    Random time in HH:MM format\n- `schedule_task_reminder_at_time(self, user_id, task_id, reminder_time)` - Schedule a reminder for a specific task at the specified time (daily).\n- `schedule_task_reminder(self, user_id, task_id, reminder_time)` - Legacy function for backward compatibility.\nSchedule a reminder for a specific task at the specified time.\n- `schedule_task_reminder_at_datetime(self, user_id, task_id, date_str, time_str)` - Schedule a reminder for a specific task at a specific date and time.\n- `cleanup_task_reminders(self, user_id, task_id)` - Clean up task reminders for a user or specific task.\n- `scheduler_loop()` - No description\n**Classes:**\n- `SchedulerManager` - No description\n  - `SchedulerManager.__init__(self, communication_manager)` - Initialize the SchedulerManager with communication manager.\n\nArgs:\n    communication_manager: The communication manager for sending messages\n  - `SchedulerManager.run_daily_scheduler(self)` - Starts the daily scheduler in a separate thread that handles all users.\n  - `SchedulerManager.stop_scheduler(self)` - Stops the scheduler thread.\n  - `SchedulerManager.reset_and_reschedule_daily_messages(self, category, user_id)` - Resets scheduled tasks for a specific category and reschedules daily messages for that category.\n  - `SchedulerManager.is_job_for_category(self, job, user_id, category)` - Determines if a job is scheduled for a specific user and category.\n  - `SchedulerManager.schedule_all_users_immediately(self)` - Schedule daily messages immediately for all users\n  - `SchedulerManager.schedule_daily_message_job(self, user_id, category)` - Schedules daily messages immediately for the specified user and category.\nSchedules one message per active period in the category.\n  - `SchedulerManager.schedule_message_for_period(self, user_id, category, period_name)` - Schedules a message at a random time within a specific period for a user and category.\n  - `SchedulerManager.schedule_checkin_at_exact_time(self, user_id, period_name)` - Schedule a check-in at the exact time specified in the period.\n  - `SchedulerManager.schedule_message_at_random_time(self, user_id, category)` - Schedules a message at a random time within the user's preferred time periods.\n  - `SchedulerManager.is_time_conflict(self, user_id, schedule_datetime)` - Checks if there is a time conflict with any existing scheduled jobs for the user.\n  - `SchedulerManager.get_random_time_within_period(self, user_id, category, period, timezone_str)` - Get a random time within a specified period for a given category.\n  - `SchedulerManager.log_scheduled_tasks(self)` - Logs all current and upcoming scheduled tasks in a user-friendly manner.\n  - `SchedulerManager.handle_sending_scheduled_message(self, user_id, category, retry_attempts, retry_delay)` - Handles the sending of scheduled messages with retries.\n  - `SchedulerManager.handle_task_reminder(self, user_id, task_id, retry_attempts, retry_delay)` - Handles sending task reminders with retries.\n  - `SchedulerManager.set_wake_timer(self, schedule_time, user_id, category, period, wake_ahead_minutes)` - Set a Windows scheduled task to wake the computer before a scheduled message.\n\nArgs:\n    schedule_time: The datetime when the message is scheduled\n    user_id: The user ID\n    category: The message category\n    period: The time period name\n    wake_ahead_minutes: Minutes before schedule_time to wake the computer (default: 4)\n  - `SchedulerManager.cleanup_old_tasks(self, user_id, category)` - Cleans up all tasks (scheduled jobs and system tasks) associated with a given user and category.\n  - `SchedulerManager.schedule_all_task_reminders(self, user_id)` - Schedule reminders for all active tasks for a user.\nFor each reminder period, pick one random task and schedule it at a random time within the period.\n  - `SchedulerManager.get_random_time_within_task_period(self, start_time, end_time)` - Generate a random time within a task reminder period.\nArgs:\n    start_time: Start time in HH:MM format (e.g., \"17:00\")\n    end_time: End time in HH:MM format (e.g., \"18:00\")\nReturns:\n    Random time in HH:MM format\n  - `SchedulerManager.schedule_task_reminder_at_time(self, user_id, task_id, reminder_time)` - Schedule a reminder for a specific task at the specified time (daily).\n  - `SchedulerManager.schedule_task_reminder(self, user_id, task_id, reminder_time)` - Legacy function for backward compatibility.\nSchedule a reminder for a specific task at the specified time.\n  - `SchedulerManager.schedule_task_reminder_at_datetime(self, user_id, task_id, date_str, time_str)` - Schedule a reminder for a specific task at a specific date and time.\n  - `SchedulerManager.cleanup_task_reminders(self, user_id, task_id)` - Clean up task reminders for a user or specific task.\n\n### core/service.py\n**Functions:**\n- `get_scheduler_manager()` - Get the scheduler manager instance from the global service.\n- `get_user_categories(user_id)` - Get the message categories for a specific user.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    List[str]: List of message categories the user is subscribed to\n- `main()` - Main entry point for the MHM backend service.\n\nCreates and starts the service, handling initialization errors and graceful shutdown.\n- `__init__(self)` - Initialize the MHM backend service.\n\nSets up communication manager, scheduler manager, and registers emergency shutdown handler.\n- `validate_configuration(self)` - Validate all configuration settings before starting the service.\n- `initialize_paths(self)` - Initialize and verify all required file paths for the service.\n\nCreates paths for log files, user data directories, and message files for all users.\n\nReturns:\n    List[str]: List of all initialized file paths\n- `check_and_fix_logging(self)` - Check if logging is working and restart if needed\n- `start(self)` - Start the MHM backend service.\n\nInitializes communication channels, scheduler, and begins the main service loop.\nSets up signal handlers for graceful shutdown.\n- `run_service_loop(self)` - Keep the service running until shutdown is requested\n- `check_test_message_requests(self)` - Check for and process test message request files from admin panel\n- `cleanup_test_message_requests(self)` - Clean up any remaining test message request files\n- `check_reschedule_requests(self)` - Check for and process reschedule request files from UI\n- `cleanup_reschedule_requests(self)` - Clean up any remaining reschedule request files\n- `shutdown(self)` - Gracefully shutdown the service\n- `signal_handler(self, signum, frame)` - Handle shutdown signals for graceful service termination.\n\nArgs:\n    signum: Signal number\n    frame: Current stack frame\n- `emergency_shutdown(self)` - Emergency shutdown handler registered with atexit\n**Classes:**\n- `InitializationError` - Custom exception for initialization errors.\n- `MHMService` - No description\n  - `MHMService.__init__(self)` - Initialize the MHM backend service.\n\nSets up communication manager, scheduler manager, and registers emergency shutdown handler.\n  - `MHMService.validate_configuration(self)` - Validate all configuration settings before starting the service.\n  - `MHMService.initialize_paths(self)` - Initialize and verify all required file paths for the service.\n\nCreates paths for log files, user data directories, and message files for all users.\n\nReturns:\n    List[str]: List of all initialized file paths\n  - `MHMService.check_and_fix_logging(self)` - Check if logging is working and restart if needed\n  - `MHMService.start(self)` - Start the MHM backend service.\n\nInitializes communication channels, scheduler, and begins the main service loop.\nSets up signal handlers for graceful shutdown.\n  - `MHMService.run_service_loop(self)` - Keep the service running until shutdown is requested\n  - `MHMService.check_test_message_requests(self)` - Check for and process test message request files from admin panel\n  - `MHMService.cleanup_test_message_requests(self)` - Clean up any remaining test message request files\n  - `MHMService.check_reschedule_requests(self)` - Check for and process reschedule request files from UI\n  - `MHMService.cleanup_reschedule_requests(self)` - Clean up any remaining reschedule request files\n  - `MHMService.shutdown(self)` - Gracefully shutdown the service\n  - `MHMService.signal_handler(self, signum, frame)` - Handle shutdown signals for graceful service termination.\n\nArgs:\n    signum: Signal number\n    frame: Current stack frame\n  - `MHMService.emergency_shutdown(self)` - Emergency shutdown handler registered with atexit\n\n### core/service_utilities.py\n**Functions:**\n- `create_reschedule_request(user_id, category)` - Create a reschedule request flag file for the service to pick up\n- `is_service_running()` - Check if the MHM service is currently running\n- `wait_for_network(timeout)` - Wait for the network to be available, retrying every 5 seconds up to a timeout.\n- `load_and_localize_datetime(datetime_str, timezone_str)` - Load and localize a datetime string to a specific timezone.\n\nArgs:\n    datetime_str: Datetime string in format \"YYYY-MM-DD HH:MM\"\n    timezone_str: Timezone string (default: 'America/Regina')\n    \nReturns:\n    datetime: Timezone-aware datetime object\n    \nRaises:\n    InvalidTimeFormatError: If datetime_str format is invalid\n- `title_case(text)` - Convert text to title case with proper handling of special cases.\n\nArgs:\n    text: The text to convert to title case\n    \nReturns:\n    str: Text converted to title case\n- `__init__(self, interval)` - Initialize the throttler with a specified interval.\n\nArgs:\n    interval: Time interval in seconds between allowed operations\n- `should_run(self)` - Check if enough time has passed since the last run to allow another execution.\n\nReturns:\n    bool: True if the operation should run, False if it should be throttled\n**Classes:**\n- `Throttler` - A utility class for throttling operations based on time intervals.\n\nPrevents operations from running too frequently by tracking the last execution time.\n  - `Throttler.__init__(self, interval)` - Initialize the throttler with a specified interval.\n\nArgs:\n    interval: Time interval in seconds between allowed operations\n  - `Throttler.should_run(self)` - Check if enough time has passed since the last run to allow another execution.\n\nReturns:\n    bool: True if the operation should run, False if it should be throttled\n- `InvalidTimeFormatError` - Exception raised when time format is invalid.\n\nUsed for time parsing and validation operations.\n\n### core/ui_management.py\n**Functions:**\n- `clear_period_widgets_from_layout(layout, widget_list)` - Clear all period widgets from a layout.\n\nArgs:\n    layout: The QVBoxLayout to clear\n    widget_list: Optional list to track widgets (will be cleared if provided)\n\nReturns:\n    None\n- `add_period_widget_to_layout(layout, period_name, period_data, category, parent_widget, widget_list, delete_callback)` - Add a period widget to a layout with proper display formatting.\n\nArgs:\n    layout: The QVBoxLayout to add the widget to\n    period_name: The period name\n    period_data: The period data dictionary\n    category: The category (tasks, checkin, or schedule category)\n    parent_widget: The parent widget for the period widget\n    widget_list: Optional list to track widgets\n    delete_callback: Optional callback for delete signal\n\nReturns:\n    The created PeriodRowWidget or None if failed\n- `load_period_widgets_for_category(layout, user_id, category, parent_widget, widget_list, delete_callback)` - Load and display period widgets for a specific category.\n\nArgs:\n    layout: The QVBoxLayout to add widgets to\n    user_id: The user ID\n    category: The category (tasks, checkin, or schedule category)\n    parent_widget: The parent widget for period widgets\n    widget_list: Optional list to track widgets\n    delete_callback: Optional callback for delete signal\n\nReturns:\n    List of created widgets\n- `collect_period_data_from_widgets(widget_list, category)` - Collect period data from a list of period widgets.\n\nArgs:\n    widget_list: List of PeriodRowWidget instances\n    category: The category (tasks, checkin, or schedule category)\n\nReturns:\n    Dictionary of period data with storage-formatted names, each with only 'active', 'days', 'start_time', 'end_time'.\n- `period_name_for_display(period_name, category)` - Convert period name to display format using existing logic.\n\nArgs:\n    period_name: The period name to convert\n    category: The category (tasks, checkin, or schedule category)\n\nReturns:\n    Display-formatted period name\n- `period_name_for_storage(display_name, category)` - Convert display period name to storage format.\n\nArgs:\n    display_name: The display-formatted period name\n    category: The category (tasks, checkin, or schedule category)\n\nReturns:\n    Storage-formatted period name (preserve original case)\n\n### core/user_data_handlers.py\n**Functions:**\n- `register_data_loader(data_type, loader_func, file_type, default_fields, metadata_fields, description)` - Proxy to the original *register_data_loader*.\n\nImported here so callers can simply do::\n\n    from core.user_data_handlers import register_data_loader\n\n\u2026and forget about *core.user_management*.\n- `get_user_data(user_id, data_types, fields, auto_create, include_metadata)` - Migrated implementation of get_user_data.\n- `save_user_data(user_id, data_updates, auto_create, update_index, create_backup, validate_data)` - Migrated implementation of save_user_data.\n- `save_user_data_transaction(user_id, data_updates, auto_create)` - Atomic wrapper copied from user_management.\n- `get_all_user_ids()` - Return a list of *all* user IDs known to the system.\n- `update_user_schedules(user_id, schedules_data)` - Persist a complete schedules dict for *user_id*.\n\nWrapper around the original helper in **core.user_management** \u2013 keeps\noutside modules decoupled from the legacy path.\n- `update_user_account(user_id, updates)` - Update (part of) a user\u2019s *account.json* file.\n\nThis is a thin convenience wrapper around :pyfunc:`save_user_data` that\nscopes *updates* to the ``account`` data-type.\n- `update_user_preferences(user_id, updates)` - Update *preferences.json*.\n\nIncludes the extra bookkeeping originally implemented in\n``core.user_management.update_user_preferences`` (default schedule creation\nfor new categories, message-file creation, etc.) so behaviour remains\nunchanged.\n- `update_user_context(user_id, updates)` - Update *user_context.json* for the given user.\n- `update_channel_preferences(user_id, updates)` - Specialised helper \u2013 update only the *preferences.channel* subtree.\n\n### core/user_data_manager.py\n**Functions:**\n- `update_message_references(user_id)` - Update message file references for a user.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    bool: True if references were updated successfully\n- `backup_user_data(user_id, include_messages)` - Create a backup of user data.\n\nArgs:\n    user_id: The user's ID\n    include_messages: Whether to include message files in backup\n    \nReturns:\n    str: Path to the created backup file\n- `export_user_data(user_id, export_format)` - Export user data to a structured format.\n\nArgs:\n    user_id: The user's ID\n    export_format: Format for export (currently only \"json\" supported)\n    \nReturns:\n    Dict containing all user data in structured format\n- `delete_user_completely(user_id, create_backup)` - Completely delete a user and all their data.\n\nArgs:\n    user_id: The user's ID\n    create_backup: Whether to create a backup before deletion\n    \nReturns:\n    bool: True if user was deleted successfully\n- `get_user_data_summary(user_id)` - Get a summary of user data.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    Dict containing user data summary\n- `update_user_index(user_id)` - Update the user index for a specific user.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    bool: True if index was updated successfully\n- `rebuild_user_index()` - Rebuild the complete user index.\n\nReturns:\n    bool: True if index was rebuilt successfully\n- `get_user_info_for_data_manager(user_id)` - Get user info for data manager operations - uses new hybrid structure.\n- `get_user_categories(user_id)` - Get user's message categories.\n- `build_user_index()` - Build an index of all users and their message data.\n- `get_user_summary(user_id)` - Get a summary of user data and message statistics.\n- `get_all_user_summaries()` - Get summaries for all users.\n- `get_user_analytics_summary(user_id)` - Get an analytics summary for a user including interaction patterns and data usage.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    Dict containing analytics summary information\n- `__init__(self)` - Initialize the UserDataManager.\n\nSets up backup directory and index file path for user data management operations.\n- `update_message_references(self, user_id)` - Add/update message file references in user profile\n- `get_user_message_files(self, user_id)` - Get all message file paths for a user\n- `backup_user_data(self, user_id, include_messages)` - Create a complete backup of user's data\n- `export_user_data(self, user_id, export_format)` - Export all user data to a structured format\n- `delete_user_completely(self, user_id, create_backup)` - Completely remove all traces of a user from the system\n- `get_user_data_summary(self, user_id)` - Get a comprehensive summary of user data including file counts and sizes.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    Dict containing summary information about the user's data\n- `_get_last_interaction(self, user_id)` - Get the timestamp of the user's last interaction with the system.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    str: ISO format timestamp of last interaction, or default if none found\n- `update_user_index(self, user_id)` - Update the user index with current information for a specific user.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    bool: True if index was updated successfully\n- `remove_from_index(self, user_id)` - Remove a user from the index.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    bool: True if user was removed from index successfully\n- `rebuild_full_index(self)` - Rebuild the complete user index from scratch.\n\nScans all user directories and creates a fresh index with current information.\n\nReturns:\n    bool: True if index was rebuilt successfully\n- `search_users(self, query, search_fields)` - Search for users based on query string and specified fields.\n\nArgs:\n    query: Search query string\n    search_fields: List of fields to search in (default: all fields)\n    \nReturns:\n    List of user summaries matching the search criteria\n**Classes:**\n- `UserDataManager` - Enhanced user data management with references, backup, and indexing capabilities\n  - `UserDataManager.__init__(self)` - Initialize the UserDataManager.\n\nSets up backup directory and index file path for user data management operations.\n  - `UserDataManager.update_message_references(self, user_id)` - Add/update message file references in user profile\n  - `UserDataManager.get_user_message_files(self, user_id)` - Get all message file paths for a user\n  - `UserDataManager.backup_user_data(self, user_id, include_messages)` - Create a complete backup of user's data\n  - `UserDataManager.export_user_data(self, user_id, export_format)` - Export all user data to a structured format\n  - `UserDataManager.delete_user_completely(self, user_id, create_backup)` - Completely remove all traces of a user from the system\n  - `UserDataManager.get_user_data_summary(self, user_id)` - Get a comprehensive summary of user data including file counts and sizes.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    Dict containing summary information about the user's data\n  - `UserDataManager._get_last_interaction(self, user_id)` - Get the timestamp of the user's last interaction with the system.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    str: ISO format timestamp of last interaction, or default if none found\n  - `UserDataManager.update_user_index(self, user_id)` - Update the user index with current information for a specific user.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    bool: True if index was updated successfully\n  - `UserDataManager.remove_from_index(self, user_id)` - Remove a user from the index.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    bool: True if user was removed from index successfully\n  - `UserDataManager.rebuild_full_index(self)` - Rebuild the complete user index from scratch.\n\nScans all user directories and creates a fresh index with current information.\n\nReturns:\n    bool: True if index was rebuilt successfully\n  - `UserDataManager.search_users(self, query, search_fields)` - Search for users based on query string and specified fields.\n\nArgs:\n    query: Search query string\n    search_fields: List of fields to search in (default: all fields)\n    \nReturns:\n    List of user summaries matching the search criteria\n\n### core/user_data_validation.py\n**Functions:**\n- `is_valid_email(email)` - No description\n- `is_valid_phone(phone)` - No description\n- `validate_time_format(time_str)` - No description\n- `title_case(text)` - Convert text to title case while keeping certain small words lowercase.\n- `validate_user_update(user_id, data_type, updates)` - Validate partial updates to an existing user's data.\n- `validate_schedule_periods(periods, category)` - Validate schedule periods and return (is_valid, error_messages).\n\nArgs:\n    periods: Dictionary of period_name -> period_data\n    category: Category name for error messages (e.g., \"tasks\", \"check-ins\")\n\nReturns:\n    Tuple of (is_valid, list_of_error_messages)\n- `validate_new_user_data(user_id, data_updates)` - Validate complete dataset required for a brand-new user.\n- `validate_personalization_data(data)` - Validate *context/personalization* structure.\n\nNo field is required; we only type-check fields that are present.\nThis logic previously lived in ``core.user_management``.\n\n### core/user_management.py\n**Functions:**\n- `register_data_loader(data_type, loader_func, file_type, default_fields, metadata_fields, description)` - Register a new data loader for the centralized system.\n\nArgs:\n    data_type: Unique identifier for the data type\n    loader_func: Function that loads the data\n    file_type: File type identifier\n    default_fields: Commonly accessed fields\n    metadata_fields: Fields that contain metadata\n    description: Human-readable description\n- `get_available_data_types()` - Get list of available data types.\n- `get_data_type_info(data_type)` - Get information about a specific data type.\n- `get_all_user_ids()` - Get all user IDs from the system.\n- `load_user_account_data(user_id, auto_create)` - Load user account data from account.json.\n- `save_user_account_data(user_id, account_data)` - Save user account data to account.json.\n- `load_user_preferences_data(user_id, auto_create)` - Load user preferences data from preferences.json.\n- `save_user_preferences_data(user_id, preferences_data)` - Save user preferences data to preferences.json.\n- `load_user_context_data(user_id, auto_create)` - Load user context data from user_context.json.\n- `save_user_context_data(user_id, context_data)` - Save user context data to user_context.json.\n- `load_user_schedules_data(user_id, auto_create)` - Load user schedules data from schedules.json.\n- `save_user_schedules_data(user_id, schedules_data)` - Save user schedules data to schedules.json.\n- `update_user_schedules(user_id, schedules_data)` - Update user schedules data.\n- `create_default_schedule_periods(category)` - Create default schedule periods for a new category.\n- `migrate_legacy_schedules_structure(schedules_data)` - Migrate legacy schedules structure to new format.\n- `ensure_category_has_default_schedule(user_id, category)` - Ensure a category has default schedule periods if it doesn't exist.\n- `update_user_account(user_id, updates, auto_create)` - Update user account information.\n- `update_user_preferences(user_id, updates, auto_create)` - Update user preferences.\n- `update_user_context(user_id, updates, auto_create)` - Update user context information.\n- `update_channel_preferences(user_id, updates, auto_create)` - Update channel preferences without triggering category schedule creation.\n- `create_new_user(user_data)` - Create a new user with the new data structure.\n- `get_user_id_by_internal_username(internal_username)` - Get user ID by internal username.\n- `get_user_id_by_chat_id(chat_id)` - Get user ID by chat ID.\n- `get_user_id_by_discord_user_id(discord_user_id)` - Get user ID by Discord user ID.\n- `clear_user_caches(user_id)` - Clear user data caches.\n- `get_user_data()` - No description\n- `save_user_data()` - No description\n- `save_user_data_transaction()` - No description\n- `ensure_unique_ids(data)` - Ensure all messages have unique IDs.\n- `load_and_ensure_ids(user_id)` - Load messages for all categories and ensure IDs are unique for a user.\n- `ensure_all_categories_have_schedules(user_id)` - Ensure all categories in user preferences have corresponding schedules.\n- `get_user_email(user_id)` - Get user's email address using centralized system.\n- `get_user_categories(user_id)` - Get user's message categories using centralized system.\n- `get_user_channel_type(user_id)` - Get user's communication channel type using centralized system.\n- `get_user_preferred_name(user_id)` - Get user's preferred name using centralized system.\n- `get_user_account_status(user_id)` - Get user's account status using centralized system.\n- `get_user_data_with_metadata(user_id, data_types)` - Get user data with file metadata using centralized system.\n- `get_user_essential_info(user_id)` - Get essential user information using centralized system.\n- `_load_presets_json()` - Load presets from resources/presets.json (cached).\n- `get_predefined_options(field)` - Return predefined options for a personalization field.\n- `get_timezone_options()` - Get timezone options.\n- `create_default_personalization_data()` - Create default personalization data structure.\n- `get_personalization_field(user_id, field)` - Get a specific field from personalization data using centralized system.\n- `update_personalization_field(user_id, field, value)` - Update a specific field in personalization data using centralized system.\n- `add_personalization_item(user_id, field, item)` - Add an item to a list field in personalization data using centralized system.\n- `remove_personalization_item(user_id, field, item)` - Remove an item from a list field in personalization data using centralized system.\n- `clear_personalization_cache(user_id)` - Clear the personalization cache for a specific user or all users.\n\n### run_mhm.py\n**Functions:**\n- `main()` - Launch the MHM Manager UI\n\n### run_tests.py\n**Functions:**\n- `run_command(cmd, description)` - Run a command and return success status.\n- `main()` - No description\n\n### scripts/audit_legacy_channels.py\n**Functions:**\n- `main()` - Main function to run the legacy channels audit.\n- `__init__(self, project_root)` - No description\n- `should_exclude_file(self, file_path)` - Check if a file should be excluded from the search.\n- `search_file(self, file_path)` - Search a single file for legacy patterns.\n- `search_codebase(self)` - Search the entire codebase for legacy patterns.\n- `analyze_results(self)` - Analyze the search results and generate summary.\n- `check_specific_issues(self)` - Check for specific potential issues.\n- `generate_report(self)` - Generate a comprehensive audit report.\n- `save_report(self, report, output_file)` - Save the audit report to a file.\n- `run_audit(self)` - Run the complete legacy channels audit.\n**Classes:**\n- `LegacyChannelsAuditor` - Auditor for finding legacy channel references in the codebase.\n  - `LegacyChannelsAuditor.__init__(self, project_root)` - No description\n  - `LegacyChannelsAuditor.should_exclude_file(self, file_path)` - Check if a file should be excluded from the search.\n  - `LegacyChannelsAuditor.search_file(self, file_path)` - Search a single file for legacy patterns.\n  - `LegacyChannelsAuditor.search_codebase(self)` - Search the entire codebase for legacy patterns.\n  - `LegacyChannelsAuditor.analyze_results(self)` - Analyze the search results and generate summary.\n  - `LegacyChannelsAuditor.check_specific_issues(self)` - Check for specific potential issues.\n  - `LegacyChannelsAuditor.generate_report(self)` - Generate a comprehensive audit report.\n  - `LegacyChannelsAuditor.save_report(self, report, output_file)` - Save the audit report to a file.\n  - `LegacyChannelsAuditor.run_audit(self)` - Run the complete legacy channels audit.\n\n### scripts/debug/debug_category_dialog.py\n**Functions:**\n- `test_category_widget_clear()` - Test if CategorySelectionWidget.set_selected_categories([]) works\n- `test_user_data_functions()` - Test if update_user_account and update_user_preferences work\n- `test_preferences_update()` - Test if update_user_preferences works\n- `main()` - Run all tests\n\n### scripts/debug/debug_comprehensive_prompt.py\n**Functions:**\n- `debug_comprehensive_prompt()` - Debug the comprehensive context prompt generation.\n\n### scripts/debug/debug_discord_connectivity.py\n**Functions:**\n- `test_dns_resolution(hostname)` - Test DNS resolution for a given hostname.\n- `test_network_connectivity(hostname, port, timeout)` - Test network connectivity to a specific host and port.\n- `test_discord_api()` - Test Discord API accessibility.\n- `test_bot_token()` - Test if the Discord bot token is valid.\n- `test_alternative_dns_servers()` - Test connectivity to alternative DNS servers.\n- `test_discord_endpoints()` - Test connectivity to various Discord endpoints.\n- `main()` - Run the Discord connectivity diagnostic.\n\n### scripts/debug/debug_lm_studio_timeout.py\n**Functions:**\n- `test_models_endpoint()` - Test the models endpoint with different timeouts.\n- `test_chat_completions()` - Test the chat completions endpoint with different timeouts.\n- `test_system_info()` - Test system information endpoints.\n- `check_lm_studio_process()` - Check if LM Studio process is running and using resources.\n- `test_network_connectivity()` - Test basic network connectivity to LM Studio.\n\n### scripts/debug/debug_preferences.py\n**Functions:**\n- `debug_preferences()` - No description\n\n### scripts/debug/discord_connectivity_diagnostic.py\n**Functions:**\n- `main()` - Main diagnostic function\n- `__init__(self)` - No description\n- `test_dns_resolution(self)` - Test DNS resolution for Discord-related domains\n- `test_network_connectivity(self)` - Test network connectivity to Discord servers\n- `test_discord_bot_status(self)` - Test Discord bot status and health\n- `test_communication_manager(self)` - Test communication manager Discord status\n- `generate_recommendations(self)` - Generate recommendations based on test results\n- `run_all_tests(self)` - Run all diagnostic tests\n- `print_results(self)` - Print formatted results to console\n**Classes:**\n- `DiscordConnectivityDiagnostic` - Comprehensive Discord connectivity diagnostic tool\n  - `DiscordConnectivityDiagnostic.__init__(self)` - No description\n  - `DiscordConnectivityDiagnostic.test_dns_resolution(self)` - Test DNS resolution for Discord-related domains\n  - `DiscordConnectivityDiagnostic.test_network_connectivity(self)` - Test network connectivity to Discord servers\n  - `DiscordConnectivityDiagnostic.test_discord_bot_status(self)` - Test Discord bot status and health\n  - `DiscordConnectivityDiagnostic.test_communication_manager(self)` - Test communication manager Discord status\n  - `DiscordConnectivityDiagnostic.generate_recommendations(self)` - Generate recommendations based on test results\n  - `DiscordConnectivityDiagnostic.run_all_tests(self)` - Run all diagnostic tests\n  - `DiscordConnectivityDiagnostic.print_results(self)` - Print formatted results to console\n\n### scripts/debug/test_dns_fallback.py\n**Functions:**\n- `test_dns_fallback()` - Test the enhanced DNS resolution with fallback servers\n\n### scripts/focused_legacy_audit.py\n**Functions:**\n- `main()` - Main function to run the focused legacy channels audit.\n- `__init__(self, project_root)` - No description\n- `search_file(self, file_path)` - Search a single file for critical legacy patterns.\n- `search_codebase(self)` - Search the entire codebase for critical legacy patterns.\n- `check_specific_files(self)` - Check specific files that are most likely to have issues.\n- `analyze_results(self)` - Analyze the search results.\n- `generate_report(self)` - Generate a focused audit report.\n- `save_report(self, report, output_file)` - Save the audit report to a file.\n- `run_audit(self)` - Run the focused legacy channels audit.\n**Classes:**\n- `FocusedLegacyAuditor` - Focused auditor for finding actual legacy channel issues.\n  - `FocusedLegacyAuditor.__init__(self, project_root)` - No description\n  - `FocusedLegacyAuditor.search_file(self, file_path)` - Search a single file for critical legacy patterns.\n  - `FocusedLegacyAuditor.search_codebase(self)` - Search the entire codebase for critical legacy patterns.\n  - `FocusedLegacyAuditor.check_specific_files(self)` - Check specific files that are most likely to have issues.\n  - `FocusedLegacyAuditor.analyze_results(self)` - Analyze the search results.\n  - `FocusedLegacyAuditor.generate_report(self)` - Generate a focused audit report.\n  - `FocusedLegacyAuditor.save_report(self, report, output_file)` - Save the audit report to a file.\n  - `FocusedLegacyAuditor.run_audit(self)` - Run the focused legacy channels audit.\n\n### scripts/migration/migrate_messaging_service.py\n**Functions:**\n- `migrate_messaging_service()` - Migrate messaging_service to channel.type for all users.\n- `verify_migration(users)` - Verify that the migration was successful.\n\n### scripts/migration/migrate_schedule_format.py\n**Functions:**\n- `migrate_legacy_schedules_structure(schedules_data)` - Convert legacy flat schedule structure to new nested format.\n- `remove_enabled_fields_from_preferences(prefs)` - Remove 'enabled' fields from preferences.\n- `remove_enabled_fields_from_schedules(schedules_data)` - Remove 'enabled' fields from schedule periods.\n- `migrate_user_files()` - Migrate all user files to new format.\n- `main()` - Main migration function.\n\n### scripts/migration/migrate_schedules_cleanup.py\n**Functions:**\n- `find_all_schedules_files(base_dir)` - Find all user schedule files in the data directory.\n\nSearches for schedules.json files in user subdirectories\nwithin the specified base directory.\n\nArgs:\n    base_dir: Base directory to search in (default: \"data/users\")\n    \nReturns:\n    List of file paths to user schedule files\n- `collapse_days(days)` - Collapse a list of days to ['ALL'] if all days of the week are present.\n\nIf the days list contains all seven days of the week, it is collapsed\nto ['ALL'] for more efficient storage and processing.\n\nArgs:\n    days: List of day names to check\n    \nReturns:\n    List containing either ['ALL'] if all days present, or the original days list\n- `migrate_schedules_file(schedules_path)` - No description\n- `main()` - Main function to migrate all user schedule files.\n\nFinds all user schedule files and applies the migration\nto clean up schedule data structure and optimize day lists.\n\n### scripts/migration/migrate_sent_messages.py\n**Functions:**\n- `migrate_sent_messages()` - Migrate sent_messages.json files from user root directories to messages folders.\n- `update_file_operations_code()` - Update the file operations code to use the new sent_messages path structure.\n- `main()` - Main migration function.\n\n### scripts/migration/migrate_user_data_structure.py\n**Functions:**\n- `main()` - Main migration function.\n- `__init__(self, dry_run, backup)` - No description\n- `migrate_all_users(self)` - Migrate all users in the system.\n- `migrate_user(self, user_id)` - Migrate a single user's data.\n- `is_already_migrated(self, user_dir)` - Check if user data is already in new structure.\n- `backup_user_data(self, user_id, user_dir)` - Create backup of user data before migration.\n- `load_current_data(self, user_id, user_dir)` - Load all current data files for a user.\n- `transform_data(self, user_id, current_data)` - Transform current data structure to new structure.\n- `save_new_data(self, user_id, new_data)` - Save the new data structure for a user.\n- `cleanup_old_files(self, user_dir)` - Remove old files after successful migration.\n**Classes:**\n- `UserDataMigrator` - Handles migration of user data from old structure to new structure.\n  - `UserDataMigrator.__init__(self, dry_run, backup)` - No description\n  - `UserDataMigrator.migrate_all_users(self)` - Migrate all users in the system.\n  - `UserDataMigrator.migrate_user(self, user_id)` - Migrate a single user's data.\n  - `UserDataMigrator.is_already_migrated(self, user_dir)` - Check if user data is already in new structure.\n  - `UserDataMigrator.backup_user_data(self, user_id, user_dir)` - Create backup of user data before migration.\n  - `UserDataMigrator.load_current_data(self, user_id, user_dir)` - Load all current data files for a user.\n  - `UserDataMigrator.transform_data(self, user_id, current_data)` - Transform current data structure to new structure.\n  - `UserDataMigrator.save_new_data(self, user_id, new_data)` - Save the new data structure for a user.\n  - `UserDataMigrator.cleanup_old_files(self, user_dir)` - Remove old files after successful migration.\n\n### scripts/test_ai_parsing.py\n**Functions:**\n- `test_ai_parsing()` - Test AI-enhanced parsing with various natural language inputs.\n- `test_forced_ai_parsing()` - Test AI parsing by temporarily disabling rule-based parsing.\n- `forced_ai_parse(message)` - Force AI parsing by skipping rule-based parsing.\n\n### scripts/test_ai_raw.py\n**Functions:**\n- `test_ai_raw()` - Test AI chatbot directly to see what it returns.\n\n### scripts/test_centralized_config.py\n**Functions:**\n- `test_centralized_configurations()` - Test that all centralized configurations are properly set and accessible.\n- `test_environment_override()` - Test that environment variables can override default values.\n\n### scripts/test_comprehensive_fixes.py\n**Functions:**\n- `test_task_formatting_fixes()` - Test that task responses are properly formatted (no JSON, no system prompts)\n- `test_response_length_limits()` - Test that responses are properly length-limited\n- `test_task_suggestions()` - Test that task suggestions are improved\n- `test_task_listing_suggestions()` - Test that task listing suggestions are action-oriented\n- `test_ai_enhancement_disabled()` - Test that AI enhancement is disabled for task responses\n\n### scripts/test_discord_commands.py\n**Functions:**\n- `main()` - Main test function\n- `__init__(self)` - No description\n- `test_command_parsing(self)` - Test the enhanced command parser with various inputs\n- `test_interaction_handlers(self)` - Test interaction handlers with parsed commands\n- `test_current_discord_commands(self)` - Test the current Discord bot commands\n- `test_natural_language_processing(self)` - Test natural language processing capabilities\n- `generate_enhancement_plan(self)` - Generate a plan for Discord enhancements\n**Classes:**\n- `DiscordCommandTester` - Test class for Discord commands and interaction handlers\n  - `DiscordCommandTester.__init__(self)` - No description\n  - `DiscordCommandTester.test_command_parsing(self)` - Test the enhanced command parser with various inputs\n  - `DiscordCommandTester.test_interaction_handlers(self)` - Test interaction handlers with parsed commands\n  - `DiscordCommandTester.test_current_discord_commands(self)` - Test the current Discord bot commands\n  - `DiscordCommandTester.test_natural_language_processing(self)` - Test natural language processing capabilities\n  - `DiscordCommandTester.generate_enhancement_plan(self)` - Generate a plan for Discord enhancements\n\n### scripts/test_enhanced_discord_commands.py\n**Functions:**\n- `test_enhanced_discord_commands()` - Test the enhanced Discord commands\n\n### scripts/test_enhanced_parser_direct.py\n**Functions:**\n- `test_enhanced_parser_direct()` - Test enhanced command parser directly with debug output.\n\n### scripts/test_task_response_formatting.py\n**Functions:**\n- `test_task_listing_response()` - Test task listing response formatting\n- `test_enhanced_command_parser()` - Test enhanced command parser directly\n- `test_task_handler_directly()` - Test task handler directly\n\n### scripts/testing/ai/test_ai_with_clear_cache.py\n**Functions:**\n- `test_ai_with_clear_cache()` - Test AI responses with cleared cache.\n- `test_direct_api_call()` - Test direct API call with comprehensive context.\n\n### scripts/testing/ai/test_comprehensive_ai.py\n**Functions:**\n- `test_comprehensive_ai_access()` - Test the comprehensive AI access to user data.\n- `test_ai_status()` - Test the AI status to confirm it's using comprehensive context.\n\n### scripts/testing/ai/test_data_integrity.py\n**Functions:**\n- `test_data_integrity()` - No description\n\n### scripts/testing/ai/test_lm_studio.py\n**Functions:**\n- `test_lm_studio_connection()` - Test the LM Studio connection directly.\n- `test_ai_chatbot_status()` - Test the AI chatbot status.\n- `test_simple_response()` - Test a simple AI response.\n\n### scripts/testing/ai/test_new_modules.py\n**Functions:**\n- `test_validation_module()` - Test validation.py module\n- `test_file_operations_module()` - Test file_operations.py module\n- `test_service_utilities_module()` - Test service_utilities.py module\n- `test_user_management_module()` - Test user_management.py module\n- `test_message_management_module()` - Test message_management.py module\n- `test_schedule_management_module()` - Test schedule_management.py module\n- `test_response_tracking_module()` - Test response_tracking.py module\n- `main()` - Run all tests\n\n### scripts/testing/analyze_documentation_overlap.py\n**Functions:**\n- `get_documentation_files()` - Get all documentation files and their content.\n- `extract_sections(content)` - Extract sections from markdown content.\n- `find_common_topics(docs)` - Find common topics across documentation files.\n- `analyze_file_purposes(docs)` - Analyze the purpose and content of each documentation file.\n- `generate_consolidation_report()` - Generate a report on documentation consolidation opportunities.\n\n### scripts/testing/test_migration.py\n**Functions:**\n- `main()` - Test the migration in dry-run mode.\n\n### scripts/testing/test_user_data_analysis.py\n**Functions:**\n- `test_user_data_analysis()` - Test the enhanced fallback with user-specific questions.\n- `test_fallback_directly()` - Test the fallback method directly.\n\n### scripts/testing/test_utils_functions.py\n**Functions:**\n- `test_basic_imports()` - Test that we can import all the key modules\n- `test_file_operations()` - Test basic file operations\n- `test_user_operations()` - Test user-related operations\n- `test_utility_functions()` - Test utility functions\n- `main()` - Run all tests\n\n### scripts/testing/validate_config.py\n**Functions:**\n- `main()` - No description\n\n### scripts/utilities/add_checkin_schedules.py\n**Functions:**\n- `add_checkin_schedules_to_existing_users()` - Add check-in schedules to existing users who have check-ins enabled\n- `show_user_checkin_status()` - Show the current check-in status for all users\n\n### scripts/utilities/check_checkin_schedules.py\n**Functions:**\n- `check_checkin_schedules()` - Check check-in schedules for all users\n- `show_schedule_period_structure()` - Show the structure of check-in schedule periods\n- `show_management_commands()` - Show how to manage check-in schedules\n\n### scripts/utilities/cleanup/cleanup_data_test_users.py\n**Functions:**\n- `cleanup_data_test_users()` - Remove test users from the data/users directory\n- `main()` - Main cleanup function\n\n### scripts/utilities/cleanup/cleanup_real_test_users.py\n**Functions:**\n- `cleanup_real_test_users()` - Clean up test users in the real data directory.\n\n### scripts/utilities/cleanup/cleanup_test_data.py\n**Functions:**\n- `get_script_dir()` - Get the MHM root directory\n- `cleanup_test_users()` - Remove test user directories\n- `cleanup_backup_files()` - Remove backup files from migration and testing\n- `cleanup_old_scripts()` - Remove old migration and testing scripts that are no longer needed\n- `main()` - Run the cleanup process\n\n### scripts/utilities/cleanup/cleanup_user_message_files.py\n**Functions:**\n- `check_message_file_format(file_path)` - Check if a message file is in the old format (list of strings).\n- `cleanup_user_message_files()` - Clean up user message files by removing unwanted files and ensuring proper ones exist.\n- `main()` - Main function to run the cleanup.\n\n### scripts/utilities/cleanup_duplicate_messages.py\n**Functions:**\n- `find_message_files()` - Find all JSON message files in the configured messages directory.\n- `check_duplicates_in_file(filepath)` - Check for duplicate messages in a single file.\n- `create_backup(filepath)` - Create a backup of the file before modification.\n- `clean_duplicates(args)` - Main function to clean duplicates from all message files.\n- `main()` - No description\n\n### scripts/utilities/cleanup_test_users.py\n**Functions:**\n- `cleanup_test_users()` - Remove test users from the real data directory\n- `main()` - Main cleanup function\n\n### scripts/utilities/fix_user_schedules.py\n**Functions:**\n- `fix_user_schedules(user_id)` - Fix the schedule structure for a specific user.\n\n### scripts/utilities/rebuild_index.py\n**Functions:**\n- `main()` - Rebuild the user index.\n\n### scripts/utilities/refactoring/analyze_migration_needs.py\n**Functions:**\n- `extract_imports_from_file(filepath)` - Extract all imports from a Python file.\n- `analyze_migration_needs()` - Analyze what needs to be migrated from core.user_management.\n\n### scripts/utilities/refactoring/fix_broken_imports.py\n**Functions:**\n- `backup_file(filepath)` - Create a backup of the file.\n- `fix_imports_in_file(filepath)` - Fix broken imports in a single file.\n- `main()` - Main fix function.\n\n### scripts/utilities/refactoring/migrate_legacy_imports.py\n**Functions:**\n- `backup_file(filepath)` - Create a backup of the file.\n- `migrate_imports_in_file(filepath)` - Migrate imports in a single file.\n- `main()` - Main migration function.\n\n### scripts/utilities/restore_custom_periods.py\n**Functions:**\n- `migrate_legacy_schedules_structure(schedules_data)` - Convert legacy flat schedule structure to new nested format.\n- `restore_custom_periods()` - Restore custom periods from backup for all users.\n- `main()` - Main restoration function.\n\n### scripts/utilities/user_data_cli.py\n**Functions:**\n- `format_size(size_bytes)` - Format bytes to human readable format\n- `cmd_update_references(args)` - Update message references for a user\n- `cmd_backup_user(args)` - Create a backup of user data\n- `cmd_summary(args)` - Show user data summary\n- `cmd_index(args)` - Manage user index\n- `cmd_list_users(args)` - List all users with basic info\n- `main()` - No description\n\n### tasks/task_management.py\n**Functions:**\n- `ensure_task_directory(user_id)` - Ensure the task directory structure exists for a user.\n- `load_active_tasks(user_id)` - Load active tasks for a user.\n- `save_active_tasks(user_id, tasks)` - Save active tasks for a user.\n- `load_completed_tasks(user_id)` - Load completed tasks for a user.\n- `save_completed_tasks(user_id, tasks)` - Save completed tasks for a user.\n- `create_task(user_id, title, description, due_date, due_time, priority, reminder_periods, tags, quick_reminders)` - Create a new task for a user.\n- `update_task(user_id, task_id, updates)` - Update an existing task.\n- `complete_task(user_id, task_id, completion_data)` - Mark a task as completed.\n- `restore_task(user_id, task_id)` - Restore a completed task to active status.\n- `delete_task(user_id, task_id)` - Delete a task (permanently remove it).\n- `get_task_by_id(user_id, task_id)` - Get a specific task by ID.\n- `get_tasks_due_soon(user_id, days_ahead)` - Get tasks due within the specified number of days.\n- `are_tasks_enabled(user_id)` - Check if task management is enabled for a user.\n- `schedule_task_reminders(user_id, task_id, reminder_periods)` - Schedule reminders for a specific task based on its reminder periods.\n- `cleanup_task_reminders(user_id, task_id)` - Clean up all reminders for a specific task.\n- `get_user_task_tags(user_id)` - Get the list of available tags for a user from their preferences.\n- `add_user_task_tag(user_id, tag)` - Add a new tag to the user's task settings.\n- `setup_default_task_tags(user_id)` - Set up default task tags for a user when task management is first enabled.\n- `remove_user_task_tag(user_id, tag)` - Remove a tag from the user's task settings.\n- `get_user_task_stats(user_id)` - Get task statistics for a user.\n**Classes:**\n- `TaskManagementError` - Custom exception for task management errors.\n\n### test_user_creation_debug.py\n**Functions:**\n- `test_user_creation()` - No description\n\n### tests/behavior/test_account_management_real_behavior.py\n**Functions:**\n- `setup_test_environment(test_data_dir)` - Create isolated test environment with temporary directories\n- `create_test_user_data(user_id, test_data_dir, base_state)` - Create test user data with specific base state using centralized utilities\n- `test_user_data_loading_real_behavior(test_data_dir)` - Test actual user data loading with file verification\n- `test_feature_enablement_real_behavior(test_data_dir)` - Test actual feature enablement with file creation/deletion\n- `test_category_management_real_behavior(test_data_dir)` - Test actual category management with file persistence\n- `test_schedule_period_management_real_behavior(test_data_dir)` - Test actual schedule period management with file persistence\n- `test_integration_scenarios_real_behavior(test_data_dir)` - Test complex integration scenarios with multiple operations\n- `test_data_consistency_real_behavior(test_data_dir)` - Test data consistency across multiple operations\n- `cleanup_test_environment(test_dir)` - Clean up test environment\n- `main()` - Run all real behavior tests\n\n### tests/behavior/test_ai_chatbot_behavior.py\n**Functions:**\n- `test_singleton_behavior_creates_single_instance(self, test_data_dir)` - Test that AI chatbot singleton actually creates only one instance.\n- `test_system_prompt_loader_creates_actual_file(self, test_data_dir)` - Test that system prompt loader actually creates and manages prompt files.\n- `test_response_cache_actually_stores_and_retrieves_data(self, test_data_dir)` - Test that response cache actually stores and retrieves data.\n- `test_response_cache_cleanup_actually_removes_entries(self, test_data_dir)` - Test that response cache cleanup actually removes old entries.\n- `test_ai_chatbot_generates_actual_responses(self, test_data_dir)` - Test that AI chatbot actually generates responses with real behavior.\n- `test_ai_chatbot_handles_api_failures_gracefully(self, test_data_dir)` - Test that AI chatbot handles API failures and provides fallbacks.\n- `test_ai_chatbot_tracks_conversation_history(self, test_data_dir)` - Test that AI chatbot actually tracks conversation history.\n- `test_ai_chatbot_uses_user_context_for_personalization(self, test_data_dir)` - Test that AI chatbot actually uses user context for personalized responses.\n- `test_ai_chatbot_adaptive_timeout_responds_to_system_resources(self, test_data_dir)` - Test that AI chatbot adaptive timeout actually responds to system resources.\n- `test_ai_chatbot_command_parsing_creates_structured_output(self, test_data_dir)` - Test that AI chatbot command parsing actually creates structured output.\n- `test_ai_chatbot_prompt_optimization_improves_performance(self, test_data_dir)` - Test that AI chatbot prompt optimization actually improves performance.\n- `test_ai_chatbot_status_reporting_actual_system_state(self, test_data_dir)` - Test that AI chatbot status reporting reflects actual system state.\n- `test_ai_chatbot_system_prompt_integration_test_actual_functionality(self, test_data_dir)` - Test that AI chatbot system prompt integration test actually verifies functionality.\n- `test_ai_chatbot_error_handling_preserves_system_stability(self, test_data_dir)` - Test that AI chatbot error handling actually preserves system stability.\n- `test_ai_chatbot_conversation_manager_integration(self, test_data_dir)` - Test that AI chatbot integrates properly with conversation manager.\n- `test_ai_chatbot_user_context_manager_integration(self, test_data_dir)` - Test that AI chatbot integrates properly with user context manager.\n- `test_ai_chatbot_response_tracking_integration(self, test_data_dir)` - Test that AI chatbot integrates properly with response tracking.\n- `test_ai_chatbot_performance_under_load(self, test_data_dir)` - Test that AI chatbot performs well under load.\n- `test_ai_chatbot_cache_performance_improvement(self, test_data_dir)` - Test that AI chatbot cache actually improves performance.\n- `test_ai_chatbot_cleanup_and_resource_management(self, test_data_dir)` - Test that AI chatbot properly manages resources and cleanup.\n- `test_ai_chatbot_with_real_user_data(self, test_data_dir)` - Test AI chatbot with real user data files.\n- `test_ai_chatbot_error_recovery_with_real_files(self, test_data_dir)` - Test AI chatbot error recovery with real file operations.\n- `test_ai_chatbot_concurrent_access_safety(self, test_data_dir)` - Test that AI chatbot handles concurrent access safely.\n- `generate_response(thread_id)` - No description\n**Classes:**\n- `TestAIChatBotBehavior` - Test AI chatbot real behavior and side effects.\n  - `TestAIChatBotBehavior.test_singleton_behavior_creates_single_instance(self, test_data_dir)` - Test that AI chatbot singleton actually creates only one instance.\n  - `TestAIChatBotBehavior.test_system_prompt_loader_creates_actual_file(self, test_data_dir)` - Test that system prompt loader actually creates and manages prompt files.\n  - `TestAIChatBotBehavior.test_response_cache_actually_stores_and_retrieves_data(self, test_data_dir)` - Test that response cache actually stores and retrieves data.\n  - `TestAIChatBotBehavior.test_response_cache_cleanup_actually_removes_entries(self, test_data_dir)` - Test that response cache cleanup actually removes old entries.\n  - `TestAIChatBotBehavior.test_ai_chatbot_generates_actual_responses(self, test_data_dir)` - Test that AI chatbot actually generates responses with real behavior.\n  - `TestAIChatBotBehavior.test_ai_chatbot_handles_api_failures_gracefully(self, test_data_dir)` - Test that AI chatbot handles API failures and provides fallbacks.\n  - `TestAIChatBotBehavior.test_ai_chatbot_tracks_conversation_history(self, test_data_dir)` - Test that AI chatbot actually tracks conversation history.\n  - `TestAIChatBotBehavior.test_ai_chatbot_uses_user_context_for_personalization(self, test_data_dir)` - Test that AI chatbot actually uses user context for personalized responses.\n  - `TestAIChatBotBehavior.test_ai_chatbot_adaptive_timeout_responds_to_system_resources(self, test_data_dir)` - Test that AI chatbot adaptive timeout actually responds to system resources.\n  - `TestAIChatBotBehavior.test_ai_chatbot_command_parsing_creates_structured_output(self, test_data_dir)` - Test that AI chatbot command parsing actually creates structured output.\n  - `TestAIChatBotBehavior.test_ai_chatbot_prompt_optimization_improves_performance(self, test_data_dir)` - Test that AI chatbot prompt optimization actually improves performance.\n  - `TestAIChatBotBehavior.test_ai_chatbot_status_reporting_actual_system_state(self, test_data_dir)` - Test that AI chatbot status reporting reflects actual system state.\n  - `TestAIChatBotBehavior.test_ai_chatbot_system_prompt_integration_test_actual_functionality(self, test_data_dir)` - Test that AI chatbot system prompt integration test actually verifies functionality.\n  - `TestAIChatBotBehavior.test_ai_chatbot_error_handling_preserves_system_stability(self, test_data_dir)` - Test that AI chatbot error handling actually preserves system stability.\n  - `TestAIChatBotBehavior.test_ai_chatbot_conversation_manager_integration(self, test_data_dir)` - Test that AI chatbot integrates properly with conversation manager.\n  - `TestAIChatBotBehavior.test_ai_chatbot_user_context_manager_integration(self, test_data_dir)` - Test that AI chatbot integrates properly with user context manager.\n  - `TestAIChatBotBehavior.test_ai_chatbot_response_tracking_integration(self, test_data_dir)` - Test that AI chatbot integrates properly with response tracking.\n  - `TestAIChatBotBehavior.test_ai_chatbot_performance_under_load(self, test_data_dir)` - Test that AI chatbot performs well under load.\n  - `TestAIChatBotBehavior.test_ai_chatbot_cache_performance_improvement(self, test_data_dir)` - Test that AI chatbot cache actually improves performance.\n  - `TestAIChatBotBehavior.test_ai_chatbot_cleanup_and_resource_management(self, test_data_dir)` - Test that AI chatbot properly manages resources and cleanup.\n- `TestAIChatBotIntegration` - Test AI chatbot integration with other system components.\n  - `TestAIChatBotIntegration.test_ai_chatbot_with_real_user_data(self, test_data_dir)` - Test AI chatbot with real user data files.\n  - `TestAIChatBotIntegration.test_ai_chatbot_error_recovery_with_real_files(self, test_data_dir)` - Test AI chatbot error recovery with real file operations.\n  - `TestAIChatBotIntegration.test_ai_chatbot_concurrent_access_safety(self, test_data_dir)` - Test that AI chatbot handles concurrent access safely.\n\n### tests/behavior/test_communication_behavior.py\n**Functions:**\n- `temp_dir(self)` - Create a temporary directory for testing.\n- `comm_manager(self)` - Create a CommunicationManager instance for testing.\n- `mock_channel_config(self)` - Create a mock channel configuration.\n- `realistic_mock_channel(self)` - Create a realistic mock channel with proper async methods.\n- `test_communication_manager_singleton(self, comm_manager)` - Test that CommunicationManager follows singleton pattern.\n- `test_communication_manager_initialization(self, comm_manager)` - Test CommunicationManager initialization.\n- `test_initialize_channels_from_config(self, mock_factory, comm_manager, mock_channel_config, realistic_mock_channel)` - Test channel initialization from configuration with realistic channel behavior.\n- `test_get_available_channels(self, comm_manager, realistic_mock_channel)` - Test getting available channels with realistic channel setup.\n- `test_is_channel_ready_with_realistic_channel(self, comm_manager, realistic_mock_channel)` - Test checking if a channel is ready with realistic channel behavior.\n- `test_send_message_sync_with_realistic_channel(self, comm_manager, realistic_mock_channel)` - Test synchronous message sending with realistic channel behavior.\n- `test_send_message_sync_channel_not_ready(self, comm_manager, realistic_mock_channel)` - Test synchronous message sending when channel is not ready.\n- `test_send_message_sync_channel_not_found(self, comm_manager)` - Test synchronous message sending when channel doesn't exist.\n- `test_communication_manager_error_handling(self, comm_manager, realistic_mock_channel)` - Test error handling in communication manager.\n**Classes:**\n- `TestCommunicationManager` - Test cases for the CommunicationManager class.\n  - `TestCommunicationManager.temp_dir(self)` - Create a temporary directory for testing.\n  - `TestCommunicationManager.comm_manager(self)` - Create a CommunicationManager instance for testing.\n  - `TestCommunicationManager.mock_channel_config(self)` - Create a mock channel configuration.\n  - `TestCommunicationManager.realistic_mock_channel(self)` - Create a realistic mock channel with proper async methods.\n  - `TestCommunicationManager.test_communication_manager_singleton(self, comm_manager)` - Test that CommunicationManager follows singleton pattern.\n  - `TestCommunicationManager.test_communication_manager_initialization(self, comm_manager)` - Test CommunicationManager initialization.\n  - `TestCommunicationManager.test_initialize_channels_from_config(self, mock_factory, comm_manager, mock_channel_config, realistic_mock_channel)` - Test channel initialization from configuration with realistic channel behavior.\n  - `TestCommunicationManager.test_get_available_channels(self, comm_manager, realistic_mock_channel)` - Test getting available channels with realistic channel setup.\n  - `TestCommunicationManager.test_is_channel_ready_with_realistic_channel(self, comm_manager, realistic_mock_channel)` - Test checking if a channel is ready with realistic channel behavior.\n  - `TestCommunicationManager.test_send_message_sync_with_realistic_channel(self, comm_manager, realistic_mock_channel)` - Test synchronous message sending with realistic channel behavior.\n  - `TestCommunicationManager.test_send_message_sync_channel_not_ready(self, comm_manager, realistic_mock_channel)` - Test synchronous message sending when channel is not ready.\n  - `TestCommunicationManager.test_send_message_sync_channel_not_found(self, comm_manager)` - Test synchronous message sending when channel doesn't exist.\n  - `TestCommunicationManager.test_communication_manager_error_handling(self, comm_manager, realistic_mock_channel)` - Test error handling in communication manager.\n\n### tests/behavior/test_conversation_behavior.py\n**Functions:**\n- `test_conversation_manager_initialization_creates_structure(self, test_data_dir)` - Test that ConversationManager initialization creates proper internal structure.\n- `test_handle_inbound_message_creates_user_state(self, test_data_dir)` - Test that handle_inbound_message actually creates user state when needed.\n- `test_handle_inbound_message_preserves_existing_state(self, test_data_dir)` - Test that handle_inbound_message preserves existing user state.\n- `test_start_daily_checkin_creates_checkin_state(self, test_data_dir)` - Test that start_daily_checkin actually creates check-in state.\n- `test_start_daily_checkin_handles_disabled_user(self, test_data_dir)` - Test that start_daily_checkin handles users with disabled check-ins.\n- `test_daily_checkin_flow_progression(self, test_data_dir)` - Test that daily check-in flow actually progresses through states.\n- `test_daily_checkin_flow_completion(self, test_data_dir)` - Test that daily check-in flow actually completes and cleans up state.\n- `test_validate_response_handles_various_inputs(self, test_data_dir)` - Test that _validate_response actually validates different types of responses.\n- `test_validate_response_handles_edge_cases(self, test_data_dir)` - Test that _validate_response handles edge cases gracefully.\n- `test_get_question_text_returns_personalized_questions(self, test_data_dir)` - Test that _get_question_text returns personalized questions based on context.\n- `test_handle_contextual_question_integrates_with_ai(self, test_data_dir)` - Test that handle_contextual_question integrates with AI chatbot.\n- `test_conversation_manager_error_handling_preserves_system_stability(self, test_data_dir)` - Test that ConversationManager error handling preserves system stability.\n- `test_conversation_manager_performance_under_load(self, test_data_dir)` - Test that ConversationManager performs well under load.\n- `test_conversation_manager_cleanup_and_resource_management(self, test_data_dir)` - Test that ConversationManager properly manages resources and cleanup.\n- `test_conversation_manager_integration_with_response_tracking(self, test_data_dir)` - Test that ConversationManager integrates properly with response tracking.\n- `test_conversation_manager_command_handling(self, test_data_dir)` - Test that ConversationManager properly handles special commands.\n- `test_conversation_manager_cancel_handling(self, test_data_dir)` - Test that ConversationManager properly handles cancel commands.\n- `test_conversation_manager_with_real_user_data(self, test_data_dir)` - Test ConversationManager with real user data files.\n- `test_conversation_manager_error_recovery_with_real_files(self, test_data_dir)` - Test ConversationManager error recovery with corrupted real files.\n- `test_conversation_manager_concurrent_access_safety(self, test_data_dir)` - Test ConversationManager safety under concurrent access.\n**Classes:**\n- `TestConversationManagerBehavior` - Test ConversationManager real behavior and side effects.\n  - `TestConversationManagerBehavior.test_conversation_manager_initialization_creates_structure(self, test_data_dir)` - Test that ConversationManager initialization creates proper internal structure.\n  - `TestConversationManagerBehavior.test_handle_inbound_message_creates_user_state(self, test_data_dir)` - Test that handle_inbound_message actually creates user state when needed.\n  - `TestConversationManagerBehavior.test_handle_inbound_message_preserves_existing_state(self, test_data_dir)` - Test that handle_inbound_message preserves existing user state.\n  - `TestConversationManagerBehavior.test_start_daily_checkin_creates_checkin_state(self, test_data_dir)` - Test that start_daily_checkin actually creates check-in state.\n  - `TestConversationManagerBehavior.test_start_daily_checkin_handles_disabled_user(self, test_data_dir)` - Test that start_daily_checkin handles users with disabled check-ins.\n  - `TestConversationManagerBehavior.test_daily_checkin_flow_progression(self, test_data_dir)` - Test that daily check-in flow actually progresses through states.\n  - `TestConversationManagerBehavior.test_daily_checkin_flow_completion(self, test_data_dir)` - Test that daily check-in flow actually completes and cleans up state.\n  - `TestConversationManagerBehavior.test_validate_response_handles_various_inputs(self, test_data_dir)` - Test that _validate_response actually validates different types of responses.\n  - `TestConversationManagerBehavior.test_validate_response_handles_edge_cases(self, test_data_dir)` - Test that _validate_response handles edge cases gracefully.\n  - `TestConversationManagerBehavior.test_get_question_text_returns_personalized_questions(self, test_data_dir)` - Test that _get_question_text returns personalized questions based on context.\n  - `TestConversationManagerBehavior.test_handle_contextual_question_integrates_with_ai(self, test_data_dir)` - Test that handle_contextual_question integrates with AI chatbot.\n  - `TestConversationManagerBehavior.test_conversation_manager_error_handling_preserves_system_stability(self, test_data_dir)` - Test that ConversationManager error handling preserves system stability.\n  - `TestConversationManagerBehavior.test_conversation_manager_performance_under_load(self, test_data_dir)` - Test that ConversationManager performs well under load.\n  - `TestConversationManagerBehavior.test_conversation_manager_cleanup_and_resource_management(self, test_data_dir)` - Test that ConversationManager properly manages resources and cleanup.\n  - `TestConversationManagerBehavior.test_conversation_manager_integration_with_response_tracking(self, test_data_dir)` - Test that ConversationManager integrates properly with response tracking.\n  - `TestConversationManagerBehavior.test_conversation_manager_command_handling(self, test_data_dir)` - Test that ConversationManager properly handles special commands.\n  - `TestConversationManagerBehavior.test_conversation_manager_cancel_handling(self, test_data_dir)` - Test that ConversationManager properly handles cancel commands.\n- `TestConversationManagerIntegration` - Integration tests for ConversationManager with real user data.\n  - `TestConversationManagerIntegration.test_conversation_manager_with_real_user_data(self, test_data_dir)` - Test ConversationManager with real user data files.\n  - `TestConversationManagerIntegration.test_conversation_manager_error_recovery_with_real_files(self, test_data_dir)` - Test ConversationManager error recovery with corrupted real files.\n  - `TestConversationManagerIntegration.test_conversation_manager_concurrent_access_safety(self, test_data_dir)` - Test ConversationManager safety under concurrent access.\n\n### tests/behavior/test_discord_bot_behavior.py\n**Functions:**\n- `discord_bot(self, test_data_dir)` - Create a Discord bot instance for testing\n- `mock_discord_bot(self)` - Create a mock Discord bot instance\n- `test_discord_bot_initialization_creates_proper_structure(self, test_data_dir)` - Test that Discord bot initialization creates proper internal structure\n- `test_discord_bot_channel_type_is_async(self, test_data_dir)` - Test that Discord bot channel type is correctly set to ASYNC\n- `test_dns_resolution_check_actually_tests_connectivity(self, test_data_dir)` - Test that DNS resolution check actually tests network connectivity\n- `test_dns_resolution_fallback_uses_alternative_servers(self, test_data_dir)` - Test that DNS resolution fallback actually tries alternative DNS servers\n- `test_network_connectivity_check_tests_multiple_endpoints(self, test_data_dir)` - Test that network connectivity check actually tests multiple Discord endpoints\n- `test_network_connectivity_fallback_tries_alternative_endpoints(self, test_data_dir)` - Test that network connectivity fallback actually tries alternative endpoints\n- `test_connection_status_update_actually_changes_state(self, test_data_dir)` - Test that connection status update actually changes internal state\n- `test_detailed_connection_status_returns_actual_state(self, test_data_dir)` - Test that detailed connection status returns actual system state\n- `test_discord_bot_initialization_with_valid_token(self, test_data_dir, mock_discord_bot)` - Test that Discord bot initialization actually creates bot instance with valid token\n- `test_discord_bot_initialization_without_token(self, test_data_dir)` - Test that Discord bot initialization fails gracefully without token\n- `test_discord_bot_initialization_with_dns_failure(self, test_data_dir)` - Test that Discord bot initialization handles DNS failures gracefully\n- `test_discord_bot_shutdown_actually_cleans_up(self, test_data_dir, mock_discord_bot)` - Test that Discord bot shutdown actually cleans up resources\n- `test_discord_bot_send_message_actually_sends(self, test_data_dir, mock_discord_bot)` - Test that Discord bot send_message actually sends messages\n- `test_discord_bot_send_message_handles_errors(self, test_data_dir, mock_discord_bot)` - Test that Discord bot send_message handles errors gracefully\n- `test_discord_bot_receive_messages_returns_actual_data(self, test_data_dir, mock_discord_bot)` - Test that Discord bot receive_messages returns actual message data\n- `test_discord_bot_health_check_verifies_actual_status(self, test_data_dir, mock_discord_bot)` - Test that Discord bot health check actually verifies system status\n- `test_discord_bot_health_status_returns_actual_metrics(self, test_data_dir, mock_discord_bot)` - Test that Discord bot health status returns actual system metrics\n- `test_discord_bot_connection_status_summary_returns_readable_string(self, test_data_dir)` - Test that Discord bot connection status summary returns readable string\n- `test_discord_bot_is_actually_connected_checks_real_state(self, test_data_dir, mock_discord_bot)` - Test that Discord bot is_actually_connected checks real connection state\n- `test_discord_bot_manual_reconnect_actually_reconnects(self, test_data_dir, mock_discord_bot)` - Test that Discord bot manual reconnect actually attempts reconnection\n- `test_discord_bot_start_creates_thread(self, test_data_dir)` - Test that Discord bot start actually creates a thread\n- `test_discord_bot_stop_actually_stops_thread(self, test_data_dir)` - Test that Discord bot stop actually stops the thread\n- `test_discord_bot_is_initialized_checks_actual_state(self, test_data_dir, mock_discord_bot)` - Test that Discord bot is_initialized checks actual initialization state\n- `test_discord_bot_send_dm_actually_sends_direct_message(self, test_data_dir, mock_discord_bot)` - Test that Discord bot send_dm actually sends direct messages\n- `test_user_setup(self, test_data_dir)` - Set up test user data for integration tests\n- `mock_discord_bot(self)` - Create a mock Discord bot instance for integration tests\n- `test_discord_bot_integration_with_conversation_manager(self, test_data_dir, test_user_setup)` - Test that Discord bot integrates properly with conversation manager\n- `test_discord_bot_integration_with_user_management(self, test_data_dir, test_user_setup)` - Test that Discord bot integrates properly with user management\n- `test_discord_bot_error_handling_preserves_system_stability(self, test_data_dir)` - Test that Discord bot error handling preserves system stability\n- `test_discord_bot_performance_under_load(self, test_data_dir)` - Test that Discord bot performs well under load\n- `test_discord_bot_cleanup_and_resource_management(self, test_data_dir, mock_discord_bot)` - Test that Discord bot properly manages resources and cleanup\n- `test_discord_bot_with_real_user_data(self, test_data_dir, test_user_setup)` - Test Discord bot with real user data\n- `test_discord_bot_error_recovery_with_real_files(self, test_data_dir)` - Test Discord bot error recovery with real files\n- `test_discord_bot_concurrent_access_safety(self, test_data_dir)` - Test that Discord bot handles concurrent access safely\n**Classes:**\n- `TestDiscordBotBehavior` - Test Discord bot real behavior and side effects\n  - `TestDiscordBotBehavior.discord_bot(self, test_data_dir)` - Create a Discord bot instance for testing\n  - `TestDiscordBotBehavior.mock_discord_bot(self)` - Create a mock Discord bot instance\n  - `TestDiscordBotBehavior.test_discord_bot_initialization_creates_proper_structure(self, test_data_dir)` - Test that Discord bot initialization creates proper internal structure\n  - `TestDiscordBotBehavior.test_discord_bot_channel_type_is_async(self, test_data_dir)` - Test that Discord bot channel type is correctly set to ASYNC\n  - `TestDiscordBotBehavior.test_dns_resolution_check_actually_tests_connectivity(self, test_data_dir)` - Test that DNS resolution check actually tests network connectivity\n  - `TestDiscordBotBehavior.test_dns_resolution_fallback_uses_alternative_servers(self, test_data_dir)` - Test that DNS resolution fallback actually tries alternative DNS servers\n  - `TestDiscordBotBehavior.test_network_connectivity_check_tests_multiple_endpoints(self, test_data_dir)` - Test that network connectivity check actually tests multiple Discord endpoints\n  - `TestDiscordBotBehavior.test_network_connectivity_fallback_tries_alternative_endpoints(self, test_data_dir)` - Test that network connectivity fallback actually tries alternative endpoints\n  - `TestDiscordBotBehavior.test_connection_status_update_actually_changes_state(self, test_data_dir)` - Test that connection status update actually changes internal state\n  - `TestDiscordBotBehavior.test_detailed_connection_status_returns_actual_state(self, test_data_dir)` - Test that detailed connection status returns actual system state\n  - `TestDiscordBotBehavior.test_discord_bot_initialization_with_valid_token(self, test_data_dir, mock_discord_bot)` - Test that Discord bot initialization actually creates bot instance with valid token\n  - `TestDiscordBotBehavior.test_discord_bot_initialization_without_token(self, test_data_dir)` - Test that Discord bot initialization fails gracefully without token\n  - `TestDiscordBotBehavior.test_discord_bot_initialization_with_dns_failure(self, test_data_dir)` - Test that Discord bot initialization handles DNS failures gracefully\n  - `TestDiscordBotBehavior.test_discord_bot_shutdown_actually_cleans_up(self, test_data_dir, mock_discord_bot)` - Test that Discord bot shutdown actually cleans up resources\n  - `TestDiscordBotBehavior.test_discord_bot_send_message_actually_sends(self, test_data_dir, mock_discord_bot)` - Test that Discord bot send_message actually sends messages\n  - `TestDiscordBotBehavior.test_discord_bot_send_message_handles_errors(self, test_data_dir, mock_discord_bot)` - Test that Discord bot send_message handles errors gracefully\n  - `TestDiscordBotBehavior.test_discord_bot_receive_messages_returns_actual_data(self, test_data_dir, mock_discord_bot)` - Test that Discord bot receive_messages returns actual message data\n  - `TestDiscordBotBehavior.test_discord_bot_health_check_verifies_actual_status(self, test_data_dir, mock_discord_bot)` - Test that Discord bot health check actually verifies system status\n  - `TestDiscordBotBehavior.test_discord_bot_health_status_returns_actual_metrics(self, test_data_dir, mock_discord_bot)` - Test that Discord bot health status returns actual system metrics\n  - `TestDiscordBotBehavior.test_discord_bot_connection_status_summary_returns_readable_string(self, test_data_dir)` - Test that Discord bot connection status summary returns readable string\n  - `TestDiscordBotBehavior.test_discord_bot_is_actually_connected_checks_real_state(self, test_data_dir, mock_discord_bot)` - Test that Discord bot is_actually_connected checks real connection state\n  - `TestDiscordBotBehavior.test_discord_bot_manual_reconnect_actually_reconnects(self, test_data_dir, mock_discord_bot)` - Test that Discord bot manual reconnect actually attempts reconnection\n  - `TestDiscordBotBehavior.test_discord_bot_start_creates_thread(self, test_data_dir)` - Test that Discord bot start actually creates a thread\n  - `TestDiscordBotBehavior.test_discord_bot_stop_actually_stops_thread(self, test_data_dir)` - Test that Discord bot stop actually stops the thread\n  - `TestDiscordBotBehavior.test_discord_bot_is_initialized_checks_actual_state(self, test_data_dir, mock_discord_bot)` - Test that Discord bot is_initialized checks actual initialization state\n  - `TestDiscordBotBehavior.test_discord_bot_send_dm_actually_sends_direct_message(self, test_data_dir, mock_discord_bot)` - Test that Discord bot send_dm actually sends direct messages\n- `TestDiscordBotIntegration` - Test Discord bot integration with other system components\n  - `TestDiscordBotIntegration.test_user_setup(self, test_data_dir)` - Set up test user data for integration tests\n  - `TestDiscordBotIntegration.mock_discord_bot(self)` - Create a mock Discord bot instance for integration tests\n  - `TestDiscordBotIntegration.test_discord_bot_integration_with_conversation_manager(self, test_data_dir, test_user_setup)` - Test that Discord bot integrates properly with conversation manager\n  - `TestDiscordBotIntegration.test_discord_bot_integration_with_user_management(self, test_data_dir, test_user_setup)` - Test that Discord bot integrates properly with user management\n  - `TestDiscordBotIntegration.test_discord_bot_error_handling_preserves_system_stability(self, test_data_dir)` - Test that Discord bot error handling preserves system stability\n  - `TestDiscordBotIntegration.test_discord_bot_performance_under_load(self, test_data_dir)` - Test that Discord bot performs well under load\n  - `TestDiscordBotIntegration.test_discord_bot_cleanup_and_resource_management(self, test_data_dir, mock_discord_bot)` - Test that Discord bot properly manages resources and cleanup\n  - `TestDiscordBotIntegration.test_discord_bot_with_real_user_data(self, test_data_dir, test_user_setup)` - Test Discord bot with real user data\n  - `TestDiscordBotIntegration.test_discord_bot_error_recovery_with_real_files(self, test_data_dir)` - Test Discord bot error recovery with real files\n  - `TestDiscordBotIntegration.test_discord_bot_concurrent_access_safety(self, test_data_dir)` - Test that Discord bot handles concurrent access safely\n\n### tests/behavior/test_interaction_handlers_behavior.py\n**Functions:**\n- `_create_test_user(self, user_id, enable_checkins, test_data_dir)` - Create a test user with proper account setup.\n- `test_handler_registry_creates_all_handlers(self)` - Test that all handlers are properly registered and accessible.\n- `test_get_interaction_handler_returns_correct_handler(self)` - Test that get_interaction_handler returns the correct handler for each intent.\n- `test_task_management_handler_can_handle_intents(self)` - Test that TaskManagementHandler can handle all expected intents.\n- `test_checkin_handler_can_handle_intents(self)` - Test that CheckinHandler can handle all expected intents.\n- `test_profile_handler_can_handle_intents(self)` - Test that ProfileHandler can handle all expected intents.\n- `test_schedule_management_handler_can_handle_intents(self)` - Test that ScheduleManagementHandler can handle all expected intents.\n- `test_analytics_handler_can_handle_intents(self)` - Test that AnalyticsHandler can handle all expected intents.\n- `test_help_handler_can_handle_intents(self)` - Test that HelpHandler can handle all expected intents.\n- `test_task_management_handler_creates_actual_task(self, test_data_dir)` - Test that TaskManagementHandler actually creates a task in the system.\n- `test_task_management_handler_lists_actual_tasks(self, test_data_dir)` - Test that TaskManagementHandler actually lists tasks from the system.\n- `test_task_management_handler_completes_actual_task(self, test_data_dir)` - Test that TaskManagementHandler actually completes a task in the system.\n- `test_checkin_handler_starts_checkin_flow(self, test_data_dir)` - Test that CheckinHandler starts a check-in flow.\n- `test_profile_handler_shows_actual_profile(self, test_data_dir)` - Test that ProfileHandler shows actual user profile data.\n- `test_help_handler_provides_help(self)` - Test that HelpHandler provides helpful information.\n- `test_all_handlers_return_proper_help(self)` - Test that all handlers return proper help text.\n- `test_all_handlers_return_proper_examples(self)` - Test that all handlers return proper example commands.\n- `test_handler_error_handling(self, test_data_dir)` - Test that handlers handle errors gracefully.\n- `test_handler_response_structure(self)` - Test that all handlers return properly structured responses.\n**Classes:**\n- `TestInteractionHandlersBehavior` - Test interaction handlers real behavior and side effects.\n  - `TestInteractionHandlersBehavior._create_test_user(self, user_id, enable_checkins, test_data_dir)` - Create a test user with proper account setup.\n  - `TestInteractionHandlersBehavior.test_handler_registry_creates_all_handlers(self)` - Test that all handlers are properly registered and accessible.\n  - `TestInteractionHandlersBehavior.test_get_interaction_handler_returns_correct_handler(self)` - Test that get_interaction_handler returns the correct handler for each intent.\n  - `TestInteractionHandlersBehavior.test_task_management_handler_can_handle_intents(self)` - Test that TaskManagementHandler can handle all expected intents.\n  - `TestInteractionHandlersBehavior.test_checkin_handler_can_handle_intents(self)` - Test that CheckinHandler can handle all expected intents.\n  - `TestInteractionHandlersBehavior.test_profile_handler_can_handle_intents(self)` - Test that ProfileHandler can handle all expected intents.\n  - `TestInteractionHandlersBehavior.test_schedule_management_handler_can_handle_intents(self)` - Test that ScheduleManagementHandler can handle all expected intents.\n  - `TestInteractionHandlersBehavior.test_analytics_handler_can_handle_intents(self)` - Test that AnalyticsHandler can handle all expected intents.\n  - `TestInteractionHandlersBehavior.test_help_handler_can_handle_intents(self)` - Test that HelpHandler can handle all expected intents.\n  - `TestInteractionHandlersBehavior.test_task_management_handler_creates_actual_task(self, test_data_dir)` - Test that TaskManagementHandler actually creates a task in the system.\n  - `TestInteractionHandlersBehavior.test_task_management_handler_lists_actual_tasks(self, test_data_dir)` - Test that TaskManagementHandler actually lists tasks from the system.\n  - `TestInteractionHandlersBehavior.test_task_management_handler_completes_actual_task(self, test_data_dir)` - Test that TaskManagementHandler actually completes a task in the system.\n  - `TestInteractionHandlersBehavior.test_checkin_handler_starts_checkin_flow(self, test_data_dir)` - Test that CheckinHandler starts a check-in flow.\n  - `TestInteractionHandlersBehavior.test_profile_handler_shows_actual_profile(self, test_data_dir)` - Test that ProfileHandler shows actual user profile data.\n  - `TestInteractionHandlersBehavior.test_help_handler_provides_help(self)` - Test that HelpHandler provides helpful information.\n  - `TestInteractionHandlersBehavior.test_all_handlers_return_proper_help(self)` - Test that all handlers return proper help text.\n  - `TestInteractionHandlersBehavior.test_all_handlers_return_proper_examples(self)` - Test that all handlers return proper example commands.\n  - `TestInteractionHandlersBehavior.test_handler_error_handling(self, test_data_dir)` - Test that handlers handle errors gracefully.\n  - `TestInteractionHandlersBehavior.test_handler_response_structure(self)` - Test that all handlers return properly structured responses.\n\n### tests/behavior/test_message_behavior.py\n**Functions:**\n- `test_get_message_categories_success(self)` - Test getting message categories successfully.\n- `test_get_message_categories_default(self)` - Test getting default message categories.\n- `test_get_message_categories_custom(self)` - Test getting custom message categories.\n- `test_get_message_categories_empty(self)` - Test getting message categories when none are defined.\n- `test_load_default_messages_success(self, test_data_dir)` - Test loading default messages successfully.\n- `test_load_default_messages_file_not_found(self, test_data_dir, mock_config)` - Test loading default messages when file doesn't exist.\n- `test_load_default_messages_invalid_json(self, test_data_dir, mock_config)` - Test loading default messages with invalid JSON.\n- `test_add_message_success(self, test_data_dir)` - Test adding a message successfully.\n- `test_edit_message_success(self, test_data_dir)` - Test editing a message successfully.\n- `test_edit_message_not_found(self, test_data_dir)` - Test editing a message that doesn't exist.\n- `test_update_message_success(self, test_data_dir)` - Test updating a message successfully.\n- `test_delete_message_success(self, test_data_dir)` - Test deleting a message successfully.\n- `test_delete_message_not_found(self, test_data_dir)` - Test deleting a message that doesn't exist.\n- `test_store_sent_message_success(self, test_data_dir)` - Test storing a sent message successfully.\n- `test_get_last_10_messages_success(self, test_data_dir)` - Test getting last 10 sent messages successfully.\n- `test_get_last_10_messages_empty(self, test_data_dir)` - Test getting last 10 messages when none exist.\n- `test_create_message_file_from_defaults_success(self, test_data_dir)` - Test creating message file from defaults successfully.\n- `test_ensure_user_message_files_success(self, test_data_dir)` - Test ensuring user message files exist successfully.\n- `test_add_message_file_error(self, test_data_dir)` - Test add_message handles file errors gracefully.\n- `test_edit_message_file_error(self, test_data_dir)` - Test edit_message handles file errors gracefully.\n- `test_delete_message_file_error(self, test_data_dir)` - Test delete_message handles file errors gracefully.\n- `test_store_sent_message_file_error(self, test_data_dir)` - Test store_sent_message handles file errors gracefully.\n- `test_full_message_lifecycle(self, test_data_dir)` - Test complete message lifecycle (add, edit, delete).\n**Classes:**\n- `TestMessageCategories` - Test message category functionality.\n  - `TestMessageCategories.test_get_message_categories_success(self)` - Test getting message categories successfully.\n  - `TestMessageCategories.test_get_message_categories_default(self)` - Test getting default message categories.\n  - `TestMessageCategories.test_get_message_categories_custom(self)` - Test getting custom message categories.\n  - `TestMessageCategories.test_get_message_categories_empty(self)` - Test getting message categories when none are defined.\n- `TestDefaultMessages` - Test default message loading functionality.\n  - `TestDefaultMessages.test_load_default_messages_success(self, test_data_dir)` - Test loading default messages successfully.\n  - `TestDefaultMessages.test_load_default_messages_file_not_found(self, test_data_dir, mock_config)` - Test loading default messages when file doesn't exist.\n  - `TestDefaultMessages.test_load_default_messages_invalid_json(self, test_data_dir, mock_config)` - Test loading default messages with invalid JSON.\n- `TestMessageCRUD` - Test message CRUD operations.\n  - `TestMessageCRUD.test_add_message_success(self, test_data_dir)` - Test adding a message successfully.\n  - `TestMessageCRUD.test_edit_message_success(self, test_data_dir)` - Test editing a message successfully.\n  - `TestMessageCRUD.test_edit_message_not_found(self, test_data_dir)` - Test editing a message that doesn't exist.\n  - `TestMessageCRUD.test_update_message_success(self, test_data_dir)` - Test updating a message successfully.\n  - `TestMessageCRUD.test_delete_message_success(self, test_data_dir)` - Test deleting a message successfully.\n  - `TestMessageCRUD.test_delete_message_not_found(self, test_data_dir)` - Test deleting a message that doesn't exist.\n- `TestSentMessages` - Test sent message tracking functionality.\n  - `TestSentMessages.test_store_sent_message_success(self, test_data_dir)` - Test storing a sent message successfully.\n  - `TestSentMessages.test_get_last_10_messages_success(self, test_data_dir)` - Test getting last 10 sent messages successfully.\n  - `TestSentMessages.test_get_last_10_messages_empty(self, test_data_dir)` - Test getting last 10 messages when none exist.\n- `TestMessageFileManagement` - Test message file creation and management.\n  - `TestMessageFileManagement.test_create_message_file_from_defaults_success(self, test_data_dir)` - Test creating message file from defaults successfully.\n  - `TestMessageFileManagement.test_ensure_user_message_files_success(self, test_data_dir)` - Test ensuring user message files exist successfully.\n- `TestErrorHandling` - Test error handling in message management functions.\n  - `TestErrorHandling.test_add_message_file_error(self, test_data_dir)` - Test add_message handles file errors gracefully.\n  - `TestErrorHandling.test_edit_message_file_error(self, test_data_dir)` - Test edit_message handles file errors gracefully.\n  - `TestErrorHandling.test_delete_message_file_error(self, test_data_dir)` - Test delete_message handles file errors gracefully.\n  - `TestErrorHandling.test_store_sent_message_file_error(self, test_data_dir)` - Test store_sent_message handles file errors gracefully.\n- `TestIntegration` - Test integration between message management functions.\n  - `TestIntegration.test_full_message_lifecycle(self, test_data_dir)` - Test complete message lifecycle (add, edit, delete).\n\n### tests/behavior/test_response_tracking_behavior.py\n**Functions:**\n- `test_store_user_response_creates_actual_file(self, test_data_dir)` - Test that storing user response actually creates data files.\n- `test_store_user_response_persists_multiple_entries(self, test_data_dir)` - Test that storing multiple responses actually persists all entries.\n- `test_store_daily_checkin_response_uses_correct_file(self, test_data_dir)` - Test that daily checkin responses are stored in the correct file.\n- `test_store_chat_interaction_creates_chat_log(self, test_data_dir)` - Test that chat interactions are stored in chat interactions file.\n- `test_get_recent_responses_returns_actual_data(self, test_data_dir)` - Test that getting recent responses actually returns stored data.\n- `test_get_recent_daily_checkins_returns_checkin_data(self, test_data_dir)` - Test that getting recent daily checkins returns actual checkin data.\n- `test_get_recent_chat_interactions_returns_chat_data(self, test_data_dir)` - Test that getting recent chat interactions returns actual chat data.\n- `test_get_user_checkin_preferences_returns_actual_preferences(self, test_data_dir)` - Test that getting user checkin preferences returns actual preference data.\n- `test_is_user_checkins_enabled_checks_actual_account_data(self, test_data_dir)` - Test that checking if user checkins are enabled checks actual account data.\n- `test_get_user_checkin_questions_returns_actual_questions(self, test_data_dir)` - Test that getting user checkin questions returns actual question configuration.\n- `test_get_user_info_for_tracking_returns_complete_user_info(self, test_data_dir)` - Test that getting user info for tracking returns complete user information.\n- `test_track_user_response_stores_daily_checkin(self, test_data_dir)` - Test that tracking user response stores daily checkin data.\n- `test_track_user_response_stores_chat_interaction(self, test_data_dir)` - Test that tracking user response stores chat interaction data.\n- `test_track_user_response_stores_generic_response(self, test_data_dir)` - Test that tracking user response stores generic response data.\n- `test_response_tracking_error_handling_preserves_system_stability(self, test_data_dir)` - Test that response tracking error handling preserves system stability.\n- `test_response_tracking_performance_under_load(self, test_data_dir)` - Test that response tracking performs well under load.\n- `test_response_tracking_data_integrity(self, test_data_dir)` - Test that response tracking maintains data integrity.\n- `test_response_tracking_integration_with_user_data(self, test_data_dir)` - Test integration between response tracking and user data management.\n- `test_response_tracking_error_recovery_with_real_files(self, test_data_dir)` - Test error recovery when working with real files.\n- `test_response_tracking_concurrent_access_safety(self, test_data_dir)` - Test that response tracking handles concurrent access safely.\n**Classes:**\n- `TestResponseTrackingBehavior` - Test real behavior of response tracking functions.\n  - `TestResponseTrackingBehavior.test_store_user_response_creates_actual_file(self, test_data_dir)` - Test that storing user response actually creates data files.\n  - `TestResponseTrackingBehavior.test_store_user_response_persists_multiple_entries(self, test_data_dir)` - Test that storing multiple responses actually persists all entries.\n  - `TestResponseTrackingBehavior.test_store_daily_checkin_response_uses_correct_file(self, test_data_dir)` - Test that daily checkin responses are stored in the correct file.\n  - `TestResponseTrackingBehavior.test_store_chat_interaction_creates_chat_log(self, test_data_dir)` - Test that chat interactions are stored in chat interactions file.\n  - `TestResponseTrackingBehavior.test_get_recent_responses_returns_actual_data(self, test_data_dir)` - Test that getting recent responses actually returns stored data.\n  - `TestResponseTrackingBehavior.test_get_recent_daily_checkins_returns_checkin_data(self, test_data_dir)` - Test that getting recent daily checkins returns actual checkin data.\n  - `TestResponseTrackingBehavior.test_get_recent_chat_interactions_returns_chat_data(self, test_data_dir)` - Test that getting recent chat interactions returns actual chat data.\n  - `TestResponseTrackingBehavior.test_get_user_checkin_preferences_returns_actual_preferences(self, test_data_dir)` - Test that getting user checkin preferences returns actual preference data.\n  - `TestResponseTrackingBehavior.test_is_user_checkins_enabled_checks_actual_account_data(self, test_data_dir)` - Test that checking if user checkins are enabled checks actual account data.\n  - `TestResponseTrackingBehavior.test_get_user_checkin_questions_returns_actual_questions(self, test_data_dir)` - Test that getting user checkin questions returns actual question configuration.\n  - `TestResponseTrackingBehavior.test_get_user_info_for_tracking_returns_complete_user_info(self, test_data_dir)` - Test that getting user info for tracking returns complete user information.\n  - `TestResponseTrackingBehavior.test_track_user_response_stores_daily_checkin(self, test_data_dir)` - Test that tracking user response stores daily checkin data.\n  - `TestResponseTrackingBehavior.test_track_user_response_stores_chat_interaction(self, test_data_dir)` - Test that tracking user response stores chat interaction data.\n  - `TestResponseTrackingBehavior.test_track_user_response_stores_generic_response(self, test_data_dir)` - Test that tracking user response stores generic response data.\n  - `TestResponseTrackingBehavior.test_response_tracking_error_handling_preserves_system_stability(self, test_data_dir)` - Test that response tracking error handling preserves system stability.\n  - `TestResponseTrackingBehavior.test_response_tracking_performance_under_load(self, test_data_dir)` - Test that response tracking performs well under load.\n  - `TestResponseTrackingBehavior.test_response_tracking_data_integrity(self, test_data_dir)` - Test that response tracking maintains data integrity.\n- `TestResponseTrackingIntegration` - Test integration between response tracking functions.\n  - `TestResponseTrackingIntegration.test_response_tracking_integration_with_user_data(self, test_data_dir)` - Test integration between response tracking and user data management.\n  - `TestResponseTrackingIntegration.test_response_tracking_error_recovery_with_real_files(self, test_data_dir)` - Test error recovery when working with real files.\n  - `TestResponseTrackingIntegration.test_response_tracking_concurrent_access_safety(self, test_data_dir)` - Test that response tracking handles concurrent access safely.\n\n### tests/behavior/test_schedule_management_behavior.py\n**Functions:**\n- `test_get_schedule_time_periods_creates_cache(self, test_data_dir)` - Test that getting schedule periods actually creates cache entries.\n- `test_set_schedule_period_active_persists_changes(self, test_data_dir)` - Test that setting period active actually persists changes to user data.\n- `test_clear_schedule_periods_cache_removes_entries(self, test_data_dir)` - Test that clearing schedule periods cache actually removes cache entries.\n- `test_validate_and_format_time_enforces_rules(self)` - Test that time validation actually enforces format rules.\n- `test_time_conversion_functions_work_correctly(self)` - Test that time conversion functions produce accurate results.\n- `test_get_current_day_names_returns_actual_days(self)` - Test that get_current_day_names returns actual current day information.\n- `test_schedule_period_activation_integration(self, test_data_dir)` - Test complete integration of schedule period activation workflow.\n- `test_schedule_cache_invalidation(self, test_data_dir)` - Test that schedule cache is properly invalidated when data changes.\n- `test_set_schedule_periods_persists_complete_data(self, test_data_dir)` - Test that setting schedule periods actually persists complete data structure.\n- `test_set_schedule_days_persists_day_changes(self, test_data_dir)` - Test that setting schedule days actually persists day changes.\n- `test_schedule_period_crud_with_usercontext_mocking(self, test_data_dir)` - Test CRUD operations with proper UserContext mocking.\n- `test_schedule_period_operations_with_error_handling(self, test_data_dir)` - Test that schedule operations handle errors gracefully.\n- `test_schedule_period_validation_errors(self, test_data_dir)` - Test that schedule operations validate input correctly.\n- `test_schedule_period_operations_with_scheduler_manager(self, test_data_dir)` - Test schedule operations with scheduler manager integration.\n- `test_schedule_period_operations_with_real_user_data(self, test_data_dir)` - Test schedule operations with realistic user data setup.\n- `test_schedule_period_edge_cases(self, test_data_dir)` - Test schedule operations with edge cases and boundary conditions.\n**Classes:**\n- `TestScheduleManagementBehavior` - Test schedule management real behavior and side effects.\n  - `TestScheduleManagementBehavior.test_get_schedule_time_periods_creates_cache(self, test_data_dir)` - Test that getting schedule periods actually creates cache entries.\n  - `TestScheduleManagementBehavior.test_set_schedule_period_active_persists_changes(self, test_data_dir)` - Test that setting period active actually persists changes to user data.\n  - `TestScheduleManagementBehavior.test_clear_schedule_periods_cache_removes_entries(self, test_data_dir)` - Test that clearing schedule periods cache actually removes cache entries.\n  - `TestScheduleManagementBehavior.test_validate_and_format_time_enforces_rules(self)` - Test that time validation actually enforces format rules.\n  - `TestScheduleManagementBehavior.test_time_conversion_functions_work_correctly(self)` - Test that time conversion functions produce accurate results.\n  - `TestScheduleManagementBehavior.test_get_current_day_names_returns_actual_days(self)` - Test that get_current_day_names returns actual current day information.\n  - `TestScheduleManagementBehavior.test_schedule_period_activation_integration(self, test_data_dir)` - Test complete integration of schedule period activation workflow.\n  - `TestScheduleManagementBehavior.test_schedule_cache_invalidation(self, test_data_dir)` - Test that schedule cache is properly invalidated when data changes.\n  - `TestScheduleManagementBehavior.test_set_schedule_periods_persists_complete_data(self, test_data_dir)` - Test that setting schedule periods actually persists complete data structure.\n  - `TestScheduleManagementBehavior.test_set_schedule_days_persists_day_changes(self, test_data_dir)` - Test that setting schedule days actually persists day changes.\n  - `TestScheduleManagementBehavior.test_schedule_period_crud_with_usercontext_mocking(self, test_data_dir)` - Test CRUD operations with proper UserContext mocking.\n  - `TestScheduleManagementBehavior.test_schedule_period_operations_with_error_handling(self, test_data_dir)` - Test that schedule operations handle errors gracefully.\n  - `TestScheduleManagementBehavior.test_schedule_period_validation_errors(self, test_data_dir)` - Test that schedule operations validate input correctly.\n  - `TestScheduleManagementBehavior.test_schedule_period_operations_with_scheduler_manager(self, test_data_dir)` - Test schedule operations with scheduler manager integration.\n  - `TestScheduleManagementBehavior.test_schedule_period_operations_with_real_user_data(self, test_data_dir)` - Test schedule operations with realistic user data setup.\n  - `TestScheduleManagementBehavior.test_schedule_period_edge_cases(self, test_data_dir)` - Test schedule operations with edge cases and boundary conditions.\n\n### tests/behavior/test_scheduler_behavior.py\n**Functions:**\n- `mock_communication_manager()` - Create a mock communication manager.\n- `scheduler_manager(self, mock_communication_manager)` - Create a SchedulerManager instance for testing.\n- `test_scheduler_manager_initialization(self, mock_communication_manager)` - Test SchedulerManager initialization.\n- `test_stop_scheduler_no_thread(self, scheduler_manager)` - Test stopping scheduler when no thread is running.\n- `test_is_job_for_category_no_jobs(self, scheduler_manager)` - Test checking for jobs when no jobs exist.\n- `test_is_job_for_category_with_matching_job(self, scheduler_manager)` - Test checking for jobs when a matching job exists.\n- `test_is_job_for_category_with_non_matching_job(self, scheduler_manager)` - Test checking for jobs when no matching job exists.\n- `test_get_random_time_within_period_valid_times(self, scheduler_manager)` - Test getting random time within a valid time period.\n- `test_get_random_time_within_period_invalid_times(self, scheduler_manager)` - Test getting random time with invalid time format.\n- `test_is_time_conflict_no_conflicts(self, scheduler_manager)` - Test time conflict detection when no conflicts exist.\n- `test_cleanup_old_tasks(self, scheduler_manager, test_data_dir)` - Test cleaning up old scheduled tasks.\n- `test_log_scheduled_tasks(self, scheduler_manager)` - Test logging of scheduled tasks.\n- `test_get_user_categories_success(self, mock_user_data)` - Test getting user categories successfully.\n- `test_get_user_categories_no_user(self)` - Test getting categories for non-existent user.\n- `test_get_user_task_preferences_success(self, mock_user_data)` - Test getting user task preferences successfully.\n- `test_get_user_task_preferences_no_user(self)` - Test getting task preferences for non-existent user.\n- `test_get_user_checkin_preferences_success(self, mock_user_data)` - Test getting user check-in preferences successfully.\n- `test_get_user_checkin_preferences_no_user(self)` - Test getting check-in preferences for non-existent user.\n- `test_scheduler_lifecycle(self, mock_communication_manager, test_data_dir)` - Test complete scheduler lifecycle.\n- `test_scheduler_with_mock_users(self, mock_communication_manager)` - Test scheduler with mock user data.\n- `test_scheduler_with_empty_user_list(self, mock_communication_manager)` - Test scheduler behavior with no users.\n- `test_scheduler_with_invalid_user_data(self, mock_communication_manager)` - Test scheduler behavior with invalid user data.\n- `test_random_time_generation_consistency(self, mock_communication_manager)` - Test that random time generation is consistent within bounds.\n- `test_schedule_all_task_reminders_success(self, test_data_dir)` - Test scheduling all task reminders for a user.\n- `test_schedule_all_task_reminders_disabled(self, test_data_dir)` - Test scheduling task reminders when task management is disabled.\n- `test_cleanup_task_reminders_success(self)` - Test cleaning up task reminders.\n- `test_cleanup_task_reminders_specific_task(self)` - Test cleaning up specific task reminders.\n**Classes:**\n- `TestSchedulerManager` - Test SchedulerManager functionality.\n  - `TestSchedulerManager.scheduler_manager(self, mock_communication_manager)` - Create a SchedulerManager instance for testing.\n  - `TestSchedulerManager.test_scheduler_manager_initialization(self, mock_communication_manager)` - Test SchedulerManager initialization.\n  - `TestSchedulerManager.test_stop_scheduler_no_thread(self, scheduler_manager)` - Test stopping scheduler when no thread is running.\n  - `TestSchedulerManager.test_is_job_for_category_no_jobs(self, scheduler_manager)` - Test checking for jobs when no jobs exist.\n  - `TestSchedulerManager.test_is_job_for_category_with_matching_job(self, scheduler_manager)` - Test checking for jobs when a matching job exists.\n  - `TestSchedulerManager.test_is_job_for_category_with_non_matching_job(self, scheduler_manager)` - Test checking for jobs when no matching job exists.\n  - `TestSchedulerManager.test_get_random_time_within_period_valid_times(self, scheduler_manager)` - Test getting random time within a valid time period.\n  - `TestSchedulerManager.test_get_random_time_within_period_invalid_times(self, scheduler_manager)` - Test getting random time with invalid time format.\n  - `TestSchedulerManager.test_is_time_conflict_no_conflicts(self, scheduler_manager)` - Test time conflict detection when no conflicts exist.\n  - `TestSchedulerManager.test_cleanup_old_tasks(self, scheduler_manager, test_data_dir)` - Test cleaning up old scheduled tasks.\n  - `TestSchedulerManager.test_log_scheduled_tasks(self, scheduler_manager)` - Test logging of scheduled tasks.\n- `TestSchedulerFunctions` - Test standalone scheduler functions.\n  - `TestSchedulerFunctions.test_get_user_categories_success(self, mock_user_data)` - Test getting user categories successfully.\n  - `TestSchedulerFunctions.test_get_user_categories_no_user(self)` - Test getting categories for non-existent user.\n  - `TestSchedulerFunctions.test_get_user_task_preferences_success(self, mock_user_data)` - Test getting user task preferences successfully.\n  - `TestSchedulerFunctions.test_get_user_task_preferences_no_user(self)` - Test getting task preferences for non-existent user.\n  - `TestSchedulerFunctions.test_get_user_checkin_preferences_success(self, mock_user_data)` - Test getting user check-in preferences successfully.\n  - `TestSchedulerFunctions.test_get_user_checkin_preferences_no_user(self)` - Test getting check-in preferences for non-existent user.\n- `TestSchedulerIntegration` - Test scheduler integration scenarios.\n  - `TestSchedulerIntegration.test_scheduler_lifecycle(self, mock_communication_manager, test_data_dir)` - Test complete scheduler lifecycle.\n  - `TestSchedulerIntegration.test_scheduler_with_mock_users(self, mock_communication_manager)` - Test scheduler with mock user data.\n- `TestSchedulerEdgeCases` - Test scheduler edge cases and error conditions.\n  - `TestSchedulerEdgeCases.test_scheduler_with_empty_user_list(self, mock_communication_manager)` - Test scheduler behavior with no users.\n  - `TestSchedulerEdgeCases.test_scheduler_with_invalid_user_data(self, mock_communication_manager)` - Test scheduler behavior with invalid user data.\n  - `TestSchedulerEdgeCases.test_random_time_generation_consistency(self, mock_communication_manager)` - Test that random time generation is consistent within bounds.\n- `TestTaskReminderFunctions` - Test task reminder specific functions.\n  - `TestTaskReminderFunctions.test_schedule_all_task_reminders_success(self, test_data_dir)` - Test scheduling all task reminders for a user.\n  - `TestTaskReminderFunctions.test_schedule_all_task_reminders_disabled(self, test_data_dir)` - Test scheduling task reminders when task management is disabled.\n  - `TestTaskReminderFunctions.test_cleanup_task_reminders_success(self)` - Test cleaning up task reminders.\n  - `TestTaskReminderFunctions.test_cleanup_task_reminders_specific_task(self)` - Test cleaning up specific task reminders.\n\n### tests/behavior/test_service_behavior.py\n**Functions:**\n- `temp_dir(self)` - Create a temporary directory for testing.\n- `service(self)` - Create an MHMService instance for testing.\n- `temp_base_dir(self)` - Create a temporary base directory for file-based communication tests.\n- `test_service_initialization(self, service)` - Test MHMService initialization.\n- `test_validate_configuration_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test configuration validation with real file operations.\n- `test_initialize_paths_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test path initialization with real file system operations.\n- `test_check_and_fix_logging_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test logging health check with real file operations.\n- `test_start_service_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service startup with real state changes.\n- `test_signal_handler_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test signal handler with real state changes.\n- `test_shutdown_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service shutdown with real state changes.\n- `test_emergency_shutdown_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test emergency shutdown with real state changes.\n- `test_run_service_loop_shutdown_file_detection_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test service loop detects shutdown request file with real file operations.\n- `test_check_test_message_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test processing of test message request files with real file operations.\n- `test_cleanup_test_message_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test cleanup of test message request files with real file operations.\n- `test_check_reschedule_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test processing of reschedule request files with real file operations.\n- `test_cleanup_reschedule_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test cleanup of reschedule request files with real file operations.\n- `test_get_user_categories_real_behavior(self)` - REAL BEHAVIOR TEST: Test get_user_categories with real data structures.\n- `test_main_function_real_behavior(self)` - REAL BEHAVIOR TEST: Test main function with real service creation.\n- `test_service_integration_with_managers_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service integration with real manager objects.\n- `test_service_error_recovery_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service error recovery with real state changes.\n- `test_service_loop_heartbeat_logging_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service loop heartbeat logging with real state management.\n- `test_service_file_based_communication_integration_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test service file-based communication integration with real file operations.\n- `test_real_file_based_communication_creates_and_removes_files(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Verify that test message requests actually create and remove files.\n- `test_real_cleanup_removes_actual_files(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Verify that cleanup actually removes real files.\n- `test_real_service_initialization_creates_actual_service(self)` - REAL BEHAVIOR TEST: Verify that service initialization creates a real service object.\n- `test_real_signal_handler_changes_service_state(self)` - REAL BEHAVIOR TEST: Verify that signal handler actually changes service state.\n- `test_real_emergency_shutdown_changes_service_state(self)` - REAL BEHAVIOR TEST: Verify that emergency shutdown actually changes service state.\n- `test_real_get_user_categories_returns_actual_data(self)` - REAL BEHAVIOR TEST: Verify that get_user_categories returns actual data structures.\n- `test_real_service_error_recovery_stops_service(self)` - REAL BEHAVIOR TEST: Verify that error recovery actually stops the service.\n- `mock_get_user_data_side_effect(user_id, data_type)` - No description\n- `mock_start_side_effect()` - Mock side effect for service start that changes actual service state.\n\nUpdates the service running status and startup time to simulate\nreal service startup behavior for testing.\n- `mock_shutdown_side_effect()` - Mock side effect for service shutdown that changes actual service state.\n\nUpdates the service running status and calls stop methods on managers\nto simulate real service shutdown behavior for testing.\n- `mock_sleep_side_effect(seconds)` - Mock side effect for time.sleep that breaks out of service loop.\n\nTracks call count and stops the service after a few iterations\nto prevent infinite loops during testing.\n\nArgs:\n    seconds: Number of seconds to sleep (ignored in mock)\n- `mock_join_side_effect()` - Mock side effect for os.path.join that returns test file path.\n\nReturns the test request file path when the specific filename\nis requested, otherwise delegates to the real os.path.join.\n\nArgs:\n    *args: Path components to join\n    \nReturns:\n    str: Joined path, or test file path for specific filename\n- `mock_join_side_effect()` - Mock side effect for os.path.join that returns test file path.\n\nReturns the test request file path when the specific filename\nis requested, otherwise delegates to the real os.path.join.\n\nArgs:\n    *args: Path components to join\n    \nReturns:\n    str: Joined path, or test file path for specific filename\n**Classes:**\n- `TestMHMService` - Test cases for the MHMService class.\n  - `TestMHMService.temp_dir(self)` - Create a temporary directory for testing.\n  - `TestMHMService.service(self)` - Create an MHMService instance for testing.\n  - `TestMHMService.temp_base_dir(self)` - Create a temporary base directory for file-based communication tests.\n  - `TestMHMService.test_service_initialization(self, service)` - Test MHMService initialization.\n  - `TestMHMService.test_validate_configuration_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test configuration validation with real file operations.\n  - `TestMHMService.test_initialize_paths_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test path initialization with real file system operations.\n  - `TestMHMService.test_check_and_fix_logging_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test logging health check with real file operations.\n  - `TestMHMService.test_start_service_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service startup with real state changes.\n  - `TestMHMService.test_signal_handler_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test signal handler with real state changes.\n  - `TestMHMService.test_shutdown_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service shutdown with real state changes.\n  - `TestMHMService.test_emergency_shutdown_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test emergency shutdown with real state changes.\n  - `TestMHMService.test_run_service_loop_shutdown_file_detection_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test service loop detects shutdown request file with real file operations.\n  - `TestMHMService.test_check_test_message_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test processing of test message request files with real file operations.\n  - `TestMHMService.test_cleanup_test_message_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test cleanup of test message request files with real file operations.\n  - `TestMHMService.test_check_reschedule_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test processing of reschedule request files with real file operations.\n  - `TestMHMService.test_cleanup_reschedule_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test cleanup of reschedule request files with real file operations.\n  - `TestMHMService.test_get_user_categories_real_behavior(self)` - REAL BEHAVIOR TEST: Test get_user_categories with real data structures.\n  - `TestMHMService.test_main_function_real_behavior(self)` - REAL BEHAVIOR TEST: Test main function with real service creation.\n  - `TestMHMService.test_service_integration_with_managers_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service integration with real manager objects.\n  - `TestMHMService.test_service_error_recovery_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service error recovery with real state changes.\n  - `TestMHMService.test_service_loop_heartbeat_logging_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service loop heartbeat logging with real state management.\n  - `TestMHMService.test_service_file_based_communication_integration_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test service file-based communication integration with real file operations.\n  - `TestMHMService.test_real_file_based_communication_creates_and_removes_files(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Verify that test message requests actually create and remove files.\n  - `TestMHMService.test_real_cleanup_removes_actual_files(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Verify that cleanup actually removes real files.\n  - `TestMHMService.test_real_service_initialization_creates_actual_service(self)` - REAL BEHAVIOR TEST: Verify that service initialization creates a real service object.\n  - `TestMHMService.test_real_signal_handler_changes_service_state(self)` - REAL BEHAVIOR TEST: Verify that signal handler actually changes service state.\n  - `TestMHMService.test_real_emergency_shutdown_changes_service_state(self)` - REAL BEHAVIOR TEST: Verify that emergency shutdown actually changes service state.\n  - `TestMHMService.test_real_get_user_categories_returns_actual_data(self)` - REAL BEHAVIOR TEST: Verify that get_user_categories returns actual data structures.\n  - `TestMHMService.test_real_service_error_recovery_stops_service(self)` - REAL BEHAVIOR TEST: Verify that error recovery actually stops the service.\n\n### tests/behavior/test_service_utilities_behavior.py\n**Functions:**\n- `test_throttler_initialization_creates_proper_structure(self, test_data_dir)` - Test that Throttler initialization creates proper internal structure.\n- `test_throttler_should_run_returns_true_on_first_call(self, test_data_dir)` - Test that Throttler should_run returns True on first call.\n- `test_throttler_should_run_respects_interval(self, test_data_dir)` - Test that Throttler should_run respects the time interval.\n- `test_throttler_handles_invalid_timestamp_format(self, test_data_dir)` - Test that Throttler handles invalid timestamp format gracefully.\n- `test_create_reschedule_request_creates_actual_file(self, test_data_dir)` - Test that creating reschedule request actually creates flag file.\n- `test_create_reschedule_request_skips_when_service_not_running(self, test_data_dir)` - Test that creating reschedule request skips when service is not running.\n- `test_is_service_running_checks_actual_processes(self, test_data_dir)` - Test that is_service_running checks actual system processes.\n- `test_is_service_running_handles_process_errors_gracefully(self, test_data_dir)` - Test that is_service_running handles process errors gracefully.\n- `test_wait_for_network_returns_true_when_network_available(self, test_data_dir)` - Test that wait_for_network returns True when network is available.\n- `test_wait_for_network_returns_false_when_network_unavailable(self, test_data_dir)` - Test that wait_for_network returns False when network is unavailable.\n- `test_load_and_localize_datetime_creates_timezone_aware_datetime(self, test_data_dir)` - Test that load_and_localize_datetime creates timezone-aware datetime.\n- `test_load_and_localize_datetime_raises_error_for_invalid_format(self, test_data_dir)` - Test that load_and_localize_datetime handles invalid format gracefully.\n- `test_load_and_localize_datetime_raises_error_for_invalid_timezone(self, test_data_dir)` - Test that load_and_localize_datetime handles invalid timezone gracefully.\n- `test_title_case_converts_text_properly(self, test_data_dir)` - Test that title_case converts text to proper title case.\n- `test_title_case_handles_special_words_correctly(self, test_data_dir)` - Test that title_case handles special words and abbreviations correctly.\n- `test_title_case_preserves_mixed_case_words(self, test_data_dir)` - Test that title_case preserves already properly cased words.\n- `test_service_utilities_error_handling_preserves_system_stability(self, test_data_dir)` - Test that service utilities error handling preserves system stability.\n- `test_service_utilities_performance_under_load(self, test_data_dir)` - Test that service utilities perform well under load.\n- `test_service_utilities_data_integrity(self, test_data_dir)` - Test that service utilities maintain data integrity.\n- `test_service_utilities_integration_with_reschedule_workflow(self, test_data_dir)` - Test integration between service utilities in reschedule workflow.\n- `test_service_utilities_error_recovery_with_real_operations(self, test_data_dir)` - Test error recovery when working with real operations.\n- `test_service_utilities_concurrent_access_safety(self, test_data_dir)` - Test that service utilities handle concurrent access safely.\n**Classes:**\n- `TestServiceUtilitiesBehavior` - Test real behavior of service utility functions.\n  - `TestServiceUtilitiesBehavior.test_throttler_initialization_creates_proper_structure(self, test_data_dir)` - Test that Throttler initialization creates proper internal structure.\n  - `TestServiceUtilitiesBehavior.test_throttler_should_run_returns_true_on_first_call(self, test_data_dir)` - Test that Throttler should_run returns True on first call.\n  - `TestServiceUtilitiesBehavior.test_throttler_should_run_respects_interval(self, test_data_dir)` - Test that Throttler should_run respects the time interval.\n  - `TestServiceUtilitiesBehavior.test_throttler_handles_invalid_timestamp_format(self, test_data_dir)` - Test that Throttler handles invalid timestamp format gracefully.\n  - `TestServiceUtilitiesBehavior.test_create_reschedule_request_creates_actual_file(self, test_data_dir)` - Test that creating reschedule request actually creates flag file.\n  - `TestServiceUtilitiesBehavior.test_create_reschedule_request_skips_when_service_not_running(self, test_data_dir)` - Test that creating reschedule request skips when service is not running.\n  - `TestServiceUtilitiesBehavior.test_is_service_running_checks_actual_processes(self, test_data_dir)` - Test that is_service_running checks actual system processes.\n  - `TestServiceUtilitiesBehavior.test_is_service_running_handles_process_errors_gracefully(self, test_data_dir)` - Test that is_service_running handles process errors gracefully.\n  - `TestServiceUtilitiesBehavior.test_wait_for_network_returns_true_when_network_available(self, test_data_dir)` - Test that wait_for_network returns True when network is available.\n  - `TestServiceUtilitiesBehavior.test_wait_for_network_returns_false_when_network_unavailable(self, test_data_dir)` - Test that wait_for_network returns False when network is unavailable.\n  - `TestServiceUtilitiesBehavior.test_load_and_localize_datetime_creates_timezone_aware_datetime(self, test_data_dir)` - Test that load_and_localize_datetime creates timezone-aware datetime.\n  - `TestServiceUtilitiesBehavior.test_load_and_localize_datetime_raises_error_for_invalid_format(self, test_data_dir)` - Test that load_and_localize_datetime handles invalid format gracefully.\n  - `TestServiceUtilitiesBehavior.test_load_and_localize_datetime_raises_error_for_invalid_timezone(self, test_data_dir)` - Test that load_and_localize_datetime handles invalid timezone gracefully.\n  - `TestServiceUtilitiesBehavior.test_title_case_converts_text_properly(self, test_data_dir)` - Test that title_case converts text to proper title case.\n  - `TestServiceUtilitiesBehavior.test_title_case_handles_special_words_correctly(self, test_data_dir)` - Test that title_case handles special words and abbreviations correctly.\n  - `TestServiceUtilitiesBehavior.test_title_case_preserves_mixed_case_words(self, test_data_dir)` - Test that title_case preserves already properly cased words.\n  - `TestServiceUtilitiesBehavior.test_service_utilities_error_handling_preserves_system_stability(self, test_data_dir)` - Test that service utilities error handling preserves system stability.\n  - `TestServiceUtilitiesBehavior.test_service_utilities_performance_under_load(self, test_data_dir)` - Test that service utilities perform well under load.\n  - `TestServiceUtilitiesBehavior.test_service_utilities_data_integrity(self, test_data_dir)` - Test that service utilities maintain data integrity.\n- `TestServiceUtilitiesIntegration` - Test integration between service utility functions.\n  - `TestServiceUtilitiesIntegration.test_service_utilities_integration_with_reschedule_workflow(self, test_data_dir)` - Test integration between service utilities in reschedule workflow.\n  - `TestServiceUtilitiesIntegration.test_service_utilities_error_recovery_with_real_operations(self, test_data_dir)` - Test error recovery when working with real operations.\n  - `TestServiceUtilitiesIntegration.test_service_utilities_concurrent_access_safety(self, test_data_dir)` - Test that service utilities handle concurrent access safely.\n\n### tests/behavior/test_task_behavior.py\n**Functions:**\n- `temp_dir(self)` - Create a temporary directory for testing.\n- `user_id(self)` - Create a test user ID.\n- `test_ensure_task_directory(self, mock_get_user_dir, user_id, temp_dir)` - Test task directory creation.\n- `test_load_active_tasks(self, mock_get_user_dir, user_id, temp_dir)` - Test loading active tasks.\n- `test_save_active_tasks(self, mock_get_user_dir, user_id, temp_dir)` - Test saving active tasks.\n- `test_create_task(self, mock_get_user_dir, temp_dir)` - Test task creation with file verification.\n- `test_update_task(self, mock_get_user_dir, temp_dir)` - Test task updating with file verification.\n- `test_complete_task(self, mock_get_user_dir, temp_dir)` - Test task completion with file and side effect verification.\n- `test_delete_task(self, mock_get_user_dir, temp_dir)` - Test task deletion with file verification.\n- `test_get_task_by_id(self, mock_get_user_dir, temp_dir)` - Test getting a task by ID with file verification.\n- `test_get_tasks_due_soon(self, mock_get_user_dir, temp_dir)` - Test getting tasks due soon with file verification.\n- `test_are_tasks_enabled(self, mock_get_user_data)` - Test checking if tasks are enabled with mock user data.\n- `test_get_user_task_stats(self, mock_get_user_dir, temp_dir)` - Test getting user task statistics with file verification.\n**Classes:**\n- `TestTaskManagement` - Test cases for task management functions.\n  - `TestTaskManagement.temp_dir(self)` - Create a temporary directory for testing.\n  - `TestTaskManagement.user_id(self)` - Create a test user ID.\n  - `TestTaskManagement.test_ensure_task_directory(self, mock_get_user_dir, user_id, temp_dir)` - Test task directory creation.\n  - `TestTaskManagement.test_load_active_tasks(self, mock_get_user_dir, user_id, temp_dir)` - Test loading active tasks.\n  - `TestTaskManagement.test_save_active_tasks(self, mock_get_user_dir, user_id, temp_dir)` - Test saving active tasks.\n  - `TestTaskManagement.test_create_task(self, mock_get_user_dir, temp_dir)` - Test task creation with file verification.\n  - `TestTaskManagement.test_update_task(self, mock_get_user_dir, temp_dir)` - Test task updating with file verification.\n  - `TestTaskManagement.test_complete_task(self, mock_get_user_dir, temp_dir)` - Test task completion with file and side effect verification.\n  - `TestTaskManagement.test_delete_task(self, mock_get_user_dir, temp_dir)` - Test task deletion with file verification.\n  - `TestTaskManagement.test_get_task_by_id(self, mock_get_user_dir, temp_dir)` - Test getting a task by ID with file verification.\n  - `TestTaskManagement.test_get_tasks_due_soon(self, mock_get_user_dir, temp_dir)` - Test getting tasks due soon with file verification.\n  - `TestTaskManagement.test_are_tasks_enabled(self, mock_get_user_data)` - Test checking if tasks are enabled with mock user data.\n  - `TestTaskManagement.test_get_user_task_stats(self, mock_get_user_dir, temp_dir)` - Test getting user task statistics with file verification.\n\n### tests/behavior/test_ui_app_behavior.py\n**Functions:**\n- `qt_app(self)` - Create a QApplication instance for testing.\n- `test_ui_app_initialization_creates_proper_structure(self, qt_app, test_data_dir)` - Test that UI app initialization creates proper internal structure.\n- `test_service_manager_initialization_creates_proper_structure(self, test_data_dir)` - Test that ServiceManager initialization creates proper internal structure.\n- `test_service_manager_configuration_validation_checks_actual_config(self, test_data_dir)` - Test that configuration validation checks actual configuration.\n- `test_service_manager_configuration_validation_handles_invalid_config(self, test_data_dir)` - Test that configuration validation handles invalid configuration.\n- `test_service_manager_service_status_check_checks_actual_processes(self, test_data_dir)` - Test that service status check checks actual system processes.\n- `test_service_manager_service_status_check_handles_no_service(self, test_data_dir)` - Test that service status check handles when service is not running.\n- `test_ui_app_user_list_refresh_loads_actual_user_data(self, qt_app, test_data_dir)` - Test that user list refresh loads actual user data.\n- `test_ui_app_user_selection_loads_user_categories(self, qt_app, test_data_dir)` - Test that user selection loads user categories.\n- `test_ui_app_category_selection_enables_content_management(self, qt_app, test_data_dir)` - Test that category selection enables content management.\n- `test_ui_app_new_user_creation_opens_account_creator(self, qt_app, test_data_dir)` - Test that new user creation opens account creator dialog.\n- `test_ui_app_communication_settings_opens_channel_management(self, qt_app, test_data_dir)` - Test that communication settings opens channel management dialog.\n- `test_ui_app_category_management_opens_category_dialog(self, qt_app, test_data_dir)` - Test that category management opens category management dialog.\n- `test_ui_app_checkin_management_opens_checkin_dialog(self, qt_app, test_data_dir)` - Test that checkin management opens checkin management dialog.\n- `test_ui_app_task_management_opens_task_dialog(self, qt_app, test_data_dir)` - Test that task management opens task management dialog.\n- `test_ui_app_personalization_opens_user_profile_dialog(self, qt_app, test_data_dir)` - Test that personalization opens user profile dialog.\n- `test_ui_app_error_handling_preserves_system_stability(self, qt_app, test_data_dir)` - Test that UI app error handling preserves system stability.\n- `test_ui_app_performance_under_load(self, qt_app, test_data_dir)` - Test that UI app performs well under load.\n- `test_ui_app_data_integrity(self, qt_app, test_data_dir)` - Test that UI app maintains data integrity.\n- `test_ui_app_integration_with_service_manager(self, test_data_dir)` - Test integration between UI app and service manager.\n- `test_ui_app_error_recovery_with_real_operations(self, test_data_dir)` - Test error recovery when working with real operations.\n- `test_ui_app_concurrent_access_safety(self, test_data_dir)` - Test that UI app handles concurrent access safely.\n**Classes:**\n- `TestUIAppBehavior` - Test real behavior of the main UI application.\n  - `TestUIAppBehavior.qt_app(self)` - Create a QApplication instance for testing.\n  - `TestUIAppBehavior.test_ui_app_initialization_creates_proper_structure(self, qt_app, test_data_dir)` - Test that UI app initialization creates proper internal structure.\n  - `TestUIAppBehavior.test_service_manager_initialization_creates_proper_structure(self, test_data_dir)` - Test that ServiceManager initialization creates proper internal structure.\n  - `TestUIAppBehavior.test_service_manager_configuration_validation_checks_actual_config(self, test_data_dir)` - Test that configuration validation checks actual configuration.\n  - `TestUIAppBehavior.test_service_manager_configuration_validation_handles_invalid_config(self, test_data_dir)` - Test that configuration validation handles invalid configuration.\n  - `TestUIAppBehavior.test_service_manager_service_status_check_checks_actual_processes(self, test_data_dir)` - Test that service status check checks actual system processes.\n  - `TestUIAppBehavior.test_service_manager_service_status_check_handles_no_service(self, test_data_dir)` - Test that service status check handles when service is not running.\n  - `TestUIAppBehavior.test_ui_app_user_list_refresh_loads_actual_user_data(self, qt_app, test_data_dir)` - Test that user list refresh loads actual user data.\n  - `TestUIAppBehavior.test_ui_app_user_selection_loads_user_categories(self, qt_app, test_data_dir)` - Test that user selection loads user categories.\n  - `TestUIAppBehavior.test_ui_app_category_selection_enables_content_management(self, qt_app, test_data_dir)` - Test that category selection enables content management.\n  - `TestUIAppBehavior.test_ui_app_new_user_creation_opens_account_creator(self, qt_app, test_data_dir)` - Test that new user creation opens account creator dialog.\n  - `TestUIAppBehavior.test_ui_app_communication_settings_opens_channel_management(self, qt_app, test_data_dir)` - Test that communication settings opens channel management dialog.\n  - `TestUIAppBehavior.test_ui_app_category_management_opens_category_dialog(self, qt_app, test_data_dir)` - Test that category management opens category management dialog.\n  - `TestUIAppBehavior.test_ui_app_checkin_management_opens_checkin_dialog(self, qt_app, test_data_dir)` - Test that checkin management opens checkin management dialog.\n  - `TestUIAppBehavior.test_ui_app_task_management_opens_task_dialog(self, qt_app, test_data_dir)` - Test that task management opens task management dialog.\n  - `TestUIAppBehavior.test_ui_app_personalization_opens_user_profile_dialog(self, qt_app, test_data_dir)` - Test that personalization opens user profile dialog.\n  - `TestUIAppBehavior.test_ui_app_error_handling_preserves_system_stability(self, qt_app, test_data_dir)` - Test that UI app error handling preserves system stability.\n  - `TestUIAppBehavior.test_ui_app_performance_under_load(self, qt_app, test_data_dir)` - Test that UI app performs well under load.\n  - `TestUIAppBehavior.test_ui_app_data_integrity(self, qt_app, test_data_dir)` - Test that UI app maintains data integrity.\n- `TestUIAppIntegration` - Test integration between UI app components.\n  - `TestUIAppIntegration.test_ui_app_integration_with_service_manager(self, test_data_dir)` - Test integration between UI app and service manager.\n  - `TestUIAppIntegration.test_ui_app_error_recovery_with_real_operations(self, test_data_dir)` - Test error recovery when working with real operations.\n  - `TestUIAppIntegration.test_ui_app_concurrent_access_safety(self, test_data_dir)` - Test that UI app handles concurrent access safely.\n\n### tests/behavior/test_user_context_behavior.py\n**Functions:**\n- `test_user_context_manager_initialization_creates_structure(self, test_data_dir)` - Test that UserContextManager initialization creates proper internal structure.\n- `test_get_current_user_context_uses_usercontext_singleton(self, test_data_dir)` - Test that get_current_user_context actually uses UserContext singleton.\n- `test_get_current_user_context_handles_no_user_gracefully(self, test_data_dir)` - Test that get_current_user_context handles no logged-in user gracefully.\n- `test_get_user_context_creates_complete_structure(self, test_data_dir)` - Test that get_user_context creates complete context structure.\n- `test_get_user_context_without_conversation_history(self, test_data_dir)` - Test that get_user_context excludes conversation history when requested.\n- `test_add_conversation_exchange_actually_stores_data(self, test_data_dir)` - Test that add_conversation_exchange actually stores conversation data.\n- `test_add_conversation_exchange_maintains_history_limit(self, test_data_dir)` - Test that add_conversation_exchange maintains conversation history limit.\n- `test_get_conversation_history_returns_actual_data(self, test_data_dir)` - Test that _get_conversation_history returns actual stored conversation data.\n- `test_get_conversation_history_handles_empty_history(self, test_data_dir)` - Test that _get_conversation_history handles users with no conversation history.\n- `test_get_user_profile_uses_existing_infrastructure(self, test_data_dir)` - Test that _get_user_profile actually uses existing user infrastructure.\n- `test_get_recent_activity_integrates_multiple_sources(self, test_data_dir)` - Test that _get_recent_activity integrates data from multiple sources.\n- `test_get_conversation_insights_analyzes_actual_data(self, test_data_dir)` - Test that _get_conversation_insights analyzes actual conversation data.\n- `test_get_mood_trends_analyzes_checkin_data(self, test_data_dir)` - Test that _get_mood_trends analyzes actual daily checkin data.\n- `test_get_active_schedules_identifies_active_periods(self, test_data_dir)` - Test that _get_active_schedules identifies actually active schedule periods.\n- `test_format_context_for_ai_creates_readable_string(self, test_data_dir)` - Test that format_context_for_ai creates actual readable string from context.\n- `test_format_context_for_ai_handles_empty_context(self, test_data_dir)` - Test that format_context_for_ai handles empty or minimal context gracefully.\n- `test_user_context_manager_error_handling_preserves_system_stability(self, test_data_dir)` - Test that UserContextManager error handling preserves system stability.\n- `test_user_context_manager_integration_with_ai_chatbot(self, test_data_dir)` - Test that UserContextManager integrates properly with AI chatbot.\n- `test_user_context_manager_performance_under_load(self, test_data_dir)` - Test that UserContextManager performs well under load.\n- `test_user_context_manager_cleanup_and_resource_management(self, test_data_dir)` - Test that UserContextManager properly manages resources and cleanup.\n- `test_user_context_manager_with_real_user_data(self, test_data_dir)` - Test UserContextManager with real user data files.\n- `test_user_context_manager_error_recovery_with_real_files(self, test_data_dir)` - Test UserContextManager error recovery with corrupted real files.\n- `test_user_context_manager_concurrent_access_safety(self, test_data_dir)` - Test UserContextManager safety under concurrent access.\n**Classes:**\n- `TestUserContextManagerBehavior` - Test UserContextManager real behavior and side effects.\n  - `TestUserContextManagerBehavior.test_user_context_manager_initialization_creates_structure(self, test_data_dir)` - Test that UserContextManager initialization creates proper internal structure.\n  - `TestUserContextManagerBehavior.test_get_current_user_context_uses_usercontext_singleton(self, test_data_dir)` - Test that get_current_user_context actually uses UserContext singleton.\n  - `TestUserContextManagerBehavior.test_get_current_user_context_handles_no_user_gracefully(self, test_data_dir)` - Test that get_current_user_context handles no logged-in user gracefully.\n  - `TestUserContextManagerBehavior.test_get_user_context_creates_complete_structure(self, test_data_dir)` - Test that get_user_context creates complete context structure.\n  - `TestUserContextManagerBehavior.test_get_user_context_without_conversation_history(self, test_data_dir)` - Test that get_user_context excludes conversation history when requested.\n  - `TestUserContextManagerBehavior.test_add_conversation_exchange_actually_stores_data(self, test_data_dir)` - Test that add_conversation_exchange actually stores conversation data.\n  - `TestUserContextManagerBehavior.test_add_conversation_exchange_maintains_history_limit(self, test_data_dir)` - Test that add_conversation_exchange maintains conversation history limit.\n  - `TestUserContextManagerBehavior.test_get_conversation_history_returns_actual_data(self, test_data_dir)` - Test that _get_conversation_history returns actual stored conversation data.\n  - `TestUserContextManagerBehavior.test_get_conversation_history_handles_empty_history(self, test_data_dir)` - Test that _get_conversation_history handles users with no conversation history.\n  - `TestUserContextManagerBehavior.test_get_user_profile_uses_existing_infrastructure(self, test_data_dir)` - Test that _get_user_profile actually uses existing user infrastructure.\n  - `TestUserContextManagerBehavior.test_get_recent_activity_integrates_multiple_sources(self, test_data_dir)` - Test that _get_recent_activity integrates data from multiple sources.\n  - `TestUserContextManagerBehavior.test_get_conversation_insights_analyzes_actual_data(self, test_data_dir)` - Test that _get_conversation_insights analyzes actual conversation data.\n  - `TestUserContextManagerBehavior.test_get_mood_trends_analyzes_checkin_data(self, test_data_dir)` - Test that _get_mood_trends analyzes actual daily checkin data.\n  - `TestUserContextManagerBehavior.test_get_active_schedules_identifies_active_periods(self, test_data_dir)` - Test that _get_active_schedules identifies actually active schedule periods.\n  - `TestUserContextManagerBehavior.test_format_context_for_ai_creates_readable_string(self, test_data_dir)` - Test that format_context_for_ai creates actual readable string from context.\n  - `TestUserContextManagerBehavior.test_format_context_for_ai_handles_empty_context(self, test_data_dir)` - Test that format_context_for_ai handles empty or minimal context gracefully.\n  - `TestUserContextManagerBehavior.test_user_context_manager_error_handling_preserves_system_stability(self, test_data_dir)` - Test that UserContextManager error handling preserves system stability.\n  - `TestUserContextManagerBehavior.test_user_context_manager_integration_with_ai_chatbot(self, test_data_dir)` - Test that UserContextManager integrates properly with AI chatbot.\n  - `TestUserContextManagerBehavior.test_user_context_manager_performance_under_load(self, test_data_dir)` - Test that UserContextManager performs well under load.\n  - `TestUserContextManagerBehavior.test_user_context_manager_cleanup_and_resource_management(self, test_data_dir)` - Test that UserContextManager properly manages resources and cleanup.\n- `TestUserContextManagerIntegration` - Integration tests for UserContextManager with real user data.\n  - `TestUserContextManagerIntegration.test_user_context_manager_with_real_user_data(self, test_data_dir)` - Test UserContextManager with real user data files.\n  - `TestUserContextManagerIntegration.test_user_context_manager_error_recovery_with_real_files(self, test_data_dir)` - Test UserContextManager error recovery with corrupted real files.\n  - `TestUserContextManagerIntegration.test_user_context_manager_concurrent_access_safety(self, test_data_dir)` - Test UserContextManager safety under concurrent access.\n\n### tests/behavior/test_utilities_demo.py\n**Functions:**\n- `test_basic_user_creation(self, test_data_dir)` - Demonstrate creating a basic test user\n- `test_discord_user_creation(self, test_data_dir)` - Demonstrate creating a Discord-specific test user\n- `test_full_featured_user_creation(self, test_data_dir)` - Demonstrate creating a full-featured test user\n- `test_minimal_user_creation(self, test_data_dir)` - Demonstrate creating a minimal test user\n- `test_user_data_factory_usage(self, test_data_dir)` - Demonstrate using the user data factory for custom data structures\n- `test_environment_management(self)` - Demonstrate test environment setup and cleanup\n- `test_multiple_user_types_in_single_test(self, test_data_dir)` - Test creating multiple different user types in a single test.\n- `test_email_user_creation(self, test_data_dir)` - Test creating an email user with specific email address.\n- `test_telegram_user_creation(self, test_data_dir)` - Test creating a Telegram user with specific username.\n- `test_custom_fields_user_creation(self, test_data_dir)` - Test creating a user with custom fields.\n- `test_scheduled_user_creation(self, test_data_dir)` - Test creating a user with comprehensive schedules.\n- `test_comprehensive_user_types(self, test_data_dir)` - Test all comprehensive user types to ensure they cover real user scenarios.\n- `test_real_user_scenarios(self, test_data_dir, mock_config)` - Test scenarios that mirror real user data patterns.\n- `test_edge_case_users(self, test_data_dir)` - Test edge cases and boundary conditions for user creation.\n- `test_user_data_consistency(self, test_data_dir)` - Test that all user types produce consistent data structures.\n- `test_reduced_code_duplication(self, test_data_dir)` - Show how much less code is needed with centralized utilities\n- `test_consistent_user_data(self, test_data_dir)` - Show that all tests use consistent user data structures\n- `test_easy_maintenance(self, test_data_dir)` - Show how easy it is to update user creation logic\n- `test_flexible_configuration(self, test_data_dir)` - Show the flexibility of the utilities\n**Classes:**\n- `TestUtilitiesDemo` - Demonstration of centralized test utilities usage\n  - `TestUtilitiesDemo.test_basic_user_creation(self, test_data_dir)` - Demonstrate creating a basic test user\n  - `TestUtilitiesDemo.test_discord_user_creation(self, test_data_dir)` - Demonstrate creating a Discord-specific test user\n  - `TestUtilitiesDemo.test_full_featured_user_creation(self, test_data_dir)` - Demonstrate creating a full-featured test user\n  - `TestUtilitiesDemo.test_minimal_user_creation(self, test_data_dir)` - Demonstrate creating a minimal test user\n  - `TestUtilitiesDemo.test_user_data_factory_usage(self, test_data_dir)` - Demonstrate using the user data factory for custom data structures\n  - `TestUtilitiesDemo.test_environment_management(self)` - Demonstrate test environment setup and cleanup\n  - `TestUtilitiesDemo.test_multiple_user_types_in_single_test(self, test_data_dir)` - Test creating multiple different user types in a single test.\n  - `TestUtilitiesDemo.test_email_user_creation(self, test_data_dir)` - Test creating an email user with specific email address.\n  - `TestUtilitiesDemo.test_telegram_user_creation(self, test_data_dir)` - Test creating a Telegram user with specific username.\n  - `TestUtilitiesDemo.test_custom_fields_user_creation(self, test_data_dir)` - Test creating a user with custom fields.\n  - `TestUtilitiesDemo.test_scheduled_user_creation(self, test_data_dir)` - Test creating a user with comprehensive schedules.\n  - `TestUtilitiesDemo.test_comprehensive_user_types(self, test_data_dir)` - Test all comprehensive user types to ensure they cover real user scenarios.\n  - `TestUtilitiesDemo.test_real_user_scenarios(self, test_data_dir, mock_config)` - Test scenarios that mirror real user data patterns.\n  - `TestUtilitiesDemo.test_edge_case_users(self, test_data_dir)` - Test edge cases and boundary conditions for user creation.\n  - `TestUtilitiesDemo.test_user_data_consistency(self, test_data_dir)` - Test that all user types produce consistent data structures.\n- `TestUtilitiesBenefits` - Demonstrate the benefits of centralized test utilities\n  - `TestUtilitiesBenefits.test_reduced_code_duplication(self, test_data_dir)` - Show how much less code is needed with centralized utilities\n  - `TestUtilitiesBenefits.test_consistent_user_data(self, test_data_dir)` - Show that all tests use consistent user data structures\n  - `TestUtilitiesBenefits.test_easy_maintenance(self, test_data_dir)` - Show how easy it is to update user creation logic\n  - `TestUtilitiesBenefits.test_flexible_configuration(self, test_data_dir)` - Show the flexibility of the utilities\n\n### tests/conftest.py\n**Functions:**\n- `setup_logging_isolation()` - Set up logging isolation before any core modules are imported.\n- `setup_test_logging()` - Set up dedicated logging for tests with complete isolation from main app logging.\n- `isolate_logging()` - Ensure complete logging isolation during tests to prevent test logs from appearing in main app.log.\n- `test_data_dir()` - Create a temporary test data directory for all tests.\n- `mock_config(test_data_dir)` - Mock configuration for testing with proper test data directory.\n- `mock_user_data(test_data_dir, mock_config, request)` - Create mock user data for testing with unique user ID for each test.\n- `mock_user_data_with_messages(test_data_dir, mock_config, request)` - Create mock user data for testing with automated_messages enabled and categories.\n- `update_user_index_for_test(test_data_dir)` - Helper fixture to update user index for test users.\n- `patch_user_data_dirs()` - Patch BASE_DATA_DIR and USER_INFO_DIR_PATH to use tests/data/users/ for all tests.\n- `cleanup_test_users_after_session()` - Remove test users from both data/users/ and tests/data/users/ after all tests.\n- `mock_logger()` - Mock logger for testing.\n- `temp_file()` - Create a temporary file for testing.\n- `mock_ai_response()` - Mock AI response for testing.\n- `mock_task_data()` - Mock task data for testing.\n- `mock_message_data()` - Mock message data for testing.\n- `mock_service_data()` - Mock service data for testing.\n- `mock_communication_data()` - Mock communication data for testing.\n- `mock_schedule_data()` - Mock schedule data for testing.\n- `pytest_configure(config)` - Configure pytest for MHM testing.\n- `pytest_collection_modifyitems(config, items)` - Modify test collection to add default markers.\n- `pytest_sessionstart(session)` - Log test session start.\n- `pytest_sessionfinish(session, exitstatus)` - Log test session finish.\n- `pytest_runtest_logreport(report)` - Log individual test results.\n- `_update_index(user_id)` - No description\n\n### tests/integration/test_account_lifecycle.py\n**Functions:**\n- `save_user_data_simple(self, user_id, account_data, preferences_data, schedules_data)` - Helper function to save user data in the correct format.\n- `setup_test_environment(self)` - Set up isolated test environment for each test.\n- `test_create_basic_account(self, test_data_dir, mock_config)` - Test creating a basic account with only messages enabled.\n- `test_create_full_account(self, test_data_dir, mock_config)` - Test creating a full account with all features enabled.\n- `test_enable_checkins_for_basic_user(self, test_data_dir, mock_config)` - Test enabling check-ins for a user who only has messages enabled.\n- `test_disable_tasks_for_full_user(self, test_data_dir, mock_config)` - Test disabling tasks for a user who has all features enabled.\n- `test_reenable_tasks_for_user(self, test_data_dir, mock_config)` - Test re-enabling tasks for a user who previously had them disabled.\n- `test_add_message_category(self, test_data_dir, mock_config, update_user_index_for_test)` - Test adding a new message category to user preferences.\n- `test_remove_message_category(self, test_data_dir, mock_config)` - Test removing a message category from user preferences.\n- `test_add_schedule_period(self, test_data_dir, mock_config)` - Test adding a new schedule period to user schedules.\n- `test_modify_schedule_period(self, test_data_dir, mock_config)` - Test modifying an existing schedule period.\n- `test_remove_schedule_period(self, test_data_dir, mock_config)` - Test removing a schedule period from user schedules.\n- `test_complete_account_lifecycle(self, test_data_dir, mock_config)` - Test complete account lifecycle: create, modify, disable, re-enable, delete.\n**Classes:**\n- `TestAccountLifecycle` - Test complete account lifecycle workflows with real behavior verification.\n  - `TestAccountLifecycle.save_user_data_simple(self, user_id, account_data, preferences_data, schedules_data)` - Helper function to save user data in the correct format.\n  - `TestAccountLifecycle.setup_test_environment(self)` - Set up isolated test environment for each test.\n  - `TestAccountLifecycle.test_create_basic_account(self, test_data_dir, mock_config)` - Test creating a basic account with only messages enabled.\n  - `TestAccountLifecycle.test_create_full_account(self, test_data_dir, mock_config)` - Test creating a full account with all features enabled.\n  - `TestAccountLifecycle.test_enable_checkins_for_basic_user(self, test_data_dir, mock_config)` - Test enabling check-ins for a user who only has messages enabled.\n  - `TestAccountLifecycle.test_disable_tasks_for_full_user(self, test_data_dir, mock_config)` - Test disabling tasks for a user who has all features enabled.\n  - `TestAccountLifecycle.test_reenable_tasks_for_user(self, test_data_dir, mock_config)` - Test re-enabling tasks for a user who previously had them disabled.\n  - `TestAccountLifecycle.test_add_message_category(self, test_data_dir, mock_config, update_user_index_for_test)` - Test adding a new message category to user preferences.\n  - `TestAccountLifecycle.test_remove_message_category(self, test_data_dir, mock_config)` - Test removing a message category from user preferences.\n  - `TestAccountLifecycle.test_add_schedule_period(self, test_data_dir, mock_config)` - Test adding a new schedule period to user schedules.\n  - `TestAccountLifecycle.test_modify_schedule_period(self, test_data_dir, mock_config)` - Test modifying an existing schedule period.\n  - `TestAccountLifecycle.test_remove_schedule_period(self, test_data_dir, mock_config)` - Test removing a schedule period from user schedules.\n  - `TestAccountLifecycle.test_complete_account_lifecycle(self, test_data_dir, mock_config)` - Test complete account lifecycle: create, modify, disable, re-enable, delete.\n\n### tests/integration/test_account_management.py\n**Functions:**\n- `test_account_management_imports()` - Test that all account management modules can be imported without errors\n- `test_account_management_functions()` - Test that all account management functions can be called (with safe test data)\n- `test_account_management_data_structures()` - Test that account management can handle the expected data structures\n- `test_account_management_validation()` - Test that account management validation works correctly\n- `test_account_management_safe_operations()` - Test account management operations with temporary test data\n- `test_account_management_integration()` - Test that account management integrates properly with other systems\n- `main()` - Run all account management tests and generate a comprehensive report\n\n### tests/integration/test_user_creation.py\n**Functions:**\n- `test_basic_email_user_creation(self, test_data_dir, mock_config)` - Test creating a basic email user with minimal settings.\n- `test_discord_user_creation(self, test_data_dir, mock_config)` - Test creating a Discord user with full features enabled.\n- `test_telegram_user_creation(self, test_data_dir, mock_config)` - Test creating a Telegram user with mixed features using enhanced test utilities.\n- `test_user_with_custom_fields(self, test_data_dir, mock_config)` - Test creating a user with extensive custom fields using enhanced test utilities.\n- `test_user_creation_with_schedules(self, test_data_dir, mock_config)` - Test creating a user with schedule periods using enhanced test utilities.\n- `test_username_validation(self)` - Test username validation.\n- `test_email_validation(self)` - Test email validation.\n- `test_timezone_validation(self)` - Test timezone validation.\n- `test_required_fields_validation(self, test_data_dir, mock_config)` - Test that required fields are validated.\n- `test_duplicate_user_creation(self, test_data_dir, mock_config)` - Test creating a user that already exists.\n- `test_invalid_user_id(self, test_data_dir, mock_config)` - Test creating user with invalid user ID.\n- `test_corrupted_data_handling(self, test_data_dir, mock_config)` - Test handling corrupted user data.\n- `test_full_user_lifecycle(self, test_data_dir, mock_config)` - Test complete user lifecycle: create, update, delete.\n- `test_multiple_users_same_channel(self, test_data_dir, mock_config)` - Test creating multiple users with the same channel type.\n- `test_user_with_all_features(self, test_data_dir, mock_config)` - Test creating a user with all possible features enabled.\n**Classes:**\n- `TestUserCreationScenarios` - Test comprehensive user creation scenarios.\n  - `TestUserCreationScenarios.test_basic_email_user_creation(self, test_data_dir, mock_config)` - Test creating a basic email user with minimal settings.\n  - `TestUserCreationScenarios.test_discord_user_creation(self, test_data_dir, mock_config)` - Test creating a Discord user with full features enabled.\n  - `TestUserCreationScenarios.test_telegram_user_creation(self, test_data_dir, mock_config)` - Test creating a Telegram user with mixed features using enhanced test utilities.\n  - `TestUserCreationScenarios.test_user_with_custom_fields(self, test_data_dir, mock_config)` - Test creating a user with extensive custom fields using enhanced test utilities.\n  - `TestUserCreationScenarios.test_user_creation_with_schedules(self, test_data_dir, mock_config)` - Test creating a user with schedule periods using enhanced test utilities.\n- `TestUserCreationValidation` - Test validation scenarios during user creation.\n  - `TestUserCreationValidation.test_username_validation(self)` - Test username validation.\n  - `TestUserCreationValidation.test_email_validation(self)` - Test email validation.\n  - `TestUserCreationValidation.test_timezone_validation(self)` - Test timezone validation.\n  - `TestUserCreationValidation.test_required_fields_validation(self, test_data_dir, mock_config)` - Test that required fields are validated.\n- `TestUserCreationErrorHandling` - Test error handling during user creation.\n  - `TestUserCreationErrorHandling.test_duplicate_user_creation(self, test_data_dir, mock_config)` - Test creating a user that already exists.\n  - `TestUserCreationErrorHandling.test_invalid_user_id(self, test_data_dir, mock_config)` - Test creating user with invalid user ID.\n  - `TestUserCreationErrorHandling.test_corrupted_data_handling(self, test_data_dir, mock_config)` - Test handling corrupted user data.\n- `TestUserCreationIntegration` - Test integration scenarios for user creation.\n  - `TestUserCreationIntegration.test_full_user_lifecycle(self, test_data_dir, mock_config)` - Test complete user lifecycle: create, update, delete.\n  - `TestUserCreationIntegration.test_multiple_users_same_channel(self, test_data_dir, mock_config)` - Test creating multiple users with the same channel type.\n  - `TestUserCreationIntegration.test_user_with_all_features(self, test_data_dir, mock_config)` - Test creating a user with all possible features enabled.\n\n### tests/test_utilities.py\n**Functions:**\n- `create_test_user(user_id, user_type)` - Convenience function to create test users with different configurations\n\nArgs:\n    user_id: Unique identifier for the test user\n    user_type: Type of user to create. Options:\n        - \"basic\": Basic user with configurable features\n        - \"discord\": Discord-specific user\n        - \"email\": Email-specific user\n        - \"telegram\": Telegram-specific user\n        - \"full\": Full featured user with all capabilities\n        - \"minimal\": Minimal user with only messaging\n        - \"health\": Health-focused user\n        - \"task\": Task/productivity-focused user\n        - \"disability\": User with accessibility considerations\n        - \"complex_checkins\": User with complex check-in configurations\n        - \"limited_data\": User with minimal data (like real users)\n        - \"inconsistent\": User with inconsistent/partial data\n        - \"custom_fields\": User with custom field configurations\n        - \"scheduled\": User with custom schedule configurations\n    **kwargs: Additional arguments passed to the specific creation method\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `setup_test_data_environment()` - Convenience function to set up test data environment\n\nReturns:\n    tuple: (test_dir, test_data_dir, test_test_data_dir)\n- `cleanup_test_data_environment(test_dir)` - Convenience function to clean up test data environment\n\nArgs:\n    test_dir: Path to the test directory to clean up\n- `create_basic_user(user_id, enable_checkins, enable_tasks, test_data_dir)` - Create a test user with basic functionality enabled\n\nArgs:\n    user_id: Unique identifier for the test user\n    enable_checkins: Whether to enable check-ins for this user\n    enable_tasks: Whether to enable task management for this user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `_create_user_files_directly(user_id, user_data, test_data_dir)` - Helper function to create user files directly in test directory\n- `_create_basic_user_with_test_dir(user_id, enable_checkins, enable_tasks, test_data_dir)` - Create basic user with test directory by directly saving files\n- `_create_basic_user_impl(user_id, enable_checkins, enable_tasks)` - Internal implementation of basic user creation\n- `create_discord_user(user_id, discord_user_id, test_data_dir)` - Create a test user specifically configured for Discord testing\n\nArgs:\n    user_id: Unique identifier for the test user\n    discord_user_id: Discord user ID (defaults to user_id if not provided)\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `_create_discord_user_with_test_dir(user_id, discord_user_id, test_data_dir)` - Create discord user with test directory by directly saving files\n- `_create_discord_user_impl(user_id, discord_user_id)` - Internal implementation of discord user creation\n- `create_full_featured_user(user_id, test_data_dir)` - Create a test user with all features enabled and comprehensive data\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `_create_full_featured_user_with_test_dir(user_id, test_data_dir)` - Create full featured user with test directory by directly saving files\n- `_create_full_featured_user_impl(user_id)` - Internal implementation of full featured user creation\n- `create_email_user(user_id, email, test_data_dir)` - Create a test user specifically configured for email testing\n\nArgs:\n    user_id: Unique identifier for the test user\n    email: Email address (defaults to user_id@example.com if not provided)\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    str: User ID if user was created successfully, None otherwise\n- `_create_email_user_with_test_dir(user_id, email, test_data_dir)` - Create email user with test directory by directly saving files\n- `_create_email_user_impl(user_id, email)` - Internal implementation of email user creation\n- `create_user_with_custom_fields(user_id, custom_fields, test_data_dir)` - Create a test user with custom fields for testing custom field functionality\n\nArgs:\n    user_id: Unique identifier for the test user\n    custom_fields: Dictionary of custom fields to add to user context\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `_create_user_with_custom_fields_impl(user_id, custom_fields)` - Internal implementation of custom fields user creation\n- `create_telegram_user(user_id, telegram_username, test_data_dir)` - Create a test user specifically configured for Telegram testing\n\nArgs:\n    user_id: Unique identifier for the test user\n    telegram_username: Telegram username (defaults to user_id if not provided)\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `_create_telegram_user_with_test_dir(user_id, telegram_username, test_data_dir)` - Create telegram user with test directory by directly saving files\n- `_create_telegram_user_impl(user_id, telegram_username)` - Internal implementation of telegram user creation\n- `create_user_with_schedules(user_id, schedule_config, test_data_dir)` - Create a test user with comprehensive schedule configuration\n\nArgs:\n    user_id: Unique identifier for the test user\n    schedule_config: Custom schedule configuration\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `_create_user_with_schedules_impl(user_id, schedule_config)` - Internal implementation of schedules user creation\n- `create_minimal_user(user_id, test_data_dir)` - Create a minimal test user with only basic messaging enabled\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `_create_minimal_user_with_test_dir(user_id, test_data_dir)` - Create minimal user with test directory by directly saving files\n- `_create_minimal_user_impl(user_id)` - Internal implementation of minimal user creation\n- `create_user_with_complex_checkins(user_id, test_data_dir)` - Create a test user with complex check-in configurations\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `_create_user_with_complex_checkins_with_test_dir(user_id, test_data_dir)` - Create complex checkins user with test directory by directly saving files\n- `_create_user_with_complex_checkins_impl(user_id)` - Internal implementation of complex checkins user creation\n- `create_user_with_health_focus(user_id, test_data_dir)` - Create a test user with health-focused features and data\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `_create_user_with_health_focus_with_test_dir(user_id, test_data_dir)` - Create health focus user with test directory by directly saving files\n- `_create_user_with_health_focus_impl(user_id)` - Internal implementation of health focus user creation\n- `create_user_with_task_focus(user_id, test_data_dir)` - Create a test user with task management focus\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `_create_user_with_task_focus_with_test_dir(user_id, test_data_dir)` - Create task focus user with test directory by directly saving files\n- `_create_user_with_task_focus_impl(user_id)` - Internal implementation of task focus user creation\n- `create_user_with_disabilities(user_id, test_data_dir)` - Create a test user with disability-focused features and data\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `_create_user_with_disabilities_with_test_dir(user_id, test_data_dir)` - Create disability user with test directory by directly saving files\n- `_create_user_with_disabilities_impl(user_id)` - Internal implementation of disability user creation\n- `create_user_with_limited_data(user_id, test_data_dir)` - Create a test user with minimal data for testing edge cases\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `_create_user_with_limited_data_with_test_dir(user_id, test_data_dir)` - Create limited data user with test directory by directly saving files\n- `_create_user_with_limited_data_impl(user_id)` - Internal implementation of limited data user creation\n- `create_user_with_inconsistent_data(user_id, test_data_dir)` - Create a test user with inconsistent data for testing edge cases\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `_create_user_with_inconsistent_data_with_test_dir(user_id, test_data_dir)` - Create inconsistent data user with test directory by directly saving files\n- `_create_user_with_inconsistent_data_impl(user_id)` - Internal implementation of inconsistent data user creation\n- `get_test_user_data(user_id, test_data_dir)` - Get user data from test directory\n- `get_test_user_id_by_internal_username(internal_username, test_data_dir)` - Get user ID by internal username from test directory\n- `_verify_user_creation_with_test_dir(user_id, actual_user_id, test_data_dir)` - Helper function to verify user creation with proper configuration patching\n- `_verify_email_user_creation_with_test_dir(user_id, actual_user_id, test_data_dir)` - Helper function to verify email user creation with proper configuration patching\n- `setup_test_environment()` - Create isolated test environment with temporary directories\n\nReturns:\n    tuple: (test_dir, test_data_dir, test_test_data_dir)\n- `cleanup_test_environment(test_dir)` - Clean up test environment and remove temporary files\n\nArgs:\n    test_dir: Path to the test directory to clean up\n- `create_account_data(user_id)` - Create standard account data structure with optional overrides\n\nArgs:\n    user_id: User identifier\n    **overrides: Optional field overrides\n    \nReturns:\n    Dict containing account data\n- `create_preferences_data(user_id)` - Create standard preferences data structure with optional overrides\n\nArgs:\n    user_id: User identifier\n    **overrides: Optional field overrides\n    \nReturns:\n    Dict containing preferences data\n- `create_schedules_data()` - Create standard schedules data structure with optional overrides\n\nArgs:\n    **overrides: Optional field overrides\n    \nReturns:\n    Dict containing schedules data\n- `create_context_data()` - Create standard context data structure with optional overrides\n\nArgs:\n    **overrides: Optional field overrides\n    \nReturns:\n    Dict containing context data\n- `create_corrupted_user_data(user_id, corruption_type)` - Create a user with corrupted data for testing error handling\n\nArgs:\n    user_id: Unique identifier for the test user\n    corruption_type: Type of corruption (\"invalid_json\", \"missing_file\", \"empty_file\")\n    \nReturns:\n    bool: True if corrupted user was created successfully, False otherwise\n- `create_test_schedule_data(categories)` - Create test schedule data for testing schedule management\n\nArgs:\n    categories: List of categories to create schedules for\n    \nReturns:\n    Dict containing schedule data\n- `create_test_task_data(task_count)` - Create test task data for testing task management\n\nArgs:\n    task_count: Number of tasks to create\n    \nReturns:\n    List of task dictionaries\n- `create_test_message_data(category, message_count)` - Create test message data for testing message management\n\nArgs:\n    category: Message category\n    message_count: Number of messages to create\n    \nReturns:\n    List of message dictionaries\n**Classes:**\n- `TestUserFactory` - Factory for creating test users with different configurations\n  - `TestUserFactory.create_basic_user(user_id, enable_checkins, enable_tasks, test_data_dir)` - Create a test user with basic functionality enabled\n\nArgs:\n    user_id: Unique identifier for the test user\n    enable_checkins: Whether to enable check-ins for this user\n    enable_tasks: Whether to enable task management for this user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory._create_user_files_directly(user_id, user_data, test_data_dir)` - Helper function to create user files directly in test directory\n  - `TestUserFactory._create_basic_user_with_test_dir(user_id, enable_checkins, enable_tasks, test_data_dir)` - Create basic user with test directory by directly saving files\n  - `TestUserFactory._create_basic_user_impl(user_id, enable_checkins, enable_tasks)` - Internal implementation of basic user creation\n  - `TestUserFactory.create_discord_user(user_id, discord_user_id, test_data_dir)` - Create a test user specifically configured for Discord testing\n\nArgs:\n    user_id: Unique identifier for the test user\n    discord_user_id: Discord user ID (defaults to user_id if not provided)\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory._create_discord_user_with_test_dir(user_id, discord_user_id, test_data_dir)` - Create discord user with test directory by directly saving files\n  - `TestUserFactory._create_discord_user_impl(user_id, discord_user_id)` - Internal implementation of discord user creation\n  - `TestUserFactory.create_full_featured_user(user_id, test_data_dir)` - Create a test user with all features enabled and comprehensive data\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory._create_full_featured_user_with_test_dir(user_id, test_data_dir)` - Create full featured user with test directory by directly saving files\n  - `TestUserFactory._create_full_featured_user_impl(user_id)` - Internal implementation of full featured user creation\n  - `TestUserFactory.create_email_user(user_id, email, test_data_dir)` - Create a test user specifically configured for email testing\n\nArgs:\n    user_id: Unique identifier for the test user\n    email: Email address (defaults to user_id@example.com if not provided)\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    str: User ID if user was created successfully, None otherwise\n  - `TestUserFactory._create_email_user_with_test_dir(user_id, email, test_data_dir)` - Create email user with test directory by directly saving files\n  - `TestUserFactory._create_email_user_impl(user_id, email)` - Internal implementation of email user creation\n  - `TestUserFactory.create_user_with_custom_fields(user_id, custom_fields, test_data_dir)` - Create a test user with custom fields for testing custom field functionality\n\nArgs:\n    user_id: Unique identifier for the test user\n    custom_fields: Dictionary of custom fields to add to user context\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory._create_user_with_custom_fields_impl(user_id, custom_fields)` - Internal implementation of custom fields user creation\n  - `TestUserFactory.create_telegram_user(user_id, telegram_username, test_data_dir)` - Create a test user specifically configured for Telegram testing\n\nArgs:\n    user_id: Unique identifier for the test user\n    telegram_username: Telegram username (defaults to user_id if not provided)\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory._create_telegram_user_with_test_dir(user_id, telegram_username, test_data_dir)` - Create telegram user with test directory by directly saving files\n  - `TestUserFactory._create_telegram_user_impl(user_id, telegram_username)` - Internal implementation of telegram user creation\n  - `TestUserFactory.create_user_with_schedules(user_id, schedule_config, test_data_dir)` - Create a test user with comprehensive schedule configuration\n\nArgs:\n    user_id: Unique identifier for the test user\n    schedule_config: Custom schedule configuration\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory._create_user_with_schedules_impl(user_id, schedule_config)` - Internal implementation of schedules user creation\n  - `TestUserFactory.create_minimal_user(user_id, test_data_dir)` - Create a minimal test user with only basic messaging enabled\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory._create_minimal_user_with_test_dir(user_id, test_data_dir)` - Create minimal user with test directory by directly saving files\n  - `TestUserFactory._create_minimal_user_impl(user_id)` - Internal implementation of minimal user creation\n  - `TestUserFactory.create_user_with_complex_checkins(user_id, test_data_dir)` - Create a test user with complex check-in configurations\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory._create_user_with_complex_checkins_with_test_dir(user_id, test_data_dir)` - Create complex checkins user with test directory by directly saving files\n  - `TestUserFactory._create_user_with_complex_checkins_impl(user_id)` - Internal implementation of complex checkins user creation\n  - `TestUserFactory.create_user_with_health_focus(user_id, test_data_dir)` - Create a test user with health-focused features and data\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory._create_user_with_health_focus_with_test_dir(user_id, test_data_dir)` - Create health focus user with test directory by directly saving files\n  - `TestUserFactory._create_user_with_health_focus_impl(user_id)` - Internal implementation of health focus user creation\n  - `TestUserFactory.create_user_with_task_focus(user_id, test_data_dir)` - Create a test user with task management focus\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory._create_user_with_task_focus_with_test_dir(user_id, test_data_dir)` - Create task focus user with test directory by directly saving files\n  - `TestUserFactory._create_user_with_task_focus_impl(user_id)` - Internal implementation of task focus user creation\n  - `TestUserFactory.create_user_with_disabilities(user_id, test_data_dir)` - Create a test user with disability-focused features and data\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory._create_user_with_disabilities_with_test_dir(user_id, test_data_dir)` - Create disability user with test directory by directly saving files\n  - `TestUserFactory._create_user_with_disabilities_impl(user_id)` - Internal implementation of disability user creation\n  - `TestUserFactory.create_user_with_limited_data(user_id, test_data_dir)` - Create a test user with minimal data for testing edge cases\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory._create_user_with_limited_data_with_test_dir(user_id, test_data_dir)` - Create limited data user with test directory by directly saving files\n  - `TestUserFactory._create_user_with_limited_data_impl(user_id)` - Internal implementation of limited data user creation\n  - `TestUserFactory.create_user_with_inconsistent_data(user_id, test_data_dir)` - Create a test user with inconsistent data for testing edge cases\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory._create_user_with_inconsistent_data_with_test_dir(user_id, test_data_dir)` - Create inconsistent data user with test directory by directly saving files\n  - `TestUserFactory._create_user_with_inconsistent_data_impl(user_id)` - Internal implementation of inconsistent data user creation\n  - `TestUserFactory.get_test_user_data(user_id, test_data_dir)` - Get user data from test directory\n  - `TestUserFactory.get_test_user_id_by_internal_username(internal_username, test_data_dir)` - Get user ID by internal username from test directory\n  - `TestUserFactory._verify_user_creation_with_test_dir(user_id, actual_user_id, test_data_dir)` - Helper function to verify user creation with proper configuration patching\n  - `TestUserFactory._verify_email_user_creation_with_test_dir(user_id, actual_user_id, test_data_dir)` - Helper function to verify email user creation with proper configuration patching\n- `TestDataManager` - Manages test data directories and cleanup\n  - `TestDataManager.setup_test_environment()` - Create isolated test environment with temporary directories\n\nReturns:\n    tuple: (test_dir, test_data_dir, test_test_data_dir)\n  - `TestDataManager.cleanup_test_environment(test_dir)` - Clean up test environment and remove temporary files\n\nArgs:\n    test_dir: Path to the test directory to clean up\n- `TestUserDataFactory` - Factory for creating specific test user data structures\n  - `TestUserDataFactory.create_account_data(user_id)` - Create standard account data structure with optional overrides\n\nArgs:\n    user_id: User identifier\n    **overrides: Optional field overrides\n    \nReturns:\n    Dict containing account data\n  - `TestUserDataFactory.create_preferences_data(user_id)` - Create standard preferences data structure with optional overrides\n\nArgs:\n    user_id: User identifier\n    **overrides: Optional field overrides\n    \nReturns:\n    Dict containing preferences data\n  - `TestUserDataFactory.create_schedules_data()` - Create standard schedules data structure with optional overrides\n\nArgs:\n    **overrides: Optional field overrides\n    \nReturns:\n    Dict containing schedules data\n  - `TestUserDataFactory.create_context_data()` - Create standard context data structure with optional overrides\n\nArgs:\n    **overrides: Optional field overrides\n    \nReturns:\n    Dict containing context data\n- `TestDataFactory` - Factory for creating test data for various scenarios\n  - `TestDataFactory.create_corrupted_user_data(user_id, corruption_type)` - Create a user with corrupted data for testing error handling\n\nArgs:\n    user_id: Unique identifier for the test user\n    corruption_type: Type of corruption (\"invalid_json\", \"missing_file\", \"empty_file\")\n    \nReturns:\n    bool: True if corrupted user was created successfully, False otherwise\n  - `TestDataFactory.create_test_schedule_data(categories)` - Create test schedule data for testing schedule management\n\nArgs:\n    categories: List of categories to create schedules for\n    \nReturns:\n    Dict containing schedule data\n  - `TestDataFactory.create_test_task_data(task_count)` - Create test task data for testing task management\n\nArgs:\n    task_count: Number of tasks to create\n    \nReturns:\n    List of task dictionaries\n  - `TestDataFactory.create_test_message_data(category, message_count)` - Create test message data for testing message management\n\nArgs:\n    category: Message category\n    message_count: Number of messages to create\n    \nReturns:\n    List of message dictionaries\n\n### tests/ui/test_account_creation_ui.py\n**Functions:**\n- `qapp()` - Create QApplication instance for UI testing.\n- `dialog(self, qapp, test_data_dir, mock_config)` - Create account creation dialog for testing.\n- `test_dialog_initialization_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\n- `test_feature_enablement_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test feature enablement checkboxes control tab visibility.\n- `test_username_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test username validation with real UI interactions.\n- `test_timezone_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test timezone validation with real UI interactions.\n- `test_feature_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test feature validation with proper category requirements.\n- `test_messages_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test messages-specific validation when messages are enabled.\n- `test_account_creation_real_behavior(self, dialog, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test complete account creation workflow with real file operations.\n- `test_widget_data_collection_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test that widgets properly collect and return data.\n- `test_user_profile_dialog_integration(self, qapp, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test user profile dialog integration with real user data.\n- `test_user_index_integration_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test user index integration with real file operations.\n- `test_feature_enablement_persistence_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test that feature enablement is properly persisted using enhanced test utilities.\n- `test_duplicate_username_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of duplicate usernames using enhanced test utilities.\n- `test_invalid_data_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of invalid data during account creation.\n- `test_file_system_error_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of file system errors.\n- `test_widget_error_handling_real_behavior(self, qapp, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of widget errors during account creation.\n- `test_full_account_lifecycle_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test complete account lifecycle with real file operations.\n- `test_multiple_users_same_features_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test creating multiple users with same features.\n- `mock_accept_impl()` - No description\n**Classes:**\n- `TestAccountCreationDialogRealBehavior` - Test account creation dialog with real behavior verification.\n  - `TestAccountCreationDialogRealBehavior.dialog(self, qapp, test_data_dir, mock_config)` - Create account creation dialog for testing.\n  - `TestAccountCreationDialogRealBehavior.test_dialog_initialization_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\n  - `TestAccountCreationDialogRealBehavior.test_feature_enablement_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test feature enablement checkboxes control tab visibility.\n  - `TestAccountCreationDialogRealBehavior.test_username_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test username validation with real UI interactions.\n  - `TestAccountCreationDialogRealBehavior.test_timezone_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test timezone validation with real UI interactions.\n  - `TestAccountCreationDialogRealBehavior.test_feature_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test feature validation with proper category requirements.\n  - `TestAccountCreationDialogRealBehavior.test_messages_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test messages-specific validation when messages are enabled.\n  - `TestAccountCreationDialogRealBehavior.test_account_creation_real_behavior(self, dialog, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test complete account creation workflow with real file operations.\n  - `TestAccountCreationDialogRealBehavior.test_widget_data_collection_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test that widgets properly collect and return data.\n- `TestAccountManagementRealBehavior` - Test account management functionality with real behavior verification.\n  - `TestAccountManagementRealBehavior.test_user_profile_dialog_integration(self, qapp, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test user profile dialog integration with real user data.\n  - `TestAccountManagementRealBehavior.test_user_index_integration_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test user index integration with real file operations.\n  - `TestAccountManagementRealBehavior.test_feature_enablement_persistence_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test that feature enablement is properly persisted using enhanced test utilities.\n- `TestAccountCreationErrorHandling` - Test error handling in account creation and management.\n  - `TestAccountCreationErrorHandling.test_duplicate_username_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of duplicate usernames using enhanced test utilities.\n  - `TestAccountCreationErrorHandling.test_invalid_data_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of invalid data during account creation.\n  - `TestAccountCreationErrorHandling.test_file_system_error_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of file system errors.\n  - `TestAccountCreationErrorHandling.test_widget_error_handling_real_behavior(self, qapp, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of widget errors during account creation.\n- `TestAccountCreationIntegration` - Test integration scenarios for account creation and management.\n  - `TestAccountCreationIntegration.test_full_account_lifecycle_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test complete account lifecycle with real file operations.\n  - `TestAccountCreationIntegration.test_multiple_users_same_features_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test creating multiple users with same features.\n\n### tests/ui/test_dialogs.py\n**Functions:**\n- `test_dialog_imports()` - Test that all dialog modules can be imported without errors\n- `test_widget_imports()` - Test that all widget modules can be imported without errors\n- `test_ui_files_exist()` - Test that all required UI files exist\n- `test_generated_files_exist()` - Test that all generated Python UI files exist\n- `test_user_data_access()` - Test that we can access user data for testing - READ ONLY\n- `test_dialog_instantiation()` - Test that dialogs can be instantiated (without showing them)\n- `main()` - Run all tests and generate a comprehensive report\n- `mock_save(data)` - No description\n\n### tests/unit/test_cleanup.py\n**Functions:**\n- `main()` - Command-line interface for test cleanup.\n- `__init__(self, test_data_dir)` - Initialize the cleanup manager.\n- `cleanup_test_users(self, user_ids)` - Clean up test user data.\n\nArgs:\n    user_ids: List of user IDs to clean up. If None, cleans up all test users.\n    \nReturns:\n    bool: True if cleanup was successful, False otherwise.\n- `_find_test_users(self)` - Find all test users in the user directory.\n- `_cleanup_single_user(self, user_id)` - Clean up a single test user.\n- `_create_user_backup(self, user_id, user_path)` - Create a backup of user data before cleanup.\n- `reset_test_environment(self)` - Reset the entire test environment.\n- `_cleanup_old_test_logs(self, keep_days)` - Clean up old test log files.\n- `_cleanup_temp_files(self)` - Clean up temporary test files.\n- `validate_test_data_integrity(self)` - Validate the integrity of test data.\n- `_validate_user_data(self, user_id, user_path)` - Validate a single user's data integrity.\n- `_find_orphaned_files(self)` - Find orphaned files in the user directory.\n**Classes:**\n- `CleanupManager` - Manages test data cleanup and isolation.\n  - `CleanupManager.__init__(self, test_data_dir)` - Initialize the cleanup manager.\n  - `CleanupManager.cleanup_test_users(self, user_ids)` - Clean up test user data.\n\nArgs:\n    user_ids: List of user IDs to clean up. If None, cleans up all test users.\n    \nReturns:\n    bool: True if cleanup was successful, False otherwise.\n  - `CleanupManager._find_test_users(self)` - Find all test users in the user directory.\n  - `CleanupManager._cleanup_single_user(self, user_id)` - Clean up a single test user.\n  - `CleanupManager._create_user_backup(self, user_id, user_path)` - Create a backup of user data before cleanup.\n  - `CleanupManager.reset_test_environment(self)` - Reset the entire test environment.\n  - `CleanupManager._cleanup_old_test_logs(self, keep_days)` - Clean up old test log files.\n  - `CleanupManager._cleanup_temp_files(self)` - Clean up temporary test files.\n  - `CleanupManager.validate_test_data_integrity(self)` - Validate the integrity of test data.\n  - `CleanupManager._validate_user_data(self, user_id, user_path)` - Validate a single user's data integrity.\n  - `CleanupManager._find_orphaned_files(self)` - Find orphaned files in the user directory.\n\n### tests/unit/test_config.py\n**Functions:**\n- `test_validate_core_paths_success(self, test_data_dir)` - Test successful core path validation.\n- `test_validate_core_paths_missing_directory(self)` - Test core path validation with missing directory.\n- `test_validate_ai_configuration_success(self)` - Test successful AI configuration validation.\n- `test_validate_ai_configuration_missing_url(self)` - Test AI configuration validation with missing URL.\n- `test_validate_communication_channels_success(self)` - Test successful communication channels validation.\n- `test_validate_communication_channels_no_tokens(self)` - Test communication channels validation with no tokens.\n- `test_validate_logging_configuration_success(self)` - Test successful logging configuration validation.\n- `test_validate_scheduler_configuration_success(self)` - Test successful scheduler configuration validation.\n- `test_validate_file_organization_settings_success(self)` - Test successful file organization settings validation.\n- `test_validate_environment_variables_success(self)` - Test successful environment variables validation.\n- `test_validate_all_configuration_success(self, test_data_dir)` - Test comprehensive configuration validation.\n- `test_validate_and_raise_if_invalid_success(self, test_data_dir)` - Test successful validation with no exceptions.\n- `test_validate_and_raise_if_invalid_failure(self)` - Test validation failure raises ConfigurationError.\n- `test_base_data_dir_default(self)` - Test BASE_DATA_DIR default value.\n- `test_user_info_dir_path_default(self)` - Test USER_INFO_DIR_PATH default value.\n- `test_default_messages_dir_path_default(self)` - Test DEFAULT_MESSAGES_DIR_PATH default value.\n- `test_environment_override(self)` - Test environment variable override.\n**Classes:**\n- `TestConfigValidation` - Test configuration validation functions.\n  - `TestConfigValidation.test_validate_core_paths_success(self, test_data_dir)` - Test successful core path validation.\n  - `TestConfigValidation.test_validate_core_paths_missing_directory(self)` - Test core path validation with missing directory.\n  - `TestConfigValidation.test_validate_ai_configuration_success(self)` - Test successful AI configuration validation.\n  - `TestConfigValidation.test_validate_ai_configuration_missing_url(self)` - Test AI configuration validation with missing URL.\n  - `TestConfigValidation.test_validate_communication_channels_success(self)` - Test successful communication channels validation.\n  - `TestConfigValidation.test_validate_communication_channels_no_tokens(self)` - Test communication channels validation with no tokens.\n  - `TestConfigValidation.test_validate_logging_configuration_success(self)` - Test successful logging configuration validation.\n  - `TestConfigValidation.test_validate_scheduler_configuration_success(self)` - Test successful scheduler configuration validation.\n  - `TestConfigValidation.test_validate_file_organization_settings_success(self)` - Test successful file organization settings validation.\n  - `TestConfigValidation.test_validate_environment_variables_success(self)` - Test successful environment variables validation.\n  - `TestConfigValidation.test_validate_all_configuration_success(self, test_data_dir)` - Test comprehensive configuration validation.\n  - `TestConfigValidation.test_validate_and_raise_if_invalid_success(self, test_data_dir)` - Test successful validation with no exceptions.\n  - `TestConfigValidation.test_validate_and_raise_if_invalid_failure(self)` - Test validation failure raises ConfigurationError.\n- `TestConfigConstants` - Test configuration constants.\n  - `TestConfigConstants.test_base_data_dir_default(self)` - Test BASE_DATA_DIR default value.\n  - `TestConfigConstants.test_user_info_dir_path_default(self)` - Test USER_INFO_DIR_PATH default value.\n  - `TestConfigConstants.test_default_messages_dir_path_default(self)` - Test DEFAULT_MESSAGES_DIR_PATH default value.\n  - `TestConfigConstants.test_environment_override(self)` - Test environment variable override.\n\n### tests/unit/test_error_handling.py\n**Functions:**\n- `test_mhm_error_basic(self)` - Test basic MHMError creation.\n- `test_mhm_error_with_details(self)` - Test MHMError with custom details.\n- `test_data_error(self)` - Test DataError exception.\n- `test_file_operation_error(self)` - Test FileOperationError exception.\n- `test_config_error(self)` - Test ConfigError exception.\n- `test_validation_error(self)` - Test ValidationError exception.\n- `test_error_handler_success(self)` - Test error_handler with successful function.\n- `test_error_handler_exception(self)` - Test error_handler with exception.\n- `test_error_handler_custom_return(self)` - Test error_handler with custom return value.\n- `test_error_handler_logs_error(self)` - Test error_handler logs errors.\n- `test_handle_errors_success(self)` - Test handle_errors with successful function.\n- `test_handle_errors_exception(self)` - Test handle_errors with exception.\n- `test_handle_errors_custom_return(self)` - Test handle_errors with custom return value.\n- `test_handle_errors_specific_exception(self)` - Test handle_errors with specific exception handling.\n- `test_handle_errors_logs_error(self)` - Test handle_errors logs errors.\n- `test_handle_file_error(self)` - Test handle_file_error function.\n- `test_handle_configuration_error(self)` - Test handle_configuration_error function.\n- `test_error_handling_in_function_chain(self)` - Test error handling in a chain of functions.\n- `test_error_handling_with_recovery(self)` - Test error handling with recovery mechanisms and real side effects.\n- `test_error_handling_different_exception_types(self)` - Test error handling with different exception types and side effects.\n- `test_error_handler_with_args_kwargs(self)` - Test error_handler with function arguments.\n- `test_handle_errors_with_args_kwargs(self)` - Test handle_errors with function arguments.\n- `test_error_handler_nested_exceptions(self)` - Test error_handler with nested exceptions.\n- `test_handle_errors_with_logging_disabled(self)` - Test handle_errors when logging is disabled.\n- `test_function()` - Test Function.\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function(exception_type)` - No description\n- `test_function(arg1, arg2, kwarg1)` - No description\n- `test_function(arg1, arg2, kwarg1)` - No description\n- `outer_function()` - No description\n- `inner_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `outer_function()` - No description\n- `inner_function()` - No description\n- `test_function()` - No description\n- `corrupt_data_function()` - No description\n- `recover_data_function()` - No description\n- `backup_function()` - No description\n- `cleanup_function()` - No description\n- `state_validation_function()` - No description\n- `test_function()` - No description\n**Classes:**\n- `TestCustomExceptions` - Test custom exception classes.\n  - `TestCustomExceptions.test_mhm_error_basic(self)` - Test basic MHMError creation.\n  - `TestCustomExceptions.test_mhm_error_with_details(self)` - Test MHMError with custom details.\n  - `TestCustomExceptions.test_data_error(self)` - Test DataError exception.\n  - `TestCustomExceptions.test_file_operation_error(self)` - Test FileOperationError exception.\n  - `TestCustomExceptions.test_config_error(self)` - Test ConfigError exception.\n  - `TestCustomExceptions.test_validation_error(self)` - Test ValidationError exception.\n- `TestErrorHandlerDecorator` - Test the handle_errors decorator.\n  - `TestErrorHandlerDecorator.test_error_handler_success(self)` - Test error_handler with successful function.\n  - `TestErrorHandlerDecorator.test_error_handler_exception(self)` - Test error_handler with exception.\n  - `TestErrorHandlerDecorator.test_error_handler_custom_return(self)` - Test error_handler with custom return value.\n  - `TestErrorHandlerDecorator.test_error_handler_logs_error(self)` - Test error_handler logs errors.\n- `TestHandleErrorsDecorator` - Test the handle_errors decorator.\n  - `TestHandleErrorsDecorator.test_handle_errors_success(self)` - Test handle_errors with successful function.\n  - `TestHandleErrorsDecorator.test_handle_errors_exception(self)` - Test handle_errors with exception.\n  - `TestHandleErrorsDecorator.test_handle_errors_custom_return(self)` - Test handle_errors with custom return value.\n  - `TestHandleErrorsDecorator.test_handle_errors_specific_exception(self)` - Test handle_errors with specific exception handling.\n  - `TestHandleErrorsDecorator.test_handle_errors_logs_error(self)` - Test handle_errors logs errors.\n- `TestErrorHandlingFunctions` - Test specific error handling functions.\n  - `TestErrorHandlingFunctions.test_handle_file_error(self)` - Test handle_file_error function.\n  - `TestErrorHandlingFunctions.test_handle_configuration_error(self)` - Test handle_configuration_error function.\n- `TestErrorHandlingIntegration` - Test error handling integration scenarios.\n  - `TestErrorHandlingIntegration.test_error_handling_in_function_chain(self)` - Test error handling in a chain of functions.\n  - `TestErrorHandlingIntegration.test_error_handling_with_recovery(self)` - Test error handling with recovery mechanisms and real side effects.\n  - `TestErrorHandlingIntegration.test_error_handling_different_exception_types(self)` - Test error handling with different exception types and side effects.\n- `TestErrorHandlingEdgeCases` - Test error handling edge cases.\n  - `TestErrorHandlingEdgeCases.test_error_handler_with_args_kwargs(self)` - Test error_handler with function arguments.\n  - `TestErrorHandlingEdgeCases.test_handle_errors_with_args_kwargs(self)` - Test handle_errors with function arguments.\n  - `TestErrorHandlingEdgeCases.test_error_handler_nested_exceptions(self)` - Test error_handler with nested exceptions.\n  - `TestErrorHandlingEdgeCases.test_handle_errors_with_logging_disabled(self)` - Test handle_errors when logging is disabled.\n\n### tests/unit/test_file_operations.py\n**Functions:**\n- `test_load_json_data_success(self, temp_file)` - Test loading JSON data successfully.\n- `test_load_json_data_file_not_found(self)` - Test loading JSON data from non-existent file.\n- `test_load_json_data_corrupted_json(self, temp_file)` - Test loading corrupted JSON data.\n- `test_load_json_data_empty_file(self, temp_file)` - Test loading from empty file.\n- `test_save_json_data_success(self, temp_file)` - Test saving JSON data successfully.\n- `test_save_json_data_create_directory(self, test_data_dir)` - Test saving JSON data with directory creation.\n- `test_save_json_data_permission_error(self)` - Test saving JSON data with permission error.\n- `test_determine_file_path_user_file(self, test_data_dir)` - Test determining file path for user file.\n- `test_determine_file_path_default_messages(self, test_data_dir)` - Test determining file path for default messages.\n- `test_verify_file_access_success(self, temp_file)` - Test file access verification for accessible file.\n- `test_verify_file_access_missing_file(self)` - Test file access verification for missing file.\n- `test_verify_file_access_permission_error(self)` - Test file access verification with permission error.\n- `test_get_user_file_path_success(self, test_data_dir)` - Test getting user file path successfully.\n- `test_ensure_user_directory_success(self, test_data_dir)` - Test ensuring user directory exists.\n- `test_ensure_user_directory_already_exists(self, test_data_dir)` - Test ensuring user directory that already exists.\n- `test_load_json_data_unicode_content(self, temp_file)` - Test loading JSON data with unicode content.\n- `test_save_json_data_complex_objects(self, temp_file)` - Test saving JSON data with complex objects.\n- `test_determine_file_path_invalid_user_id(self)` - Test determining file path with invalid user ID.\n- `test_determine_file_path_invalid_file_type(self)` - Test determining file path with invalid file type.\n- `test_file_operations_lifecycle(self, test_data_dir, mock_config)` - Test complete file operations lifecycle using centralized utilities.\n- `test_save_large_json_data(self, temp_file)` - Test saving large JSON data with performance verification.\n- `test_load_large_json_data(self, temp_file)` - Test loading large JSON data.\n**Classes:**\n- `TestFileOperations` - Test file operations functions.\n  - `TestFileOperations.test_load_json_data_success(self, temp_file)` - Test loading JSON data successfully.\n  - `TestFileOperations.test_load_json_data_file_not_found(self)` - Test loading JSON data from non-existent file.\n  - `TestFileOperations.test_load_json_data_corrupted_json(self, temp_file)` - Test loading corrupted JSON data.\n  - `TestFileOperations.test_load_json_data_empty_file(self, temp_file)` - Test loading from empty file.\n  - `TestFileOperations.test_save_json_data_success(self, temp_file)` - Test saving JSON data successfully.\n  - `TestFileOperations.test_save_json_data_create_directory(self, test_data_dir)` - Test saving JSON data with directory creation.\n  - `TestFileOperations.test_save_json_data_permission_error(self)` - Test saving JSON data with permission error.\n  - `TestFileOperations.test_determine_file_path_user_file(self, test_data_dir)` - Test determining file path for user file.\n  - `TestFileOperations.test_determine_file_path_default_messages(self, test_data_dir)` - Test determining file path for default messages.\n  - `TestFileOperations.test_verify_file_access_success(self, temp_file)` - Test file access verification for accessible file.\n  - `TestFileOperations.test_verify_file_access_missing_file(self)` - Test file access verification for missing file.\n  - `TestFileOperations.test_verify_file_access_permission_error(self)` - Test file access verification with permission error.\n  - `TestFileOperations.test_get_user_file_path_success(self, test_data_dir)` - Test getting user file path successfully.\n  - `TestFileOperations.test_ensure_user_directory_success(self, test_data_dir)` - Test ensuring user directory exists.\n  - `TestFileOperations.test_ensure_user_directory_already_exists(self, test_data_dir)` - Test ensuring user directory that already exists.\n- `TestFileOperationsEdgeCases` - Test edge cases and error conditions.\n  - `TestFileOperationsEdgeCases.test_load_json_data_unicode_content(self, temp_file)` - Test loading JSON data with unicode content.\n  - `TestFileOperationsEdgeCases.test_save_json_data_complex_objects(self, temp_file)` - Test saving JSON data with complex objects.\n  - `TestFileOperationsEdgeCases.test_determine_file_path_invalid_user_id(self)` - Test determining file path with invalid user ID.\n  - `TestFileOperationsEdgeCases.test_determine_file_path_invalid_file_type(self)` - Test determining file path with invalid file type.\n  - `TestFileOperationsEdgeCases.test_file_operations_lifecycle(self, test_data_dir, mock_config)` - Test complete file operations lifecycle using centralized utilities.\n- `TestFileOperationsPerformance` - Test file operations performance and large data handling.\n  - `TestFileOperationsPerformance.test_save_large_json_data(self, temp_file)` - Test saving large JSON data with performance verification.\n  - `TestFileOperationsPerformance.test_load_large_json_data(self, temp_file)` - Test loading large JSON data.\n\n### tests/unit/test_user_management.py\n**Functions:**\n- `test_get_all_user_ids_empty(self, test_data_dir)` - Test getting user IDs when no users exist.\n- `test_get_all_user_ids_with_users(self, test_data_dir, mock_user_data, mock_config)` - Test getting user IDs when users exist.\n- `test_get_user_preferences_success(self, mock_user_data, mock_config)` - Test getting user preferences successfully.\n- `test_get_user_preferences_nonexistent_user(self, mock_config)` - Test getting preferences for non-existent user.\n- `test_get_user_context_success(self, mock_user_data, mock_config)` - Test getting user context successfully.\n- `test_get_user_context_nonexistent_user(self, mock_config)` - Test getting context for non-existent user.\n- `test_hybrid_get_user_data_success(self, mock_user_data, mock_config)` - Test loading user data successfully using new hybrid API.\n- `test_hybrid_get_user_data_nonexistent_user(self, mock_config)` - Test loading non-existent user data using new hybrid API.\n- `test_save_user_data_success(self, test_data_dir, mock_config)` - Test saving user data successfully using centralized utilities.\n- `test_create_user_files_success(self, test_data_dir, mock_config)` - Test creating user files successfully.\n- `test_update_user_preferences_success(self, mock_user_data, mock_config)` - Test updating user preferences successfully.\n- `test_get_user_data_account_with_chat_id(self, mock_user_data, mock_config)` - Test getting user account with chat_id field.\n- `test_get_user_data_account_nonexistent_chat_id(self, mock_config)` - Test getting user account for non-existent user.\n- `test_get_user_data_account_with_discord_id(self, mock_user_data, mock_config)` - Test getting user account with discord_user_id field.\n- `test_get_user_data_account_nonexistent_discord_id(self, mock_config)` - Test getting user account for non-existent user.\n- `test_get_user_data_account_with_email(self, test_data_dir, mock_config)` - Test getting user account with email successfully.\n- `test_get_user_data_account_nonexistent_email(self, mock_config)` - Test getting user account for non-existent user.\n- `test_get_user_preferences_corrupted_file(self, test_data_dir, mock_config)` - Test getting preferences with corrupted JSON file.\n- `test_save_user_preferences_invalid_user_id(self)` - Test saving preferences with invalid user ID.\n- `test_update_user_preferences_nonexistent_user(self, mock_config)` - Test updating preferences for non-existent user.\n- `test_user_lifecycle(self, test_data_dir, mock_config)` - Test complete user lifecycle with real side effects and system state verification.\n- `test_get_user_data_single_type(self, mock_user_data, mock_config)` - Test getting single data type using hybrid API.\n- `test_get_user_data_multiple_types(self, mock_user_data, mock_config)` - Test getting multiple data types using hybrid API.\n- `test_get_user_data_invalid_type(self, mock_user_data, mock_config)` - Test getting invalid data type using hybrid API.\n- `test_get_user_data_nonexistent_user(self, mock_config)` - Test getting data for nonexistent user using hybrid API.\n**Classes:**\n- `TestUserManagement` - Test user management functions.\n  - `TestUserManagement.test_get_all_user_ids_empty(self, test_data_dir)` - Test getting user IDs when no users exist.\n  - `TestUserManagement.test_get_all_user_ids_with_users(self, test_data_dir, mock_user_data, mock_config)` - Test getting user IDs when users exist.\n  - `TestUserManagement.test_get_user_preferences_success(self, mock_user_data, mock_config)` - Test getting user preferences successfully.\n  - `TestUserManagement.test_get_user_preferences_nonexistent_user(self, mock_config)` - Test getting preferences for non-existent user.\n  - `TestUserManagement.test_get_user_context_success(self, mock_user_data, mock_config)` - Test getting user context successfully.\n  - `TestUserManagement.test_get_user_context_nonexistent_user(self, mock_config)` - Test getting context for non-existent user.\n  - `TestUserManagement.test_hybrid_get_user_data_success(self, mock_user_data, mock_config)` - Test loading user data successfully using new hybrid API.\n  - `TestUserManagement.test_hybrid_get_user_data_nonexistent_user(self, mock_config)` - Test loading non-existent user data using new hybrid API.\n  - `TestUserManagement.test_save_user_data_success(self, test_data_dir, mock_config)` - Test saving user data successfully using centralized utilities.\n  - `TestUserManagement.test_create_user_files_success(self, test_data_dir, mock_config)` - Test creating user files successfully.\n  - `TestUserManagement.test_update_user_preferences_success(self, mock_user_data, mock_config)` - Test updating user preferences successfully.\n  - `TestUserManagement.test_get_user_data_account_with_chat_id(self, mock_user_data, mock_config)` - Test getting user account with chat_id field.\n  - `TestUserManagement.test_get_user_data_account_nonexistent_chat_id(self, mock_config)` - Test getting user account for non-existent user.\n  - `TestUserManagement.test_get_user_data_account_with_discord_id(self, mock_user_data, mock_config)` - Test getting user account with discord_user_id field.\n  - `TestUserManagement.test_get_user_data_account_nonexistent_discord_id(self, mock_config)` - Test getting user account for non-existent user.\n  - `TestUserManagement.test_get_user_data_account_with_email(self, test_data_dir, mock_config)` - Test getting user account with email successfully.\n  - `TestUserManagement.test_get_user_data_account_nonexistent_email(self, mock_config)` - Test getting user account for non-existent user.\n- `TestUserManagementEdgeCases` - Test edge cases and error conditions.\n  - `TestUserManagementEdgeCases.test_get_user_preferences_corrupted_file(self, test_data_dir, mock_config)` - Test getting preferences with corrupted JSON file.\n  - `TestUserManagementEdgeCases.test_save_user_preferences_invalid_user_id(self)` - Test saving preferences with invalid user ID.\n  - `TestUserManagementEdgeCases.test_update_user_preferences_nonexistent_user(self, mock_config)` - Test updating preferences for non-existent user.\n  - `TestUserManagementEdgeCases.test_user_lifecycle(self, test_data_dir, mock_config)` - Test complete user lifecycle with real side effects and system state verification.\n  - `TestUserManagementEdgeCases.test_get_user_data_single_type(self, mock_user_data, mock_config)` - Test getting single data type using hybrid API.\n  - `TestUserManagementEdgeCases.test_get_user_data_multiple_types(self, mock_user_data, mock_config)` - Test getting multiple data types using hybrid API.\n  - `TestUserManagementEdgeCases.test_get_user_data_invalid_type(self, mock_user_data, mock_config)` - Test getting invalid data type using hybrid API.\n  - `TestUserManagementEdgeCases.test_get_user_data_nonexistent_user(self, mock_config)` - Test getting data for nonexistent user using hybrid API.\n\n### tests/unit/test_validation.py\n**Functions:**\n- `test_is_valid_email_with_valid_emails(self)` - Test email validation with various valid email formats.\n- `test_is_valid_email_with_invalid_emails(self)` - Test email validation with various invalid email formats.\n- `test_is_valid_phone_with_valid_phones(self)` - Test phone validation with various valid phone formats.\n- `test_is_valid_phone_with_invalid_phones(self)` - Test phone validation with various invalid phone formats.\n- `test_validate_time_format_with_valid_times(self)` - Test time format validation with valid 24-hour times.\n- `test_validate_time_format_with_invalid_times(self)` - Test time format validation with invalid time formats.\n- `test_title_case_with_various_inputs(self)` - Test title case conversion with various text inputs.\n- `test_validate_user_update_account_success(self, test_data_dir)` - Test successful account update validation.\n- `test_validate_user_update_account_missing_username(self, test_data_dir)` - Test account update validation with missing internal_username.\n- `test_validate_user_update_account_invalid_status(self, test_data_dir)` - Test account update validation with invalid account status.\n- `test_validate_user_update_account_invalid_email(self, test_data_dir)` - Test account update validation with invalid email format.\n- `test_validate_user_update_preferences_success(self, test_data_dir)` - Test successful preferences update validation.\n- `test_validate_user_update_preferences_invalid_categories(self, test_data_dir)` - Test preferences update validation with invalid categories.\n- `test_validate_user_update_preferences_invalid_channel_type(self, test_data_dir)` - Test preferences update validation with invalid channel type.\n- `test_validate_user_update_context_success(self, test_data_dir)` - Test successful context update validation.\n- `test_validate_user_update_context_invalid_date(self, test_data_dir)` - Test context update validation with invalid date format.\n- `test_validate_user_update_context_invalid_custom_fields(self, test_data_dir)` - Test context update validation with invalid custom_fields type.\n- `test_validate_user_update_schedules_success(self, test_data_dir)` - Test successful schedules update validation.\n- `test_validate_user_update_schedules_invalid_time_format(self, test_data_dir)` - Test schedules update validation with invalid time format.\n- `test_validate_user_update_schedules_invalid_time_order(self, test_data_dir)` - Test schedules update validation with invalid time ordering.\n- `test_validate_user_update_schedules_invalid_days(self, test_data_dir)` - Test schedules update validation with invalid days.\n- `test_validate_schedule_periods_success(self)` - Test successful schedule periods validation.\n- `test_validate_schedule_periods_empty(self)` - Test schedule periods validation with empty periods.\n- `test_validate_schedule_periods_no_active_periods(self)` - Test schedule periods validation with no active periods.\n- `test_validate_schedule_periods_all_period_excluded(self)` - Test that ALL period is excluded from active period requirement.\n- `test_validate_schedule_periods_missing_times(self)` - Test schedule periods validation with missing start/end times.\n- `test_validate_schedule_periods_invalid_time_format(self)` - Test schedule periods validation with invalid time format.\n- `test_validate_schedule_periods_invalid_time_order(self)` - Test schedule periods validation with invalid time ordering.\n- `test_validate_schedule_periods_invalid_days_type(self)` - Test schedule periods validation with invalid days type.\n- `test_validate_schedule_periods_empty_days(self)` - Test schedule periods validation with empty days list.\n- `test_validate_schedule_periods_invalid_days(self)` - Test schedule periods validation with invalid day names.\n- `test_validate_new_user_data_success(self, test_data_dir)` - Test successful new user data validation.\n- `test_validate_new_user_data_missing_user_id(self)` - Test new user data validation with missing user_id.\n- `test_validate_new_user_data_empty_updates(self)` - Test new user data validation with empty updates.\n- `test_validate_new_user_data_user_already_exists(self, test_data_dir)` - Test new user data validation when user already exists.\n- `test_validate_new_user_data_missing_account(self)` - Test new user data validation with missing account data.\n- `test_validate_new_user_data_missing_username(self)` - Test new user data validation with missing internal_username.\n- `test_validate_new_user_data_missing_channel(self)` - Test new user data validation with missing channel.\n- `test_validate_new_user_data_invalid_channel_type(self)` - Test new user data validation with invalid channel type.\n- `test_validate_new_user_data_invalid_email(self)` - Test new user data validation with invalid email format.\n- `test_validate_new_user_data_invalid_account_status(self)` - Test new user data validation with invalid account status.\n- `test_validate_personalization_data_success(self)` - Test successful personalization data validation.\n- `test_validate_personalization_data_empty(self)` - Test personalization data validation with empty data.\n- `test_validate_personalization_data_invalid_string_fields(self)` - Test personalization data validation with invalid string field types.\n- `test_validate_personalization_data_invalid_list_fields(self)` - Test personalization data validation with invalid list field types.\n- `test_validate_personalization_data_invalid_custom_fields_type(self)` - Test personalization data validation with invalid custom_fields type.\n- `test_validate_personalization_data_invalid_custom_field_lists(self)` - Test personalization data validation with invalid custom field list types.\n- `test_validate_personalization_data_invalid_date_format(self)` - Test personalization data validation with invalid date format.\n- `test_validate_personalization_data_invalid_loved_ones_type(self)` - Test personalization data validation with invalid loved_ones type.\n- `test_validate_personalization_data_invalid_loved_one_item(self)` - Test personalization data validation with invalid loved_one item type.\n- `test_validation_functions_work_together(self, test_data_dir)` - Test that validation functions work together correctly.\n- `test_validation_error_propagation(self)` - Test that validation errors propagate correctly through the system.\n- `test_validation_with_real_file_operations(self, test_data_dir)` - Test validation with real file system operations.\n**Classes:**\n- `TestPrimitiveValidators` - Test basic validation functions with real behavior verification.\n  - `TestPrimitiveValidators.test_is_valid_email_with_valid_emails(self)` - Test email validation with various valid email formats.\n  - `TestPrimitiveValidators.test_is_valid_email_with_invalid_emails(self)` - Test email validation with various invalid email formats.\n  - `TestPrimitiveValidators.test_is_valid_phone_with_valid_phones(self)` - Test phone validation with various valid phone formats.\n  - `TestPrimitiveValidators.test_is_valid_phone_with_invalid_phones(self)` - Test phone validation with various invalid phone formats.\n  - `TestPrimitiveValidators.test_validate_time_format_with_valid_times(self)` - Test time format validation with valid 24-hour times.\n  - `TestPrimitiveValidators.test_validate_time_format_with_invalid_times(self)` - Test time format validation with invalid time formats.\n  - `TestPrimitiveValidators.test_title_case_with_various_inputs(self)` - Test title case conversion with various text inputs.\n- `TestUserUpdateValidation` - Test user update validation with real behavior verification.\n  - `TestUserUpdateValidation.test_validate_user_update_account_success(self, test_data_dir)` - Test successful account update validation.\n  - `TestUserUpdateValidation.test_validate_user_update_account_missing_username(self, test_data_dir)` - Test account update validation with missing internal_username.\n  - `TestUserUpdateValidation.test_validate_user_update_account_invalid_status(self, test_data_dir)` - Test account update validation with invalid account status.\n  - `TestUserUpdateValidation.test_validate_user_update_account_invalid_email(self, test_data_dir)` - Test account update validation with invalid email format.\n  - `TestUserUpdateValidation.test_validate_user_update_preferences_success(self, test_data_dir)` - Test successful preferences update validation.\n  - `TestUserUpdateValidation.test_validate_user_update_preferences_invalid_categories(self, test_data_dir)` - Test preferences update validation with invalid categories.\n  - `TestUserUpdateValidation.test_validate_user_update_preferences_invalid_channel_type(self, test_data_dir)` - Test preferences update validation with invalid channel type.\n  - `TestUserUpdateValidation.test_validate_user_update_context_success(self, test_data_dir)` - Test successful context update validation.\n  - `TestUserUpdateValidation.test_validate_user_update_context_invalid_date(self, test_data_dir)` - Test context update validation with invalid date format.\n  - `TestUserUpdateValidation.test_validate_user_update_context_invalid_custom_fields(self, test_data_dir)` - Test context update validation with invalid custom_fields type.\n  - `TestUserUpdateValidation.test_validate_user_update_schedules_success(self, test_data_dir)` - Test successful schedules update validation.\n  - `TestUserUpdateValidation.test_validate_user_update_schedules_invalid_time_format(self, test_data_dir)` - Test schedules update validation with invalid time format.\n  - `TestUserUpdateValidation.test_validate_user_update_schedules_invalid_time_order(self, test_data_dir)` - Test schedules update validation with invalid time ordering.\n  - `TestUserUpdateValidation.test_validate_user_update_schedules_invalid_days(self, test_data_dir)` - Test schedules update validation with invalid days.\n- `TestSchedulePeriodsValidation` - Test schedule periods validation with real behavior verification.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_success(self)` - Test successful schedule periods validation.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_empty(self)` - Test schedule periods validation with empty periods.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_no_active_periods(self)` - Test schedule periods validation with no active periods.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_all_period_excluded(self)` - Test that ALL period is excluded from active period requirement.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_missing_times(self)` - Test schedule periods validation with missing start/end times.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_invalid_time_format(self)` - Test schedule periods validation with invalid time format.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_invalid_time_order(self)` - Test schedule periods validation with invalid time ordering.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_invalid_days_type(self)` - Test schedule periods validation with invalid days type.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_empty_days(self)` - Test schedule periods validation with empty days list.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_invalid_days(self)` - Test schedule periods validation with invalid day names.\n- `TestNewUserDataValidation` - Test new user data validation with real behavior verification.\n  - `TestNewUserDataValidation.test_validate_new_user_data_success(self, test_data_dir)` - Test successful new user data validation.\n  - `TestNewUserDataValidation.test_validate_new_user_data_missing_user_id(self)` - Test new user data validation with missing user_id.\n  - `TestNewUserDataValidation.test_validate_new_user_data_empty_updates(self)` - Test new user data validation with empty updates.\n  - `TestNewUserDataValidation.test_validate_new_user_data_user_already_exists(self, test_data_dir)` - Test new user data validation when user already exists.\n  - `TestNewUserDataValidation.test_validate_new_user_data_missing_account(self)` - Test new user data validation with missing account data.\n  - `TestNewUserDataValidation.test_validate_new_user_data_missing_username(self)` - Test new user data validation with missing internal_username.\n  - `TestNewUserDataValidation.test_validate_new_user_data_missing_channel(self)` - Test new user data validation with missing channel.\n  - `TestNewUserDataValidation.test_validate_new_user_data_invalid_channel_type(self)` - Test new user data validation with invalid channel type.\n  - `TestNewUserDataValidation.test_validate_new_user_data_invalid_email(self)` - Test new user data validation with invalid email format.\n  - `TestNewUserDataValidation.test_validate_new_user_data_invalid_account_status(self)` - Test new user data validation with invalid account status.\n- `TestPersonalizationDataValidation` - Test personalization data validation with real behavior verification.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_success(self)` - Test successful personalization data validation.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_empty(self)` - Test personalization data validation with empty data.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_invalid_string_fields(self)` - Test personalization data validation with invalid string field types.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_invalid_list_fields(self)` - Test personalization data validation with invalid list field types.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_invalid_custom_fields_type(self)` - Test personalization data validation with invalid custom_fields type.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_invalid_custom_field_lists(self)` - Test personalization data validation with invalid custom field list types.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_invalid_date_format(self)` - Test personalization data validation with invalid date format.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_invalid_loved_ones_type(self)` - Test personalization data validation with invalid loved_ones type.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_invalid_loved_one_item(self)` - Test personalization data validation with invalid loved_one item type.\n- `TestValidationIntegration` - Test validation functions working together with real behavior verification.\n  - `TestValidationIntegration.test_validation_functions_work_together(self, test_data_dir)` - Test that validation functions work together correctly.\n  - `TestValidationIntegration.test_validation_error_propagation(self)` - Test that validation errors propagate correctly through the system.\n  - `TestValidationIntegration.test_validation_with_real_file_operations(self, test_data_dir)` - Test validation with real file system operations.\n\n### ui/dialogs/account_creator_dialog.py\n**Functions:**\n- `create_account_dialog(parent, communication_manager)` - Create and show the account creation dialog.\n- `__init__(self, parent, communication_manager)` - Initialize the object.\n- `load_category_widget(self)` - Load the category selection widget.\n- `load_message_service_widget(self)` - Load the message service selection widget.\n- `load_task_management_widget(self)` - Load the task management widget.\n- `load_checkin_settings_widget(self)` - Load the check-in settings widget.\n- `setup_feature_group_boxes(self)` - Setup group boxes for task management and check-ins (no longer collapsible in tab structure).\n- `setup_profile_button(self)` - Setup the profile button.\n- `center_dialog(self)` - Center the dialog on the parent window.\n- `accept(self)` - Override accept to prevent automatic dialog closing.\n- `close_dialog(self)` - Close the dialog properly.\n- `setup_connections(self)` - Setup signal connections.\n- `keyPressEvent(self, event)` - Handle key press events for the dialog.\n- `on_username_changed(self)` - Handle username change.\n- `on_preferred_name_changed(self)` - Handle preferred name change.\n- `on_category_changed(self, categories)` - Handle category selection change (no longer used - widgets don't have signals).\n\nLEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE\nTODO: Remove after confirming no code uses legacy signal-based category changes\nREMOVAL PLAN:\n1. Add usage logging to track legacy method calls\n2. Monitor app.log for legacy usage warnings for 1 week\n3. If no usage detected, remove entire method\n4. Update any remaining call sites to use modern widget-based approach\n- `on_service_changed(self, service, value)` - Handle service selection change (no longer used - widgets don't have signals).\n\nLEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE\nTODO: Remove after confirming no code uses legacy signal-based service changes\nREMOVAL PLAN:\n1. Add usage logging to track legacy method calls\n2. Monitor app.log for legacy usage warnings for 1 week\n3. If no usage detected, remove entire method\n4. Update any remaining call sites to use modern widget-based approach\n- `on_contact_info_changed(self, service, value)` - Handle contact information change (no longer used - widgets don't have signals).\n\nLEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE\nTODO: Remove after confirming no code uses legacy signal-based contact info changes\nREMOVAL PLAN:\n1. Add usage logging to track legacy method calls\n2. Monitor app.log for legacy usage warnings for 1 week\n3. If no usage detected, remove entire method\n4. Update any remaining call sites to use modern widget-based approach\n- `on_task_group_toggled(self, checked)` - Handle task management group toggle (no longer used in tab structure).\n\nLEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE\nTODO: Remove after confirming no code uses legacy group toggle approach\nREMOVAL PLAN:\n1. Add usage logging to track legacy method calls\n2. Monitor app.log for legacy usage warnings for 1 week\n3. If no usage detected, remove entire method\n4. Update any remaining call sites to use modern tab-based approach\n- `on_checkin_group_toggled(self, checked)` - Handle check-in group toggle (no longer used in tab structure).\n\nLEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE\nTODO: Remove after confirming no code uses legacy group toggle approach\nREMOVAL PLAN:\n1. Add usage logging to track legacy method calls\n2. Monitor app.log for legacy usage warnings for 1 week\n3. If no usage detected, remove entire method\n4. Update any remaining call sites to use modern tab-based approach\n- `on_feature_toggled(self, checked)` - Handle feature enablement checkbox toggles.\n- `update_tab_visibility(self)` - Update tab visibility based on feature enablement.\n- `open_personalization_dialog(self)` - Open the personalization dialog.\n- `update_profile_button_state(self)` - Update the profile button to show if profile has been configured.\n- `validate_input(self)` - Validate the input and return (is_valid, error_message).\n- `validate_and_accept(self)` - Validate input and accept the dialog.\n- `create_account(self, account_data)` - Create the user account.\n- `get_account_data(self)` - Get the account data from the form.\n- `validate_account_data(self)` - Validate the account data.\n- `on_personalization_save(data)` - No description\n**Classes:**\n- `AccountCreatorDialog` - Account creation dialog using existing UI files.\n  - `AccountCreatorDialog.__init__(self, parent, communication_manager)` - Initialize the object.\n  - `AccountCreatorDialog.load_category_widget(self)` - Load the category selection widget.\n  - `AccountCreatorDialog.load_message_service_widget(self)` - Load the message service selection widget.\n  - `AccountCreatorDialog.load_task_management_widget(self)` - Load the task management widget.\n  - `AccountCreatorDialog.load_checkin_settings_widget(self)` - Load the check-in settings widget.\n  - `AccountCreatorDialog.setup_feature_group_boxes(self)` - Setup group boxes for task management and check-ins (no longer collapsible in tab structure).\n  - `AccountCreatorDialog.setup_profile_button(self)` - Setup the profile button.\n  - `AccountCreatorDialog.center_dialog(self)` - Center the dialog on the parent window.\n  - `AccountCreatorDialog.accept(self)` - Override accept to prevent automatic dialog closing.\n  - `AccountCreatorDialog.close_dialog(self)` - Close the dialog properly.\n  - `AccountCreatorDialog.setup_connections(self)` - Setup signal connections.\n  - `AccountCreatorDialog.keyPressEvent(self, event)` - Handle key press events for the dialog.\n  - `AccountCreatorDialog.on_username_changed(self)` - Handle username change.\n  - `AccountCreatorDialog.on_preferred_name_changed(self)` - Handle preferred name change.\n  - `AccountCreatorDialog.on_category_changed(self, categories)` - Handle category selection change (no longer used - widgets don't have signals).\n\nLEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE\nTODO: Remove after confirming no code uses legacy signal-based category changes\nREMOVAL PLAN:\n1. Add usage logging to track legacy method calls\n2. Monitor app.log for legacy usage warnings for 1 week\n3. If no usage detected, remove entire method\n4. Update any remaining call sites to use modern widget-based approach\n  - `AccountCreatorDialog.on_service_changed(self, service, value)` - Handle service selection change (no longer used - widgets don't have signals).\n\nLEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE\nTODO: Remove after confirming no code uses legacy signal-based service changes\nREMOVAL PLAN:\n1. Add usage logging to track legacy method calls\n2. Monitor app.log for legacy usage warnings for 1 week\n3. If no usage detected, remove entire method\n4. Update any remaining call sites to use modern widget-based approach\n  - `AccountCreatorDialog.on_contact_info_changed(self, service, value)` - Handle contact information change (no longer used - widgets don't have signals).\n\nLEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE\nTODO: Remove after confirming no code uses legacy signal-based contact info changes\nREMOVAL PLAN:\n1. Add usage logging to track legacy method calls\n2. Monitor app.log for legacy usage warnings for 1 week\n3. If no usage detected, remove entire method\n4. Update any remaining call sites to use modern widget-based approach\n  - `AccountCreatorDialog.on_task_group_toggled(self, checked)` - Handle task management group toggle (no longer used in tab structure).\n\nLEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE\nTODO: Remove after confirming no code uses legacy group toggle approach\nREMOVAL PLAN:\n1. Add usage logging to track legacy method calls\n2. Monitor app.log for legacy usage warnings for 1 week\n3. If no usage detected, remove entire method\n4. Update any remaining call sites to use modern tab-based approach\n  - `AccountCreatorDialog.on_checkin_group_toggled(self, checked)` - Handle check-in group toggle (no longer used in tab structure).\n\nLEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE\nTODO: Remove after confirming no code uses legacy group toggle approach\nREMOVAL PLAN:\n1. Add usage logging to track legacy method calls\n2. Monitor app.log for legacy usage warnings for 1 week\n3. If no usage detected, remove entire method\n4. Update any remaining call sites to use modern tab-based approach\n  - `AccountCreatorDialog.on_feature_toggled(self, checked)` - Handle feature enablement checkbox toggles.\n  - `AccountCreatorDialog.update_tab_visibility(self)` - Update tab visibility based on feature enablement.\n  - `AccountCreatorDialog.open_personalization_dialog(self)` - Open the personalization dialog.\n  - `AccountCreatorDialog.update_profile_button_state(self)` - Update the profile button to show if profile has been configured.\n  - `AccountCreatorDialog.validate_input(self)` - Validate the input and return (is_valid, error_message).\n  - `AccountCreatorDialog.validate_and_accept(self)` - Validate input and accept the dialog.\n  - `AccountCreatorDialog.create_account(self, account_data)` - Create the user account.\n  - `AccountCreatorDialog.get_account_data(self)` - Get the account data from the form.\n  - `AccountCreatorDialog.validate_account_data(self)` - Validate the account data.\n\n### ui/dialogs/admin_panel.py\n**Functions:**\n- `__init__(self, parent)` - Initialize the AdminPanelDialog.\n\nArgs:\n    parent: Parent widget for the dialog\n- `setup_ui(self)` - Setup the UI components.\n- `get_admin_data(self)` - Get the admin panel data.\n\nReturns:\n    dict: Admin panel data (currently returns empty dict as placeholder)\n- `set_admin_data(self, data)` - Set the admin panel data.\n\nArgs:\n    data: Admin panel data to set (currently not implemented)\n**Classes:**\n- `AdminPanelDialog` - Dialog for admin panel functionality.\n  - `AdminPanelDialog.__init__(self, parent)` - Initialize the AdminPanelDialog.\n\nArgs:\n    parent: Parent widget for the dialog\n  - `AdminPanelDialog.setup_ui(self)` - Setup the UI components.\n  - `AdminPanelDialog.get_admin_data(self)` - Get the admin panel data.\n\nReturns:\n    dict: Admin panel data (currently returns empty dict as placeholder)\n  - `AdminPanelDialog.set_admin_data(self, data)` - Set the admin panel data.\n\nArgs:\n    data: Admin panel data to set (currently not implemented)\n\n### ui/dialogs/category_management_dialog.py\n**Functions:**\n- `__init__(self, parent, user_id)` - Initialize the object.\n- `load_user_category_data(self)` - Load user's current category settings\n- `on_enable_messages_toggled(self, checked)` - Handle enable automated messages checkbox toggle.\n- `save_category_settings(self)` - Save the selected categories back to user preferences\n- `get_selected_categories(self)` - No description\n- `set_selected_categories(self, categories)` - No description\n**Classes:**\n- `CategoryManagementDialog` - No description\n  - `CategoryManagementDialog.__init__(self, parent, user_id)` - Initialize the object.\n  - `CategoryManagementDialog.load_user_category_data(self)` - Load user's current category settings\n  - `CategoryManagementDialog.on_enable_messages_toggled(self, checked)` - Handle enable automated messages checkbox toggle.\n  - `CategoryManagementDialog.save_category_settings(self)` - Save the selected categories back to user preferences\n  - `CategoryManagementDialog.get_selected_categories(self)` - No description\n  - `CategoryManagementDialog.set_selected_categories(self, categories)` - No description\n\n### ui/dialogs/channel_management_dialog.py\n**Functions:**\n- `__init__(self, parent, user_id)` - Initialize the object.\n- `save_channel_settings(self)` - No description\n- `get_selected_channel(self)` - No description\n- `set_selected_channel(self, channel, value)` - No description\n**Classes:**\n- `ChannelManagementDialog` - No description\n  - `ChannelManagementDialog.__init__(self, parent, user_id)` - Initialize the object.\n  - `ChannelManagementDialog.save_channel_settings(self)` - No description\n  - `ChannelManagementDialog.get_selected_channel(self)` - No description\n  - `ChannelManagementDialog.set_selected_channel(self, channel, value)` - No description\n\n### ui/dialogs/checkin_management_dialog.py\n**Functions:**\n- `__init__(self, parent, user_id)` - Initialize the object.\n- `on_enable_checkins_toggled(self, checked)` - No description\n- `load_user_checkin_data(self)` - Load the user's current check-in settings\n- `save_checkin_settings(self)` - Save the check-in settings back to user preferences\n- `get_checkin_settings(self)` - Get the current check-in settings.\n- `set_checkin_settings(self, settings)` - Set the check-in settings.\n**Classes:**\n- `CheckinManagementDialog` - Dialog for managing check-in settings.\n  - `CheckinManagementDialog.__init__(self, parent, user_id)` - Initialize the object.\n  - `CheckinManagementDialog.on_enable_checkins_toggled(self, checked)` - No description\n  - `CheckinManagementDialog.load_user_checkin_data(self)` - Load the user's current check-in settings\n  - `CheckinManagementDialog.save_checkin_settings(self)` - Save the check-in settings back to user preferences\n  - `CheckinManagementDialog.get_checkin_settings(self)` - Get the current check-in settings.\n  - `CheckinManagementDialog.set_checkin_settings(self, settings)` - Set the check-in settings.\n\n### ui/dialogs/schedule_editor_dialog.py\n**Functions:**\n- `open_schedule_editor(parent, user_id, category, on_save)` - Open the schedule editor dialog.\n- `__init__(self, parent, user_id, category, on_save)` - Initialize the object.\n- `center_dialog(self)` - Center the dialog on the parent window.\n- `setup_functionality(self)` - Setup the functionality and connect signals.\n- `load_existing_data(self)` - Load existing schedule data using the new reusable function.\n- `add_new_period(self, period_name, period_data)` - Add a new period row using the PeriodRowWidget.\n- `resort_period_widgets(self)` - Re-sort the period widgets to maintain proper order (ALL at bottom).\n- `find_lowest_available_period_number(self)` - Find the lowest available number for new period names.\n- `remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n- `undo_last_delete(self)` - Undo the last deletion.\n- `collect_period_data(self)` - Collect period data using the new reusable function.\n- `handle_save(self)` - Handle save button click - prevents dialog closure on validation errors.\n- `save_schedule(self)` - Save the schedule data.\n- `cancel(self)` - Cancel the dialog.\n- `get_schedule_data(self)` - Get the current schedule data.\n- `set_schedule_data(self, data)` - Set the schedule data.\n- `sort_key(widget)` - No description\n**Classes:**\n- `ScheduleEditorDialog` - Dialog for editing schedules.\n  - `ScheduleEditorDialog.__init__(self, parent, user_id, category, on_save)` - Initialize the object.\n  - `ScheduleEditorDialog.center_dialog(self)` - Center the dialog on the parent window.\n  - `ScheduleEditorDialog.setup_functionality(self)` - Setup the functionality and connect signals.\n  - `ScheduleEditorDialog.load_existing_data(self)` - Load existing schedule data using the new reusable function.\n  - `ScheduleEditorDialog.add_new_period(self, period_name, period_data)` - Add a new period row using the PeriodRowWidget.\n  - `ScheduleEditorDialog.resort_period_widgets(self)` - Re-sort the period widgets to maintain proper order (ALL at bottom).\n  - `ScheduleEditorDialog.find_lowest_available_period_number(self)` - Find the lowest available number for new period names.\n  - `ScheduleEditorDialog.remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n  - `ScheduleEditorDialog.undo_last_delete(self)` - Undo the last deletion.\n  - `ScheduleEditorDialog.collect_period_data(self)` - Collect period data using the new reusable function.\n  - `ScheduleEditorDialog.handle_save(self)` - Handle save button click - prevents dialog closure on validation errors.\n  - `ScheduleEditorDialog.save_schedule(self)` - Save the schedule data.\n  - `ScheduleEditorDialog.cancel(self)` - Cancel the dialog.\n  - `ScheduleEditorDialog.get_schedule_data(self)` - Get the current schedule data.\n  - `ScheduleEditorDialog.set_schedule_data(self, data)` - Set the schedule data.\n\n### ui/dialogs/task_completion_dialog.py\n**Functions:**\n- `__init__(self, parent, task_title)` - Initialize the task completion dialog.\n- `setup_ui(self)` - Setup the UI components.\n- `setup_completion_time_components(self)` - Setup the completion time input components.\n- `setup_connections(self)` - Setup signal connections.\n- `get_completion_date(self)` - Get completion date as string.\n- `get_completion_time(self)` - Get completion time as 24-hour format string.\n- `get_completion_notes(self)` - Get completion notes.\n- `get_completion_data(self)` - Get all completion data as a dictionary.\n**Classes:**\n- `TaskCompletionDialog` - Dialog for specifying task completion details.\n  - `TaskCompletionDialog.__init__(self, parent, task_title)` - Initialize the task completion dialog.\n  - `TaskCompletionDialog.setup_ui(self)` - Setup the UI components.\n  - `TaskCompletionDialog.setup_completion_time_components(self)` - Setup the completion time input components.\n  - `TaskCompletionDialog.setup_connections(self)` - Setup signal connections.\n  - `TaskCompletionDialog.get_completion_date(self)` - Get completion date as string.\n  - `TaskCompletionDialog.get_completion_time(self)` - Get completion time as 24-hour format string.\n  - `TaskCompletionDialog.get_completion_notes(self)` - Get completion notes.\n  - `TaskCompletionDialog.get_completion_data(self)` - Get all completion data as a dictionary.\n\n### ui/dialogs/task_crud_dialog.py\n**Functions:**\n- `__init__(self, parent, user_id)` - Initialize the task CRUD dialog.\n- `setup_ui(self)` - Setup the UI components.\n- `setup_connections(self)` - Setup signal connections.\n- `load_data(self)` - Load all task data and update displays.\n- `refresh_active_tasks(self)` - Refresh the active tasks table.\n- `refresh_completed_tasks(self)` - Refresh the completed tasks table.\n- `update_statistics(self)` - Update the statistics display.\n- `get_selected_task_id(self, table)` - Get the task ID of the selected row in the given table.\n- `add_new_task(self)` - Open dialog to add a new task.\n- `edit_selected_task(self)` - Edit the selected task.\n- `complete_selected_task(self)` - Mark the selected task as completed.\n- `delete_selected_task(self)` - Delete the selected task.\n- `restore_selected_task(self)` - Restore a completed task to active status.\n- `delete_completed_task(self)` - Permanently delete a completed task.\n**Classes:**\n- `TaskCrudDialog` - Dialog for full CRUD operations on tasks.\n  - `TaskCrudDialog.__init__(self, parent, user_id)` - Initialize the task CRUD dialog.\n  - `TaskCrudDialog.setup_ui(self)` - Setup the UI components.\n  - `TaskCrudDialog.setup_connections(self)` - Setup signal connections.\n  - `TaskCrudDialog.load_data(self)` - Load all task data and update displays.\n  - `TaskCrudDialog.refresh_active_tasks(self)` - Refresh the active tasks table.\n  - `TaskCrudDialog.refresh_completed_tasks(self)` - Refresh the completed tasks table.\n  - `TaskCrudDialog.update_statistics(self)` - Update the statistics display.\n  - `TaskCrudDialog.get_selected_task_id(self, table)` - Get the task ID of the selected row in the given table.\n  - `TaskCrudDialog.add_new_task(self)` - Open dialog to add a new task.\n  - `TaskCrudDialog.edit_selected_task(self)` - Edit the selected task.\n  - `TaskCrudDialog.complete_selected_task(self)` - Mark the selected task as completed.\n  - `TaskCrudDialog.delete_selected_task(self)` - Delete the selected task.\n  - `TaskCrudDialog.restore_selected_task(self)` - Restore a completed task to active status.\n  - `TaskCrudDialog.delete_completed_task(self)` - Permanently delete a completed task.\n\n### ui/dialogs/task_edit_dialog.py\n**Functions:**\n- `__init__(self, parent, user_id, task_data)` - Initialize the task edit dialog.\n- `setup_ui(self)` - Setup the UI components.\n- `setup_due_time_components(self)` - Setup the due time input components.\n- `on_hour_changed(self, hour_text)` - Handle hour selection change.\n- `on_minute_changed(self, minute_text)` - Handle minute selection change.\n- `setup_connections(self)` - Setup signal connections.\n- `load_task_data(self)` - Load existing task data into the form.\n- `set_due_time_from_24h(self, time)` - Set due time components from 24-hour time.\n- `get_due_time_as_24h(self)` - Get due time as 24-hour format string.\n- `add_reminder_period(self)` - Add a new reminder period.\n- `render_reminder_periods(self)` - Render the reminder periods in the UI.\n- `render_reminder_period_row(self, index, period)` - Render a single reminder period row.\n- `delete_reminder_period(self, index)` - Delete a reminder period.\n- `validate_form(self)` - Validate the form data.\n- `collect_reminder_periods(self)` - Collect reminder period data from the UI.\n- `collect_quick_reminders(self)` - Collect quick reminder options.\n- `collect_selected_tags(self)` - Collect selected tags from the tag widget.\n- `save_task(self)` - Save the task data.\n**Classes:**\n- `TaskEditDialog` - Dialog for creating or editing tasks.\n  - `TaskEditDialog.__init__(self, parent, user_id, task_data)` - Initialize the task edit dialog.\n  - `TaskEditDialog.setup_ui(self)` - Setup the UI components.\n  - `TaskEditDialog.setup_due_time_components(self)` - Setup the due time input components.\n  - `TaskEditDialog.on_hour_changed(self, hour_text)` - Handle hour selection change.\n  - `TaskEditDialog.on_minute_changed(self, minute_text)` - Handle minute selection change.\n  - `TaskEditDialog.setup_connections(self)` - Setup signal connections.\n  - `TaskEditDialog.load_task_data(self)` - Load existing task data into the form.\n  - `TaskEditDialog.set_due_time_from_24h(self, time)` - Set due time components from 24-hour time.\n  - `TaskEditDialog.get_due_time_as_24h(self)` - Get due time as 24-hour format string.\n  - `TaskEditDialog.add_reminder_period(self)` - Add a new reminder period.\n  - `TaskEditDialog.render_reminder_periods(self)` - Render the reminder periods in the UI.\n  - `TaskEditDialog.render_reminder_period_row(self, index, period)` - Render a single reminder period row.\n  - `TaskEditDialog.delete_reminder_period(self, index)` - Delete a reminder period.\n  - `TaskEditDialog.validate_form(self)` - Validate the form data.\n  - `TaskEditDialog.collect_reminder_periods(self)` - Collect reminder period data from the UI.\n  - `TaskEditDialog.collect_quick_reminders(self)` - Collect quick reminder options.\n  - `TaskEditDialog.collect_selected_tags(self)` - Collect selected tags from the tag widget.\n  - `TaskEditDialog.save_task(self)` - Save the task data.\n\n### ui/dialogs/task_management_dialog.py\n**Functions:**\n- `__init__(self, parent, user_id)` - Initialize the object.\n- `on_enable_task_management_toggled(self, checked)` - No description\n- `save_task_settings(self)` - Save the task settings.\n- `get_statistics(self)` - No description\n**Classes:**\n- `TaskManagementDialog` - No description\n  - `TaskManagementDialog.__init__(self, parent, user_id)` - Initialize the object.\n  - `TaskManagementDialog.on_enable_task_management_toggled(self, checked)` - No description\n  - `TaskManagementDialog.save_task_settings(self)` - Save the task settings.\n  - `TaskManagementDialog.get_statistics(self)` - No description\n\n### ui/dialogs/user_profile_dialog.py\n**Functions:**\n- `open_personalization_dialog(parent, user_id, on_save, existing_data)` - Open the personalization dialog.\n\nArgs:\n    parent: Parent widget\n    user_id: User ID for the personalization data\n    on_save: Optional callback function to call when saving\n    existing_data: Optional existing personalization data\n    \nReturns:\n    QDialog.DialogCode: Dialog result code\n- `__init__(self, parent, user_id, on_save, existing_data)` - Initialize the object.\n- `center_dialog(self)` - Center the dialog on the parent window.\n- `setup_ui(self)` - Setup the user interface.\n- `keyPressEvent(self, event)` - Handle key press events for the dialog.\n- `create_custom_field_list(self, parent_layout, predefined_values, existing_values, label_text)` - Creates a multi-column list with preset items (checkbox + label) and custom fields (checkbox + entry + delete).\n- `add_custom_field(self, parent_layout, field_type, value, checked)` - Add a custom field row with checkbox, entry, and delete button.\n- `remove_custom_field(self, field_frame)` - Remove a custom field from the layout.\n- `create_health_section(self)` - Create the health section of the personalization dialog.\n\nReturns:\n    QGroupBox: Health section group box\n- `create_loved_ones_section(self)` - Create the loved ones section of the personalization dialog.\n\nReturns:\n    QGroupBox: Loved ones section group box\n- `add_loved_one_widget(self, parent_layout, loved_one_data)` - Add a loved one widget to the layout.\n\nArgs:\n    parent_layout: Parent layout to add the widget to\n    loved_one_data: Optional existing loved one data\n- `remove_loved_one_widget(self, frame)` - Remove a loved one widget from the layout.\n\nArgs:\n    frame: Frame widget to remove\n- `create_interests_section(self)` - Create the interests section of the personalization dialog.\n\nReturns:\n    QGroupBox: Interests section group box\n- `create_notes_section(self)` - Create the notes section of the personalization dialog.\n\nReturns:\n    QGroupBox: Notes section group box\n- `create_goals_section(self)` - Create the goals section of the personalization dialog.\n\nReturns:\n    QGroupBox: Goals section group box\n- `collect_custom_field_data(self, group_box)` - Collect data from custom field checkboxes and entries.\n\nArgs:\n    group_box: Group box containing custom fields\n    \nReturns:\n    list: List of selected values from checkboxes and custom entries\n- `collect_loved_ones_data(self)` - Collect data from loved ones widgets.\n\nReturns:\n    list: List of loved ones data dictionaries\n- `save_personalization(self)` - Save the personalization data.\n- `cancel(self)` - Cancel the personalization dialog.\n- `title_case(s)` - Convert snake_case or lowercase to Title Case.\n\nArgs:\n    s: String to convert to title case\n    \nReturns:\n    str: String converted to title case\n**Classes:**\n- `UserProfileDialog` - PySide6-based personalization dialog for user account creation and management.\n  - `UserProfileDialog.__init__(self, parent, user_id, on_save, existing_data)` - Initialize the object.\n  - `UserProfileDialog.center_dialog(self)` - Center the dialog on the parent window.\n  - `UserProfileDialog.setup_ui(self)` - Setup the user interface.\n  - `UserProfileDialog.keyPressEvent(self, event)` - Handle key press events for the dialog.\n  - `UserProfileDialog.create_custom_field_list(self, parent_layout, predefined_values, existing_values, label_text)` - Creates a multi-column list with preset items (checkbox + label) and custom fields (checkbox + entry + delete).\n  - `UserProfileDialog.add_custom_field(self, parent_layout, field_type, value, checked)` - Add a custom field row with checkbox, entry, and delete button.\n  - `UserProfileDialog.remove_custom_field(self, field_frame)` - Remove a custom field from the layout.\n  - `UserProfileDialog.create_health_section(self)` - Create the health section of the personalization dialog.\n\nReturns:\n    QGroupBox: Health section group box\n  - `UserProfileDialog.create_loved_ones_section(self)` - Create the loved ones section of the personalization dialog.\n\nReturns:\n    QGroupBox: Loved ones section group box\n  - `UserProfileDialog.add_loved_one_widget(self, parent_layout, loved_one_data)` - Add a loved one widget to the layout.\n\nArgs:\n    parent_layout: Parent layout to add the widget to\n    loved_one_data: Optional existing loved one data\n  - `UserProfileDialog.remove_loved_one_widget(self, frame)` - Remove a loved one widget from the layout.\n\nArgs:\n    frame: Frame widget to remove\n  - `UserProfileDialog.create_interests_section(self)` - Create the interests section of the personalization dialog.\n\nReturns:\n    QGroupBox: Interests section group box\n  - `UserProfileDialog.create_notes_section(self)` - Create the notes section of the personalization dialog.\n\nReturns:\n    QGroupBox: Notes section group box\n  - `UserProfileDialog.create_goals_section(self)` - Create the goals section of the personalization dialog.\n\nReturns:\n    QGroupBox: Goals section group box\n  - `UserProfileDialog.collect_custom_field_data(self, group_box)` - Collect data from custom field checkboxes and entries.\n\nArgs:\n    group_box: Group box containing custom fields\n    \nReturns:\n    list: List of selected values from checkboxes and custom entries\n  - `UserProfileDialog.collect_loved_ones_data(self)` - Collect data from loved ones widgets.\n\nReturns:\n    list: List of loved ones data dictionaries\n  - `UserProfileDialog.save_personalization(self)` - Save the personalization data.\n  - `UserProfileDialog.cancel(self)` - Cancel the personalization dialog.\n\n### ui/generated/account_creator_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog_create_account)` - Auto-generated Qt UI setup function for account_creator_dialog.\n- `retranslateUi(self, Dialog_create_account)` - Auto-generated Qt UI translation function for account_creator_dialog.\n**Classes:**\n- `Ui_Dialog_create_account` - No description\n  - `Ui_Dialog_create_account.setupUi(self, Dialog_create_account)` - Auto-generated Qt UI setup function for account_creator_dialog.\n  - `Ui_Dialog_create_account.retranslateUi(self, Dialog_create_account)` - Auto-generated Qt UI translation function for account_creator_dialog.\n\n### ui/generated/admin_panel_pyqt.py\n**Functions:**\n- `setupUi(self, ui_app_mainwindow)` - No description\n- `retranslateUi(self, ui_app_mainwindow)` - No description\n**Classes:**\n- `Ui_ui_app_mainwindow` - No description\n  - `Ui_ui_app_mainwindow.setupUi(self, ui_app_mainwindow)` - No description\n  - `Ui_ui_app_mainwindow.retranslateUi(self, ui_app_mainwindow)` - No description\n\n### ui/generated/category_management_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog_category_management)` - Auto-generated Qt UI setup function for category_management_dialog.\n- `retranslateUi(self, Dialog_category_management)` - Auto-generated Qt UI translation function for category_management_dialog.\n**Classes:**\n- `Ui_Dialog_category_management` - No description\n  - `Ui_Dialog_category_management.setupUi(self, Dialog_category_management)` - Auto-generated Qt UI setup function for category_management_dialog.\n  - `Ui_Dialog_category_management.retranslateUi(self, Dialog_category_management)` - Auto-generated Qt UI translation function for category_management_dialog.\n\n### ui/generated/category_selection_widget_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Form_category_selection_widget)` - Auto-generated Qt UI setup function for category_selection_widget.\n- `retranslateUi(self, Form_category_selection_widget)` - Auto-generated Qt UI translation function for category_selection_widget.\n**Classes:**\n- `Ui_Form_category_selection_widget` - No description\n  - `Ui_Form_category_selection_widget.setupUi(self, Form_category_selection_widget)` - Auto-generated Qt UI setup function for category_selection_widget.\n  - `Ui_Form_category_selection_widget.retranslateUi(self, Form_category_selection_widget)` - Auto-generated Qt UI translation function for category_selection_widget.\n\n### ui/generated/channel_management_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog)` - Auto-generated Qt UI setup function for channel_management_dialog.\n- `retranslateUi(self, Dialog)` - Auto-generated Qt UI translation function for channel_management_dialog.\n**Classes:**\n- `Ui_Dialog` - No description\n  - `Ui_Dialog.setupUi(self, Dialog)` - Auto-generated Qt UI setup function for channel_management_dialog.\n  - `Ui_Dialog.retranslateUi(self, Dialog)` - Auto-generated Qt UI translation function for channel_management_dialog.\n\n### ui/generated/channel_selection_widget_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Form_channel_selection)` - Auto-generated Qt UI setup function for channel_selection_widget.\n- `retranslateUi(self, Form_channel_selection)` - Auto-generated Qt UI translation function for channel_selection_widget.\n**Classes:**\n- `Ui_Form_channel_selection` - No description\n  - `Ui_Form_channel_selection.setupUi(self, Form_channel_selection)` - Auto-generated Qt UI setup function for channel_selection_widget.\n  - `Ui_Form_channel_selection.retranslateUi(self, Form_channel_selection)` - Auto-generated Qt UI translation function for channel_selection_widget.\n\n### ui/generated/checkin_element_template_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Form_checkin_element_template)` - Auto-generated Qt UI setup function for checkin_element_template.\n- `retranslateUi(self, Form_checkin_element_template)` - Auto-generated Qt UI translation function for checkin_element_template.\n**Classes:**\n- `Ui_Form_checkin_element_template` - No description\n  - `Ui_Form_checkin_element_template.setupUi(self, Form_checkin_element_template)` - Auto-generated Qt UI setup function for checkin_element_template.\n  - `Ui_Form_checkin_element_template.retranslateUi(self, Form_checkin_element_template)` - Auto-generated Qt UI translation function for checkin_element_template.\n\n### ui/generated/checkin_management_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog_checkin_management)` - Auto-generated Qt UI setup function for checkin_management_dialog.\n- `retranslateUi(self, Dialog_checkin_management)` - Auto-generated Qt UI translation function for checkin_management_dialog.\n**Classes:**\n- `Ui_Dialog_checkin_management` - No description\n  - `Ui_Dialog_checkin_management.setupUi(self, Dialog_checkin_management)` - Auto-generated Qt UI setup function for checkin_management_dialog.\n  - `Ui_Dialog_checkin_management.retranslateUi(self, Dialog_checkin_management)` - Auto-generated Qt UI translation function for checkin_management_dialog.\n\n### ui/generated/checkin_settings_widget_pyqt.py\n**Functions:**\n- `setupUi(self, Form_checkin_settings)` - Auto-generated Qt UI setup function for checkin_settings_widget.\n- `retranslateUi(self, Form_checkin_settings)` - Auto-generated Qt UI translation function for checkin_settings_widget.\n**Classes:**\n- `Ui_Form_checkin_settings` - No description\n  - `Ui_Form_checkin_settings.setupUi(self, Form_checkin_settings)` - Auto-generated Qt UI setup function for checkin_settings_widget.\n  - `Ui_Form_checkin_settings.retranslateUi(self, Form_checkin_settings)` - Auto-generated Qt UI translation function for checkin_settings_widget.\n\n### ui/generated/dynamic_list_field_template_pyqt.py\n**Functions:**\n- `setupUi(self, Form_dynamic_list_field_template)` - Auto-generated Qt UI setup function for dynamic_list_field_template.\n- `retranslateUi(self, Form_dynamic_list_field_template)` - Auto-generated Qt UI translation function for dynamic_list_field_template.\n**Classes:**\n- `Ui_Form_dynamic_list_field_template` - No description\n  - `Ui_Form_dynamic_list_field_template.setupUi(self, Form_dynamic_list_field_template)` - Auto-generated Qt UI setup function for dynamic_list_field_template.\n  - `Ui_Form_dynamic_list_field_template.retranslateUi(self, Form_dynamic_list_field_template)` - Auto-generated Qt UI translation function for dynamic_list_field_template.\n\n### ui/generated/period_row_template_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Form_period_row_template)` - Auto-generated Qt UI setup function for period_row_template.\n- `retranslateUi(self, Form_period_row_template)` - Auto-generated Qt UI translation function for period_row_template.\n**Classes:**\n- `Ui_Form_period_row_template` - No description\n  - `Ui_Form_period_row_template.setupUi(self, Form_period_row_template)` - Auto-generated Qt UI setup function for period_row_template.\n  - `Ui_Form_period_row_template.retranslateUi(self, Form_period_row_template)` - Auto-generated Qt UI translation function for period_row_template.\n\n### ui/generated/schedule_editor_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog_edit_schedule)` - Auto-generated Qt UI setup function for schedule_editor_dialog.\n- `retranslateUi(self, Dialog_edit_schedule)` - Auto-generated Qt UI translation function for schedule_editor_dialog.\n**Classes:**\n- `Ui_Dialog_edit_schedule` - No description\n  - `Ui_Dialog_edit_schedule.setupUi(self, Dialog_edit_schedule)` - Auto-generated Qt UI setup function for schedule_editor_dialog.\n  - `Ui_Dialog_edit_schedule.retranslateUi(self, Dialog_edit_schedule)` - Auto-generated Qt UI translation function for schedule_editor_dialog.\n\n### ui/generated/tag_widget_pyqt.py\n**Functions:**\n- `setupUi(self, Widget_tag)` - No description\n- `retranslateUi(self, Widget_tag)` - No description\n**Classes:**\n- `Ui_Widget_tag` - No description\n  - `Ui_Widget_tag.setupUi(self, Widget_tag)` - No description\n  - `Ui_Widget_tag.retranslateUi(self, Widget_tag)` - No description\n\n### ui/generated/task_completion_dialog_pyqt.py\n**Functions:**\n- `setupUi(self, Dialog_task_completion)` - No description\n- `retranslateUi(self, Dialog_task_completion)` - No description\n**Classes:**\n- `Ui_Dialog_task_completion` - No description\n  - `Ui_Dialog_task_completion.setupUi(self, Dialog_task_completion)` - No description\n  - `Ui_Dialog_task_completion.retranslateUi(self, Dialog_task_completion)` - No description\n\n### ui/generated/task_crud_dialog_pyqt.py\n**Functions:**\n- `setupUi(self, Dialog_task_crud)` - No description\n- `retranslateUi(self, Dialog_task_crud)` - No description\n**Classes:**\n- `Ui_Dialog_task_crud` - No description\n  - `Ui_Dialog_task_crud.setupUi(self, Dialog_task_crud)` - No description\n  - `Ui_Dialog_task_crud.retranslateUi(self, Dialog_task_crud)` - No description\n\n### ui/generated/task_edit_dialog_pyqt.py\n**Functions:**\n- `setupUi(self, Dialog_task_edit)` - No description\n- `retranslateUi(self, Dialog_task_edit)` - No description\n**Classes:**\n- `Ui_Dialog_task_edit` - No description\n  - `Ui_Dialog_task_edit.setupUi(self, Dialog_task_edit)` - No description\n  - `Ui_Dialog_task_edit.retranslateUi(self, Dialog_task_edit)` - No description\n\n### ui/generated/task_management_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog_task_management)` - Auto-generated Qt UI setup function for task_management_dialog.\n- `retranslateUi(self, Dialog_task_management)` - Auto-generated Qt UI translation function for task_management_dialog.\n**Classes:**\n- `Ui_Dialog_task_management` - No description\n  - `Ui_Dialog_task_management.setupUi(self, Dialog_task_management)` - Auto-generated Qt UI setup function for task_management_dialog.\n  - `Ui_Dialog_task_management.retranslateUi(self, Dialog_task_management)` - Auto-generated Qt UI translation function for task_management_dialog.\n\n### ui/generated/task_settings_widget_pyqt.py\n**Functions:**\n- `setupUi(self, Form_task_settings)` - No description\n- `retranslateUi(self, Form_task_settings)` - No description\n**Classes:**\n- `Ui_Form_task_settings` - No description\n  - `Ui_Form_task_settings.setupUi(self, Form_task_settings)` - No description\n  - `Ui_Form_task_settings.retranslateUi(self, Form_task_settings)` - No description\n\n### ui/generated/user_profile_management_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog_user_profile)` - Auto-generated Qt UI setup function for user_profile_management_dialog.\n- `retranslateUi(self, Dialog_user_profile)` - Auto-generated Qt UI translation function for user_profile_management_dialog.\n**Classes:**\n- `Ui_Dialog_user_profile` - No description\n  - `Ui_Dialog_user_profile.setupUi(self, Dialog_user_profile)` - Auto-generated Qt UI setup function for user_profile_management_dialog.\n  - `Ui_Dialog_user_profile.retranslateUi(self, Dialog_user_profile)` - Auto-generated Qt UI translation function for user_profile_management_dialog.\n\n### ui/generated/user_profile_settings_widget_pyqt.py\n**Functions:**\n- `setupUi(self, Form_user_profile_settings)` - Auto-generated Qt UI setup function for user_profile_settings_widget.\n- `retranslateUi(self, Form_user_profile_settings)` - Auto-generated Qt UI translation function for user_profile_settings_widget.\n**Classes:**\n- `Ui_Form_user_profile_settings` - No description\n  - `Ui_Form_user_profile_settings.setupUi(self, Form_user_profile_settings)` - Auto-generated Qt UI setup function for user_profile_settings_widget.\n  - `Ui_Form_user_profile_settings.retranslateUi(self, Form_user_profile_settings)` - Auto-generated Qt UI translation function for user_profile_settings_widget.\n\n### ui/ui_app_qt.py\n**Functions:**\n- `main()` - Main entry point for the Qt-based UI application\n- `__init__(self)` - Initialize the object.\n- `validate_configuration_before_start(self)` - Validate configuration before attempting to start the service.\n- `is_service_running(self)` - Check if the MHM service is running\n- `start_service(self)` - Start the MHM backend service\n- `stop_service(self)` - Stop the MHM backend service\n- `restart_service(self)` - Restart the MHM backend service\n- `__init__(self)` - Initialize the object.\n- `load_ui(self)` - Load the UI from the .ui file\n- `load_theme(self)` - Load and apply the QSS theme from the styles directory\n- `connect_signals(self)` - Connect UI signals to slots\n- `initialize_ui(self)` - Initialize the UI state\n- `update_user_index_on_startup(self)` - Automatically update the user index when the admin panel starts\n- `update_service_status(self)` - Update the service status display\n- `start_service(self)` - Start the MHM service\n- `stop_service(self)` - Stop the MHM service\n- `restart_service(self)` - Restart the MHM service\n- `refresh_user_list(self)` - Refresh the user list in the combo box using user index\n- `on_user_selected(self, user_display)` - Handle user selection from combo box\n- `load_user_categories(self, user_id)` - Load categories for the selected user\n- `on_category_selected(self, category)` - Handle category selection\n- `enable_content_management(self)` - Enable content management buttons\n- `disable_content_management(self)` - Disable content management buttons\n- `create_new_user(self)` - Open dialog to create a new user\n- `manage_communication_settings(self)` - No description\n- `manage_categories(self)` - No description\n- `manage_checkins(self)` - No description\n- `manage_tasks(self)` - No description\n- `manage_task_crud(self)` - No description\n- `manage_personalization(self)` - No description\n- `edit_user_messages(self)` - Open message editing interface for selected user\n- `open_message_editor(self, parent_dialog, category)` - Open the message editing window for a specific category\n- `edit_user_schedules(self)` - Open schedule editing interface for selected user\n- `open_schedule_editor(self, parent_dialog, category)` - Open the schedule editing window for a specific category\n- `send_test_message(self)` - Send a test message to the selected user\n- `confirm_test_message(self, category)` - Confirm and send test message\n- `send_actual_test_message(self, category)` - Send a test message via the running service\n- `toggle_logging_verbosity(self)` - Toggle logging verbosity and update menu.\n- `view_log_file(self)` - Open the log file in the default text editor.\n- `view_cache_status(self)` - Show cache cleanup status and information.\n- `force_clean_cache(self)` - Force cache cleanup regardless of schedule.\n- `validate_configuration(self)` - Show detailed configuration validation report.\n- `show_configuration_help(self, parent_window)` - Show help for fixing configuration issues.\n- `view_all_users_summary(self)` - Show a summary of all users in the system.\n- `system_health_check(self)` - Perform a basic system health check.\n- `closeEvent(self, event)` - Handle window close event\n- `shutdown_ui_components(self, communication_manager)` - Shutdown any UI-created components gracefully\n- `cleanup_old_requests()` - No description\n- `on_save(data)` - No description\n- `on_schedule_save()` - Callback when schedule is saved.\n**Classes:**\n- `ServiceManager` - Manages the MHM backend service process\n  - `ServiceManager.__init__(self)` - Initialize the object.\n  - `ServiceManager.validate_configuration_before_start(self)` - Validate configuration before attempting to start the service.\n  - `ServiceManager.is_service_running(self)` - Check if the MHM service is running\n  - `ServiceManager.start_service(self)` - Start the MHM backend service\n  - `ServiceManager.stop_service(self)` - Stop the MHM backend service\n  - `ServiceManager.restart_service(self)` - Restart the MHM backend service\n- `MHMManagerUI` - Main MHM Management UI using PySide6\n  - `MHMManagerUI.__init__(self)` - Initialize the object.\n  - `MHMManagerUI.load_ui(self)` - Load the UI from the .ui file\n  - `MHMManagerUI.load_theme(self)` - Load and apply the QSS theme from the styles directory\n  - `MHMManagerUI.connect_signals(self)` - Connect UI signals to slots\n  - `MHMManagerUI.initialize_ui(self)` - Initialize the UI state\n  - `MHMManagerUI.update_user_index_on_startup(self)` - Automatically update the user index when the admin panel starts\n  - `MHMManagerUI.update_service_status(self)` - Update the service status display\n  - `MHMManagerUI.start_service(self)` - Start the MHM service\n  - `MHMManagerUI.stop_service(self)` - Stop the MHM service\n  - `MHMManagerUI.restart_service(self)` - Restart the MHM service\n  - `MHMManagerUI.refresh_user_list(self)` - Refresh the user list in the combo box using user index\n  - `MHMManagerUI.on_user_selected(self, user_display)` - Handle user selection from combo box\n  - `MHMManagerUI.load_user_categories(self, user_id)` - Load categories for the selected user\n  - `MHMManagerUI.on_category_selected(self, category)` - Handle category selection\n  - `MHMManagerUI.enable_content_management(self)` - Enable content management buttons\n  - `MHMManagerUI.disable_content_management(self)` - Disable content management buttons\n  - `MHMManagerUI.create_new_user(self)` - Open dialog to create a new user\n  - `MHMManagerUI.manage_communication_settings(self)` - No description\n  - `MHMManagerUI.manage_categories(self)` - No description\n  - `MHMManagerUI.manage_checkins(self)` - No description\n  - `MHMManagerUI.manage_tasks(self)` - No description\n  - `MHMManagerUI.manage_task_crud(self)` - No description\n  - `MHMManagerUI.manage_personalization(self)` - No description\n  - `MHMManagerUI.edit_user_messages(self)` - Open message editing interface for selected user\n  - `MHMManagerUI.open_message_editor(self, parent_dialog, category)` - Open the message editing window for a specific category\n  - `MHMManagerUI.edit_user_schedules(self)` - Open schedule editing interface for selected user\n  - `MHMManagerUI.open_schedule_editor(self, parent_dialog, category)` - Open the schedule editing window for a specific category\n  - `MHMManagerUI.send_test_message(self)` - Send a test message to the selected user\n  - `MHMManagerUI.confirm_test_message(self, category)` - Confirm and send test message\n  - `MHMManagerUI.send_actual_test_message(self, category)` - Send a test message via the running service\n  - `MHMManagerUI.toggle_logging_verbosity(self)` - Toggle logging verbosity and update menu.\n  - `MHMManagerUI.view_log_file(self)` - Open the log file in the default text editor.\n  - `MHMManagerUI.view_cache_status(self)` - Show cache cleanup status and information.\n  - `MHMManagerUI.force_clean_cache(self)` - Force cache cleanup regardless of schedule.\n  - `MHMManagerUI.validate_configuration(self)` - Show detailed configuration validation report.\n  - `MHMManagerUI.show_configuration_help(self, parent_window)` - Show help for fixing configuration issues.\n  - `MHMManagerUI.view_all_users_summary(self)` - Show a summary of all users in the system.\n  - `MHMManagerUI.system_health_check(self)` - Perform a basic system health check.\n  - `MHMManagerUI.closeEvent(self, event)` - Handle window close event\n  - `MHMManagerUI.shutdown_ui_components(self, communication_manager)` - Shutdown any UI-created components gracefully\n\n### ui/widgets/category_selection_widget.py\n**Functions:**\n- `__init__(self, parent)` - Initialize the object.\n- `get_selected_categories(self)` - No description\n- `set_selected_categories(self, categories)` - No description\n**Classes:**\n- `CategorySelectionWidget` - No description\n  - `CategorySelectionWidget.__init__(self, parent)` - Initialize the object.\n  - `CategorySelectionWidget.get_selected_categories(self)` - No description\n  - `CategorySelectionWidget.set_selected_categories(self, categories)` - No description\n\n### ui/widgets/channel_selection_widget.py\n**Functions:**\n- `__init__(self, parent)` - Initialize the ChannelSelectionWidget.\n\nSets up the UI for channel selection with Discord, Email, and Telegram options,\nalong with timezone selection. Populates timezone options and sets default\ntimezone to America/Regina.\n\nArgs:\n    parent: Parent widget (optional)\n- `populate_timezones(self)` - Populate the timezone combo box with options.\n- `get_selected_channel(self)` - No description\n- `get_all_contact_info(self)` - Get all contact info fields from the widget.\n- `get_timezone(self)` - Get the selected timezone.\n- `set_selected_channel(self, channel, value)` - No description\n- `set_timezone(self, timezone)` - Set the timezone.\n- `set_contact_info(self, email, phone, discord_id, timezone)` - No description\n**Classes:**\n- `ChannelSelectionWidget` - No description\n  - `ChannelSelectionWidget.__init__(self, parent)` - Initialize the ChannelSelectionWidget.\n\nSets up the UI for channel selection with Discord, Email, and Telegram options,\nalong with timezone selection. Populates timezone options and sets default\ntimezone to America/Regina.\n\nArgs:\n    parent: Parent widget (optional)\n  - `ChannelSelectionWidget.populate_timezones(self)` - Populate the timezone combo box with options.\n  - `ChannelSelectionWidget.get_selected_channel(self)` - No description\n  - `ChannelSelectionWidget.get_all_contact_info(self)` - Get all contact info fields from the widget.\n  - `ChannelSelectionWidget.get_timezone(self)` - Get the selected timezone.\n  - `ChannelSelectionWidget.set_selected_channel(self, channel, value)` - No description\n  - `ChannelSelectionWidget.set_timezone(self, timezone)` - Set the timezone.\n  - `ChannelSelectionWidget.set_contact_info(self, email, phone, discord_id, timezone)` - No description\n\n### ui/widgets/checkin_settings_widget.py\n**Functions:**\n- `__init__(self, parent, user_id)` - Initialize the object.\n- `showEvent(self, event)` - Handle widget show event.\n\nCalled when the widget becomes visible. Currently just calls the parent\nimplementation but can be extended for initialization that needs to happen\nwhen the widget is shown.\n\nArgs:\n    event: The show event object\n- `setup_connections(self)` - Setup signal connections.\n- `connect_question_checkboxes(self)` - Connect all question checkboxes to track changes.\n- `on_question_toggled(self, checked)` - Handle question checkbox toggle.\n- `load_existing_data(self)` - Load existing check-in data.\n- `set_question_checkboxes(self, questions)` - Set question checkboxes based on saved preferences.\n- `get_default_question_state(self, question_key)` - Get default enabled state for a question.\n- `find_lowest_available_period_number(self)` - Find the lowest available integer (2+) that's not currently used in period names.\n- `add_new_period(self, checked, period_name, period_data)` - Add a new time period using the PeriodRowWidget.\n- `remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n- `undo_last_time_period_delete(self)` - Undo the last time period deletion.\n- `add_new_question(self)` - Add a new check-in question.\n- `undo_last_question_delete(self)` - Undo the last question deletion.\n- `get_checkin_settings(self)` - Get the current check-in settings.\n- `set_checkin_settings(self, settings)` - Set the check-in settings.\n**Classes:**\n- `CheckinSettingsWidget` - Widget for check-in settings configuration.\n  - `CheckinSettingsWidget.__init__(self, parent, user_id)` - Initialize the object.\n  - `CheckinSettingsWidget.showEvent(self, event)` - Handle widget show event.\n\nCalled when the widget becomes visible. Currently just calls the parent\nimplementation but can be extended for initialization that needs to happen\nwhen the widget is shown.\n\nArgs:\n    event: The show event object\n  - `CheckinSettingsWidget.setup_connections(self)` - Setup signal connections.\n  - `CheckinSettingsWidget.connect_question_checkboxes(self)` - Connect all question checkboxes to track changes.\n  - `CheckinSettingsWidget.on_question_toggled(self, checked)` - Handle question checkbox toggle.\n  - `CheckinSettingsWidget.load_existing_data(self)` - Load existing check-in data.\n  - `CheckinSettingsWidget.set_question_checkboxes(self, questions)` - Set question checkboxes based on saved preferences.\n  - `CheckinSettingsWidget.get_default_question_state(self, question_key)` - Get default enabled state for a question.\n  - `CheckinSettingsWidget.find_lowest_available_period_number(self)` - Find the lowest available integer (2+) that's not currently used in period names.\n  - `CheckinSettingsWidget.add_new_period(self, checked, period_name, period_data)` - Add a new time period using the PeriodRowWidget.\n  - `CheckinSettingsWidget.remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n  - `CheckinSettingsWidget.undo_last_time_period_delete(self)` - Undo the last time period deletion.\n  - `CheckinSettingsWidget.add_new_question(self)` - Add a new check-in question.\n  - `CheckinSettingsWidget.undo_last_question_delete(self)` - Undo the last question deletion.\n  - `CheckinSettingsWidget.get_checkin_settings(self)` - Get the current check-in settings.\n  - `CheckinSettingsWidget.set_checkin_settings(self, settings)` - Set the check-in settings.\n\n### ui/widgets/dynamic_list_container.py\n**Functions:**\n- `__init__(self, parent, field_key)` - Initialize the object.\n- `_add_blank_row(self)` - No description\n- `_on_row_edited(self, row)` - No description\n- `_on_row_deleted(self, row)` - No description\n- `_ensure_single_blank_row(self, current_blank)` - No description\n- `_deduplicate_values(self, trigger_row, skip_warning)` - No description\n- `get_values(self)` - No description\n- `set_values(self, selected)` - No description\n- `_first_blank_index(self)` - No description\n- `_on_preset_toggled(self, row)` - No description\n- `__post_init__(self)` - Post-initialization setup.\n**Classes:**\n- `DynamicListContainer` - Manages a vertical list of DynamicListField rows.\n  - `DynamicListContainer.__init__(self, parent, field_key)` - Initialize the object.\n  - `DynamicListContainer._add_blank_row(self)` - No description\n  - `DynamicListContainer._on_row_edited(self, row)` - No description\n  - `DynamicListContainer._on_row_deleted(self, row)` - No description\n  - `DynamicListContainer._ensure_single_blank_row(self, current_blank)` - No description\n  - `DynamicListContainer._deduplicate_values(self, trigger_row, skip_warning)` - No description\n  - `DynamicListContainer.get_values(self)` - No description\n  - `DynamicListContainer.set_values(self, selected)` - No description\n  - `DynamicListContainer._first_blank_index(self)` - No description\n  - `DynamicListContainer._on_preset_toggled(self, row)` - No description\n  - `DynamicListContainer.__post_init__(self)` - Post-initialization setup.\n\n### ui/widgets/dynamic_list_field.py\n**Functions:**\n- `__init__(self, parent, preset_label, editable, checked)` - Initialize the object.\n- `on_text_changed(self)` - Called when user types in the text field.\n- `on_checkbox_toggled(self)` - Called when user clicks the checkbox.\n- `on_editing_finished(self)` - Notify parent container that text editing has finished (for duplicate validation).\n- `_on_delete(self)` - No description\n- `is_checked(self)` - No description\n- `get_text(self)` - No description\n- `is_blank(self)` - No description\n- `set_checked(self, state)` - No description\n- `set_text(self, text)` - No description\n**Classes:**\n- `DynamicListField` - Single row consisting of checkbox + editable text + delete button.\n  - `DynamicListField.__init__(self, parent, preset_label, editable, checked)` - Initialize the object.\n  - `DynamicListField.on_text_changed(self)` - Called when user types in the text field.\n  - `DynamicListField.on_checkbox_toggled(self)` - Called when user clicks the checkbox.\n  - `DynamicListField.on_editing_finished(self)` - Notify parent container that text editing has finished (for duplicate validation).\n  - `DynamicListField._on_delete(self)` - No description\n  - `DynamicListField.is_checked(self)` - No description\n  - `DynamicListField.get_text(self)` - No description\n  - `DynamicListField.is_blank(self)` - No description\n  - `DynamicListField.set_checked(self, state)` - No description\n  - `DynamicListField.set_text(self, text)` - No description\n\n### ui/widgets/period_row_widget.py\n**Functions:**\n- `__init__(self, parent, period_name, period_data)` - Initialize the object.\n- `setup_functionality(self)` - Setup the widget functionality and connect signals.\n- `load_period_data(self)` - Load period data into the widget.\n- `load_days(self, days)` - Load day selections.\n- `on_select_all_days_toggled(self, checked)` - Handle 'Select All Days' checkbox toggle.\n- `on_individual_day_toggled(self, checked)` - Handle individual day checkbox toggle.\n- `get_period_data(self)` - Get the current period data from the widget.\n- `get_selected_days(self)` - Get the currently selected days.\n- `request_delete(self)` - Request deletion of this period row.\n- `set_period_name(self, name)` - Set the period name.\n- `get_period_name(self)` - Get the current period name.\n- `is_valid(self)` - Check if the period data is valid.\n- `set_read_only(self, read_only)` - Set the widget to read-only mode.\n**Classes:**\n- `PeriodRowWidget` - Reusable widget for editing time periods with days selection.\n  - `PeriodRowWidget.__init__(self, parent, period_name, period_data)` - Initialize the object.\n  - `PeriodRowWidget.setup_functionality(self)` - Setup the widget functionality and connect signals.\n  - `PeriodRowWidget.load_period_data(self)` - Load period data into the widget.\n  - `PeriodRowWidget.load_days(self, days)` - Load day selections.\n  - `PeriodRowWidget.on_select_all_days_toggled(self, checked)` - Handle 'Select All Days' checkbox toggle.\n  - `PeriodRowWidget.on_individual_day_toggled(self, checked)` - Handle individual day checkbox toggle.\n  - `PeriodRowWidget.get_period_data(self)` - Get the current period data from the widget.\n  - `PeriodRowWidget.get_selected_days(self)` - Get the currently selected days.\n  - `PeriodRowWidget.request_delete(self)` - Request deletion of this period row.\n  - `PeriodRowWidget.set_period_name(self, name)` - Set the period name.\n  - `PeriodRowWidget.get_period_name(self)` - Get the current period name.\n  - `PeriodRowWidget.is_valid(self)` - Check if the period data is valid.\n  - `PeriodRowWidget.set_read_only(self, read_only)` - Set the widget to read-only mode.\n\n### ui/widgets/tag_widget.py\n**Functions:**\n- `__init__(self, parent, user_id, mode, selected_tags, title)` - Initialize the tag widget.\n\nArgs:\n    parent: Parent widget\n    user_id: User ID for loading/saving tags\n    mode: \"management\" for full CRUD operations, \"selection\" for checkbox selection\n    selected_tags: List of currently selected tags (for selection mode)\n    title: Title for the group box\n- `setup_ui(self)` - Setup the UI components based on mode.\n- `setup_connections(self)` - Setup signal connections.\n- `load_tags(self)` - Load the user's tags.\n- `refresh_tag_list(self)` - Refresh the tag list display.\n- `update_button_states(self)` - Update button enabled states based on selection (management mode only).\n- `on_tag_selection_changed(self, item)` - Handle when a tag checkbox is changed (selection mode only).\n- `add_tag(self)` - Add a new tag.\n- `edit_tag(self)` - Edit the selected tag (management mode only).\n- `delete_tag(self)` - Delete the selected tag (management mode only).\n- `get_available_tags(self)` - Get the current list of available tags.\n- `get_selected_tags(self)` - Get the currently selected tags (selection mode only).\n- `set_selected_tags(self, tags)` - Set the selected tags (selection mode only).\n- `refresh_tags(self)` - Refresh the tags from the database.\n**Classes:**\n- `TagWidget` - Flexible tag widget that can work in management or selection mode.\n  - `TagWidget.__init__(self, parent, user_id, mode, selected_tags, title)` - Initialize the tag widget.\n\nArgs:\n    parent: Parent widget\n    user_id: User ID for loading/saving tags\n    mode: \"management\" for full CRUD operations, \"selection\" for checkbox selection\n    selected_tags: List of currently selected tags (for selection mode)\n    title: Title for the group box\n  - `TagWidget.setup_ui(self)` - Setup the UI components based on mode.\n  - `TagWidget.setup_connections(self)` - Setup signal connections.\n  - `TagWidget.load_tags(self)` - Load the user's tags.\n  - `TagWidget.refresh_tag_list(self)` - Refresh the tag list display.\n  - `TagWidget.update_button_states(self)` - Update button enabled states based on selection (management mode only).\n  - `TagWidget.on_tag_selection_changed(self, item)` - Handle when a tag checkbox is changed (selection mode only).\n  - `TagWidget.add_tag(self)` - Add a new tag.\n  - `TagWidget.edit_tag(self)` - Edit the selected tag (management mode only).\n  - `TagWidget.delete_tag(self)` - Delete the selected tag (management mode only).\n  - `TagWidget.get_available_tags(self)` - Get the current list of available tags.\n  - `TagWidget.get_selected_tags(self)` - Get the currently selected tags (selection mode only).\n  - `TagWidget.set_selected_tags(self, tags)` - Set the selected tags (selection mode only).\n  - `TagWidget.refresh_tags(self)` - Refresh the tags from the database.\n\n### ui/widgets/task_settings_widget.py\n**Functions:**\n- `__init__(self, parent, user_id)` - Initialize the object.\n- `setup_connections(self)` - Setup signal connections.\n- `load_existing_data(self)` - No description\n- `showEvent(self, event)` - Handle widget show event.\n\nCalled when the widget becomes visible. Currently just calls the parent\nimplementation but can be extended for initialization that needs to happen\nwhen the widget is shown.\n\nArgs:\n    event: The show event object\n- `find_lowest_available_period_number(self)` - Find the lowest available integer (2+) that's not currently used in period names.\n- `add_new_period(self, checked, period_name, period_data)` - Add a new time period using the PeriodRowWidget.\n- `remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n- `undo_last_period_delete(self)` - Undo the last time period deletion.\n- `get_task_settings(self)` - Get the current task settings.\n- `set_task_settings(self, settings)` - Set the task settings.\n- `get_statistics(self)` - Get real task statistics for the user.\n- `get_available_tags(self)` - Get the current list of available tags from the tag widget.\n- `refresh_tags(self)` - Refresh the tags in the tag widget.\n**Classes:**\n- `TaskSettingsWidget` - No description\n  - `TaskSettingsWidget.__init__(self, parent, user_id)` - Initialize the object.\n  - `TaskSettingsWidget.setup_connections(self)` - Setup signal connections.\n  - `TaskSettingsWidget.load_existing_data(self)` - No description\n  - `TaskSettingsWidget.showEvent(self, event)` - Handle widget show event.\n\nCalled when the widget becomes visible. Currently just calls the parent\nimplementation but can be extended for initialization that needs to happen\nwhen the widget is shown.\n\nArgs:\n    event: The show event object\n  - `TaskSettingsWidget.find_lowest_available_period_number(self)` - Find the lowest available integer (2+) that's not currently used in period names.\n  - `TaskSettingsWidget.add_new_period(self, checked, period_name, period_data)` - Add a new time period using the PeriodRowWidget.\n  - `TaskSettingsWidget.remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n  - `TaskSettingsWidget.undo_last_period_delete(self)` - Undo the last time period deletion.\n  - `TaskSettingsWidget.get_task_settings(self)` - Get the current task settings.\n  - `TaskSettingsWidget.set_task_settings(self, settings)` - Set the task settings.\n  - `TaskSettingsWidget.get_statistics(self)` - Get real task statistics for the user.\n  - `TaskSettingsWidget.get_available_tags(self)` - Get the current list of available tags from the tag widget.\n  - `TaskSettingsWidget.refresh_tags(self)` - Refresh the tags in the tag widget.\n\n### ui/widgets/user_profile_settings_widget.py\n**Functions:**\n- `__init__(self, parent, user_id, existing_data)` - Initialize the object.\n- `populate_timezones(self)` - Populate the timezone combo box with options and enable selection.\n- `load_existing_data(self)` - Load existing personalization data into the form.\n- `set_checkbox_group(self, group_name, values)` - Set checkboxes for a specific group based on values.\n- `get_checkbox_group(self, group_name)` - Get checked values for a specific group.\n- `get_personalization_data(self)` - Get all personalization data from the form, preserving existing data structure.\n- `get_settings(self)` - Get the current user profile settings.\n- `set_settings(self, settings)` - Set the user profile settings.\n**Classes:**\n- `UserProfileSettingsWidget` - Widget for user profile settings configuration.\n  - `UserProfileSettingsWidget.__init__(self, parent, user_id, existing_data)` - Initialize the object.\n  - `UserProfileSettingsWidget.populate_timezones(self)` - Populate the timezone combo box with options and enable selection.\n  - `UserProfileSettingsWidget.load_existing_data(self)` - Load existing personalization data into the form.\n  - `UserProfileSettingsWidget.set_checkbox_group(self, group_name, values)` - Set checkboxes for a specific group based on values.\n  - `UserProfileSettingsWidget.get_checkbox_group(self, group_name)` - Get checked values for a specific group.\n  - `UserProfileSettingsWidget.get_personalization_data(self)` - Get all personalization data from the form, preserving existing data structure.\n  - `UserProfileSettingsWidget.get_settings(self)` - Get the current user profile settings.\n  - `UserProfileSettingsWidget.set_settings(self, settings)` - Set the user profile settings.\n\n### user/user_context.py\n**Functions:**\n- `__new__(cls)` - Create a new instance.\n- `load_user_data(self, user_id)` - Loads user data using the new user management functions.\n\nArgs:\n    user_id (str): The user ID whose data needs to be loaded.\n- `save_user_data(self, user_id)` - Saves user data using the new user management functions.\n\nArgs:\n    user_id (str): The user ID whose data needs to be saved.\n- `set_user_id(self, user_id)` - Sets the user_id in the user_data dictionary.\n\nArgs:\n    user_id (str): The user ID to be set.\n- `get_user_id(self)` - Retrieves the user_id from the user_data dictionary.\n\nReturns:\n    str: The current user ID, or None if not set.\n- `set_internal_username(self, internal_username)` - Sets the internal_username in the user_data dictionary.\n\nArgs:\n    internal_username (str): The internal username to be set.\n- `get_internal_username(self)` - Retrieves the internal_username from the user_data dictionary.\n\nReturns:\n    str: The current internal username, or None if not set.\n- `set_preferred_name(self, preferred_name)` - Sets the preferred_name in the user_data dictionary.\n\nArgs:\n    preferred_name (str): The preferred name to be set.\n- `get_preferred_name(self)` - Retrieves the preferred_name from the user_data dictionary.\n\nReturns:\n    str: The current preferred name, or None if not set.\n- `set_preference(self, key, value)` - Sets a user preference in the user_data dictionary.\n\nArgs:\n    key (str): The preference key to be set.\n    value (any): The preference value to be set.\n- `get_preference(self, key)` - Retrieves a user preference from the user_data dictionary.\n\nArgs:\n    key (str): The preference key to retrieve.\n\nReturns:\n    any: The current preference value, or None if not set.\n- `update_preference(self, key, value)` - Updates a user preference and saves the data.\n\nArgs:\n    key (str): The preference key to be updated.\n    value (any): The preference value to be set.\n- `_get_active_schedules(self, schedules)` - Get list of currently active schedule periods.\n\nArgs:\n    schedules: Dictionary containing schedule periods\n    \nReturns:\n    list: List of active schedule period names\n- `get_user_context(self)` - Get comprehensive user context for AI conversations.\n\nReturns:\n    dict: Dictionary containing all relevant user context information\n**Classes:**\n- `UserContext` - No description\n  - `UserContext.__new__(cls)` - Create a new instance.\n  - `UserContext.load_user_data(self, user_id)` - Loads user data using the new user management functions.\n\nArgs:\n    user_id (str): The user ID whose data needs to be loaded.\n  - `UserContext.save_user_data(self, user_id)` - Saves user data using the new user management functions.\n\nArgs:\n    user_id (str): The user ID whose data needs to be saved.\n  - `UserContext.set_user_id(self, user_id)` - Sets the user_id in the user_data dictionary.\n\nArgs:\n    user_id (str): The user ID to be set.\n  - `UserContext.get_user_id(self)` - Retrieves the user_id from the user_data dictionary.\n\nReturns:\n    str: The current user ID, or None if not set.\n  - `UserContext.set_internal_username(self, internal_username)` - Sets the internal_username in the user_data dictionary.\n\nArgs:\n    internal_username (str): The internal username to be set.\n  - `UserContext.get_internal_username(self)` - Retrieves the internal_username from the user_data dictionary.\n\nReturns:\n    str: The current internal username, or None if not set.\n  - `UserContext.set_preferred_name(self, preferred_name)` - Sets the preferred_name in the user_data dictionary.\n\nArgs:\n    preferred_name (str): The preferred name to be set.\n  - `UserContext.get_preferred_name(self)` - Retrieves the preferred_name from the user_data dictionary.\n\nReturns:\n    str: The current preferred name, or None if not set.\n  - `UserContext.set_preference(self, key, value)` - Sets a user preference in the user_data dictionary.\n\nArgs:\n    key (str): The preference key to be set.\n    value (any): The preference value to be set.\n  - `UserContext.get_preference(self, key)` - Retrieves a user preference from the user_data dictionary.\n\nArgs:\n    key (str): The preference key to retrieve.\n\nReturns:\n    any: The current preference value, or None if not set.\n  - `UserContext.update_preference(self, key, value)` - Updates a user preference and saves the data.\n\nArgs:\n    key (str): The preference key to be updated.\n    value (any): The preference value to be set.\n  - `UserContext._get_active_schedules(self, schedules)` - Get list of currently active schedule periods.\n\nArgs:\n    schedules: Dictionary containing schedule periods\n    \nReturns:\n    list: List of active schedule period names\n  - `UserContext.get_user_context(self)` - Get comprehensive user context for AI conversations.\n\nReturns:\n    dict: Dictionary containing all relevant user context information\n\n### user/user_preferences.py\n**Functions:**\n- `__init__(self, user_id)` - Initialize UserPreferences for a specific user.\n\nArgs:\n    user_id: The user's unique identifier\n- `load_preferences(self)` - Load user preferences using the new user management functions.\n- `save_preferences(self)` - Save user preferences using the new user management functions.\n- `set_preference(self, key, value)` - Set a preference and save it.\n- `get_preference(self, key)` - Get a preference value.\n- `update_preference(self, key, value)` - Update a preference (alias for set_preference for consistency).\n- `remove_preference(self, key)` - Remove a preference.\n- `get_all_preferences(self)` - Get all preferences.\n- `set_schedule_period_active(user_id, category, period_name, is_active)` - Wrapper for :func:`core.schedule_management.set_schedule_period_active`.\n- `is_schedule_period_active(user_id, category, period_name)` - Wrapper for :func:`core.schedule_management.is_schedule_period_active`.\n**Classes:**\n- `UserPreferences` - Manages user preferences and settings.\n\nProvides methods for loading, saving, and managing user preferences\nincluding schedule period settings and general user preferences.\n  - `UserPreferences.__init__(self, user_id)` - Initialize UserPreferences for a specific user.\n\nArgs:\n    user_id: The user's unique identifier\n  - `UserPreferences.load_preferences(self)` - Load user preferences using the new user management functions.\n  - `UserPreferences.save_preferences(self)` - Save user preferences using the new user management functions.\n  - `UserPreferences.set_preference(self, key, value)` - Set a preference and save it.\n  - `UserPreferences.get_preference(self, key)` - Get a preference value.\n  - `UserPreferences.update_preference(self, key, value)` - Update a preference (alias for set_preference for consistency).\n  - `UserPreferences.remove_preference(self, key)` - Remove a preference.\n  - `UserPreferences.get_all_preferences(self)` - Get all preferences.\n  - `UserPreferences.set_schedule_period_active(user_id, category, period_name, is_active)` - Wrapper for :func:`core.schedule_management.set_schedule_period_active`.\n  - `UserPreferences.is_schedule_period_active(user_id, category, period_name)` - Wrapper for :func:`core.schedule_management.is_schedule_period_active`.\n",
      "error": ""
    },
    "audit_module_dependencies": {
      "success": true,
      "output": "[SCAN] Scanning all Python files for imports...\nError parsing scripts\\testing\\test_all_dialogs.py: unterminated triple-quoted string literal (detected at line 204) (<unknown>, line 3)\n[DOC] Parsing MODULE_DEPENDENCIES_DETAIL.md...\n\n================================================================================\nMODULE DEPENDENCIES AUDIT REPORT\n================================================================================\n\n[STATS] OVERALL STATISTICS:\n   Files scanned: 160\n   Total imports found: 1584\n   Dependencies documented: 123\n   Standard library imports: 573\n   Third-party imports: 242\n   Local imports: 769\n\n[ENHANCEMENT] Manual Enhancement Status:\n   Modules with manual enhancements: 123\n\n[MISS] MISSING FROM DEPENDENCIES DOCUMENTATION:\n   [DIR] bot/enhanced_command_parser.py - ENTIRE FILE MISSING\n   [DIR] bot/interaction_handlers.py - ENTIRE FILE MISSING\n   [DIR] bot/interaction_manager.py - ENTIRE FILE MISSING\n   [DIR] scripts/audit_legacy_channels.py - ENTIRE FILE MISSING\n   [DIR] scripts/debug/discord_connectivity_diagnostic.py - ENTIRE FILE MISSING\n   [DIR] scripts/debug/test_dns_fallback.py - ENTIRE FILE MISSING\n   [DIR] scripts/focused_legacy_audit.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_ai_parsing.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_ai_raw.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_centralized_config.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_comprehensive_fixes.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_discord_commands.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_discord_connection.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_enhanced_discord_commands.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_enhanced_parser_direct.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_task_response_formatting.py - ENTIRE FILE MISSING\n   [DIR] test_user_creation_debug.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_ai_chatbot_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_conversation_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_discord_bot_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_interaction_handlers_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_response_tracking_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_schedule_management_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_service_utilities_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_ui_app_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_user_context_behavior.py - ENTIRE FILE MISSING\n   [DIR] tests/behavior/test_utilities_demo.py - ENTIRE FILE MISSING\n   [DIR] tests/test_utilities.py - ENTIRE FILE MISSING\n   [DIR] tests/unit/test_validation.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/task_completion_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/task_crud_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/task_edit_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/tag_widget_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/task_completion_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/task_crud_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/task_edit_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/widgets/tag_widget.py - ENTIRE FILE MISSING\n\n   Total missing dependencies: 37\n\n[DIR] BREAKDOWN BY DIRECTORY:\n   bot/: 13 files, 205 imports, 118 local deps\n   core/: 19 files, 278 imports, 147 local deps\n   root/: 3 files, 12 imports, 4 local deps\n   scripts/: 52 files, 297 imports, 109 local deps\n   tasks/: 1 files, 16 imports, 11 local deps\n   tests/: 29 files, 446 imports, 217 local deps\n   ui/: 41 files, 317 imports, 155 local deps\n   user/: 2 files, 13 imports, 8 local deps\n\n================================================================================\nENHANCED MODULE ANALYSIS REPORT\n================================================================================\n\n#### `bot/ai_chatbot.py`\n- **Complexity**: LOW\n- **Dependencies**: 6\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Communication channel dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `bot/base_channel.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `bot/channel_factory.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Communication channel dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `bot/channel_registry.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Communication channel dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `bot/communication_manager.py`\n- **Complexity**: HIGH\n- **Dependencies**: 16\n- **Used by**: 0 modules\n- **Key Insights**: Communication channel dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Verify if this module is still needed\n\n#### `bot/conversation_manager.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Communication channel dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `bot/discord_bot.py`\n- **Complexity**: HIGH\n- **Dependencies**: 16\n- **Used by**: 0 modules\n- **Key Insights**: Communication channel dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Verify if this module is still needed\n\n#### `bot/email_bot.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Communication channel dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `bot/telegram_bot.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 12\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Communication channel dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `bot/user_context_manager.py`\n- **Complexity**: LOW\n- **Dependencies**: 7\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/auto_cleanup.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/backup_manager.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/checkin_analytics.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/config.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/error_handling.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/file_operations.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/logger.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/message_management.py`\n- **Complexity**: LOW\n- **Dependencies**: 7\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/response_tracking.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/schedule_management.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/scheduler.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 14\n- **Used by**: 0 modules\n- **Key Insights**: Communication channel dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/service.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 13\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Communication channel dependencies, Not imported by other modules\n- **Recommendations**: Review core dependency usage, Verify if this module is still needed\n\n#### `core/service_utilities.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/ui_management.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/user_data_handlers.py`\n- **Complexity**: HIGH\n- **Dependencies**: 18\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `core/user_data_manager.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 10\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/user_data_validation.py`\n- **Complexity**: LOW\n- **Dependencies**: 7\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/user_management.py`\n- **Complexity**: HIGH\n- **Dependencies**: 39\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `core/validation.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `run_mhm.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `run_tests.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/debug/debug_category_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/debug/debug_comprehensive_prompt.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Communication channel dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/debug/debug_discord_connectivity.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/debug/debug_lm_studio_timeout.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/debug/debug_preferences.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/migration/migrate_messaging_service.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/migration/migrate_schedule_format.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/migration/migrate_schedules_cleanup.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/migration/migrate_sent_messages.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/migration/migrate_user_data_structure.py`\n- **Complexity**: LOW\n- **Dependencies**: 7\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/testing/ai/test_ai_with_clear_cache.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Communication channel dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/testing/ai/test_comprehensive_ai.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Communication channel dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/testing/ai/test_data_integrity.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/testing/ai/test_lm_studio.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Communication channel dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/testing/ai/test_new_modules.py`\n- **Complexity**: LOW\n- **Dependencies**: 7\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/testing/analyze_documentation_overlap.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/testing/test_all_dialogs.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/testing/test_category_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/testing/test_migration.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/testing/test_user_data_analysis.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Communication channel dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/testing/test_utils_functions.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/testing/validate_config.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/add_checkin_schedules.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/check_checkin_schedules.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/cleanup/cleanup_data_test_users.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/cleanup/cleanup_real_test_users.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/cleanup/cleanup_test_data.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/cleanup/cleanup_user_message_files.py`\n- **Complexity**: LOW\n- **Dependencies**: 6\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/cleanup_duplicate_messages.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/cleanup_test_users.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/fix_user_schedules.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/rebuild_index.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/refactoring/analyze_migration_needs.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/refactoring/find_legacy_get_user_data.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/refactoring/find_legacy_imports.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/refactoring/fix_broken_imports.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/refactoring/migrate_legacy_imports.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/restore_custom_periods.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `scripts/utilities/user_data_cli.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `tasks/task_management.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 11\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Review core dependency usage, Verify if this module is still needed\n\n#### `tests/behavior/test_account_management_real_behavior.py`\n- **Complexity**: HIGH\n- **Dependencies**: 24\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage\n\n#### `tests/behavior/test_communication_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Communication channel dependencies, Not imported by other modules\n\n#### `tests/behavior/test_message_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_scheduler_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_service_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_task_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/conftest.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/integration/test_account_lifecycle.py`\n- **Complexity**: HIGH\n- **Dependencies**: 21\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage\n\n#### `tests/integration/test_account_management.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/integration/test_user_creation.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 13\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/ui/test_account_creation_ui.py`\n- **Complexity**: HIGH\n- **Dependencies**: 18\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules\n\n#### `tests/ui/test_dialogs.py`\n- **Complexity**: LOW\n- **Dependencies**: 6\n- **Used by**: 0 modules\n- **Key Insights**: Communication channel dependencies, User interface dependencies, Not imported by other modules\n\n#### `tests/unit/test_cleanup.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/unit/test_config.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/unit/test_error_handling.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/unit/test_file_operations.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/unit/test_user_management.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `ui/dialogs/account_creator_dialog.py`\n- **Complexity**: HIGH\n- **Dependencies**: 20\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `ui/dialogs/admin_panel.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/category_management_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 7\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/channel_management_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/checkin_management_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 8\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/schedule_editor_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 7\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/task_management_dialog.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/user_profile_dialog.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/account_creator_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/admin_panel_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/category_management_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/category_selection_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/channel_management_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/channel_selection_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/checkin_element_template_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/checkin_management_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/checkin_settings_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/dynamic_list_field_template_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/period_row_template_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/schedule_editor_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/task_management_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/task_settings_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/user_profile_management_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/user_profile_settings_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/ui_app_qt.py`\n- **Complexity**: HIGH\n- **Dependencies**: 31\n- **Used by**: 0 modules\n- **Key Insights**: Communication channel dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `ui/widgets/category_selection_widget.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/channel_selection_widget.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/checkin_settings_widget.py`\n- **Complexity**: LOW\n- **Dependencies**: 8\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/dynamic_list_container.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/dynamic_list_field.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/period_row_widget.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/task_settings_widget.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/user_profile_settings_widget.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `user/user_context.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `user/user_preferences.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n[DOC] GENERATING UPDATED DEPENDENCY SECTIONS...\n\n================================================================================\nUPDATED DEPENDENCY SECTIONS TO ADD:\n================================================================================\n\n#### `bot/ai_chatbot.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.user_context_manager, core.config, core.error_handling, core.logger, core.response_tracking, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `bot/base_channel.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `bot/channel_factory.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.base_channel, core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `bot/channel_registry.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.channel_factory, bot.discord_bot, bot.email_bot, core.error_handling\n- **Used by**: [Add usage information]\n\n#### `bot/communication_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot, bot.base_channel, bot.channel_factory, bot.conversation_manager, bot.conversation_manager, core.config, core.error_handling, core.file_operations, core.logger, core.logger, core.message_management, core.response_tracking, core.schedule_management, core.service_utilities, core.user_data_handlers, tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `bot/conversation_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot, core.error_handling, core.logger, core.response_tracking\n- **Used by**: [Add usage information]\n\n#### `bot/discord_bot.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.base_channel, bot.conversation_manager, bot.interaction_manager, bot.interaction_manager, bot.interaction_manager, bot.interaction_manager, bot.interaction_manager, bot.interaction_manager, bot.interaction_manager, bot.interaction_manager, bot.interaction_manager, bot.interaction_manager, core.config, core.error_handling, core.logger, core.user_management\n- **Used by**: [Add usage information]\n\n#### `bot/email_bot.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.base_channel, core.config, core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `bot/enhanced_command_parser.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot, bot.interaction_handlers, core.config, core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `bot/interaction_handlers.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.conversation_manager, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.error_handling, core.logger, core.response_tracking, core.response_tracking, core.response_tracking, core.schedule_management, core.schedule_management, core.schedule_management, core.schedule_management, core.schedule_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tasks.task_management, tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `bot/interaction_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot, bot.conversation_manager, bot.enhanced_command_parser, bot.interaction_handlers, bot.interaction_handlers, core.config, core.error_handling, core.logger, core.response_tracking, core.response_tracking, core.user_management, tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `bot/telegram_bot.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.base_channel, core.config, core.error_handling, core.logger, core.message_management, core.schedule_management, core.scheduler, core.service_utilities, core.service_utilities, core.user_management, core.user_management, user.user_context\n- **Used by**: [Add usage information]\n\n#### `bot/user_context_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.message_management, core.response_tracking, core.user_data_handlers, user.user_context, user.user_preferences\n- **Used by**: [Add usage information]\n\n#### `core/auto_cleanup.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling\n- **Used by**: [Add usage information]\n\n#### `core/backup_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `core/checkin_analytics.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.response_tracking\n- **Used by**: [Add usage information]\n\n#### `core/config.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling\n- **Used by**: [Add usage information]\n\n#### `core/file_operations.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger, core.message_management, core.user_data_manager\n- **Used by**: [Add usage information]\n\n#### `core/logger.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config\n- **Used by**: [Add usage information]\n\n#### `core/message_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_operations, core.logger, core.user_data_manager, core.user_data_manager, core.user_data_manager\n- **Used by**: [Add usage information]\n\n#### `core/response_tracking.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_operations, core.logger, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `core/schedule_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.file_operations, core.logger, core.service_utilities, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, user.user_context\n- **Used by**: [Add usage information]\n\n#### `core/scheduler.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.communication_manager, core.error_handling, core.logger, core.schedule_management, core.schedule_management, core.service_utilities, core.user_data_handlers, core.user_data_handlers, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, user.user_context\n- **Used by**: [Add usage information]\n\n#### `core/service.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.channel_registry, bot.communication_manager, core.auto_cleanup, core.config, core.config, core.config, core.error_handling, core.file_operations, core.logger, core.logger, core.scheduler, core.user_data_handlers, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `core/service_utilities.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `core/ui_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, ui.widgets.period_row_widget, ui.widgets.period_row_widget\n- **Used by**: [Add usage information]\n\n#### `core/user_data_handlers.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.error_handling, core.file_operations, core.logger, core.message_management, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_validation, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management\n- **Used by**: [Add usage information]\n\n#### `core/user_data_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_operations, core.logger, core.message_management, core.response_tracking, core.response_tracking, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `core/user_data_validation.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.error_handling, core.logger, core.message_management, core.message_management, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `core/user_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.error_handling, core.file_operations, core.logger, core.message_management, core.message_management, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_validation\n- **Used by**: [Add usage information]\n\n#### `core/validation.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_validation\n- **Used by**: [Add usage information]\n\n#### `run_mhm.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling\n- **Used by**: [Add usage information]\n\n#### `scripts/debug/debug_category_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, ui.widgets.category_selection_widget\n- **Used by**: [Add usage information]\n\n#### `scripts/debug/debug_comprehensive_prompt.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot\n- **Used by**: [Add usage information]\n\n#### `scripts/debug/debug_discord_connectivity.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.logger\n- **Used by**: [Add usage information]\n\n#### `scripts/debug/debug_lm_studio_timeout.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config\n- **Used by**: [Add usage information]\n\n#### `scripts/debug/debug_preferences.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_data_handlers, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `scripts/debug/discord_connectivity_diagnostic.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.communication_manager, bot.discord_bot, core.logger\n- **Used by**: [Add usage information]\n\n#### `scripts/debug/test_dns_fallback.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.discord_bot, core.logger\n- **Used by**: [Add usage information]\n\n#### `scripts/migration/migrate_messaging_service.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.logger, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `scripts/migration/migrate_schedule_format.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_data_handlers, core.user_data_handlers, core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/migration/migrate_sent_messages.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.logger\n- **Used by**: [Add usage information]\n\n#### `scripts/migration/migrate_user_data_structure.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.file_operations, core.logger, core.personalization_management, core.user_data_handlers, core.user_data_handlers, core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/test_ai_parsing.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.enhanced_command_parser\n- **Used by**: [Add usage information]\n\n#### `scripts/test_ai_raw.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot\n- **Used by**: [Add usage information]\n\n#### `scripts/test_centralized_config.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot, bot.enhanced_command_parser, core.config\n- **Used by**: [Add usage information]\n\n#### `scripts/test_comprehensive_fixes.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.enhanced_command_parser, bot.interaction_handlers, bot.interaction_manager, core.logger\n- **Used by**: [Add usage information]\n\n#### `scripts/test_discord_commands.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.enhanced_command_parser, bot.interaction_handlers, core.logger, core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/test_discord_connection.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.base_channel, bot.discord_bot\n- **Used by**: [Add usage information]\n\n#### `scripts/test_enhanced_discord_commands.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.enhanced_command_parser, bot.interaction_handlers, core.logger\n- **Used by**: [Add usage information]\n\n#### `scripts/test_enhanced_parser_direct.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.enhanced_command_parser\n- **Used by**: [Add usage information]\n\n#### `scripts/test_task_response_formatting.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.enhanced_command_parser, bot.interaction_handlers, bot.interaction_handlers, bot.interaction_manager, core.logger\n- **Used by**: [Add usage information]\n\n#### `scripts/testing/ai/test_ai_with_clear_cache.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot\n- **Used by**: [Add usage information]\n\n#### `scripts/testing/ai/test_comprehensive_ai.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot\n- **Used by**: [Add usage information]\n\n#### `scripts/testing/ai/test_data_integrity.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/testing/ai/test_lm_studio.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot, core.config\n- **Used by**: [Add usage information]\n\n#### `scripts/testing/ai/test_new_modules.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.message_management, core.response_tracking, core.schedule_management, core.service_utilities, core.user_management, core.validation\n- **Used by**: [Add usage information]\n\n#### `scripts/testing/test_category_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: ui.dialogs.category_management_dialog\n- **Used by**: [Add usage information]\n\n#### `scripts/testing/test_migration.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, scripts.migrate_user_data_structure\n- **Used by**: [Add usage information]\n\n#### `scripts/testing/test_user_data_analysis.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot\n- **Used by**: [Add usage information]\n\n#### `scripts/testing/test_utils_functions.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.utils, core.utils, core.utils, core.utils, core.utils\n- **Used by**: [Add usage information]\n\n#### `scripts/testing/validate_config.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config\n- **Used by**: [Add usage information]\n\n#### `scripts/utilities/add_checkin_schedules.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.logger, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `scripts/utilities/check_checkin_schedules.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.schedule_management, core.user_data_handlers, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `scripts/utilities/cleanup/cleanup_test_data.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.logger\n- **Used by**: [Add usage information]\n\n#### `scripts/utilities/cleanup/cleanup_user_message_files.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.file_operations, core.logger, core.message_management, core.user_data_handlers, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `scripts/utilities/cleanup_duplicate_messages.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config\n- **Used by**: [Add usage information]\n\n#### `scripts/utilities/fix_user_schedules.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/utilities/rebuild_index.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_data_manager\n- **Used by**: [Add usage information]\n\n#### `scripts/utilities/restore_custom_periods.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_data_handlers, core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/utilities/user_data_cli.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_data_manager, core.utils, core.utils\n- **Used by**: [Add usage information]\n\n#### `tasks/task_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_operations, core.logger, core.service, core.service, core.user_data_handlers, core.user_management, core.user_management, core.user_management, core.user_management\n- **Used by**: [Add usage information]\n\n#### `test_user_creation_debug.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, core.user_management, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_account_management_real_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config, core.config, core.config, core.config, core.message_management, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tasks.task_management, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_ai_chatbot_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot, bot.conversation_manager, bot.user_context_manager, core.config, core.response_tracking, core.user_data_handlers, core.user_management, core.user_management, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_communication_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.base_channel, bot.communication_manager, core.config\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_conversation_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.conversation_manager, core.user_management, core.user_management, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_discord_bot_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.base_channel, bot.conversation_manager, bot.discord_bot, core.config, core.user_management, core.user_management, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_interaction_handlers_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.interaction_handlers, core.user_data_handlers, core.user_management, core.user_management, core.user_management, core.user_management, tasks.task_management, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_message_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.message_management\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_response_tracking_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.response_tracking\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_schedule_management_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.schedule_management, core.schedule_management, core.schedule_management, core.schedule_management\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_scheduler_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.scheduler\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_service_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.service\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_service_utilities_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.service_utilities, core.service_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_task_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_ui_app_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: ui.ui_app_qt\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_user_context_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.user_context_manager, core.user_management, core.user_management, tests.test_utilities, user.user_context, user.user_preferences\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_utilities_demo.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config, core.config, core.config, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/conftest.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.user_data_manager\n- **Used by**: [Add usage information]\n\n#### `tests/integration/test_account_lifecycle.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_management, core.user_management, core.user_management, core.user_management, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/integration/test_account_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_data_validation, user.user_context\n- **Used by**: [Add usage information]\n\n#### `tests/integration/test_user_creation.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_data_handlers, core.user_data_validation, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/test_utilities.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config, core.config, core.file_operations, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_account_creation_ui.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_data_validation, core.user_management, tests.test_utilities, tests.test_utilities, tests.test_utilities, ui.dialogs.account_creator_dialog, ui.widgets.category_selection_widget, ui.widgets.channel_selection_widget, ui.widgets.checkin_settings_widget, ui.widgets.task_settings_widget\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_dialogs.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.channel_registry, bot.communication_manager, core.user_data_handlers, core.user_data_handlers, ui.dialogs.account_creator_dialog, ui.dialogs.user_profile_dialog\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_cleanup.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.logger\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_config.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_error_handling.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_file_operations.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.error_handling, core.file_operations, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_user_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_data_handlers, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_validation.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_validation\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/account_creator_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.file_operations, core.file_operations, core.logger, core.message_management, core.user_data_manager, core.user_data_validation, core.user_data_validation, core.user_data_validation, core.user_data_validation, core.user_management, tasks.task_management, ui.dialogs.user_profile_dialog, ui.dialogs.user_profile_dialog, ui.generated.account_creator_dialog_pyqt, ui.widgets.category_selection_widget, ui.widgets.channel_selection_widget, ui.widgets.checkin_settings_widget, ui.widgets.task_settings_widget, user.user_context\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/category_management_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.user_data_handlers, core.user_data_handlers, ui.generated.category_management_dialog_pyqt, ui.widgets.category_selection_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/channel_management_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, core.user_data_validation, ui.generated.channel_management_dialog_pyqt, ui.widgets.channel_selection_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/checkin_management_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.user_data_handlers, core.user_data_handlers, core.user_data_validation, ui.generated.checkin_management_dialog_pyqt, ui.widgets.checkin_settings_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/schedule_editor_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.ui_management, core.user_data_validation, ui.generated.schedule_editor_dialog_pyqt, ui.widgets.period_row_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/task_completion_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, ui.generated.task_completion_dialog_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/task_crud_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, ui.dialogs.task_completion_dialog, ui.dialogs.task_edit_dialog, ui.dialogs.task_edit_dialog, ui.generated.task_crud_dialog_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/task_edit_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, tasks.task_management, ui.generated.task_edit_dialog_pyqt, ui.widgets.tag_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/task_management_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.user_data_handlers, core.user_data_handlers, core.user_data_validation, tasks.task_management, ui.generated.task_management_dialog_pyqt, ui.widgets.task_settings_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/user_profile_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.user_data_handlers, core.user_data_validation, core.user_management, ui.generated.user_profile_management_dialog_pyqt, ui.generated.user_profile_settings_widget_pyqt, ui.widgets.dynamic_list_container, ui.widgets.user_profile_settings_widget\n- **Used by**: [Add usage information]\n\n#### `ui/ui_app_qt.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.channel_registry, bot.communication_manager, bot.communication_manager, core.auto_cleanup, core.auto_cleanup, core.config, core.config, core.config, core.config, core.config, core.config, core.error_handling, core.logger, core.logger, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_data_validation, ui.dialogs.account_creator_dialog, ui.dialogs.category_management_dialog, ui.dialogs.channel_management_dialog, ui.dialogs.checkin_management_dialog, ui.dialogs.schedule_editor_dialog, ui.dialogs.task_crud_dialog, ui.dialogs.task_management_dialog, ui.dialogs.user_profile_dialog, ui.generated.admin_panel_pyqt, user.user_context\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/category_selection_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_validation, ui.generated.category_selection_widget_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/channel_selection_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_management, ui.generated.channel_selection_widget_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/checkin_settings_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.ui_management, core.user_data_handlers, core.user_data_handlers, ui.generated.checkin_settings_widget_pyqt, ui.widgets.period_row_widget\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/dynamic_list_container.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_management, ui.widgets.dynamic_list_field\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/dynamic_list_field.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: ui.generated.dynamic_list_field_template_pyqt, ui.widgets.dynamic_list_container, ui.widgets.dynamic_list_container, ui.widgets.dynamic_list_container\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/period_row_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, ui.generated.period_row_template_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/tag_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, tasks.task_management, ui.generated.tag_widget_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/task_settings_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.ui_management, core.user_data_handlers, tasks.task_management, ui.generated.task_settings_widget_pyqt, ui.widgets.period_row_widget, ui.widgets.tag_widget\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/user_profile_settings_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_management, ui.generated.user_profile_settings_widget_pyqt, ui.widgets.dynamic_list_container\n- **Used by**: [Add usage information]\n\n#### `user/user_context.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.user_data_handlers, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `user/user_preferences.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n[CIRC] CIRCULAR DEPENDENCY ANALYSIS:\n   [OK] No circular dependencies detected\n",
      "error": ""
    },
    "analyze_documentation": {
      "success": true,
      "output": "[DOC] Analyzing documentation files...\n\n[STATS] DOCUMENTATION ANALYSIS REPORT\n============================================================\n\n[FILES] Files Found: 8\n   - ARCHITECTURE.md\n   - DEVELOPMENT_WORKFLOW.md\n   - DOCUMENTATION_GUIDE.md\n   - FUNCTION_REGISTRY_DETAIL.md\n   - HOW_TO_RUN.md\n   - MODULE_DEPENDENCIES_DETAIL.md\n   - QUICK_REFERENCE.md\n   - TODO.md\n\n[INFO] FILE PURPOSES & CONTENT:\n\n[FILE] ARCHITECTURE.md\n   Length: 6,812 characters\n   Sections: 11\n   Main sections: Introduction, Directory Structure & Key Modules, User Data Model & File Structure, Data Handling Patterns, Key Modules & Responsibilities\n\n[FILE] DEVELOPMENT_WORKFLOW.md\n   Length: 7,335 characters\n   Sections: 33\n   Main sections: Introduction, ?? Safety First, ? Best Practices Summary, Before Making Changes, During Development\n\n[FILE] DOCUMENTATION_GUIDE.md\n   Length: 7,716 characters\n   Sections: 24\n   Main sections: Introduction, ? Documentation Summary Table, ? Documentation Categories, ? AI-Focused Documentation, ? User-Focused Documentation\n\n[FILE] FUNCTION_REGISTRY_DETAIL.md\n   Length: 258,684 characters\n   Sections: 19\n   Main sections: Introduction, ? **Overview**, **Function Documentation Coverage: 93.8% ?? NEEDS ATTENTION**, ? **Function Categories**, **Core System Functions** (294)\n\n[FILE] HOW_TO_RUN.md\n   Length: 4,586 characters\n   Sections: 23\n   Main sections: Introduction, ? Quick Start (Recommended), Step 1: Set up Virtual Environment, Step 2: Install Dependencies, Step 3: Configure Environment (Optional)\n\n[FILE] MODULE_DEPENDENCIES_DETAIL.md\n   Length: 160,408 characters\n   Sections: 13\n   Main sections: Introduction, ? **Overview**, **Module Dependencies Coverage: 100.0% ? COMPLETED**, ? **Import Statistics**, ? **Module Dependencies by Directory**\n\n[FILE] QUICK_REFERENCE.md\n   Length: 5,895 characters\n   Sections: 30\n   Main sections: Introduction, ? Essential Commands, Running the App, Testing, Development\n\n[FILE] TODO.md\n   Length: 2,430 characters\n   Sections: 14\n   Main sections: Introduction, High Priority, Discord Bot Responsiveness ? **COMPLETED**, Channel Interaction Implementation Plan ? **COMPLETED**, LM Studio AI Model Configuration ? **COMPLETED**\n\n[DIR] COMMON TOPICS ACROSS FILES:\n\n   Setup Installation:\n      - ARCHITECTURE.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - FUNCTION_REGISTRY_DETAIL.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - TODO.md\n      - MODULE_DEPENDENCIES_DETAIL.md\n\n   Development Workflow:\n      - ARCHITECTURE.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - FUNCTION_REGISTRY_DETAIL.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - MODULE_DEPENDENCIES_DETAIL.md\n\n   Testing:\n      - ARCHITECTURE.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - FUNCTION_REGISTRY_DETAIL.md\n      - QUICK_REFERENCE.md\n      - TODO.md\n      - MODULE_DEPENDENCIES_DETAIL.md\n\n   Ui Migration:\n      - ARCHITECTURE.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - FUNCTION_REGISTRY_DETAIL.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - TODO.md\n      - MODULE_DEPENDENCIES_DETAIL.md\n\n   Architecture:\n      - ARCHITECTURE.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - FUNCTION_REGISTRY_DETAIL.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - MODULE_DEPENDENCIES_DETAIL.md\n\n   Troubleshooting:\n      - ARCHITECTURE.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - FUNCTION_REGISTRY_DETAIL.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - TODO.md\n      - MODULE_DEPENDENCIES_DETAIL.md\n\n   Code Quality:\n      - ARCHITECTURE.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - FUNCTION_REGISTRY_DETAIL.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - MODULE_DEPENDENCIES_DETAIL.md\n\n   Project Structure:\n      - ARCHITECTURE.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - FUNCTION_REGISTRY_DETAIL.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - TODO.md\n      - MODULE_DEPENDENCIES_DETAIL.md\n\n[IDEA] CONSOLIDATION RECOMMENDATIONS:\n\n[REDUNDANT] REDUNDANT INFORMATION:\n   Sections appearing in multiple files:\n      - Introduction\n      - Testing\n      - `bot/` - Communication Channel Implementations\n      - `root/` - Root Files\n      - `tasks/` - Task Management\n      - `tests/` - Test Files\n      - `ui/` - User Interface Components\n      - `user/` - User Data and Context\n      - ? **Overview**\n\n[STRUCTURE] RECOMMENDED NEW STRUCTURE:\n   [FILE] README.md - Project overview and quick start\n   [FILE] SETUP.md - Installation and setup instructions\n   [FILE] DEVELOPMENT.md - Development workflow and guidelines\n   [FILE] ARCHITECTURE.md - System architecture and design\n   [FILE] API.md - Function registry and module dependencies\n   [FILE] CHANGELOG.md - Version history and changes\n   [FILE] TODO.md - Current priorities and planned work\n",
      "error": ""
    }
  }
}