{
  "timestamp": "2025-07-16T02:47:26.204968",
  "results": [
    {
      "success": true,
      "output": "[SCAN] Scanning for all functions...\nError parsing core\\logger.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing bot\\communication_manager.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing bot\\discord_bot.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing bot\\telegram_bot.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nFound 1205 functions.\n\n=== FUNCTION DISCOVERY SUMMARY ===\n\nHANDLERS (448):\n  - get_last_cleanup_timestamp (file: auto_cleanup.py, complexity: 57)\n  - update_cleanup_timestamp (file: auto_cleanup.py, complexity: 63)\n  - get_cleanup_status (file: auto_cleanup.py, complexity: 102)\n  - create_automatic_backup (file: backup_manager.py, complexity: 63)\n  - validate_system_state (file: backup_manager.py, complexity: 166)\n  - create_backup (file: backup_manager.py, complexity: 183)\n  - _create_backup_manifest (file: backup_manager.py, complexity: 86)\n  - _get_backup_info (file: backup_manager.py, complexity: 181)\n  - validate_backup (file: backup_manager.py, complexity: 249)\n  - get_mood_trends (file: checkin_analytics.py, complexity: 381)\n  ...and 438 more.\n\nTESTS (300):\n  - verify_file_access (file: file_operations.py, complexity: 48)\n  - check_and_fix_logging (file: service.py, complexity: 353)\n  - check_test_message_requests (file: service.py, complexity: 270)\n  - cleanup_test_message_requests (file: service.py, complexity: 105)\n  - check_reschedule_requests (file: service.py, complexity: 315)\n  - _test_lm_studio_connection (file: ai_chatbot.py, complexity: 145)\n  - _test_smtp_connection (file: email_bot.py, complexity: 31)\n  - _test_imap_connection (file: email_bot.py, complexity: 30)\n  - check_days_all_selected (file: account_manager.py, complexity: 76)\n  - check_periods_all_selected (file: account_manager.py, complexity: 76)\n  ...and 290 more.\n\nCOMPLEX (318):\n  - should_run_cleanup (file: auto_cleanup.py, complexity: 96)\n  - find_pycache_dirs (file: auto_cleanup.py, complexity: 63)\n  - find_pyc_files (file: auto_cleanup.py, complexity: 73)\n  - calculate_cache_size (file: auto_cleanup.py, complexity: 158)\n  - perform_cleanup (file: auto_cleanup.py, complexity: 302)\n  - auto_cleanup_if_needed (file: auto_cleanup.py, complexity: 51)\n  - perform_safe_operation (file: backup_manager.py, complexity: 107)\n  - ensure_backup_directory (file: backup_manager.py, complexity: 55)\n  - _backup_user_data (file: backup_manager.py, complexity: 95)\n  - _backup_config_files (file: backup_manager.py, complexity: 72)\n  ...and 308 more.\n\nUNDOCUMENTED (64):\n  - __init__ (file: backup_manager.py, complexity: 30)\n  - __init__ (file: checkin_analytics.py, complexity: 4)\n  - __init__ (file: error_handling.py, complexity: 23)\n  - __init__ (file: error_handling.py, complexity: 12)\n  - __init__ (file: error_handling.py, complexity: 12)\n  - __init__ (file: error_handling.py, complexity: 44)\n  - __init__ (file: error_handling.py, complexity: 50)\n  - __enter__ (file: error_handling.py, complexity: 6)\n  - __exit__ (file: error_handling.py, complexity: 32)\n  - __init__ (file: scheduler.py, complexity: 44)\n  ...and 54 more.\n\nOTHER (75):\n  - _restore_config_files (file: backup_manager.py, complexity: 49)\n  - recover (file: error_handling.py, complexity: 24)\n  - schedule_task_reminder (file: scheduler.py, complexity: 24)\n  - main (file: service.py, complexity: 20)\n  - period_name_for_storage (file: ui_management.py, complexity: 48)\n  - backup_user_data (file: user_data_manager.py, complexity: 23)\n  - export_user_data (file: user_data_manager.py, complexity: 31)\n  - rebuild_user_index (file: user_data_manager.py, complexity: 12)\n  - clear_personalization_cache (file: user_management.py, complexity: 19)\n  - is_valid_email (file: validation.py, complexity: 35)\n  ...and 65 more.\n\nTip: Use this output to quickly find handlers, tests, complex, or undocumented functions.\n",
      "error": "",
      "script": "function_discovery.py"
    },
    {
      "success": true,
      "output": "[SCAN] Gathering actionable insights for AI decision-making...\nError parsing core\\logger.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing bot\\communication_manager.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing bot\\discord_bot.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing bot\\telegram_bot.py: invalid non-printable character U+FEFF (<unknown>, line 1)\n\n=== AI DECISION SUPPORT DASHBOARD ===\nTotal functions: 1205\n\n[WARN] High Complexity Functions (>50 nodes): 858\n  - get_last_cleanup_timestamp (file: auto_cleanup.py, complexity: 57)\n  - update_cleanup_timestamp (file: auto_cleanup.py, complexity: 63)\n  - should_run_cleanup (file: auto_cleanup.py, complexity: 96)\n  - find_pycache_dirs (file: auto_cleanup.py, complexity: 63)\n  - find_pyc_files (file: auto_cleanup.py, complexity: 73)\n  - calculate_cache_size (file: auto_cleanup.py, complexity: 158)\n  - perform_cleanup (file: auto_cleanup.py, complexity: 302)\n  - auto_cleanup_if_needed (file: auto_cleanup.py, complexity: 51)\n  - get_cleanup_status (file: auto_cleanup.py, complexity: 102)\n  - create_automatic_backup (file: backup_manager.py, complexity: 63)\n  ...and 848 more.\n\n[DOC] Undocumented Handlers: 86\n  - validate_telegram_config (file: config.py)\n  - validate_email_config (file: config.py)\n  - validate_discord_config (file: config.py)\n  - can_handle (file: error_handling.py)\n  - can_handle (file: error_handling.py)\n  - delete_message (file: message_management.py)\n  - get_timestamp_for_sorting (file: message_management.py)\n  - set_wake_timer (file: scheduler.py)\n  - set_schedule_period_active (file: schedule_management.py)\n  - delete_schedule_period (file: schedule_management.py)\n  ...and 76 more.\n\n[DUPE] Duplicate Function Names: 111\n  - __init__: backup_manager.py, checkin_analytics.py, config.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, scheduler.py, service.py, service_utilities.py, user_data_manager.py, ai_chatbot.py, ai_chatbot.py, base_channel.py, conversation_manager.py, email_bot.py, user_context_manager.py, account_creator.py, account_manager.py, account_manager.py, ui_app.py, ui_app.py, ui_app_qt.py, ui_app_qt.py, account_creator_dialog.py, admin_panel.py, category_management_dialog.py, channel_management_dialog.py, checkin_management_dialog.py, schedule_editor_dialog.py, task_management_dialog.py, user_profile_dialog.py, category_selection_widget.py, channel_selection_widget.py, checkin_settings_widget.py, period_row_widget.py, task_settings_widget.py, user_profile_settings_widget.py, user_preferences.py, legacy_schedule_editor_qt.py, migrate_user_data_structure.py, test_cleanup.py\n  - create_backup: backup_manager.py, cleanup_duplicate_messages.py\n  - get_available_channels: config.py, channel_factory.py\n  - can_handle: error_handling.py, error_handling.py, error_handling.py\n  - recover: error_handling.py, error_handling.py, error_handling.py\n  ...and 106 more.\n\n=== SUGGESTED NEXT STEPS ===\n- Refactor high-complexity functions for maintainability.\n- Add docstrings to undocumented handler/utility functions.\n- Review duplicate function names for possible consolidation or renaming.\n\nTip: Use this dashboard before major refactoring, documentation, or architectural changes.\n",
      "error": "",
      "script": "decision_support.py"
    },
    {
      "success": true,
      "output": "[SCAN] Scanning all Python files...\nError parsing C:\\Users\\Julie\\projects\\MHM\\MHM\\core\\logger.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing C:\\Users\\Julie\\projects\\MHM\\MHM\\core\\logger.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing C:\\Users\\Julie\\projects\\MHM\\MHM\\bot\\communication_manager.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing C:\\Users\\Julie\\projects\\MHM\\MHM\\bot\\communication_manager.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing C:\\Users\\Julie\\projects\\MHM\\MHM\\bot\\discord_bot.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing C:\\Users\\Julie\\projects\\MHM\\MHM\\bot\\discord_bot.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing C:\\Users\\Julie\\projects\\MHM\\MHM\\bot\\telegram_bot.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing C:\\Users\\Julie\\projects\\MHM\\MHM\\bot\\telegram_bot.py: invalid non-printable character U+FEFF (<unknown>, line 1)\n[DOC] Parsing FUNCTION_REGISTRY.md...\nError parsing FUNCTION_REGISTRY.md: [Errno 2] No such file or directory: 'C:\\\\Users\\\\Julie\\\\projects\\\\MHM\\\\MHM\\\\FUNCTION_REGISTRY.md'\n\n================================================================================\nFUNCTION REGISTRY AUDIT REPORT\n================================================================================\n\n[STATS] OVERALL STATISTICS:\n   Files scanned: 124\n   Functions found: 1205\n   Classes found: 113\n   Functions documented: 0\n   Coverage: 0.0%\n\n[MISS] MISSING FROM REGISTRY:\n   [DIR] core/auto_cleanup.py - ENTIRE FILE MISSING\n   [DIR] core/backup_manager.py - ENTIRE FILE MISSING\n   [DIR] core/checkin_analytics.py - ENTIRE FILE MISSING\n   [DIR] core/config.py - ENTIRE FILE MISSING\n   [DIR] core/error_handling.py - ENTIRE FILE MISSING\n   [DIR] core/file_operations.py - ENTIRE FILE MISSING\n   [DIR] core/logger.py - ENTIRE FILE MISSING\n   [DIR] core/message_management.py - ENTIRE FILE MISSING\n   [DIR] core/response_tracking.py - ENTIRE FILE MISSING\n   [DIR] core/scheduler.py - ENTIRE FILE MISSING\n   [DIR] core/schedule_management.py - ENTIRE FILE MISSING\n   [DIR] core/service.py - ENTIRE FILE MISSING\n   [DIR] core/service_utilities.py - ENTIRE FILE MISSING\n   [DIR] core/ui_management.py - ENTIRE FILE MISSING\n   [DIR] core/user_data_manager.py - ENTIRE FILE MISSING\n   [DIR] core/user_management.py - ENTIRE FILE MISSING\n   [DIR] core/validation.py - ENTIRE FILE MISSING\n   [DIR] bot/ai_chatbot.py - ENTIRE FILE MISSING\n   [DIR] bot/base_channel.py - ENTIRE FILE MISSING\n   [DIR] bot/channel_factory.py - ENTIRE FILE MISSING\n   [DIR] bot/channel_registry.py - ENTIRE FILE MISSING\n   [DIR] bot/communication_manager.py - ENTIRE FILE MISSING\n   [DIR] bot/conversation_manager.py - ENTIRE FILE MISSING\n   [DIR] bot/discord_bot.py - ENTIRE FILE MISSING\n   [DIR] bot/email_bot.py - ENTIRE FILE MISSING\n   [DIR] bot/telegram_bot.py - ENTIRE FILE MISSING\n   [DIR] bot/user_context_manager.py - ENTIRE FILE MISSING\n   [DIR] ui/account_creator.py - ENTIRE FILE MISSING\n   [DIR] ui/account_manager.py - ENTIRE FILE MISSING\n   [DIR] ui/ui_app.py - ENTIRE FILE MISSING\n   [DIR] ui/ui_app_qt.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/account_creator_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/admin_panel.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/category_management_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/channel_management_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/checkin_management_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/schedule_editor_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/task_management_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/user_profile_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/account_creator_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/admin_panel_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/category_management_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/category_selection_widget_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/channel_management_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/channel_selection_widget_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/checkin_element_template_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/checkin_management_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/checkin_settings_widget_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/period_row_template_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/schedule_editor_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/task_management_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/task_settings_widget_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/user_profile_management_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/user_profile_settings_widget_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/widgets/category_selection_widget.py - ENTIRE FILE MISSING\n   [DIR] ui/widgets/channel_selection_widget.py - ENTIRE FILE MISSING\n   [DIR] ui/widgets/checkin_settings_widget.py - ENTIRE FILE MISSING\n   [DIR] ui/widgets/period_row_widget.py - ENTIRE FILE MISSING\n   [DIR] ui/widgets/task_settings_widget.py - ENTIRE FILE MISSING\n   [DIR] ui/widgets/user_profile_settings_widget.py - ENTIRE FILE MISSING\n   [DIR] user/user_context.py - ENTIRE FILE MISSING\n   [DIR] user/user_preferences.py - ENTIRE FILE MISSING\n   [DIR] tasks/task_management.py - ENTIRE FILE MISSING\n   [DIR] scripts/add_checkin_schedules.py - ENTIRE FILE MISSING\n   [DIR] scripts/analyze_documentation_overlap.py - ENTIRE FILE MISSING\n   [DIR] scripts/audit_function_registry.py - ENTIRE FILE MISSING\n   [DIR] scripts/audit_module_dependencies.py - ENTIRE FILE MISSING\n   [DIR] scripts/check_checkin_schedules.py - ENTIRE FILE MISSING\n   [DIR] scripts/cleanup_real_test_users.py - ENTIRE FILE MISSING\n   [DIR] scripts/cleanup_test_users.py - ENTIRE FILE MISSING\n   [DIR] scripts/cleanup_user_message_files.py - ENTIRE FILE MISSING\n   [DIR] scripts/clear_cache_and_test_discord.py - ENTIRE FILE MISSING\n   [DIR] scripts/compare_functions.py - ENTIRE FILE MISSING\n   [DIR] scripts/compare_function_lengths.py - ENTIRE FILE MISSING\n   [DIR] scripts/consolidate_message_days.py - ENTIRE FILE MISSING\n   [DIR] scripts/consolidate_message_time_periods.py - ENTIRE FILE MISSING\n   [DIR] scripts/debug_comprehensive_prompt.py - ENTIRE FILE MISSING\n   [DIR] scripts/debug_lm_studio_timeout.py - ENTIRE FILE MISSING\n   [DIR] scripts/debug_preferences.py - ENTIRE FILE MISSING\n   [DIR] scripts/fix_schedule_dict_keys.py - ENTIRE FILE MISSING\n   [DIR] scripts/fix_user_schedules.py - ENTIRE FILE MISSING\n   [DIR] scripts/legacy_schedule_editor_qt.py - ENTIRE FILE MISSING\n   [DIR] scripts/migrate_data_structure.py - ENTIRE FILE MISSING\n   [DIR] scripts/migrate_messaging_service.py - ENTIRE FILE MISSING\n   [DIR] scripts/migrate_schedules_cleanup.py - ENTIRE FILE MISSING\n   [DIR] scripts/migrate_schedule_format.py - ENTIRE FILE MISSING\n   [DIR] scripts/migrate_sent_messages.py - ENTIRE FILE MISSING\n   [DIR] scripts/migrate_user_data_structure.py - ENTIRE FILE MISSING\n   [DIR] scripts/rebuild_index.py - ENTIRE FILE MISSING\n   [DIR] scripts/restore_custom_periods.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_ai_with_clear_cache.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_category_dialog.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_checkin_fix.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_comprehensive_ai.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_data_integrity.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_lm_studio.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_migration.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_new_modules.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_period_widget.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_schedule_editor.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_user_data_analysis.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_utils_functions.py - ENTIRE FILE MISSING\n   [DIR] scripts/update_default_messages_to_all.py - ENTIRE FILE MISSING\n   [DIR] scripts/validate_ai_work.py - ENTIRE FILE MISSING\n   [DIR] scripts/validate_config.py - ENTIRE FILE MISSING\n   [DIR] scripts/utilities/cleanup_duplicate_messages.py - ENTIRE FILE MISSING\n   [DIR] scripts/utilities/cleanup_test_data.py - ENTIRE FILE MISSING\n   [DIR] scripts/utilities/user_data_cli.py - ENTIRE FILE MISSING\n   [DIR] tests/conftest.py - ENTIRE FILE MISSING\n   [DIR] tests/task_management.py - ENTIRE FILE MISSING\n   [DIR] tests/test_account_creation_ui.py - ENTIRE FILE MISSING\n   [DIR] tests/test_cleanup.py - ENTIRE FILE MISSING\n   [DIR] tests/test_communication_manager.py - ENTIRE FILE MISSING\n   [DIR] tests/test_config.py - ENTIRE FILE MISSING\n   [DIR] tests/test_error_handling.py - ENTIRE FILE MISSING\n   [DIR] tests/test_file_operations.py - ENTIRE FILE MISSING\n   [DIR] tests/test_message_management.py - ENTIRE FILE MISSING\n   [DIR] tests/test_scheduler.py - ENTIRE FILE MISSING\n   [DIR] tests/test_service.py - ENTIRE FILE MISSING\n   [DIR] tests/test_task_management.py - ENTIRE FILE MISSING\n   [DIR] tests/test_user_creation.py - ENTIRE FILE MISSING\n   [DIR] tests/test_user_management.py - ENTIRE FILE MISSING\n   [DIR] run_mhm.py - ENTIRE FILE MISSING\n   [DIR] run_tests.py - ENTIRE FILE MISSING\n\n   Total missing functions: 1205\n\n[EXTRA] EXTRA IN REGISTRY (not found in files):\n\n   Total extra functions: 0\n\n[ANALYSIS] FUNCTION ANALYSIS FOR DECISION-MAKING:\n   [WARN] HIGH COMPLEXITY FUNCTIONS (may need refactoring):\n      [NO DOC] ui/generated/user_profile_settings_widget_pyqt.py::setupUi (complexity: 3348)\n      [DOC] ui/account_manager.py::load_and_display_messages (complexity: 3038)\n      [DOC] ui/account_creator.py::__init__ (complexity: 3029)\n      [DOC] ui/account_manager.py::setup_checkin_management_window (complexity: 2805)\n      [DOC] ui/account_manager.py::load_and_display_schedule (complexity: 1979)\n      [DOC] ui/account_manager.py::setup_task_crud_window (complexity: 1815)\n      [NO DOC] ui/generated/account_creator_dialog_pyqt.py::setupUi (complexity: 1781)\n      [NO DOC] ui/generated/checkin_settings_widget_pyqt.py::setupUi (complexity: 1770)\n      [DOC] ui/account_manager.py::setup_task_management_window (complexity: 1659)\n      [NO DOC] ui/generated/admin_panel_pyqt.py::setupUi (complexity: 1657)\n   [DOC] UNDOCUMENTED FUNCTIONS (need docstrings):\n      [HANDLER] Handlers/Utilities (62):\n         - core/error_handling.py::can_handle\n         - core/error_handling.py::can_handle\n         - ui/account_manager.py::checkmark\n         - core/schedule_management.py::get_schedule_days\n         - ui/dialogs/category_management_dialog.py::get_selected_categories\n      [OTHER] Other functions (158):\n         - core/error_handling.py::__enter__\n         - core/error_handling.py::__exit__\n         - core/backup_manager.py::__init__\n         - core/checkin_analytics.py::__init__\n         - core/config.py::__init__\n   [DUPE] POTENTIAL DUPLICATE FUNCTION NAMES:\n      '__init__' found in: core/backup_manager.py, core/checkin_analytics.py, core/config.py, core/error_handling.py, core/error_handling.py, core/error_handling.py, core/error_handling.py, core/error_handling.py, core/error_handling.py, core/scheduler.py, core/service.py, core/service_utilities.py, core/user_data_manager.py, bot/ai_chatbot.py, bot/ai_chatbot.py, bot/base_channel.py, bot/conversation_manager.py, bot/email_bot.py, bot/user_context_manager.py, ui/account_creator.py, ui/account_manager.py, ui/account_manager.py, ui/ui_app.py, ui/ui_app.py, ui/ui_app_qt.py, ui/ui_app_qt.py, ui/dialogs/account_creator_dialog.py, ui/dialogs/admin_panel.py, ui/dialogs/category_management_dialog.py, ui/dialogs/channel_management_dialog.py, ui/dialogs/checkin_management_dialog.py, ui/dialogs/schedule_editor_dialog.py, ui/dialogs/task_management_dialog.py, ui/dialogs/user_profile_dialog.py, ui/widgets/category_selection_widget.py, ui/widgets/channel_selection_widget.py, ui/widgets/checkin_settings_widget.py, ui/widgets/period_row_widget.py, ui/widgets/task_settings_widget.py, ui/widgets/user_profile_settings_widget.py, user/user_preferences.py, scripts/legacy_schedule_editor_qt.py, scripts/migrate_user_data_structure.py, tests/test_cleanup.py\n      '__new__' found in: bot/ai_chatbot.py, user/user_context.py\n      '_get_active_schedules' found in: bot/user_context_manager.py, user/user_context.py\n      '_get_default_data' found in: core/error_handling.py, core/error_handling.py\n      'add_new_period' found in: ui/dialogs/schedule_editor_dialog.py, ui/widgets/task_settings_widget.py, scripts/legacy_schedule_editor_qt.py\n\n[DIR] BREAKDOWN BY DIRECTORY:\n   bot/: 10 files, 70 functions, 11 classes\n   core/: 17 files, 270 functions, 24 classes\n   dialogs/: 8 files, 85 functions, 8 classes\n   generated/: 15 files, 38 functions, 15 classes\n   root/: 2 files, 6 functions, 0 classes\n   scripts/: 42 files, 132 functions, 2 classes\n   tasks/: 1 files, 13 functions, 1 classes\n   tests/: 14 files, 288 functions, 37 classes\n   ui/: 4 files, 210 functions, 7 classes\n   user/: 2 files, 24 functions, 2 classes\n   utilities/: 3 files, 17 functions, 0 classes\n   widgets/: 6 files, 52 functions, 6 classes\n\n[GEN] GENERATING UPDATED REGISTRY SECTIONS...\n\n================================================================================\nUPDATED REGISTRY SECTIONS TO ADD:\n================================================================================\n\n### bot/ai_chatbot.py\n**Functions:**\n- `get_ai_chatbot()` - Return the shared AIChatBot instance.\n- `__init__(self, max_size, ttl)` - No description\n- `_generate_key(self, prompt, user_id)` - Generate cache key from prompt and optional user context.\n- `get(self, prompt, user_id)` - Get cached response if available and not expired.\n- `set(self, prompt, response, user_id)` - Cache a response.\n- `_cleanup_lru(self)` - Remove least recently used items.\n- `__new__(cls)` - No description\n- `__init__(self)` - No description\n- `_test_lm_studio_connection(self)` - Test connection to LM Studio server.\n- `_call_lm_studio_api(self, messages, max_tokens, temperature, timeout)` - Make an API call to LM Studio using OpenAI-compatible format.\n- `_get_contextual_fallback(self, user_prompt, user_id)` - Provide contextually aware fallback responses based on user data and prompt analysis.\nNow actually analyzes user's check-in data for meaningful responses.\n- `_get_fallback_response(self, user_prompt)` - Legacy fallback method for backwards compatibility.\n- `_get_fallback_personalized_message(self, user_id)` - Provide fallback personalized messages when AI model is not available.\n- `_optimize_prompt(self, user_prompt, context)` - Create optimized messages array for LM Studio API.\n- `_create_comprehensive_context_prompt(self, user_id, user_prompt)` - Create a comprehensive context prompt with all user data for LM Studio.\n- `_detect_mode(self, user_prompt)` - Detect whether the prompt is a command or a chat query.\n- `_create_command_parsing_prompt(self, user_prompt)` - Create a prompt instructing the model to return strict JSON.\n- `generate_response(self, user_prompt, timeout, user_id, mode)` - Generate a basic AI response from user_prompt, using LM Studio API.\nUses adaptive timeout to prevent blocking for too long with improved performance optimizations.\n- `is_ai_available(self)` - Check if the AI model is available and functional.\n- `get_ai_status(self)` - Get detailed status information about the AI system.\n- `generate_personalized_message(self, user_id, timeout)` - Generate a personalized message by examining the user's recent responses\n(daily check-in data). Uses longer timeout since this is not real-time.\n- `generate_quick_response(self, user_prompt, user_id)` - Generate a quick response for real-time chat (Discord, etc.).\nUses shorter timeout optimized for responsiveness.\n- `generate_contextual_response(self, user_id, user_prompt, timeout)` - Generate a context-aware response using comprehensive user data.\nIntegrates with existing UserContext and UserPreferences systems.\n- `_detect_resource_constraints(self)` - Detect if system is resource-constrained.\n- `_get_adaptive_timeout(self, base_timeout)` - Get adaptive timeout based on system resources.\n**Classes:**\n- `ResponseCache` - Simple in-memory cache for AI responses to avoid repeated calculations.\n  - `ResponseCache.__init__(self, max_size, ttl)` - No description\n  - `ResponseCache._generate_key(self, prompt, user_id)` - Generate cache key from prompt and optional user context.\n  - `ResponseCache.get(self, prompt, user_id)` - Get cached response if available and not expired.\n  - `ResponseCache.set(self, prompt, response, user_id)` - Cache a response.\n  - `ResponseCache._cleanup_lru(self)` - Remove least recently used items.\n- `AIChatBotSingleton` - A Singleton container for LM Studio API client (replacing GPT4All).\n  - `AIChatBotSingleton.__new__(cls)` - No description\n  - `AIChatBotSingleton.__init__(self)` - No description\n  - `AIChatBotSingleton._test_lm_studio_connection(self)` - Test connection to LM Studio server.\n  - `AIChatBotSingleton._call_lm_studio_api(self, messages, max_tokens, temperature, timeout)` - Make an API call to LM Studio using OpenAI-compatible format.\n  - `AIChatBotSingleton._get_contextual_fallback(self, user_prompt, user_id)` - Provide contextually aware fallback responses based on user data and prompt analysis.\nNow actually analyzes user's check-in data for meaningful responses.\n  - `AIChatBotSingleton._get_fallback_response(self, user_prompt)` - Legacy fallback method for backwards compatibility.\n  - `AIChatBotSingleton._get_fallback_personalized_message(self, user_id)` - Provide fallback personalized messages when AI model is not available.\n  - `AIChatBotSingleton._optimize_prompt(self, user_prompt, context)` - Create optimized messages array for LM Studio API.\n  - `AIChatBotSingleton._create_comprehensive_context_prompt(self, user_id, user_prompt)` - Create a comprehensive context prompt with all user data for LM Studio.\n  - `AIChatBotSingleton._detect_mode(self, user_prompt)` - Detect whether the prompt is a command or a chat query.\n  - `AIChatBotSingleton._create_command_parsing_prompt(self, user_prompt)` - Create a prompt instructing the model to return strict JSON.\n  - `AIChatBotSingleton.generate_response(self, user_prompt, timeout, user_id, mode)` - Generate a basic AI response from user_prompt, using LM Studio API.\nUses adaptive timeout to prevent blocking for too long with improved performance optimizations.\n  - `AIChatBotSingleton.is_ai_available(self)` - Check if the AI model is available and functional.\n  - `AIChatBotSingleton.get_ai_status(self)` - Get detailed status information about the AI system.\n  - `AIChatBotSingleton.generate_personalized_message(self, user_id, timeout)` - Generate a personalized message by examining the user's recent responses\n(daily check-in data). Uses longer timeout since this is not real-time.\n  - `AIChatBotSingleton.generate_quick_response(self, user_prompt, user_id)` - Generate a quick response for real-time chat (Discord, etc.).\nUses shorter timeout optimized for responsiveness.\n  - `AIChatBotSingleton.generate_contextual_response(self, user_id, user_prompt, timeout)` - Generate a context-aware response using comprehensive user data.\nIntegrates with existing UserContext and UserPreferences systems.\n  - `AIChatBotSingleton._detect_resource_constraints(self)` - Detect if system is resource-constrained.\n  - `AIChatBotSingleton._get_adaptive_timeout(self, base_timeout)` - Get adaptive timeout based on system resources.\n\n### bot/base_channel.py\n**Functions:**\n- `__post_init__(self)` - No description\n- `__init__(self, config)` - No description\n- `channel_type(self)` - Return whether this channel is sync or async\n- `is_ready(self)` - Check if channel is ready to send/receive messages\n- `get_status(self)` - Get current channel status\n- `get_error(self)` - Get last error message\n- `_set_status(self, status, error_message)` - Internal method to update status\n**Classes:**\n- `ChannelStatus` - No description\n- `ChannelType` - No description\n- `ChannelConfig` - Configuration for communication channels\n  - `ChannelConfig.__post_init__(self)` - No description\n- `BaseChannel` - Abstract base class for all communication channels\n  - `BaseChannel.__init__(self, config)` - No description\n  - `BaseChannel.channel_type(self)` - Return whether this channel is sync or async\n  - `BaseChannel.is_ready(self)` - Check if channel is ready to send/receive messages\n  - `BaseChannel.get_status(self)` - Get current channel status\n  - `BaseChannel.get_error(self)` - Get last error message\n  - `BaseChannel._set_status(self, status, error_message)` - Internal method to update status\n\n### bot/channel_factory.py\n**Functions:**\n- `register_channel(cls, name, channel_class)` - Register a new channel type\n- `create_channel(cls, name, config)` - Create a channel instance\n- `get_available_channels(cls)` - Get list of available channel types\n**Classes:**\n- `ChannelFactory` - Factory for creating communication channels\n  - `ChannelFactory.register_channel(cls, name, channel_class)` - Register a new channel type\n  - `ChannelFactory.create_channel(cls, name, config)` - Create a channel instance\n  - `ChannelFactory.get_available_channels(cls)` - Get list of available channel types\n\n### bot/channel_registry.py\n**Functions:**\n- `register_all_channels()` - Register all available communication channels\n\n### bot/conversation_manager.py\n**Functions:**\n- `__init__(self)` - No description\n- `handle_inbound_message(self, user_id, message_text)` - Primary entry point. Takes user's message and returns a (reply_text, completed).\n\nNow defaults to contextual chat for all messages unless user is in a specific flow\nor uses a special command.\n- `start_daily_checkin(self, user_id)` - Public method to start a daily check-in flow for a user.\nThis is the proper way to initiate check-ins from external modules.\n- `_start_dynamic_checkin(self, user_id)` - Start a dynamic check-in flow based on user preferences\n- `_get_personalized_welcome(self, user_id, question_count)` - Generate a personalized welcome message based on user history\n- `_get_next_question(self, user_id, user_state)` - Get the next question in the check-in flow\n- `_get_question_text(self, question_key, previous_data)` - Get appropriate question text based on question type and previous responses\n- `_handle_daily_checkin(self, user_id, user_state, message_text)` - Enhanced daily check-in flow with dynamic questions and better validation\n- `_validate_response(self, question_key, response)` - Validate user response based on question type\n- `_complete_checkin(self, user_id, user_state)` - Complete the check-in and provide personalized feedback\n- `_generate_completion_message(self, user_id, data)` - Generate a personalized completion message based on responses\n- `handle_contextual_question(self, user_id, message_text)` - Handle a single contextual question without entering a conversation flow.\nPerfect for one-off questions that benefit from user context.\n**Classes:**\n- `ConversationManager` - No description\n  - `ConversationManager.__init__(self)` - No description\n  - `ConversationManager.handle_inbound_message(self, user_id, message_text)` - Primary entry point. Takes user's message and returns a (reply_text, completed).\n\nNow defaults to contextual chat for all messages unless user is in a specific flow\nor uses a special command.\n  - `ConversationManager.start_daily_checkin(self, user_id)` - Public method to start a daily check-in flow for a user.\nThis is the proper way to initiate check-ins from external modules.\n  - `ConversationManager._start_dynamic_checkin(self, user_id)` - Start a dynamic check-in flow based on user preferences\n  - `ConversationManager._get_personalized_welcome(self, user_id, question_count)` - Generate a personalized welcome message based on user history\n  - `ConversationManager._get_next_question(self, user_id, user_state)` - Get the next question in the check-in flow\n  - `ConversationManager._get_question_text(self, question_key, previous_data)` - Get appropriate question text based on question type and previous responses\n  - `ConversationManager._handle_daily_checkin(self, user_id, user_state, message_text)` - Enhanced daily check-in flow with dynamic questions and better validation\n  - `ConversationManager._validate_response(self, question_key, response)` - Validate user response based on question type\n  - `ConversationManager._complete_checkin(self, user_id, user_state)` - Complete the check-in and provide personalized feedback\n  - `ConversationManager._generate_completion_message(self, user_id, data)` - Generate a personalized completion message based on responses\n  - `ConversationManager.handle_contextual_question(self, user_id, message_text)` - Handle a single contextual question without entering a conversation flow.\nPerfect for one-off questions that benefit from user context.\n\n### bot/email_bot.py\n**Functions:**\n- `__init__(self, config)` - No description\n- `channel_type(self)` - No description\n- `_test_smtp_connection(self)` - Test SMTP connection synchronously\n- `_test_imap_connection(self)` - Test IMAP connection synchronously\n- `_send_email_sync(self, recipient, message, kwargs)` - Send email synchronously\n- `_receive_emails_sync(self)` - Receive emails synchronously\n- `start(self)` - Legacy start method\n- `stop(self)` - Legacy stop method\n- `is_initialized(self)` - Legacy method for backward compatibility\n**Classes:**\n- `EmailBotError` - Custom exception for email bot-related errors.\n- `EmailBot` - No description\n  - `EmailBot.__init__(self, config)` - No description\n  - `EmailBot.channel_type(self)` - No description\n  - `EmailBot._test_smtp_connection(self)` - Test SMTP connection synchronously\n  - `EmailBot._test_imap_connection(self)` - Test IMAP connection synchronously\n  - `EmailBot._send_email_sync(self, recipient, message, kwargs)` - Send email synchronously\n  - `EmailBot._receive_emails_sync(self)` - Receive emails synchronously\n  - `EmailBot.start(self)` - Legacy start method\n  - `EmailBot.stop(self)` - Legacy stop method\n  - `EmailBot.is_initialized(self)` - Legacy method for backward compatibility\n\n### bot/user_context_manager.py\n**Functions:**\n- `__init__(self)` - No description\n- `get_current_user_context(self, include_conversation_history)` - Get context for the currently logged-in user using the existing UserContext singleton.\n\nArgs:\n    include_conversation_history: Whether to include recent conversation history\n    \nReturns:\n    Dict containing all relevant user context for current user\n- `get_user_context(self, user_id, include_conversation_history)` - Get comprehensive user context for AI conversation.\n\nArgs:\n    user_id: The user's ID\n    include_conversation_history: Whether to include recent conversation history\n    \nReturns:\n    Dict containing all relevant user context\n- `_get_user_profile(self, user_id)` - Get basic user profile information using existing user infrastructure.\n- `_get_recent_activity(self, user_id)` - Get recent user activity and responses.\n- `_get_conversation_insights(self, user_id)` - Get insights from recent chat interactions.\n- `_get_user_preferences(self, user_id)` - Get user preferences using new structure.\n- `_get_mood_trends(self, user_id)` - Analyze recent mood and energy trends.\n- `_get_active_schedules(self, schedules)` - Get list of currently active schedule periods.\n- `_get_conversation_history(self, user_id)` - Get recent conversation history with this user.\n- `add_conversation_exchange(self, user_id, user_message, ai_response)` - Add a conversation exchange to history.\n- `_get_minimal_context(self, user_id)` - Fallback minimal context if full context generation fails.\n- `format_context_for_ai(self, context)` - Format user context into a concise string for AI prompt.\n**Classes:**\n- `UserContextManager` - Manages rich user context for AI conversations.\n  - `UserContextManager.__init__(self)` - No description\n  - `UserContextManager.get_current_user_context(self, include_conversation_history)` - Get context for the currently logged-in user using the existing UserContext singleton.\n\nArgs:\n    include_conversation_history: Whether to include recent conversation history\n    \nReturns:\n    Dict containing all relevant user context for current user\n  - `UserContextManager.get_user_context(self, user_id, include_conversation_history)` - Get comprehensive user context for AI conversation.\n\nArgs:\n    user_id: The user's ID\n    include_conversation_history: Whether to include recent conversation history\n    \nReturns:\n    Dict containing all relevant user context\n  - `UserContextManager._get_user_profile(self, user_id)` - Get basic user profile information using existing user infrastructure.\n  - `UserContextManager._get_recent_activity(self, user_id)` - Get recent user activity and responses.\n  - `UserContextManager._get_conversation_insights(self, user_id)` - Get insights from recent chat interactions.\n  - `UserContextManager._get_user_preferences(self, user_id)` - Get user preferences using new structure.\n  - `UserContextManager._get_mood_trends(self, user_id)` - Analyze recent mood and energy trends.\n  - `UserContextManager._get_active_schedules(self, schedules)` - Get list of currently active schedule periods.\n  - `UserContextManager._get_conversation_history(self, user_id)` - Get recent conversation history with this user.\n  - `UserContextManager.add_conversation_exchange(self, user_id, user_message, ai_response)` - Add a conversation exchange to history.\n  - `UserContextManager._get_minimal_context(self, user_id)` - Fallback minimal context if full context generation fails.\n  - `UserContextManager.format_context_for_ai(self, context)` - Format user context into a concise string for AI prompt.\n\n### core/auto_cleanup.py\n**Functions:**\n- `get_last_cleanup_timestamp()` - Get the timestamp of the last cleanup from tracker file.\n- `update_cleanup_timestamp()` - Update the cleanup tracker file with current timestamp.\n- `should_run_cleanup(interval_days)` - Check if cleanup should run based on last cleanup time.\n- `find_pycache_dirs(root_path)` - Find all __pycache__ directories recursively.\n- `find_pyc_files(root_path)` - Find all .pyc files recursively.\n- `calculate_cache_size(pycache_dirs, pyc_files)` - Calculate total size of cache files.\n- `perform_cleanup(root_path)` - Perform the actual cleanup of cache files.\n- `auto_cleanup_if_needed(root_path, interval_days)` - Main function to check if cleanup is needed and perform it if so.\nReturns True if cleanup was performed, False if not needed.\n- `get_cleanup_status()` - Get information about the cleanup status.\n\n### core/backup_manager.py\n**Functions:**\n- `create_automatic_backup(operation_name)` - Create an automatic backup before major operations.\n\nArgs:\n    operation_name: Name of the operation being performed\n\nReturns:\n    Path to the backup file, or None if failed\n- `validate_system_state()` - Validate the current system state for consistency.\n\nReturns:\n    True if system is in a valid state, False otherwise\n- `perform_safe_operation(operation_func)` - Perform an operation with automatic backup and rollback capability.\n\nArgs:\n    operation_func: Function to perform\n    *args: Arguments for the operation function\n    **kwargs: Keyword arguments for the operation function\n\nReturns:\n    True if operation succeeded, False if it failed and was rolled back\n- `__init__(self)` - No description\n- `ensure_backup_directory(self)` - Ensure backup directory exists.\n- `create_backup(self, backup_name, include_users, include_config, include_logs)` - Create a comprehensive backup of the system.\n\nArgs:\n    backup_name: Custom name for the backup (auto-generated if None)\n    include_users: Whether to include user data\n    include_config: Whether to include configuration files\n    include_logs: Whether to include log files\n\nReturns:\n    Path to the backup file, or None if failed\n- `_backup_user_data(self, zipf)` - Backup all user data directories.\n- `_backup_config_files(self, zipf)` - Backup configuration files.\n- `_backup_log_files(self, zipf)` - Backup log files.\n- `_create_backup_manifest(self, zipf, backup_name, include_users, include_config, include_logs)` - Create a manifest file describing the backup contents.\n- `_add_directory_to_zip(self, zipf, directory, zip_path)` - Recursively add a directory to the zip file.\n- `_cleanup_old_backups(self)` - Remove old backups to keep only the most recent ones.\n- `list_backups(self)` - List all available backups with metadata.\n- `_get_backup_info(self, backup_path)` - Get information about a specific backup.\n- `restore_backup(self, backup_path, restore_users, restore_config)` - Restore from a backup file.\n\nArgs:\n    backup_path: Path to the backup file\n    restore_users: Whether to restore user data\n    restore_config: Whether to restore configuration files\n\nReturns:\n    True if restoration was successful, False otherwise\n- `_restore_user_data(self, zipf)` - Restore user data from backup.\n- `_restore_config_files(self, zipf)` - Restore configuration files from backup.\n- `validate_backup(self, backup_path)` - Validate a backup file for integrity and completeness.\n\nArgs:\n    backup_path: Path to the backup file\n\nReturns:\n    Tuple of (is_valid, list_of_errors)\n**Classes:**\n- `BackupManager` - Manages automatic backups and rollback operations.\n  - `BackupManager.__init__(self)` - No description\n  - `BackupManager.ensure_backup_directory(self)` - Ensure backup directory exists.\n  - `BackupManager.create_backup(self, backup_name, include_users, include_config, include_logs)` - Create a comprehensive backup of the system.\n\nArgs:\n    backup_name: Custom name for the backup (auto-generated if None)\n    include_users: Whether to include user data\n    include_config: Whether to include configuration files\n    include_logs: Whether to include log files\n\nReturns:\n    Path to the backup file, or None if failed\n  - `BackupManager._backup_user_data(self, zipf)` - Backup all user data directories.\n  - `BackupManager._backup_config_files(self, zipf)` - Backup configuration files.\n  - `BackupManager._backup_log_files(self, zipf)` - Backup log files.\n  - `BackupManager._create_backup_manifest(self, zipf, backup_name, include_users, include_config, include_logs)` - Create a manifest file describing the backup contents.\n  - `BackupManager._add_directory_to_zip(self, zipf, directory, zip_path)` - Recursively add a directory to the zip file.\n  - `BackupManager._cleanup_old_backups(self)` - Remove old backups to keep only the most recent ones.\n  - `BackupManager.list_backups(self)` - List all available backups with metadata.\n  - `BackupManager._get_backup_info(self, backup_path)` - Get information about a specific backup.\n  - `BackupManager.restore_backup(self, backup_path, restore_users, restore_config)` - Restore from a backup file.\n\nArgs:\n    backup_path: Path to the backup file\n    restore_users: Whether to restore user data\n    restore_config: Whether to restore configuration files\n\nReturns:\n    True if restoration was successful, False otherwise\n  - `BackupManager._restore_user_data(self, zipf)` - Restore user data from backup.\n  - `BackupManager._restore_config_files(self, zipf)` - Restore configuration files from backup.\n  - `BackupManager.validate_backup(self, backup_path)` - Validate a backup file for integrity and completeness.\n\nArgs:\n    backup_path: Path to the backup file\n\nReturns:\n    Tuple of (is_valid, list_of_errors)\n\n### core/checkin_analytics.py\n**Functions:**\n- `__init__(self)` - No description\n- `get_mood_trends(self, user_id, days)` - Analyze mood trends over the specified period\n- `get_habit_analysis(self, user_id, days)` - Analyze habit patterns from check-in data\n- `get_sleep_analysis(self, user_id, days)` - Analyze sleep patterns from check-in data\n- `get_wellness_score(self, user_id, days)` - Calculate a comprehensive wellness score based on recent check-ins\n- `_get_mood_distribution(self, moods)` - Calculate distribution of mood scores\n- `_calculate_streak(self, checkins, habit_key)` - Calculate current and best streaks for a habit\n- `_get_habit_status(self, completion_rate)` - Get status description for habit completion rate\n- `_calculate_overall_completion(self, habit_stats)` - Calculate overall habit completion rate\n- `_calculate_sleep_consistency(self, hours)` - Calculate sleep consistency (lower variance = more consistent)\n- `_get_sleep_recommendations(self, avg_hours, avg_quality, poor_days)` - Generate sleep recommendations\n- `_calculate_mood_score(self, checkins)` - Calculate mood score (0-100)\n- `_calculate_habit_score(self, checkins)` - Calculate habit score (0-100)\n- `_calculate_sleep_score(self, checkins)` - Calculate sleep score (0-100)\n- `_get_score_level(self, score)` - Get wellness score level description\n- `_get_wellness_recommendations(self, mood_score, habit_score, sleep_score)` - Generate wellness recommendations based on component scores\n**Classes:**\n- `CheckinAnalytics` - No description\n  - `CheckinAnalytics.__init__(self)` - No description\n  - `CheckinAnalytics.get_mood_trends(self, user_id, days)` - Analyze mood trends over the specified period\n  - `CheckinAnalytics.get_habit_analysis(self, user_id, days)` - Analyze habit patterns from check-in data\n  - `CheckinAnalytics.get_sleep_analysis(self, user_id, days)` - Analyze sleep patterns from check-in data\n  - `CheckinAnalytics.get_wellness_score(self, user_id, days)` - Calculate a comprehensive wellness score based on recent check-ins\n  - `CheckinAnalytics._get_mood_distribution(self, moods)` - Calculate distribution of mood scores\n  - `CheckinAnalytics._calculate_streak(self, checkins, habit_key)` - Calculate current and best streaks for a habit\n  - `CheckinAnalytics._get_habit_status(self, completion_rate)` - Get status description for habit completion rate\n  - `CheckinAnalytics._calculate_overall_completion(self, habit_stats)` - Calculate overall habit completion rate\n  - `CheckinAnalytics._calculate_sleep_consistency(self, hours)` - Calculate sleep consistency (lower variance = more consistent)\n  - `CheckinAnalytics._get_sleep_recommendations(self, avg_hours, avg_quality, poor_days)` - Generate sleep recommendations\n  - `CheckinAnalytics._calculate_mood_score(self, checkins)` - Calculate mood score (0-100)\n  - `CheckinAnalytics._calculate_habit_score(self, checkins)` - Calculate habit score (0-100)\n  - `CheckinAnalytics._calculate_sleep_score(self, checkins)` - Calculate sleep score (0-100)\n  - `CheckinAnalytics._get_score_level(self, score)` - Get wellness score level description\n  - `CheckinAnalytics._get_wellness_recommendations(self, mood_score, habit_score, sleep_score)` - Generate wellness recommendations based on component scores\n\n### core/config.py\n**Functions:**\n- `validate_core_paths()` - Validate that all core paths are accessible and can be created if needed.\n- `validate_ai_configuration()` - Validate AI-related configuration settings.\n- `validate_communication_channels()` - Validate communication channel configurations.\n- `validate_logging_configuration()` - Validate logging configuration.\n- `validate_scheduler_configuration()` - Validate scheduler configuration.\n- `validate_file_organization_settings()` - Validate file organization settings.\n- `validate_environment_variables()` - Check for common environment variable issues.\n- `validate_all_configuration()` - Comprehensive configuration validation that checks all aspects of the configuration.\n\nReturns:\n    Dict containing validation results with the following structure:\n    {\n        'valid': bool,\n        'errors': List[str],\n        'warnings': List[str],\n        'available_channels': List[str],\n        'summary': str\n    }\n- `validate_and_raise_if_invalid()` - Validate configuration and raise ConfigValidationError if invalid.\n\nReturns:\n    List of available communication channels if validation passes.\n\nRaises:\n    ConfigValidationError: If configuration is invalid with detailed error information.\n- `print_configuration_report()` - Print a detailed configuration report to the console.\n- `get_user_data_dir(user_id)` - Get the data directory for a specific user.\n- `get_user_file_path(user_id, file_type)` - Get the file path for a specific user file type.\n- `ensure_user_directory(user_id)` - Ensure user directory exists if using subdirectories.\n- `validate_telegram_config()` - No description\n- `validate_email_config()` - No description\n- `validate_discord_config()` - No description\n- `get_available_channels()` - Get list of available communication channels based on configuration.\n- `validate_minimum_config()` - Ensure at least one communication channel is configured\n- `__init__(self, message, missing_configs, warnings)` - No description\n**Classes:**\n- `ConfigValidationError` - Custom exception for configuration validation errors with detailed information.\n  - `ConfigValidationError.__init__(self, message, missing_configs, warnings)` - No description\n\n### core/error_handling.py\n**Functions:**\n- `handle_errors(operation, context, user_friendly, default_return)` - Decorator to automatically handle errors in functions.\n\nArgs:\n    operation: Description of the operation (defaults to function name)\n    context: Additional context to pass to error handler\n    user_friendly: Whether to show user-friendly error messages\n    default_return: Value to return if error occurs and can't be recovered\n- `safe_file_operation(file_path, operation, user_id, category)` - Context manager for safe file operations with automatic error handling.\n\nUsage:\n    with safe_file_operation(\"path/to/file.json\", \"loading user data\", user_id=\"123\"):\n        # file operations here\n- `handle_file_error(error, file_path, operation, user_id, category)` - Convenience function for handling file-related errors.\n- `handle_communication_error(error, channel, operation, user_id)` - Convenience function for handling communication errors.\n- `handle_configuration_error(error, setting, operation)` - Convenience function for handling configuration errors.\n- `__init__(self, message, details, recoverable)` - No description\n- `__init__(self, name, description)` - No description\n- `can_handle(self, error)` - Check if this strategy can handle the given error.\n- `recover(self, error, context)` - Attempt to recover from the error. Returns True if successful.\n- `__init__(self)` - No description\n- `can_handle(self, error)` - No description\n- `recover(self, error, context)` - No description\n- `_get_default_data(self, file_path, context)` - Get appropriate default data based on file type.\n- `__init__(self)` - No description\n- `can_handle(self, error)` - No description\n- `recover(self, error, context)` - No description\n- `_get_default_data(self, file_path, context)` - Get appropriate default data based on file type.\n- `__init__(self)` - No description\n- `handle_error(self, error, context, operation, user_friendly)` - Handle an error with recovery strategies and logging.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context about the error\n    operation: Description of the operation that failed\n    user_friendly: Whether to show user-friendly error messages\n    \nReturns:\n    True if error was recovered from, False otherwise\n- `_log_error(self, error, context)` - Log error with context.\n- `_show_user_error(self, error, context, custom_message)` - Show user-friendly error message.\n- `_get_user_friendly_message(self, error, context)` - Convert technical error to user-friendly message.\n- `decorator(func)` - No description\n- `wrapper()` - No description\n- `__init__(self, file_path, operation, user_id, category)` - No description\n- `__enter__(self)` - No description\n- `__exit__(self, exc_type, exc_val, exc_tb)` - No description\n**Classes:**\n- `MHMError` - Base exception for all MHM-specific errors.\n  - `MHMError.__init__(self, message, details, recoverable)` - No description\n- `DataError` - Raised when there are issues with data files or data integrity.\n- `FileOperationError` - Raised when file operations fail.\n- `ConfigurationError` - Raised when configuration is invalid or missing.\n- `CommunicationError` - Raised when communication channels fail.\n- `SchedulerError` - Raised when scheduler operations fail.\n- `UserInterfaceError` - Raised when UI operations fail.\n- `AIError` - Raised when AI operations fail.\n- `ValidationError` - Raised when data validation fails.\n- `RecoveryError` - Raised when error recovery fails.\n- `ErrorRecoveryStrategy` - Base class for error recovery strategies.\n  - `ErrorRecoveryStrategy.__init__(self, name, description)` - No description\n  - `ErrorRecoveryStrategy.can_handle(self, error)` - Check if this strategy can handle the given error.\n  - `ErrorRecoveryStrategy.recover(self, error, context)` - Attempt to recover from the error. Returns True if successful.\n- `FileNotFoundRecovery` - Recovery strategy for missing files.\n  - `FileNotFoundRecovery.__init__(self)` - No description\n  - `FileNotFoundRecovery.can_handle(self, error)` - No description\n  - `FileNotFoundRecovery.recover(self, error, context)` - No description\n  - `FileNotFoundRecovery._get_default_data(self, file_path, context)` - Get appropriate default data based on file type.\n- `JSONDecodeRecovery` - Recovery strategy for corrupted JSON files.\n  - `JSONDecodeRecovery.__init__(self)` - No description\n  - `JSONDecodeRecovery.can_handle(self, error)` - No description\n  - `JSONDecodeRecovery.recover(self, error, context)` - No description\n  - `JSONDecodeRecovery._get_default_data(self, file_path, context)` - Get appropriate default data based on file type.\n- `ErrorHandler` - Centralized error handler for MHM.\n  - `ErrorHandler.__init__(self)` - No description\n  - `ErrorHandler.handle_error(self, error, context, operation, user_friendly)` - Handle an error with recovery strategies and logging.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context about the error\n    operation: Description of the operation that failed\n    user_friendly: Whether to show user-friendly error messages\n    \nReturns:\n    True if error was recovered from, False otherwise\n  - `ErrorHandler._log_error(self, error, context)` - Log error with context.\n  - `ErrorHandler._show_user_error(self, error, context, custom_message)` - Show user-friendly error message.\n  - `ErrorHandler._get_user_friendly_message(self, error, context)` - Convert technical error to user-friendly message.\n- `SafeFileContext` - No description\n  - `SafeFileContext.__init__(self, file_path, operation, user_id, category)` - No description\n  - `SafeFileContext.__enter__(self)` - No description\n  - `SafeFileContext.__exit__(self, exc_type, exc_val, exc_tb)` - No description\n\n### core/file_operations.py\n**Functions:**\n- `verify_file_access(paths)` - Verify that files exist and are accessible\n- `determine_file_path(file_type, identifier)` - Determine file path based on file type and identifier.\nUpdated to support new organized structure.\n- `load_json_data(file_path)` - Load data from a JSON file with comprehensive error handling and auto-create user files if missing.\n- `save_json_data(data, file_path)` - Save data to a JSON file with comprehensive error handling\n- `create_user_files(user_id, categories, user_preferences)` - Creates files for a new user in the appropriate structure.\nEnsures schedules.json contains a block for each category, plus checkin and task reminder blocks.\n\nArgs:\n    user_id: The user ID\n    categories: List of message categories the user is opted into\n    user_preferences: Optional user preferences dict to determine which files to create\n\n### core/message_management.py\n**Functions:**\n- `get_message_categories()` - Retrieves message categories from the environment variable CATEGORIES.\nAllows for either a comma-separated string or a JSON array.\n- `load_default_messages(category)` - Load default messages for the given category.\n- `add_message(user_id, category, message_data, index)` - No description\n- `edit_message(user_id, category, message_id, updated_data)` - No description\n- `update_message(user_id, category, message_id, new_message_data)` - Update a message by its message_id.\n- `delete_message(user_id, category, message_id)` - No description\n- `get_last_10_messages(user_id, category)` - Get the last 10 messages for a user and category, sorted by timestamp descending.\n- `store_sent_message(user_id, category, message_id, message)` - Store a sent message for a user and category, with per-category grouping and cleanup.\n- `create_message_file_from_defaults(user_id, category)` - Create a user's message file for a specific category from default messages.\nThis is the actual worker function that creates the file.\n\nArgs:\n    user_id: The user ID\n    category: The specific category to create a message file for\n    \nReturns:\n    bool: True if file was created successfully\n- `ensure_user_message_files(user_id, categories)` - Ensure user has message files for specified categories.\nCreates messages directory if missing, checks which files are missing, and creates them.\n\nArgs:\n    user_id: The user ID\n    categories: List of categories to check/create message files for (can be subset of user's categories)\n    \nReturns:\n    dict: Summary of the operation with keys:\n        - success: bool - True if all files were created/validated successfully\n        - directory_created: bool - True if messages directory was created\n        - files_checked: int - Number of categories checked\n        - files_created: int - Number of new files created\n        - files_existing: int - Number of files that already existed\n- `get_timestamp_for_sorting(item)` - No description\n\n### core/response_tracking.py\n**Functions:**\n- `_get_response_log_filename(response_type)` - Get the filename for a response log type.\n- `store_user_response(user_id, response_data, response_type)` - Store user response data in appropriate file structure.\n- `store_daily_checkin_response(user_id, response_data)` - Store a daily check-in response.\n- `store_chat_interaction(user_id, user_message, ai_response, context_used)` - Store a chat interaction between user and AI.\n- `get_recent_responses(user_id, response_type, limit)` - Get recent responses for a user from appropriate file structure.\n- `get_recent_daily_checkins(user_id, limit)` - Get recent daily check-in responses for a user.\n- `get_recent_chat_interactions(user_id, limit)` - Get recent chat interactions for a user.\n- `get_user_checkin_preferences(user_id)` - Get user's check-in preferences from their preferences file.\n- `is_user_checkins_enabled(user_id)` - Check if check-ins are enabled for a user.\n- `get_user_checkin_questions(user_id)` - Get the enabled check-in questions for a user.\n- `get_user_info_for_tracking(user_id)` - Get user information for response tracking.\n- `track_user_response(user_id, category, response_data)` - Track a user's response to a message.\n- `get_timestamp_for_sorting(item)` - Convert timestamp to float for consistent sorting\n\n### core/schedule_management.py\n**Functions:**\n- `get_schedule_time_periods(user_id, category)` - Get schedule time periods for a specific user and category (new format).\n- `set_schedule_period_active(user_id, category, period_name, active)` - No description\n- `is_schedule_period_active(user_id, category, period_name)` - No description\n- `get_current_time_periods_with_validation(user_id, category)` - Returns the current active time periods for a user and category.\nIf no active period is found, defaults to the first available period.\n- `add_schedule_period(category, period_name, start_time, end_time, scheduler_manager)` - No description\n- `edit_schedule_period(category, period_name, new_start_time, new_end_time, scheduler_manager)` - No description\n- `delete_schedule_period(category, period_name, scheduler_manager)` - No description\n- `clear_schedule_periods_cache(user_id, category)` - Clear the schedule periods cache for a specific user/category or all.\n- `validate_and_format_time(time_str)` - No description\n- `time_24h_to_12h_display(time_24h)` - Convert 24-hour time string (HH:MM) to 12-hour display format.\n\nArgs:\n    time_24h (str): Time in 24-hour format (e.g., \"14:30\")\n    \nReturns:\n    tuple: (hour_12, minute, is_pm) where:\n        - hour_12 (int): Hour in 12-hour format (1-12)\n        - minute (int): Minute (0-59)\n        - is_pm (bool): True if PM, False if AM\n- `time_12h_display_to_24h(hour_12, minute, is_pm)` - Convert 12-hour display format to 24-hour time string.\n\nArgs:\n    hour_12 (int): Hour in 12-hour format (1-12)\n    minute (int): Minute (0-59)\n    is_pm (bool): True if PM, False if AM\n    \nReturns:\n    str: Time in 24-hour format (HH:MM)\n- `get_current_day_names()` - Returns the name of the current day plus 'ALL' for universal day messages.\n- `get_reminder_periods_and_days(user_id, category)` - Load reminder periods and days for a category (e.g., 'tasks') from schedules.json.\n- `set_reminder_periods_and_days(user_id, category, periods, days)` - Save reminder periods and days for a category to schedules.json.\n- `set_schedule_periods(user_id, category, periods_dict)` - Replace all schedule periods for a category with the given dict (period_name: {active, days, start_time, end_time}).\n- `get_schedule_days(user_id, category)` - No description\n- `set_schedule_days(user_id, category, days)` - No description\n- `get_user_info_for_schedule_management(user_id)` - Get user info for schedule management operations.\n- `migrate_legacy_schedule_keys(user_id)` - Migrate all user schedule files from legacy 'start'/'end' keys to canonical 'start_time'/'end_time'.\nIf user_id is None, migrate all users.\n\n### core/scheduler.py\n**Functions:**\n- `schedule_all_task_reminders(user_id)` - Standalone function to schedule all task reminders for a user.\nThis can be called from the admin UI without needing a scheduler instance.\n- `cleanup_task_reminders(user_id, task_id)` - Standalone function to clean up task reminders for a user.\nThis can be called from the admin UI without needing a scheduler instance.\n- `get_user_categories(user_id)` - Get user's message categories.\n- `process_user_schedules(user_id)` - Process schedules for a specific user.\n- `get_user_task_preferences(user_id)` - Get user's task preferences.\n- `get_user_checkin_preferences(user_id)` - Get user's check-in preferences.\n- `__init__(self, communication_manager)` - No description\n- `run_daily_scheduler(self)` - Starts the daily scheduler in a separate thread that handles all users.\n- `stop_scheduler(self)` - Stops the scheduler thread.\n- `reset_and_reschedule_daily_messages(self, category, user_id)` - Resets scheduled tasks for a specific category and reschedules daily messages for that category.\n- `is_job_for_category(self, job, user_id, category)` - Determines if a job is scheduled for a specific user and category.\n- `schedule_all_users_immediately(self)` - Schedule daily messages immediately for all users\n- `schedule_daily_message_job(self, user_id, category)` - Schedules daily messages immediately for the specified user and category.\nSchedules one message per active period in the category.\n- `schedule_message_for_period(self, user_id, category, period_name)` - Schedules a message at a random time within a specific period for a user and category.\n- `schedule_checkin_at_exact_time(self, user_id, period_name)` - Schedule a check-in at the exact time specified in the period.\n- `schedule_message_at_random_time(self, user_id, category)` - Schedules a message at a random time within the user's preferred time periods.\n- `is_time_conflict(self, user_id, schedule_datetime)` - Checks if there is a time conflict with any existing scheduled jobs for the user.\n- `get_random_time_within_period(self, user_id, category, period, timezone_str)` - Get a random time within a specified period for a given category.\n- `log_scheduled_tasks(self)` - Logs all current and upcoming scheduled tasks in a user-friendly manner.\n- `handle_sending_scheduled_message(self, user_id, category, retry_attempts, retry_delay)` - Handles the sending of scheduled messages with retries.\n- `handle_task_reminder(self, user_id, task_id, retry_attempts, retry_delay)` - Handles sending task reminders with retries.\n- `set_wake_timer(self, schedule_time, user_id, category, period, wake_ahead_minutes)` - No description\n- `cleanup_old_tasks(self, user_id, category)` - Cleans up all tasks (scheduled jobs and system tasks) associated with a given user and category.\n- `schedule_all_task_reminders(self, user_id)` - Schedule reminders for all active tasks for a user.\nFor each reminder period, pick one random task and schedule it at a random time within the period.\n- `get_random_time_within_task_period(self, start_time, end_time)` - Generate a random time within a task reminder period.\nArgs:\n    start_time: Start time in HH:MM format (e.g., \"17:00\")\n    end_time: End time in HH:MM format (e.g., \"18:00\")\nReturns:\n    Random time in HH:MM format\n- `schedule_task_reminder_at_time(self, user_id, task_id, reminder_time)` - Schedule a reminder for a specific task at the specified time (daily).\n- `schedule_task_reminder(self, user_id, task_id, reminder_time)` - Legacy function for backward compatibility.\nSchedule a reminder for a specific task at the specified time.\n- `schedule_task_reminder_at_datetime(self, user_id, task_id, date_str, time_str)` - Schedule a reminder for a specific task at a specific date and time.\n- `cleanup_task_reminders(self, user_id, task_id)` - Clean up task reminders for a user or specific task.\n- `scheduler_loop()` - No description\n**Classes:**\n- `SchedulerManager` - No description\n  - `SchedulerManager.__init__(self, communication_manager)` - No description\n  - `SchedulerManager.run_daily_scheduler(self)` - Starts the daily scheduler in a separate thread that handles all users.\n  - `SchedulerManager.stop_scheduler(self)` - Stops the scheduler thread.\n  - `SchedulerManager.reset_and_reschedule_daily_messages(self, category, user_id)` - Resets scheduled tasks for a specific category and reschedules daily messages for that category.\n  - `SchedulerManager.is_job_for_category(self, job, user_id, category)` - Determines if a job is scheduled for a specific user and category.\n  - `SchedulerManager.schedule_all_users_immediately(self)` - Schedule daily messages immediately for all users\n  - `SchedulerManager.schedule_daily_message_job(self, user_id, category)` - Schedules daily messages immediately for the specified user and category.\nSchedules one message per active period in the category.\n  - `SchedulerManager.schedule_message_for_period(self, user_id, category, period_name)` - Schedules a message at a random time within a specific period for a user and category.\n  - `SchedulerManager.schedule_checkin_at_exact_time(self, user_id, period_name)` - Schedule a check-in at the exact time specified in the period.\n  - `SchedulerManager.schedule_message_at_random_time(self, user_id, category)` - Schedules a message at a random time within the user's preferred time periods.\n  - `SchedulerManager.is_time_conflict(self, user_id, schedule_datetime)` - Checks if there is a time conflict with any existing scheduled jobs for the user.\n  - `SchedulerManager.get_random_time_within_period(self, user_id, category, period, timezone_str)` - Get a random time within a specified period for a given category.\n  - `SchedulerManager.log_scheduled_tasks(self)` - Logs all current and upcoming scheduled tasks in a user-friendly manner.\n  - `SchedulerManager.handle_sending_scheduled_message(self, user_id, category, retry_attempts, retry_delay)` - Handles the sending of scheduled messages with retries.\n  - `SchedulerManager.handle_task_reminder(self, user_id, task_id, retry_attempts, retry_delay)` - Handles sending task reminders with retries.\n  - `SchedulerManager.set_wake_timer(self, schedule_time, user_id, category, period, wake_ahead_minutes)` - No description\n  - `SchedulerManager.cleanup_old_tasks(self, user_id, category)` - Cleans up all tasks (scheduled jobs and system tasks) associated with a given user and category.\n  - `SchedulerManager.schedule_all_task_reminders(self, user_id)` - Schedule reminders for all active tasks for a user.\nFor each reminder period, pick one random task and schedule it at a random time within the period.\n  - `SchedulerManager.get_random_time_within_task_period(self, start_time, end_time)` - Generate a random time within a task reminder period.\nArgs:\n    start_time: Start time in HH:MM format (e.g., \"17:00\")\n    end_time: End time in HH:MM format (e.g., \"18:00\")\nReturns:\n    Random time in HH:MM format\n  - `SchedulerManager.schedule_task_reminder_at_time(self, user_id, task_id, reminder_time)` - Schedule a reminder for a specific task at the specified time (daily).\n  - `SchedulerManager.schedule_task_reminder(self, user_id, task_id, reminder_time)` - Legacy function for backward compatibility.\nSchedule a reminder for a specific task at the specified time.\n  - `SchedulerManager.schedule_task_reminder_at_datetime(self, user_id, task_id, date_str, time_str)` - Schedule a reminder for a specific task at a specific date and time.\n  - `SchedulerManager.cleanup_task_reminders(self, user_id, task_id)` - Clean up task reminders for a user or specific task.\n\n### core/service.py\n**Functions:**\n- `get_user_categories(user_id)` - Get user's message categories.\n- `main()` - Main entry point for the service\n- `__init__(self)` - No description\n- `validate_configuration(self)` - Validate all configuration settings before starting the service.\n- `initialize_paths(self)` - No description\n- `check_and_fix_logging(self)` - Check if logging is working and restart if needed\n- `start(self)` - Start the MHM backend service\n- `run_service_loop(self)` - Keep the service running until shutdown is requested\n- `check_test_message_requests(self)` - Check for and process test message request files from admin panel\n- `cleanup_test_message_requests(self)` - Clean up any remaining test message request files\n- `check_reschedule_requests(self)` - Check for and process reschedule request files from UI\n- `cleanup_reschedule_requests(self)` - Clean up any remaining reschedule request files\n- `shutdown(self)` - Gracefully shutdown the service\n- `signal_handler(self, signum, frame)` - Handle shutdown signals\n- `emergency_shutdown(self)` - Emergency shutdown handler registered with atexit\n**Classes:**\n- `InitializationError` - Custom exception for initialization errors.\n- `MHMService` - No description\n  - `MHMService.__init__(self)` - No description\n  - `MHMService.validate_configuration(self)` - Validate all configuration settings before starting the service.\n  - `MHMService.initialize_paths(self)` - No description\n  - `MHMService.check_and_fix_logging(self)` - Check if logging is working and restart if needed\n  - `MHMService.start(self)` - Start the MHM backend service\n  - `MHMService.run_service_loop(self)` - Keep the service running until shutdown is requested\n  - `MHMService.check_test_message_requests(self)` - Check for and process test message request files from admin panel\n  - `MHMService.cleanup_test_message_requests(self)` - Clean up any remaining test message request files\n  - `MHMService.check_reschedule_requests(self)` - Check for and process reschedule request files from UI\n  - `MHMService.cleanup_reschedule_requests(self)` - Clean up any remaining reschedule request files\n  - `MHMService.shutdown(self)` - Gracefully shutdown the service\n  - `MHMService.signal_handler(self, signum, frame)` - Handle shutdown signals\n  - `MHMService.emergency_shutdown(self)` - Emergency shutdown handler registered with atexit\n\n### core/service_utilities.py\n**Functions:**\n- `create_reschedule_request(user_id, category)` - Create a reschedule request flag file for the service to pick up\n- `is_service_running()` - Check if the MHM service is currently running\n- `wait_for_network(timeout)` - Wait for the network to be available, retrying every 5 seconds up to a timeout.\n- `load_and_localize_datetime(datetime_str, timezone_str)` - Load and localize a datetime string to a specific timezone\n- `__init__(self, interval)` - No description\n- `should_run(self)` - No description\n**Classes:**\n- `Throttler` - No description\n  - `Throttler.__init__(self, interval)` - No description\n  - `Throttler.should_run(self)` - No description\n- `InvalidTimeFormatError` - No description\n\n### core/ui_management.py\n**Functions:**\n- `clear_period_widgets_from_layout(layout, widget_list)` - Clear all period widgets from a layout.\n\nArgs:\n    layout: The QVBoxLayout to clear\n    widget_list: Optional list to track widgets (will be cleared if provided)\n\nReturns:\n    None\n- `add_period_widget_to_layout(layout, period_name, period_data, category, parent_widget, widget_list, delete_callback)` - Add a period widget to a layout with proper display formatting.\n\nArgs:\n    layout: The QVBoxLayout to add the widget to\n    period_name: The period name\n    period_data: The period data dictionary\n    category: The category (tasks, checkin, or schedule category)\n    parent_widget: The parent widget for the period widget\n    widget_list: Optional list to track widgets\n    delete_callback: Optional callback for delete signal\n\nReturns:\n    The created PeriodRowWidget or None if failed\n- `load_period_widgets_for_category(layout, user_id, category, parent_widget, widget_list, delete_callback)` - Load and display period widgets for a specific category.\n\nArgs:\n    layout: The QVBoxLayout to add widgets to\n    user_id: The user ID\n    category: The category (tasks, checkin, or schedule category)\n    parent_widget: The parent widget for period widgets\n    widget_list: Optional list to track widgets\n    delete_callback: Optional callback for delete signal\n\nReturns:\n    List of created widgets\n- `collect_period_data_from_widgets(widget_list, category)` - Collect period data from a list of period widgets.\n\nArgs:\n    widget_list: List of PeriodRowWidget instances\n    category: The category (tasks, checkin, or schedule category)\n\nReturns:\n    Dictionary of period data with storage-formatted names, each with only 'active', 'days', 'start_time', 'end_time'.\n- `period_name_for_display(period_name, category)` - Convert period name to display format using existing logic.\n\nArgs:\n    period_name: The period name to convert\n    category: The category (tasks, checkin, or schedule category)\n\nReturns:\n    Display-formatted period name\n- `period_name_for_storage(display_name, category)` - Convert display period name to storage format.\n\nArgs:\n    display_name: The display-formatted period name\n    category: The category (tasks, checkin, or schedule category)\n\nReturns:\n    Storage-formatted period name (lowercase for tasks/checkins)\n\n### core/user_data_manager.py\n**Functions:**\n- `update_message_references(user_id)` - Update message file references for a user\n- `backup_user_data(user_id, include_messages)` - Create a backup of user's data\n- `export_user_data(user_id, export_format)` - Export user's data to structured format\n- `delete_user_completely(user_id, create_backup)` - Completely remove a user from the system\n- `get_user_data_summary(user_id)` - Get summary of user's data\n- `update_user_index(user_id)` - Update the user index\n- `rebuild_user_index()` - Rebuild the complete user index\n- `get_user_info_for_data_manager(user_id)` - Get user info for data manager operations - uses new hybrid structure.\n- `get_user_categories(user_id)` - Get user's message categories.\n- `build_user_index()` - Build an index of all users and their message data.\n- `get_user_summary(user_id)` - Get a summary of user data and message statistics.\n- `get_all_user_summaries()` - Get summaries for all users.\n- `get_user_analytics_summary(user_id)` - Get analytics summary for user.\n- `__init__(self)` - No description\n- `update_message_references(self, user_id)` - Add/update message file references in user profile\n- `get_user_message_files(self, user_id)` - Get all message file paths for a user\n- `backup_user_data(self, user_id, include_messages)` - Create a complete backup of user's data\n- `export_user_data(self, user_id, export_format)` - Export all user data to a structured format\n- `delete_user_completely(self, user_id, create_backup)` - Completely remove all traces of a user from the system\n- `get_user_data_summary(self, user_id)` - Get a comprehensive summary of user's data\n- `_get_last_interaction(self, user_id)` - Get the most recent user interaction timestamp\n- `update_user_index(self, user_id)` - Update the global user index with current user data locations\n- `remove_from_index(self, user_id)` - Remove user from the global index\n- `rebuild_full_index(self)` - Rebuild the complete user index from scratch\n- `search_users(self, query, search_fields)` - Search users based on profile data or file patterns\n**Classes:**\n- `UserDataManager` - Enhanced user data management with references, backup, and indexing capabilities\n  - `UserDataManager.__init__(self)` - No description\n  - `UserDataManager.update_message_references(self, user_id)` - Add/update message file references in user profile\n  - `UserDataManager.get_user_message_files(self, user_id)` - Get all message file paths for a user\n  - `UserDataManager.backup_user_data(self, user_id, include_messages)` - Create a complete backup of user's data\n  - `UserDataManager.export_user_data(self, user_id, export_format)` - Export all user data to a structured format\n  - `UserDataManager.delete_user_completely(self, user_id, create_backup)` - Completely remove all traces of a user from the system\n  - `UserDataManager.get_user_data_summary(self, user_id)` - Get a comprehensive summary of user's data\n  - `UserDataManager._get_last_interaction(self, user_id)` - Get the most recent user interaction timestamp\n  - `UserDataManager.update_user_index(self, user_id)` - Update the global user index with current user data locations\n  - `UserDataManager.remove_from_index(self, user_id)` - Remove user from the global index\n  - `UserDataManager.rebuild_full_index(self)` - Rebuild the complete user index from scratch\n  - `UserDataManager.search_users(self, query, search_fields)` - Search users based on profile data or file patterns\n\n### core/user_management.py\n**Functions:**\n- `register_data_loader(data_type, loader_func, file_type, default_fields, metadata_fields, description)` - Register a new data loader for the centralized system.\n\nArgs:\n    data_type: Unique identifier for the data type\n    loader_func: Function that loads the data\n    file_type: File type identifier\n    default_fields: Commonly accessed fields\n    metadata_fields: Fields that contain metadata\n    description: Human-readable description\n- `get_available_data_types()` - Get list of available data types.\n- `get_data_type_info(data_type)` - Get information about a specific data type.\n- `get_all_user_ids()` - Get all user IDs from the system.\n- `load_user_account_data(user_id, auto_create)` - Load user account data from account.json.\n- `save_user_account_data(user_id, account_data)` - Save user account data to account.json.\n- `load_user_preferences_data(user_id, auto_create)` - Load user preferences data from preferences.json.\n- `save_user_preferences_data(user_id, preferences_data)` - Save user preferences data to preferences.json.\n- `load_user_context_data(user_id, auto_create)` - Load user context data from user_context.json.\n- `save_user_context_data(user_id, context_data)` - Save user context data to user_context.json.\n- `load_user_schedules_data(user_id, auto_create)` - Load user schedules data from schedules.json.\n- `save_user_schedules_data(user_id, schedules_data)` - Save user schedules data to schedules.json.\n- `update_user_schedules(user_id, schedules_data)` - Update user schedules data.\n- `create_default_schedule_periods()` - Create default schedule periods for a new category.\n- `migrate_legacy_schedules_structure(schedules_data)` - Migrate legacy schedules structure to new format.\n- `ensure_category_has_default_schedule(user_id, category)` - Ensure a category has default schedule periods if it doesn't exist.\n- `update_user_account(user_id, updates, auto_create)` - Update user account information.\n- `update_user_preferences(user_id, updates, auto_create)` - Update user preferences.\n- `update_user_context(user_id, updates, auto_create)` - Update user context information.\n- `create_new_user(user_data)` - Create a new user with the new data structure.\n- `get_user_id_by_internal_username(internal_username)` - Get user ID by internal username.\n- `get_user_id_by_chat_id(chat_id)` - Get user ID by chat ID.\n- `get_user_id_by_discord_user_id(discord_user_id)` - Get user ID by Discord user ID.\n- `clear_user_caches(user_id)` - Clear user data caches.\n- `get_user_data(user_id, data_types, fields, auto_create, include_metadata)` - Central handler for all user data access.\n\nArgs:\n    user_id: User identifier\n    data_types: 'all', single type, or list of types\n    fields: \n        - None: Return full data\n        - \"field_name\": Extract single field from all types\n        - [\"field1\", \"field2\"]: Extract multiple fields from all types  \n        - {\"account\": \"email\", \"preferences\": [\"categories\", \"channel\"]}: Type-specific fields\n    auto_create: Whether to create missing files\n    include_metadata: Include file metadata (size, timestamps, etc.)\n\nReturns:\n    Dict with requested data types and fields\n- `save_user_data(user_id, data_updates, auto_create, update_index, create_backup, validate_data)` - Central handler for all user data saving.\n\nArgs:\n    user_id: User identifier\n    data_updates: Dict of data type -> updates to apply\n        Example: {\n            'account': {'email': 'new@email.com'},\n            'preferences': {'categories': ['motivational']},\n            'context': {'preferred_name': 'John'}\n        }\n    auto_create: Whether to create missing files\n    update_index: Whether to update user index after saving\n    create_backup: Whether to create backup before major changes\n    validate_data: Whether to validate data before saving\n\nReturns:\n    Dict with success status for each data type\n    Example: {'account': True, 'preferences': True, 'context': False}\n- `validate_user_data_updates(user_id, data_type, updates)` - Validate user data updates before saving.\n\nArgs:\n    user_id: User identifier\n    data_type: Type of data being updated ('account', 'preferences', 'context', 'schedules')\n    updates: Updates to validate\n\nReturns:\n    Tuple of (is_valid, list_of_errors)\n- `save_user_data_transaction(user_id, data_updates, auto_create)` - Save multiple data types atomically - all succeed or all fail.\n\nArgs:\n    user_id: User identifier\n    data_updates: Dict of data type -> updates to apply\n\nReturns:\n    True if all saves succeeded, False if any failed\n- `ensure_unique_ids(data)` - Ensure all messages have unique IDs.\n- `load_and_ensure_ids(user_id)` - Load messages for all categories and ensure IDs are unique for a user.\n- `ensure_all_categories_have_schedules(user_id)` - Ensure all categories in user preferences have corresponding schedules.\n- `get_user_email(user_id)` - Get user's email address using centralized system.\n- `get_user_categories(user_id)` - Get user's message categories using centralized system.\n- `get_user_channel_type(user_id)` - Get user's communication channel type using centralized system.\n- `get_user_preferred_name(user_id)` - Get user's preferred name using centralized system.\n- `get_user_account_status(user_id)` - Get user's account status using centralized system.\n- `get_user_data_with_metadata(user_id, data_types)` - Get user data with file metadata using centralized system.\n- `get_user_essential_info(user_id)` - Get essential user information using centralized system.\n- `get_predefined_options(field)` - Get predefined options for a specific personalization field.\n- `get_timezone_options()` - Get timezone options.\n- `create_default_personalization_data()` - Create default personalization data structure.\n- `get_personalization_field(user_id, field)` - Get a specific field from personalization data using centralized system.\n- `update_personalization_field(user_id, field, value)` - Update a specific field in personalization data using centralized system.\n- `add_personalization_item(user_id, field, item)` - Add an item to a list field in personalization data using centralized system.\n- `remove_personalization_item(user_id, field, item)` - Remove an item from a list field in personalization data using centralized system.\n- `clear_personalization_cache(user_id)` - Clear the personalization cache for a specific user or all users.\n- `validate_personalization_data(data)` - Validate personalization data structure and content. No fields are required, only type-checked if present.\n\n### core/validation.py\n**Functions:**\n- `is_valid_email(email)` - Validate email format\n- `is_valid_phone(phone)` - Validate phone number format\n- `validate_time_format(time_str)` - Validate time format (HH:MM)\n- `title_case(text)` - Convert text to title case, handling special cases\n\n### run_mhm.py\n**Functions:**\n- `main()` - Launch the MHM Manager UI\n\n### run_tests.py\n**Functions:**\n- `run_tests_with_pytest(test_paths, markers, verbose, coverage)` - Run tests using pytest with specified options.\n- `run_specific_module(module_name)` - Run tests for a specific module.\n- `run_test_categories()` - Run tests by category.\n- `show_test_summary()` - Show summary of available tests.\n- `main()` - Main test runner function.\n\n### scripts/add_checkin_schedules.py\n**Functions:**\n- `add_checkin_schedules_to_existing_users()` - Add check-in schedules to existing users who have check-ins enabled\n- `show_user_checkin_status()` - Show the current check-in status for all users\n\n### scripts/analyze_documentation_overlap.py\n**Functions:**\n- `get_documentation_files()` - Get all documentation files and their content.\n- `extract_sections(content)` - Extract sections from markdown content.\n- `find_common_topics(docs)` - Find common topics across documentation files.\n- `analyze_file_purposes(docs)` - Analyze the purpose and content of each documentation file.\n- `generate_consolidation_report()` - Generate a report on documentation consolidation opportunities.\n\n### scripts/audit_function_registry.py\n**Functions:**\n- `extract_functions_from_file(file_path)` - Extract all function definitions from a Python file.\n- `extract_classes_from_file(file_path)` - Extract all class definitions from a Python file.\n- `scan_all_python_files()` - Scan all Python files in the project and extract function/class information.\n- `parse_function_registry()` - Parse the existing FUNCTION_REGISTRY.md to extract documented functions.\n- `generate_audit_report()` - Generate a comprehensive audit report.\n- `generate_updated_registry_sections(actual_functions)` - Generate updated registry sections for missing files.\n\n### scripts/audit_module_dependencies.py\n**Functions:**\n- `extract_imports_from_file(file_path)` - Extract all imports from a Python file.\n- `is_standard_library(module_name)` - Check if a module is part of the Python standard library.\n- `is_local_import(module_name)` - Check if a module is a local import (part of our project).\n- `scan_all_python_files()` - Scan all Python files in the project and extract import information.\n- `parse_module_dependencies()` - Parse the existing MODULE_DEPENDENCIES.md to extract documented dependencies.\n- `generate_dependency_report()` - Generate a comprehensive dependency audit report.\n- `generate_updated_dependency_sections(actual_imports)` - Generate updated dependency sections for missing files.\n- `analyze_circular_dependencies(actual_imports)` - Analyze potential circular dependencies.\n\n### scripts/check_checkin_schedules.py\n**Functions:**\n- `check_checkin_schedules()` - Check check-in schedules for all users\n- `show_schedule_period_structure()` - Show the structure of check-in schedule periods\n- `show_management_commands()` - Show how to manage check-in schedules\n\n### scripts/cleanup_real_test_users.py\n**Functions:**\n- `cleanup_real_test_users()` - Clean up test users in the real data directory.\n\n### scripts/cleanup_test_users.py\n**Functions:**\n- `cleanup_test_users()` - Clean up test users, keeping only essential ones.\n\n### scripts/cleanup_user_message_files.py\n**Functions:**\n- `check_message_file_format(file_path)` - Check if a message file is in the old format (list of strings).\n- `cleanup_user_message_files()` - Clean up user message files by removing unwanted files and ensuring proper ones exist.\n- `main()` - Main function to run the cleanup.\n\n### scripts/clear_cache_and_test_discord.py\n**Functions:**\n- `clear_cache_and_test()` - Clear cache and test Discord bot response.\n\n### scripts/compare_function_lengths.py\n**Functions:**\n- `extract_function_with_body(file_path, func_name)` - Extract a specific function and its complete body from a file.\n- `count_lines_in_function(func_body)` - Count the number of lines in a function body.\n- `main()` - No description\n\n### scripts/compare_functions.py\n**Functions:**\n- `extract_functions_from_file(file_path)` - Extract function names and their line counts from a Python file.\n- `main()` - No description\n\n### scripts/consolidate_message_days.py\n**Functions:**\n- `consolidate_message_days()` - Consolidate messages that have all days listed into using \"ALL\" instead.\n\n### scripts/consolidate_message_time_periods.py\n**Functions:**\n- `get_available_time_periods_for_user_category(user_id, category)` - Get all available time periods for a specific user and category.\n- `consolidate_time_periods_in_file(file_path, user_id, category)` - Consolidate time periods in a single message file.\n- `main()` - Main function to consolidate time periods across all message files.\n\n### scripts/debug_comprehensive_prompt.py\n**Functions:**\n- `debug_comprehensive_prompt()` - Debug the comprehensive context prompt generation.\n\n### scripts/debug_lm_studio_timeout.py\n**Functions:**\n- `test_models_endpoint()` - Test the models endpoint with different timeouts.\n- `test_chat_completions()` - Test the chat completions endpoint with different timeouts.\n- `test_system_info()` - Test system information endpoints.\n- `check_lm_studio_process()` - Check if LM Studio process is running and using resources.\n- `test_network_connectivity()` - Test basic network connectivity to LM Studio.\n\n### scripts/debug_preferences.py\n**Functions:**\n- `debug_preferences()` - No description\n\n### scripts/fix_schedule_dict_keys.py\n**Functions:**\n- `fix_schedule_file(filepath)` - No description\n- `main()` - No description\n\n### scripts/fix_user_schedules.py\n**Functions:**\n- `fix_user_schedules(user_id)` - Fix the schedule structure for a specific user.\n\n### scripts/legacy_schedule_editor_qt.py\n**Functions:**\n- `open_schedule_editor(parent, user_id, category, on_save)` - Open the schedule editor dialog and return the result.\n- `__init__(self, parent, user_id, category, on_save)` - No description\n- `load_ui(self)` - Load the UI from the .ui file.\n- `center_dialog(self)` - Center the dialog on the parent window.\n- `setup_functionality(self)` - Setup the functionality and connect signals.\n- `load_existing_data(self)` - No description\n- `add_new_period(self, period_name, period_data)` - Add a new period row using nested layouts for AM/PM pairs.\n- `remove_period_row(self, row_widget)` - No description\n- `undo_last_delete(self)` - Undo the last deletion.\n- `collect_period_data(self)` - No description\n- `save_schedule(self)` - Save the schedule data.\n- `cancel(self)` - Cancel the dialog.\n**Classes:**\n- `ScheduleEditorQt` - PySide6-based schedule editor for managing time periods.\n  - `ScheduleEditorQt.__init__(self, parent, user_id, category, on_save)` - No description\n  - `ScheduleEditorQt.load_ui(self)` - Load the UI from the .ui file.\n  - `ScheduleEditorQt.center_dialog(self)` - Center the dialog on the parent window.\n  - `ScheduleEditorQt.setup_functionality(self)` - Setup the functionality and connect signals.\n  - `ScheduleEditorQt.load_existing_data(self)` - No description\n  - `ScheduleEditorQt.add_new_period(self, period_name, period_data)` - Add a new period row using nested layouts for AM/PM pairs.\n  - `ScheduleEditorQt.remove_period_row(self, row_widget)` - No description\n  - `ScheduleEditorQt.undo_last_delete(self)` - Undo the last deletion.\n  - `ScheduleEditorQt.collect_period_data(self)` - No description\n  - `ScheduleEditorQt.save_schedule(self)` - Save the schedule data.\n  - `ScheduleEditorQt.cancel(self)` - Cancel the dialog.\n\n### scripts/migrate_data_structure.py\n**Functions:**\n- `get_user_ids()` - Get all user IDs from the data/users directory.\n- `get_message_categories()` - Get all message categories from the data/messages directory.\n- `move_message_files()` - Move message files from data/messages/{category}/{user_id}.json to data/users/{user_id}/messages/{category}.json\n- `migrate_schedule_data()` - Migrate schedule data from old format to new format.\n- `create_default_message_files()` - Create default message files for users who are missing them.\n- `cleanup_old_message_structure()` - Remove the old data/messages directory structure after migration.\n- `main()` - Run the complete migration process.\n\n### scripts/migrate_messaging_service.py\n**Functions:**\n- `migrate_messaging_service()` - Migrate messaging_service to channel.type for all users.\n- `verify_migration(users)` - Verify that the migration was successful.\n\n### scripts/migrate_schedule_format.py\n**Functions:**\n- `migrate_legacy_schedules_structure(schedules_data)` - Convert legacy flat schedule structure to new nested format.\n- `remove_enabled_fields_from_preferences(prefs)` - Remove 'enabled' fields from preferences.\n- `remove_enabled_fields_from_schedules(schedules_data)` - Remove 'enabled' fields from schedule periods.\n- `migrate_user_files()` - Migrate all user files to new format.\n- `main()` - Main migration function.\n\n### scripts/migrate_schedules_cleanup.py\n**Functions:**\n- `find_all_schedules_files(base_dir)` - No description\n- `collapse_days(days)` - No description\n- `migrate_schedules_file(schedules_path)` - No description\n- `main()` - No description\n\n### scripts/migrate_sent_messages.py\n**Functions:**\n- `migrate_sent_messages()` - Migrate sent_messages.json files from user root directories to messages folders.\n- `update_file_operations_code()` - Update the file operations code to use the new sent_messages path structure.\n- `main()` - Main migration function.\n\n### scripts/migrate_user_data_structure.py\n**Functions:**\n- `main()` - Main migration function.\n- `__init__(self, dry_run, backup)` - No description\n- `migrate_all_users(self)` - Migrate all users in the system.\n- `migrate_user(self, user_id)` - Migrate a single user's data.\n- `is_already_migrated(self, user_dir)` - Check if user data is already in new structure.\n- `backup_user_data(self, user_id, user_dir)` - Create backup of user data before migration.\n- `load_current_data(self, user_id, user_dir)` - Load all current data files for a user.\n- `transform_data(self, user_id, current_data)` - Transform current data structure to new structure.\n- `save_new_data(self, user_id, new_data)` - Save the new data structure for a user.\n- `cleanup_old_files(self, user_dir)` - Remove old files after successful migration.\n**Classes:**\n- `UserDataMigrator` - Handles migration of user data from old structure to new structure.\n  - `UserDataMigrator.__init__(self, dry_run, backup)` - No description\n  - `UserDataMigrator.migrate_all_users(self)` - Migrate all users in the system.\n  - `UserDataMigrator.migrate_user(self, user_id)` - Migrate a single user's data.\n  - `UserDataMigrator.is_already_migrated(self, user_dir)` - Check if user data is already in new structure.\n  - `UserDataMigrator.backup_user_data(self, user_id, user_dir)` - Create backup of user data before migration.\n  - `UserDataMigrator.load_current_data(self, user_id, user_dir)` - Load all current data files for a user.\n  - `UserDataMigrator.transform_data(self, user_id, current_data)` - Transform current data structure to new structure.\n  - `UserDataMigrator.save_new_data(self, user_id, new_data)` - Save the new data structure for a user.\n  - `UserDataMigrator.cleanup_old_files(self, user_dir)` - Remove old files after successful migration.\n\n### scripts/rebuild_index.py\n**Functions:**\n- `main()` - Rebuild the user index.\n\n### scripts/restore_custom_periods.py\n**Functions:**\n- `migrate_legacy_schedules_structure(schedules_data)` - Convert legacy flat schedule structure to new nested format.\n- `restore_custom_periods()` - Restore custom periods from backup for all users.\n- `main()` - Main restoration function.\n\n### scripts/test_ai_with_clear_cache.py\n**Functions:**\n- `test_ai_with_clear_cache()` - Test AI responses with cleared cache.\n- `test_direct_api_call()` - Test direct API call with comprehensive context.\n\n### scripts/test_checkin_fix.py\n**Functions:**\n- `test_checkin_message_replacement_fix()` - Test that check-ins no longer replace scheduled messages.\n- `test_actual_code_path()` - Test the actual code path to ensure no syntax errors.\n\n### scripts/test_comprehensive_ai.py\n**Functions:**\n- `test_comprehensive_ai_access()` - Test the comprehensive AI access to user data.\n- `test_ai_status()` - Test the AI status to confirm it's using comprehensive context.\n\n### scripts/test_data_integrity.py\n**Functions:**\n- `test_data_integrity()` - No description\n\n### scripts/test_lm_studio.py\n**Functions:**\n- `test_lm_studio_connection()` - Test the LM Studio connection directly.\n- `test_ai_chatbot_status()` - Test the AI chatbot status.\n- `test_simple_response()` - Test a simple AI response.\n\n### scripts/test_migration.py\n**Functions:**\n- `main()` - Test the migration in dry-run mode.\n\n### scripts/test_new_modules.py\n**Functions:**\n- `test_validation_module()` - Test validation.py module\n- `test_file_operations_module()` - Test file_operations.py module\n- `test_service_utilities_module()` - Test service_utilities.py module\n- `test_user_management_module()` - Test user_management.py module\n- `test_message_management_module()` - Test message_management.py module\n- `test_schedule_management_module()` - Test schedule_management.py module\n- `test_response_tracking_module()` - Test response_tracking.py module\n- `main()` - Run all tests\n\n### scripts/test_period_widget.py\n**Functions:**\n- `test_period_widget()` - Test the PeriodRowWidget.\n\n### scripts/test_schedule_editor.py\n**Functions:**\n- `test_schedule_editor()` - Test the schedule editor dialog.\n- `on_save_callback(periods)` - Callback when schedule is saved.\n\n### scripts/test_user_data_analysis.py\n**Functions:**\n- `test_user_data_analysis()` - Test the enhanced fallback with user-specific questions.\n- `test_fallback_directly()` - Test the fallback method directly.\n\n### scripts/test_utils_functions.py\n**Functions:**\n- `test_basic_imports()` - Test that we can import all the key modules\n- `test_file_operations()` - Test basic file operations\n- `test_user_operations()` - Test user-related operations\n- `test_utility_functions()` - Test utility functions\n- `main()` - Run all tests\n\n### scripts/update_default_messages_to_all.py\n**Functions:**\n- `update_default_messages()` - Update all default message files to include both 'default' and 'ALL' time periods.\n\n### scripts/utilities/cleanup_duplicate_messages.py\n**Functions:**\n- `find_message_files()` - Find all JSON message files in the configured messages directory.\n- `check_duplicates_in_file(filepath)` - Check for duplicate messages in a single file.\n- `create_backup(filepath)` - Create a backup of the file before modification.\n- `clean_duplicates(args)` - Main function to clean duplicates from all message files.\n- `main()` - No description\n\n### scripts/utilities/cleanup_test_data.py\n**Functions:**\n- `get_script_dir()` - Get the MHM root directory\n- `cleanup_test_users()` - Remove test user directories\n- `cleanup_backup_files()` - Remove backup files from migration and testing\n- `cleanup_old_scripts()` - Remove old migration and testing scripts that are no longer needed\n- `main()` - Run the cleanup process\n\n### scripts/utilities/user_data_cli.py\n**Functions:**\n- `format_size(size_bytes)` - Format bytes to human readable format\n- `cmd_update_references(args)` - Update message references for a user\n- `cmd_backup_user(args)` - Create a backup of user data\n- `cmd_summary(args)` - Show user data summary\n- `cmd_index(args)` - Manage user index\n- `cmd_list_users(args)` - List all users with basic info\n- `main()` - No description\n\n### scripts/validate_ai_work.py\n**Functions:**\n- `validate_documentation_completeness(doc_file, code_files)` - Validate that documentation covers all relevant code.\n- `validate_code_consistency(changed_files)` - Validate that code changes are consistent across files.\n- `validate_file_structure(created_files, modified_files)` - Validate that file structure changes are appropriate.\n- `generate_validation_report(validation_type)` - Generate a comprehensive validation report.\n- `validate_ai_work(work_type)` - Main validation function for AI work.\n\n### scripts/validate_config.py\n**Functions:**\n- `main()` - No description\n\n### tasks/task_management.py\n**Functions:**\n- `ensure_task_directory(user_id)` - Ensure the task directory structure exists for a user.\n- `load_active_tasks(user_id)` - Load active tasks for a user.\n- `save_active_tasks(user_id, tasks)` - Save active tasks for a user.\n- `load_completed_tasks(user_id)` - Load completed tasks for a user.\n- `save_completed_tasks(user_id, tasks)` - Save completed tasks for a user.\n- `create_task(user_id, title, description, due_date, due_time, priority, category, reminder_periods)` - Create a new task for a user.\n- `update_task(user_id, task_id, updates)` - Update an existing task.\n- `complete_task(user_id, task_id)` - Mark a task as completed.\n- `delete_task(user_id, task_id)` - Delete a task (permanently remove it).\n- `get_task_by_id(user_id, task_id)` - Get a specific task by ID.\n- `get_tasks_due_soon(user_id, days_ahead)` - Get tasks due within the specified number of days.\n- `are_tasks_enabled(user_id)` - Check if task management is enabled for a user.\n- `get_user_task_stats(user_id)` - Get task statistics for a user.\n**Classes:**\n- `TaskManagementError` - Custom exception for task management errors.\n\n### tests/conftest.py\n**Functions:**\n- `setup_test_logging()` - Set up dedicated logging for tests.\n- `test_data_dir()` - Create a temporary test data directory for all tests.\n- `mock_config(test_data_dir)` - Mock configuration for testing with proper test data directory.\n- `mock_user_data(test_data_dir, mock_config, request)` - Create mock user data for testing with unique user ID for each test.\n- `cleanup_test_users(request, test_data_dir)` - Clean up test users after each test.\n- `mock_logger()` - Mock logger for testing.\n- `temp_file()` - Create a temporary file for testing.\n- `mock_ai_response()` - Mock AI response for testing.\n- `mock_task_data()` - Mock task data for testing.\n- `mock_message_data()` - Mock message data for testing.\n- `mock_service_data()` - Mock service data for testing.\n- `mock_communication_data()` - Mock communication data for testing.\n- `mock_schedule_data()` - Mock schedule data for testing.\n- `pytest_configure(config)` - Configure pytest for MHM testing.\n- `pytest_collection_modifyitems(config, items)` - Modify test collection to add default markers.\n- `pytest_sessionstart(session)` - Log test session start.\n- `pytest_sessionfinish(session, exitstatus)` - Log test session finish.\n- `pytest_runtest_logreport(report)` - Log individual test results.\n\n### tests/test_account_creation_ui.py\n**Functions:**\n- `qapp()` - Create QApplication instance for UI testing.\n- `dialog(self, qapp, test_data_dir, mock_config)` - Create account creation dialog for testing.\n- `test_dialog_initialization_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\n- `test_feature_enablement_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test feature enablement checkboxes control tab visibility.\n- `test_username_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test username validation with real UI interactions.\n- `test_timezone_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test timezone validation with real UI interactions.\n- `test_feature_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test feature enablement validation.\n- `test_messages_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test messages-specific validation when messages are enabled.\n- `test_account_creation_real_behavior(self, dialog, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test complete account creation workflow with real file system changes.\n- `test_widget_data_collection_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test that widgets properly collect and return data.\n- `test_user_profile_dialog_integration(self, qapp, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test integration with user profile dialog.\n- `test_user_index_integration_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test user index integration and updates.\n- `test_feature_enablement_persistence_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test that feature enablement is properly persisted.\n- `test_duplicate_username_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of duplicate usernames.\n- `test_invalid_data_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of invalid data during account creation.\n- `test_file_system_error_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of file system errors.\n- `test_widget_error_handling_real_behavior(self, qapp, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of widget errors during account creation.\n- `test_full_account_lifecycle_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test complete account lifecycle with real file system changes.\n- `test_multiple_users_same_features_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test multiple users with same feature configurations.\n**Classes:**\n- `TestAccountCreationDialogRealBehavior` - Test account creation dialog with real behavior verification.\n  - `TestAccountCreationDialogRealBehavior.dialog(self, qapp, test_data_dir, mock_config)` - Create account creation dialog for testing.\n  - `TestAccountCreationDialogRealBehavior.test_dialog_initialization_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\n  - `TestAccountCreationDialogRealBehavior.test_feature_enablement_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test feature enablement checkboxes control tab visibility.\n  - `TestAccountCreationDialogRealBehavior.test_username_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test username validation with real UI interactions.\n  - `TestAccountCreationDialogRealBehavior.test_timezone_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test timezone validation with real UI interactions.\n  - `TestAccountCreationDialogRealBehavior.test_feature_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test feature enablement validation.\n  - `TestAccountCreationDialogRealBehavior.test_messages_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test messages-specific validation when messages are enabled.\n  - `TestAccountCreationDialogRealBehavior.test_account_creation_real_behavior(self, dialog, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test complete account creation workflow with real file system changes.\n  - `TestAccountCreationDialogRealBehavior.test_widget_data_collection_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test that widgets properly collect and return data.\n- `TestAccountManagementRealBehavior` - Test account management functionality with real behavior verification.\n  - `TestAccountManagementRealBehavior.test_user_profile_dialog_integration(self, qapp, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test integration with user profile dialog.\n  - `TestAccountManagementRealBehavior.test_user_index_integration_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test user index integration and updates.\n  - `TestAccountManagementRealBehavior.test_feature_enablement_persistence_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test that feature enablement is properly persisted.\n- `TestAccountCreationErrorHandling` - Test error handling in account creation and management.\n  - `TestAccountCreationErrorHandling.test_duplicate_username_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of duplicate usernames.\n  - `TestAccountCreationErrorHandling.test_invalid_data_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of invalid data during account creation.\n  - `TestAccountCreationErrorHandling.test_file_system_error_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of file system errors.\n  - `TestAccountCreationErrorHandling.test_widget_error_handling_real_behavior(self, qapp, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of widget errors during account creation.\n- `TestAccountCreationIntegration` - Test integration scenarios for account creation and management.\n  - `TestAccountCreationIntegration.test_full_account_lifecycle_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test complete account lifecycle with real file system changes.\n  - `TestAccountCreationIntegration.test_multiple_users_same_features_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test multiple users with same feature configurations.\n\n### tests/test_cleanup.py\n**Functions:**\n- `main()` - Command-line interface for test cleanup.\n- `__init__(self, test_data_dir)` - Initialize the cleanup manager.\n- `cleanup_test_users(self, user_ids)` - Clean up test user data.\n\nArgs:\n    user_ids: List of user IDs to clean up. If None, cleans up all test users.\n    \nReturns:\n    bool: True if cleanup was successful, False otherwise.\n- `_find_test_users(self)` - Find all test users in the user directory.\n- `_cleanup_single_user(self, user_id)` - Clean up a single test user.\n- `_create_user_backup(self, user_id, user_path)` - Create a backup of user data before cleanup.\n- `reset_test_environment(self)` - Reset the entire test environment.\n- `_cleanup_old_test_logs(self, keep_days)` - Clean up old test log files.\n- `_cleanup_temp_files(self)` - Clean up temporary test files.\n- `validate_test_data_integrity(self)` - Validate the integrity of test data.\n- `_validate_user_data(self, user_id, user_path)` - Validate a single user's data integrity.\n- `_find_orphaned_files(self)` - Find orphaned files in the user directory.\n**Classes:**\n- `TestCleanupManager` - Manages test data cleanup and isolation.\n  - `TestCleanupManager.__init__(self, test_data_dir)` - Initialize the cleanup manager.\n  - `TestCleanupManager.cleanup_test_users(self, user_ids)` - Clean up test user data.\n\nArgs:\n    user_ids: List of user IDs to clean up. If None, cleans up all test users.\n    \nReturns:\n    bool: True if cleanup was successful, False otherwise.\n  - `TestCleanupManager._find_test_users(self)` - Find all test users in the user directory.\n  - `TestCleanupManager._cleanup_single_user(self, user_id)` - Clean up a single test user.\n  - `TestCleanupManager._create_user_backup(self, user_id, user_path)` - Create a backup of user data before cleanup.\n  - `TestCleanupManager.reset_test_environment(self)` - Reset the entire test environment.\n  - `TestCleanupManager._cleanup_old_test_logs(self, keep_days)` - Clean up old test log files.\n  - `TestCleanupManager._cleanup_temp_files(self)` - Clean up temporary test files.\n  - `TestCleanupManager.validate_test_data_integrity(self)` - Validate the integrity of test data.\n  - `TestCleanupManager._validate_user_data(self, user_id, user_path)` - Validate a single user's data integrity.\n  - `TestCleanupManager._find_orphaned_files(self)` - Find orphaned files in the user directory.\n\n### tests/test_communication_manager.py\n**Functions:**\n- `temp_dir(self)` - Create a temporary directory for testing.\n- `comm_manager(self)` - Create a CommunicationManager instance for testing.\n- `mock_channel_config(self)` - Create a mock channel configuration.\n- `realistic_mock_channel(self)` - Create a realistic mock channel with proper async methods.\n- `test_communication_manager_singleton(self, comm_manager)` - Test that CommunicationManager follows singleton pattern.\n- `test_communication_manager_initialization(self, comm_manager)` - Test CommunicationManager initialization.\n- `test_initialize_channels_from_config(self, mock_factory, comm_manager, mock_channel_config, realistic_mock_channel)` - Test channel initialization from configuration with realistic channel behavior.\n- `test_get_available_channels(self, comm_manager, realistic_mock_channel)` - Test getting available channels with realistic channel setup.\n- `test_is_channel_ready_with_realistic_channel(self, comm_manager, realistic_mock_channel)` - Test checking if a channel is ready with realistic channel behavior.\n- `test_send_message_sync_with_realistic_channel(self, comm_manager, realistic_mock_channel)` - Test synchronous message sending with realistic channel behavior.\n- `test_send_message_sync_channel_not_ready(self, comm_manager, realistic_mock_channel)` - Test synchronous message sending when channel is not ready.\n- `test_send_message_sync_channel_not_found(self, comm_manager)` - Test synchronous message sending when channel doesn't exist.\n- `test_legacy_channel_wrapper_with_realistic_channel(self, realistic_mock_channel)` - Test LegacyChannelWrapper functionality with realistic channel behavior.\n- `test_legacy_channel_wrapper_method_delegation(self, realistic_mock_channel)` - Test that LegacyChannelWrapper properly delegates methods to base channel.\n- `test_communication_manager_error_handling(self, comm_manager, realistic_mock_channel)` - Test error handling in communication manager.\n**Classes:**\n- `TestCommunicationManager` - Test cases for the CommunicationManager class.\n  - `TestCommunicationManager.temp_dir(self)` - Create a temporary directory for testing.\n  - `TestCommunicationManager.comm_manager(self)` - Create a CommunicationManager instance for testing.\n  - `TestCommunicationManager.mock_channel_config(self)` - Create a mock channel configuration.\n  - `TestCommunicationManager.realistic_mock_channel(self)` - Create a realistic mock channel with proper async methods.\n  - `TestCommunicationManager.test_communication_manager_singleton(self, comm_manager)` - Test that CommunicationManager follows singleton pattern.\n  - `TestCommunicationManager.test_communication_manager_initialization(self, comm_manager)` - Test CommunicationManager initialization.\n  - `TestCommunicationManager.test_initialize_channels_from_config(self, mock_factory, comm_manager, mock_channel_config, realistic_mock_channel)` - Test channel initialization from configuration with realistic channel behavior.\n  - `TestCommunicationManager.test_get_available_channels(self, comm_manager, realistic_mock_channel)` - Test getting available channels with realistic channel setup.\n  - `TestCommunicationManager.test_is_channel_ready_with_realistic_channel(self, comm_manager, realistic_mock_channel)` - Test checking if a channel is ready with realistic channel behavior.\n  - `TestCommunicationManager.test_send_message_sync_with_realistic_channel(self, comm_manager, realistic_mock_channel)` - Test synchronous message sending with realistic channel behavior.\n  - `TestCommunicationManager.test_send_message_sync_channel_not_ready(self, comm_manager, realistic_mock_channel)` - Test synchronous message sending when channel is not ready.\n  - `TestCommunicationManager.test_send_message_sync_channel_not_found(self, comm_manager)` - Test synchronous message sending when channel doesn't exist.\n  - `TestCommunicationManager.test_legacy_channel_wrapper_with_realistic_channel(self, realistic_mock_channel)` - Test LegacyChannelWrapper functionality with realistic channel behavior.\n  - `TestCommunicationManager.test_legacy_channel_wrapper_method_delegation(self, realistic_mock_channel)` - Test that LegacyChannelWrapper properly delegates methods to base channel.\n  - `TestCommunicationManager.test_communication_manager_error_handling(self, comm_manager, realistic_mock_channel)` - Test error handling in communication manager.\n\n### tests/test_config.py\n**Functions:**\n- `test_validate_core_paths_success(self, test_data_dir)` - Test successful core path validation.\n- `test_validate_core_paths_missing_directory(self)` - Test core path validation with missing directory.\n- `test_validate_ai_configuration_success(self)` - Test successful AI configuration validation.\n- `test_validate_ai_configuration_missing_url(self)` - Test AI configuration validation with missing URL.\n- `test_validate_communication_channels_success(self)` - Test successful communication channels validation.\n- `test_validate_communication_channels_no_tokens(self)` - Test communication channels validation with no tokens.\n- `test_validate_logging_configuration_success(self)` - Test successful logging configuration validation.\n- `test_validate_scheduler_configuration_success(self)` - Test successful scheduler configuration validation.\n- `test_validate_file_organization_settings_success(self)` - Test successful file organization settings validation.\n- `test_validate_environment_variables_success(self)` - Test successful environment variables validation.\n- `test_validate_all_configuration_success(self, test_data_dir)` - Test comprehensive configuration validation.\n- `test_validate_and_raise_if_invalid_success(self, test_data_dir)` - Test successful validation with no exceptions.\n- `test_validate_and_raise_if_invalid_failure(self)` - Test validation failure raises ConfigurationError.\n- `test_base_data_dir_default(self)` - Test BASE_DATA_DIR default value.\n- `test_user_info_dir_path_default(self)` - Test USER_INFO_DIR_PATH default value.\n- `test_default_messages_dir_path_default(self)` - Test DEFAULT_MESSAGES_DIR_PATH default value.\n- `test_environment_override(self)` - Test environment variable override.\n**Classes:**\n- `TestConfigValidation` - Test configuration validation functions.\n  - `TestConfigValidation.test_validate_core_paths_success(self, test_data_dir)` - Test successful core path validation.\n  - `TestConfigValidation.test_validate_core_paths_missing_directory(self)` - Test core path validation with missing directory.\n  - `TestConfigValidation.test_validate_ai_configuration_success(self)` - Test successful AI configuration validation.\n  - `TestConfigValidation.test_validate_ai_configuration_missing_url(self)` - Test AI configuration validation with missing URL.\n  - `TestConfigValidation.test_validate_communication_channels_success(self)` - Test successful communication channels validation.\n  - `TestConfigValidation.test_validate_communication_channels_no_tokens(self)` - Test communication channels validation with no tokens.\n  - `TestConfigValidation.test_validate_logging_configuration_success(self)` - Test successful logging configuration validation.\n  - `TestConfigValidation.test_validate_scheduler_configuration_success(self)` - Test successful scheduler configuration validation.\n  - `TestConfigValidation.test_validate_file_organization_settings_success(self)` - Test successful file organization settings validation.\n  - `TestConfigValidation.test_validate_environment_variables_success(self)` - Test successful environment variables validation.\n  - `TestConfigValidation.test_validate_all_configuration_success(self, test_data_dir)` - Test comprehensive configuration validation.\n  - `TestConfigValidation.test_validate_and_raise_if_invalid_success(self, test_data_dir)` - Test successful validation with no exceptions.\n  - `TestConfigValidation.test_validate_and_raise_if_invalid_failure(self)` - Test validation failure raises ConfigurationError.\n- `TestConfigConstants` - Test configuration constants.\n  - `TestConfigConstants.test_base_data_dir_default(self)` - Test BASE_DATA_DIR default value.\n  - `TestConfigConstants.test_user_info_dir_path_default(self)` - Test USER_INFO_DIR_PATH default value.\n  - `TestConfigConstants.test_default_messages_dir_path_default(self)` - Test DEFAULT_MESSAGES_DIR_PATH default value.\n  - `TestConfigConstants.test_environment_override(self)` - Test environment variable override.\n\n### tests/test_error_handling.py\n**Functions:**\n- `test_mhm_error_basic(self)` - Test basic MHMError creation.\n- `test_mhm_error_with_details(self)` - Test MHMError with custom details.\n- `test_data_error(self)` - Test DataError exception.\n- `test_file_operation_error(self)` - Test FileOperationError exception.\n- `test_config_error(self)` - Test ConfigError exception.\n- `test_validation_error(self)` - Test ValidationError exception.\n- `test_error_handler_success(self)` - Test error_handler with successful function.\n- `test_error_handler_exception(self)` - Test error_handler with exception.\n- `test_error_handler_custom_return(self)` - Test error_handler with custom return value.\n- `test_error_handler_logs_error(self)` - Test error_handler logs errors.\n- `test_handle_errors_success(self)` - Test handle_errors with successful function.\n- `test_handle_errors_exception(self)` - Test handle_errors with exception.\n- `test_handle_errors_custom_return(self)` - Test handle_errors with custom return value.\n- `test_handle_errors_specific_exception(self)` - Test handle_errors with specific exception handling.\n- `test_handle_errors_logs_error(self)` - Test handle_errors logs errors.\n- `test_handle_file_error(self)` - Test handle_file_error function.\n- `test_handle_configuration_error(self)` - Test handle_configuration_error function.\n- `test_error_handling_in_function_chain(self)` - Test error handling in a chain of functions.\n- `test_error_handling_with_recovery(self)` - Test error handling with recovery mechanisms and real side effects.\n- `test_error_handling_different_exception_types(self)` - Test error handling with different exception types and side effects.\n- `test_error_handler_with_args_kwargs(self)` - Test error_handler with function arguments.\n- `test_handle_errors_with_args_kwargs(self)` - Test handle_errors with function arguments.\n- `test_error_handler_nested_exceptions(self)` - Test error_handler with nested exceptions.\n- `test_handle_errors_with_logging_disabled(self)` - Test handle_errors when logging is disabled.\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function(exception_type)` - No description\n- `test_function(arg1, arg2, kwarg1)` - No description\n- `test_function(arg1, arg2, kwarg1)` - No description\n- `outer_function()` - No description\n- `inner_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `outer_function()` - No description\n- `inner_function()` - No description\n- `test_function()` - No description\n- `corrupt_data_function()` - No description\n- `recover_data_function()` - No description\n- `backup_function()` - No description\n- `cleanup_function()` - No description\n- `state_validation_function()` - No description\n- `test_function()` - No description\n**Classes:**\n- `TestCustomExceptions` - Test custom exception classes.\n  - `TestCustomExceptions.test_mhm_error_basic(self)` - Test basic MHMError creation.\n  - `TestCustomExceptions.test_mhm_error_with_details(self)` - Test MHMError with custom details.\n  - `TestCustomExceptions.test_data_error(self)` - Test DataError exception.\n  - `TestCustomExceptions.test_file_operation_error(self)` - Test FileOperationError exception.\n  - `TestCustomExceptions.test_config_error(self)` - Test ConfigError exception.\n  - `TestCustomExceptions.test_validation_error(self)` - Test ValidationError exception.\n- `TestErrorHandlerDecorator` - Test the handle_errors decorator.\n  - `TestErrorHandlerDecorator.test_error_handler_success(self)` - Test error_handler with successful function.\n  - `TestErrorHandlerDecorator.test_error_handler_exception(self)` - Test error_handler with exception.\n  - `TestErrorHandlerDecorator.test_error_handler_custom_return(self)` - Test error_handler with custom return value.\n  - `TestErrorHandlerDecorator.test_error_handler_logs_error(self)` - Test error_handler logs errors.\n- `TestHandleErrorsDecorator` - Test the handle_errors decorator.\n  - `TestHandleErrorsDecorator.test_handle_errors_success(self)` - Test handle_errors with successful function.\n  - `TestHandleErrorsDecorator.test_handle_errors_exception(self)` - Test handle_errors with exception.\n  - `TestHandleErrorsDecorator.test_handle_errors_custom_return(self)` - Test handle_errors with custom return value.\n  - `TestHandleErrorsDecorator.test_handle_errors_specific_exception(self)` - Test handle_errors with specific exception handling.\n  - `TestHandleErrorsDecorator.test_handle_errors_logs_error(self)` - Test handle_errors logs errors.\n- `TestErrorHandlingFunctions` - Test specific error handling functions.\n  - `TestErrorHandlingFunctions.test_handle_file_error(self)` - Test handle_file_error function.\n  - `TestErrorHandlingFunctions.test_handle_configuration_error(self)` - Test handle_configuration_error function.\n- `TestErrorHandlingIntegration` - Test error handling integration scenarios.\n  - `TestErrorHandlingIntegration.test_error_handling_in_function_chain(self)` - Test error handling in a chain of functions.\n  - `TestErrorHandlingIntegration.test_error_handling_with_recovery(self)` - Test error handling with recovery mechanisms and real side effects.\n  - `TestErrorHandlingIntegration.test_error_handling_different_exception_types(self)` - Test error handling with different exception types and side effects.\n- `TestErrorHandlingEdgeCases` - Test error handling edge cases.\n  - `TestErrorHandlingEdgeCases.test_error_handler_with_args_kwargs(self)` - Test error_handler with function arguments.\n  - `TestErrorHandlingEdgeCases.test_handle_errors_with_args_kwargs(self)` - Test handle_errors with function arguments.\n  - `TestErrorHandlingEdgeCases.test_error_handler_nested_exceptions(self)` - Test error_handler with nested exceptions.\n  - `TestErrorHandlingEdgeCases.test_handle_errors_with_logging_disabled(self)` - Test handle_errors when logging is disabled.\n\n### tests/test_file_operations.py\n**Functions:**\n- `test_load_json_data_success(self, temp_file)` - Test loading JSON data successfully.\n- `test_load_json_data_file_not_found(self)` - Test loading JSON data from non-existent file.\n- `test_load_json_data_corrupted_json(self, temp_file)` - Test loading corrupted JSON data.\n- `test_load_json_data_empty_file(self, temp_file)` - Test loading from empty file.\n- `test_save_json_data_success(self, temp_file)` - Test saving JSON data successfully.\n- `test_save_json_data_create_directory(self, test_data_dir)` - Test saving JSON data with directory creation.\n- `test_save_json_data_permission_error(self)` - Test saving JSON data with permission error.\n- `test_determine_file_path_user_file(self, test_data_dir)` - Test determining file path for user file.\n- `test_determine_file_path_default_messages(self, test_data_dir)` - Test determining file path for default messages.\n- `test_verify_file_access_success(self, temp_file)` - Test file access verification for accessible file.\n- `test_verify_file_access_missing_file(self)` - Test file access verification for missing file.\n- `test_verify_file_access_permission_error(self)` - Test file access verification with permission error.\n- `test_get_user_file_path_success(self, test_data_dir)` - Test getting user file path successfully.\n- `test_ensure_user_directory_success(self, test_data_dir)` - Test ensuring user directory exists.\n- `test_ensure_user_directory_already_exists(self, test_data_dir)` - Test ensuring user directory that already exists.\n- `test_load_json_data_unicode_content(self, temp_file)` - Test loading JSON data with unicode content.\n- `test_save_json_data_complex_objects(self, temp_file)` - Test saving JSON data with complex objects.\n- `test_determine_file_path_invalid_user_id(self)` - Test determining file path with invalid user ID.\n- `test_determine_file_path_invalid_file_type(self)` - Test determining file path with invalid file type.\n- `test_file_operations_lifecycle(self, test_data_dir)` - Test complete file operations lifecycle with real side effects.\n- `test_save_large_json_data(self, temp_file)` - Test saving large JSON data with performance verification.\n- `test_load_large_json_data(self, temp_file)` - Test loading large JSON data.\n**Classes:**\n- `TestFileOperations` - Test file operations functions.\n  - `TestFileOperations.test_load_json_data_success(self, temp_file)` - Test loading JSON data successfully.\n  - `TestFileOperations.test_load_json_data_file_not_found(self)` - Test loading JSON data from non-existent file.\n  - `TestFileOperations.test_load_json_data_corrupted_json(self, temp_file)` - Test loading corrupted JSON data.\n  - `TestFileOperations.test_load_json_data_empty_file(self, temp_file)` - Test loading from empty file.\n  - `TestFileOperations.test_save_json_data_success(self, temp_file)` - Test saving JSON data successfully.\n  - `TestFileOperations.test_save_json_data_create_directory(self, test_data_dir)` - Test saving JSON data with directory creation.\n  - `TestFileOperations.test_save_json_data_permission_error(self)` - Test saving JSON data with permission error.\n  - `TestFileOperations.test_determine_file_path_user_file(self, test_data_dir)` - Test determining file path for user file.\n  - `TestFileOperations.test_determine_file_path_default_messages(self, test_data_dir)` - Test determining file path for default messages.\n  - `TestFileOperations.test_verify_file_access_success(self, temp_file)` - Test file access verification for accessible file.\n  - `TestFileOperations.test_verify_file_access_missing_file(self)` - Test file access verification for missing file.\n  - `TestFileOperations.test_verify_file_access_permission_error(self)` - Test file access verification with permission error.\n  - `TestFileOperations.test_get_user_file_path_success(self, test_data_dir)` - Test getting user file path successfully.\n  - `TestFileOperations.test_ensure_user_directory_success(self, test_data_dir)` - Test ensuring user directory exists.\n  - `TestFileOperations.test_ensure_user_directory_already_exists(self, test_data_dir)` - Test ensuring user directory that already exists.\n- `TestFileOperationsEdgeCases` - Test edge cases and error conditions.\n  - `TestFileOperationsEdgeCases.test_load_json_data_unicode_content(self, temp_file)` - Test loading JSON data with unicode content.\n  - `TestFileOperationsEdgeCases.test_save_json_data_complex_objects(self, temp_file)` - Test saving JSON data with complex objects.\n  - `TestFileOperationsEdgeCases.test_determine_file_path_invalid_user_id(self)` - Test determining file path with invalid user ID.\n  - `TestFileOperationsEdgeCases.test_determine_file_path_invalid_file_type(self)` - Test determining file path with invalid file type.\n  - `TestFileOperationsEdgeCases.test_file_operations_lifecycle(self, test_data_dir)` - Test complete file operations lifecycle with real side effects.\n- `TestFileOperationsPerformance` - Test file operations performance and large data handling.\n  - `TestFileOperationsPerformance.test_save_large_json_data(self, temp_file)` - Test saving large JSON data with performance verification.\n  - `TestFileOperationsPerformance.test_load_large_json_data(self, temp_file)` - Test loading large JSON data.\n\n### tests/test_message_management.py\n**Functions:**\n- `test_get_message_categories_success(self)` - Test getting message categories successfully.\n- `test_get_message_categories_default(self)` - Test getting default message categories.\n- `test_get_message_categories_custom(self)` - Test getting custom message categories.\n- `test_get_message_categories_empty(self)` - Test getting message categories when none are defined.\n- `test_load_default_messages_success(self, test_data_dir)` - Test loading default messages successfully.\n- `test_load_default_messages_file_not_found(self, test_data_dir)` - Test loading default messages when file doesn't exist.\n- `test_load_default_messages_invalid_json(self, test_data_dir)` - Test loading default messages with invalid JSON.\n- `test_add_message_success(self, test_data_dir)` - Test adding a message successfully.\n- `test_edit_message_success(self, test_data_dir)` - Test editing a message successfully.\n- `test_edit_message_not_found(self, test_data_dir)` - Test editing a message that doesn't exist.\n- `test_update_message_success(self, test_data_dir)` - Test updating a message successfully.\n- `test_delete_message_success(self, test_data_dir)` - Test deleting a message successfully.\n- `test_delete_message_not_found(self, test_data_dir)` - Test deleting a message that doesn't exist.\n- `test_store_sent_message_success(self, test_data_dir)` - Test storing a sent message successfully.\n- `test_get_last_10_messages_success(self, test_data_dir)` - Test getting last 10 sent messages successfully.\n- `test_get_last_10_messages_empty(self, test_data_dir)` - Test getting last 10 messages when none exist.\n- `test_create_message_file_from_defaults_success(self, test_data_dir)` - Test creating message file from defaults successfully.\n- `test_ensure_user_message_files_success(self, test_data_dir)` - Test ensuring user message files exist successfully.\n- `test_add_message_file_error(self, test_data_dir)` - Test add_message handles file errors gracefully.\n- `test_edit_message_file_error(self, test_data_dir)` - Test edit_message handles file errors gracefully.\n- `test_delete_message_file_error(self, test_data_dir)` - Test delete_message handles file errors gracefully.\n- `test_store_sent_message_file_error(self, test_data_dir)` - Test store_sent_message handles file errors gracefully.\n- `test_full_message_lifecycle(self, test_data_dir)` - Test complete message lifecycle (add, edit, delete).\n**Classes:**\n- `TestMessageCategories` - Test message category functionality.\n  - `TestMessageCategories.test_get_message_categories_success(self)` - Test getting message categories successfully.\n  - `TestMessageCategories.test_get_message_categories_default(self)` - Test getting default message categories.\n  - `TestMessageCategories.test_get_message_categories_custom(self)` - Test getting custom message categories.\n  - `TestMessageCategories.test_get_message_categories_empty(self)` - Test getting message categories when none are defined.\n- `TestDefaultMessages` - Test default message loading functionality.\n  - `TestDefaultMessages.test_load_default_messages_success(self, test_data_dir)` - Test loading default messages successfully.\n  - `TestDefaultMessages.test_load_default_messages_file_not_found(self, test_data_dir)` - Test loading default messages when file doesn't exist.\n  - `TestDefaultMessages.test_load_default_messages_invalid_json(self, test_data_dir)` - Test loading default messages with invalid JSON.\n- `TestMessageCRUD` - Test message CRUD operations.\n  - `TestMessageCRUD.test_add_message_success(self, test_data_dir)` - Test adding a message successfully.\n  - `TestMessageCRUD.test_edit_message_success(self, test_data_dir)` - Test editing a message successfully.\n  - `TestMessageCRUD.test_edit_message_not_found(self, test_data_dir)` - Test editing a message that doesn't exist.\n  - `TestMessageCRUD.test_update_message_success(self, test_data_dir)` - Test updating a message successfully.\n  - `TestMessageCRUD.test_delete_message_success(self, test_data_dir)` - Test deleting a message successfully.\n  - `TestMessageCRUD.test_delete_message_not_found(self, test_data_dir)` - Test deleting a message that doesn't exist.\n- `TestSentMessages` - Test sent message tracking functionality.\n  - `TestSentMessages.test_store_sent_message_success(self, test_data_dir)` - Test storing a sent message successfully.\n  - `TestSentMessages.test_get_last_10_messages_success(self, test_data_dir)` - Test getting last 10 sent messages successfully.\n  - `TestSentMessages.test_get_last_10_messages_empty(self, test_data_dir)` - Test getting last 10 messages when none exist.\n- `TestMessageFileManagement` - Test message file creation and management.\n  - `TestMessageFileManagement.test_create_message_file_from_defaults_success(self, test_data_dir)` - Test creating message file from defaults successfully.\n  - `TestMessageFileManagement.test_ensure_user_message_files_success(self, test_data_dir)` - Test ensuring user message files exist successfully.\n- `TestErrorHandling` - Test error handling in message management functions.\n  - `TestErrorHandling.test_add_message_file_error(self, test_data_dir)` - Test add_message handles file errors gracefully.\n  - `TestErrorHandling.test_edit_message_file_error(self, test_data_dir)` - Test edit_message handles file errors gracefully.\n  - `TestErrorHandling.test_delete_message_file_error(self, test_data_dir)` - Test delete_message handles file errors gracefully.\n  - `TestErrorHandling.test_store_sent_message_file_error(self, test_data_dir)` - Test store_sent_message handles file errors gracefully.\n- `TestIntegration` - Test integration between message management functions.\n  - `TestIntegration.test_full_message_lifecycle(self, test_data_dir)` - Test complete message lifecycle (add, edit, delete).\n\n### tests/test_scheduler.py\n**Functions:**\n- `mock_communication_manager()` - Create a mock communication manager.\n- `scheduler_manager(self, mock_communication_manager)` - Create a SchedulerManager instance for testing.\n- `test_scheduler_manager_initialization(self, mock_communication_manager)` - Test SchedulerManager initialization.\n- `test_stop_scheduler_no_thread(self, scheduler_manager)` - Test stopping scheduler when no thread is running.\n- `test_is_job_for_category_no_jobs(self, scheduler_manager)` - Test checking for jobs when no jobs exist.\n- `test_is_job_for_category_with_matching_job(self, scheduler_manager)` - Test checking for jobs when a matching job exists.\n- `test_is_job_for_category_with_non_matching_job(self, scheduler_manager)` - Test checking for jobs when no matching job exists.\n- `test_get_random_time_within_period_valid_times(self, scheduler_manager)` - Test getting random time within a valid time period.\n- `test_get_random_time_within_period_invalid_times(self, scheduler_manager)` - Test getting random time with invalid time format.\n- `test_is_time_conflict_no_conflicts(self, scheduler_manager)` - Test time conflict detection when no conflicts exist.\n- `test_cleanup_old_tasks(self, scheduler_manager, test_data_dir)` - Test cleaning up old scheduled tasks.\n- `test_log_scheduled_tasks(self, scheduler_manager)` - Test logging of scheduled tasks.\n- `test_get_user_categories_success(self, mock_user_data)` - Test getting user categories successfully.\n- `test_get_user_categories_no_user(self)` - Test getting categories for non-existent user.\n- `test_get_user_task_preferences_success(self, mock_user_data)` - Test getting user task preferences successfully.\n- `test_get_user_task_preferences_no_user(self)` - Test getting task preferences for non-existent user.\n- `test_get_user_checkin_preferences_success(self, mock_user_data)` - Test getting user check-in preferences successfully.\n- `test_get_user_checkin_preferences_no_user(self)` - Test getting check-in preferences for non-existent user.\n- `test_scheduler_lifecycle(self, mock_communication_manager, test_data_dir)` - Test complete scheduler lifecycle.\n- `test_scheduler_with_mock_users(self, mock_communication_manager)` - Test scheduler with mock user data.\n- `test_scheduler_with_empty_user_list(self, mock_communication_manager)` - Test scheduler behavior with no users.\n- `test_scheduler_with_invalid_user_data(self, mock_communication_manager)` - Test scheduler behavior with invalid user data.\n- `test_random_time_generation_consistency(self, mock_communication_manager)` - Test that random time generation is consistent within bounds.\n- `test_schedule_all_task_reminders_success(self, test_data_dir)` - Test scheduling all task reminders for a user.\n- `test_schedule_all_task_reminders_disabled(self, test_data_dir)` - Test scheduling task reminders when task management is disabled.\n- `test_cleanup_task_reminders_success(self)` - Test cleaning up task reminders.\n- `test_cleanup_task_reminders_specific_task(self)` - Test cleaning up specific task reminders.\n**Classes:**\n- `TestSchedulerManager` - Test SchedulerManager functionality.\n  - `TestSchedulerManager.scheduler_manager(self, mock_communication_manager)` - Create a SchedulerManager instance for testing.\n  - `TestSchedulerManager.test_scheduler_manager_initialization(self, mock_communication_manager)` - Test SchedulerManager initialization.\n  - `TestSchedulerManager.test_stop_scheduler_no_thread(self, scheduler_manager)` - Test stopping scheduler when no thread is running.\n  - `TestSchedulerManager.test_is_job_for_category_no_jobs(self, scheduler_manager)` - Test checking for jobs when no jobs exist.\n  - `TestSchedulerManager.test_is_job_for_category_with_matching_job(self, scheduler_manager)` - Test checking for jobs when a matching job exists.\n  - `TestSchedulerManager.test_is_job_for_category_with_non_matching_job(self, scheduler_manager)` - Test checking for jobs when no matching job exists.\n  - `TestSchedulerManager.test_get_random_time_within_period_valid_times(self, scheduler_manager)` - Test getting random time within a valid time period.\n  - `TestSchedulerManager.test_get_random_time_within_period_invalid_times(self, scheduler_manager)` - Test getting random time with invalid time format.\n  - `TestSchedulerManager.test_is_time_conflict_no_conflicts(self, scheduler_manager)` - Test time conflict detection when no conflicts exist.\n  - `TestSchedulerManager.test_cleanup_old_tasks(self, scheduler_manager, test_data_dir)` - Test cleaning up old scheduled tasks.\n  - `TestSchedulerManager.test_log_scheduled_tasks(self, scheduler_manager)` - Test logging of scheduled tasks.\n- `TestSchedulerFunctions` - Test standalone scheduler functions.\n  - `TestSchedulerFunctions.test_get_user_categories_success(self, mock_user_data)` - Test getting user categories successfully.\n  - `TestSchedulerFunctions.test_get_user_categories_no_user(self)` - Test getting categories for non-existent user.\n  - `TestSchedulerFunctions.test_get_user_task_preferences_success(self, mock_user_data)` - Test getting user task preferences successfully.\n  - `TestSchedulerFunctions.test_get_user_task_preferences_no_user(self)` - Test getting task preferences for non-existent user.\n  - `TestSchedulerFunctions.test_get_user_checkin_preferences_success(self, mock_user_data)` - Test getting user check-in preferences successfully.\n  - `TestSchedulerFunctions.test_get_user_checkin_preferences_no_user(self)` - Test getting check-in preferences for non-existent user.\n- `TestSchedulerIntegration` - Test scheduler integration scenarios.\n  - `TestSchedulerIntegration.test_scheduler_lifecycle(self, mock_communication_manager, test_data_dir)` - Test complete scheduler lifecycle.\n  - `TestSchedulerIntegration.test_scheduler_with_mock_users(self, mock_communication_manager)` - Test scheduler with mock user data.\n- `TestSchedulerEdgeCases` - Test scheduler edge cases and error conditions.\n  - `TestSchedulerEdgeCases.test_scheduler_with_empty_user_list(self, mock_communication_manager)` - Test scheduler behavior with no users.\n  - `TestSchedulerEdgeCases.test_scheduler_with_invalid_user_data(self, mock_communication_manager)` - Test scheduler behavior with invalid user data.\n  - `TestSchedulerEdgeCases.test_random_time_generation_consistency(self, mock_communication_manager)` - Test that random time generation is consistent within bounds.\n- `TestTaskReminderFunctions` - Test task reminder specific functions.\n  - `TestTaskReminderFunctions.test_schedule_all_task_reminders_success(self, test_data_dir)` - Test scheduling all task reminders for a user.\n  - `TestTaskReminderFunctions.test_schedule_all_task_reminders_disabled(self, test_data_dir)` - Test scheduling task reminders when task management is disabled.\n  - `TestTaskReminderFunctions.test_cleanup_task_reminders_success(self)` - Test cleaning up task reminders.\n  - `TestTaskReminderFunctions.test_cleanup_task_reminders_specific_task(self)` - Test cleaning up specific task reminders.\n\n### tests/test_service.py\n**Functions:**\n- `temp_dir(self)` - Create a temporary directory for testing.\n- `service(self)` - Create an MHMService instance for testing.\n- `temp_base_dir(self)` - Create a temporary base directory for file-based communication tests.\n- `test_service_initialization(self, service)` - Test MHMService initialization.\n- `test_validate_configuration_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test configuration validation with real file operations.\n- `test_initialize_paths_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test path initialization with real file system operations.\n- `test_check_and_fix_logging_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test logging health check with real file operations.\n- `test_start_service_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service startup with real state changes.\n- `test_signal_handler_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test signal handler with real state changes.\n- `test_shutdown_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service shutdown with real state changes.\n- `test_emergency_shutdown_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test emergency shutdown with real state changes.\n- `test_run_service_loop_shutdown_file_detection_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test service loop detects shutdown request file with real file operations.\n- `test_check_test_message_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test processing of test message request files with real file operations.\n- `test_cleanup_test_message_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test cleanup of test message request files with real file operations.\n- `test_check_reschedule_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test processing of reschedule request files with real file operations.\n- `test_cleanup_reschedule_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test cleanup of reschedule request files with real file operations.\n- `test_get_user_categories_real_behavior(self)` - REAL BEHAVIOR TEST: Test get_user_categories with real data structures.\n- `test_main_function_real_behavior(self)` - REAL BEHAVIOR TEST: Test main function with real service creation.\n- `test_service_integration_with_managers_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service integration with real manager objects.\n- `test_service_error_recovery_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service error recovery with real state changes.\n- `test_service_loop_heartbeat_logging_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service loop heartbeat logging with real state management.\n- `test_service_file_based_communication_integration_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test service file-based communication integration with real file operations.\n- `test_real_file_based_communication_creates_and_removes_files(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Verify that test message requests actually create and remove files.\n- `test_real_cleanup_removes_actual_files(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Verify that cleanup actually removes real files.\n- `test_real_service_initialization_creates_actual_service(self)` - REAL BEHAVIOR TEST: Verify that service initialization creates a real service object.\n- `test_real_signal_handler_changes_service_state(self)` - REAL BEHAVIOR TEST: Verify that signal handler actually changes service state.\n- `test_real_emergency_shutdown_changes_service_state(self)` - REAL BEHAVIOR TEST: Verify that emergency shutdown actually changes service state.\n- `test_real_get_user_categories_returns_actual_data(self)` - REAL BEHAVIOR TEST: Verify that get_user_categories returns actual data structures.\n- `test_real_service_error_recovery_stops_service(self)` - REAL BEHAVIOR TEST: Verify that error recovery actually stops the service.\n- `mock_get_user_data_side_effect(user_id, data_type)` - No description\n- `mock_start_side_effect()` - No description\n- `mock_shutdown_side_effect()` - No description\n- `mock_sleep_side_effect(seconds)` - No description\n- `mock_join_side_effect()` - No description\n- `mock_join_side_effect()` - No description\n**Classes:**\n- `TestMHMService` - Test cases for the MHMService class.\n  - `TestMHMService.temp_dir(self)` - Create a temporary directory for testing.\n  - `TestMHMService.service(self)` - Create an MHMService instance for testing.\n  - `TestMHMService.temp_base_dir(self)` - Create a temporary base directory for file-based communication tests.\n  - `TestMHMService.test_service_initialization(self, service)` - Test MHMService initialization.\n  - `TestMHMService.test_validate_configuration_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test configuration validation with real file operations.\n  - `TestMHMService.test_initialize_paths_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test path initialization with real file system operations.\n  - `TestMHMService.test_check_and_fix_logging_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test logging health check with real file operations.\n  - `TestMHMService.test_start_service_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service startup with real state changes.\n  - `TestMHMService.test_signal_handler_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test signal handler with real state changes.\n  - `TestMHMService.test_shutdown_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service shutdown with real state changes.\n  - `TestMHMService.test_emergency_shutdown_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test emergency shutdown with real state changes.\n  - `TestMHMService.test_run_service_loop_shutdown_file_detection_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test service loop detects shutdown request file with real file operations.\n  - `TestMHMService.test_check_test_message_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test processing of test message request files with real file operations.\n  - `TestMHMService.test_cleanup_test_message_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test cleanup of test message request files with real file operations.\n  - `TestMHMService.test_check_reschedule_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test processing of reschedule request files with real file operations.\n  - `TestMHMService.test_cleanup_reschedule_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test cleanup of reschedule request files with real file operations.\n  - `TestMHMService.test_get_user_categories_real_behavior(self)` - REAL BEHAVIOR TEST: Test get_user_categories with real data structures.\n  - `TestMHMService.test_main_function_real_behavior(self)` - REAL BEHAVIOR TEST: Test main function with real service creation.\n  - `TestMHMService.test_service_integration_with_managers_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service integration with real manager objects.\n  - `TestMHMService.test_service_error_recovery_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service error recovery with real state changes.\n  - `TestMHMService.test_service_loop_heartbeat_logging_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service loop heartbeat logging with real state management.\n  - `TestMHMService.test_service_file_based_communication_integration_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test service file-based communication integration with real file operations.\n  - `TestMHMService.test_real_file_based_communication_creates_and_removes_files(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Verify that test message requests actually create and remove files.\n  - `TestMHMService.test_real_cleanup_removes_actual_files(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Verify that cleanup actually removes real files.\n  - `TestMHMService.test_real_service_initialization_creates_actual_service(self)` - REAL BEHAVIOR TEST: Verify that service initialization creates a real service object.\n  - `TestMHMService.test_real_signal_handler_changes_service_state(self)` - REAL BEHAVIOR TEST: Verify that signal handler actually changes service state.\n  - `TestMHMService.test_real_emergency_shutdown_changes_service_state(self)` - REAL BEHAVIOR TEST: Verify that emergency shutdown actually changes service state.\n  - `TestMHMService.test_real_get_user_categories_returns_actual_data(self)` - REAL BEHAVIOR TEST: Verify that get_user_categories returns actual data structures.\n  - `TestMHMService.test_real_service_error_recovery_stops_service(self)` - REAL BEHAVIOR TEST: Verify that error recovery actually stops the service.\n\n### tests/test_task_management.py\n**Functions:**\n- `temp_dir(self)` - Create a temporary directory for testing.\n- `user_id(self)` - Create a test user ID.\n- `test_ensure_task_directory(self, mock_get_user_dir, user_id, temp_dir)` - Test task directory creation.\n- `test_load_active_tasks(self, mock_get_user_dir, user_id, temp_dir)` - Test loading active tasks.\n- `test_save_active_tasks(self, mock_get_user_dir, user_id, temp_dir)` - Test saving active tasks.\n- `test_create_task(self, mock_get_user_dir, temp_dir)` - Test task creation with file verification.\n- `test_update_task(self, mock_get_user_dir, temp_dir)` - Test task updating with file verification.\n- `test_complete_task(self, mock_get_user_dir, temp_dir)` - Test task completion with file and side effect verification.\n- `test_delete_task(self, mock_get_user_dir, temp_dir)` - Test task deletion with file verification.\n- `test_get_task_by_id(self, mock_get_user_dir, temp_dir)` - Test getting a task by ID with file verification.\n- `test_get_tasks_due_soon(self, mock_get_user_dir, temp_dir)` - Test getting tasks due soon with file verification.\n- `test_are_tasks_enabled(self, mock_get_user_data)` - Test checking if tasks are enabled with mock user data.\n- `test_get_user_task_stats(self, mock_get_user_dir, temp_dir)` - Test getting user task statistics with file verification.\n**Classes:**\n- `TestTaskManagement` - Test cases for task management functions.\n  - `TestTaskManagement.temp_dir(self)` - Create a temporary directory for testing.\n  - `TestTaskManagement.user_id(self)` - Create a test user ID.\n  - `TestTaskManagement.test_ensure_task_directory(self, mock_get_user_dir, user_id, temp_dir)` - Test task directory creation.\n  - `TestTaskManagement.test_load_active_tasks(self, mock_get_user_dir, user_id, temp_dir)` - Test loading active tasks.\n  - `TestTaskManagement.test_save_active_tasks(self, mock_get_user_dir, user_id, temp_dir)` - Test saving active tasks.\n  - `TestTaskManagement.test_create_task(self, mock_get_user_dir, temp_dir)` - Test task creation with file verification.\n  - `TestTaskManagement.test_update_task(self, mock_get_user_dir, temp_dir)` - Test task updating with file verification.\n  - `TestTaskManagement.test_complete_task(self, mock_get_user_dir, temp_dir)` - Test task completion with file and side effect verification.\n  - `TestTaskManagement.test_delete_task(self, mock_get_user_dir, temp_dir)` - Test task deletion with file verification.\n  - `TestTaskManagement.test_get_task_by_id(self, mock_get_user_dir, temp_dir)` - Test getting a task by ID with file verification.\n  - `TestTaskManagement.test_get_tasks_due_soon(self, mock_get_user_dir, temp_dir)` - Test getting tasks due soon with file verification.\n  - `TestTaskManagement.test_are_tasks_enabled(self, mock_get_user_data)` - Test checking if tasks are enabled with mock user data.\n  - `TestTaskManagement.test_get_user_task_stats(self, mock_get_user_dir, temp_dir)` - Test getting user task statistics with file verification.\n\n### tests/test_user_creation.py\n**Functions:**\n- `test_basic_email_user_creation(self, test_data_dir, mock_config)` - Test creating a basic email user with minimal settings.\n- `test_discord_user_creation(self, test_data_dir, mock_config)` - Test creating a Discord user with full features enabled.\n- `test_telegram_user_creation(self, test_data_dir, mock_config)` - Test creating a Telegram user with mixed features.\n- `test_user_with_custom_fields(self, test_data_dir, mock_config)` - Test creating a user with extensive custom fields.\n- `test_user_creation_with_schedules(self, test_data_dir, mock_config)` - Test creating a user with schedule periods.\n- `test_username_validation(self)` - Test username validation.\n- `test_email_validation(self)` - Test email validation.\n- `test_timezone_validation(self)` - Test timezone validation.\n- `test_required_fields_validation(self, test_data_dir, mock_config)` - Test that required fields are validated.\n- `test_duplicate_user_creation(self, test_data_dir, mock_config)` - Test creating a user that already exists.\n- `test_invalid_user_id(self, test_data_dir, mock_config)` - Test creating user with invalid user ID.\n- `test_corrupted_data_handling(self, test_data_dir, mock_config)` - Test handling corrupted user data.\n- `test_full_user_lifecycle(self, test_data_dir, mock_config)` - Test complete user lifecycle: create, update, delete.\n- `test_multiple_users_same_channel(self, test_data_dir, mock_config)` - Test creating multiple users with the same channel type.\n- `test_user_with_all_features(self, test_data_dir, mock_config)` - Test creating a user with all possible features enabled.\n**Classes:**\n- `TestUserCreationScenarios` - Test comprehensive user creation scenarios.\n  - `TestUserCreationScenarios.test_basic_email_user_creation(self, test_data_dir, mock_config)` - Test creating a basic email user with minimal settings.\n  - `TestUserCreationScenarios.test_discord_user_creation(self, test_data_dir, mock_config)` - Test creating a Discord user with full features enabled.\n  - `TestUserCreationScenarios.test_telegram_user_creation(self, test_data_dir, mock_config)` - Test creating a Telegram user with mixed features.\n  - `TestUserCreationScenarios.test_user_with_custom_fields(self, test_data_dir, mock_config)` - Test creating a user with extensive custom fields.\n  - `TestUserCreationScenarios.test_user_creation_with_schedules(self, test_data_dir, mock_config)` - Test creating a user with schedule periods.\n- `TestUserCreationValidation` - Test validation scenarios during user creation.\n  - `TestUserCreationValidation.test_username_validation(self)` - Test username validation.\n  - `TestUserCreationValidation.test_email_validation(self)` - Test email validation.\n  - `TestUserCreationValidation.test_timezone_validation(self)` - Test timezone validation.\n  - `TestUserCreationValidation.test_required_fields_validation(self, test_data_dir, mock_config)` - Test that required fields are validated.\n- `TestUserCreationErrorHandling` - Test error handling during user creation.\n  - `TestUserCreationErrorHandling.test_duplicate_user_creation(self, test_data_dir, mock_config)` - Test creating a user that already exists.\n  - `TestUserCreationErrorHandling.test_invalid_user_id(self, test_data_dir, mock_config)` - Test creating user with invalid user ID.\n  - `TestUserCreationErrorHandling.test_corrupted_data_handling(self, test_data_dir, mock_config)` - Test handling corrupted user data.\n- `TestUserCreationIntegration` - Test integration scenarios for user creation.\n  - `TestUserCreationIntegration.test_full_user_lifecycle(self, test_data_dir, mock_config)` - Test complete user lifecycle: create, update, delete.\n  - `TestUserCreationIntegration.test_multiple_users_same_channel(self, test_data_dir, mock_config)` - Test creating multiple users with the same channel type.\n  - `TestUserCreationIntegration.test_user_with_all_features(self, test_data_dir, mock_config)` - Test creating a user with all possible features enabled.\n\n### tests/test_user_management.py\n**Functions:**\n- `test_get_all_user_ids_empty(self, test_data_dir)` - Test getting user IDs when no users exist.\n- `test_get_all_user_ids_with_users(self, test_data_dir, mock_user_data, mock_config)` - Test getting user IDs when users exist.\n- `test_get_user_preferences_success(self, mock_user_data, mock_config)` - Test getting user preferences successfully.\n- `test_get_user_preferences_nonexistent_user(self, mock_config)` - Test getting preferences for non-existent user.\n- `test_get_user_context_success(self, mock_user_data, mock_config)` - Test getting user context successfully.\n- `test_get_user_context_nonexistent_user(self, mock_config)` - Test getting context for non-existent user.\n- `test_hybrid_get_user_data_success(self, mock_user_data, mock_config)` - Test loading user data successfully using new hybrid API.\n- `test_hybrid_get_user_data_nonexistent_user(self, mock_config)` - Test loading non-existent user data using new hybrid API.\n- `test_save_user_data_success(self, test_data_dir, mock_config)` - Test saving user data successfully using new system.\n- `test_create_user_files_success(self, test_data_dir, mock_config)` - Test creating user files successfully.\n- `test_update_user_preferences_success(self, mock_user_data, mock_config)` - Test updating user preferences successfully.\n- `test_get_user_data_account_with_chat_id(self, mock_user_data, mock_config)` - Test getting user account with chat_id field.\n- `test_get_user_data_account_nonexistent_chat_id(self, mock_config)` - Test getting user account for non-existent user.\n- `test_get_user_data_account_with_discord_id(self, mock_user_data, mock_config)` - Test getting user account with discord_user_id field.\n- `test_get_user_data_account_nonexistent_discord_id(self, mock_config)` - Test getting user account for non-existent user.\n- `test_get_user_data_account_with_email(self, test_data_dir)` - Test getting user account with email successfully.\n- `test_get_user_data_account_nonexistent_email(self, mock_config)` - Test getting user account for non-existent user.\n- `test_get_user_preferences_corrupted_file(self, test_data_dir, mock_config)` - Test getting preferences with corrupted JSON file.\n- `test_save_user_preferences_invalid_user_id(self)` - Test saving preferences with invalid user ID.\n- `test_update_user_preferences_nonexistent_user(self, mock_config)` - Test updating preferences for non-existent user.\n- `test_user_lifecycle(self, test_data_dir, mock_config)` - Test complete user lifecycle with real side effects and system state verification.\n- `test_get_user_data_single_type(self, mock_user_data, mock_config)` - Test getting single data type using hybrid API.\n- `test_get_user_data_multiple_types(self, mock_user_data, mock_config)` - Test getting multiple data types using hybrid API.\n- `test_get_user_data_invalid_type(self, mock_user_data, mock_config)` - Test getting invalid data type using hybrid API.\n- `test_get_user_data_nonexistent_user(self, mock_config)` - Test getting data for nonexistent user using hybrid API.\n**Classes:**\n- `TestUserManagement` - Test user management functions.\n  - `TestUserManagement.test_get_all_user_ids_empty(self, test_data_dir)` - Test getting user IDs when no users exist.\n  - `TestUserManagement.test_get_all_user_ids_with_users(self, test_data_dir, mock_user_data, mock_config)` - Test getting user IDs when users exist.\n  - `TestUserManagement.test_get_user_preferences_success(self, mock_user_data, mock_config)` - Test getting user preferences successfully.\n  - `TestUserManagement.test_get_user_preferences_nonexistent_user(self, mock_config)` - Test getting preferences for non-existent user.\n  - `TestUserManagement.test_get_user_context_success(self, mock_user_data, mock_config)` - Test getting user context successfully.\n  - `TestUserManagement.test_get_user_context_nonexistent_user(self, mock_config)` - Test getting context for non-existent user.\n  - `TestUserManagement.test_hybrid_get_user_data_success(self, mock_user_data, mock_config)` - Test loading user data successfully using new hybrid API.\n  - `TestUserManagement.test_hybrid_get_user_data_nonexistent_user(self, mock_config)` - Test loading non-existent user data using new hybrid API.\n  - `TestUserManagement.test_save_user_data_success(self, test_data_dir, mock_config)` - Test saving user data successfully using new system.\n  - `TestUserManagement.test_create_user_files_success(self, test_data_dir, mock_config)` - Test creating user files successfully.\n  - `TestUserManagement.test_update_user_preferences_success(self, mock_user_data, mock_config)` - Test updating user preferences successfully.\n  - `TestUserManagement.test_get_user_data_account_with_chat_id(self, mock_user_data, mock_config)` - Test getting user account with chat_id field.\n  - `TestUserManagement.test_get_user_data_account_nonexistent_chat_id(self, mock_config)` - Test getting user account for non-existent user.\n  - `TestUserManagement.test_get_user_data_account_with_discord_id(self, mock_user_data, mock_config)` - Test getting user account with discord_user_id field.\n  - `TestUserManagement.test_get_user_data_account_nonexistent_discord_id(self, mock_config)` - Test getting user account for non-existent user.\n  - `TestUserManagement.test_get_user_data_account_with_email(self, test_data_dir)` - Test getting user account with email successfully.\n  - `TestUserManagement.test_get_user_data_account_nonexistent_email(self, mock_config)` - Test getting user account for non-existent user.\n- `TestUserManagementEdgeCases` - Test edge cases and error conditions.\n  - `TestUserManagementEdgeCases.test_get_user_preferences_corrupted_file(self, test_data_dir, mock_config)` - Test getting preferences with corrupted JSON file.\n  - `TestUserManagementEdgeCases.test_save_user_preferences_invalid_user_id(self)` - Test saving preferences with invalid user ID.\n  - `TestUserManagementEdgeCases.test_update_user_preferences_nonexistent_user(self, mock_config)` - Test updating preferences for non-existent user.\n  - `TestUserManagementEdgeCases.test_user_lifecycle(self, test_data_dir, mock_config)` - Test complete user lifecycle with real side effects and system state verification.\n  - `TestUserManagementEdgeCases.test_get_user_data_single_type(self, mock_user_data, mock_config)` - Test getting single data type using hybrid API.\n  - `TestUserManagementEdgeCases.test_get_user_data_multiple_types(self, mock_user_data, mock_config)` - Test getting multiple data types using hybrid API.\n  - `TestUserManagementEdgeCases.test_get_user_data_invalid_type(self, mock_user_data, mock_config)` - Test getting invalid data type using hybrid API.\n  - `TestUserManagementEdgeCases.test_get_user_data_nonexistent_user(self, mock_config)` - Test getting data for nonexistent user using hybrid API.\n\n### ui/account_creator.py\n**Functions:**\n- `__init__(self, master, communication_manager)` - Initializes the account creation screen.\n- `_bind_main_mouse_wheel_recursive(self, widget, callback)` - Recursively bind mouse wheel to widget and children, except questions area\n- `update_status_labels(self, event)` - Update status labels based on current field values\n- `update_service_selection(self)` - Called when service selection changes\n- `update_checkin_options(self)` - Show/hide check-in options based on main checkbox - create/destroy content for proper collapsing\n- `update_task_options(self)` - Show/hide task options based on main checkbox\n- `open_personalization_dialog(self)` - Open the personalization dialog for the user.\n- `create_account(self)` - Create the user account.\n- `on_closing(self)` - Handles the window close event for the account creation screen.\n- `on_main_mouse_wheel(event)` - No description\n- `render_task_periods()` - No description\n- `add_task_period()` - No description\n- `on_task_select_all()` - No description\n- `update_task_select_all()` - No description\n- `update_task_options()` - No description\n- `on_questions_mouse_wheel(event)` - No description\n- `on_personalization_save(data)` - Callback when personalization data is saved.\n- `make_delete(idx)` - No description\n**Classes:**\n- `CreateAccountScreen` - No description\n  - `CreateAccountScreen.__init__(self, master, communication_manager)` - Initializes the account creation screen.\n  - `CreateAccountScreen._bind_main_mouse_wheel_recursive(self, widget, callback)` - Recursively bind mouse wheel to widget and children, except questions area\n  - `CreateAccountScreen.update_status_labels(self, event)` - Update status labels based on current field values\n  - `CreateAccountScreen.update_service_selection(self)` - Called when service selection changes\n  - `CreateAccountScreen.update_checkin_options(self)` - Show/hide check-in options based on main checkbox - create/destroy content for proper collapsing\n  - `CreateAccountScreen.update_task_options(self)` - Show/hide task options based on main checkbox\n  - `CreateAccountScreen.open_personalization_dialog(self)` - Open the personalization dialog for the user.\n  - `CreateAccountScreen.create_account(self)` - Create the user account.\n  - `CreateAccountScreen.on_closing(self)` - Handles the window close event for the account creation screen.\n\n### ui/account_manager.py\n**Functions:**\n- `time_to_minutes(t)` - Convert a time string 'HH:MM' to minutes since midnight.\n- `setup_view_edit_messages_window(parent, category)` - Opens a window for viewing and editing messages in a given category.\n- `setup_view_edit_schedule_window(parent, category, scheduler_manager)` - Opens a window to view and edit the schedule for a given category.\n- `add_message_dialog(parent, category)` - Opens a dialog to add a message to the specified category.\n- `save_geometry_and_close(window, parent, window_attr_name)` - Save the window's geometry and then close it.\n- `refresh_window(window, setup_func, parent, category, scheduler_manager)` - Refreshes the given window by clearing and rebuilding the content.\n- `load_and_display_messages(view_messages_window, category)` - Loads and displays messages in the specified window for a given category, allowing for message editing.\n- `sort_treeview_column(tree, col, category, reverse)` - Sorts the treeview column when a column heading is clicked.\n- `load_and_display_schedule(view_schedule_window, parent, category, scheduler_manager)` - Loads schedule data and displays it in the specified window.\nThis function is responsible for both fetching the data from a backend source and updating the UI components in the window.\n- `setup_communication_settings_window(parent, user_id)` - Opens a window to manage user's communication settings.\n- `setup_category_management_window(parent, user_id)` - Opens a window to manage user's message categories.\n- `setup_checkin_management_window(root, user_id)` - Set up the check-in management window for a specific user\n- `setup_checkin_analytics_window(root, user_id)` - Set up the check-in analytics window for a specific user\n- `setup_task_management_window(parent, user_id)` - Opens a window to manage user's task settings.\n- `setup_task_crud_window(parent, user_id)` - Opens a window for full CRUD operations on tasks.\n- `add_task_dialog(parent, user_id, on_save)` - Open dialog to add a new task.\n- `edit_selected_task(parent, user_id, on_save)` - Edit the selected task in the active tasks treeview.\n- `complete_selected_task(parent, user_id, on_save)` - Complete the selected task in the active tasks treeview.\n- `delete_selected_task(parent, user_id, on_save)` - Delete the selected task in the active tasks treeview.\n- `setup_personalization_management_window(parent, user_id)` - Opens a window for managing user personalization settings.\n- `__init__(self, parent, category, index, message_data, tree, data)` - No description\n- `build_ui(self)` - No description\n- `save_message(self)` - Saves the message to the JSON file.\n- `handle_all_days_toggle(self)` - No description\n- `handle_all_periods_toggle(self)` - No description\n- `check_days_all_selected(self)` - Check if all individual days are selected and update the Select All checkbox accordingly\n- `check_periods_all_selected(self)` - Check if all individual periods are selected and update the Select All checkbox accordingly\n- `on_treeview_click(event)` - Handle clicks on the treeview to toggle checkmarks, but allow normal selection everywhere.\n- `toggle_checkmark(item, col_name, col_idx)` - Toggle the checkmark for a specific cell, fixing ALL DAYS/ALL TIMES logic.\n- `update_treeview_row(item, message_data)` - No description\n- `checkmark(big)` - No description\n- `treeview_sort_column(tv, col, category, reverse)` - No description\n- `delete_message_local()` - Deletes the selected message(s) from the Treeview and data file.\n- `edit_message_local()` - Edits the selected message in the Treeview and updates the data file.\n- `undo_message_deletion()` - Restores the most recently deleted message.\n- `refresh_treeview()` - Refresh the Treeview with the current messages list.\n- `update_undo_delete_message_button_state()` - Update the state of the undo delete button.\n- `select_all_messages()` - Select all messages in the treeview.\n- `clear_selection()` - Clear all selections in the treeview.\n- `update_status_bar()` - Update the status bar with current selection and total counts.\n- `on_selection_change(event)` - No description\n- `delete_period(period)` - No description\n- `update_period_active_status(period, var, category)` - No description\n- `validate_and_save_period(category, name, start, end, scheduler_manager, refresh)` - No description\n- `add_edit_period()` - No description\n- `save_schedule()` - No description\n- `undo_last_period_deletion(view_schedule_window, parent, category, scheduler_manager)` - Restores the most recently deleted period, skipping 'ALL' if present.\n- `update_undo_delete_period_button_state()` - Update the state of the undo delete button for periods.\n- `setup_active_tasks_tab()` - No description\n- `setup_completed_tasks_tab()` - No description\n- `setup_statistics_tab()` - No description\n- `__init__(self, parent, user_id, task_data, on_save)` - No description\n- `load_tags(self)` - No description\n- `save_tags(self)` - No description\n- `setup_ui(self)` - No description\n- `render_tag_bubbles(self)` - No description\n- `refresh_tag_listbox(self)` - No description\n- `add_selected_tag(self)` - No description\n- `remove_tag_bubble(self, tag)` - No description\n- `create_new_tag(self)` - No description\n- `render_reminder_periods(self)` - No description\n- `render_reminder_period_row(self, idx, period)` - No description\n- `add_reminder_period(self)` - No description\n- `delete_reminder_period(self, idx)` - No description\n- `validate_dates(self, due_date, reminder_periods)` - Validate dates and show confirmation dialogs if needed.\n- `save_task(self)` - No description\n- `open_personalization_dialog()` - No description\n- `confirm()` - No description\n- `update_status_labels()` - Update status labels based on current field values\n- `save_communication_settings()` - No description\n- `toggle_all()` - Smart toggle: select all if not all selected, deselect all if all selected\n- `update_toggle_button_text()` - Update the toggle button text based on current selection state\n- `save_category_changes()` - No description\n- `all_days_selected()` - No description\n- `handle_all_days_toggle()` - No description\n- `update_all_days_cb()` - No description\n- `select_default()` - No description\n- `toggle_all()` - No description\n- `update_toggle_button_text()` - No description\n- `on_mouse_wheel(event)` - No description\n- `bind_mouse_wheel(widget)` - Recursively bind mouse wheel to widget and all its children\n- `save_checkin_changes()` - No description\n- `update_main_status()` - No description\n- `run_analytics()` - Run analytics and display results\n- `display_analytics_results(text_widget, analyses, days)` - Display formatted analytics results\n- `render_periods()` - No description\n- `on_select_all()` - No description\n- `update_select_all()` - No description\n- `on_enable_toggle()` - No description\n- `save_task_changes()` - No description\n- `refresh_active_tasks()` - Refresh the active tasks treeview.\n- `refresh_completed_tasks()` - Refresh the completed tasks treeview.\n- `refresh_statistics()` - Refresh the statistics display.\n- `on_frame_configure(event)` - No description\n- `make_update_status(status_label, var)` - No description\n- `make_update_status(status_label, var)` - No description\n- `on_personalization_save(data)` - Callback when personalization data is saved.\n- `update_status()` - No description\n- `update_status()` - No description\n- `make_delete(idx)` - No description\n**Classes:**\n- `MessageDialog` - No description\n  - `MessageDialog.__init__(self, parent, category, index, message_data, tree, data)` - No description\n  - `MessageDialog.build_ui(self)` - No description\n  - `MessageDialog.save_message(self)` - Saves the message to the JSON file.\n  - `MessageDialog.handle_all_days_toggle(self)` - No description\n  - `MessageDialog.handle_all_periods_toggle(self)` - No description\n  - `MessageDialog.check_days_all_selected(self)` - Check if all individual days are selected and update the Select All checkbox accordingly\n  - `MessageDialog.check_periods_all_selected(self)` - Check if all individual periods are selected and update the Select All checkbox accordingly\n- `TaskDialog` - Dialog for adding or editing tasks.\n  - `TaskDialog.__init__(self, parent, user_id, task_data, on_save)` - No description\n  - `TaskDialog.load_tags(self)` - No description\n  - `TaskDialog.save_tags(self)` - No description\n  - `TaskDialog.setup_ui(self)` - No description\n  - `TaskDialog.render_tag_bubbles(self)` - No description\n  - `TaskDialog.refresh_tag_listbox(self)` - No description\n  - `TaskDialog.add_selected_tag(self)` - No description\n  - `TaskDialog.remove_tag_bubble(self, tag)` - No description\n  - `TaskDialog.create_new_tag(self)` - No description\n  - `TaskDialog.render_reminder_periods(self)` - No description\n  - `TaskDialog.render_reminder_period_row(self, idx, period)` - No description\n  - `TaskDialog.add_reminder_period(self)` - No description\n  - `TaskDialog.delete_reminder_period(self, idx)` - No description\n  - `TaskDialog.validate_dates(self, due_date, reminder_periods)` - Validate dates and show confirmation dialogs if needed.\n  - `TaskDialog.save_task(self)` - No description\n\n### ui/dialogs/account_creator_dialog.py\n**Functions:**\n- `create_account_dialog(parent, communication_manager)` - Create and show the account creation dialog.\n- `__init__(self, parent, communication_manager)` - No description\n- `load_category_widget(self)` - Load the category selection widget.\n- `load_message_service_widget(self)` - Load the message service selection widget.\n- `load_task_management_widget(self)` - Load the task management widget.\n- `load_checkin_settings_widget(self)` - Load the check-in settings widget.\n- `setup_feature_group_boxes(self)` - Setup group boxes for task management and check-ins (no longer collapsible in tab structure).\n- `setup_profile_button(self)` - Setup the profile button.\n- `center_dialog(self)` - Center the dialog on the parent window.\n- `setup_connections(self)` - Setup signal connections.\n- `keyPressEvent(self, event)` - Handle key press events for the dialog.\n- `on_username_changed(self)` - Handle username change.\n- `on_preferred_name_changed(self)` - Handle preferred name change.\n- `on_category_changed(self, categories)` - Handle category selection change (no longer used - widgets don't have signals).\n- `on_service_changed(self, service, value)` - Handle service selection change (no longer used - widgets don't have signals).\n- `on_contact_info_changed(self, service, value)` - Handle contact information change (no longer used - widgets don't have signals).\n- `on_task_group_toggled(self, checked)` - Handle task management group toggle (no longer used in tab structure).\n- `on_checkin_group_toggled(self, checked)` - Handle check-in group toggle (no longer used in tab structure).\n- `on_feature_toggled(self, checked)` - Handle feature enablement checkbox toggles.\n- `update_tab_visibility(self)` - Update tab visibility based on feature enablement.\n- `open_personalization_dialog(self)` - Open the personalization dialog.\n- `update_profile_button_state(self)` - Update the profile button to show if profile has been configured.\n- `populate_timezones(self)` - Populate the timezone combobox with common timezones.\n- `validate_input(self)` - Validate the input and return (is_valid, error_message).\n- `validate_and_accept(self)` - Validate input and accept the dialog.\n- `create_account(self, account_data)` - Create the user account.\n- `get_account_data(self)` - Get the account data from the form.\n- `validate_account_data(self)` - Validate the account data.\n- `on_personalization_save(data)` - No description\n**Classes:**\n- `AccountCreatorDialog` - Account creation dialog using existing UI files.\n  - `AccountCreatorDialog.__init__(self, parent, communication_manager)` - No description\n  - `AccountCreatorDialog.load_category_widget(self)` - Load the category selection widget.\n  - `AccountCreatorDialog.load_message_service_widget(self)` - Load the message service selection widget.\n  - `AccountCreatorDialog.load_task_management_widget(self)` - Load the task management widget.\n  - `AccountCreatorDialog.load_checkin_settings_widget(self)` - Load the check-in settings widget.\n  - `AccountCreatorDialog.setup_feature_group_boxes(self)` - Setup group boxes for task management and check-ins (no longer collapsible in tab structure).\n  - `AccountCreatorDialog.setup_profile_button(self)` - Setup the profile button.\n  - `AccountCreatorDialog.center_dialog(self)` - Center the dialog on the parent window.\n  - `AccountCreatorDialog.setup_connections(self)` - Setup signal connections.\n  - `AccountCreatorDialog.keyPressEvent(self, event)` - Handle key press events for the dialog.\n  - `AccountCreatorDialog.on_username_changed(self)` - Handle username change.\n  - `AccountCreatorDialog.on_preferred_name_changed(self)` - Handle preferred name change.\n  - `AccountCreatorDialog.on_category_changed(self, categories)` - Handle category selection change (no longer used - widgets don't have signals).\n  - `AccountCreatorDialog.on_service_changed(self, service, value)` - Handle service selection change (no longer used - widgets don't have signals).\n  - `AccountCreatorDialog.on_contact_info_changed(self, service, value)` - Handle contact information change (no longer used - widgets don't have signals).\n  - `AccountCreatorDialog.on_task_group_toggled(self, checked)` - Handle task management group toggle (no longer used in tab structure).\n  - `AccountCreatorDialog.on_checkin_group_toggled(self, checked)` - Handle check-in group toggle (no longer used in tab structure).\n  - `AccountCreatorDialog.on_feature_toggled(self, checked)` - Handle feature enablement checkbox toggles.\n  - `AccountCreatorDialog.update_tab_visibility(self)` - Update tab visibility based on feature enablement.\n  - `AccountCreatorDialog.open_personalization_dialog(self)` - Open the personalization dialog.\n  - `AccountCreatorDialog.update_profile_button_state(self)` - Update the profile button to show if profile has been configured.\n  - `AccountCreatorDialog.populate_timezones(self)` - Populate the timezone combobox with common timezones.\n  - `AccountCreatorDialog.validate_input(self)` - Validate the input and return (is_valid, error_message).\n  - `AccountCreatorDialog.validate_and_accept(self)` - Validate input and accept the dialog.\n  - `AccountCreatorDialog.create_account(self, account_data)` - Create the user account.\n  - `AccountCreatorDialog.get_account_data(self)` - Get the account data from the form.\n  - `AccountCreatorDialog.validate_account_data(self)` - Validate the account data.\n\n### ui/dialogs/admin_panel.py\n**Functions:**\n- `__init__(self, parent)` - No description\n- `setup_ui(self)` - Setup the UI components.\n- `get_admin_data(self)` - Get the admin panel data.\n- `set_admin_data(self, data)` - Set the admin panel data.\n**Classes:**\n- `AdminPanelDialog` - Dialog for admin panel functionality.\n  - `AdminPanelDialog.__init__(self, parent)` - No description\n  - `AdminPanelDialog.setup_ui(self)` - Setup the UI components.\n  - `AdminPanelDialog.get_admin_data(self)` - Get the admin panel data.\n  - `AdminPanelDialog.set_admin_data(self, data)` - Set the admin panel data.\n\n### ui/dialogs/category_management_dialog.py\n**Functions:**\n- `__init__(self, parent, user_id)` - No description\n- `load_user_category_data(self)` - Load user's current category settings\n- `save_category_settings(self)` - Save the selected categories back to user preferences\n- `get_selected_categories(self)` - No description\n- `set_selected_categories(self, categories)` - No description\n**Classes:**\n- `CategoryManagementDialog` - No description\n  - `CategoryManagementDialog.__init__(self, parent, user_id)` - No description\n  - `CategoryManagementDialog.load_user_category_data(self)` - Load user's current category settings\n  - `CategoryManagementDialog.save_category_settings(self)` - Save the selected categories back to user preferences\n  - `CategoryManagementDialog.get_selected_categories(self)` - No description\n  - `CategoryManagementDialog.set_selected_categories(self, categories)` - No description\n\n### ui/dialogs/channel_management_dialog.py\n**Functions:**\n- `__init__(self, parent, user_id)` - No description\n- `save_channel_settings(self)` - No description\n- `get_selected_channel(self)` - No description\n- `set_selected_channel(self, channel, value)` - No description\n**Classes:**\n- `ChannelManagementDialog` - No description\n  - `ChannelManagementDialog.__init__(self, parent, user_id)` - No description\n  - `ChannelManagementDialog.save_channel_settings(self)` - No description\n  - `ChannelManagementDialog.get_selected_channel(self)` - No description\n  - `ChannelManagementDialog.set_selected_channel(self, channel, value)` - No description\n\n### ui/dialogs/checkin_management_dialog.py\n**Functions:**\n- `__init__(self, parent, user_id)` - No description\n- `on_enable_checkins_toggled(self, checked)` - No description\n- `load_user_checkin_data(self)` - Load the user's current check-in settings\n- `save_checkin_settings(self)` - Save the check-in settings back to user preferences\n- `get_checkin_settings(self)` - Get the current check-in settings.\n- `set_checkin_settings(self, settings)` - Set the check-in settings.\n**Classes:**\n- `CheckinManagementDialog` - Dialog for managing check-in settings.\n  - `CheckinManagementDialog.__init__(self, parent, user_id)` - No description\n  - `CheckinManagementDialog.on_enable_checkins_toggled(self, checked)` - No description\n  - `CheckinManagementDialog.load_user_checkin_data(self)` - Load the user's current check-in settings\n  - `CheckinManagementDialog.save_checkin_settings(self)` - Save the check-in settings back to user preferences\n  - `CheckinManagementDialog.get_checkin_settings(self)` - Get the current check-in settings.\n  - `CheckinManagementDialog.set_checkin_settings(self, settings)` - Set the check-in settings.\n\n### ui/dialogs/schedule_editor_dialog.py\n**Functions:**\n- `open_schedule_editor(parent, user_id, category, on_save)` - Open the schedule editor dialog.\n- `__init__(self, parent, user_id, category, on_save)` - No description\n- `center_dialog(self)` - Center the dialog on the parent window.\n- `setup_functionality(self)` - Setup the functionality and connect signals.\n- `load_existing_data(self)` - Load existing schedule data using the new reusable function.\n- `add_new_period(self, period_name, period_data)` - Add a new period row using the PeriodRowWidget.\n- `remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n- `undo_last_delete(self)` - Undo the last deletion.\n- `collect_period_data(self)` - Collect period data using the new reusable function.\n- `save_schedule(self)` - Save the schedule data.\n- `cancel(self)` - Cancel the dialog.\n- `get_schedule_data(self)` - Get the current schedule data.\n- `set_schedule_data(self, data)` - Set the schedule data.\n**Classes:**\n- `ScheduleEditorDialog` - Dialog for editing schedules.\n  - `ScheduleEditorDialog.__init__(self, parent, user_id, category, on_save)` - No description\n  - `ScheduleEditorDialog.center_dialog(self)` - Center the dialog on the parent window.\n  - `ScheduleEditorDialog.setup_functionality(self)` - Setup the functionality and connect signals.\n  - `ScheduleEditorDialog.load_existing_data(self)` - Load existing schedule data using the new reusable function.\n  - `ScheduleEditorDialog.add_new_period(self, period_name, period_data)` - Add a new period row using the PeriodRowWidget.\n  - `ScheduleEditorDialog.remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n  - `ScheduleEditorDialog.undo_last_delete(self)` - Undo the last deletion.\n  - `ScheduleEditorDialog.collect_period_data(self)` - Collect period data using the new reusable function.\n  - `ScheduleEditorDialog.save_schedule(self)` - Save the schedule data.\n  - `ScheduleEditorDialog.cancel(self)` - Cancel the dialog.\n  - `ScheduleEditorDialog.get_schedule_data(self)` - Get the current schedule data.\n  - `ScheduleEditorDialog.set_schedule_data(self, data)` - Set the schedule data.\n\n### ui/dialogs/task_management_dialog.py\n**Functions:**\n- `__init__(self, parent, user_id)` - No description\n- `on_enable_task_management_toggled(self, checked)` - No description\n- `save_task_settings(self)` - Save the task settings.\n- `get_statistics(self)` - No description\n**Classes:**\n- `TaskManagementDialog` - No description\n  - `TaskManagementDialog.__init__(self, parent, user_id)` - No description\n  - `TaskManagementDialog.on_enable_task_management_toggled(self, checked)` - No description\n  - `TaskManagementDialog.save_task_settings(self)` - Save the task settings.\n  - `TaskManagementDialog.get_statistics(self)` - No description\n\n### ui/dialogs/user_profile_dialog.py\n**Functions:**\n- `open_personalization_dialog(parent, user_id, on_save, existing_data)` - Open the personalization dialog and return the result.\n- `__init__(self, parent, user_id, on_save, existing_data)` - No description\n- `center_dialog(self)` - Center the dialog on the parent window.\n- `setup_ui(self)` - Setup the user interface.\n- `keyPressEvent(self, event)` - Handle key press events for the dialog.\n- `create_custom_field_list(self, parent_layout, predefined_values, existing_values, label_text)` - Creates a multi-column list with preset items (checkbox + label) and custom fields (checkbox + entry + delete).\n- `add_custom_field(self, parent_layout, field_type, value, checked)` - Add a custom field row with checkbox, entry, and delete button.\n- `remove_custom_field(self, field_frame)` - Remove a custom field from the layout.\n- `create_health_section(self)` - Create the health information section.\n- `create_loved_ones_section(self)` - Create the loved ones section.\n- `add_loved_one_widget(self, parent_layout, loved_one_data)` - Add a loved one widget with name, relationship, and birthday fields.\n- `remove_loved_one_widget(self, frame)` - Remove a loved one widget from the layout.\n- `create_interests_section(self)` - Create the interests section.\n- `create_notes_section(self)` - Create the notes section.\n- `create_goals_section(self)` - Create the goals section.\n- `collect_custom_field_data(self, group_box)` - Collect data from a custom field group box.\n- `collect_loved_ones_data(self)` - Collect data from loved ones section.\n- `save_personalization(self)` - Save the personalization data.\n- `cancel(self)` - Cancel the dialog.\n- `title_case(s)` - No description\n**Classes:**\n- `UserProfileDialog` - PySide6-based personalization dialog for user account creation and management.\n  - `UserProfileDialog.__init__(self, parent, user_id, on_save, existing_data)` - No description\n  - `UserProfileDialog.center_dialog(self)` - Center the dialog on the parent window.\n  - `UserProfileDialog.setup_ui(self)` - Setup the user interface.\n  - `UserProfileDialog.keyPressEvent(self, event)` - Handle key press events for the dialog.\n  - `UserProfileDialog.create_custom_field_list(self, parent_layout, predefined_values, existing_values, label_text)` - Creates a multi-column list with preset items (checkbox + label) and custom fields (checkbox + entry + delete).\n  - `UserProfileDialog.add_custom_field(self, parent_layout, field_type, value, checked)` - Add a custom field row with checkbox, entry, and delete button.\n  - `UserProfileDialog.remove_custom_field(self, field_frame)` - Remove a custom field from the layout.\n  - `UserProfileDialog.create_health_section(self)` - Create the health information section.\n  - `UserProfileDialog.create_loved_ones_section(self)` - Create the loved ones section.\n  - `UserProfileDialog.add_loved_one_widget(self, parent_layout, loved_one_data)` - Add a loved one widget with name, relationship, and birthday fields.\n  - `UserProfileDialog.remove_loved_one_widget(self, frame)` - Remove a loved one widget from the layout.\n  - `UserProfileDialog.create_interests_section(self)` - Create the interests section.\n  - `UserProfileDialog.create_notes_section(self)` - Create the notes section.\n  - `UserProfileDialog.create_goals_section(self)` - Create the goals section.\n  - `UserProfileDialog.collect_custom_field_data(self, group_box)` - Collect data from a custom field group box.\n  - `UserProfileDialog.collect_loved_ones_data(self)` - Collect data from loved ones section.\n  - `UserProfileDialog.save_personalization(self)` - Save the personalization data.\n  - `UserProfileDialog.cancel(self)` - Cancel the dialog.\n\n### ui/generated/account_creator_dialog_pyqt.py\n**Functions:**\n- `setupUi(self, Dialog_create_account)` - No description\n- `retranslateUi(self, Dialog_create_account)` - No description\n**Classes:**\n- `Ui_Dialog_create_account` - No description\n  - `Ui_Dialog_create_account.setupUi(self, Dialog_create_account)` - No description\n  - `Ui_Dialog_create_account.retranslateUi(self, Dialog_create_account)` - No description\n\n### ui/generated/admin_panel_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, ui_app_mainwindow)` - No description\n- `retranslateUi(self, ui_app_mainwindow)` - No description\n**Classes:**\n- `Ui_ui_app_mainwindow` - No description\n  - `Ui_ui_app_mainwindow.setupUi(self, ui_app_mainwindow)` - No description\n  - `Ui_ui_app_mainwindow.retranslateUi(self, ui_app_mainwindow)` - No description\n\n### ui/generated/category_management_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog_category_management)` - No description\n- `retranslateUi(self, Dialog_category_management)` - No description\n**Classes:**\n- `Ui_Dialog_category_management` - No description\n  - `Ui_Dialog_category_management.setupUi(self, Dialog_category_management)` - No description\n  - `Ui_Dialog_category_management.retranslateUi(self, Dialog_category_management)` - No description\n\n### ui/generated/category_selection_widget_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Form_category_selection_widget)` - No description\n- `retranslateUi(self, Form_category_selection_widget)` - No description\n**Classes:**\n- `Ui_Form_category_selection_widget` - No description\n  - `Ui_Form_category_selection_widget.setupUi(self, Form_category_selection_widget)` - No description\n  - `Ui_Form_category_selection_widget.retranslateUi(self, Form_category_selection_widget)` - No description\n\n### ui/generated/channel_management_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog)` - No description\n- `retranslateUi(self, Dialog)` - No description\n**Classes:**\n- `Ui_Dialog` - No description\n  - `Ui_Dialog.setupUi(self, Dialog)` - No description\n  - `Ui_Dialog.retranslateUi(self, Dialog)` - No description\n\n### ui/generated/channel_selection_widget_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Form_channel_selection)` - No description\n- `retranslateUi(self, Form_channel_selection)` - No description\n**Classes:**\n- `Ui_Form_channel_selection` - No description\n  - `Ui_Form_channel_selection.setupUi(self, Form_channel_selection)` - No description\n  - `Ui_Form_channel_selection.retranslateUi(self, Form_channel_selection)` - No description\n\n### ui/generated/checkin_element_template_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Form_checkin_element_template)` - No description\n- `retranslateUi(self, Form_checkin_element_template)` - No description\n**Classes:**\n- `Ui_Form_checkin_element_template` - No description\n  - `Ui_Form_checkin_element_template.setupUi(self, Form_checkin_element_template)` - No description\n  - `Ui_Form_checkin_element_template.retranslateUi(self, Form_checkin_element_template)` - No description\n\n### ui/generated/checkin_management_dialog_pyqt.py\n**Functions:**\n- `setupUi(self, Dialog_checkin_management)` - No description\n- `retranslateUi(self, Dialog_checkin_management)` - No description\n**Classes:**\n- `Ui_Dialog_checkin_management` - No description\n  - `Ui_Dialog_checkin_management.setupUi(self, Dialog_checkin_management)` - No description\n  - `Ui_Dialog_checkin_management.retranslateUi(self, Dialog_checkin_management)` - No description\n\n### ui/generated/checkin_settings_widget_pyqt.py\n**Functions:**\n- `setupUi(self, Form_checkin_settings)` - No description\n- `retranslateUi(self, Form_checkin_settings)` - No description\n**Classes:**\n- `Ui_Form_checkin_settings` - No description\n  - `Ui_Form_checkin_settings.setupUi(self, Form_checkin_settings)` - No description\n  - `Ui_Form_checkin_settings.retranslateUi(self, Form_checkin_settings)` - No description\n\n### ui/generated/period_row_template_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Form_period_row_template)` - No description\n- `retranslateUi(self, Form_period_row_template)` - No description\n**Classes:**\n- `Ui_Form_period_row_template` - No description\n  - `Ui_Form_period_row_template.setupUi(self, Form_period_row_template)` - No description\n  - `Ui_Form_period_row_template.retranslateUi(self, Form_period_row_template)` - No description\n\n### ui/generated/schedule_editor_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog_edit_schedule)` - No description\n- `retranslateUi(self, Dialog_edit_schedule)` - No description\n**Classes:**\n- `Ui_Dialog_edit_schedule` - No description\n  - `Ui_Dialog_edit_schedule.setupUi(self, Dialog_edit_schedule)` - No description\n  - `Ui_Dialog_edit_schedule.retranslateUi(self, Dialog_edit_schedule)` - No description\n\n### ui/generated/task_management_dialog_pyqt.py\n**Functions:**\n- `setupUi(self, Dialog_task_management)` - No description\n- `retranslateUi(self, Dialog_task_management)` - No description\n**Classes:**\n- `Ui_Dialog_task_management` - No description\n  - `Ui_Dialog_task_management.setupUi(self, Dialog_task_management)` - No description\n  - `Ui_Dialog_task_management.retranslateUi(self, Dialog_task_management)` - No description\n\n### ui/generated/task_settings_widget_pyqt.py\n**Functions:**\n- `setupUi(self, Form_task_settings)` - No description\n- `retranslateUi(self, Form_task_settings)` - No description\n**Classes:**\n- `Ui_Form_task_settings` - No description\n  - `Ui_Form_task_settings.setupUi(self, Form_task_settings)` - No description\n  - `Ui_Form_task_settings.retranslateUi(self, Form_task_settings)` - No description\n\n### ui/generated/user_profile_management_dialog_pyqt.py\n**Functions:**\n- `setupUi(self, Dialog_user_profile)` - No description\n- `retranslateUi(self, Dialog_user_profile)` - No description\n**Classes:**\n- `Ui_Dialog_user_profile` - No description\n  - `Ui_Dialog_user_profile.setupUi(self, Dialog_user_profile)` - No description\n  - `Ui_Dialog_user_profile.retranslateUi(self, Dialog_user_profile)` - No description\n\n### ui/generated/user_profile_settings_widget_pyqt.py\n**Functions:**\n- `setupUi(self, Form_user_profile_settings)` - No description\n- `retranslateUi(self, Form_user_profile_settings)` - No description\n**Classes:**\n- `Ui_Form_user_profile_settings` - No description\n  - `Ui_Form_user_profile_settings.setupUi(self, Form_user_profile_settings)` - No description\n  - `Ui_Form_user_profile_settings.retranslateUi(self, Form_user_profile_settings)` - No description\n\n### ui/ui_app.py\n**Functions:**\n- `main()` - Main entry point for the UI application\n- `__init__(self)` - No description\n- `validate_configuration_before_start(self)` - Validate configuration before attempting to start the service.\n- `is_service_running(self)` - Check if the MHM service is running\n- `start_service(self)` - Start the MHM backend service\n- `stop_service(self)` - Stop the MHM backend service\n- `restart_service(self)` - Restart the MHM backend service\n- `__init__(self, root)` - No description\n- `setup_menu_bar(self)` - Set up the menu bar with debug and admin options.\n- `toggle_logging_verbosity(self)` - Toggle logging verbosity and update menu.\n- `view_log_file(self)` - Open the log file in the default text editor.\n- `view_cache_status(self)` - Show cache cleanup status and information.\n- `force_clean_cache(self)` - Force cache cleanup regardless of schedule.\n- `validate_configuration(self)` - Show detailed configuration validation report.\n- `show_configuration_help(self, parent_window)` - Show help for fixing configuration issues.\n- `view_all_users_summary(self)` - Show a summary of all users in the system.\n- `system_health_check(self)` - Perform a basic system health check.\n- `setup_ui(self)` - Set up the comprehensive admin panel UI\n- `update_service_status(self)` - Update the service status display\n- `start_service(self)` - Start the service\n- `stop_service(self)` - Stop the service\n- `restart_service(self)` - Restart the service\n- `refresh_user_list(self)` - Refresh the user list in the combo box\n- `on_user_selected(self, event)` - Handle user selection from listbox\n- `enable_content_management(self)` - Enable content management buttons\n- `disable_content_management(self)` - Disable content management buttons\n- `create_new_user(self)` - Open dialog to create a new user\n- `edit_user_messages(self)` - Open message editing interface for selected user\n- `open_message_editor(self, parent_window, category)` - Open the message editing window for a specific category\n- `edit_user_schedules(self)` - Open schedule editing interface for selected user\n- `send_test_message(self)` - Send a test message to the selected user\n- `confirm_test_message(self, parent_window, category)` - Confirm and send test message\n- `send_actual_test_message(self, category)` - Send a test message via the running service\n- `manage_communication_settings(self)` - Open communication settings management for selected user\n- `manage_categories(self)` - Open category management for selected user\n- `manage_checkins(self)` - Open check-in settings management for selected user\n- `manage_tasks(self)` - Open task management for selected user\n- `manage_task_crud(self)` - Open comprehensive task CRUD operations for selected user\n- `manage_personalization(self)` - Open personalization management interface for selected user\n- `shutdown_ui_components(self, communication_manager)` - Shutdown any UI-created components gracefully\n- `on_closing(self)` - Handle window close event\n- `load_user_categories(self, user_id)` - Load categories for the selected user\n- `cleanup_old_requests()` - No description\n**Classes:**\n- `ServiceManager` - Manages the MHM backend service process\n  - `ServiceManager.__init__(self)` - No description\n  - `ServiceManager.validate_configuration_before_start(self)` - Validate configuration before attempting to start the service.\n  - `ServiceManager.is_service_running(self)` - Check if the MHM service is running\n  - `ServiceManager.start_service(self)` - Start the MHM backend service\n  - `ServiceManager.stop_service(self)` - Stop the MHM backend service\n  - `ServiceManager.restart_service(self)` - Restart the MHM backend service\n- `MHMManagerUI` - Main management UI for MHM - Comprehensive Admin Panel\n  - `MHMManagerUI.__init__(self, root)` - No description\n  - `MHMManagerUI.setup_menu_bar(self)` - Set up the menu bar with debug and admin options.\n  - `MHMManagerUI.toggle_logging_verbosity(self)` - Toggle logging verbosity and update menu.\n  - `MHMManagerUI.view_log_file(self)` - Open the log file in the default text editor.\n  - `MHMManagerUI.view_cache_status(self)` - Show cache cleanup status and information.\n  - `MHMManagerUI.force_clean_cache(self)` - Force cache cleanup regardless of schedule.\n  - `MHMManagerUI.validate_configuration(self)` - Show detailed configuration validation report.\n  - `MHMManagerUI.show_configuration_help(self, parent_window)` - Show help for fixing configuration issues.\n  - `MHMManagerUI.view_all_users_summary(self)` - Show a summary of all users in the system.\n  - `MHMManagerUI.system_health_check(self)` - Perform a basic system health check.\n  - `MHMManagerUI.setup_ui(self)` - Set up the comprehensive admin panel UI\n  - `MHMManagerUI.update_service_status(self)` - Update the service status display\n  - `MHMManagerUI.start_service(self)` - Start the service\n  - `MHMManagerUI.stop_service(self)` - Stop the service\n  - `MHMManagerUI.restart_service(self)` - Restart the service\n  - `MHMManagerUI.refresh_user_list(self)` - Refresh the user list in the combo box\n  - `MHMManagerUI.on_user_selected(self, event)` - Handle user selection from listbox\n  - `MHMManagerUI.enable_content_management(self)` - Enable content management buttons\n  - `MHMManagerUI.disable_content_management(self)` - Disable content management buttons\n  - `MHMManagerUI.create_new_user(self)` - Open dialog to create a new user\n  - `MHMManagerUI.edit_user_messages(self)` - Open message editing interface for selected user\n  - `MHMManagerUI.open_message_editor(self, parent_window, category)` - Open the message editing window for a specific category\n  - `MHMManagerUI.edit_user_schedules(self)` - Open schedule editing interface for selected user\n  - `MHMManagerUI.send_test_message(self)` - Send a test message to the selected user\n  - `MHMManagerUI.confirm_test_message(self, parent_window, category)` - Confirm and send test message\n  - `MHMManagerUI.send_actual_test_message(self, category)` - Send a test message via the running service\n  - `MHMManagerUI.manage_communication_settings(self)` - Open communication settings management for selected user\n  - `MHMManagerUI.manage_categories(self)` - Open category management for selected user\n  - `MHMManagerUI.manage_checkins(self)` - Open check-in settings management for selected user\n  - `MHMManagerUI.manage_tasks(self)` - Open task management for selected user\n  - `MHMManagerUI.manage_task_crud(self)` - Open comprehensive task CRUD operations for selected user\n  - `MHMManagerUI.manage_personalization(self)` - Open personalization management interface for selected user\n  - `MHMManagerUI.shutdown_ui_components(self, communication_manager)` - Shutdown any UI-created components gracefully\n  - `MHMManagerUI.on_closing(self)` - Handle window close event\n  - `MHMManagerUI.load_user_categories(self, user_id)` - Load categories for the selected user\n\n### ui/ui_app_qt.py\n**Functions:**\n- `main()` - Main entry point for the Qt-based UI application\n- `__init__(self)` - No description\n- `validate_configuration_before_start(self)` - Validate configuration before attempting to start the service.\n- `is_service_running(self)` - Check if the MHM service is running\n- `start_service(self)` - Start the MHM backend service\n- `stop_service(self)` - Stop the MHM backend service\n- `restart_service(self)` - Restart the MHM backend service\n- `__init__(self)` - No description\n- `load_ui(self)` - Load the UI from the .ui file\n- `load_theme(self)` - Load and apply the QSS theme from the styles directory\n- `connect_signals(self)` - Connect UI signals to slots\n- `initialize_ui(self)` - Initialize the UI state\n- `update_user_index_on_startup(self)` - Automatically update the user index when the admin panel starts\n- `update_service_status(self)` - Update the service status display\n- `start_service(self)` - Start the MHM service\n- `stop_service(self)` - Stop the MHM service\n- `restart_service(self)` - Restart the MHM service\n- `refresh_user_list(self)` - Refresh the user list in the combo box using user index\n- `on_user_selected(self, user_display)` - Handle user selection from combo box\n- `load_user_categories(self, user_id)` - Load categories for the selected user\n- `on_category_selected(self, category)` - Handle category selection\n- `enable_content_management(self)` - Enable content management buttons\n- `disable_content_management(self)` - Disable content management buttons\n- `create_new_user(self)` - Open dialog to create a new user\n- `manage_communication_settings(self)` - No description\n- `manage_categories(self)` - No description\n- `manage_checkins(self)` - No description\n- `manage_tasks(self)` - No description\n- `manage_personalization(self)` - No description\n- `edit_user_messages(self)` - Open message editing interface for selected user\n- `open_message_editor(self, parent_dialog, category)` - Open the message editing window for a specific category\n- `edit_user_schedules(self)` - Open schedule editing interface for selected user\n- `open_schedule_editor(self, parent_dialog, category)` - Open the schedule editing window for a specific category\n- `send_test_message(self)` - Send a test message to the selected user\n- `confirm_test_message(self, parent_dialog, category)` - Confirm and send test message\n- `send_actual_test_message(self, category)` - Send a test message via the running service\n- `toggle_logging_verbosity(self)` - Toggle logging verbosity and update menu.\n- `view_log_file(self)` - Open the log file in the default text editor.\n- `view_cache_status(self)` - Show cache cleanup status and information.\n- `force_clean_cache(self)` - Force cache cleanup regardless of schedule.\n- `validate_configuration(self)` - Show detailed configuration validation report.\n- `show_configuration_help(self, parent_window)` - Show help for fixing configuration issues.\n- `view_all_users_summary(self)` - Show a summary of all users in the system.\n- `system_health_check(self)` - Perform a basic system health check.\n- `closeEvent(self, event)` - Handle window close event\n- `shutdown_ui_components(self, communication_manager)` - Shutdown any UI-created components gracefully\n- `cleanup_old_requests()` - No description\n- `on_save(data)` - No description\n- `on_schedule_save()` - Callback when schedule is saved.\n**Classes:**\n- `ServiceManager` - Manages the MHM backend service process\n  - `ServiceManager.__init__(self)` - No description\n  - `ServiceManager.validate_configuration_before_start(self)` - Validate configuration before attempting to start the service.\n  - `ServiceManager.is_service_running(self)` - Check if the MHM service is running\n  - `ServiceManager.start_service(self)` - Start the MHM backend service\n  - `ServiceManager.stop_service(self)` - Stop the MHM backend service\n  - `ServiceManager.restart_service(self)` - Restart the MHM backend service\n- `MHMManagerUI` - Main MHM Management UI using PySide6\n  - `MHMManagerUI.__init__(self)` - No description\n  - `MHMManagerUI.load_ui(self)` - Load the UI from the .ui file\n  - `MHMManagerUI.load_theme(self)` - Load and apply the QSS theme from the styles directory\n  - `MHMManagerUI.connect_signals(self)` - Connect UI signals to slots\n  - `MHMManagerUI.initialize_ui(self)` - Initialize the UI state\n  - `MHMManagerUI.update_user_index_on_startup(self)` - Automatically update the user index when the admin panel starts\n  - `MHMManagerUI.update_service_status(self)` - Update the service status display\n  - `MHMManagerUI.start_service(self)` - Start the MHM service\n  - `MHMManagerUI.stop_service(self)` - Stop the MHM service\n  - `MHMManagerUI.restart_service(self)` - Restart the MHM service\n  - `MHMManagerUI.refresh_user_list(self)` - Refresh the user list in the combo box using user index\n  - `MHMManagerUI.on_user_selected(self, user_display)` - Handle user selection from combo box\n  - `MHMManagerUI.load_user_categories(self, user_id)` - Load categories for the selected user\n  - `MHMManagerUI.on_category_selected(self, category)` - Handle category selection\n  - `MHMManagerUI.enable_content_management(self)` - Enable content management buttons\n  - `MHMManagerUI.disable_content_management(self)` - Disable content management buttons\n  - `MHMManagerUI.create_new_user(self)` - Open dialog to create a new user\n  - `MHMManagerUI.manage_communication_settings(self)` - No description\n  - `MHMManagerUI.manage_categories(self)` - No description\n  - `MHMManagerUI.manage_checkins(self)` - No description\n  - `MHMManagerUI.manage_tasks(self)` - No description\n  - `MHMManagerUI.manage_personalization(self)` - No description\n  - `MHMManagerUI.edit_user_messages(self)` - Open message editing interface for selected user\n  - `MHMManagerUI.open_message_editor(self, parent_dialog, category)` - Open the message editing window for a specific category\n  - `MHMManagerUI.edit_user_schedules(self)` - Open schedule editing interface for selected user\n  - `MHMManagerUI.open_schedule_editor(self, parent_dialog, category)` - Open the schedule editing window for a specific category\n  - `MHMManagerUI.send_test_message(self)` - Send a test message to the selected user\n  - `MHMManagerUI.confirm_test_message(self, parent_dialog, category)` - Confirm and send test message\n  - `MHMManagerUI.send_actual_test_message(self, category)` - Send a test message via the running service\n  - `MHMManagerUI.toggle_logging_verbosity(self)` - Toggle logging verbosity and update menu.\n  - `MHMManagerUI.view_log_file(self)` - Open the log file in the default text editor.\n  - `MHMManagerUI.view_cache_status(self)` - Show cache cleanup status and information.\n  - `MHMManagerUI.force_clean_cache(self)` - Force cache cleanup regardless of schedule.\n  - `MHMManagerUI.validate_configuration(self)` - Show detailed configuration validation report.\n  - `MHMManagerUI.show_configuration_help(self, parent_window)` - Show help for fixing configuration issues.\n  - `MHMManagerUI.view_all_users_summary(self)` - Show a summary of all users in the system.\n  - `MHMManagerUI.system_health_check(self)` - Perform a basic system health check.\n  - `MHMManagerUI.closeEvent(self, event)` - Handle window close event\n  - `MHMManagerUI.shutdown_ui_components(self, communication_manager)` - Shutdown any UI-created components gracefully\n\n### ui/widgets/category_selection_widget.py\n**Functions:**\n- `__init__(self, parent)` - No description\n- `get_selected_categories(self)` - No description\n- `set_selected_categories(self, categories)` - No description\n**Classes:**\n- `CategorySelectionWidget` - No description\n  - `CategorySelectionWidget.__init__(self, parent)` - No description\n  - `CategorySelectionWidget.get_selected_categories(self)` - No description\n  - `CategorySelectionWidget.set_selected_categories(self, categories)` - No description\n\n### ui/widgets/channel_selection_widget.py\n**Functions:**\n- `__init__(self, parent)` - No description\n- `get_selected_channel(self)` - No description\n- `set_selected_channel(self, channel, value)` - No description\n- `set_contact_info(self, email, phone, discord_id)` - No description\n**Classes:**\n- `ChannelSelectionWidget` - No description\n  - `ChannelSelectionWidget.__init__(self, parent)` - No description\n  - `ChannelSelectionWidget.get_selected_channel(self)` - No description\n  - `ChannelSelectionWidget.set_selected_channel(self, channel, value)` - No description\n  - `ChannelSelectionWidget.set_contact_info(self, email, phone, discord_id)` - No description\n\n### ui/widgets/checkin_settings_widget.py\n**Functions:**\n- `__init__(self, parent, user_id)` - No description\n- `showEvent(self, event)` - No description\n- `setup_connections(self)` - Setup signal connections.\n- `connect_question_checkboxes(self)` - Connect all question checkboxes to track changes.\n- `on_question_toggled(self, checked)` - Handle question checkbox toggle.\n- `load_existing_data(self)` - Load existing check-in data.\n- `set_question_checkboxes(self, questions)` - Set question checkboxes based on saved preferences.\n- `get_default_question_state(self, question_key)` - Get default enabled state for a question.\n- `add_new_time_period(self, checked, period_name, period_data)` - Add a new time period using the PeriodRowWidget.\n- `remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n- `undo_last_time_period_delete(self)` - Undo the last time period deletion.\n- `add_new_question(self)` - Add a new check-in question.\n- `undo_last_question_delete(self)` - Undo the last question deletion.\n- `get_checkin_settings(self)` - Get the current check-in settings.\n- `set_checkin_settings(self, settings)` - Set the check-in settings.\n**Classes:**\n- `CheckinSettingsWidget` - Widget for check-in settings configuration.\n  - `CheckinSettingsWidget.__init__(self, parent, user_id)` - No description\n  - `CheckinSettingsWidget.showEvent(self, event)` - No description\n  - `CheckinSettingsWidget.setup_connections(self)` - Setup signal connections.\n  - `CheckinSettingsWidget.connect_question_checkboxes(self)` - Connect all question checkboxes to track changes.\n  - `CheckinSettingsWidget.on_question_toggled(self, checked)` - Handle question checkbox toggle.\n  - `CheckinSettingsWidget.load_existing_data(self)` - Load existing check-in data.\n  - `CheckinSettingsWidget.set_question_checkboxes(self, questions)` - Set question checkboxes based on saved preferences.\n  - `CheckinSettingsWidget.get_default_question_state(self, question_key)` - Get default enabled state for a question.\n  - `CheckinSettingsWidget.add_new_time_period(self, checked, period_name, period_data)` - Add a new time period using the PeriodRowWidget.\n  - `CheckinSettingsWidget.remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n  - `CheckinSettingsWidget.undo_last_time_period_delete(self)` - Undo the last time period deletion.\n  - `CheckinSettingsWidget.add_new_question(self)` - Add a new check-in question.\n  - `CheckinSettingsWidget.undo_last_question_delete(self)` - Undo the last question deletion.\n  - `CheckinSettingsWidget.get_checkin_settings(self)` - Get the current check-in settings.\n  - `CheckinSettingsWidget.set_checkin_settings(self, settings)` - Set the check-in settings.\n\n### ui/widgets/period_row_widget.py\n**Functions:**\n- `__init__(self, parent, period_name, period_data)` - No description\n- `setup_functionality(self)` - Setup the widget functionality and connect signals.\n- `load_period_data(self)` - Load period data into the widget.\n- `load_days(self, days)` - Load day selections.\n- `on_select_all_days_toggled(self, checked)` - Handle 'Select All Days' checkbox toggle.\n- `on_individual_day_toggled(self, checked)` - Handle individual day checkbox toggle.\n- `get_period_data(self)` - Get the current period data from the widget.\n- `get_selected_days(self)` - Get the currently selected days.\n- `request_delete(self)` - Request deletion of this period row.\n- `set_period_name(self, name)` - Set the period name.\n- `get_period_name(self)` - Get the current period name.\n- `is_valid(self)` - Check if the period data is valid.\n**Classes:**\n- `PeriodRowWidget` - Reusable widget for editing time periods with days selection.\n  - `PeriodRowWidget.__init__(self, parent, period_name, period_data)` - No description\n  - `PeriodRowWidget.setup_functionality(self)` - Setup the widget functionality and connect signals.\n  - `PeriodRowWidget.load_period_data(self)` - Load period data into the widget.\n  - `PeriodRowWidget.load_days(self, days)` - Load day selections.\n  - `PeriodRowWidget.on_select_all_days_toggled(self, checked)` - Handle 'Select All Days' checkbox toggle.\n  - `PeriodRowWidget.on_individual_day_toggled(self, checked)` - Handle individual day checkbox toggle.\n  - `PeriodRowWidget.get_period_data(self)` - Get the current period data from the widget.\n  - `PeriodRowWidget.get_selected_days(self)` - Get the currently selected days.\n  - `PeriodRowWidget.request_delete(self)` - Request deletion of this period row.\n  - `PeriodRowWidget.set_period_name(self, name)` - Set the period name.\n  - `PeriodRowWidget.get_period_name(self)` - Get the current period name.\n  - `PeriodRowWidget.is_valid(self)` - Check if the period data is valid.\n\n### ui/widgets/task_settings_widget.py\n**Functions:**\n- `__init__(self, parent, user_id)` - No description\n- `setup_connections(self)` - Setup signal connections.\n- `load_existing_data(self)` - No description\n- `showEvent(self, event)` - No description\n- `add_new_period(self, checked, period_name, period_data)` - Add a new time period using the PeriodRowWidget.\n- `remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n- `undo_last_period_delete(self)` - Undo the last time period deletion.\n- `get_task_settings(self)` - Get the current task settings.\n- `set_task_settings(self, settings)` - Set the task settings.\n- `get_statistics(self)` - Get real task statistics for the user.\n**Classes:**\n- `TaskSettingsWidget` - No description\n  - `TaskSettingsWidget.__init__(self, parent, user_id)` - No description\n  - `TaskSettingsWidget.setup_connections(self)` - Setup signal connections.\n  - `TaskSettingsWidget.load_existing_data(self)` - No description\n  - `TaskSettingsWidget.showEvent(self, event)` - No description\n  - `TaskSettingsWidget.add_new_period(self, checked, period_name, period_data)` - Add a new time period using the PeriodRowWidget.\n  - `TaskSettingsWidget.remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n  - `TaskSettingsWidget.undo_last_period_delete(self)` - Undo the last time period deletion.\n  - `TaskSettingsWidget.get_task_settings(self)` - Get the current task settings.\n  - `TaskSettingsWidget.set_task_settings(self, settings)` - Set the task settings.\n  - `TaskSettingsWidget.get_statistics(self)` - Get real task statistics for the user.\n\n### ui/widgets/user_profile_settings_widget.py\n**Functions:**\n- `__init__(self, parent, user_id, existing_data)` - No description\n- `populate_timezones(self)` - Populate the timezone combo box with options and enable selection.\n- `load_existing_data(self)` - Load existing personalization data into the form.\n- `set_checkbox_group(self, group_name, values)` - Set checkboxes for a specific group based on values.\n- `get_checkbox_group(self, group_name)` - Get checked values for a specific group.\n- `get_personalization_data(self)` - Get all personalization data from the form, preserving existing data structure.\n- `get_settings(self)` - Get the current user profile settings.\n- `set_settings(self, settings)` - Set the user profile settings.\n**Classes:**\n- `UserProfileSettingsWidget` - Widget for user profile settings configuration.\n  - `UserProfileSettingsWidget.__init__(self, parent, user_id, existing_data)` - No description\n  - `UserProfileSettingsWidget.populate_timezones(self)` - Populate the timezone combo box with options and enable selection.\n  - `UserProfileSettingsWidget.load_existing_data(self)` - Load existing personalization data into the form.\n  - `UserProfileSettingsWidget.set_checkbox_group(self, group_name, values)` - Set checkboxes for a specific group based on values.\n  - `UserProfileSettingsWidget.get_checkbox_group(self, group_name)` - Get checked values for a specific group.\n  - `UserProfileSettingsWidget.get_personalization_data(self)` - Get all personalization data from the form, preserving existing data structure.\n  - `UserProfileSettingsWidget.get_settings(self)` - Get the current user profile settings.\n  - `UserProfileSettingsWidget.set_settings(self, settings)` - Set the user profile settings.\n\n### user/user_context.py\n**Functions:**\n- `__new__(cls)` - No description\n- `load_user_data(self, user_id)` - Loads user data using the new user management functions.\n\nArgs:\n    user_id (str): The user ID whose data needs to be loaded.\n- `save_user_data(self, user_id)` - Saves user data using the new user management functions.\n\nArgs:\n    user_id (str): The user ID whose data needs to be saved.\n- `set_user_id(self, user_id)` - Sets the user_id in the user_data dictionary.\n\nArgs:\n    user_id (str): The user ID to be set.\n- `get_user_id(self)` - Retrieves the user_id from the user_data dictionary.\n\nReturns:\n    str: The current user ID, or None if not set.\n- `set_internal_username(self, internal_username)` - Sets the internal_username in the user_data dictionary.\n\nArgs:\n    internal_username (str): The internal username to be set.\n- `get_internal_username(self)` - Retrieves the internal_username from the user_data dictionary.\n\nReturns:\n    str: The current internal username, or None if not set.\n- `set_preferred_name(self, preferred_name)` - Sets the preferred_name in the user_data dictionary.\n\nArgs:\n    preferred_name (str): The preferred name to be set.\n- `get_preferred_name(self)` - Retrieves the preferred_name from the user_data dictionary.\n\nReturns:\n    str: The current preferred name, or None if not set.\n- `set_preference(self, key, value)` - Sets a user preference in the user_data dictionary.\n\nArgs:\n    key (str): The preference key to be set.\n    value (any): The preference value to be set.\n- `get_preference(self, key)` - Retrieves a user preference from the user_data dictionary.\n\nArgs:\n    key (str): The preference key to retrieve.\n\nReturns:\n    any: The current preference value, or None if not set.\n- `update_preference(self, key, value)` - Updates a user preference and saves the data.\n\nArgs:\n    key (str): The preference key to be updated.\n    value (any): The preference value to be set.\n- `_get_active_schedules(self, schedules)` - Retrieves active schedules from the user_data dictionary.\n\nArgs:\n    schedules (dict): The current schedules dictionary.\n\nReturns:\n    dict: The updated schedules dictionary.\n- `get_user_context(self)` - Retrieves user context data.\n\nReturns:\n    dict: The user context data.\n**Classes:**\n- `UserContext` - No description\n  - `UserContext.__new__(cls)` - No description\n  - `UserContext.load_user_data(self, user_id)` - Loads user data using the new user management functions.\n\nArgs:\n    user_id (str): The user ID whose data needs to be loaded.\n  - `UserContext.save_user_data(self, user_id)` - Saves user data using the new user management functions.\n\nArgs:\n    user_id (str): The user ID whose data needs to be saved.\n  - `UserContext.set_user_id(self, user_id)` - Sets the user_id in the user_data dictionary.\n\nArgs:\n    user_id (str): The user ID to be set.\n  - `UserContext.get_user_id(self)` - Retrieves the user_id from the user_data dictionary.\n\nReturns:\n    str: The current user ID, or None if not set.\n  - `UserContext.set_internal_username(self, internal_username)` - Sets the internal_username in the user_data dictionary.\n\nArgs:\n    internal_username (str): The internal username to be set.\n  - `UserContext.get_internal_username(self)` - Retrieves the internal_username from the user_data dictionary.\n\nReturns:\n    str: The current internal username, or None if not set.\n  - `UserContext.set_preferred_name(self, preferred_name)` - Sets the preferred_name in the user_data dictionary.\n\nArgs:\n    preferred_name (str): The preferred name to be set.\n  - `UserContext.get_preferred_name(self)` - Retrieves the preferred_name from the user_data dictionary.\n\nReturns:\n    str: The current preferred name, or None if not set.\n  - `UserContext.set_preference(self, key, value)` - Sets a user preference in the user_data dictionary.\n\nArgs:\n    key (str): The preference key to be set.\n    value (any): The preference value to be set.\n  - `UserContext.get_preference(self, key)` - Retrieves a user preference from the user_data dictionary.\n\nArgs:\n    key (str): The preference key to retrieve.\n\nReturns:\n    any: The current preference value, or None if not set.\n  - `UserContext.update_preference(self, key, value)` - Updates a user preference and saves the data.\n\nArgs:\n    key (str): The preference key to be updated.\n    value (any): The preference value to be set.\n  - `UserContext._get_active_schedules(self, schedules)` - Retrieves active schedules from the user_data dictionary.\n\nArgs:\n    schedules (dict): The current schedules dictionary.\n\nReturns:\n    dict: The updated schedules dictionary.\n  - `UserContext.get_user_context(self)` - Retrieves user context data.\n\nReturns:\n    dict: The user context data.\n\n### user/user_preferences.py\n**Functions:**\n- `__init__(self, user_id)` - No description\n- `load_preferences(self)` - Load user preferences using the new user management functions.\n- `save_preferences(self)` - Save user preferences using the new user management functions.\n- `set_preference(self, key, value)` - Set a preference and save it.\n- `get_preference(self, key)` - Get a preference value.\n- `update_preference(self, key, value)` - Update a preference (alias for set_preference for consistency).\n- `remove_preference(self, key)` - Remove a preference.\n- `get_all_preferences(self)` - Get all preferences.\n- `set_schedule_period_active(user_id, category, period_name, is_active)` - Wrapper for :func:`core.schedule_management.set_schedule_period_active`.\n- `is_schedule_period_active(user_id, category, period_name)` - Wrapper for :func:`core.schedule_management.is_schedule_period_active`.\n**Classes:**\n- `UserPreferences` - No description\n  - `UserPreferences.__init__(self, user_id)` - No description\n  - `UserPreferences.load_preferences(self)` - Load user preferences using the new user management functions.\n  - `UserPreferences.save_preferences(self)` - Save user preferences using the new user management functions.\n  - `UserPreferences.set_preference(self, key, value)` - Set a preference and save it.\n  - `UserPreferences.get_preference(self, key)` - Get a preference value.\n  - `UserPreferences.update_preference(self, key, value)` - Update a preference (alias for set_preference for consistency).\n  - `UserPreferences.remove_preference(self, key)` - Remove a preference.\n  - `UserPreferences.get_all_preferences(self)` - Get all preferences.\n  - `UserPreferences.set_schedule_period_active(user_id, category, period_name, is_active)` - Wrapper for :func:`core.schedule_management.set_schedule_period_active`.\n  - `UserPreferences.is_schedule_period_active(user_id, category, period_name)` - Wrapper for :func:`core.schedule_management.is_schedule_period_active`.\n",
      "error": "",
      "script": "audit_function_registry.py"
    },
    {
      "success": true,
      "output": "[SCAN] Scanning all Python files for imports...\nError parsing C:\\Users\\Julie\\projects\\MHM\\MHM\\core\\logger.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing C:\\Users\\Julie\\projects\\MHM\\MHM\\bot\\communication_manager.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing C:\\Users\\Julie\\projects\\MHM\\MHM\\bot\\discord_bot.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing C:\\Users\\Julie\\projects\\MHM\\MHM\\bot\\telegram_bot.py: invalid non-printable character U+FEFF (<unknown>, line 1)\n[DOC] Parsing MODULE_DEPENDENCIES.md...\nError parsing MODULE_DEPENDENCIES.md: [Errno 2] No such file or directory: 'C:\\\\Users\\\\Julie\\\\projects\\\\MHM\\\\MHM\\\\MODULE_DEPENDENCIES.md'\n\n================================================================================\nMODULE DEPENDENCIES AUDIT REPORT\n================================================================================\n\n[STATS] OVERALL STATISTICS:\n   Files scanned: 124\n   Total imports found: 1038\n   Dependencies documented: 0\n   Standard library imports: 429\n   Third-party imports: 175\n   Local imports: 434\n\n[MISS] MISSING FROM DEPENDENCIES DOCUMENTATION:\n   [DIR] core/auto_cleanup.py - ENTIRE FILE MISSING\n   [DIR] core/backup_manager.py - ENTIRE FILE MISSING\n   [DIR] core/checkin_analytics.py - ENTIRE FILE MISSING\n   [DIR] core/config.py - ENTIRE FILE MISSING\n   [DIR] core/error_handling.py - ENTIRE FILE MISSING\n   [DIR] core/file_operations.py - ENTIRE FILE MISSING\n   [DIR] core/logger.py - ENTIRE FILE MISSING\n   [DIR] core/message_management.py - ENTIRE FILE MISSING\n   [DIR] core/response_tracking.py - ENTIRE FILE MISSING\n   [DIR] core/scheduler.py - ENTIRE FILE MISSING\n   [DIR] core/schedule_management.py - ENTIRE FILE MISSING\n   [DIR] core/service.py - ENTIRE FILE MISSING\n   [DIR] core/service_utilities.py - ENTIRE FILE MISSING\n   [DIR] core/ui_management.py - ENTIRE FILE MISSING\n   [DIR] core/user_data_manager.py - ENTIRE FILE MISSING\n   [DIR] core/user_management.py - ENTIRE FILE MISSING\n   [DIR] core/validation.py - ENTIRE FILE MISSING\n   [DIR] bot/ai_chatbot.py - ENTIRE FILE MISSING\n   [DIR] bot/base_channel.py - ENTIRE FILE MISSING\n   [DIR] bot/channel_factory.py - ENTIRE FILE MISSING\n   [DIR] bot/channel_registry.py - ENTIRE FILE MISSING\n   [DIR] bot/communication_manager.py - ENTIRE FILE MISSING\n   [DIR] bot/conversation_manager.py - ENTIRE FILE MISSING\n   [DIR] bot/discord_bot.py - ENTIRE FILE MISSING\n   [DIR] bot/email_bot.py - ENTIRE FILE MISSING\n   [DIR] bot/telegram_bot.py - ENTIRE FILE MISSING\n   [DIR] bot/user_context_manager.py - ENTIRE FILE MISSING\n   [DIR] ui/account_creator.py - ENTIRE FILE MISSING\n   [DIR] ui/account_manager.py - ENTIRE FILE MISSING\n   [DIR] ui/ui_app.py - ENTIRE FILE MISSING\n   [DIR] ui/ui_app_qt.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/account_creator_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/admin_panel.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/category_management_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/channel_management_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/checkin_management_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/schedule_editor_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/task_management_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/dialogs/user_profile_dialog.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/account_creator_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/admin_panel_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/category_management_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/category_selection_widget_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/channel_management_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/channel_selection_widget_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/checkin_element_template_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/checkin_management_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/checkin_settings_widget_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/period_row_template_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/schedule_editor_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/task_management_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/task_settings_widget_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/user_profile_management_dialog_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/generated/user_profile_settings_widget_pyqt.py - ENTIRE FILE MISSING\n   [DIR] ui/widgets/category_selection_widget.py - ENTIRE FILE MISSING\n   [DIR] ui/widgets/channel_selection_widget.py - ENTIRE FILE MISSING\n   [DIR] ui/widgets/checkin_settings_widget.py - ENTIRE FILE MISSING\n   [DIR] ui/widgets/period_row_widget.py - ENTIRE FILE MISSING\n   [DIR] ui/widgets/task_settings_widget.py - ENTIRE FILE MISSING\n   [DIR] ui/widgets/user_profile_settings_widget.py - ENTIRE FILE MISSING\n   [DIR] user/user_context.py - ENTIRE FILE MISSING\n   [DIR] user/user_preferences.py - ENTIRE FILE MISSING\n   [DIR] tasks/task_management.py - ENTIRE FILE MISSING\n   [DIR] scripts/add_checkin_schedules.py - ENTIRE FILE MISSING\n   [DIR] scripts/analyze_documentation_overlap.py - ENTIRE FILE MISSING\n   [DIR] scripts/audit_function_registry.py - ENTIRE FILE MISSING\n   [DIR] scripts/audit_module_dependencies.py - ENTIRE FILE MISSING\n   [DIR] scripts/check_checkin_schedules.py - ENTIRE FILE MISSING\n   [DIR] scripts/cleanup_real_test_users.py - ENTIRE FILE MISSING\n   [DIR] scripts/cleanup_test_users.py - ENTIRE FILE MISSING\n   [DIR] scripts/cleanup_user_message_files.py - ENTIRE FILE MISSING\n   [DIR] scripts/clear_cache_and_test_discord.py - ENTIRE FILE MISSING\n   [DIR] scripts/compare_functions.py - ENTIRE FILE MISSING\n   [DIR] scripts/compare_function_lengths.py - ENTIRE FILE MISSING\n   [DIR] scripts/consolidate_message_days.py - ENTIRE FILE MISSING\n   [DIR] scripts/consolidate_message_time_periods.py - ENTIRE FILE MISSING\n   [DIR] scripts/debug_comprehensive_prompt.py - ENTIRE FILE MISSING\n   [DIR] scripts/debug_lm_studio_timeout.py - ENTIRE FILE MISSING\n   [DIR] scripts/debug_preferences.py - ENTIRE FILE MISSING\n   [DIR] scripts/fix_schedule_dict_keys.py - ENTIRE FILE MISSING\n   [DIR] scripts/fix_user_schedules.py - ENTIRE FILE MISSING\n   [DIR] scripts/legacy_schedule_editor_qt.py - ENTIRE FILE MISSING\n   [DIR] scripts/migrate_data_structure.py - ENTIRE FILE MISSING\n   [DIR] scripts/migrate_messaging_service.py - ENTIRE FILE MISSING\n   [DIR] scripts/migrate_schedules_cleanup.py - ENTIRE FILE MISSING\n   [DIR] scripts/migrate_schedule_format.py - ENTIRE FILE MISSING\n   [DIR] scripts/migrate_sent_messages.py - ENTIRE FILE MISSING\n   [DIR] scripts/migrate_user_data_structure.py - ENTIRE FILE MISSING\n   [DIR] scripts/rebuild_index.py - ENTIRE FILE MISSING\n   [DIR] scripts/restore_custom_periods.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_ai_with_clear_cache.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_category_dialog.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_checkin_fix.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_comprehensive_ai.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_data_integrity.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_lm_studio.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_migration.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_new_modules.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_period_widget.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_schedule_editor.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_user_data_analysis.py - ENTIRE FILE MISSING\n   [DIR] scripts/test_utils_functions.py - ENTIRE FILE MISSING\n   [DIR] scripts/update_default_messages_to_all.py - ENTIRE FILE MISSING\n   [DIR] scripts/validate_ai_work.py - ENTIRE FILE MISSING\n   [DIR] scripts/validate_config.py - ENTIRE FILE MISSING\n   [DIR] scripts/utilities/cleanup_duplicate_messages.py - ENTIRE FILE MISSING\n   [DIR] scripts/utilities/cleanup_test_data.py - ENTIRE FILE MISSING\n   [DIR] scripts/utilities/user_data_cli.py - ENTIRE FILE MISSING\n   [DIR] tests/conftest.py - ENTIRE FILE MISSING\n   [DIR] tests/task_management.py - ENTIRE FILE MISSING\n   [DIR] tests/test_account_creation_ui.py - ENTIRE FILE MISSING\n   [DIR] tests/test_cleanup.py - ENTIRE FILE MISSING\n   [DIR] tests/test_communication_manager.py - ENTIRE FILE MISSING\n   [DIR] tests/test_config.py - ENTIRE FILE MISSING\n   [DIR] tests/test_error_handling.py - ENTIRE FILE MISSING\n   [DIR] tests/test_file_operations.py - ENTIRE FILE MISSING\n   [DIR] tests/test_message_management.py - ENTIRE FILE MISSING\n   [DIR] tests/test_scheduler.py - ENTIRE FILE MISSING\n   [DIR] tests/test_service.py - ENTIRE FILE MISSING\n   [DIR] tests/test_task_management.py - ENTIRE FILE MISSING\n   [DIR] tests/test_user_creation.py - ENTIRE FILE MISSING\n   [DIR] tests/test_user_management.py - ENTIRE FILE MISSING\n   [DIR] run_mhm.py - ENTIRE FILE MISSING\n   [DIR] run_tests.py - ENTIRE FILE MISSING\n\n   Total missing dependencies: 1038\n\n[DIR] BREAKDOWN BY DIRECTORY:\n   bot/: 10 files, 60 imports, 30 local deps\n   core/: 17 files, 216 imports, 104 local deps\n   root/: 2 files, 10 imports, 1 local deps\n   scripts/: 45 files, 255 imports, 79 local deps\n   tasks/: 1 files, 10 imports, 5 local deps\n   tests/: 14 files, 148 imports, 38 local deps\n   ui/: 33 files, 327 imports, 170 local deps\n   user/: 2 files, 12 imports, 7 local deps\n\n[DOC] GENERATING UPDATED DEPENDENCY SECTIONS...\n\n================================================================================\nUPDATED DEPENDENCY SECTIONS TO ADD:\n================================================================================\n\n#### `bot/ai_chatbot.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.user_context_manager, core.config, core.error_handling, core.logger, core.response_tracking, core.user_management\n- **Used by**: [Add usage information]\n\n#### `bot/base_channel.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `bot/channel_factory.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.base_channel, core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `bot/channel_registry.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.channel_factory, bot.discord_bot, bot.email_bot, core.error_handling\n- **Used by**: [Add usage information]\n\n#### `bot/conversation_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot, core.error_handling, core.logger, core.response_tracking\n- **Used by**: [Add usage information]\n\n#### `bot/email_bot.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.base_channel, core.config, core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `bot/user_context_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.message_management, core.response_tracking, core.user_management, user.user_context, user.user_preferences\n- **Used by**: [Add usage information]\n\n#### `core/auto_cleanup.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling\n- **Used by**: [Add usage information]\n\n#### `core/backup_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger, core.user_management\n- **Used by**: [Add usage information]\n\n#### `core/checkin_analytics.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.response_tracking\n- **Used by**: [Add usage information]\n\n#### `core/config.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling\n- **Used by**: [Add usage information]\n\n#### `core/file_operations.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger, core.message_management, core.user_data_manager\n- **Used by**: [Add usage information]\n\n#### `core/message_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_operations, core.logger, core.user_data_manager, core.user_data_manager, core.user_data_manager\n- **Used by**: [Add usage information]\n\n#### `core/response_tracking.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_operations, core.logger, core.user_management\n- **Used by**: [Add usage information]\n\n#### `core/schedule_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.file_operations, core.file_operations, core.logger, core.service_utilities, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, user.user_context\n- **Used by**: [Add usage information]\n\n#### `core/scheduler.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.schedule_management, core.service_utilities, core.user_management, core.user_management, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, user.user_context\n- **Used by**: [Add usage information]\n\n#### `core/service.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.channel_registry, bot.communication_manager, core.auto_cleanup, core.config, core.config, core.config, core.error_handling, core.file_operations, core.logger, core.logger, core.scheduler, core.user_management\n- **Used by**: [Add usage information]\n\n#### `core/service_utilities.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `core/ui_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.validation, ui.widgets.period_row_widget, ui.widgets.period_row_widget\n- **Used by**: [Add usage information]\n\n#### `core/user_data_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_operations, core.logger, core.message_management, core.response_tracking, core.response_tracking, core.user_management, core.user_management\n- **Used by**: [Add usage information]\n\n#### `core/user_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.error_handling, core.file_operations, core.logger, core.message_management, core.message_management, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.validation, core.validation\n- **Used by**: [Add usage information]\n\n#### `core/validation.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `run_mhm.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling\n- **Used by**: [Add usage information]\n\n#### `scripts/add_checkin_schedules.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.logger, core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/check_checkin_schedules.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.schedule_management, core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/cleanup_user_message_files.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.file_operations, core.logger, core.message_management, core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/clear_cache_and_test_discord.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot\n- **Used by**: [Add usage information]\n\n#### `scripts/consolidate_message_time_periods.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.logger, core.schedule_management, core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/debug_comprehensive_prompt.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot\n- **Used by**: [Add usage information]\n\n#### `scripts/debug_lm_studio_timeout.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config\n- **Used by**: [Add usage information]\n\n#### `scripts/debug_preferences.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/fix_user_schedules.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/legacy_schedule_editor_qt.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management\n- **Used by**: [Add usage information]\n\n#### `scripts/migrate_messaging_service.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.logger, core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/migrate_schedule_format.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_management, core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/migrate_sent_messages.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.logger\n- **Used by**: [Add usage information]\n\n#### `scripts/migrate_user_data_structure.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.file_operations, core.logger, core.personalization_management, core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/rebuild_index.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_data_manager\n- **Used by**: [Add usage information]\n\n#### `scripts/restore_custom_periods.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/test_ai_with_clear_cache.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot\n- **Used by**: [Add usage information]\n\n#### `scripts/test_category_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: ui.dialogs.category_management_dialog\n- **Used by**: [Add usage information]\n\n#### `scripts/test_checkin_fix.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.communication_manager, bot.communication_manager, core.logger, core.response_tracking, core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/test_comprehensive_ai.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot\n- **Used by**: [Add usage information]\n\n#### `scripts/test_data_integrity.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_management\n- **Used by**: [Add usage information]\n\n#### `scripts/test_lm_studio.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot, core.config\n- **Used by**: [Add usage information]\n\n#### `scripts/test_migration.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, scripts.migrate_user_data_structure\n- **Used by**: [Add usage information]\n\n#### `scripts/test_new_modules.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.message_management, core.response_tracking, core.schedule_management, core.service_utilities, core.user_management, core.validation\n- **Used by**: [Add usage information]\n\n#### `scripts/test_period_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: ui.widgets.period_row_widget\n- **Used by**: [Add usage information]\n\n#### `scripts/test_schedule_editor.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: ui.dialogs.schedule_editor_dialog\n- **Used by**: [Add usage information]\n\n#### `scripts/test_user_data_analysis.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.ai_chatbot\n- **Used by**: [Add usage information]\n\n#### `scripts/test_utils_functions.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.utils, core.utils, core.utils, core.utils, core.utils\n- **Used by**: [Add usage information]\n\n#### `scripts/utilities/cleanup_duplicate_messages.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config\n- **Used by**: [Add usage information]\n\n#### `scripts/utilities/cleanup_test_data.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.logger\n- **Used by**: [Add usage information]\n\n#### `scripts/utilities/user_data_cli.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_data_manager, core.utils, core.utils\n- **Used by**: [Add usage information]\n\n#### `scripts/validate_config.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config\n- **Used by**: [Add usage information]\n\n#### `tasks/task_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_operations, core.logger, core.user_management\n- **Used by**: [Add usage information]\n\n#### `tests/conftest.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config\n- **Used by**: [Add usage information]\n\n#### `tests/test_account_creation_ui.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.validation, ui.dialogs.account_creator_dialog, ui.widgets.category_selection_widget, ui.widgets.channel_selection_widget, ui.widgets.checkin_settings_widget, ui.widgets.task_settings_widget\n- **Used by**: [Add usage information]\n\n#### `tests/test_cleanup.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.logger\n- **Used by**: [Add usage information]\n\n#### `tests/test_communication_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.base_channel, bot.communication_manager, core.config\n- **Used by**: [Add usage information]\n\n#### `tests/test_config.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config\n- **Used by**: [Add usage information]\n\n#### `tests/test_error_handling.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling\n- **Used by**: [Add usage information]\n\n#### `tests/test_file_operations.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.error_handling, core.file_operations\n- **Used by**: [Add usage information]\n\n#### `tests/test_message_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.message_management\n- **Used by**: [Add usage information]\n\n#### `tests/test_scheduler.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.scheduler\n- **Used by**: [Add usage information]\n\n#### `tests/test_service.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.service\n- **Used by**: [Add usage information]\n\n#### `tests/test_task_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `tests/test_user_creation.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_management, core.validation\n- **Used by**: [Add usage information]\n\n#### `tests/test_user_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_management\n- **Used by**: [Add usage information]\n\n#### `ui/account_creator.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.file_operations, core.logger, core.message_management, core.schedule_management, core.user_management, core.validation, ui.dialogs.user_profile_dialog, user.user_context\n- **Used by**: [Add usage information]\n\n#### `ui/account_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.checkin_analytics, core.error_handling, core.file_operations, core.file_operations, core.file_operations, core.file_operations, core.file_operations, core.logger, core.message_management, core.schedule_management, core.schedule_management, core.schedule_management, core.schedule_management, core.schedule_management, core.schedule_management, core.service_utilities, core.service_utilities, core.service_utilities, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.validation, tasks.task_management, tasks.task_management, ui.dialogs.user_profile_dialog, user.user_context\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/account_creator_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.file_operations, core.logger, core.message_management, core.user_management, core.validation, ui.dialogs.user_profile_dialog, ui.dialogs.user_profile_dialog, ui.generated.account_creator_dialog_pyqt, ui.widgets.category_selection_widget, ui.widgets.channel_selection_widget, ui.widgets.checkin_settings_widget, ui.widgets.task_settings_widget, user.user_context\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/category_management_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.user_management, ui.generated.category_management_dialog_pyqt, ui.widgets.category_selection_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/channel_management_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_management, core.user_management, ui.generated.channel_management_dialog_pyqt, ui.widgets.channel_selection_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/checkin_management_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.user_management, ui.generated.checkin_management_dialog_pyqt, ui.widgets.checkin_settings_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/schedule_editor_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.ui_management, core.validation, ui.generated.schedule_editor_dialog_pyqt, ui.widgets.period_row_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/task_management_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.user_management, ui.generated.task_management_dialog_pyqt, ui.widgets.task_settings_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/user_profile_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.user_management, core.user_management, ui.generated.user_profile_management_dialog_pyqt, ui.generated.user_profile_settings_widget_pyqt, ui.widgets.user_profile_settings_widget\n- **Used by**: [Add usage information]\n\n#### `ui/ui_app.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.channel_registry, bot.communication_manager, core.auto_cleanup, core.auto_cleanup, core.config, core.config, core.config, core.config, core.config, core.error_handling, core.logger, core.logger, core.logger, core.user_management, core.validation, ui.account_creator, ui.account_manager, ui.account_manager, ui.account_manager, ui.account_manager, ui.account_manager, ui.account_manager, ui.account_manager, user.user_context\n- **Used by**: [Add usage information]\n\n#### `ui/ui_app_qt.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: bot.channel_registry, bot.communication_manager, core.auto_cleanup, core.auto_cleanup, core.config, core.config, core.config, core.config, core.config, core.config, core.error_handling, core.logger, core.logger, core.user_data_manager, core.user_data_manager, core.user_management, core.user_management, core.user_management, core.validation, ui.dialogs.account_creator_dialog, ui.dialogs.category_management_dialog, ui.dialogs.channel_management_dialog, ui.dialogs.checkin_management_dialog, ui.dialogs.schedule_editor_dialog, ui.dialogs.task_management_dialog, ui.dialogs.user_profile_dialog, ui.generated.admin_panel_pyqt, user.user_context\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/category_selection_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.validation, ui.generated.category_selection_widget_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/channel_selection_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: ui.generated.channel_selection_widget_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/checkin_settings_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.ui_management, core.user_management, core.user_management, ui.generated.checkin_settings_widget_pyqt, ui.widgets.period_row_widget\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/period_row_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.validation, ui.generated.period_row_template_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/task_settings_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.ui_management, core.user_management, tasks.task_management, ui.generated.task_settings_widget_pyqt, ui.widgets.period_row_widget\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/user_profile_settings_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_management, core.user_management, ui.generated.user_profile_settings_widget_pyqt\n- **Used by**: [Add usage information]\n\n#### `user/user_context.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.user_management\n- **Used by**: [Add usage information]\n\n#### `user/user_preferences.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.user_management\n- **Used by**: [Add usage information]\nError parsing C:\\Users\\Julie\\projects\\MHM\\MHM\\core\\logger.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing C:\\Users\\Julie\\projects\\MHM\\MHM\\bot\\communication_manager.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing C:\\Users\\Julie\\projects\\MHM\\MHM\\bot\\discord_bot.py: invalid non-printable character U+FEFF (<unknown>, line 1)\nError parsing C:\\Users\\Julie\\projects\\MHM\\MHM\\bot\\telegram_bot.py: invalid non-printable character U+FEFF (<unknown>, line 1)\n\n[CIRC] CIRCULAR DEPENDENCY ANALYSIS:\n   [OK] No circular dependencies detected\n",
      "error": "",
      "script": "audit_module_dependencies.py"
    },
    {
      "success": true,
      "output": "[DOC] Analyzing documentation files...\n\n[STATS] DOCUMENTATION ANALYSIS REPORT\n============================================================\n\n[FILES] Files Found: 9\n   - ARCHITECTURE.md\n   - CHANGELOG.md\n   - DEVELOPMENT_WORKFLOW.md\n   - DOCUMENTATION_GUIDE.md\n   - HOW_TO_RUN.md\n   - QUICK_REFERENCE.md\n   - TESTING_IMPROVEMENT_PLAN.md\n   - TODO.md\n   - UI_MIGRATION_PLAN.md\n\n[INFO] FILE PURPOSES & CONTENT:\n\n[FILE] ARCHITECTURE.md\n   Length: 6,104 characters\n   Sections: 12\n   Main sections: Introduction, [Navigation](#navigation), Directory Structure & Key Modules, User Data Model & File Structure, Data Handling Patterns\n\n[FILE] CHANGELOG.md\n   Length: 63,950 characters\n   Sections: 56\n   Main sections: Introduction, [Navigation](#navigation), ?? Recent Changes (Most Recent First), 2025-07-16 - Chatbot Mode Support, 2025-07-15 - Testing Framework Major Expansion & Quality Improvements ? **COMPLETED**\n\n[FILE] DEVELOPMENT_WORKFLOW.md\n   Length: 7,630 characters\n   Sections: 34\n   Main sections: Introduction, [Navigation](#navigation), ?? Safety First, ? Best Practices Summary, Before Making Changes\n\n[FILE] DOCUMENTATION_GUIDE.md\n   Length: 7,220 characters\n   Sections: 25\n   Main sections: Introduction, ? Documentation Summary Table, [Navigation](#navigation), ? Documentation Categories, ? AI-Focused Documentation\n\n[FILE] HOW_TO_RUN.md\n   Length: 3,816 characters\n   Sections: 21\n   Main sections: Introduction, [Navigation](#navigation), ? Quick Start (Recommended), Step 1: Set up Virtual Environment, Step 2: Install Dependencies\n\n[FILE] QUICK_REFERENCE.md\n   Length: 6,625 characters\n   Sections: 35\n   Main sections: Introduction, [Navigation](#navigation), ? Essential Commands, Virtual Environment (Always Use!), Running the App\n\n[FILE] TESTING_IMPROVEMENT_PLAN.md\n   Length: 14,931 characters\n   Sections: 24\n   Main sections: Introduction, [Navigation](#navigation), ? Current State Assessment, ? **What's Working Well**, ?? **What's Missing - Limited Module Coverage**\n\n[FILE] TODO.md\n   Length: 30,391 characters\n   Sections: 43\n   Main sections: Introduction, [Navigation](#navigation), ? Current Priority Tasks, Immediate Action Items (High Priority), Medium Priority Items\n\n[FILE] UI_MIGRATION_PLAN.md\n   Length: 41,473 characters\n   Sections: 59\n   Main sections: Introduction, [Navigation](#navigation), ? Executive Summary, Project Context & Goals, Current Status Overview - **PARTIALLY COMPLETE** ??\n\n[DIR] COMMON TOPICS ACROSS FILES:\n\n   Setup Installation:\n      - ARCHITECTURE.md\n      - CHANGELOG.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - UI_MIGRATION_PLAN.md\n      - TODO.md\n      - TESTING_IMPROVEMENT_PLAN.md\n\n   Development Workflow:\n      - ARCHITECTURE.md\n      - CHANGELOG.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - UI_MIGRATION_PLAN.md\n      - TODO.md\n      - TESTING_IMPROVEMENT_PLAN.md\n\n   Testing:\n      - CHANGELOG.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - QUICK_REFERENCE.md\n      - UI_MIGRATION_PLAN.md\n      - TODO.md\n      - TESTING_IMPROVEMENT_PLAN.md\n\n   Ui Migration:\n      - ARCHITECTURE.md\n      - CHANGELOG.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - UI_MIGRATION_PLAN.md\n      - TODO.md\n      - TESTING_IMPROVEMENT_PLAN.md\n\n   Architecture:\n      - ARCHITECTURE.md\n      - CHANGELOG.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - UI_MIGRATION_PLAN.md\n      - TODO.md\n      - TESTING_IMPROVEMENT_PLAN.md\n\n   Troubleshooting:\n      - ARCHITECTURE.md\n      - CHANGELOG.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - UI_MIGRATION_PLAN.md\n      - TODO.md\n      - TESTING_IMPROVEMENT_PLAN.md\n\n   Code Quality:\n      - ARCHITECTURE.md\n      - CHANGELOG.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - UI_MIGRATION_PLAN.md\n      - TODO.md\n      - TESTING_IMPROVEMENT_PLAN.md\n\n   Project Structure:\n      - ARCHITECTURE.md\n      - CHANGELOG.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - UI_MIGRATION_PLAN.md\n      - TODO.md\n      - TESTING_IMPROVEMENT_PLAN.md\n\n[IDEA] CONSOLIDATION RECOMMENDATIONS:\n\n[REDUNDANT] REDUNDANT INFORMATION:\n   Sections appearing in multiple files:\n      - 2025-07-13 - Dialog & Widget Data Structure Fixes & Testing Framework ? **COMPLETED**\n      - 2025-07-15 - AI Documentation System Enhancements ? **COMPLETED**\n      - 2025-07-15 - Personalization Management Cleanup & Centralized Saving System ? **COMPLETED**\n      - Before Making Changes\n      - Introduction\n      - Phase 2: Advanced Features (PLANNED)\n      - Phase 3: Communication Channel Integration (PLANNED)\n      - Phase 4: AI Enhancement (PLANNED)\n      - Remaining Cleanup Tasks (High Priority)\n      - [Navigation](#navigation)\n      - ? Success Tips\n\n[STRUCTURE] RECOMMENDED NEW STRUCTURE:\n   [FILE] README.md - Project overview and quick start\n   [FILE] SETUP.md - Installation and setup instructions\n   [FILE] DEVELOPMENT.md - Development workflow and guidelines\n   [FILE] ARCHITECTURE.md - System architecture and design\n   [FILE] API.md - Function registry and module dependencies\n   [FILE] CHANGELOG.md - Version history and changes\n   [FILE] TODO.md - Current priorities and planned work\n",
      "error": "",
      "script": "analyze_documentation.py"
    }
  ]
}