{
  "generated_by": "config_validator.py - Configuration Validation Tool",
  "last_generated": "2025-09-30 16:51:02",
  "source": "python ai_development_tools/config_validator.py",
  "note": "This file is auto-generated. Do not edit manually.",
  "validation_results": {
    "tools_analysis": {
      "ai_tools_runner.py": {
        "imports_config": false,
        "uses_config_functions": false,
        "hardcoded_values": [],
        "config_functions_used": [],
        "issues": [
          "Does not import config module"
        ]
      },
      "analyze_documentation.py": {
        "imports_config": false,
        "uses_config_functions": false,
        "hardcoded_values": [],
        "config_functions_used": [],
        "issues": [
          "Does not import config module"
        ]
      },
      "audit_function_registry.py": {
        "imports_config": true,
        "uses_config_functions": true,
        "hardcoded_values": [],
        "config_functions_used": [
          "get_scan_directories",
          "get_function_discovery_config"
        ],
        "issues": []
      },
      "audit_module_dependencies.py": {
        "imports_config": true,
        "uses_config_functions": true,
        "hardcoded_values": [],
        "config_functions_used": [
          "get_project_root",
          "get_scan_directories"
        ],
        "issues": []
      },
      "auto_document_functions.py": {
        "imports_config": true,
        "uses_config_functions": true,
        "hardcoded_values": [
          {
            "pattern": "project_root\\s*=\\s*Path\\(__file__\\)\\.parent\\.parent",
            "message": "Should use config.get_project_root()",
            "matches": 1
          }
        ],
        "config_functions_used": [
          "get_project_root",
          "get_scan_directories"
        ],
        "issues": []
      },
      "decision_support.py": {
        "imports_config": true,
        "uses_config_functions": false,
        "hardcoded_values": [],
        "config_functions_used": [],
        "issues": []
      },
      "documentation_sync_checker.py": {
        "imports_config": false,
        "uses_config_functions": false,
        "hardcoded_values": [
          {
            "pattern": "project_root\\s*=\\s*Path\\(__file__\\)\\.parent\\.parent",
            "message": "Should use config.get_project_root()",
            "matches": 1
          }
        ],
        "config_functions_used": [],
        "issues": [
          "Does not import config module",
          "Has hardcoded values but doesn't use config functions"
        ]
      },
      "file_rotation.py": {
        "imports_config": false,
        "uses_config_functions": false,
        "hardcoded_values": [
          {
            "pattern": "project_root\\s*=\\s*Path\\(__file__\\)\\.parent\\.parent",
            "message": "Should use config.get_project_root()",
            "matches": 1
          }
        ],
        "config_functions_used": [],
        "issues": [
          "Does not import config module",
          "Has hardcoded values but doesn't use config functions"
        ]
      },
      "function_discovery.py": {
        "imports_config": true,
        "uses_config_functions": false,
        "hardcoded_values": [],
        "config_functions_used": [],
        "issues": []
      },
      "generate_function_registry.py": {
        "imports_config": true,
        "uses_config_functions": true,
        "hardcoded_values": [],
        "config_functions_used": [
          "get_project_root",
          "get_scan_directories"
        ],
        "issues": []
      },
      "generate_module_dependencies.py": {
        "imports_config": true,
        "uses_config_functions": true,
        "hardcoded_values": [],
        "config_functions_used": [
          "get_project_root",
          "get_scan_directories"
        ],
        "issues": []
      },
      "legacy_reference_cleanup.py": {
        "imports_config": false,
        "uses_config_functions": false,
        "hardcoded_values": [
          {
            "pattern": "project_root\\s*=\\s*Path\\(__file__\\)\\.parent\\.parent",
            "message": "Should use config.get_project_root()",
            "matches": 1
          }
        ],
        "config_functions_used": [],
        "issues": [
          "Does not import config module",
          "Has hardcoded values but doesn't use config functions"
        ]
      },
      "quick_status.py": {
        "imports_config": true,
        "uses_config_functions": true,
        "hardcoded_values": [],
        "config_functions_used": [
          "get_project_root"
        ],
        "issues": []
      },
      "regenerate_coverage_metrics.py": {
        "imports_config": false,
        "uses_config_functions": false,
        "hardcoded_values": [
          {
            "pattern": "project_root\\s*=\\s*Path\\(__file__\\)\\.parent\\.parent",
            "message": "Should use config.get_project_root()",
            "matches": 1
          }
        ],
        "config_functions_used": [],
        "issues": [
          "Does not import config module",
          "Has hardcoded values but doesn't use config functions"
        ]
      },
      "standard_exclusions.py": {
        "imports_config": false,
        "uses_config_functions": false,
        "hardcoded_values": [],
        "config_functions_used": [],
        "issues": [
          "Does not import config module"
        ]
      },
      "tool_guide.py": {
        "imports_config": true,
        "uses_config_functions": false,
        "hardcoded_values": [],
        "config_functions_used": [],
        "issues": []
      },
      "validate_ai_work.py": {
        "imports_config": true,
        "uses_config_functions": false,
        "hardcoded_values": [],
        "config_functions_used": [],
        "issues": []
      },
      "version_sync.py": {
        "imports_config": true,
        "uses_config_functions": false,
        "hardcoded_values": [],
        "config_functions_used": [],
        "issues": []
      },
      "__init__.py": {
        "imports_config": false,
        "uses_config_functions": false,
        "hardcoded_values": [],
        "config_functions_used": [],
        "issues": [
          "Does not import config module"
        ]
      }
    },
    "config_validation": {
      "scan_directories_exist": [
        "core",
        "communication",
        "ui",
        "user",
        "tasks",
        "tests",
        "ai"
      ],
      "missing_directories": [],
      "config_structure_valid": true,
      "issues": []
    },
    "completeness": {
      "sections_complete": false,
      "missing_fields": [
        "FUNCTION_DISCOVERY.max_complexity_threshold",
        "VALIDATION.complexity_warning_threshold"
      ],
      "recommendations": []
    },
    "recommendations": [
      "Update ai_tools_runner.py to import config module",
      "Fix issues in ai_tools_runner.py: Does not import config module",
      "Update analyze_documentation.py to import config module",
      "Fix issues in analyze_documentation.py: Does not import config module",
      "Replace hardcoded values in auto_document_functions.py with config functions",
      "Update documentation_sync_checker.py to import config module",
      "Replace hardcoded values in documentation_sync_checker.py with config functions",
      "Fix issues in documentation_sync_checker.py: Does not import config module, Has hardcoded values but doesn't use config functions",
      "Update file_rotation.py to import config module",
      "Replace hardcoded values in file_rotation.py with config functions",
      "Fix issues in file_rotation.py: Does not import config module, Has hardcoded values but doesn't use config functions",
      "Update legacy_reference_cleanup.py to import config module",
      "Replace hardcoded values in legacy_reference_cleanup.py with config functions",
      "Fix issues in legacy_reference_cleanup.py: Does not import config module, Has hardcoded values but doesn't use config functions",
      "Update regenerate_coverage_metrics.py to import config module",
      "Replace hardcoded values in regenerate_coverage_metrics.py with config functions",
      "Fix issues in regenerate_coverage_metrics.py: Does not import config module, Has hardcoded values but doesn't use config functions",
      "Update standard_exclusions.py to import config module",
      "Fix issues in standard_exclusions.py: Does not import config module",
      "Update __init__.py to import config module",
      "Fix issues in __init__.py: Does not import config module",
      "Add missing configuration fields: FUNCTION_DISCOVERY.max_complexity_threshold, VALIDATION.complexity_warning_threshold"
    ],
    "summary": {
      "tools_using_config": 11,
      "total_tools": 19,
      "config_valid": true,
      "config_complete": false,
      "total_recommendations": 22
    }
  }
}