{
  "generated_by": "ai_tools_runner.py - AI Development Tools Runner",
  "last_generated": "2025-09-30 16:51:00",
  "source": "python ai_development_tools/ai_tools_runner.py audit",
  "note": "This file is auto-generated. Do not edit manually.",
  "timestamp": "2025-09-30T16:51:00.664319",
  "successful": [
    "function_discovery",
    "decision_support",
    "audit_function_registry",
    "audit_module_dependencies",
    "analyze_documentation"
  ],
  "failed": [],
  "results": {
    "function_discovery": {
      "success": true,
      "output": "[SCAN] Scanning for all functions...\nFound 3102 functions.\n\n=== FUNCTION DISCOVERY SUMMARY ===\n\nHANDLERS/UTILITIES (854):\n  - get_last_cleanup_timestamp (file: auto_cleanup.py, complexity: 57)\n  - update_cleanup_timestamp (file: auto_cleanup.py, complexity: 63)\n  - _get_cleanup_status__get_never_cleaned_status (file: auto_cleanup.py, complexity: 15)\n  - _get_cleanup_status__calculate_days_since_cleanup (file: auto_cleanup.py, complexity: 36)\n  - _get_cleanup_status__format_next_cleanup_date (file: auto_cleanup.py, complexity: 36)\n  - _get_cleanup_status__build_status_response (file: auto_cleanup.py, complexity: 22)\n  - get_cleanup_status (file: auto_cleanup.py, complexity: 58)\n  - create_automatic_backup (file: backup_manager.py, complexity: 63)\n  - _validate_system_state__validate_user_index (file: backup_manager.py, complexity: 150)\n  - _validate_system_state__ensure_user_data_directory (file: backup_manager.py, complexity: 68)\n  ...and 844 more.\n\nTESTS (1582):\n  - _validate_backup__check_file_exists (file: backup_manager.py, complexity: 50)\n  - _validate_backup__check_file_integrity (file: backup_manager.py, complexity: 45)\n  - verify_file_access (file: file_operations.py, complexity: 48)\n  - _is_testing_environment (file: logger.py, complexity: 62)\n  - apply_test_context_formatter_to_all_loggers (file: logger.py, complexity: 98)\n  - _check_and_fix_logging__test_logging_functionality (file: service.py, complexity: 53)\n  - _check_and_fix_logging__ensure_log_file_exists (file: service.py, complexity: 54)\n  - _check_and_fix_logging__read_recent_log_content (file: service.py, complexity: 65)\n  - _check_and_fix_logging__verify_test_message_present (file: service.py, complexity: 52)\n  - _check_and_fix_logging__check_recent_activity_timestamps (file: service.py, complexity: 92)\n  ...and 1572 more.\n\nMODERATE COMPLEXITY (50-99 nodes) (154):\n  - should_run_cleanup (file: auto_cleanup.py, complexity: 96)\n  - find_pycache_dirs (file: auto_cleanup.py, complexity: 63)\n  - find_pyc_files (file: auto_cleanup.py, complexity: 73)\n  - _calculate_cache_size__calculate_pyc_files_size (file: auto_cleanup.py, complexity: 65)\n  - _perform_cleanup__log_discovery_results (file: auto_cleanup.py, complexity: 76)\n  - _perform_cleanup__remove_cache_directories (file: auto_cleanup.py, complexity: 76)\n  - _perform_cleanup__remove_cache_files_list (file: auto_cleanup.py, complexity: 76)\n  - _perform_cleanup__log_completion_results (file: auto_cleanup.py, complexity: 56)\n  - auto_cleanup_if_needed (file: auto_cleanup.py, complexity: 70)\n  - __init__ (file: backup_manager.py, complexity: 54)\n  ...and 144 more.\n\nHIGH COMPLEXITY (100-199 nodes) (136):\n  - _calculate_cache_size__calculate_pycache_directories_size (file: auto_cleanup.py, complexity: 110)\n  - perform_cleanup (file: auto_cleanup.py, complexity: 102)\n  - archive_old_messages_for_all_users (file: auto_cleanup.py, complexity: 150)\n  - perform_safe_operation (file: backup_manager.py, complexity: 107)\n  - _backup_user_data (file: backup_manager.py, complexity: 111)\n  - list_backups (file: backup_manager.py, complexity: 117)\n  - restore_backup (file: backup_manager.py, complexity: 129)\n  - _calculate_streak (file: checkin_analytics.py, complexity: 101)\n  - _calculate_sleep_score (file: checkin_analytics.py, complexity: 122)\n  - safe_file_operation (file: error_handling.py, complexity: 131)\n  ...and 126 more.\n\nCRITICAL COMPLEXITY (>199 nodes) (97):\n  - _cleanup_old_backups (file: backup_manager.py, complexity: 291)\n  - print_configuration_report (file: config.py, complexity: 263)\n  - determine_file_path (file: file_operations.py, complexity: 285)\n  - cleanup_old_logs (file: logger.py, complexity: 292)\n  - compress_old_logs (file: logger.py, complexity: 304)\n  - cleanup_old_archives (file: logger.py, complexity: 210)\n  - __init__ (file: logger.py, complexity: 438)\n  - doRollover (file: logger.py, complexity: 341)\n  - add_message (file: message_management.py, complexity: 221)\n  - edit_message (file: message_management.py, complexity: 210)\n  ...and 87 more.\n\nUNDOCUMENTED (71):\n  - _split_env_list (file: file_auditor.py, complexity: 44)\n  - start_auditor (file: file_auditor.py, complexity: 8)\n  - stop_auditor (file: file_auditor.py, complexity: 8)\n  - __init__ (file: file_auditor.py, complexity: 33)\n  - info (file: file_auditor.py, complexity: 6)\n  - warning (file: file_auditor.py, complexity: 6)\n  - debug (file: file_auditor.py, complexity: 6)\n  - error (file: file_auditor.py, complexity: 6)\n  - critical (file: file_auditor.py, complexity: 6)\n  - __init__ (file: logger.py, complexity: 40)\n  ...and 61 more.\n\nSPECIAL METHODS (20):\n  - __init__ (file: checkin_analytics.py, complexity: 6)\n  - __init__ (file: error_handling.py, complexity: 14)\n  - __init__ (file: error_handling.py, complexity: 14)\n  - __init__ (file: error_handling.py, complexity: 14)\n  - __init__ (file: error_handling.py, complexity: 14)\n  - __init__ (file: logger.py, complexity: 13)\n  - __init__ (file: service_utilities.py, complexity: 19)\n  - __post_init__ (file: base_channel.py, complexity: 19)\n  - __post_init__ (file: command_registry.py, complexity: 35)\n  - __post_init__ (file: event_handler.py, complexity: 37)\n  ...and 10 more.\n\nOTHER (188):\n  - calculate_cache_size (file: auto_cleanup.py, complexity: 35)\n  - _perform_cleanup__discover_cache_files (file: auto_cleanup.py, complexity: 39)\n  - _perform_cleanup__remove_cache_files (file: auto_cleanup.py, complexity: 38)\n  - __init__ (file: checkin_dynamic_manager.py, complexity: 23)\n  - __init__ (file: error_handling.py, complexity: 25)\n  - recover (file: error_handling.py, complexity: 24)\n  - __enter__ (file: error_handling.py, complexity: 8)\n  - __exit__ (file: error_handling.py, complexity: 34)\n  - start (file: file_auditor.py, complexity: 7)\n  - stop (file: file_auditor.py, complexity: 7)\n  ...and 178 more.\n\nNote: 20 special Python methods excluded from undocumented count\n\nComplexity Summary: 387 functions need attention\n  - Moderate: 154 functions\n  - High: 136 functions\n  - Critical: 97 functions\n\nTip: Use this output to quickly find handlers, tests, complex, or undocumented functions.\n",
      "error": "",
      "returncode": 0
    },
    "decision_support": {
      "success": true,
      "output": "[SCAN] Gathering actionable insights for AI decision-making...\n\n=== AI DECISION SUPPORT DASHBOARD ===\nTotal functions: 3178\n\n[COMPLEXITY] Functions needing attention: 2290\n  [CRITICAL] Critical Complexity (>199 nodes): 393\n    - _cleanup_old_backups (file: backup_manager.py, complexity: 291)\n    - get_mood_trends (file: checkin_analytics.py, complexity: 381)\n    - get_habit_analysis (file: checkin_analytics.py, complexity: 202)\n    - get_sleep_analysis (file: checkin_analytics.py, complexity: 301)\n    - get_quantitative_summaries (file: checkin_analytics.py, complexity: 289)\n    ...and 388 more.\n  [HIGH] High Complexity (100-199 nodes): 791\n    - _calculate_cache_size__calculate_pycache_directories_size (file: auto_cleanup.py, complexity: 110)\n    - perform_cleanup (file: auto_cleanup.py, complexity: 102)\n    - archive_old_messages_for_all_users (file: auto_cleanup.py, complexity: 150)\n    - _validate_system_state__validate_user_index (file: backup_manager.py, complexity: 150)\n    - perform_safe_operation (file: backup_manager.py, complexity: 107)\n    ...and 786 more.\n  [MODERATE] Moderate Complexity (50-99 nodes): 1106\n    - get_last_cleanup_timestamp (file: auto_cleanup.py, complexity: 57)\n    - update_cleanup_timestamp (file: auto_cleanup.py, complexity: 63)\n    - should_run_cleanup (file: auto_cleanup.py, complexity: 96)\n    ...and 1103 more.\n\n[DOC] Undocumented Handlers: 123\n  - validate_account_dict (file: schemas.py)\n  - validate_preferences_dict (file: schemas.py)\n  - validate_schedules_dict (file: schemas.py)\n  - validate_messages_file_dict (file: schemas.py)\n  - _validate_email (file: schemas.py)\n  - _validate_discord_id (file: schemas.py)\n  - _validate_timezone (file: schemas.py)\n  - validate_schedule_periods__validate_time_format (file: user_data_validation.py)\n  - _ensure_default_loaders_once (file: user_management.py)\n  - can_handle (file: analytics_handler.py)\n  ...and 113 more.\n\n[DUPE] Duplicate Function Names: 197\n  - __init__: backup_manager.py, checkin_analytics.py, checkin_dynamic_manager.py, config.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, file_auditor.py, logger.py, logger.py, logger.py, logger.py, logger.py, logger.py, scheduler.py, service.py, service_utilities.py, user_data_manager.py, channel_monitor.py, channel_orchestrator.py, retry_manager.py, command_parser.py, conversation_flow_manager.py, interaction_manager.py, message_router.py, base_channel.py, command_registry.py, command_registry.py, rich_formatter.py, api_client.py, bot.py, event_handler.py, bot.py, ui_app_qt.py, ui_app_qt.py, account_creator_dialog.py, admin_panel.py, category_management_dialog.py, channel_management_dialog.py, checkin_management_dialog.py, schedule_editor_dialog.py, task_completion_dialog.py, task_crud_dialog.py, task_edit_dialog.py, task_management_dialog.py, user_profile_dialog.py, category_selection_widget.py, channel_selection_widget.py, checkin_settings_widget.py, dynamic_list_container.py, dynamic_list_field.py, period_row_widget.py, tag_widget.py, task_settings_widget.py, user_profile_settings_widget.py, context_manager.py, user_preferences.py, conftest.py, conftest.py, test_isolation.py, test_communication_factory_coverage_expansion.py, test_communication_factory_coverage_expansion.py, test_cleanup.py, cache_manager.py, cache_manager.py, chatbot.py, context_builder.py, conversation_history.py, prompt_manager.py\n  - get_mood_trends: checkin_analytics.py, test_interaction_handlers_coverage_expansion.py\n  - get_checkin_history: checkin_analytics.py, test_interaction_handlers_coverage_expansion.py\n  - can_handle: error_handling.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, analytics_handler.py, base_handler.py, checkin_handler.py, interaction_handlers.py, interaction_handlers.py, interaction_handlers.py, interaction_handlers.py, interaction_handlers.py, interaction_handlers.py, interaction_handlers.py, profile_handler.py, schedule_handler.py, task_handler.py\n  - recover: error_handling.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py\n  ...and 192 more.\n\n=== SUGGESTED NEXT STEPS ===\n- [CRITICAL] Refactor critical complexity functions immediately.\n- [HIGH] Refactor high complexity functions for maintainability.\n- [MODERATE] Review moderate complexity functions when time permits.\n- Add docstrings to undocumented handler/utility functions.\n- Review duplicate function names for possible consolidation or renaming.\n\nTip: Use this dashboard before major refactoring, documentation, or architectural changes.\n",
      "error": "",
      "returncode": 0
    },
    "audit_function_registry": {
      "success": true,
      "output": "{\n  \"analysis\": {\n    \"duplicate_count\": 154,\n    \"duplicate_sample\": [\n      {\n        \"files\": [\n          \"core/error_handling.py\",\n          \"tests/test_isolation.py\"\n        ],\n        \"name\": \"__enter__\"\n      },\n      {\n        \"files\": [\n          \"core/error_handling.py\",\n          \"tests/test_isolation.py\"\n        ],\n        \"name\": \"__exit__\"\n      },\n      {\n        \"files\": [\n          \"ai/cache_manager.py\",\n          \"ai/chatbot.py\",\n          \"ai/context_builder.py\",\n          \"ai/conversation_history.py\",\n          \"ai/prompt_manager.py\",\n          \"communication/communication_channels/base/base_channel.py\",\n          \"communication/communication_channels/base/command_registry.py\",\n          \"communication/communication_channels/base/rich_formatter.py\",\n          \"communication/communication_channels/discord/api_client.py\",\n          \"communication/communication_channels/discord/bot.py\",\n          \"communication/communication_channels/discord/event_handler.py\",\n          \"communication/communication_channels/email/bot.py\",\n          \"communication/core/channel_monitor.py\",\n          \"communication/core/channel_orchestrator.py\",\n          \"communication/core/retry_manager.py\",\n          \"communication/message_processing/command_parser.py\",\n          \"communication/message_processing/conversation_flow_manager.py\",\n          \"communication/message_processing/interaction_manager.py\",\n          \"communication/message_processing/message_router.py\",\n          \"core/backup_manager.py\",\n          \"core/checkin_analytics.py\",\n          \"core/checkin_dynamic_manager.py\",\n          \"core/config.py\",\n          \"core/error_handling.py\",\n          \"core/file_auditor.py\",\n          \"core/logger.py\",\n          \"core/scheduler.py\",\n          \"core/service.py\",\n          \"core/service_utilities.py\",\n          \"core/user_data_manager.py\",\n          \"tests/behavior/test_communication_factory_coverage_expansion.py\",\n          \"tests/conftest.py\",\n          \"tests/test_isolation.py\",\n          \"tests/unit/test_cleanup.py\",\n          \"ui/dialogs/account_creator_dialog.py\",\n          \"ui/dialogs/admin_panel.py\",\n          \"ui/dialogs/category_management_dialog.py\",\n          \"ui/dialogs/channel_management_dialog.py\",\n          \"ui/dialogs/checkin_management_dialog.py\",\n          \"ui/dialogs/schedule_editor_dialog.py\",\n          \"ui/dialogs/task_completion_dialog.py\",\n          \"ui/dialogs/task_crud_dialog.py\",\n          \"ui/dialogs/task_edit_dialog.py\",\n          \"ui/dialogs/task_management_dialog.py\",\n          \"ui/dialogs/user_profile_dialog.py\",\n          \"ui/ui_app_qt.py\",\n          \"ui/widgets/category_selection_widget.py\",\n          \"ui/widgets/channel_selection_widget.py\",\n          \"ui/widgets/checkin_settings_widget.py\",\n          \"ui/widgets/dynamic_list_container.py\",\n          \"ui/widgets/dynamic_list_field.py\",\n          \"ui/widgets/period_row_widget.py\",\n          \"ui/widgets/tag_widget.py\",\n          \"ui/widgets/task_settings_widget.py\",\n          \"ui/widgets/user_profile_settings_widget.py\",\n          \"user/context_manager.py\",\n          \"user/user_preferences.py\"\n        ],\n        \"name\": \"__init__\"\n      },\n      {\n        \"files\": [\n          \"ai/chatbot.py\",\n          \"communication/core/channel_orchestrator.py\",\n          \"user/user_context.py\"\n        ],\n        \"name\": \"__new__\"\n      },\n      {\n        \"files\": [\n          \"ai/context_builder.py\",\n          \"ai/conversation_history.py\",\n          \"communication/communication_channels/base/base_channel.py\",\n          \"communication/communication_channels/base/command_registry.py\",\n          \"communication/communication_channels/discord/event_handler.py\",\n          \"ui/widgets/dynamic_list_container.py\"\n        ],\n        \"name\": \"__post_init__\"\n      }\n    ],\n    \"duplicates\": {\n      \"__enter__\": [\n        \"core/error_handling.py\",\n        \"tests/test_isolation.py\"\n      ],\n      \"__exit__\": [\n        \"core/error_handling.py\",\n        \"tests/test_isolation.py\"\n      ],\n      \"__init__\": [\n        \"ai/cache_manager.py\",\n        \"ai/chatbot.py\",\n        \"ai/context_builder.py\",\n        \"ai/conversation_history.py\",\n        \"ai/prompt_manager.py\",\n        \"communication/communication_channels/base/base_channel.py\",\n        \"communication/communication_channels/base/command_registry.py\",\n        \"communication/communication_channels/base/rich_formatter.py\",\n        \"communication/communication_channels/discord/api_client.py\",\n        \"communication/communication_channels/discord/bot.py\",\n        \"communication/communication_channels/discord/event_handler.py\",\n        \"communication/communication_channels/email/bot.py\",\n        \"communication/core/channel_monitor.py\",\n        \"communication/core/channel_orchestrator.py\",\n        \"communication/core/retry_manager.py\",\n        \"communication/message_processing/command_parser.py\",\n        \"communication/message_processing/conversation_flow_manager.py\",\n        \"communication/message_processing/interaction_manager.py\",\n        \"communication/message_processing/message_router.py\",\n        \"core/backup_manager.py\",\n        \"core/checkin_analytics.py\",\n        \"core/checkin_dynamic_manager.py\",\n        \"core/config.py\",\n        \"core/error_handling.py\",\n        \"core/file_auditor.py\",\n        \"core/logger.py\",\n        \"core/scheduler.py\",\n        \"core/service.py\",\n        \"core/service_utilities.py\",\n        \"core/user_data_manager.py\",\n        \"tests/behavior/test_communication_factory_coverage_expansion.py\",\n        \"tests/conftest.py\",\n        \"tests/test_isolation.py\",\n        \"tests/unit/test_cleanup.py\",\n        \"ui/dialogs/account_creator_dialog.py\",\n        \"ui/dialogs/admin_panel.py\",\n        \"ui/dialogs/category_management_dialog.py\",\n        \"ui/dialogs/channel_management_dialog.py\",\n        \"ui/dialogs/checkin_management_dialog.py\",\n        \"ui/dialogs/schedule_editor_dialog.py\",\n        \"ui/dialogs/task_completion_dialog.py\",\n        \"ui/dialogs/task_crud_dialog.py\",\n        \"ui/dialogs/task_edit_dialog.py\",\n        \"ui/dialogs/task_management_dialog.py\",\n        \"ui/dialogs/user_profile_dialog.py\",\n        \"ui/ui_app_qt.py\",\n        \"ui/widgets/category_selection_widget.py\",\n        \"ui/widgets/channel_selection_widget.py\",\n        \"ui/widgets/checkin_settings_widget.py\",\n        \"ui/widgets/dynamic_list_container.py\",\n        \"ui/widgets/dynamic_list_field.py\",\n        \"ui/widgets/period_row_widget.py\",\n        \"ui/widgets/tag_widget.py\",\n        \"ui/widgets/task_settings_widget.py\",\n        \"ui/widgets/user_profile_settings_widget.py\",\n        \"user/context_manager.py\",\n        \"user/user_preferences.py\"\n      ],\n      \"__new__\": [\n        \"ai/chatbot.py\",\n        \"communication/core/channel_orchestrator.py\",\n        \"user/user_context.py\"\n      ],\n      \"__post_init__\": [\n        \"ai/context_builder.py\",\n        \"ai/conversation_history.py\",\n        \"communication/communication_channels/base/base_channel.py\",\n        \"communication/communication_channels/base/command_registry.py\",\n        \"communication/communication_channels/discord/event_handler.py\",\n        \"ui/widgets/dynamic_list_container.py\"\n      ],\n      \"_handle_add_schedule_period\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/schedule_handler.py\"\n      ],\n      \"_handle_add_schedule_period__parse_time_format\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/schedule_handler.py\"\n      ],\n      \"_handle_checkin_history\": [\n        \"communication/command_handlers/analytics_handler.py\",\n        \"communication/command_handlers/interaction_handlers.py\"\n      ],\n      \"_handle_checkin_status\": [\n        \"communication/command_handlers/checkin_handler.py\",\n        \"communication/command_handlers/interaction_handlers.py\"\n      ],\n      \"_handle_complete_task\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_complete_task__find_task_by_identifier\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_completion_rate\": [\n        \"communication/command_handlers/analytics_handler.py\",\n        \"communication/command_handlers/interaction_handlers.py\"\n      ],\n      \"_handle_continue_checkin\": [\n        \"communication/command_handlers/checkin_handler.py\",\n        \"communication/command_handlers/interaction_handlers.py\"\n      ],\n      \"_handle_create_task\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_create_task__parse_relative_date\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_delete_task\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_delete_task__find_task_by_identifier\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_edit_schedule_period\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/schedule_handler.py\"\n      ],\n      \"_handle_edit_schedule_period__parse_time_format\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/schedule_handler.py\"\n      ],\n      \"_handle_habit_analysis\": [\n        \"communication/command_handlers/analytics_handler.py\",\n        \"communication/command_handlers/interaction_handlers.py\"\n      ],\n      \"_handle_list_tasks\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_list_tasks__apply_filters\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_list_tasks__build_filter_info\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_list_tasks__build_response\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_list_tasks__create_rich_data\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_list_tasks__format_due_date\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_list_tasks__format_list\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_list_tasks__generate_suggestions\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_list_tasks__get_suggestion\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_list_tasks__no_tasks_response\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_list_tasks__sort_tasks\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_mood_trends\": [\n        \"communication/command_handlers/analytics_handler.py\",\n        \"communication/command_handlers/interaction_handlers.py\"\n      ],\n      \"_handle_profile_stats\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/profile_handler.py\"\n      ],\n      \"_handle_quant_summary\": [\n        \"communication/command_handlers/analytics_handler.py\",\n        \"communication/command_handlers/interaction_handlers.py\"\n      ],\n      \"_handle_schedule_status\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/schedule_handler.py\"\n      ],\n      \"_handle_show_analytics\": [\n        \"communication/command_handlers/analytics_handler.py\",\n        \"communication/command_handlers/interaction_handlers.py\"\n      ],\n      \"_handle_show_profile\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/profile_handler.py\"\n      ],\n      \"_handle_show_schedule\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/schedule_handler.py\"\n      ],\n      \"_handle_sleep_analysis\": [\n        \"communication/command_handlers/analytics_handler.py\",\n        \"communication/command_handlers/interaction_handlers.py\"\n      ],\n      \"_handle_start_checkin\": [\n        \"communication/command_handlers/checkin_handler.py\",\n        \"communication/command_handlers/interaction_handlers.py\"\n      ],\n      \"_handle_task_stats\": [\n        \"communication/command_handlers/analytics_handler.py\",\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_update_profile\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/profile_handler.py\"\n      ],\n      \"_handle_update_schedule\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/schedule_handler.py\"\n      ],\n      \"_handle_update_task\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_update_task__find_task_by_identifier\": [\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"_handle_wellness_score\": [\n        \"communication/command_handlers/analytics_handler.py\",\n        \"communication/command_handlers/interaction_handlers.py\"\n      ],\n      \"_is_valid_intent\": [\n        \"communication/message_processing/command_parser.py\",\n        \"communication/message_processing/interaction_manager.py\"\n      ],\n      \"_setup\": [\n        \"tests/behavior/test_logger_coverage_expansion.py\",\n        \"tests/behavior/test_user_management_coverage_expansion.py\"\n      ],\n      \"add_message\": [\n        \"ai/conversation_history.py\",\n        \"core/message_management.py\",\n        \"tests/behavior/test_ai_conversation_history_behavior.py\"\n      ],\n      \"add_new_period\": [\n        \"ui/dialogs/schedule_editor_dialog.py\",\n        \"ui/widgets/checkin_settings_widget.py\",\n        \"ui/widgets/task_settings_widget.py\"\n      ],\n      \"can_handle\": [\n        \"communication/command_handlers/analytics_handler.py\",\n        \"communication/command_handlers/base_handler.py\",\n        \"communication/command_handlers/checkin_handler.py\",\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/profile_handler.py\",\n        \"communication/command_handlers/schedule_handler.py\",\n        \"communication/command_handlers/task_handler.py\",\n        \"core/error_handling.py\"\n      ],\n      \"cancel\": [\n        \"ui/dialogs/schedule_editor_dialog.py\",\n        \"ui/dialogs/user_profile_dialog.py\"\n      ],\n      \"center_dialog\": [\n        \"ui/dialogs/account_creator_dialog.py\",\n        \"ui/dialogs/schedule_editor_dialog.py\",\n        \"ui/dialogs/user_profile_dialog.py\"\n      ],\n      \"channel_type\": [\n        \"communication/communication_channels/base/base_channel.py\",\n        \"communication/communication_channels/discord/bot.py\",\n        \"communication/communication_channels/email/bot.py\",\n        \"tests/behavior/test_communication_factory_coverage_expansion.py\"\n      ],\n      \"cleanup_old_archives\": [\n        \"core/logger.py\",\n        \"tests/conftest.py\"\n      ],\n      \"cleanup_test_environment\": [\n        \"tests/behavior/test_account_management_real_behavior.py\",\n        \"tests/test_utilities.py\"\n      ],\n      \"comm_manager\": [\n        \"tests/behavior/test_communication_behavior.py\",\n        \"tests/behavior/test_communication_manager_coverage_expansion.py\"\n      ],\n      \"create_new_user\": [\n        \"core/user_management.py\",\n        \"ui/ui_app_qt.py\"\n      ],\n      \"critical\": [\n        \"core/file_auditor.py\",\n        \"core/logger.py\",\n        \"tests/conftest.py\"\n      ],\n      \"debug\": [\n        \"core/file_auditor.py\",\n        \"core/logger.py\"\n      ],\n      \"dialog\": [\n        \"tests/ui/test_account_creation_ui.py\",\n        \"tests/ui/test_dialog_behavior.py\",\n        \"tests/ui/test_dialog_coverage_expansion.py\",\n        \"tests/ui/test_user_profile_dialog_coverage_expansion.py\"\n      ],\n      \"error\": [\n        \"core/file_auditor.py\",\n        \"core/logger.py\"\n      ],\n      \"find_lowest_available_period_number\": [\n        \"ui/dialogs/schedule_editor_dialog.py\",\n        \"ui/widgets/checkin_settings_widget.py\",\n        \"ui/widgets/task_settings_widget.py\"\n      ],\n      \"format\": [\n        \"core/logger.py\",\n        \"tests/conftest.py\"\n      ],\n      \"generate_response\": [\n        \"ai/chatbot.py\",\n        \"tests/behavior/test_ai_chatbot_behavior.py\"\n      ],\n      \"get_all_user_ids\": [\n        \"core/user_data_handlers.py\",\n        \"core/user_management.py\"\n      ],\n      \"get_available_tags\": [\n        \"ui/widgets/tag_widget.py\",\n        \"ui/widgets/task_settings_widget.py\"\n      ],\n      \"get_checkin_history\": [\n        \"core/checkin_analytics.py\",\n        \"tests/behavior/test_interaction_handlers_coverage_expansion.py\"\n      ],\n      \"get_checkin_settings\": [\n        \"ui/dialogs/checkin_management_dialog.py\",\n        \"ui/widgets/checkin_settings_widget.py\"\n      ],\n      \"get_command_definitions\": [\n        \"communication/message_processing/interaction_manager.py\",\n        \"communication/message_processing/message_router.py\"\n      ],\n      \"get_examples\": [\n        \"communication/command_handlers/analytics_handler.py\",\n        \"communication/command_handlers/base_handler.py\",\n        \"communication/command_handlers/checkin_handler.py\",\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/profile_handler.py\",\n        \"communication/command_handlers/schedule_handler.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"get_help\": [\n        \"communication/command_handlers/analytics_handler.py\",\n        \"communication/command_handlers/base_handler.py\",\n        \"communication/command_handlers/checkin_handler.py\",\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/profile_handler.py\",\n        \"communication/command_handlers/schedule_handler.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"get_mood_trends\": [\n        \"core/checkin_analytics.py\",\n        \"tests/behavior/test_interaction_handlers_coverage_expansion.py\"\n      ],\n      \"get_preference\": [\n        \"user/user_context.py\",\n        \"user/user_preferences.py\"\n      ],\n      \"get_recent_messages\": [\n        \"ai/conversation_history.py\",\n        \"core/message_management.py\"\n      ],\n      \"get_registered_channels\": [\n        \"communication/core/channel_orchestrator.py\",\n        \"communication/core/factory.py\"\n      ],\n      \"get_selected_categories\": [\n        \"ui/dialogs/category_management_dialog.py\",\n        \"ui/widgets/category_selection_widget.py\"\n      ],\n      \"get_selected_channel\": [\n        \"ui/dialogs/channel_management_dialog.py\",\n        \"ui/widgets/channel_selection_widget.py\"\n      ],\n      \"get_slash_command_map\": [\n        \"communication/message_processing/interaction_manager.py\",\n        \"communication/message_processing/message_router.py\"\n      ],\n      \"get_statistics\": [\n        \"ai/conversation_history.py\",\n        \"ui/dialogs/task_management_dialog.py\",\n        \"ui/widgets/task_settings_widget.py\"\n      ],\n      \"get_timestamp_for_sorting\": [\n        \"core/message_management.py\",\n        \"core/response_tracking.py\"\n      ],\n      \"handle\": [\n        \"communication/command_handlers/analytics_handler.py\",\n        \"communication/command_handlers/base_handler.py\",\n        \"communication/command_handlers/checkin_handler.py\",\n        \"communication/command_handlers/interaction_handlers.py\",\n        \"communication/command_handlers/profile_handler.py\",\n        \"communication/command_handlers/schedule_handler.py\",\n        \"communication/command_handlers/task_handler.py\"\n      ],\n      \"handle_task_reminder\": [\n        \"communication/core/channel_orchestrator.py\",\n        \"core/scheduler.py\"\n      ],\n      \"info\": [\n        \"core/file_auditor.py\",\n        \"core/logger.py\"\n      ],\n      \"inner_function\": [\n        \"tests/behavior/test_error_handling_coverage_expansion_phase3_final.py\",\n        \"tests/unit/test_error_handling.py\"\n      ],\n      \"is_schedule_period_active\": [\n        \"core/schedule_management.py\",\n        \"user/user_preferences.py\"\n      ],\n      \"is_service_running\": [\n        \"core/service_utilities.py\",\n        \"ui/ui_app_qt.py\"\n      ],\n      \"keyPressEvent\": [\n        \"ui/dialogs/account_creator_dialog.py\",\n        \"ui/dialogs/user_profile_dialog.py\"\n      ],\n      \"load_existing_data\": [\n        \"ui/dialogs/schedule_editor_dialog.py\",\n        \"ui/widgets/checkin_settings_widget.py\",\n        \"ui/widgets/task_settings_widget.py\",\n        \"ui/widgets/user_profile_settings_widget.py\"\n      ],\n      \"main\": [\n        \"core/service.py\",\n        \"run_mhm.py\",\n        \"run_tests.py\",\n        \"tests/behavior/test_account_management_real_behavior.py\",\n        \"tests/unit/test_cleanup.py\",\n        \"ui/generate_ui_files.py\",\n        \"ui/ui_app_qt.py\"\n      ],\n      \"mock_channel_config\": [\n        \"tests/behavior/test_communication_behavior.py\",\n        \"tests/behavior/test_communication_manager_coverage_expansion.py\"\n      ],\n      \"mock_communication_manager\": [\n        \"tests/behavior/test_core_service_coverage_expansion.py\",\n        \"tests/behavior/test_interaction_handlers_coverage_expansion.py\",\n        \"tests/behavior/test_scheduler_behavior.py\",\n        \"tests/behavior/test_scheduler_coverage_expansion.py\"\n      ],\n      \"mock_config\": [\n        \"tests/behavior/test_core_service_coverage_expansion.py\",\n        \"tests/conftest.py\"\n      ],\n      \"mock_user_data\": [\n        \"tests/conftest.py\",\n        \"tests/ui/test_channel_management_dialog_coverage_expansion.py\"\n      ],\n      \"mock_user_data_dir\": [\n        \"tests/behavior/test_task_management_coverage_expansion.py\",\n        \"tests/ui/test_ui_widgets_coverage_expansion.py\"\n      ],\n      \"open_personalization_dialog\": [\n        \"ui/dialogs/account_creator_dialog.py\",\n        \"ui/dialogs/user_profile_dialog.py\"\n      ],\n      \"open_schedule_editor\": [\n        \"ui/dialogs/schedule_editor_dialog.py\",\n        \"ui/ui_app_qt.py\"\n      ],\n      \"outer_function\": [\n        \"tests/behavior/test_error_handling_coverage_expansion_phase3_final.py\",\n        \"tests/unit/test_error_handling.py\"\n      ],\n      \"parse_command\": [\n        \"communication/message_processing/command_parser.py\",\n        \"tests/behavior/test_enhanced_command_parser_behavior.py\"\n      ],\n      \"populate_timezones\": [\n        \"ui/widgets/channel_selection_widget.py\",\n        \"ui/widgets/user_profile_settings_widget.py\"\n      ],\n      \"qapp\": [\n        \"tests/ui/test_account_creation_ui.py\",\n        \"tests/ui/test_dialog_behavior.py\",\n        \"tests/ui/test_dialog_coverage_expansion.py\",\n        \"tests/ui/test_user_profile_dialog_coverage_expansion.py\",\n        \"tests/ui/test_widget_behavior.py\",\n        \"tests/ui/test_widget_behavior_simple.py\"\n      ],\n      \"realistic_mock_channel\": [\n        \"tests/behavior/test_communication_behavior.py\",\n        \"tests/behavior/test_communication_manager_coverage_expansion.py\"\n      ],\n      \"refresh_tags\": [\n        \"ui/widgets/tag_widget.py\",\n        \"ui/widgets/task_settings_widget.py\"\n      ],\n      \"register_data_loader\": [\n        \"core/user_data_handlers.py\",\n        \"core/user_management.py\"\n      ],\n      \"remove_period_row\": [\n        \"ui/dialogs/schedule_editor_dialog.py\",\n        \"ui/widgets/checkin_settings_widget.py\",\n        \"ui/widgets/task_settings_widget.py\"\n      ],\n      \"retranslateUi\": [\n        \"ui/generated/account_creator_dialog_pyqt.py\",\n        \"ui/generated/admin_panel_pyqt.py\",\n        \"ui/generated/category_management_dialog_pyqt.py\",\n        \"ui/generated/category_selection_widget_pyqt.py\",\n        \"ui/generated/channel_management_dialog_pyqt.py\",\n        \"ui/generated/channel_selection_widget_pyqt.py\",\n        \"ui/generated/checkin_element_template_pyqt.py\",\n        \"ui/generated/checkin_management_dialog_pyqt.py\",\n        \"ui/generated/checkin_settings_widget_pyqt.py\",\n        \"ui/generated/dynamic_list_field_template_pyqt.py\",\n        \"ui/generated/period_row_template_pyqt.py\",\n        \"ui/generated/schedule_editor_dialog_pyqt.py\",\n        \"ui/generated/tag_widget_pyqt.py\",\n        \"ui/generated/task_completion_dialog_pyqt.py\",\n        \"ui/generated/task_crud_dialog_pyqt.py\",\n        \"ui/generated/task_edit_dialog_pyqt.py\",\n        \"ui/generated/task_management_dialog_pyqt.py\",\n        \"ui/generated/task_settings_widget_pyqt.py\",\n        \"ui/generated/user_profile_management_dialog_pyqt.py\",\n        \"ui/generated/user_profile_settings_widget_pyqt.py\"\n      ],\n      \"save_user_data\": [\n        \"core/user_data_handlers.py\",\n        \"user/user_context.py\"\n      ],\n      \"scheduler_manager\": [\n        \"tests/behavior/test_scheduler_behavior.py\",\n        \"tests/behavior/test_scheduler_coverage_expansion.py\"\n      ],\n      \"service\": [\n        \"tests/behavior/test_core_service_coverage_expansion.py\",\n        \"tests/behavior/test_service_behavior.py\"\n      ],\n      \"set_checkin_settings\": [\n        \"ui/dialogs/checkin_management_dialog.py\",\n        \"ui/widgets/checkin_settings_widget.py\"\n      ],\n      \"set_preference\": [\n        \"user/user_context.py\",\n        \"user/user_preferences.py\"\n      ],\n      \"set_schedule_period_active\": [\n        \"core/schedule_management.py\",\n        \"user/user_preferences.py\"\n      ],\n      \"set_selected_categories\": [\n        \"ui/dialogs/category_management_dialog.py\",\n        \"ui/widgets/category_selection_widget.py\"\n      ],\n      \"set_selected_channel\": [\n        \"ui/dialogs/channel_management_dialog.py\",\n        \"ui/widgets/channel_selection_widget.py\"\n      ],\n      \"setupUi\": [\n        \"ui/generated/account_creator_dialog_pyqt.py\",\n        \"ui/generated/admin_panel_pyqt.py\",\n        \"ui/generated/category_management_dialog_pyqt.py\",\n        \"ui/generated/category_selection_widget_pyqt.py\",\n        \"ui/generated/channel_management_dialog_pyqt.py\",\n        \"ui/generated/channel_selection_widget_pyqt.py\",\n        \"ui/generated/checkin_element_template_pyqt.py\",\n        \"ui/generated/checkin_management_dialog_pyqt.py\",\n        \"ui/generated/checkin_settings_widget_pyqt.py\",\n        \"ui/generated/dynamic_list_field_template_pyqt.py\",\n        \"ui/generated/period_row_template_pyqt.py\",\n        \"ui/generated/schedule_editor_dialog_pyqt.py\",\n        \"ui/generated/tag_widget_pyqt.py\",\n        \"ui/generated/task_completion_dialog_pyqt.py\",\n        \"ui/generated/task_crud_dialog_pyqt.py\",\n        \"ui/generated/task_edit_dialog_pyqt.py\",\n        \"ui/generated/task_management_dialog_pyqt.py\",\n        \"ui/generated/task_settings_widget_pyqt.py\",\n        \"ui/generated/user_profile_management_dialog_pyqt.py\",\n        \"ui/generated/user_profile_settings_widget_pyqt.py\"\n      ],\n      \"setup_connections\": [\n        \"ui/dialogs/account_creator_dialog.py\",\n        \"ui/dialogs/task_completion_dialog.py\",\n        \"ui/dialogs/task_crud_dialog.py\",\n        \"ui/dialogs/task_edit_dialog.py\",\n        \"ui/widgets/checkin_settings_widget.py\",\n        \"ui/widgets/tag_widget.py\",\n        \"ui/widgets/task_settings_widget.py\"\n      ],\n      \"setup_functionality\": [\n        \"ui/dialogs/schedule_editor_dialog.py\",\n        \"ui/widgets/period_row_widget.py\"\n      ],\n      \"setup_method\": [\n        \"tests/behavior/test_command_parser_coverage_expansion_phase3_simple.py\",\n        \"tests/behavior/test_email_bot_behavior.py\",\n        \"tests/behavior/test_enhanced_command_parser_behavior.py\"\n      ],\n      \"setup_test_environment\": [\n        \"tests/behavior/test_account_management_real_behavior.py\",\n        \"tests/integration/test_account_lifecycle.py\",\n        \"tests/test_utilities.py\"\n      ],\n      \"setup_ui\": [\n        \"ui/dialogs/admin_panel.py\",\n        \"ui/dialogs/task_completion_dialog.py\",\n        \"ui/dialogs/task_crud_dialog.py\",\n        \"ui/dialogs/task_edit_dialog.py\",\n        \"ui/dialogs/user_profile_dialog.py\",\n        \"ui/widgets/tag_widget.py\"\n      ],\n      \"showEvent\": [\n        \"ui/widgets/checkin_settings_widget.py\",\n        \"ui/widgets/task_settings_widget.py\"\n      ],\n      \"sort_key\": [\n        \"core/schedule_management.py\",\n        \"ui/dialogs/schedule_editor_dialog.py\"\n      ],\n      \"start\": [\n        \"core/file_auditor.py\",\n        \"core/service.py\"\n      ],\n      \"teardown_method\": [\n        \"tests/behavior/test_logger_coverage_expansion.py\",\n        \"tests/behavior/test_user_management_coverage_expansion.py\"\n      ],\n      \"temp_dir\": [\n        \"tests/behavior/test_communication_behavior.py\",\n        \"tests/behavior/test_service_behavior.py\",\n        \"tests/behavior/test_task_behavior.py\",\n        \"tests/behavior/test_task_management_coverage_expansion.py\",\n        \"tests/ui/test_ui_widgets_coverage_expansion.py\"\n      ],\n      \"test_checkin_enablement_real_behavior\": [\n        \"tests/ui/test_dialog_behavior.py\",\n        \"tests/ui/test_widget_behavior.py\"\n      ],\n      \"test_cleanup_old_logs_real_behavior\": [\n        \"tests/behavior/test_logger_behavior.py\",\n        \"tests/behavior/test_logger_coverage_expansion.py\"\n      ],\n      \"test_data_dir\": [\n        \"tests/behavior/test_communication_manager_coverage_expansion.py\",\n        \"tests/behavior/test_interaction_handlers_coverage_expansion.py\",\n        \"tests/conftest.py\"\n      ],\n      \"test_data_saving_real_behavior\": [\n        \"tests/ui/test_dialog_behavior.py\",\n        \"tests/ui/test_dialog_coverage_expansion.py\"\n      ],\n      \"test_delete_task_real_behavior\": [\n        \"tests/behavior/test_task_management_coverage_expansion.py\",\n        \"tests/ui/test_dialog_coverage_expansion.py\"\n      ],\n      \"test_dialog_initialization_real_behavior\": [\n        \"tests/ui/test_account_creation_ui.py\",\n        \"tests/ui/test_dialog_behavior.py\",\n        \"tests/ui/test_dialog_coverage_expansion.py\"\n      ],\n      \"test_discord_user_creation\": [\n        \"tests/behavior/test_utilities_demo.py\",\n        \"tests/integration/test_user_creation.py\"\n      ],\n      \"test_dynamic_list_fields_real_behavior\": [\n        \"tests/ui/test_dialog_behavior.py\",\n        \"tests/ui/test_dialog_coverage_expansion.py\"\n      ],\n      \"test_ensure_user_directory_success\": [\n        \"tests/behavior/test_config_coverage_expansion_phase3_simple.py\",\n        \"tests/unit/test_file_operations.py\"\n      ],\n      \"test_feature_enablement_real_behavior\": [\n        \"tests/behavior/test_account_management_real_behavior.py\",\n        \"tests/ui/test_account_creation_ui.py\"\n      ],\n      \"test_function\": [\n        \"tests/behavior/test_error_handling_coverage_expansion_phase3_final.py\",\n        \"tests/unit/test_error_handling.py\"\n      ],\n      \"test_get_log_file_info_real_behavior\": [\n        \"tests/behavior/test_logger_behavior.py\",\n        \"tests/behavior/test_logger_coverage_expansion.py\"\n      ],\n      \"test_initialize_paths_real_behavior\": [\n        \"tests/behavior/test_core_service_coverage_expansion.py\",\n        \"tests/behavior/test_service_behavior.py\"\n      ],\n      \"test_main_function_real_behavior\": [\n        \"tests/behavior/test_core_service_coverage_expansion.py\",\n        \"tests/behavior/test_service_behavior.py\"\n      ],\n      \"test_set_verbose_mode_real_behavior\": [\n        \"tests/behavior/test_logger_behavior.py\",\n        \"tests/behavior/test_logger_coverage_expansion.py\"\n      ],\n      \"test_signal_handler_real_behavior\": [\n        \"tests/behavior/test_core_service_coverage_expansion.py\",\n        \"tests/behavior/test_service_behavior.py\"\n      ],\n      \"test_suppress_noisy_logging_real_behavior\": [\n        \"tests/behavior/test_logger_behavior.py\",\n        \"tests/behavior/test_logger_coverage_expansion.py\"\n      ],\n      \"test_user_data\": [\n        \"tests/ui/test_dialog_coverage_expansion.py\",\n        \"tests/ui/test_user_profile_dialog_coverage_expansion.py\"\n      ],\n      \"test_validate_ai_configuration_missing_url\": [\n        \"tests/behavior/test_config_coverage_expansion_phase3_simple.py\",\n        \"tests/unit/test_config.py\"\n      ],\n      \"test_validate_core_paths_success\": [\n        \"tests/behavior/test_config_coverage_expansion_phase3_simple.py\",\n        \"tests/unit/test_config.py\"\n      ],\n      \"undo_last_tag_delete\": [\n        \"ui/widgets/tag_widget.py\",\n        \"ui/widgets/task_settings_widget.py\"\n      ],\n      \"update_channel_preferences\": [\n        \"core/user_data_handlers.py\",\n        \"core/user_management.py\"\n      ],\n      \"update_preference\": [\n        \"user/user_context.py\",\n        \"user/user_preferences.py\"\n      ],\n      \"update_user_account\": [\n        \"core/user_data_handlers.py\",\n        \"core/user_management.py\"\n      ],\n      \"update_user_context\": [\n        \"core/user_data_handlers.py\",\n        \"core/user_management.py\"\n      ],\n      \"update_user_schedules\": [\n        \"core/user_data_handlers.py\",\n        \"core/user_management.py\"\n      ],\n      \"user_id\": [\n        \"tests/behavior/test_task_behavior.py\",\n        \"tests/behavior/test_task_management_coverage_expansion.py\",\n        \"tests/ui/test_ui_widgets_coverage_expansion.py\"\n      ],\n      \"validate_configuration\": [\n        \"core/service.py\",\n        \"ui/ui_app_qt.py\"\n      ],\n      \"warning\": [\n        \"core/file_auditor.py\",\n        \"core/logger.py\",\n        \"tests/conftest.py\"\n      ]\n    },\n    \"high_complexity\": [\n      {\n        \"complexity\": 1962,\n        \"file\": \"core/user_data_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"get_user_data\"\n      },\n      {\n        \"complexity\": 1102,\n        \"file\": \"communication/command_handlers/profile_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_show_profile\"\n      },\n      {\n        \"complexity\": 992,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_show_profile\"\n      },\n      {\n        \"complexity\": 986,\n        \"file\": \"ai/chatbot.py\",\n        \"has_docstring\": true,\n        \"name\": \"_get_contextual_fallback\"\n      },\n      {\n        \"complexity\": 929,\n        \"file\": \"communication/message_processing/interaction_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"handle_message\"\n      },\n      {\n        \"complexity\": 888,\n        \"file\": \"ai/chatbot.py\",\n        \"has_docstring\": true,\n        \"name\": \"_create_comprehensive_context_prompt\"\n      },\n      {\n        \"complexity\": 872,\n        \"file\": \"tests/conftest.py\",\n        \"has_docstring\": true,\n        \"name\": \"shim_get_user_data_to_invoke_loaders\"\n      },\n      {\n        \"complexity\": 815,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_update_profile\"\n      },\n      {\n        \"complexity\": 815,\n        \"file\": \"communication/command_handlers/profile_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_update_profile\"\n      },\n      {\n        \"complexity\": 810,\n        \"file\": \"communication/message_processing/command_parser.py\",\n        \"has_docstring\": true,\n        \"name\": \"_extract_entities_rule_based\"\n      },\n      {\n        \"complexity\": 808,\n        \"file\": \"communication/communication_channels/discord/bot.py\",\n        \"has_docstring\": true,\n        \"name\": \"initialize__register_events\"\n      },\n      {\n        \"complexity\": 742,\n        \"file\": \"core/user_data_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_save_user_data__save_single_type\"\n      },\n      {\n        \"complexity\": 721,\n        \"file\": \"communication/command_handlers/profile_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_format_profile_text\"\n      },\n      {\n        \"complexity\": 698,\n        \"file\": \"ai/chatbot.py\",\n        \"has_docstring\": true,\n        \"name\": \"generate_contextual_response\"\n      },\n      {\n        \"complexity\": 692,\n        \"file\": \"ui/ui_app_qt.py\",\n        \"has_docstring\": true,\n        \"name\": \"validate_configuration\"\n      },\n      {\n        \"complexity\": 683,\n        \"file\": \"tests/conftest.py\",\n        \"has_docstring\": true,\n        \"name\": \"setup_component_log_rotation\"\n      },\n      {\n        \"complexity\": 671,\n        \"file\": \"ui/widgets/user_profile_settings_widget.py\",\n        \"has_docstring\": true,\n        \"name\": \"load_existing_data\"\n      },\n      {\n        \"complexity\": 669,\n        \"file\": \"ui/widgets/user_profile_settings_widget.py\",\n        \"has_docstring\": true,\n        \"name\": \"__init__\"\n      },\n      {\n        \"complexity\": 668,\n        \"file\": \"communication/core/channel_orchestrator.py\",\n        \"has_docstring\": true,\n        \"name\": \"_send_predefined_message\"\n      },\n      {\n        \"complexity\": 651,\n        \"file\": \"ui/dialogs/account_creator_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"validate_input\"\n      },\n      {\n        \"complexity\": 614,\n        \"file\": \"ui/dialogs/task_edit_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"render_reminder_period_row\"\n      },\n      {\n        \"complexity\": 609,\n        \"file\": \"tests/conftest.py\",\n        \"has_docstring\": true,\n        \"name\": \"mock_user_data\"\n      },\n      {\n        \"complexity\": 605,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_show_schedule\"\n      },\n      {\n        \"complexity\": 605,\n        \"file\": \"communication/command_handlers/schedule_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_show_schedule\"\n      },\n      {\n        \"complexity\": 593,\n        \"file\": \"ai/chatbot.py\",\n        \"has_docstring\": true,\n        \"name\": \"generate_response\"\n      },\n      {\n        \"complexity\": 591,\n        \"file\": \"core/user_data_validation.py\",\n        \"has_docstring\": true,\n        \"name\": \"validate_user_update\"\n      },\n      {\n        \"complexity\": 584,\n        \"file\": \"ui/ui_app_qt.py\",\n        \"has_docstring\": true,\n        \"name\": \"system_health_check\"\n      },\n      {\n        \"complexity\": 577,\n        \"file\": \"tests/conftest.py\",\n        \"has_docstring\": false,\n        \"name\": \"_apply_get_user_data_shim_early\"\n      },\n      {\n        \"complexity\": 573,\n        \"file\": \"ui/ui_app_qt.py\",\n        \"has_docstring\": true,\n        \"name\": \"stop_service\"\n      },\n      {\n        \"complexity\": 567,\n        \"file\": \"ui/ui_app_qt.py\",\n        \"has_docstring\": true,\n        \"name\": \"refresh_user_list\"\n      },\n      {\n        \"complexity\": 565,\n        \"file\": \"run_tests.py\",\n        \"has_docstring\": false,\n        \"name\": \"main\"\n      },\n      {\n        \"complexity\": 557,\n        \"file\": \"core/schedule_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"get_schedule_time_periods\"\n      },\n      {\n        \"complexity\": 553,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_edit_schedule_period\"\n      },\n      {\n        \"complexity\": 553,\n        \"file\": \"communication/command_handlers/schedule_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_edit_schedule_period\"\n      },\n      {\n        \"complexity\": 529,\n        \"file\": \"ai/context_builder.py\",\n        \"has_docstring\": true,\n        \"name\": \"create_context_prompt\"\n      },\n      {\n        \"complexity\": 528,\n        \"file\": \"core/user_data_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"update_user_index\"\n      },\n      {\n        \"complexity\": 522,\n        \"file\": \"tests/conftest.py\",\n        \"has_docstring\": true,\n        \"name\": \"mock_user_data_with_messages\"\n      },\n      {\n        \"complexity\": 517,\n        \"file\": \"core/user_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"create_new_user\"\n      },\n      {\n        \"complexity\": 509,\n        \"file\": \"communication/communication_channels/discord/bot.py\",\n        \"has_docstring\": true,\n        \"name\": \"initialize__register_commands\"\n      },\n      {\n        \"complexity\": 489,\n        \"file\": \"core/user_data_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"rebuild_full_index\"\n      },\n      {\n        \"complexity\": 489,\n        \"file\": \"communication/command_handlers/analytics_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_checkin_analysis\"\n      },\n      {\n        \"complexity\": 486,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_create_task\"\n      },\n      {\n        \"complexity\": 476,\n        \"file\": \"core/service.py\",\n        \"has_docstring\": true,\n        \"name\": \"run_service_loop\"\n      },\n      {\n        \"complexity\": 463,\n        \"file\": \"core/scheduler.py\",\n        \"has_docstring\": true,\n        \"name\": \"schedule_all_users_immediately\"\n      },\n      {\n        \"complexity\": 454,\n        \"file\": \"core/service.py\",\n        \"has_docstring\": true,\n        \"name\": \"start\"\n      },\n      {\n        \"complexity\": 446,\n        \"file\": \"core/user_data_validation.py\",\n        \"has_docstring\": true,\n        \"name\": \"validate_schedule_periods\"\n      },\n      {\n        \"complexity\": 445,\n        \"file\": \"ui/dialogs/channel_management_dialog.py\",\n        \"has_docstring\": false,\n        \"name\": \"save_channel_settings\"\n      },\n      {\n        \"complexity\": 438,\n        \"file\": \"core/logger.py\",\n        \"has_docstring\": false,\n        \"name\": \"__init__\"\n      },\n      {\n        \"complexity\": 429,\n        \"file\": \"communication/command_handlers/analytics_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_task_analytics\"\n      },\n      {\n        \"complexity\": 422,\n        \"file\": \"core/scheduler.py\",\n        \"has_docstring\": true,\n        \"name\": \"schedule_message_at_random_time\"\n      },\n      {\n        \"complexity\": 421,\n        \"file\": \"ui/ui_app_qt.py\",\n        \"has_docstring\": true,\n        \"name\": \"connect_signals\"\n      },\n      {\n        \"complexity\": 419,\n        \"file\": \"core/logger.py\",\n        \"has_docstring\": true,\n        \"name\": \"get_component_logger\"\n      },\n      {\n        \"complexity\": 419,\n        \"file\": \"core/scheduler.py\",\n        \"has_docstring\": true,\n        \"name\": \"clear_all_accumulated_jobs\"\n      },\n      {\n        \"complexity\": 419,\n        \"file\": \"ui/dialogs/task_edit_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"load_task_data\"\n      },\n      {\n        \"complexity\": 405,\n        \"file\": \"tests/conftest.py\",\n        \"has_docstring\": false,\n        \"name\": \"wrapped_get_user_data\"\n      },\n      {\n        \"complexity\": 397,\n        \"file\": \"core/message_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"archive_old_messages\"\n      },\n      {\n        \"complexity\": 395,\n        \"file\": \"tasks/task_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"complete_task\"\n      },\n      {\n        \"complexity\": 394,\n        \"file\": \"ui/dialogs/category_management_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"save_category_settings\"\n      },\n      {\n        \"complexity\": 394,\n        \"file\": \"tasks/task_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"_create_next_recurring_task_instance\"\n      },\n      {\n        \"complexity\": 386,\n        \"file\": \"communication/message_processing/conversation_flow_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"_select_checkin_questions_with_weighting\"\n      },\n      {\n        \"complexity\": 381,\n        \"file\": \"core/checkin_analytics.py\",\n        \"has_docstring\": true,\n        \"name\": \"get_mood_trends\"\n      },\n      {\n        \"complexity\": 380,\n        \"file\": \"core/scheduler.py\",\n        \"has_docstring\": true,\n        \"name\": \"get_random_time_within_period\"\n      },\n      {\n        \"complexity\": 380,\n        \"file\": \"core/user_data_validation.py\",\n        \"has_docstring\": true,\n        \"name\": \"validate_new_user_data\"\n      },\n      {\n        \"complexity\": 380,\n        \"file\": \"ui/ui_app_qt.py\",\n        \"has_docstring\": true,\n        \"name\": \"view_all_users_summary\"\n      },\n      {\n        \"complexity\": 378,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_add_schedule_period\"\n      },\n      {\n        \"complexity\": 378,\n        \"file\": \"communication/command_handlers/schedule_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_add_schedule_period\"\n      },\n      {\n        \"complexity\": 376,\n        \"file\": \"ui/dialogs/task_edit_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"save_task\"\n      },\n      {\n        \"complexity\": 375,\n        \"file\": \"core/scheduler.py\",\n        \"has_docstring\": true,\n        \"name\": \"run_daily_scheduler\"\n      },\n      {\n        \"complexity\": 368,\n        \"file\": \"core/user_data_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"update_user_preferences\"\n      },\n      {\n        \"complexity\": 368,\n        \"file\": \"ui/ui_app_qt.py\",\n        \"has_docstring\": true,\n        \"name\": \"start_service\"\n      },\n      {\n        \"complexity\": 366,\n        \"file\": \"ui/dialogs/channel_management_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"__init__\"\n      },\n      {\n        \"complexity\": 365,\n        \"file\": \"core/logger.py\",\n        \"has_docstring\": true,\n        \"name\": \"_get_log_paths_for_environment\"\n      },\n      {\n        \"complexity\": 361,\n        \"file\": \"ui/dialogs/task_management_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"save_task_settings\"\n      },\n      {\n        \"complexity\": 360,\n        \"file\": \"communication/core/channel_orchestrator.py\",\n        \"has_docstring\": true,\n        \"name\": \"_initialize_channel_with_retry_sync\"\n      },\n      {\n        \"complexity\": 360,\n        \"file\": \"ai/context_builder.py\",\n        \"has_docstring\": true,\n        \"name\": \"analyze_context\"\n      },\n      {\n        \"complexity\": 359,\n        \"file\": \"core/scheduler.py\",\n        \"has_docstring\": true,\n        \"name\": \"schedule_message_for_period\"\n      },\n      {\n        \"complexity\": 358,\n        \"file\": \"communication/command_handlers/analytics_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_task_stats\"\n      },\n      {\n        \"complexity\": 357,\n        \"file\": \"communication/message_processing/command_parser.py\",\n        \"has_docstring\": true,\n        \"name\": \"_ai_enhanced_parse\"\n      },\n      {\n        \"complexity\": 350,\n        \"file\": \"communication/command_handlers/task_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_create_task\"\n      },\n      {\n        \"complexity\": 350,\n        \"file\": \"communication/core/channel_orchestrator.py\",\n        \"has_docstring\": true,\n        \"name\": \"send_message_sync\"\n      },\n      {\n        \"complexity\": 347,\n        \"file\": \"ui/dialogs/checkin_management_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"save_checkin_settings\"\n      },\n      {\n        \"complexity\": 347,\n        \"file\": \"ui/widgets/dynamic_list_field.py\",\n        \"has_docstring\": true,\n        \"name\": \"__init__\"\n      },\n      {\n        \"complexity\": 346,\n        \"file\": \"communication/message_processing/command_parser.py\",\n        \"has_docstring\": false,\n        \"name\": \"__init__\"\n      },\n      {\n        \"complexity\": 345,\n        \"file\": \"core/scheduler.py\",\n        \"has_docstring\": true,\n        \"name\": \"schedule_all_task_reminders\"\n      },\n      {\n        \"complexity\": 345,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_complete_task__find_task_by_identifier\"\n      },\n      {\n        \"complexity\": 341,\n        \"file\": \"core/logger.py\",\n        \"has_docstring\": true,\n        \"name\": \"doRollover\"\n      },\n      {\n        \"complexity\": 340,\n        \"file\": \"core/user_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"get_user_id_by_identifier\"\n      },\n      {\n        \"complexity\": 338,\n        \"file\": \"core/user_data_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_save_user_data__validate_data\"\n      },\n      {\n        \"complexity\": 335,\n        \"file\": \"ui/ui_app_qt.py\",\n        \"has_docstring\": true,\n        \"name\": \"edit_user_messages\"\n      },\n      {\n        \"complexity\": 334,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_task_stats\"\n      },\n      {\n        \"complexity\": 334,\n        \"file\": \"communication/command_handlers/task_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_task_stats\"\n      },\n      {\n        \"complexity\": 328,\n        \"file\": \"ui/dialogs/task_edit_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"collect_reminder_periods\"\n      },\n      {\n        \"complexity\": 327,\n        \"file\": \"core/file_operations.py\",\n        \"has_docstring\": true,\n        \"name\": \"load_json_data\"\n      },\n      {\n        \"complexity\": 327,\n        \"file\": \"core/scheduler.py\",\n        \"has_docstring\": true,\n        \"name\": \"schedule_daily_message_job\"\n      },\n      {\n        \"complexity\": 326,\n        \"file\": \"ui/dialogs/account_creator_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"setup_connections\"\n      },\n      {\n        \"complexity\": 325,\n        \"file\": \"core/user_data_validation.py\",\n        \"has_docstring\": true,\n        \"name\": \"validate_personalization_data\"\n      },\n      {\n        \"complexity\": 324,\n        \"file\": \"ui/widgets/tag_widget.py\",\n        \"has_docstring\": true,\n        \"name\": \"edit_tag\"\n      },\n      {\n        \"complexity\": 320,\n        \"file\": \"communication/communication_channels/discord/bot.py\",\n        \"has_docstring\": true,\n        \"name\": \"_create_discord_embed\"\n      },\n      {\n        \"complexity\": 318,\n        \"file\": \"core/user_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"_get_user_data__load_context\"\n      },\n      {\n        \"complexity\": 313,\n        \"file\": \"core/user_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"_get_user_data__load_account\"\n      },\n      {\n        \"complexity\": 312,\n        \"file\": \"core/message_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"create_message_file_from_defaults\"\n      },\n      {\n        \"complexity\": 312,\n        \"file\": \"core/scheduler.py\",\n        \"has_docstring\": false,\n        \"name\": \"scheduler_loop\"\n      },\n      {\n        \"complexity\": 311,\n        \"file\": \"tests/unit/test_cleanup.py\",\n        \"has_docstring\": true,\n        \"name\": \"main\"\n      },\n      {\n        \"complexity\": 309,\n        \"file\": \"ui/widgets/dynamic_list_container.py\",\n        \"has_docstring\": true,\n        \"name\": \"__init__\"\n      },\n      {\n        \"complexity\": 307,\n        \"file\": \"core/message_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"get_recent_messages\"\n      },\n      {\n        \"complexity\": 306,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_delete_task__find_task_by_identifier\"\n      },\n      {\n        \"complexity\": 306,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_update_task__find_task_by_identifier\"\n      },\n      {\n        \"complexity\": 306,\n        \"file\": \"communication/command_handlers/task_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_complete_task__find_task_by_identifier\"\n      },\n      {\n        \"complexity\": 306,\n        \"file\": \"communication/command_handlers/task_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_delete_task__find_task_by_identifier\"\n      },\n      {\n        \"complexity\": 306,\n        \"file\": \"communication/command_handlers/task_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_update_task__find_task_by_identifier\"\n      },\n      {\n        \"complexity\": 306,\n        \"file\": \"ui/dialogs/user_profile_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"add_loved_one_widget\"\n      },\n      {\n        \"complexity\": 304,\n        \"file\": \"core/config.py\",\n        \"has_docstring\": true,\n        \"name\": \"validate_logging_configuration\"\n      },\n      {\n        \"complexity\": 304,\n        \"file\": \"core/logger.py\",\n        \"has_docstring\": true,\n        \"name\": \"compress_old_logs\"\n      },\n      {\n        \"complexity\": 304,\n        \"file\": \"core/message_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"ensure_user_message_files\"\n      },\n      {\n        \"complexity\": 304,\n        \"file\": \"ui/widgets/period_row_widget.py\",\n        \"has_docstring\": true,\n        \"name\": \"__init__\"\n      },\n      {\n        \"complexity\": 304,\n        \"file\": \"tests/conftest.py\",\n        \"has_docstring\": true,\n        \"name\": \"enforce_user_dir_locations\"\n      },\n      {\n        \"complexity\": 303,\n        \"file\": \"core/logger.py\",\n        \"has_docstring\": true,\n        \"name\": \"get_log_file_info\"\n      },\n      {\n        \"complexity\": 303,\n        \"file\": \"ui/dialogs/user_profile_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"create_custom_field_list\"\n      },\n      {\n        \"complexity\": 303,\n        \"file\": \"tasks/task_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"update_task\"\n      },\n      {\n        \"complexity\": 302,\n        \"file\": \"core/scheduler.py\",\n        \"has_docstring\": true,\n        \"name\": \"schedule_checkin_at_exact_time\"\n      },\n      {\n        \"complexity\": 301,\n        \"file\": \"core/checkin_analytics.py\",\n        \"has_docstring\": true,\n        \"name\": \"get_sleep_analysis\"\n      },\n      {\n        \"complexity\": 301,\n        \"file\": \"communication/message_processing/conversation_flow_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_command_during_checkin\"\n      },\n      {\n        \"complexity\": 300,\n        \"file\": \"tasks/task_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"create_task\"\n      },\n      {\n        \"complexity\": 298,\n        \"file\": \"ui/widgets/tag_widget.py\",\n        \"has_docstring\": true,\n        \"name\": \"delete_tag\"\n      },\n      {\n        \"complexity\": 297,\n        \"file\": \"core/scheduler.py\",\n        \"has_docstring\": true,\n        \"name\": \"schedule_task_reminder_at_time\"\n      },\n      {\n        \"complexity\": 297,\n        \"file\": \"core/user_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"ensure_category_has_default_schedule\"\n      },\n      {\n        \"complexity\": 297,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_status\"\n      },\n      {\n        \"complexity\": 297,\n        \"file\": \"ui/ui_app_qt.py\",\n        \"has_docstring\": true,\n        \"name\": \"view_cache_status\"\n      },\n      {\n        \"complexity\": 295,\n        \"file\": \"communication/message_processing/interaction_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"_enhance_response_with_ai\"\n      },\n      {\n        \"complexity\": 294,\n        \"file\": \"core/user_data_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"remove_from_index\"\n      },\n      {\n        \"complexity\": 294,\n        \"file\": \"ui/dialogs/task_management_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"__init__\"\n      },\n      {\n        \"complexity\": 292,\n        \"file\": \"core/logger.py\",\n        \"has_docstring\": true,\n        \"name\": \"cleanup_old_logs\"\n      },\n      {\n        \"complexity\": 291,\n        \"file\": \"core/backup_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"_cleanup_old_backups\"\n      },\n      {\n        \"complexity\": 290,\n        \"file\": \"communication/core/channel_orchestrator.py\",\n        \"has_docstring\": true,\n        \"name\": \"handle_task_reminder\"\n      },\n      {\n        \"complexity\": 289,\n        \"file\": \"core/checkin_analytics.py\",\n        \"has_docstring\": true,\n        \"name\": \"get_quantitative_summaries\"\n      },\n      {\n        \"complexity\": 289,\n        \"file\": \"ui/widgets/tag_widget.py\",\n        \"has_docstring\": true,\n        \"name\": \"add_tag\"\n      },\n      {\n        \"complexity\": 288,\n        \"file\": \"ui/widgets/user_profile_settings_widget.py\",\n        \"has_docstring\": true,\n        \"name\": \"set_checkbox_group\"\n      },\n      {\n        \"complexity\": 287,\n        \"file\": \"core/user_data_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"export_user_data\"\n      },\n      {\n        \"complexity\": 286,\n        \"file\": \"tests/behavior/test_account_management_real_behavior.py\",\n        \"has_docstring\": true,\n        \"name\": \"main\"\n      },\n      {\n        \"complexity\": 285,\n        \"file\": \"core/file_operations.py\",\n        \"has_docstring\": true,\n        \"name\": \"determine_file_path\"\n      },\n      {\n        \"complexity\": 285,\n        \"file\": \"communication/command_handlers/analytics_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_show_analytics\"\n      },\n      {\n        \"complexity\": 285,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_show_analytics\"\n      },\n      {\n        \"complexity\": 285,\n        \"file\": \"tests/conftest.py\",\n        \"has_docstring\": false,\n        \"name\": \"wrapped_get_user_data\"\n      },\n      {\n        \"complexity\": 284,\n        \"file\": \"tests/conftest.py\",\n        \"has_docstring\": true,\n        \"name\": \"materialize_user_minimal_via_public_apis\"\n      },\n      {\n        \"complexity\": 281,\n        \"file\": \"core/scheduler.py\",\n        \"has_docstring\": true,\n        \"name\": \"schedule_new_user\"\n      },\n      {\n        \"complexity\": 280,\n        \"file\": \"communication/communication_channels/discord/bot.py\",\n        \"has_docstring\": true,\n        \"name\": \"_check_dns_resolution\"\n      },\n      {\n        \"complexity\": 279,\n        \"file\": \"core/message_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"store_sent_message\"\n      },\n      {\n        \"complexity\": 279,\n        \"file\": \"core/user_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"_get_user_data__load_preferences\"\n      },\n      {\n        \"complexity\": 278,\n        \"file\": \"core/checkin_dynamic_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"validate_answer\"\n      },\n      {\n        \"complexity\": 276,\n        \"file\": \"core/error_handling.py\",\n        \"has_docstring\": true,\n        \"name\": \"handle_error\"\n      },\n      {\n        \"complexity\": 276,\n        \"file\": \"tests/integration/test_account_lifecycle.py\",\n        \"has_docstring\": true,\n        \"name\": \"_materialize_and_verify\"\n      },\n      {\n        \"complexity\": 273,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_complete_task\"\n      },\n      {\n        \"complexity\": 271,\n        \"file\": \"ai/conversation_history.py\",\n        \"has_docstring\": true,\n        \"name\": \"get_conversation_summary\"\n      },\n      {\n        \"complexity\": 270,\n        \"file\": \"core/config.py\",\n        \"has_docstring\": true,\n        \"name\": \"validate_core_paths\"\n      },\n      {\n        \"complexity\": 270,\n        \"file\": \"core/schedule_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"set_schedule_periods\"\n      },\n      {\n        \"complexity\": 267,\n        \"file\": \"communication/command_handlers/analytics_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_checkin_history\"\n      },\n      {\n        \"complexity\": 265,\n        \"file\": \"ui/widgets/dynamic_list_container.py\",\n        \"has_docstring\": false,\n        \"name\": \"_deduplicate_values\"\n      },\n      {\n        \"complexity\": 265,\n        \"file\": \"ui/widgets/period_row_widget.py\",\n        \"has_docstring\": true,\n        \"name\": \"load_period_data\"\n      },\n      {\n        \"complexity\": 264,\n        \"file\": \"core/user_data_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"get_user_analytics_summary\"\n      },\n      {\n        \"complexity\": 264,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_list_tasks__format_list\"\n      },\n      {\n        \"complexity\": 263,\n        \"file\": \"core/config.py\",\n        \"has_docstring\": true,\n        \"name\": \"print_configuration_report\"\n      },\n      {\n        \"complexity\": 261,\n        \"file\": \"user/context_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"_get_conversation_insights\"\n      },\n      {\n        \"complexity\": 260,\n        \"file\": \"ui/dialogs/task_crud_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"refresh_active_tasks\"\n      },\n      {\n        \"complexity\": 258,\n        \"file\": \"tests/test_utilities.py\",\n        \"has_docstring\": true,\n        \"name\": \"create_corrupted_user_data\"\n      },\n      {\n        \"complexity\": 258,\n        \"file\": \"run_tests.py\",\n        \"has_docstring\": true,\n        \"name\": \"run_command\"\n      },\n      {\n        \"complexity\": 255,\n        \"file\": \"communication/command_handlers/analytics_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_habit_analysis\"\n      },\n      {\n        \"complexity\": 255,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_habit_analysis\"\n      },\n      {\n        \"complexity\": 254,\n        \"file\": \"core/user_data_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"backup_user_data\"\n      },\n      {\n        \"complexity\": 253,\n        \"file\": \"core/user_data_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"get_user_summary\"\n      },\n      {\n        \"complexity\": 252,\n        \"file\": \"communication/communication_channels/base/rich_formatter.py\",\n        \"has_docstring\": true,\n        \"name\": \"create_embed\"\n      },\n      {\n        \"complexity\": 251,\n        \"file\": \"core/user_data_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"_get_last_interaction\"\n      },\n      {\n        \"complexity\": 248,\n        \"file\": \"core/schedule_utilities.py\",\n        \"has_docstring\": true,\n        \"name\": \"is_schedule_active\"\n      },\n      {\n        \"complexity\": 248,\n        \"file\": \"core/user_data_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"update_message_references\"\n      },\n      {\n        \"complexity\": 247,\n        \"file\": \"core/file_operations.py\",\n        \"has_docstring\": true,\n        \"name\": \"_create_user_files__schedules_file\"\n      },\n      {\n        \"complexity\": 247,\n        \"file\": \"core/user_data_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"save_user_data\"\n      },\n      {\n        \"complexity\": 247,\n        \"file\": \"tasks/task_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"schedule_task_reminders\"\n      },\n      {\n        \"complexity\": 246,\n        \"file\": \"communication/command_handlers/analytics_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_quant_summary\"\n      },\n      {\n        \"complexity\": 246,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_quant_summary\"\n      },\n      {\n        \"complexity\": 246,\n        \"file\": \"ui/widgets/dynamic_list_container.py\",\n        \"has_docstring\": false,\n        \"name\": \"set_values\"\n      },\n      {\n        \"complexity\": 244,\n        \"file\": \"core/message_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"load_default_messages\"\n      },\n      {\n        \"complexity\": 244,\n        \"file\": \"ui/dialogs/task_completion_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"setup_completion_time_components\"\n      },\n      {\n        \"complexity\": 243,\n        \"file\": \"communication/core/channel_orchestrator.py\",\n        \"has_docstring\": true,\n        \"name\": \"handle_message_sending\"\n      },\n      {\n        \"complexity\": 241,\n        \"file\": \"ui/dialogs/checkin_management_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"__init__\"\n      },\n      {\n        \"complexity\": 240,\n        \"file\": \"core/config.py\",\n        \"has_docstring\": true,\n        \"name\": \"validate_all_configuration\"\n      },\n      {\n        \"complexity\": 240,\n        \"file\": \"communication/command_handlers/analytics_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_mood_trends\"\n      },\n      {\n        \"complexity\": 240,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_mood_trends\"\n      },\n      {\n        \"complexity\": 240,\n        \"file\": \"user/context_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"_get_recent_activity\"\n      },\n      {\n        \"complexity\": 238,\n        \"file\": \"ui/widgets/period_row_widget.py\",\n        \"has_docstring\": true,\n        \"name\": \"setup_functionality\"\n      },\n      {\n        \"complexity\": 237,\n        \"file\": \"core/file_operations.py\",\n        \"has_docstring\": true,\n        \"name\": \"save_json_data\"\n      },\n      {\n        \"complexity\": 237,\n        \"file\": \"ui/dialogs/task_crud_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"refresh_completed_tasks\"\n      },\n      {\n        \"complexity\": 235,\n        \"file\": \"core/schedule_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"get_current_time_periods_with_validation\"\n      },\n      {\n        \"complexity\": 235,\n        \"file\": \"communication/command_handlers/analytics_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_wellness_score\"\n      },\n      {\n        \"complexity\": 235,\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_wellness_score\"\n      },\n      {\n        \"complexity\": 234,\n        \"file\": \"communication/command_handlers/task_handler.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_list_tasks__format_list\"\n      },\n      {\n        \"complexity\": 231,\n        \"file\": \"core/service_utilities.py\",\n        \"has_docstring\": true,\n        \"name\": \"create_reschedule_request\"\n      },\n      {\n        \"complexity\": 231,\n        \"file\": \"run_mhm.py\",\n        \"has_docstring\": true,\n        \"name\": \"main\"\n      },\n      {\n        \"complexity\": 230,\n        \"file\": \"communication/message_processing/conversation_flow_manager.py\",\n        \"has_docstring\": true,\n        \"name\": \"_handle_checkin\"\n      },\n      {\n        \"complexity\": 230,\n        \"file\": \"ui/dialogs/task_crud_dialog.py\",\n        \"has_docstring\": true,\n        \"name\": \"setup_ui\"\n      },\n      {\n        \"complexity\": 229,\n        \"file\": \"core/user_data_validation.py\",\n        \"has_docstring\": true,\n        \"name\": \"_shared__title_case\"\n      },\n      {\n        \"complexity\": 229,\n        \"file\": \"tasks/task_management.py\",\n        \"has_docstring\": true,\n        \"name\": \"restore_task\"\n      }\n    ],\n    \"high_complexity_total\": 1008,\n    \"undocumented_handlers\": [\n      {\n        \"file\": \"communication/command_handlers/analytics_handler.py\",\n        \"name\": \"can_handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/analytics_handler.py\",\n        \"name\": \"get_examples\"\n      },\n      {\n        \"file\": \"communication/command_handlers/analytics_handler.py\",\n        \"name\": \"get_help\"\n      },\n      {\n        \"file\": \"communication/command_handlers/analytics_handler.py\",\n        \"name\": \"handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/checkin_handler.py\",\n        \"name\": \"can_handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/checkin_handler.py\",\n        \"name\": \"get_examples\"\n      },\n      {\n        \"file\": \"communication/command_handlers/checkin_handler.py\",\n        \"name\": \"get_help\"\n      },\n      {\n        \"file\": \"communication/command_handlers/checkin_handler.py\",\n        \"name\": \"handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"can_handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"can_handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"can_handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"can_handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"can_handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"can_handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"get_examples\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"get_examples\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"get_examples\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"get_examples\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"get_examples\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"get_examples\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"get_help\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"get_help\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"get_help\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"get_help\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"get_help\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"get_help\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/interaction_handlers.py\",\n        \"name\": \"handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/profile_handler.py\",\n        \"name\": \"can_handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/profile_handler.py\",\n        \"name\": \"get_examples\"\n      },\n      {\n        \"file\": \"communication/command_handlers/profile_handler.py\",\n        \"name\": \"get_help\"\n      },\n      {\n        \"file\": \"communication/command_handlers/profile_handler.py\",\n        \"name\": \"handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/schedule_handler.py\",\n        \"name\": \"can_handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/schedule_handler.py\",\n        \"name\": \"get_examples\"\n      },\n      {\n        \"file\": \"communication/command_handlers/schedule_handler.py\",\n        \"name\": \"get_help\"\n      },\n      {\n        \"file\": \"communication/command_handlers/schedule_handler.py\",\n        \"name\": \"handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/task_handler.py\",\n        \"name\": \"can_handle\"\n      },\n      {\n        \"file\": \"communication/command_handlers/task_handler.py\",\n        \"name\": \"get_examples\"\n      },\n      {\n        \"file\": \"communication/command_handlers/task_handler.py\",\n        \"name\": \"get_help\"\n      },\n      {\n        \"file\": \"communication/command_handlers/task_handler.py\",\n        \"name\": \"handle\"\n      },\n      {\n        \"file\": \"core/schemas.py\",\n        \"name\": \"_validate_discord_id\"\n      },\n      {\n        \"file\": \"core/schemas.py\",\n        \"name\": \"_validate_email\"\n      },\n      {\n        \"file\": \"core/schemas.py\",\n        \"name\": \"_validate_timezone\"\n      },\n      {\n        \"file\": \"core/schemas.py\",\n        \"name\": \"validate_account_dict\"\n      },\n      {\n        \"file\": \"core/schemas.py\",\n        \"name\": \"validate_messages_file_dict\"\n      },\n      {\n        \"file\": \"core/schemas.py\",\n        \"name\": \"validate_preferences_dict\"\n      },\n      {\n        \"file\": \"core/schemas.py\",\n        \"name\": \"validate_schedules_dict\"\n      },\n      {\n        \"file\": \"core/user_data_validation.py\",\n        \"name\": \"validate_schedule_periods__validate_time_format\"\n      },\n      {\n        \"file\": \"core/user_management.py\",\n        \"name\": \"_ensure_default_loaders_once\"\n      },\n      {\n        \"file\": \"tests/behavior/test_interaction_handlers_coverage_expansion.py\",\n        \"name\": \"_mock_get_user_data\"\n      },\n      {\n        \"file\": \"tests/behavior/test_interaction_handlers_coverage_expansion.py\",\n        \"name\": \"get_checkin_history\"\n      },\n      {\n        \"file\": \"tests/behavior/test_interaction_handlers_coverage_expansion.py\",\n        \"name\": \"get_mood_trends\"\n      },\n      {\n        \"file\": \"tests/behavior/test_logger_coverage_expansion.py\",\n        \"name\": \"create_record\"\n      },\n      {\n        \"file\": \"tests/behavior/test_service_behavior.py\",\n        \"name\": \"mock_get_user_data_side_effect\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"_apply_get_user_data_shim_early\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"_load_single_type\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"_load_single_type\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"_update_index\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"verify_user_data_loader_registry\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"wrapped_get_user_data\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"wrapped_get_user_data\"\n      },\n      {\n        \"file\": \"tests/ui/test_dialogs.py\",\n        \"name\": \"mock_save\"\n      },\n      {\n        \"file\": \"tests/ui/test_ui_widgets_coverage_expansion.py\",\n        \"name\": \"on_delete_requested\"\n      },\n      {\n        \"file\": \"tests/unit/test_user_data_loader_order_insensitivity.py\",\n        \"name\": \"_reload_in_order\"\n      },\n      {\n        \"file\": \"ui/dialogs/account_creator_dialog.py\",\n        \"name\": \"on_personalization_save\"\n      },\n      {\n        \"file\": \"ui/dialogs/category_management_dialog.py\",\n        \"name\": \"get_selected_categories\"\n      },\n      {\n        \"file\": \"ui/dialogs/category_management_dialog.py\",\n        \"name\": \"set_selected_categories\"\n      },\n      {\n        \"file\": \"ui/dialogs/channel_management_dialog.py\",\n        \"name\": \"get_selected_channel\"\n      },\n      {\n        \"file\": \"ui/dialogs/channel_management_dialog.py\",\n        \"name\": \"save_channel_settings\"\n      },\n      {\n        \"file\": \"ui/dialogs/channel_management_dialog.py\",\n        \"name\": \"set_selected_channel\"\n      },\n      {\n        \"file\": \"ui/dialogs/checkin_management_dialog.py\",\n        \"name\": \"on_enable_checkins_toggled\"\n      },\n      {\n        \"file\": \"ui/dialogs/task_management_dialog.py\",\n        \"name\": \"get_statistics\"\n      },\n      {\n        \"file\": \"ui/dialogs/task_management_dialog.py\",\n        \"name\": \"on_enable_task_management_toggled\"\n      },\n      {\n        \"file\": \"ui/generated/account_creator_dialog_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/admin_panel_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/category_management_dialog_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/category_selection_widget_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/channel_management_dialog_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/channel_selection_widget_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/checkin_element_template_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/checkin_management_dialog_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/checkin_settings_widget_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/dynamic_list_field_template_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/period_row_template_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/schedule_editor_dialog_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/tag_widget_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/task_completion_dialog_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/task_crud_dialog_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/task_edit_dialog_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/task_management_dialog_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/task_settings_widget_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/user_profile_management_dialog_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/generated/user_profile_settings_widget_pyqt.py\",\n        \"name\": \"setupUi\"\n      },\n      {\n        \"file\": \"ui/ui_app_qt.py\",\n        \"name\": \"manage_categories\"\n      },\n      {\n        \"file\": \"ui/ui_app_qt.py\",\n        \"name\": \"manage_checkins\"\n      },\n      {\n        \"file\": \"ui/ui_app_qt.py\",\n        \"name\": \"manage_communication_settings\"\n      },\n      {\n        \"file\": \"ui/ui_app_qt.py\",\n        \"name\": \"manage_personalization\"\n      },\n      {\n        \"file\": \"ui/ui_app_qt.py\",\n        \"name\": \"manage_task_crud\"\n      },\n      {\n        \"file\": \"ui/ui_app_qt.py\",\n        \"name\": \"manage_tasks\"\n      },\n      {\n        \"file\": \"ui/ui_app_qt.py\",\n        \"name\": \"on_save\"\n      },\n      {\n        \"file\": \"ui/widgets/category_selection_widget.py\",\n        \"name\": \"get_selected_categories\"\n      },\n      {\n        \"file\": \"ui/widgets/category_selection_widget.py\",\n        \"name\": \"set_selected_categories\"\n      },\n      {\n        \"file\": \"ui/widgets/channel_selection_widget.py\",\n        \"name\": \"get_selected_channel\"\n      },\n      {\n        \"file\": \"ui/widgets/channel_selection_widget.py\",\n        \"name\": \"set_contact_info\"\n      },\n      {\n        \"file\": \"ui/widgets/channel_selection_widget.py\",\n        \"name\": \"set_selected_channel\"\n      },\n      {\n        \"file\": \"ui/widgets/dynamic_list_container.py\",\n        \"name\": \"_on_preset_toggled\"\n      },\n      {\n        \"file\": \"ui/widgets/dynamic_list_container.py\",\n        \"name\": \"_on_row_deleted\"\n      },\n      {\n        \"file\": \"ui/widgets/dynamic_list_container.py\",\n        \"name\": \"get_values\"\n      },\n      {\n        \"file\": \"ui/widgets/dynamic_list_container.py\",\n        \"name\": \"set_values\"\n      },\n      {\n        \"file\": \"ui/widgets/dynamic_list_field.py\",\n        \"name\": \"_on_delete\"\n      },\n      {\n        \"file\": \"ui/widgets/dynamic_list_field.py\",\n        \"name\": \"get_text\"\n      },\n      {\n        \"file\": \"ui/widgets/dynamic_list_field.py\",\n        \"name\": \"is_checked\"\n      },\n      {\n        \"file\": \"ui/widgets/dynamic_list_field.py\",\n        \"name\": \"set_checked\"\n      },\n      {\n        \"file\": \"ui/widgets/dynamic_list_field.py\",\n        \"name\": \"set_text\"\n      },\n      {\n        \"file\": \"ui/widgets/task_settings_widget.py\",\n        \"name\": \"load_existing_data\"\n      }\n    ],\n    \"undocumented_handlers_total\": 119,\n    \"undocumented_other\": [\n      {\n        \"file\": \"communication/message_processing/command_parser.py\",\n        \"name\": \"__init__\"\n      },\n      {\n        \"file\": \"communication/message_processing/conversation_flow_manager.py\",\n        \"name\": \"start_analytics_flow\"\n      },\n      {\n        \"file\": \"communication/message_processing/conversation_flow_manager.py\",\n        \"name\": \"start_messages_flow\"\n      },\n      {\n        \"file\": \"communication/message_processing/conversation_flow_manager.py\",\n        \"name\": \"start_profile_flow\"\n      },\n      {\n        \"file\": \"communication/message_processing/conversation_flow_manager.py\",\n        \"name\": \"start_schedule_flow\"\n      },\n      {\n        \"file\": \"communication/message_processing/interaction_manager.py\",\n        \"name\": \"__init__\"\n      },\n      {\n        \"file\": \"core/error_handling.py\",\n        \"name\": \"decorator\"\n      },\n      {\n        \"file\": \"core/error_handling.py\",\n        \"name\": \"wrapper\"\n      },\n      {\n        \"file\": \"core/file_auditor.py\",\n        \"name\": \"__init__\"\n      },\n      {\n        \"file\": \"core/file_auditor.py\",\n        \"name\": \"_classify_path\"\n      },\n      {\n        \"file\": \"core/file_auditor.py\",\n        \"name\": \"_split_env_list\"\n      },\n      {\n        \"file\": \"core/file_auditor.py\",\n        \"name\": \"critical\"\n      },\n      {\n        \"file\": \"core/file_auditor.py\",\n        \"name\": \"debug\"\n      },\n      {\n        \"file\": \"core/file_auditor.py\",\n        \"name\": \"error\"\n      },\n      {\n        \"file\": \"core/file_auditor.py\",\n        \"name\": \"info\"\n      },\n      {\n        \"file\": \"core/file_auditor.py\",\n        \"name\": \"start_auditor\"\n      },\n      {\n        \"file\": \"core/file_auditor.py\",\n        \"name\": \"stop_auditor\"\n      },\n      {\n        \"file\": \"core/file_auditor.py\",\n        \"name\": \"warning\"\n      },\n      {\n        \"file\": \"core/logger.py\",\n        \"name\": \"__init__\"\n      },\n      {\n        \"file\": \"core/logger.py\",\n        \"name\": \"__init__\"\n      },\n      {\n        \"file\": \"core/logger.py\",\n        \"name\": \"__init__\"\n      },\n      {\n        \"file\": \"core/logger.py\",\n        \"name\": \"__init__\"\n      },\n      {\n        \"file\": \"core/logger.py\",\n        \"name\": \"__init__\"\n      },\n      {\n        \"file\": \"core/logger.py\",\n        \"name\": \"__init__\"\n      },\n      {\n        \"file\": \"core/logger.py\",\n        \"name\": \"critical\"\n      },\n      {\n        \"file\": \"core/logger.py\",\n        \"name\": \"debug\"\n      },\n      {\n        \"file\": \"core/logger.py\",\n        \"name\": \"error\"\n      },\n      {\n        \"file\": \"core/logger.py\",\n        \"name\": \"filter\"\n      },\n      {\n        \"file\": \"core/logger.py\",\n        \"name\": \"filter\"\n      },\n      {\n        \"file\": \"core/logger.py\",\n        \"name\": \"format\"\n      },\n      {\n        \"file\": \"core/logger.py\",\n        \"name\": \"info\"\n      },\n      {\n        \"file\": \"core/logger.py\",\n        \"name\": \"warning\"\n      },\n      {\n        \"file\": \"core/schedule_management.py\",\n        \"name\": \"add_schedule_period\"\n      },\n      {\n        \"file\": \"core/schedule_management.py\",\n        \"name\": \"edit_schedule_period\"\n      },\n      {\n        \"file\": \"core/schedule_management.py\",\n        \"name\": \"sort_key\"\n      },\n      {\n        \"file\": \"core/scheduler.py\",\n        \"name\": \"scheduler_loop\"\n      },\n      {\n        \"file\": \"core/schemas.py\",\n        \"name\": \"_accept_legacy_shape\"\n      },\n      {\n        \"file\": \"core/schemas.py\",\n        \"name\": \"_coerce_bool\"\n      },\n      {\n        \"file\": \"core/schemas.py\",\n        \"name\": \"_normalize_contact\"\n      },\n      {\n        \"file\": \"core/schemas.py\",\n        \"name\": \"_normalize_days\"\n      },\n      {\n        \"file\": \"core/schemas.py\",\n        \"name\": \"_normalize_flags\"\n      },\n      {\n        \"file\": \"core/schemas.py\",\n        \"name\": \"_normalize_periods\"\n      },\n      {\n        \"file\": \"core/schemas.py\",\n        \"name\": \"_valid_days\"\n      },\n      {\n        \"file\": \"core/schemas.py\",\n        \"name\": \"_valid_time\"\n      },\n      {\n        \"file\": \"core/schemas.py\",\n        \"name\": \"to_dict\"\n      },\n      {\n        \"file\": \"core/user_data_validation.py\",\n        \"name\": \"is_valid_email\"\n      },\n      {\n        \"file\": \"core/user_data_validation.py\",\n        \"name\": \"is_valid_phone\"\n      },\n      {\n        \"file\": \"tests/behavior/test_ai_chatbot_behavior.py\",\n        \"name\": \"generate_response\"\n      },\n      {\n        \"file\": \"tests/behavior/test_ai_context_builder_behavior.py\",\n        \"name\": \"build_context\"\n      },\n      {\n        \"file\": \"tests/behavior/test_ai_conversation_history_behavior.py\",\n        \"name\": \"add_message\"\n      },\n      {\n        \"file\": \"tests/behavior/test_auto_cleanup_behavior.py\",\n        \"name\": \"mock_exists_with_changes\"\n      },\n      {\n        \"file\": \"tests/behavior/test_auto_cleanup_behavior.py\",\n        \"name\": \"mock_walk_with_error\"\n      },\n      {\n        \"file\": \"tests/behavior/test_backup_manager_behavior.py\",\n        \"name\": \"failing_operation\"\n      },\n      {\n        \"file\": \"tests/behavior/test_communication_factory_coverage_expansion.py\",\n        \"name\": \"__init__\"\n      },\n      {\n        \"file\": \"tests/behavior/test_communication_factory_coverage_expansion.py\",\n        \"name\": \"__init__\"\n      },\n      {\n        \"file\": \"tests/behavior/test_communication_factory_coverage_expansion.py\",\n        \"name\": \"channel_type\"\n      },\n      {\n        \"file\": \"tests/behavior/test_communication_factory_coverage_expansion.py\",\n        \"name\": \"channel_type\"\n      },\n      {\n        \"file\": \"tests/behavior/test_core_service_coverage_expansion.py\",\n        \"name\": \"mock_remove_with_disappearing_files\"\n      },\n      {\n        \"file\": \"tests/behavior/test_core_service_coverage_expansion.py\",\n        \"name\": \"mock_remove_with_partial_failure\"\n      },\n      {\n        \"file\": \"tests/behavior/test_email_bot_behavior.py\",\n        \"name\": \"send_email\"\n      },\n      {\n        \"file\": \"tests/behavior/test_enhanced_command_parser_behavior.py\",\n        \"name\": \"parse_command\"\n      },\n      {\n        \"file\": \"tests/behavior/test_error_handling_coverage_expansion_phase3_final.py\",\n        \"name\": \"inner_function\"\n      },\n      {\n        \"file\": \"tests/behavior/test_error_handling_coverage_expansion_phase3_final.py\",\n        \"name\": \"outer_function\"\n      },\n      {\n        \"file\": \"tests/behavior/test_logger_coverage_expansion.py\",\n        \"name\": \"log_messages\"\n      },\n      {\n        \"file\": \"tests/behavior/test_logger_coverage_expansion.py\",\n        \"name\": \"log_messages\"\n      },\n      {\n        \"file\": \"tests/behavior/test_logger_coverage_expansion.py\",\n        \"name\": \"log_messages\"\n      },\n      {\n        \"file\": \"tests/behavior/test_logger_coverage_expansion.py\",\n        \"name\": \"write_logs\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"mock_path\"\n      },\n      {\n        \"file\": \"tests/behavior/test_user_management_coverage_expansion.py\",\n        \"name\": \"user_operation\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"__init__\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"__init__\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"_helper\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"_missing_keys\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"about\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"critical\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"format\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"information\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"question\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"toggle_data_shim_per_marker\"\n      },\n      {\n        \"file\": \"tests/conftest.py\",\n        \"name\": \"warning\"\n      },\n      {\n        \"file\": \"tests/integration/test_account_lifecycle.py\",\n        \"name\": \"_ensure_minimal_structure\"\n      },\n      {\n        \"file\": \"tests/test_isolation.py\",\n        \"name\": \"__enter__\"\n      },\n      {\n        \"file\": \"tests/test_isolation.py\",\n        \"name\": \"__exit__\"\n      },\n      {\n        \"file\": \"tests/test_isolation.py\",\n        \"name\": \"__init__\"\n      },\n      {\n        \"file\": \"tests/ui/test_account_creation_ui.py\",\n        \"name\": \"mock_accept_impl\"\n      },\n      {\n        \"file\": \"tests/ui/test_ui_widgets_coverage_expansion.py\",\n        \"name\": \"on_tags_changed\"\n      },\n      {\n        \"file\": \"tests/ui/test_ui_widgets_coverage_expansion.py\",\n        \"name\": \"on_values_changed\"\n      },\n      {\n        \"file\": \"tests/unit/test_error_handling.py\",\n        \"name\": \"backup_function\"\n      },\n      {\n        \"file\": \"tests/unit/test_error_handling.py\",\n        \"name\": \"cleanup_function\"\n      },\n      {\n        \"file\": \"tests/unit/test_error_handling.py\",\n        \"name\": \"corrupt_data_function\"\n      },\n      {\n        \"file\": \"tests/unit/test_error_handling.py\",\n        \"name\": \"inner_function\"\n      },\n      {\n        \"file\": \"tests/unit/test_error_handling.py\",\n        \"name\": \"inner_function\"\n      },\n      {\n        \"file\": \"tests/unit/test_error_handling.py\",\n        \"name\": \"outer_function\"\n      },\n      {\n        \"file\": \"tests/unit/test_error_handling.py\",\n        \"name\": \"outer_function\"\n      },\n      {\n        \"file\": \"tests/unit/test_error_handling.py\",\n        \"name\": \"recover_data_function\"\n      },\n      {\n        \"file\": \"tests/unit/test_error_handling.py\",\n        \"name\": \"state_validation_function\"\n      },\n      {\n        \"file\": \"ui/dialogs/schedule_editor_dialog.py\",\n        \"name\": \"sort_key\"\n      },\n      {\n        \"file\": \"ui/generated/account_creator_dialog_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/admin_panel_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/category_management_dialog_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/category_selection_widget_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/channel_management_dialog_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/channel_selection_widget_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/checkin_element_template_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/checkin_management_dialog_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/checkin_settings_widget_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/dynamic_list_field_template_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/period_row_template_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/schedule_editor_dialog_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/tag_widget_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/task_completion_dialog_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/task_crud_dialog_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/task_edit_dialog_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/task_management_dialog_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/task_settings_widget_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/user_profile_management_dialog_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/generated/user_profile_settings_widget_pyqt.py\",\n        \"name\": \"retranslateUi\"\n      },\n      {\n        \"file\": \"ui/ui_app_qt.py\",\n        \"name\": \"cleanup_old_requests\"\n      },\n      {\n        \"file\": \"ui/widgets/dynamic_list_container.py\",\n        \"name\": \"_add_blank_row\"\n      },\n      {\n        \"file\": \"ui/widgets/dynamic_list_container.py\",\n        \"name\": \"_deduplicate_values\"\n      },\n      {\n        \"file\": \"ui/widgets/dynamic_list_container.py\",\n        \"name\": \"_ensure_single_blank_row\"\n      },\n      {\n        \"file\": \"ui/widgets/dynamic_list_container.py\",\n        \"name\": \"_first_blank_index\"\n      },\n      {\n        \"file\": \"ui/widgets/dynamic_list_container.py\",\n        \"name\": \"_on_row_edited\"\n      },\n      {\n        \"file\": \"ui/widgets/dynamic_list_field.py\",\n        \"name\": \"is_blank\"\n      }\n    ],\n    \"undocumented_other_total\": 141\n  },\n  \"coverage\": 93.64,\n  \"errors\": [\n    \"Syntax error C:\\\\Users\\\\Julie\\\\projects\\\\MHM\\\\MHM\\\\tmp_rebuild_archive_norm.py: line 1: invalid non-printable character U+FEFF\"\n  ],\n  \"extra\": {\n    \"count\": 2976,\n    \"files\": {\n      \"`ai/cache_manager.py\": [\n        \"__init__\",\n        \"_cleanup_lru\",\n        \"_generate_key\",\n        \"_remove_entry\",\n        \"clear\",\n        \"clear_expired\",\n        \"get\",\n        \"get_context_cache\",\n        \"get_entries_by_type\",\n        \"get_response_cache\",\n        \"get_stats\",\n        \"remove_entries_by_type\",\n        \"remove_user_entries\",\n        \"set\"\n      ],\n      \"`ai/chatbot.py\": [\n        \"__init__\",\n        \"__new__\",\n        \"_call_lm_studio_api\",\n        \"_create_command_parsing_prompt\",\n        \"_create_command_parsing_with_clarification_prompt\",\n        \"_create_comprehensive_context_prompt\",\n        \"_detect_mode\",\n        \"_detect_resource_constraints\",\n        \"_enhance_conversational_engagement\",\n        \"_get_adaptive_timeout\",\n        \"_get_contextual_fallback\",\n        \"_get_fallback_personalized_message\",\n        \"_get_fallback_response\",\n        \"_make_cache_key_inputs\",\n        \"_optimize_prompt\",\n        \"_smart_truncate_response\",\n        \"_test_lm_studio_connection\",\n        \"generate_contextual_response\",\n        \"generate_personalized_message\",\n        \"generate_quick_response\",\n        \"generate_response\",\n        \"get_ai_chatbot\",\n        \"get_ai_status\",\n        \"is_ai_available\",\n        \"reload_system_prompt\",\n        \"test_system_prompt_integration\"\n      ],\n      \"`ai/context_builder.py\": [\n        \"__init__\",\n        \"__post_init__\",\n        \"_calculate_wellness_score\",\n        \"_determine_trend\",\n        \"_generate_insights\",\n        \"analyze_context\",\n        \"build_user_context\",\n        \"create_checkin_context\",\n        \"create_context_prompt\",\n        \"create_task_context\",\n        \"get_context_builder\"\n      ],\n      \"`ai/conversation_history.py\": [\n        \"__init__\",\n        \"__post_init__\",\n        \"_cleanup_old_sessions\",\n        \"add_message\",\n        \"clear_history\",\n        \"delete_session\",\n        \"end_session\",\n        \"get_active_session\",\n        \"get_conversation_history\",\n        \"get_conversation_summary\",\n        \"get_history\",\n        \"get_recent_messages\",\n        \"get_session_messages\",\n        \"get_statistics\",\n        \"start_session\"\n      ],\n      \"`ai/prompt_manager.py\": [\n        \"__init__\",\n        \"_load_custom_prompt\",\n        \"add_prompt_template\",\n        \"create_checkin_prompt\",\n        \"create_contextual_prompt\",\n        \"create_task_prompt\",\n        \"custom_prompt_length\",\n        \"fallback_prompt_keys\",\n        \"get_available_prompts\",\n        \"get_prompt\",\n        \"get_prompt_manager\",\n        \"get_prompt_template\",\n        \"has_custom_prompt\",\n        \"reload_custom_prompt\",\n        \"remove_prompt_template\"\n      ],\n      \"`communication/command_handlers/analytics_handler.py\": [\n        \"_handle_checkin_analysis\",\n        \"_handle_checkin_history\",\n        \"_handle_completion_rate\",\n        \"_handle_habit_analysis\",\n        \"_handle_mood_trends\",\n        \"_handle_quant_summary\",\n        \"_handle_show_analytics\",\n        \"_handle_sleep_analysis\",\n        \"_handle_task_analytics\",\n        \"_handle_task_stats\",\n        \"_handle_wellness_score\",\n        \"_truncate_response\",\n        \"can_handle\",\n        \"get_examples\",\n        \"get_help\",\n        \"handle\"\n      ],\n      \"`communication/command_handlers/base_handler.py\": [\n        \"can_handle\",\n        \"get_examples\",\n        \"get_help\",\n        \"handle\"\n      ],\n      \"`communication/command_handlers/checkin_handler.py\": [\n        \"_handle_checkin_status\",\n        \"_handle_continue_checkin\",\n        \"_handle_start_checkin\",\n        \"can_handle\",\n        \"get_examples\",\n        \"get_help\",\n        \"handle\"\n      ],\n      \"`communication/command_handlers/interaction_handlers.py\": [\n        \"_handle_add_schedule_period\",\n        \"_handle_add_schedule_period__parse_time_format\",\n        \"_handle_checkin_history\",\n        \"_handle_checkin_status\",\n        \"_handle_commands_list\",\n        \"_handle_complete_task\",\n        \"_handle_complete_task__find_most_urgent_task\",\n        \"_handle_complete_task__find_task_by_identifier\",\n        \"_handle_completion_rate\",\n        \"_handle_continue_checkin\",\n        \"_handle_create_task\",\n        \"_handle_create_task__parse_relative_date\",\n        \"_handle_delete_task\",\n        \"_handle_delete_task__find_task_by_identifier\",\n        \"_handle_edit_schedule_period\",\n        \"_handle_edit_schedule_period__parse_time_format\",\n        \"_handle_examples\",\n        \"_handle_general_help\",\n        \"_handle_habit_analysis\",\n        \"_handle_list_tasks\",\n        \"_handle_list_tasks__apply_filters\",\n        \"_handle_list_tasks__build_filter_info\",\n        \"_handle_list_tasks__build_response\",\n        \"_handle_list_tasks__create_rich_data\",\n        \"_handle_list_tasks__format_due_date\",\n        \"_handle_list_tasks__format_list\",\n        \"_handle_list_tasks__generate_suggestions\",\n        \"_handle_list_tasks__get_suggestion\",\n        \"_handle_list_tasks__no_tasks_response\",\n        \"_handle_list_tasks__sort_tasks\",\n        \"_handle_messages\",\n        \"_handle_mood_trends\",\n        \"_handle_profile_stats\",\n        \"_handle_quant_summary\",\n        \"_handle_schedule_status\",\n        \"_handle_show_analytics\",\n        \"_handle_show_profile\",\n        \"_handle_show_schedule\",\n        \"_handle_sleep_analysis\",\n        \"_handle_start_checkin\",\n        \"_handle_status\",\n        \"_handle_task_stats\",\n        \"_handle_update_profile\",\n        \"_handle_update_schedule\",\n        \"_handle_update_task\",\n        \"_handle_update_task__find_task_by_identifier\",\n        \"_handle_wellness_score\",\n        \"can_handle\",\n        \"get_all_handlers\",\n        \"get_examples\",\n        \"get_help\",\n        \"get_interaction_handler\",\n        \"handle\"\n      ],\n      \"`communication/command_handlers/profile_handler.py\": [\n        \"_format_profile_text\",\n        \"_handle_profile_stats\",\n        \"_handle_show_profile\",\n        \"_handle_update_profile\",\n        \"can_handle\",\n        \"get_examples\",\n        \"get_help\",\n        \"handle\"\n      ],\n      \"`communication/command_handlers/schedule_handler.py\": [\n        \"_handle_add_schedule_period\",\n        \"_handle_add_schedule_period__parse_time_format\",\n        \"_handle_edit_schedule_period\",\n        \"_handle_edit_schedule_period__parse_time_format\",\n        \"_handle_schedule_status\",\n        \"_handle_show_schedule\",\n        \"_handle_update_schedule\",\n        \"can_handle\",\n        \"get_examples\",\n        \"get_help\",\n        \"handle\"\n      ],\n      \"`communication/command_handlers/task_handler.py\": [\n        \"_handle_complete_task\",\n        \"_handle_complete_task__find_task_by_identifier\",\n        \"_handle_create_task\",\n        \"_handle_create_task__parse_relative_date\",\n        \"_handle_delete_task\",\n        \"_handle_delete_task__find_task_by_identifier\",\n        \"_handle_list_tasks\",\n        \"_handle_list_tasks__apply_filters\",\n        \"_handle_list_tasks__build_filter_info\",\n        \"_handle_list_tasks__build_response\",\n        \"_handle_list_tasks__create_rich_data\",\n        \"_handle_list_tasks__format_due_date\",\n        \"_handle_list_tasks__format_list\",\n        \"_handle_list_tasks__generate_suggestions\",\n        \"_handle_list_tasks__get_suggestion\",\n        \"_handle_list_tasks__no_tasks_response\",\n        \"_handle_list_tasks__sort_tasks\",\n        \"_handle_task_stats\",\n        \"_handle_update_task\",\n        \"_handle_update_task__find_task_by_identifier\",\n        \"can_handle\",\n        \"get_examples\",\n        \"get_help\",\n        \"handle\"\n      ],\n      \"`communication/communication_channels/base/base_channel.py\": [\n        \"__init__\",\n        \"__post_init__\",\n        \"_set_status\",\n        \"channel_type\",\n        \"get_error\",\n        \"get_status\",\n        \"is_ready\"\n      ],\n      \"`communication/communication_channels/base/command_registry.py\": [\n        \"__init__\",\n        \"__post_init__\",\n        \"get_all_commands\",\n        \"get_command\",\n        \"get_command_registry\",\n        \"get_enabled_commands\",\n        \"is_command_registered\",\n        \"register_command\",\n        \"register_with_platform\",\n        \"unregister_command\",\n        \"unregister_from_platform\"\n      ],\n      \"`communication/communication_channels/base/message_formatter.py\": [\n        \"create_interactive_elements\",\n        \"create_rich_content\",\n        \"format_message\",\n        \"get_message_formatter\"\n      ],\n      \"`communication/communication_channels/base/rich_formatter.py\": [\n        \"__init__\",\n        \"create_embed\",\n        \"create_interactive_view\",\n        \"get_color_for_type\",\n        \"get_rich_formatter\"\n      ],\n      \"`communication/communication_channels/discord/api_client.py\": [\n        \"__init__\",\n        \"get_connection_latency\",\n        \"get_discord_api_client\",\n        \"is_connected\"\n      ],\n      \"`communication/communication_channels/discord/bot.py\": [\n        \"__init__\",\n        \"_check_dns_resolution\",\n        \"_check_network_connectivity\",\n        \"_check_network_health\",\n        \"_create_action_row\",\n        \"_create_discord_embed\",\n        \"_get_detailed_connection_status\",\n        \"_shared__update_connection_status\",\n        \"_should_attempt_reconnection\",\n        \"_wait_for_network_recovery\",\n        \"can_send_messages\",\n        \"channel_type\",\n        \"get_connection_status_summary\",\n        \"get_health_status\",\n        \"initialize__register_commands\",\n        \"initialize__register_events\",\n        \"initialize__run_bot_in_thread\",\n        \"is_actually_connected\"\n      ],\n      \"`communication/communication_channels/discord/event_handler.py\": [\n        \"__init__\",\n        \"__post_init__\",\n        \"_register_default_handlers\",\n        \"add_disconnect_handler\",\n        \"add_error_handler\",\n        \"add_message_handler\",\n        \"add_ready_handler\",\n        \"get_discord_event_handler\",\n        \"register_events\"\n      ],\n      \"`communication/communication_channels/email/bot.py\": [\n        \"__init__\",\n        \"_receive_emails_sync\",\n        \"channel_type\",\n        \"initialize__test_imap_connection\",\n        \"initialize__test_smtp_connection\",\n        \"send_message__send_email_sync\"\n      ],\n      \"`communication/core/channel_monitor.py\": [\n        \"__init__\",\n        \"_attempt_channel_restart\",\n        \"_check_and_restart_stuck_channels\",\n        \"_restart_monitor_loop\",\n        \"get_channel_health_status\",\n        \"record_channel_failure\",\n        \"record_channel_success\",\n        \"reset_channel_failures\",\n        \"set_channels\",\n        \"start_restart_monitor\",\n        \"stop_restart_monitor\"\n      ],\n      \"`communication/core/channel_orchestrator.py\": [\n        \"__init__\",\n        \"__init____setup_event_loop\",\n        \"__new__\",\n        \"_check_logging_health\",\n        \"_create_task_reminder_message\",\n        \"_get_default_channel_configs\",\n        \"_get_recipient_for_service\",\n        \"_handle_scheduled_checkin\",\n        \"_initialize_channel_with_retry_sync\",\n        \"_select_weighted_message\",\n        \"_send_ai_generated_message\",\n        \"_send_checkin_prompt\",\n        \"_send_predefined_message\",\n        \"_should_send_checkin_prompt\",\n        \"_shutdown_sync\",\n        \"_start_sync\",\n        \"get_active_channels\",\n        \"get_configured_channels\",\n        \"get_discord_connectivity_status\",\n        \"get_last_task_reminder\",\n        \"get_registered_channels\",\n        \"handle_message_sending\",\n        \"handle_task_reminder\",\n        \"initialize_channels_from_config\",\n        \"run_event_loop\",\n        \"send_message_sync\",\n        \"send_message_sync__queue_failed_message\",\n        \"send_message_sync__run_async_sync\",\n        \"set_scheduler_manager\",\n        \"start_all\",\n        \"start_all__start_restart_monitor\",\n        \"start_all__start_retry_thread\",\n        \"stop_all\",\n        \"stop_all__stop_restart_monitor\",\n        \"stop_all__stop_retry_thread\"\n      ],\n      \"`communication/core/factory.py\": [\n        \"_initialize_registry\",\n        \"create_channel\",\n        \"get_registered_channels\"\n      ],\n      \"`communication/core/retry_manager.py\": [\n        \"__init__\",\n        \"_process_retry_queue\",\n        \"_retry_loop\",\n        \"clear_queue\",\n        \"get_queue_size\",\n        \"queue_failed_message\",\n        \"start_retry_thread\",\n        \"stop_retry_thread\"\n      ],\n      \"`communication/message_processing/command_parser.py\": [\n        \"__init__\",\n        \"_ai_enhanced_parse\",\n        \"_calculate_confidence\",\n        \"_extract_entities_from_ai_response\",\n        \"_extract_entities_rule_based\",\n        \"_extract_intent_from_ai_response\",\n        \"_extract_task_entities\",\n        \"_extract_task_name_from_context\",\n        \"_extract_update_entities\",\n        \"_is_valid_intent\",\n        \"_rule_based_parse\",\n        \"get_enhanced_command_parser\",\n        \"get_suggestions\",\n        \"parse\",\n        \"parse_command\"\n      ],\n      \"`communication/message_processing/conversation_flow_manager.py\": [\n        \"__init__\",\n        \"_complete_checkin\",\n        \"_generate_completion_message\",\n        \"_get_next_question\",\n        \"_get_personalized_welcome\",\n        \"_get_question_text\",\n        \"_handle_checkin\",\n        \"_handle_command_during_checkin\",\n        \"_load_user_states\",\n        \"_save_user_states\",\n        \"_select_checkin_questions_with_weighting\",\n        \"_start_dynamic_checkin\",\n        \"_validate_response\",\n        \"clear_all_states\",\n        \"clear_stuck_flows\",\n        \"expire_checkin_flow_due_to_unrelated_outbound\",\n        \"handle_contextual_question\",\n        \"handle_inbound_message\",\n        \"restart_checkin\",\n        \"start_analytics_flow\",\n        \"start_checkin\",\n        \"start_messages_flow\",\n        \"start_profile_flow\",\n        \"start_schedule_flow\",\n        \"start_tasks_flow\"\n      ],\n      \"`communication/message_processing/interaction_manager.py\": [\n        \"__init__\",\n        \"_enhance_response_with_ai\",\n        \"_extract_intent_from_text\",\n        \"_get_commands_response\",\n        \"_get_help_response\",\n        \"_handle_contextual_chat\",\n        \"_handle_structured_command\",\n        \"_is_ai_command_response\",\n        \"_is_clarification_request\",\n        \"_is_valid_intent\",\n        \"_parse_ai_command_response\",\n        \"_try_ai_command_parsing\",\n        \"get_available_commands\",\n        \"get_command_definitions\",\n        \"get_interaction_manager\",\n        \"get_slash_command_map\",\n        \"get_user_suggestions\",\n        \"handle_message\",\n        \"handle_user_message\"\n      ],\n      \"`communication/message_processing/message_router.py\": [\n        \"__init__\",\n        \"_route_bang_command\",\n        \"_route_slash_command\",\n        \"get_bang_command_map\",\n        \"get_command_definitions\",\n        \"get_command_mapping\",\n        \"get_message_router\",\n        \"get_slash_command_map\",\n        \"is_flow_command\",\n        \"route_message\"\n      ],\n      \"`core/auto_cleanup.py\": [\n        \"_calculate_cache_size__calculate_pyc_files_size\",\n        \"_calculate_cache_size__calculate_pycache_directories_size\",\n        \"_get_cleanup_status__build_status_response\",\n        \"_get_cleanup_status__calculate_days_since_cleanup\",\n        \"_get_cleanup_status__format_next_cleanup_date\",\n        \"_get_cleanup_status__get_never_cleaned_status\",\n        \"_perform_cleanup__discover_cache_files\",\n        \"_perform_cleanup__log_completion_results\",\n        \"_perform_cleanup__log_discovery_results\",\n        \"_perform_cleanup__remove_cache_directories\",\n        \"_perform_cleanup__remove_cache_files\",\n        \"_perform_cleanup__remove_cache_files_list\",\n        \"archive_old_messages_for_all_users\",\n        \"auto_cleanup_if_needed\",\n        \"calculate_cache_size\",\n        \"find_pyc_files\",\n        \"find_pycache_dirs\",\n        \"get_cleanup_status\",\n        \"get_last_cleanup_timestamp\",\n        \"perform_cleanup\",\n        \"should_run_cleanup\",\n        \"update_cleanup_timestamp\"\n      ],\n      \"`core/backup_manager.py\": [\n        \"__init__\",\n        \"_add_directory_to_zip\",\n        \"_backup_config_files\",\n        \"_backup_log_files\",\n        \"_backup_user_data\",\n        \"_cleanup_old_backups\",\n        \"_create_backup__cleanup_old_backups\",\n        \"_create_backup__create_zip_file\",\n        \"_create_backup__setup_backup\",\n        \"_create_backup_manifest\",\n        \"_get_backup_info\",\n        \"_restore_config_files\",\n        \"_restore_user_data\",\n        \"_validate_backup__check_file_exists\",\n        \"_validate_backup__check_file_integrity\",\n        \"_validate_backup__validate_content_requirements\",\n        \"_validate_backup__validate_manifest\",\n        \"_validate_backup__validate_zip_file\",\n        \"_validate_system_state__ensure_user_data_directory\",\n        \"_validate_system_state__validate_user_index\",\n        \"create_automatic_backup\",\n        \"create_backup\",\n        \"ensure_backup_directory\",\n        \"list_backups\",\n        \"perform_safe_operation\",\n        \"restore_backup\",\n        \"validate_backup\",\n        \"validate_system_state\"\n      ],\n      \"`core/checkin_analytics.py\": [\n        \"__init__\",\n        \"_calculate_habit_score\",\n        \"_calculate_mood_score\",\n        \"_calculate_overall_completion\",\n        \"_calculate_sleep_consistency\",\n        \"_calculate_sleep_score\",\n        \"_calculate_streak\",\n        \"_get_habit_status\",\n        \"_get_mood_distribution\",\n        \"_get_score_level\",\n        \"_get_sleep_recommendations\",\n        \"_get_wellness_recommendations\",\n        \"get_checkin_history\",\n        \"get_completion_rate\",\n        \"get_habit_analysis\",\n        \"get_mood_trends\",\n        \"get_quantitative_summaries\",\n        \"get_sleep_analysis\",\n        \"get_task_weekly_stats\",\n        \"get_wellness_score\"\n      ],\n      \"`core/checkin_dynamic_manager.py\": [\n        \"__init__\",\n        \"_load_data\",\n        \"build_next_question_with_response\",\n        \"get_all_questions\",\n        \"get_categories\",\n        \"get_enabled_questions_for_ui\",\n        \"get_question_definition\",\n        \"get_question_text\",\n        \"get_question_type\",\n        \"get_question_validation\",\n        \"get_response_statement\",\n        \"get_transition_phrase\",\n        \"validate_answer\"\n      ],\n      \"`core/config.py\": [\n        \"__init__\",\n        \"_normalize_path\",\n        \"ensure_user_directory\",\n        \"get_available_channels\",\n        \"get_backups_dir\",\n        \"get_channel_class_mapping\",\n        \"get_user_data_dir\",\n        \"get_user_file_path\",\n        \"print_configuration_report\",\n        \"validate_ai_configuration\",\n        \"validate_all_configuration\",\n        \"validate_and_raise_if_invalid\",\n        \"validate_communication_channels\",\n        \"validate_core_paths\",\n        \"validate_discord_config\",\n        \"validate_email_config\",\n        \"validate_environment_variables\",\n        \"validate_file_organization_settings\",\n        \"validate_logging_configuration\",\n        \"validate_minimum_config\",\n        \"validate_scheduler_configuration\"\n      ],\n      \"`core/error_handling.py\": [\n        \"__enter__\",\n        \"__exit__\",\n        \"__init__\",\n        \"_get_default_data\",\n        \"_get_user_friendly_message\",\n        \"_log_error\",\n        \"_show_user_error\",\n        \"can_handle\",\n        \"decorator\",\n        \"handle_ai_error\",\n        \"handle_communication_error\",\n        \"handle_configuration_error\",\n        \"handle_error\",\n        \"handle_errors\",\n        \"handle_file_error\",\n        \"handle_network_error\",\n        \"handle_validation_error\",\n        \"recover\",\n        \"safe_file_operation\",\n        \"wrapper\"\n      ],\n      \"`core/file_auditor.py\": [\n        \"__init__\",\n        \"_classify_path\",\n        \"_get_audit_directories\",\n        \"_split_env_list\",\n        \"critical\",\n        \"debug\",\n        \"error\",\n        \"info\",\n        \"record_created\",\n        \"start\",\n        \"start_auditor\",\n        \"stop\",\n        \"stop_auditor\",\n        \"warning\"\n      ],\n      \"`core/file_operations.py\": [\n        \"_create_user_files__account_file\",\n        \"_create_user_files__checkins_file\",\n        \"_create_user_files__context_file\",\n        \"_create_user_files__determine_feature_enablement\",\n        \"_create_user_files__log_files\",\n        \"_create_user_files__message_files\",\n        \"_create_user_files__preferences_file\",\n        \"_create_user_files__schedules_file\",\n        \"_create_user_files__sent_messages_file\",\n        \"_create_user_files__task_files\",\n        \"_create_user_files__update_user_references\",\n        \"create_user_files\",\n        \"determine_file_path\",\n        \"load_json_data\",\n        \"save_json_data\",\n        \"verify_file_access\"\n      ],\n      \"`core/logger.py\": [\n        \"__init__\",\n        \"_get_log_paths_for_environment\",\n        \"_is_testing_environment\",\n        \"_log\",\n        \"apply_test_context_formatter_to_all_loggers\",\n        \"cleanup_old_archives\",\n        \"cleanup_old_logs\",\n        \"clear_log_file_locks\",\n        \"compress_old_logs\",\n        \"critical\",\n        \"debug\",\n        \"disable_module_logging\",\n        \"doRollover\",\n        \"ensure_logs_directory\",\n        \"error\",\n        \"filter\",\n        \"force_restart_logging\",\n        \"format\",\n        \"get_component_logger\",\n        \"get_log_file_info\",\n        \"get_log_level_from_env\",\n        \"get_logger\",\n        \"get_verbose_mode\",\n        \"info\",\n        \"set_console_log_level\",\n        \"set_verbose_mode\",\n        \"setup_logging\",\n        \"setup_third_party_error_logging\",\n        \"shouldRollover\",\n        \"suppress_noisy_logging\",\n        \"toggle_verbose_logging\",\n        \"warning\"\n      ],\n      \"`core/message_management.py\": [\n        \"_parse_timestamp\",\n        \"add_message\",\n        \"archive_old_messages\",\n        \"create_message_file_from_defaults\",\n        \"delete_message\",\n        \"edit_message\",\n        \"ensure_user_message_files\",\n        \"get_message_categories\",\n        \"get_recent_messages\",\n        \"get_timestamp_for_sorting\",\n        \"load_default_messages\",\n        \"store_sent_message\",\n        \"update_message\"\n      ],\n      \"`core/response_tracking.py\": [\n        \"_get_response_log_filename\",\n        \"get_recent_chat_interactions\",\n        \"get_recent_checkins\",\n        \"get_recent_responses\",\n        \"get_timestamp_for_sorting\",\n        \"get_user_info_for_tracking\",\n        \"is_user_checkins_enabled\",\n        \"store_chat_interaction\",\n        \"store_user_response\",\n        \"track_user_response\"\n      ],\n      \"`core/schedule_management.py\": [\n        \"add_schedule_period\",\n        \"clear_schedule_periods_cache\",\n        \"delete_schedule_period\",\n        \"edit_schedule_period\",\n        \"get_current_day_names\",\n        \"get_current_time_periods_with_validation\",\n        \"get_period_data__time_12h_display_to_24h\",\n        \"get_period_data__time_24h_to_12h_display\",\n        \"get_period_data__validate_and_format_time\",\n        \"get_schedule_days\",\n        \"get_schedule_time_periods\",\n        \"get_user_info_for_schedule_management\",\n        \"is_schedule_period_active\",\n        \"set_schedule_days\",\n        \"set_schedule_period_active\",\n        \"set_schedule_periods\",\n        \"sort_key\"\n      ],\n      \"`core/schedule_utilities.py\": [\n        \"get_active_schedules\",\n        \"get_current_active_schedules\",\n        \"is_schedule_active\"\n      ],\n      \"`core/scheduler.py\": [\n        \"__init__\",\n        \"_remove_user_message_job\",\n        \"_select_task_for_reminder__calculate_due_date_weight\",\n        \"_select_task_for_reminder__calculate_priority_weight\",\n        \"_select_task_for_reminder__calculate_task_weights\",\n        \"_select_task_for_reminder__handle_edge_cases\",\n        \"_select_task_for_reminder__select_task_by_weight\",\n        \"cleanup_old_tasks\",\n        \"clear_all_accumulated_jobs\",\n        \"clear_all_accumulated_jobs_standalone\",\n        \"get_random_time_within_period\",\n        \"get_random_time_within_task_period\",\n        \"handle_sending_scheduled_message\",\n        \"handle_task_reminder\",\n        \"is_job_for_category\",\n        \"is_time_conflict\",\n        \"log_scheduled_tasks\",\n        \"perform_daily_log_archival\",\n        \"process_category_schedule\",\n        \"process_user_schedules\",\n        \"reset_and_reschedule_daily_messages\",\n        \"run_category_scheduler_standalone\",\n        \"run_daily_scheduler\",\n        \"run_full_daily_scheduler\",\n        \"run_full_scheduler_standalone\",\n        \"run_user_scheduler_standalone\",\n        \"schedule_all_task_reminders\",\n        \"schedule_all_users_immediately\",\n        \"schedule_checkin_at_exact_time\",\n        \"schedule_daily_message_job\",\n        \"schedule_message_at_random_time\",\n        \"schedule_message_for_period\",\n        \"schedule_new_user\",\n        \"schedule_task_reminder\",\n        \"schedule_task_reminder_at_datetime\",\n        \"schedule_task_reminder_at_time\",\n        \"scheduler_loop\",\n        \"select_task_for_reminder\",\n        \"set_wake_timer\",\n        \"stop_scheduler\"\n      ],\n      \"`core/schemas.py\": [\n        \"_accept_legacy_shape\",\n        \"_coerce_bool\",\n        \"_normalize_contact\",\n        \"_normalize_days\",\n        \"_normalize_flags\",\n        \"_normalize_periods\",\n        \"_valid_days\",\n        \"_valid_time\",\n        \"_validate_categories\",\n        \"_validate_discord_id\",\n        \"_validate_email\",\n        \"_validate_timezone\",\n        \"to_dict\",\n        \"validate_account_dict\",\n        \"validate_messages_file_dict\",\n        \"validate_preferences_dict\",\n        \"validate_schedules_dict\"\n      ],\n      \"`core/service.py\": [\n        \"__init__\",\n        \"_check_and_fix_logging__check_recent_activity_timestamps\",\n        \"_check_and_fix_logging__ensure_log_file_exists\",\n        \"_check_and_fix_logging__force_restart_logging_system\",\n        \"_check_and_fix_logging__read_recent_log_content\",\n        \"_check_and_fix_logging__test_logging_functionality\",\n        \"_check_and_fix_logging__verify_test_message_present\",\n        \"_check_reschedule_requests__cleanup_request_file\",\n        \"_check_reschedule_requests__discover_request_files\",\n        \"_check_reschedule_requests__get_base_directory\",\n        \"_check_reschedule_requests__handle_processing_error\",\n        \"_check_reschedule_requests__parse_request_file\",\n        \"_check_reschedule_requests__process_valid_request\",\n        \"_check_reschedule_requests__validate_request_data\",\n        \"_check_test_message_requests__cleanup_request_file\",\n        \"_check_test_message_requests__discover_request_files\",\n        \"_check_test_message_requests__get_base_directory\",\n        \"_check_test_message_requests__handle_processing_error\",\n        \"_check_test_message_requests__parse_request_file\",\n        \"_check_test_message_requests__process_valid_request\",\n        \"_check_test_message_requests__validate_request_data\",\n        \"_cleanup_test_message_requests__get_base_directory\",\n        \"_cleanup_test_message_requests__is_test_message_request_file\",\n        \"_cleanup_test_message_requests__remove_request_file\",\n        \"check_and_fix_logging\",\n        \"check_reschedule_requests\",\n        \"check_test_message_requests\",\n        \"cleanup_reschedule_requests\",\n        \"cleanup_test_message_requests\",\n        \"emergency_shutdown\",\n        \"get_scheduler_manager\",\n        \"initialize_paths\",\n        \"main\",\n        \"run_service_loop\",\n        \"shutdown\",\n        \"signal_handler\",\n        \"start\",\n        \"validate_configuration\"\n      ],\n      \"`core/service_utilities.py\": [\n        \"__init__\",\n        \"create_reschedule_request\",\n        \"is_service_running\",\n        \"load_and_localize_datetime\",\n        \"should_run\",\n        \"wait_for_network\"\n      ],\n      \"`core/ui_management.py\": [\n        \"add_period_widget_to_layout\",\n        \"clear_period_widgets_from_layout\",\n        \"collect_period_data_from_widgets\",\n        \"load_period_widgets_for_category\",\n        \"period_name_for_display\",\n        \"period_name_for_storage\"\n      ],\n      \"`core/user_data_handlers.py\": [\n        \"_save_user_data__create_backup\",\n        \"_save_user_data__legacy_preferences\",\n        \"_save_user_data__normalize_data\",\n        \"_save_user_data__save_single_type\",\n        \"_save_user_data__update_index\",\n        \"_save_user_data__validate_data\",\n        \"_save_user_data__validate_input\",\n        \"get_all_user_ids\",\n        \"get_user_data\",\n        \"register_data_loader\",\n        \"save_user_data\",\n        \"save_user_data_transaction\",\n        \"update_channel_preferences\",\n        \"update_user_account\",\n        \"update_user_context\",\n        \"update_user_preferences\",\n        \"update_user_schedules\"\n      ],\n      \"`core/user_data_manager.py\": [\n        \"__init__\",\n        \"_get_last_interaction\",\n        \"_get_user_data_summary__add_file_info\",\n        \"_get_user_data_summary__add_log_file_info\",\n        \"_get_user_data_summary__add_message_file_info\",\n        \"_get_user_data_summary__add_missing_message_file_info\",\n        \"_get_user_data_summary__add_schedule_details\",\n        \"_get_user_data_summary__add_sent_messages_details\",\n        \"_get_user_data_summary__add_special_file_details\",\n        \"_get_user_data_summary__ensure_message_files\",\n        \"_get_user_data_summary__initialize_summary\",\n        \"_get_user_data_summary__process_core_files\",\n        \"_get_user_data_summary__process_enabled_message_files\",\n        \"_get_user_data_summary__process_log_files\",\n        \"_get_user_data_summary__process_message_files\",\n        \"_get_user_data_summary__process_orphaned_message_files\",\n        \"backup_user_data\",\n        \"build_user_index\",\n        \"delete_user_completely\",\n        \"export_user_data\",\n        \"get_all_user_summaries\",\n        \"get_user_analytics_summary\",\n        \"get_user_data_summary\",\n        \"get_user_info_for_data_manager\",\n        \"get_user_message_files\",\n        \"get_user_summary\",\n        \"rebuild_full_index\",\n        \"rebuild_user_index\",\n        \"remove_from_index\",\n        \"search_users\",\n        \"update_message_references\",\n        \"update_user_index\"\n      ],\n      \"`core/user_data_validation.py\": [\n        \"_shared__title_case\",\n        \"is_valid_email\",\n        \"is_valid_phone\",\n        \"validate_new_user_data\",\n        \"validate_personalization_data\",\n        \"validate_schedule_periods\",\n        \"validate_schedule_periods__validate_time_format\",\n        \"validate_user_update\"\n      ],\n      \"`core/user_management.py\": [\n        \"_ensure_default_loaders_once\",\n        \"_get_user_data__load_account\",\n        \"_get_user_data__load_context\",\n        \"_get_user_data__load_preferences\",\n        \"_get_user_data__load_schedules\",\n        \"_get_user_id_by_identifier__by_chat_id\",\n        \"_get_user_id_by_identifier__by_discord_user_id\",\n        \"_get_user_id_by_identifier__by_email\",\n        \"_get_user_id_by_identifier__by_internal_username\",\n        \"_get_user_id_by_identifier__by_phone\",\n        \"_load_presets_json\",\n        \"_save_user_data__save_account\",\n        \"_save_user_data__save_context\",\n        \"_save_user_data__save_preferences\",\n        \"_save_user_data__save_schedules\",\n        \"add_personalization_item\",\n        \"clear_personalization_cache\",\n        \"clear_user_caches\",\n        \"create_default_personalization_data\",\n        \"create_default_schedule_periods\",\n        \"create_new_user\",\n        \"ensure_all_categories_have_schedules\",\n        \"ensure_category_has_default_schedule\",\n        \"ensure_unique_ids\",\n        \"get_all_user_ids\",\n        \"get_available_data_types\",\n        \"get_data_type_info\",\n        \"get_personalization_field\",\n        \"get_predefined_options\",\n        \"get_timezone_options\",\n        \"get_user_categories\",\n        \"get_user_data_with_metadata\",\n        \"get_user_id_by_identifier\",\n        \"load_and_ensure_ids\",\n        \"migrate_legacy_schedules_structure\",\n        \"register_data_loader\",\n        \"register_default_loaders\",\n        \"remove_personalization_item\",\n        \"update_channel_preferences\",\n        \"update_personalization_field\",\n        \"update_user_account\",\n        \"update_user_context\",\n        \"update_user_schedules\"\n      ],\n      \"`run_mhm.py\": [\n        \"main\"\n      ],\n      \"`run_tests.py\": [\n        \"main\",\n        \"print_test_mode_info\",\n        \"run_command\"\n      ],\n      \"`tasks/task_management.py\": [\n        \"_calculate_next_due_date\",\n        \"_create_next_recurring_task_instance\",\n        \"add_user_task_tag\",\n        \"are_tasks_enabled\",\n        \"cleanup_task_reminders\",\n        \"complete_task\",\n        \"create_task\",\n        \"delete_task\",\n        \"ensure_task_directory\",\n        \"get_task_by_id\",\n        \"get_tasks_due_soon\",\n        \"get_user_task_stats\",\n        \"load_active_tasks\",\n        \"load_completed_tasks\",\n        \"remove_user_task_tag\",\n        \"restore_task\",\n        \"save_active_tasks\",\n        \"save_completed_tasks\",\n        \"schedule_task_reminders\",\n        \"setup_default_task_tags\",\n        \"update_task\"\n      ],\n      \"`tests/behavior/test_account_management_real_behavior.py\": [\n        \"cleanup_test_environment\",\n        \"create_test_user_data\",\n        \"main\",\n        \"setup_test_environment\",\n        \"test_category_management_real_behavior\",\n        \"test_data_consistency_real_behavior\",\n        \"test_feature_enablement_real_behavior\",\n        \"test_integration_scenarios_real_behavior\",\n        \"test_schedule_period_management_real_behavior\",\n        \"test_user_data_loading_real_behavior\"\n      ],\n      \"`tests/behavior/test_ai_chatbot_behavior.py\": [\n        \"generate_response\",\n        \"test_ai_chatbot_adaptive_timeout_responds_to_system_resources\",\n        \"test_ai_chatbot_cache_performance_improvement\",\n        \"test_ai_chatbot_cleanup_and_resource_management\",\n        \"test_ai_chatbot_command_parsing_creates_structured_output\",\n        \"test_ai_chatbot_concurrent_access_safety\",\n        \"test_ai_chatbot_conversation_manager_integration\",\n        \"test_ai_chatbot_error_handling_preserves_system_stability\",\n        \"test_ai_chatbot_error_recovery_with_real_files\",\n        \"test_ai_chatbot_generates_actual_responses\",\n        \"test_ai_chatbot_handles_api_failures_gracefully\",\n        \"test_ai_chatbot_performance_under_load\",\n        \"test_ai_chatbot_prompt_optimization_improves_performance\",\n        \"test_ai_chatbot_response_tracking_integration\",\n        \"test_ai_chatbot_status_reporting_actual_system_state\",\n        \"test_ai_chatbot_system_prompt_integration_test_actual_functionality\",\n        \"test_ai_chatbot_tracks_conversation_history\",\n        \"test_ai_chatbot_user_context_manager_integration\",\n        \"test_ai_chatbot_uses_user_context_for_personalization\",\n        \"test_ai_chatbot_with_real_user_data\",\n        \"test_prompt_manager_creates_actual_file\",\n        \"test_response_cache_actually_stores_and_retrieves_data\",\n        \"test_response_cache_cleanup_actually_removes_entries\",\n        \"test_singleton_behavior_creates_single_instance\"\n      ],\n      \"`tests/behavior/test_ai_context_builder_behavior.py\": [\n        \"build_context\",\n        \"test_build_user_context_creates_fresh_timestamp\",\n        \"test_build_user_context_creates_structured_context_data\",\n        \"test_build_user_context_handles_concurrent_access\",\n        \"test_build_user_context_handles_corrupted_user_data\",\n        \"test_build_user_context_handles_empty_files\",\n        \"test_build_user_context_handles_empty_user_data\",\n        \"test_build_user_context_handles_error_conditions\",\n        \"test_build_user_context_handles_large_user_data\",\n        \"test_build_user_context_handles_long_user_id\",\n        \"test_build_user_context_handles_missing_files\",\n        \"test_build_user_context_handles_missing_user_data_gracefully\",\n        \"test_build_user_context_handles_rapid_calls\",\n        \"test_build_user_context_handles_special_characters_in_user_id\",\n        \"test_build_user_context_handles_unicode_user_id\",\n        \"test_build_user_context_includes_conversation_history\",\n        \"test_build_user_context_includes_current_time\",\n        \"test_build_user_context_includes_recent_checkins\",\n        \"test_build_user_context_includes_user_data_from_files\",\n        \"test_build_user_context_without_conversation_history\",\n        \"test_context_builder_initialization_creates_components\"\n      ],\n      \"`tests/behavior/test_ai_context_builder_coverage_expansion.py\": [\n        \"test_analyze_context_error_handling\",\n        \"test_analyze_context_with_checkin_data\",\n        \"test_analyze_context_with_empty_checkins\",\n        \"test_analyze_context_with_missing_data\",\n        \"test_calculate_wellness_score_all_factors\",\n        \"test_calculate_wellness_score_no_factors\",\n        \"test_create_checkin_context\",\n        \"test_create_checkin_context_error_handling\",\n        \"test_create_context_prompt_error_handling\",\n        \"test_create_context_prompt_with_analysis\",\n        \"test_create_context_prompt_with_profile\",\n        \"test_create_context_prompt_with_user_context\",\n        \"test_create_task_context\",\n        \"test_create_task_context_error_handling\",\n        \"test_determine_trend_declining\",\n        \"test_determine_trend_improving\",\n        \"test_determine_trend_insufficient_data\",\n        \"test_determine_trend_stable\",\n        \"test_generate_insights_dental_hygiene\",\n        \"test_generate_insights_energy_patterns\",\n        \"test_generate_insights_excellent_breakfast\",\n        \"test_generate_insights_low_mood\",\n        \"test_generate_insights_poor_breakfast\",\n        \"test_generate_insights_positive_mood\",\n        \"test_get_context_builder_singleton\"\n      ],\n      \"`tests/behavior/test_ai_conversation_history_behavior.py\": [\n        \"add_message\",\n        \"test_add_message_appends_to_existing_session\",\n        \"test_add_message_includes_timestamp\",\n        \"test_add_message_persists_to_session\",\n        \"test_add_message_validates_content\",\n        \"test_add_message_validates_role\",\n        \"test_clear_history_removes_session_data\",\n        \"test_conversation_history_handles_concurrent_access\",\n        \"test_conversation_history_handles_large_messages\",\n        \"test_conversation_history_handles_rapid_access\",\n        \"test_conversation_history_handles_special_characters\",\n        \"test_conversation_history_handles_unicode_messages\",\n        \"test_conversation_history_initialization_creates_components\",\n        \"test_delete_session_removes_specific_session\",\n        \"test_end_session_terminates_active_session\",\n        \"test_get_conversation_summary_handles_empty_history\",\n        \"test_get_conversation_summary_returns_actual_summary\",\n        \"test_get_history_returns_all_sessions\",\n        \"test_get_recent_messages_handles_empty_history\",\n        \"test_get_recent_messages_handles_negative_limit\",\n        \"test_get_recent_messages_handles_zero_limit\",\n        \"test_get_recent_messages_respects_limit\",\n        \"test_get_recent_messages_returns_actual_data\",\n        \"test_get_statistics_returns_actual_data\",\n        \"test_start_session_creates_actual_session\"\n      ],\n      \"`tests/behavior/test_auto_cleanup_behavior.py\": [\n        \"mock_exists_with_changes\",\n        \"mock_walk_with_error\",\n        \"temp_test_dir\",\n        \"temp_test_environment\",\n        \"temp_tracker_file\",\n        \"test_auto_cleanup_if_needed_not_needed_real_behavior\",\n        \"test_auto_cleanup_if_needed_real_behavior\",\n        \"test_calculate_cache_size_concurrent_file_changes_real_behavior\",\n        \"test_calculate_cache_size_empty_inputs_real_behavior\",\n        \"test_calculate_cache_size_file_corruption_handling_real_behavior\",\n        \"test_calculate_cache_size_large_cache_scenario_real_behavior\",\n        \"test_calculate_cache_size_nested_directory_structure_real_behavior\",\n        \"test_calculate_cache_size_nonexistent_files_real_behavior\",\n        \"test_calculate_cache_size_permission_error_simulation_real_behavior\",\n        \"test_calculate_cache_size_real_behavior\",\n        \"test_find_pyc_files_real_behavior\",\n        \"test_find_pycache_dirs_real_behavior\",\n        \"test_get_cleanup_status_29_days_real_behavior\",\n        \"test_get_cleanup_status_31_days_real_behavior\",\n        \"test_get_cleanup_status_corrupted_tracker_file_real_behavior\",\n        \"test_get_cleanup_status_empty_tracker_file_real_behavior\",\n        \"test_get_cleanup_status_exactly_30_days_real_behavior\",\n        \"test_get_cleanup_status_invalid_timestamp_real_behavior\",\n        \"test_get_cleanup_status_missing_timestamp_field_real_behavior\",\n        \"test_get_cleanup_status_never_cleaned_real_behavior\",\n        \"test_get_cleanup_status_overdue_cleanup_real_behavior\",\n        \"test_get_cleanup_status_recent_cleanup_real_behavior\",\n        \"test_get_cleanup_status_very_old_cleanup_real_behavior\",\n        \"test_get_cleanup_status_very_recent_cleanup_real_behavior\",\n        \"test_get_last_cleanup_timestamp_no_file_real_behavior\",\n        \"test_get_last_cleanup_timestamp_with_file_real_behavior\",\n        \"test_perform_cleanup_real_behavior\",\n        \"test_should_run_cleanup_custom_interval_real_behavior\",\n        \"test_should_run_cleanup_never_cleaned_real_behavior\",\n        \"test_should_run_cleanup_old_cleanup_real_behavior\",\n        \"test_should_run_cleanup_recent_cleanup_real_behavior\",\n        \"test_update_cleanup_timestamp_real_behavior\"\n      ],\n      \"`tests/behavior/test_backup_manager_behavior.py\": [\n        \"_cleanup_test_files\",\n        \"_create_test_config_files\",\n        \"failing_operation\",\n        \"setup_backup_manager\",\n        \"test_backup_creation_and_validation_real_behavior\",\n        \"test_backup_manager_error_handling_real_behavior\",\n        \"test_backup_manager_initialization_real_behavior\",\n        \"test_backup_manager_with_empty_user_directory_real_behavior\",\n        \"test_backup_manager_with_large_user_data_real_behavior\",\n        \"test_backup_rotation_by_age_real_behavior\",\n        \"test_backup_rotation_by_count_real_behavior\",\n        \"test_create_automatic_backup_real_behavior\",\n        \"test_create_backup_with_all_components_real_behavior\",\n        \"test_create_backup_with_config_files_real_behavior\",\n        \"test_create_backup_with_user_data_real_behavior\",\n        \"test_ensure_backup_directory_real_behavior\",\n        \"test_list_backups_real_behavior\",\n        \"test_operation\",\n        \"test_perform_safe_operation_real_behavior\",\n        \"test_perform_safe_operation_with_failure_real_behavior\",\n        \"test_restore_backup_with_config_files_real_behavior\",\n        \"test_restore_backup_with_nonexistent_file_real_behavior\",\n        \"test_validate_backup_real_behavior\",\n        \"test_validate_backup_with_corrupted_file_real_behavior\",\n        \"test_validate_backup_with_missing_file_real_behavior\",\n        \"test_validate_system_state_real_behavior\",\n        \"test_validate_system_state_with_missing_user_dir_real_behavior\"\n      ],\n      \"`tests/behavior/test_checkin_analytics_behavior.py\": [\n        \"analytics\",\n        \"mock_checkins_for_completion\",\n        \"mock_checkins_for_history\",\n        \"mock_checkins_for_tasks\",\n        \"mock_checkins_for_wellness\",\n        \"mock_checkins_with_habits\",\n        \"mock_checkins_with_mood\",\n        \"mock_checkins_with_sleep\",\n        \"test_analytics_initialization_real_behavior\",\n        \"test_checkin_history_no_data_real_behavior\",\n        \"test_checkin_history_with_data_real_behavior\",\n        \"test_completion_rate_no_data_real_behavior\",\n        \"test_completion_rate_with_data_real_behavior\",\n        \"test_habit_analysis_no_data_real_behavior\",\n        \"test_habit_analysis_with_data_real_behavior\",\n        \"test_mood_trends_invalid_mood_data_real_behavior\",\n        \"test_mood_trends_no_data_real_behavior\",\n        \"test_mood_trends_with_data_real_behavior\",\n        \"test_sleep_analysis_no_data_real_behavior\",\n        \"test_sleep_analysis_with_data_real_behavior\",\n        \"test_task_weekly_stats_no_data_real_behavior\",\n        \"test_task_weekly_stats_with_data_real_behavior\",\n        \"test_wellness_score_no_data_real_behavior\",\n        \"test_wellness_score_with_data_real_behavior\"\n      ],\n      \"`tests/behavior/test_command_parser_coverage_expansion_phase3_simple.py\": [\n        \"setup_method\",\n        \"test_error_handling_in_parsing\",\n        \"test_extract_intent_from_ai_response_case_insensitive\",\n        \"test_extract_intent_from_ai_response_complete_task\",\n        \"test_extract_intent_from_ai_response_create_task\",\n        \"test_extract_intent_from_ai_response_list_tasks\",\n        \"test_extract_intent_from_ai_response_no_match\",\n        \"test_extract_intent_from_ai_response_start_checkin\",\n        \"test_extract_task_entities_basic\",\n        \"test_extract_task_entities_complex\",\n        \"test_extract_task_entities_no_match\",\n        \"test_extract_task_entities_with_due_date\",\n        \"test_extract_task_entities_with_priority\",\n        \"test_extract_task_name_from_context_basic\",\n        \"test_extract_task_name_from_context_complex\",\n        \"test_extract_task_name_from_context_no_match\",\n        \"test_extract_update_entities_complex\",\n        \"test_extract_update_entities_due_date\",\n        \"test_extract_update_entities_due_short\",\n        \"test_extract_update_entities_no_match\",\n        \"test_extract_update_entities_priority\",\n        \"test_get_enhanced_command_parser_singleton\",\n        \"test_get_suggestions_analytics_keywords\",\n        \"test_get_suggestions_checkin_keywords\",\n        \"test_get_suggestions_empty_input\",\n        \"test_get_suggestions_profile_keywords\",\n        \"test_get_suggestions_schedule_keywords\",\n        \"test_get_suggestions_task_keywords\",\n        \"test_get_suggestions_unknown_keywords\",\n        \"test_parse_command_function\",\n        \"test_parse_command_function_empty\",\n        \"test_parse_command_function_none\",\n        \"test_parser_ai_response_processing\",\n        \"test_parser_entity_extraction_integration\",\n        \"test_parser_initialization\",\n        \"test_parser_initialization_components\",\n        \"test_parser_integration_with_real_inputs\",\n        \"test_parser_method_signatures\",\n        \"test_parser_parse_method\",\n        \"test_parser_parse_method_empty\",\n        \"test_parser_parse_method_none\",\n        \"test_parser_parse_method_whitespace\",\n        \"test_parser_robustness\",\n        \"test_parser_suggestions_integration\",\n        \"test_parser_with_mock_ai_chatbot\",\n        \"test_parser_with_mock_interaction_handlers\",\n        \"test_parsing_result_initialization\",\n        \"test_pattern_matching_edge_cases\"\n      ],\n      \"`tests/behavior/test_communication_behavior.py\": [\n        \"comm_manager\",\n        \"mock_channel_config\",\n        \"realistic_mock_channel\",\n        \"temp_dir\",\n        \"test_communication_manager_initialization\",\n        \"test_communication_manager_singleton\",\n        \"test_get_active_channels\",\n        \"test_initialize_channels_from_config\",\n        \"test_send_message_sync_channel_not_found\",\n        \"test_send_message_sync_channel_not_ready\",\n        \"test_send_message_sync_with_realistic_channel\"\n      ],\n      \"`tests/behavior/test_communication_command_parser_behavior.py\": [\n        \"test_command_parser_initialization_creates_components\"\n      ],\n      \"`tests/behavior/test_communication_factory_coverage_expansion.py\": [\n        \"__init__\",\n        \"channel_type\",\n        \"test_create_channel_successful_creation\",\n        \"test_create_channel_unknown_type\",\n        \"test_factory_config_integration\",\n        \"test_factory_dynamic_import_handling\",\n        \"test_factory_error_handling_create_channel\",\n        \"test_factory_error_handling_get_channels\",\n        \"test_factory_error_handling_initialization\",\n        \"test_factory_logging_behavior\",\n        \"test_factory_registry_persistence\",\n        \"test_factory_singleton_behavior\",\n        \"test_get_registered_channels_empty_registry\",\n        \"test_get_registered_channels_with_channels\",\n        \"test_initialize_registry_already_initialized\",\n        \"test_initialize_registry_successful_registration\",\n        \"test_initialize_registry_with_attribute_error\",\n        \"test_initialize_registry_with_import_error\"\n      ],\n      \"`tests/behavior/test_communication_interaction_manager_behavior.py\": [\n        \"test_interaction_manager_initialization_creates_components\",\n        \"test_process_message_creates_interaction_record\",\n        \"test_process_message_handles_ai_chat\",\n        \"test_process_message_handles_checkin_commands\",\n        \"test_process_message_handles_command_parsing\",\n        \"test_process_message_handles_concurrent_access\",\n        \"test_process_message_handles_conversation_context\",\n        \"test_process_message_handles_conversation_flow\",\n        \"test_process_message_handles_empty_message\",\n        \"test_process_message_handles_error_conditions\",\n        \"test_process_message_handles_feature_flags\",\n        \"test_process_message_handles_help_commands\",\n        \"test_process_message_handles_long_messages\",\n        \"test_process_message_handles_mixed_content\",\n        \"test_process_message_handles_profile_commands\",\n        \"test_process_message_handles_rate_limiting\",\n        \"test_process_message_handles_schedule_commands\",\n        \"test_process_message_handles_special_characters\",\n        \"test_process_message_handles_task_commands\",\n        \"test_process_message_handles_unicode_characters\",\n        \"test_process_message_handles_unknown_commands\",\n        \"test_process_message_handles_user_preferences\",\n        \"test_process_message_handles_whitespace_only_message\",\n        \"test_process_message_includes_interaction_type\",\n        \"test_process_message_includes_timestamp\",\n        \"test_process_message_includes_user_context\"\n      ],\n      \"`tests/behavior/test_communication_manager_coverage_expansion.py\": [\n        \"comm_manager\",\n        \"mock_channel_config\",\n        \"realistic_mock_channel\",\n        \"test_async_channel_initialization_real_behavior\",\n        \"test_async_message_sending_channel_not_ready_real_behavior\",\n        \"test_async_message_sending_real_behavior\",\n        \"test_async_shutdown_real_behavior\",\n        \"test_async_startup_real_behavior\",\n        \"test_broadcast_message_real_behavior\",\n        \"test_channel_initialization_with_retry_real_behavior\",\n        \"test_channel_restart_attempt_real_behavior\",\n        \"test_channel_restart_monitoring_real_behavior\",\n        \"test_create_task_reminder_message_real_behavior\",\n        \"test_data_dir\",\n        \"test_default_channel_configs_real_behavior\",\n        \"test_discord_connectivity_status_real_behavior\",\n        \"test_event_loop_setup_real_behavior\",\n        \"test_get_all_statuses_real_behavior\",\n        \"test_get_channel_status_real_behavior\",\n        \"test_get_recipient_for_service_real_behavior\",\n        \"test_handle_message_sending_real_behavior\",\n        \"test_handle_scheduled_checkin_real_behavior\",\n        \"test_handle_task_reminder_real_behavior\",\n        \"test_health_check_all_real_behavior\",\n        \"test_logging_health_check_real_behavior\",\n        \"test_message_queuing_real_behavior\",\n        \"test_receive_messages_real_behavior\",\n        \"test_restart_monitor_management_real_behavior\",\n        \"test_retry_queue_processing_real_behavior\",\n        \"test_retry_queue_processing_with_failure_real_behavior\",\n        \"test_retry_thread_management_real_behavior\",\n        \"test_run_async_sync_real_behavior\",\n        \"test_send_ai_generated_message_real_behavior\",\n        \"test_send_checkin_prompt_real_behavior\",\n        \"test_send_predefined_message_real_behavior\",\n        \"test_set_scheduler_manager_real_behavior\",\n        \"test_should_send_checkin_prompt_real_behavior\",\n        \"test_start_all_real_behavior\",\n        \"test_stop_all_real_behavior\",\n        \"test_sync_channel_initialization_real_behavior\",\n        \"test_sync_shutdown_real_behavior\",\n        \"test_sync_startup_real_behavior\"\n      ],\n      \"`tests/behavior/test_config_coverage_expansion_phase3_simple.py\": [\n        \"test_config_validation_error_initialization\",\n        \"test_config_validation_error_with_none_values\",\n        \"test_configuration_constants_exist\",\n        \"test_configuration_error_handling\",\n        \"test_configuration_validation_integration\",\n        \"test_directory_creation_functions\",\n        \"test_ensure_user_directory_failure\",\n        \"test_ensure_user_directory_success\",\n        \"test_environment_variable_loading\",\n        \"test_get_available_channels\",\n        \"test_get_backups_dir_production_mode\",\n        \"test_get_backups_dir_testing_mode\",\n        \"test_get_channel_class_mapping\",\n        \"test_get_user_data_dir\",\n        \"test_get_user_file_path\",\n        \"test_normalize_path_edge_cases\",\n        \"test_normalize_path_function\",\n        \"test_path_handling_functions\",\n        \"test_print_configuration_report\",\n        \"test_print_configuration_report_no_channels\",\n        \"test_validate_ai_configuration_invalid_url\",\n        \"test_validate_ai_configuration_missing_url\",\n        \"test_validate_ai_configuration_valid_config\",\n        \"test_validate_all_configuration_integration\",\n        \"test_validate_and_raise_if_invalid\",\n        \"test_validate_communication_channels\",\n        \"test_validate_core_paths_success\",\n        \"test_validate_discord_config\",\n        \"test_validate_email_config\",\n        \"test_validate_environment_variables\",\n        \"test_validate_file_organization_settings\",\n        \"test_validate_logging_configuration\",\n        \"test_validate_minimum_config\",\n        \"test_validate_scheduler_configuration\",\n        \"test_validation_functions_return_correct_types\"\n      ],\n      \"`tests/behavior/test_conversation_behavior.py\": [\n        \"test_checkin_flow_completion\",\n        \"test_checkin_flow_progression\",\n        \"test_conversation_manager_cancel_handling\",\n        \"test_conversation_manager_cleanup_and_resource_management\",\n        \"test_conversation_manager_command_handling\",\n        \"test_conversation_manager_concurrent_access_safety\",\n        \"test_conversation_manager_error_handling_preserves_system_stability\",\n        \"test_conversation_manager_error_recovery_with_real_files\",\n        \"test_conversation_manager_initialization_creates_structure\",\n        \"test_conversation_manager_integration_with_response_tracking\",\n        \"test_conversation_manager_performance_under_load\",\n        \"test_conversation_manager_with_real_user_data\",\n        \"test_get_question_text_returns_personalized_questions\",\n        \"test_handle_contextual_question_integrates_with_ai\",\n        \"test_handle_inbound_message_creates_user_state\",\n        \"test_handle_inbound_message_preserves_existing_state\",\n        \"test_start_checkin_creates_checkin_state\",\n        \"test_start_checkin_handles_disabled_user\",\n        \"test_validate_response_handles_edge_cases\",\n        \"test_validate_response_handles_various_inputs\"\n      ],\n      \"`tests/behavior/test_core_message_management_coverage_expansion.py\": [\n        \"test_get_message_categories_from_env_real_behavior\",\n        \"test_get_message_categories_from_json_real_behavior\",\n        \"test_get_message_categories_no_env_real_behavior\",\n        \"test_get_timestamp_for_sorting_invalid_item_real_behavior\",\n        \"test_get_timestamp_for_sorting_real_behavior\",\n        \"test_get_timestamp_for_sorting_string_real_behavior\",\n        \"test_load_default_messages_file_not_found_real_behavior\",\n        \"test_load_default_messages_real_behavior\",\n        \"test_parse_timestamp_real_behavior\"\n      ],\n      \"`tests/behavior/test_core_service_coverage_expansion.py\": [\n        \"mock_communication_manager\",\n        \"mock_config\",\n        \"mock_remove_with_disappearing_files\",\n        \"mock_remove_with_partial_failure\",\n        \"mock_scheduler_manager\",\n        \"service\",\n        \"test_check_and_fix_logging_basic_success\",\n        \"test_check_and_fix_logging_check_recent_activity_timestamps_invalid_timestamp\",\n        \"test_check_and_fix_logging_check_recent_activity_timestamps_old_activity\",\n        \"test_check_and_fix_logging_check_recent_activity_timestamps_recent_activity\",\n        \"test_check_and_fix_logging_failure_real_behavior\",\n        \"test_check_and_fix_logging_file_creation_failure\",\n        \"test_check_and_fix_logging_file_missing\",\n        \"test_check_and_fix_logging_old_activity_restart\",\n        \"test_check_and_fix_logging_read_recent_log_content_large_file\",\n        \"test_check_and_fix_logging_read_recent_log_content_small_file\",\n        \"test_check_and_fix_logging_recent_activity_detected\",\n        \"test_check_and_fix_logging_success_real_behavior\",\n        \"test_check_and_fix_logging_verify_test_message_present_found\",\n        \"test_check_and_fix_logging_verify_test_message_present_not_found\",\n        \"test_check_reschedule_requests_handle_processing_error_cleanup_failure\",\n        \"test_check_reschedule_requests_handle_processing_error_successful_cleanup\",\n        \"test_check_reschedule_requests_invalid_file\",\n        \"test_check_reschedule_requests_json_error\",\n        \"test_check_reschedule_requests_no_files\",\n        \"test_check_reschedule_requests_old_file_processed\",\n        \"test_check_reschedule_requests_valid_file\",\n        \"test_check_reschedule_requests_validate_request_data_missing_fields\",\n        \"test_check_reschedule_requests_validate_request_data_old_timestamp\",\n        \"test_check_test_message_requests_communication_error\",\n        \"test_check_test_message_requests_handle_processing_error_cleanup_failure\",\n        \"test_check_test_message_requests_handle_processing_error_successful_cleanup\",\n        \"test_check_test_message_requests_invalid_file\",\n        \"test_check_test_message_requests_json_error\",\n        \"test_check_test_message_requests_no_communication_manager\",\n        \"test_check_test_message_requests_no_files\",\n        \"test_check_test_message_requests_valid_file\",\n        \"test_cleanup_test_message_requests_concurrent_access_simulation_real_behavior\",\n        \"test_cleanup_test_message_requests_directory_access_error_real_behavior\",\n        \"test_cleanup_test_message_requests_empty_directory_real_behavior\",\n        \"test_cleanup_test_message_requests_file_in_use_error_real_behavior\",\n        \"test_cleanup_test_message_requests_file_permission_error_real_behavior\",\n        \"test_cleanup_test_message_requests_large_number_of_files_real_behavior\",\n        \"test_cleanup_test_message_requests_mixed_file_types_real_behavior\",\n        \"test_cleanup_test_message_requests_partial_failure_real_behavior\",\n        \"test_cleanup_test_message_requests_remove_request_file_generic_error_real_behavior\",\n        \"test_cleanup_test_message_requests_remove_request_file_not_found_error_real_behavior\",\n        \"test_cleanup_test_message_requests_remove_request_file_permission_error_real_behavior\",\n        \"test_cleanup_test_message_requests_remove_request_file_success_real_behavior\",\n        \"test_get_scheduler_manager_real_behavior\",\n        \"test_initialize_paths_real_behavior\",\n        \"test_initialize_paths_with_empty_categories_real_behavior\",\n        \"test_initialize_paths_with_invalid_categories_real_behavior\",\n        \"test_initialize_paths_with_none_user_id_real_behavior\",\n        \"test_initialize_paths_with_path_generation_error_real_behavior\",\n        \"test_main_function_real_behavior\",\n        \"test_main_function_with_service_failure_real_behavior\",\n        \"test_service_atexit_handler_real_behavior\",\n        \"test_service_atexit_handler_with_manager_stop_failure_real_behavior\",\n        \"test_service_atexit_handler_with_none_managers_real_behavior\",\n        \"test_service_cleanup_reschedule_requests_real_behavior\",\n        \"test_service_cleanup_test_message_requests_real_behavior\",\n        \"test_service_initialization_error_real_behavior\",\n        \"test_service_initialization_real_behavior\",\n        \"test_service_retry_mechanism_real_behavior\",\n        \"test_service_signal_handlers_real_behavior\",\n        \"test_service_startup_time_tracking_real_behavior\",\n        \"test_signal_handler_real_behavior\",\n        \"test_start_service_communication_manager_failure_real_behavior\",\n        \"test_start_service_configuration_failure_real_behavior\",\n        \"test_start_service_path_initialization_failure_real_behavior\",\n        \"test_start_service_scheduler_manager_failure_real_behavior\",\n        \"test_start_service_success_real_behavior\",\n        \"test_stop_service_real_behavior\",\n        \"test_stop_service_with_manager_stop_failure_real_behavior\",\n        \"test_stop_service_with_none_managers_real_behavior\",\n        \"test_validate_configuration_failure_real_behavior\",\n        \"test_validate_configuration_success_real_behavior\"\n      ],\n      \"`tests/behavior/test_discord_bot_behavior.py\": [\n        \"discord_bot\",\n        \"mock_discord_bot\",\n        \"test_connection_status_update_actually_changes_state\",\n        \"test_detailed_connection_status_returns_actual_state\",\n        \"test_discord_bot_channel_type_is_async\",\n        \"test_discord_bot_cleanup_and_resource_management\",\n        \"test_discord_bot_concurrent_access_safety\",\n        \"test_discord_bot_connection_status_summary_returns_readable_string\",\n        \"test_discord_bot_error_handling_preserves_system_stability\",\n        \"test_discord_bot_error_recovery_with_real_files\",\n        \"test_discord_bot_health_check_verifies_actual_status\",\n        \"test_discord_bot_health_status_returns_actual_metrics\",\n        \"test_discord_bot_initialization_creates_proper_structure\",\n        \"test_discord_bot_initialization_with_dns_failure\",\n        \"test_discord_bot_initialization_with_valid_token\",\n        \"test_discord_bot_initialization_without_token\",\n        \"test_discord_bot_initialize_creates_thread\",\n        \"test_discord_bot_integration_with_conversation_manager\",\n        \"test_discord_bot_integration_with_user_management\",\n        \"test_discord_bot_is_actually_connected_checks_real_state\",\n        \"test_discord_bot_is_initialized_checks_actual_state\",\n        \"test_discord_bot_manual_reconnect_actually_reconnects\",\n        \"test_discord_bot_performance_under_load\",\n        \"test_discord_bot_receive_messages_returns_actual_data\",\n        \"test_discord_bot_send_dm_actually_sends_direct_message\",\n        \"test_discord_bot_send_message_actually_sends\",\n        \"test_discord_bot_send_message_handles_errors\",\n        \"test_discord_bot_shutdown_actually_cleans_up\",\n        \"test_discord_bot_shutdown_actually_stops_thread\",\n        \"test_discord_bot_with_real_user_data\",\n        \"test_discord_checkin_flow_end_to_end\",\n        \"test_discord_complete_task_by_name_variation\",\n        \"test_discord_message_to_interaction_manager_complete_task_prompt\",\n        \"test_discord_response_after_task_reminder\",\n        \"test_discord_task_create_update_complete\",\n        \"test_dns_resolution_check_actually_tests_connectivity\",\n        \"test_dns_resolution_fallback_uses_alternative_servers\",\n        \"test_interaction_manager_single_response\",\n        \"test_network_connectivity_check_tests_multiple_endpoints\",\n        \"test_network_connectivity_fallback_tries_alternative_endpoints\",\n        \"test_user_setup\"\n      ],\n      \"`tests/behavior/test_dynamic_checkin_behavior.py\": [\n        \"test_build_next_question_with_response\",\n        \"test_complete_question_flow_variety\",\n        \"test_conversation_manager_uses_dynamic_questions\",\n        \"test_dynamic_checkin_manager_initialization\",\n        \"test_question_definitions\",\n        \"test_question_text_uses_dynamic_manager\",\n        \"test_response_statements\",\n        \"test_response_variety\",\n        \"test_transition_phrase_variety\",\n        \"test_ui_questions_format\",\n        \"test_validation\",\n        \"test_validation_uses_dynamic_manager\"\n      ],\n      \"`tests/behavior/test_email_bot_behavior.py\": [\n        \"send_email\",\n        \"setup_method\",\n        \"test_email_bot_async_shutdown_method_behavior\",\n        \"test_email_bot_data_integrity\",\n        \"test_email_bot_error_handling_preserves_system_stability\",\n        \"test_email_bot_initialization_creates_proper_structure\",\n        \"test_email_bot_initialization_with_custom_config\",\n        \"test_email_bot_legacy_start_method_behavior\",\n        \"test_email_bot_legacy_start_method_failure_behavior\",\n        \"test_email_bot_performance_under_load\",\n        \"test_email_bot_status_checking_behavior\"\n      ],\n      \"`tests/behavior/test_enhanced_command_parser_behavior.py\": [\n        \"parse_command\",\n        \"setup_method\",\n        \"test_enhanced_command_parser_ai_enhanced_parsing_behavior\",\n        \"test_enhanced_command_parser_case_insensitivity_behavior\",\n        \"test_enhanced_command_parser_checkin_patterns_behavior\",\n        \"test_enhanced_command_parser_confidence_calculation_behavior\",\n        \"test_enhanced_command_parser_consistency_behavior\",\n        \"test_enhanced_command_parser_empty_message_behavior\",\n        \"test_enhanced_command_parser_end_to_end_behavior\",\n        \"test_enhanced_command_parser_entity_extraction_behavior\",\n        \"test_enhanced_command_parser_error_handling_behavior\",\n        \"test_enhanced_command_parser_fallback_behavior\",\n        \"test_enhanced_command_parser_help_patterns_behavior\",\n        \"test_enhanced_command_parser_initialization_behavior\",\n        \"test_enhanced_command_parser_memory_behavior\",\n        \"test_enhanced_command_parser_pattern_compilation_behavior\",\n        \"test_enhanced_command_parser_performance_behavior\",\n        \"test_enhanced_command_parser_task_completion_patterns_behavior\",\n        \"test_enhanced_command_parser_task_creation_patterns_behavior\",\n        \"test_enhanced_command_parser_task_listing_patterns_behavior\",\n        \"test_enhanced_command_parser_thread_safety_behavior\",\n        \"test_enhanced_command_parser_unknown_patterns_behavior\",\n        \"test_enhanced_command_parser_with_real_ai_chatbot_behavior\",\n        \"test_enhanced_command_parser_with_real_handlers_behavior\"\n      ],\n      \"`tests/behavior/test_error_handling_coverage_expansion_phase3_final.py\": [\n        \"inner_function\",\n        \"outer_function\",\n        \"test_configuration_error_initialization\",\n        \"test_data_error_initialization\",\n        \"test_error_handler_global_instance\",\n        \"test_error_handler_global_instance_functionality\",\n        \"test_error_handler_initialization\",\n        \"test_error_handler_retry_limits\",\n        \"test_error_handler_with_attribute_error\",\n        \"test_error_handler_with_bytes_warning\",\n        \"test_error_handler_with_complex_context\",\n        \"test_error_handler_with_configuration_error\",\n        \"test_error_handler_with_connection_error\",\n        \"test_error_handler_with_context\",\n        \"test_error_handler_with_custom_operation\",\n        \"test_error_handler_with_data_error\",\n        \"test_error_handler_with_default_operation\",\n        \"test_error_handler_with_deprecation_warning\",\n        \"test_error_handler_with_empty_context\",\n        \"test_error_handler_with_file_operation_error\",\n        \"test_error_handler_with_future_warning\",\n        \"test_error_handler_with_generic_exception\",\n        \"test_error_handler_with_import_error\",\n        \"test_error_handler_with_import_warning\",\n        \"test_error_handler_with_index_error\",\n        \"test_error_handler_with_io_error\",\n        \"test_error_handler_with_key_error\",\n        \"test_error_handler_with_long_operation_name\",\n        \"test_error_handler_with_mhm_error\",\n        \"test_error_handler_with_module_not_found_error\",\n        \"test_error_handler_with_multiple_strategies\",\n        \"test_error_handler_with_no_context\",\n        \"test_error_handler_with_none_context_and_error\",\n        \"test_error_handler_with_none_error\",\n        \"test_error_handler_with_os_error\",\n        \"test_error_handler_with_pending_deprecation_warning\",\n        \"test_error_handler_with_permission_error\",\n        \"test_error_handler_with_recovery_strategy\",\n        \"test_error_handler_with_resource_warning\",\n        \"test_error_handler_with_runtime_error\",\n        \"test_error_handler_with_runtime_warning\",\n        \"test_error_handler_with_special_characters_in_context\",\n        \"test_error_handler_with_syntax_warning\",\n        \"test_error_handler_with_timeout_error\",\n        \"test_error_handler_with_type_error\",\n        \"test_error_handler_with_unicode_decode_error\",\n        \"test_error_handler_with_unicode_encode_error\",\n        \"test_error_handler_with_unicode_error\",\n        \"test_error_handler_with_unicode_translate_error\",\n        \"test_error_handler_with_unicode_warning\",\n        \"test_error_handler_with_unrecoverable_error\",\n        \"test_error_handler_with_user_friendly_false\",\n        \"test_error_handler_with_user_friendly_true\",\n        \"test_error_handler_with_user_warning\",\n        \"test_error_handler_with_warning\",\n        \"test_error_recovery_strategy_base_class\",\n        \"test_file_not_found_recovery_strategy\",\n        \"test_file_not_found_recovery_strategy_with_empty_file_path\",\n        \"test_file_not_found_recovery_strategy_with_invalid_file_path\",\n        \"test_file_not_found_recovery_strategy_without_file_path\",\n        \"test_file_operation_error_initialization\",\n        \"test_function\",\n        \"test_handle_errors_decorator_custom_return\",\n        \"test_handle_errors_decorator_double_failure\",\n        \"test_handle_errors_decorator_exception\",\n        \"test_handle_errors_decorator_nested_exceptions\",\n        \"test_handle_errors_decorator_operation_name\",\n        \"test_handle_errors_decorator_recovery_failure\",\n        \"test_handle_errors_decorator_recovery_success\",\n        \"test_handle_errors_decorator_specific_exception\",\n        \"test_handle_errors_decorator_success\",\n        \"test_handle_errors_decorator_user_friendly_false\",\n        \"test_handle_errors_decorator_with_all_parameters\",\n        \"test_handle_errors_decorator_with_args_kwargs\",\n        \"test_handle_errors_decorator_with_complex_context\",\n        \"test_handle_errors_decorator_with_context\",\n        \"test_handle_errors_decorator_with_exception_in_args\",\n        \"test_handle_errors_decorator_with_operation_and_context\",\n        \"test_json_decode_recovery_strategy\",\n        \"test_json_decode_recovery_strategy_recover\",\n        \"test_mhm_error_initialization\"\n      ],\n      \"`tests/behavior/test_interaction_handlers_behavior.py\": [\n        \"_create_test_user\",\n        \"test_all_handlers_return_proper_examples\",\n        \"test_all_handlers_return_proper_help\",\n        \"test_analytics_handler_can_handle_intents\",\n        \"test_checkin_handler_can_handle_intents\",\n        \"test_checkin_handler_starts_checkin_flow\",\n        \"test_get_interaction_handler_returns_correct_handler\",\n        \"test_handler_error_handling\",\n        \"test_handler_registry_creates_all_handlers\",\n        \"test_handler_response_structure\",\n        \"test_help_handler_can_handle_intents\",\n        \"test_help_handler_provides_help\",\n        \"test_profile_handler_can_handle_intents\",\n        \"test_profile_handler_shows_actual_profile\",\n        \"test_schedule_management_handler_can_handle_intents\",\n        \"test_task_management_handler_can_handle_intents\",\n        \"test_task_management_handler_completes_actual_task\",\n        \"test_task_management_handler_creates_actual_task\",\n        \"test_task_management_handler_lists_actual_tasks\"\n      ],\n      \"`tests/behavior/test_interaction_handlers_coverage_expansion.py\": [\n        \"_mock_get_user_data\",\n        \"get_checkin_history\",\n        \"get_mood_trends\",\n        \"mock_communication_manager\",\n        \"test_checkin_history_displays_scale_out_of_5\",\n        \"test_checkin_status_displays_scale_out_of_5\",\n        \"test_data_dir\",\n        \"test_get_examples\",\n        \"test_get_help\",\n        \"test_handle_checkin_response_with_invalid_response\",\n        \"test_handle_checkin_status\",\n        \"test_handle_commands\",\n        \"test_handle_complete_task_no_identifier\",\n        \"test_handle_complete_task_not_found\",\n        \"test_handle_complete_task_suggestion_logic\",\n        \"test_handle_complete_task_with_identifier\",\n        \"test_handle_complete_task_with_no_tasks\",\n        \"test_handle_continue_checkin\",\n        \"test_handle_create_task_invalid_priority\",\n        \"test_handle_create_task_with_all_properties\",\n        \"test_handle_create_task_with_invalid_priority\",\n        \"test_handle_create_task_with_invalid_recurrence_pattern\",\n        \"test_handle_create_task_with_recurrence_settings\",\n        \"test_handle_create_task_with_title_only\",\n        \"test_handle_delete_task_no_identifier\",\n        \"test_handle_delete_task_with_identifier\",\n        \"test_handle_delete_task_with_invalid_task_id\",\n        \"test_handle_edit_task_with_invalid_task_id\",\n        \"test_handle_examples\",\n        \"test_handle_help\",\n        \"test_handle_help_with_invalid_handler\",\n        \"test_handle_help_with_specific_handler\",\n        \"test_handle_list_tasks_due_soon_filter\",\n        \"test_handle_list_tasks_no_tasks\",\n        \"test_handle_list_tasks_overdue_filter\",\n        \"test_handle_list_tasks_with_filters\",\n        \"test_handle_list_tasks_with_priority_filter\",\n        \"test_handle_list_tasks_with_tag_filter\",\n        \"test_handle_list_tasks_with_tasks\",\n        \"test_handle_mood_trends\",\n        \"test_handle_profile_stats\",\n        \"test_handle_show_analytics\",\n        \"test_handle_show_analytics_with_no_data\",\n        \"test_handle_show_analytics_with_specific_metric\",\n        \"test_handle_show_profile\",\n        \"test_handle_show_profile_with_missing_data\",\n        \"test_handle_show_schedule\",\n        \"test_handle_show_schedule_with_no_schedules\",\n        \"test_handle_start_checkin_new_user\",\n        \"test_handle_start_checkin_with_disabled_checkins\",\n        \"test_handle_start_checkin_with_no_questions\",\n        \"test_handle_task_stats_no_data\",\n        \"test_handle_task_stats_with_analytics\",\n        \"test_handle_unknown_intent\",\n        \"test_handle_update_profile\",\n        \"test_handle_update_profile_with_invalid_data\",\n        \"test_handle_update_schedule\",\n        \"test_handle_update_schedule_with_invalid_period\",\n        \"test_handle_update_task_no_updates\",\n        \"test_handle_update_task_with_updates\",\n        \"test_handler_with_missing_user_data\",\n        \"test_mood_trends_displays_scale_out_of_5\",\n        \"test_parse_relative_date_existing_date\",\n        \"test_parse_relative_date_next_month\",\n        \"test_parse_relative_date_next_week\",\n        \"test_parse_relative_date_today\",\n        \"test_parse_relative_date_tomorrow\",\n        \"test_profile_get_help_is_text\",\n        \"test_quantitative_summary_respects_enabled_fields\",\n        \"test_show_profile_not_raw_json\",\n        \"test_task_management_handler_error_handling\"\n      ],\n      \"`tests/behavior/test_logger_behavior.py\": [\n        \"temp_log_dir\",\n        \"test_backup_directory_rotating_handler_creation_real_behavior\",\n        \"test_cleanup_old_logs_real_behavior\",\n        \"test_disable_module_logging_real_behavior\",\n        \"test_force_restart_logging_real_behavior\",\n        \"test_get_log_file_info_real_behavior\",\n        \"test_get_log_level_from_env_real_behavior\",\n        \"test_get_logger_creation_real_behavior\",\n        \"test_get_logger_same_name_real_behavior\",\n        \"test_logger_environment_integration_real_behavior\",\n        \"test_logger_full_workflow_real_behavior\",\n        \"test_set_console_log_level_real_behavior\",\n        \"test_set_verbose_mode_real_behavior\",\n        \"test_setup_logging_idempotent_real_behavior\",\n        \"test_suppress_noisy_logging_real_behavior\",\n        \"test_verbose_mode_toggle_real_behavior\"\n      ],\n      \"`tests/behavior/test_logger_coverage_expansion.py\": [\n        \"_setup\",\n        \"create_record\",\n        \"log_messages\",\n        \"teardown_method\",\n        \"test_backup_directory_rotating_file_handler_initialization_real_behavior\",\n        \"test_backup_directory_rotating_file_handler_rollover_disabled_real_behavior\",\n        \"test_backup_directory_rotating_file_handler_rollover_real_behavior\",\n        \"test_cleanup_old_archives_real_behavior\",\n        \"test_cleanup_old_logs_real_behavior\",\n        \"test_component_logger_custom_level_real_behavior\",\n        \"test_component_logger_initialization_real_behavior\",\n        \"test_component_logger_logging_methods_real_behavior\",\n        \"test_component_logger_structured_data_real_behavior\",\n        \"test_compress_old_logs_no_files_real_behavior\",\n        \"test_compress_old_logs_real_behavior\",\n        \"test_get_component_logger_real_behavior\",\n        \"test_get_log_file_info_real_behavior\",\n        \"test_get_logger_real_behavior\",\n        \"test_get_verbose_mode_real_behavior\",\n        \"test_heartbeat_warning_filter_real_behavior\",\n        \"test_heartbeat_warning_filter_summary_logging_real_behavior\",\n        \"test_logger_backup_directory_creation_real_behavior\",\n        \"test_logger_concurrent_access_safety\",\n        \"test_logger_concurrent_file_access\",\n        \"test_logger_encoding_handling_real_behavior\",\n        \"test_logger_error_handling_real_behavior\",\n        \"test_logger_error_recovery_with_real_operations\",\n        \"test_logger_file_rotation_edge_cases\",\n        \"test_logger_formatter_real_behavior\",\n        \"test_logger_integration_with_multiple_components\",\n        \"test_logger_level_filtering_real_behavior\",\n        \"test_logger_memory_behavior\",\n        \"test_logger_performance_under_load\",\n        \"test_logger_thread_safety_behavior\",\n        \"test_set_verbose_mode_real_behavior\",\n        \"test_setup_logging_real_behavior\",\n        \"test_suppress_noisy_logging_real_behavior\",\n        \"test_toggle_verbose_logging_real_behavior\",\n        \"write_logs\"\n      ],\n      \"`tests/behavior/test_logger_coverage_expansion_phase3_simple.py\": [\n        \"test_backup_directory_rotating_file_handler_initialization_simple\",\n        \"test_backup_directory_rotating_file_handler_rollover_simple\",\n        \"test_cleanup_old_archives_simple\",\n        \"test_cleanup_old_logs_simple\",\n        \"test_component_logger_channels_alias_simple\",\n        \"test_component_logger_error_handling_during_creation_simple\",\n        \"test_component_logger_unknown_component_fallback_simple\",\n        \"test_compress_old_logs_simple\",\n        \"test_environment_detection_functions_simple\",\n        \"test_get_log_file_info_function\",\n        \"test_get_log_file_info_with_nonexistent_files\",\n        \"test_heartbeat_warning_filter_simple\",\n        \"test_logger_integration_with_multiple_components_simple\",\n        \"test_logger_performance_under_high_load_simple\",\n        \"test_setup_logging_environment_detection_simple\",\n        \"test_suppress_noisy_logging_simple\",\n        \"test_verbose_mode_functions_simple\"\n      ],\n      \"`tests/behavior/test_message_behavior.py\": [\n        \"test_add_message_file_error\",\n        \"test_add_message_success\",\n        \"test_create_message_file_from_defaults_success\",\n        \"test_delete_message_file_error\",\n        \"test_delete_message_not_found\",\n        \"test_delete_message_success\",\n        \"test_edit_message_file_error\",\n        \"test_edit_message_not_found\",\n        \"test_edit_message_success\",\n        \"test_ensure_user_message_files_success\",\n        \"test_full_message_lifecycle\",\n        \"test_get_message_categories_custom\",\n        \"test_get_message_categories_default\",\n        \"test_get_message_categories_empty\",\n        \"test_get_message_categories_success\",\n        \"test_get_recent_messages_empty\",\n        \"test_get_recent_messages_success\",\n        \"test_load_default_messages_file_not_found\",\n        \"test_load_default_messages_invalid_json\",\n        \"test_load_default_messages_success\",\n        \"test_store_sent_message_file_error\",\n        \"test_store_sent_message_success\",\n        \"test_update_message_success\"\n      ],\n      \"`tests/behavior/test_observability_logging.py\": [\n        \"test_component_logs_isolation_and_errors_capture\"\n      ],\n      \"`tests/behavior/test_response_tracking_behavior.py\": [\n        \"test_get_recent_chat_interactions_returns_chat_data\",\n        \"test_get_recent_checkins_returns_checkin_data\",\n        \"test_get_recent_responses_returns_actual_data\",\n        \"test_get_user_checkin_preferences_returns_actual_preferences\",\n        \"test_get_user_checkin_questions_returns_actual_questions\",\n        \"test_get_user_info_for_tracking_returns_complete_user_info\",\n        \"test_is_user_checkins_enabled_checks_actual_account_data\",\n        \"test_response_tracking_concurrent_access_safety\",\n        \"test_response_tracking_data_integrity\",\n        \"test_response_tracking_error_handling_preserves_system_stability\",\n        \"test_response_tracking_error_recovery_with_real_files\",\n        \"test_response_tracking_integration_with_user_data\",\n        \"test_response_tracking_performance_under_load\",\n        \"test_store_chat_interaction_creates_chat_log\",\n        \"test_store_user_response_creates_actual_file\",\n        \"test_store_user_response_persists_multiple_entries\",\n        \"test_track_user_response_stores_chat_interaction\",\n        \"test_track_user_response_stores_checkin\",\n        \"test_track_user_response_stores_generic_response\"\n      ],\n      \"`tests/behavior/test_schedule_management_behavior.py\": [\n        \"test_clear_schedule_periods_cache_removes_entries\",\n        \"test_get_current_day_names_returns_actual_days\",\n        \"test_get_schedule_time_periods_creates_cache\",\n        \"test_schedule_cache_invalidation\",\n        \"test_schedule_period_activation_integration\",\n        \"test_schedule_period_crud_with_usercontext_mocking\",\n        \"test_schedule_period_edge_cases\",\n        \"test_schedule_period_operations_with_error_handling\",\n        \"test_schedule_period_operations_with_real_user_data\",\n        \"test_schedule_period_operations_with_scheduler_manager\",\n        \"test_schedule_period_validation_errors\",\n        \"test_set_schedule_days_persists_day_changes\",\n        \"test_set_schedule_period_active_persists_changes\",\n        \"test_set_schedule_periods_persists_complete_data\",\n        \"test_time_conversion_functions_work_correctly\",\n        \"test_validate_and_format_time_enforces_rules\"\n      ],\n      \"`tests/behavior/test_scheduler_behavior.py\": [\n        \"mock_communication_manager\",\n        \"scheduler_manager\",\n        \"test_cleanup_old_tasks\",\n        \"test_get_random_time_within_period_invalid_times\",\n        \"test_get_random_time_within_period_valid_times\",\n        \"test_get_user_categories_no_user\",\n        \"test_get_user_categories_success\",\n        \"test_get_user_checkin_preferences_no_user\",\n        \"test_get_user_checkin_preferences_success\",\n        \"test_get_user_task_preferences_no_user\",\n        \"test_get_user_task_preferences_success\",\n        \"test_is_job_for_category_no_jobs\",\n        \"test_is_job_for_category_with_matching_job\",\n        \"test_is_job_for_category_with_non_matching_job\",\n        \"test_is_time_conflict_no_conflicts\",\n        \"test_log_scheduled_tasks\",\n        \"test_random_time_generation_consistency\",\n        \"test_schedule_all_task_reminders_disabled\",\n        \"test_schedule_all_task_reminders_success\",\n        \"test_scheduler_lifecycle\",\n        \"test_scheduler_manager_initialization\",\n        \"test_scheduler_with_empty_user_list\",\n        \"test_scheduler_with_invalid_user_data\",\n        \"test_scheduler_with_mock_users\",\n        \"test_stop_scheduler_no_thread\"\n      ],\n      \"`tests/behavior/test_scheduler_coverage_expansion.py\": [\n        \"mock_communication_manager\",\n        \"scheduler_manager\",\n        \"test_cleanup_old_tasks_real_behavior\",\n        \"test_get_random_time_within_period_future_scheduling\",\n        \"test_get_random_time_within_period_invalid_period\",\n        \"test_get_random_time_within_period_missing_times\",\n        \"test_get_random_time_within_task_period_real_behavior\",\n        \"test_get_user_checkin_preferences_real_behavior\",\n        \"test_handle_sending_scheduled_message_no_communication_manager\",\n        \"test_handle_sending_scheduled_message_success\",\n        \"test_handle_sending_scheduled_message_with_retries\",\n        \"test_handle_task_reminder_completed_task\",\n        \"test_handle_task_reminder_no_communication_manager\",\n        \"test_handle_task_reminder_success\",\n        \"test_is_time_conflict_no_conflict_different_user\",\n        \"test_is_time_conflict_with_conflict_real_behavior\",\n        \"test_process_category_schedule_real_behavior\",\n        \"test_process_user_schedules_real_behavior\",\n        \"test_run_daily_scheduler_thread_creation_real_behavior\",\n        \"test_schedule_all_task_reminders_missing_times_real_behavior\",\n        \"test_schedule_all_task_reminders_no_tasks_real_behavior\",\n        \"test_schedule_all_task_reminders_real_behavior\",\n        \"test_schedule_all_task_reminders_standalone_real_behavior\",\n        \"test_schedule_all_task_reminders_tasks_disabled\",\n        \"test_schedule_all_task_reminders_with_tasks_real_behavior\",\n        \"test_schedule_all_users_immediately_real_behavior\",\n        \"test_schedule_checkin_at_exact_time_real_behavior\",\n        \"test_schedule_checkin_missing_period_real_behavior\",\n        \"test_schedule_checkin_missing_start_time_real_behavior\",\n        \"test_schedule_daily_message_job_no_periods\",\n        \"test_schedule_daily_message_job_real_behavior\",\n        \"test_schedule_message_for_period_max_retries_exceeded\",\n        \"test_schedule_message_for_period_real_behavior\",\n        \"test_schedule_message_for_period_time_conflict_retry\",\n        \"test_schedule_new_user_real_behavior\",\n        \"test_schedule_task_reminder_at_time_completed_task\",\n        \"test_schedule_task_reminder_at_time_real_behavior\",\n        \"test_scheduler_loop_daily_job_scheduling_real_behavior\",\n        \"test_scheduler_loop_error_handling_real_behavior\",\n        \"test_scheduler_loop_stop_event_handling_real_behavior\",\n        \"test_scheduler_manager_initialization_real_behavior\",\n        \"test_scheduler_manager_no_communication_manager\",\n        \"test_select_task_for_reminder_due_today_weighting_real_behavior\",\n        \"test_select_task_for_reminder_empty_list_real_behavior\",\n        \"test_select_task_for_reminder_exception_handling_real_behavior\",\n        \"test_select_task_for_reminder_invalid_date_format_real_behavior\",\n        \"test_select_task_for_reminder_large_task_list_real_behavior\",\n        \"test_select_task_for_reminder_month_proximity_weighting_real_behavior\",\n        \"test_select_task_for_reminder_no_due_date_weighting_real_behavior\",\n        \"test_select_task_for_reminder_overdue_weighting_real_behavior\",\n        \"test_select_task_for_reminder_priority_weighting_real_behavior\",\n        \"test_select_task_for_reminder_single_task_real_behavior\",\n        \"test_select_task_for_reminder_week_proximity_weighting_real_behavior\",\n        \"test_select_task_for_reminder_zero_weights_fallback_real_behavior\",\n        \"test_set_wake_timer_failure_handling\",\n        \"test_set_wake_timer_process_failure_real_behavior\",\n        \"test_set_wake_timer_real_behavior\",\n        \"test_set_wake_timer_success_real_behavior\",\n        \"test_stop_scheduler_no_thread_graceful_handling\",\n        \"test_stop_scheduler_thread_cleanup_real_behavior\"\n      ],\n      \"`tests/behavior/test_service_behavior.py\": [\n        \"mock_get_user_data_side_effect\",\n        \"mock_join_side_effect\",\n        \"mock_shutdown_side_effect\",\n        \"mock_sleep_side_effect\",\n        \"mock_start_side_effect\",\n        \"service\",\n        \"temp_base_dir\",\n        \"temp_dir\",\n        \"test_check_and_fix_logging_real_behavior\",\n        \"test_check_reschedule_requests_real_behavior\",\n        \"test_check_test_message_requests_real_behavior\",\n        \"test_cleanup_reschedule_requests_real_behavior\",\n        \"test_cleanup_test_message_requests_real_behavior\",\n        \"test_emergency_shutdown_real_behavior\",\n        \"test_get_user_categories_real_behavior\",\n        \"test_initialize_paths_real_behavior\",\n        \"test_main_function_real_behavior\",\n        \"test_real_cleanup_removes_actual_files\",\n        \"test_real_emergency_shutdown_changes_service_state\",\n        \"test_real_file_based_communication_creates_and_removes_files\",\n        \"test_real_get_user_categories_returns_actual_data\",\n        \"test_real_service_error_recovery_stops_service\",\n        \"test_real_service_initialization_creates_actual_service\",\n        \"test_real_signal_handler_changes_service_state\",\n        \"test_run_service_loop_shutdown_file_detection_real_behavior\",\n        \"test_service_error_recovery_real_behavior\",\n        \"test_service_file_based_communication_integration_real_behavior\",\n        \"test_service_initialization\",\n        \"test_service_integration_with_managers_real_behavior\",\n        \"test_service_loop_heartbeat_logging_real_behavior\",\n        \"test_shutdown_real_behavior\",\n        \"test_signal_handler_real_behavior\",\n        \"test_start_service_real_behavior\",\n        \"test_validate_configuration_real_behavior\"\n      ],\n      \"`tests/behavior/test_service_utilities_behavior.py\": [\n        \"test_create_reschedule_request_creates_actual_file\",\n        \"test_create_reschedule_request_skips_when_service_not_running\",\n        \"test_is_service_running_checks_actual_processes\",\n        \"test_is_service_running_handles_process_errors_gracefully\",\n        \"test_load_and_localize_datetime_creates_timezone_aware_datetime\",\n        \"test_load_and_localize_datetime_raises_error_for_invalid_format\",\n        \"test_load_and_localize_datetime_raises_error_for_invalid_timezone\",\n        \"test_service_utilities_concurrent_access_safety\",\n        \"test_service_utilities_data_integrity\",\n        \"test_service_utilities_error_handling_preserves_system_stability\",\n        \"test_service_utilities_error_recovery_with_real_operations\",\n        \"test_service_utilities_integration_with_reschedule_workflow\",\n        \"test_service_utilities_performance_under_load\",\n        \"test_throttler_handles_invalid_timestamp_format\",\n        \"test_throttler_initialization_creates_proper_structure\",\n        \"test_throttler_should_run_respects_interval\",\n        \"test_throttler_should_run_returns_true_on_first_call\",\n        \"test_title_case_converts_text_properly\",\n        \"test_title_case_handles_special_words_correctly\",\n        \"test_title_case_preserves_mixed_case_words\",\n        \"test_wait_for_network_returns_false_when_network_unavailable\",\n        \"test_wait_for_network_returns_true_when_network_available\"\n      ],\n      \"`tests/behavior/test_static_logging_check.py\": [\n        \"test_repo_static_logging_check_passes\"\n      ],\n      \"`tests/behavior/test_task_behavior.py\": [\n        \"temp_dir\",\n        \"test_are_tasks_enabled\",\n        \"test_complete_task\",\n        \"test_create_task\",\n        \"test_delete_task\",\n        \"test_ensure_task_directory\",\n        \"test_get_task_by_id\",\n        \"test_get_tasks_due_soon\",\n        \"test_get_user_task_stats\",\n        \"test_load_active_tasks\",\n        \"test_save_active_tasks\",\n        \"test_update_task\",\n        \"user_id\"\n      ],\n      \"`tests/behavior/test_task_management_coverage_expansion.py\": [\n        \"mock_user_data_dir\",\n        \"temp_dir\",\n        \"test_add_user_task_tag_empty_tag_real_behavior\",\n        \"test_add_user_task_tag_empty_user_id_real_behavior\",\n        \"test_add_user_task_tag_existing_tag_real_behavior\",\n        \"test_add_user_task_tag_new_tag_real_behavior\",\n        \"test_are_tasks_enabled_empty_user_id_real_behavior\",\n        \"test_are_tasks_enabled_real_behavior\",\n        \"test_complete_task_not_found_real_behavior\",\n        \"test_complete_task_with_completion_data_real_behavior\",\n        \"test_complete_task_with_default_completion_real_behavior\",\n        \"test_create_task_with_all_parameters_real_behavior\",\n        \"test_create_task_with_empty_title_real_behavior\",\n        \"test_create_task_with_empty_user_id_real_behavior\",\n        \"test_create_task_with_minimal_parameters_real_behavior\",\n        \"test_delete_task_not_found_real_behavior\",\n        \"test_delete_task_real_behavior\",\n        \"test_ensure_task_directory_existing_structure_real_behavior\",\n        \"test_ensure_task_directory_real_behavior\",\n        \"test_ensure_task_directory_with_empty_user_id_real_behavior\",\n        \"test_ensure_task_directory_with_none_user_id_real_behavior\",\n        \"test_get_task_by_id_active_task_real_behavior\",\n        \"test_get_task_by_id_completed_task_real_behavior\",\n        \"test_get_task_by_id_not_found_real_behavior\",\n        \"test_get_tasks_due_soon_empty_user_id_real_behavior\",\n        \"test_get_tasks_due_soon_real_behavior\",\n        \"test_get_tasks_due_soon_with_invalid_date_real_behavior\",\n        \"test_get_user_task_stats_empty_user_id_real_behavior\",\n        \"test_get_user_task_stats_error_handling_real_behavior\",\n        \"test_get_user_task_stats_real_behavior\",\n        \"test_get_user_task_tags_empty_user_id_real_behavior\",\n        \"test_get_user_task_tags_real_behavior\",\n        \"test_load_active_tasks_empty_file_real_behavior\",\n        \"test_load_active_tasks_missing_file_real_behavior\",\n        \"test_load_active_tasks_real_behavior\",\n        \"test_load_completed_tasks_real_behavior\",\n        \"test_remove_user_task_tag_not_found_real_behavior\",\n        \"test_remove_user_task_tag_real_behavior\",\n        \"test_restore_task_not_found_real_behavior\",\n        \"test_restore_task_real_behavior\",\n        \"test_restore_task_with_reminders_real_behavior\",\n        \"test_save_active_tasks_real_behavior\",\n        \"test_save_active_tasks_with_empty_user_id_real_behavior\",\n        \"test_save_completed_tasks_real_behavior\",\n        \"test_schedule_task_reminders_empty_periods_real_behavior\",\n        \"test_schedule_task_reminders_no_scheduler_real_behavior\",\n        \"test_schedule_task_reminders_real_behavior\",\n        \"test_setup_default_task_tags_empty_user_id_real_behavior\",\n        \"test_setup_default_task_tags_existing_user_real_behavior\",\n        \"test_setup_default_task_tags_new_user_real_behavior\",\n        \"test_update_task_not_found_real_behavior\",\n        \"test_update_task_real_behavior\",\n        \"test_update_task_with_reminder_periods_real_behavior\",\n        \"user_id\"\n      ],\n      \"`tests/behavior/test_ui_app_behavior.py\": [\n        \"qt_app\",\n        \"test_confirm_test_message_user_cancels_real_behavior\",\n        \"test_confirm_test_message_user_confirms_real_behavior\",\n        \"test_send_actual_test_message_creates_request_file_real_behavior\",\n        \"test_send_test_message_edge_case_negative_index_real_behavior\",\n        \"test_send_test_message_invalid_category_real_behavior\",\n        \"test_send_test_message_no_category_selected_real_behavior\",\n        \"test_send_test_message_no_user_selected_real_behavior\",\n        \"test_send_test_message_service_manager_error_real_behavior\",\n        \"test_send_test_message_service_not_running_real_behavior\",\n        \"test_send_test_message_successful_flow_real_behavior\",\n        \"test_service_manager_configuration_validation_checks_actual_config\",\n        \"test_service_manager_configuration_validation_handles_invalid_config\",\n        \"test_service_manager_initialization_creates_proper_structure\",\n        \"test_service_manager_service_status_check_checks_actual_processes\",\n        \"test_service_manager_service_status_check_handles_no_service\",\n        \"test_ui_app_category_management_opens_category_dialog\",\n        \"test_ui_app_category_selection_enables_content_management\",\n        \"test_ui_app_checkin_management_opens_checkin_dialog\",\n        \"test_ui_app_communication_settings_opens_channel_management\",\n        \"test_ui_app_concurrent_access_safety\",\n        \"test_ui_app_data_integrity\",\n        \"test_ui_app_error_handling_preserves_system_stability\",\n        \"test_ui_app_error_recovery_with_real_operations\",\n        \"test_ui_app_initialization_creates_proper_structure\",\n        \"test_ui_app_integration_with_service_manager\",\n        \"test_ui_app_new_user_creation_opens_account_creator\",\n        \"test_ui_app_performance_under_load\",\n        \"test_ui_app_personalization_opens_user_profile_dialog\",\n        \"test_ui_app_task_management_opens_task_dialog\",\n        \"test_ui_app_user_list_refresh_loads_actual_user_data\",\n        \"test_ui_app_user_selection_loads_user_categories\"\n      ],\n      \"`tests/behavior/test_user_context_behavior.py\": [\n        \"test_add_conversation_exchange_actually_stores_data\",\n        \"test_add_conversation_exchange_maintains_history_limit\",\n        \"test_format_context_for_ai_creates_readable_string\",\n        \"test_format_context_for_ai_handles_empty_context\",\n        \"test_get_active_schedules_identifies_active_periods\",\n        \"test_get_conversation_history_handles_empty_history\",\n        \"test_get_conversation_history_returns_actual_data\",\n        \"test_get_conversation_insights_analyzes_actual_data\",\n        \"test_get_current_user_context_handles_no_user_gracefully\",\n        \"test_get_current_user_context_uses_usercontext_singleton\",\n        \"test_get_mood_trends_analyzes_checkin_data\",\n        \"test_get_recent_activity_integrates_multiple_sources\",\n        \"test_get_user_context_creates_complete_structure\",\n        \"test_get_user_context_without_conversation_history\",\n        \"test_get_user_profile_uses_existing_infrastructure\",\n        \"test_user_context_manager_cleanup_and_resource_management\",\n        \"test_user_context_manager_concurrent_access_safety\",\n        \"test_user_context_manager_error_handling_preserves_system_stability\",\n        \"test_user_context_manager_error_recovery_with_real_files\",\n        \"test_user_context_manager_initialization_creates_structure\",\n        \"test_user_context_manager_integration_with_ai_chatbot\",\n        \"test_user_context_manager_performance_under_load\",\n        \"test_user_context_manager_with_real_user_data\"\n      ],\n      \"`tests/behavior/test_user_management_coverage_expansion.py\": [\n        \"_setup\",\n        \"mock_path\",\n        \"teardown_method\",\n        \"test_cache_management_real_behavior\",\n        \"test_cache_timeout_real_behavior\",\n        \"test_create_default_schedule_periods_checkin_real_behavior\",\n        \"test_create_default_schedule_periods_no_category_real_behavior\",\n        \"test_create_default_schedule_periods_other_category_real_behavior\",\n        \"test_create_default_schedule_periods_tasks_real_behavior\",\n        \"test_data_validation_real_behavior\",\n        \"test_error_handling_load_account_real_behavior\",\n        \"test_error_handling_save_account_real_behavior\",\n        \"test_file_persistence_real_behavior\",\n        \"test_get_all_user_ids_no_directory_real_behavior\",\n        \"test_get_all_user_ids_real_behavior\",\n        \"test_get_available_data_types_real_behavior\",\n        \"test_get_data_type_info_real_behavior\",\n        \"test_load_account_data_auto_create_real_behavior\",\n        \"test_load_account_data_no_auto_create_real_behavior\",\n        \"test_load_account_data_real_behavior\",\n        \"test_load_context_data_auto_create_real_behavior\",\n        \"test_load_context_data_real_behavior\",\n        \"test_load_preferences_data_auto_create_real_behavior\",\n        \"test_load_preferences_data_real_behavior\",\n        \"test_load_schedules_data_auto_create_real_behavior\",\n        \"test_load_schedules_data_real_behavior\",\n        \"test_loader\",\n        \"test_register_data_loader_real_behavior\",\n        \"test_save_account_data_invalid_user_id_real_behavior\",\n        \"test_save_account_data_real_behavior\",\n        \"test_save_context_data_real_behavior\",\n        \"test_save_preferences_data_real_behavior\",\n        \"test_save_schedules_data_invalid_user_id_real_behavior\",\n        \"test_save_schedules_data_real_behavior\",\n        \"test_update_user_schedules_invalid_user_id_real_behavior\",\n        \"test_update_user_schedules_real_behavior\",\n        \"test_user_data_concurrent_access_real_behavior\",\n        \"test_user_data_consistency_real_behavior\",\n        \"test_user_data_error_recovery_real_behavior\",\n        \"test_user_data_lifecycle_real_behavior\",\n        \"test_user_data_performance_real_behavior\",\n        \"user_operation\"\n      ],\n      \"`tests/behavior/test_utilities_demo.py\": [\n        \"test_basic_user_creation\",\n        \"test_comprehensive_user_types\",\n        \"test_consistent_user_data\",\n        \"test_custom_fields_user_creation\",\n        \"test_discord_user_creation\",\n        \"test_easy_maintenance\",\n        \"test_edge_case_users\",\n        \"test_email_user_creation\",\n        \"test_environment_management\",\n        \"test_flexible_configuration\",\n        \"test_full_featured_user_creation\",\n        \"test_minimal_user_creation\",\n        \"test_multiple_user_types_in_single_test\",\n        \"test_real_user_scenarios\",\n        \"test_reduced_code_duplication\",\n        \"test_scheduled_user_creation\",\n        \"test_user_data_consistency\",\n        \"test_user_data_factory_usage\"\n      ],\n      \"`tests/conftest.py\": [\n        \"__init__\",\n        \"_apply_get_user_data_shim_early\",\n        \"_fallback_read_from_files\",\n        \"_helper\",\n        \"_load_single_type\",\n        \"_missing_keys\",\n        \"_prune_old_files\",\n        \"_update_index\",\n        \"about\",\n        \"archive_old_backups\",\n        \"check_rotation_needed\",\n        \"cleanup_communication_manager\",\n        \"cleanup_conversation_manager\",\n        \"cleanup_old_archives\",\n        \"cleanup_test_users_after_session\",\n        \"cleanup_tmp_at_session_end\",\n        \"clear_user_caches_between_tests\",\n        \"critical\",\n        \"enforce_user_dir_locations\",\n        \"ensure_mock_config_applied\",\n        \"ensure_user_materialized\",\n        \"env_guard_and_restore\",\n        \"fix_user_data_loaders\",\n        \"force_test_data_directory\",\n        \"format\",\n        \"information\",\n        \"initialize_loader_import_order\",\n        \"isolate_logging\",\n        \"log_lifecycle_maintenance\",\n        \"materialize_user_minimal_via_public_apis\",\n        \"mock_ai_response\",\n        \"mock_communication_data\",\n        \"mock_config\",\n        \"mock_logger\",\n        \"mock_message_data\",\n        \"mock_schedule_data\",\n        \"mock_service_data\",\n        \"mock_task_data\",\n        \"mock_user_data\",\n        \"mock_user_data_with_messages\",\n        \"path_sanitizer\",\n        \"perform_lifecycle_maintenance\",\n        \"prune_test_artifacts_before_and_after_session\",\n        \"pytest_collection_modifyitems\",\n        \"pytest_configure\",\n        \"pytest_runtest_logreport\",\n        \"pytest_sessionfinish\",\n        \"pytest_sessionstart\",\n        \"question\",\n        \"register_log_file\",\n        \"register_user_data_loaders_session\",\n        \"rotate_all_logs\",\n        \"session_log_rotation_check\",\n        \"setup_component_log_rotation\",\n        \"setup_logging_isolation\",\n        \"setup_qmessagebox_patches\",\n        \"setup_test_logging\",\n        \"shim_get_user_data_to_invoke_loaders\",\n        \"temp_file\",\n        \"test_data_dir\",\n        \"test_path_factory\",\n        \"toggle_data_shim_per_marker\",\n        \"update_user_index_for_test\",\n        \"verify_required_loaders_present\",\n        \"verify_user_data_loader_registry\",\n        \"wait_until\",\n        \"warning\",\n        \"wrapped_get_user_data\"\n      ],\n      \"`tests/debug_file_paths.py\": [\n        \"test_debug_file_paths\"\n      ],\n      \"`tests/integration/test_account_lifecycle.py\": [\n        \"_ensure_minimal_structure\",\n        \"_materialize_and_verify\",\n        \"save_user_data_simple\",\n        \"setup_test_environment\",\n        \"test_add_message_category\",\n        \"test_add_schedule_period\",\n        \"test_complete_account_lifecycle\",\n        \"test_create_basic_account\",\n        \"test_create_full_account\",\n        \"test_disable_tasks_for_full_user\",\n        \"test_enable_checkins_for_basic_user\",\n        \"test_modify_schedule_period\",\n        \"test_reenable_tasks_for_user\",\n        \"test_remove_message_category\",\n        \"test_remove_schedule_period\"\n      ],\n      \"`tests/integration/test_account_management.py\": [\n        \"test_account_management_data_structures\",\n        \"test_account_management_functions\",\n        \"test_account_management_imports\",\n        \"test_account_management_integration\",\n        \"test_account_management_safe_operations\",\n        \"test_account_management_validation\"\n      ],\n      \"`tests/integration/test_user_creation.py\": [\n        \"test_basic_email_user_creation\",\n        \"test_corrupted_data_handling\",\n        \"test_discord_user_creation\",\n        \"test_duplicate_user_creation\",\n        \"test_email_validation\",\n        \"test_full_user_lifecycle\",\n        \"test_invalid_user_id\",\n        \"test_multiple_users_same_channel\",\n        \"test_required_fields_validation\",\n        \"test_timezone_validation\",\n        \"test_user_creation_with_schedules\",\n        \"test_user_with_all_features\",\n        \"test_user_with_custom_fields\",\n        \"test_username_validation\"\n      ],\n      \"`tests/test_isolation.py\": [\n        \"__enter__\",\n        \"__exit__\",\n        \"__init__\",\n        \"create_safe_scheduler_manager\",\n        \"ensure_test_isolation\",\n        \"mock_schtasks_call\",\n        \"mock_system_calls\",\n        \"verify_no_real_tasks_created\"\n      ],\n      \"`tests/test_utilities.py\": [\n        \"_create_user_files_directly\",\n        \"_create_user_files_directly__account_data\",\n        \"_create_user_files_directly__context_data\",\n        \"_create_user_files_directly__directory_structure\",\n        \"_create_user_files_directly__message_files\",\n        \"_create_user_files_directly__preferences_data\",\n        \"_create_user_files_directly__save_json\",\n        \"_create_user_files_directly__schedules_data\",\n        \"cleanup_test_data_environment\",\n        \"cleanup_test_environment\",\n        \"create_account_data\",\n        \"create_basic_user\",\n        \"create_basic_user__update_index\",\n        \"create_basic_user__verify_creation\",\n        \"create_basic_user__with_test_dir\",\n        \"create_context_data\",\n        \"create_corrupted_user_data\",\n        \"create_discord_user\",\n        \"create_discord_user__with_test_dir\",\n        \"create_email_user\",\n        \"create_email_user__impl\",\n        \"create_email_user__with_test_dir\",\n        \"create_full_featured_user\",\n        \"create_full_featured_user__impl\",\n        \"create_full_featured_user__with_test_dir\",\n        \"create_minimal_user\",\n        \"create_minimal_user__impl\",\n        \"create_minimal_user__with_test_dir\",\n        \"create_minimal_user__with_test_dir_and_get_id\",\n        \"create_minimal_user_and_get_id\",\n        \"create_preferences_data\",\n        \"create_schedules_data\",\n        \"create_test_message_data\",\n        \"create_test_schedule_data\",\n        \"create_test_task_data\",\n        \"create_test_user\",\n        \"create_user_with_complex_checkins\",\n        \"create_user_with_complex_checkins__impl\",\n        \"create_user_with_complex_checkins__with_test_dir\",\n        \"create_user_with_custom_fields\",\n        \"create_user_with_custom_fields__impl\",\n        \"create_user_with_disabilities\",\n        \"create_user_with_disabilities__impl\",\n        \"create_user_with_disabilities__with_test_dir\",\n        \"create_user_with_health_focus\",\n        \"create_user_with_health_focus__impl\",\n        \"create_user_with_health_focus__with_test_dir\",\n        \"create_user_with_inconsistent_data\",\n        \"create_user_with_inconsistent_data__impl\",\n        \"create_user_with_inconsistent_data__with_test_dir\",\n        \"create_user_with_limited_data\",\n        \"create_user_with_limited_data__impl\",\n        \"create_user_with_limited_data__with_test_dir\",\n        \"create_user_with_schedules\",\n        \"create_user_with_schedules__impl\",\n        \"create_user_with_task_focus\",\n        \"create_user_with_task_focus__impl\",\n        \"create_user_with_task_focus__with_test_dir\",\n        \"get_test_user_data\",\n        \"get_test_user_id_by_internal_username\",\n        \"setup_test_data_environment\",\n        \"setup_test_environment\",\n        \"verify_email_user_creation__with_test_dir\"\n      ],\n      \"`tests/ui/test_account_creation_ui.py\": [\n        \"dialog\",\n        \"mock_accept_impl\",\n        \"qapp\",\n        \"test_account_creation_real_behavior\",\n        \"test_dialog_initialization_real_behavior\",\n        \"test_duplicate_username_handling_real_behavior\",\n        \"test_feature_enablement_persistence_real_behavior\",\n        \"test_feature_enablement_real_behavior\",\n        \"test_feature_validation_real_behavior\",\n        \"test_file_system_error_handling_real_behavior\",\n        \"test_full_account_lifecycle_real_behavior\",\n        \"test_invalid_data_handling_real_behavior\",\n        \"test_messages_validation_real_behavior\",\n        \"test_multiple_users_same_features_real_behavior\",\n        \"test_timezone_validation_real_behavior\",\n        \"test_user_index_integration_real_behavior\",\n        \"test_user_profile_dialog_integration\",\n        \"test_username_validation_real_behavior\",\n        \"test_widget_data_collection_real_behavior\",\n        \"test_widget_error_handling_real_behavior\"\n      ],\n      \"`tests/ui/test_channel_management_dialog_coverage_expansion.py\": [\n        \"mock_user_data\",\n        \"test_get_selected_channel\",\n        \"test_save_channel_settings_exception_handling\",\n        \"test_save_channel_settings_removes_old_settings\",\n        \"test_save_channel_settings_success_discord\",\n        \"test_save_channel_settings_success_email\",\n        \"test_save_channel_settings_validation_error_discord_required\",\n        \"test_save_channel_settings_validation_error_email_required\",\n        \"test_save_channel_settings_validation_error_invalid_discord_id\",\n        \"test_save_channel_settings_validation_error_invalid_email\",\n        \"test_save_channel_settings_without_user\",\n        \"test_set_selected_channel\"\n      ],\n      \"`tests/ui/test_dialog_behavior.py\": [\n        \"dialog\",\n        \"qapp\",\n        \"test_category_selection_real_behavior\",\n        \"test_channel_configuration_real_behavior\",\n        \"test_checkin_enablement_real_behavior\",\n        \"test_data_loading_real_behavior\",\n        \"test_data_saving_real_behavior\",\n        \"test_dialog_initialization_real_behavior\",\n        \"test_dynamic_list_fields_real_behavior\",\n        \"test_task_statistics_real_behavior\"\n      ],\n      \"`tests/ui/test_dialog_coverage_expansion.py\": [\n        \"dialog\",\n        \"qapp\",\n        \"test_add_new_period_real_behavior\",\n        \"test_add_task_real_behavior\",\n        \"test_data_saving_real_behavior\",\n        \"test_delete_period_real_behavior\",\n        \"test_delete_task_real_behavior\",\n        \"test_dialog_initialization_real_behavior\",\n        \"test_dynamic_list_fields_real_behavior\",\n        \"test_edit_task_real_behavior\",\n        \"test_existing_data_loading_real_behavior\",\n        \"test_open_schedule_editor_function_real_behavior\",\n        \"test_profile_data_editing_real_behavior\",\n        \"test_task_completion_real_behavior\",\n        \"test_task_data_editing_real_behavior\",\n        \"test_task_saving_real_behavior\",\n        \"test_undo_delete_real_behavior\",\n        \"test_user_data\",\n        \"test_validation_error_handling_real_behavior\"\n      ],\n      \"`tests/ui/test_dialogs.py\": [\n        \"mock_save\",\n        \"test_dialog_imports\",\n        \"test_dialog_instantiation\",\n        \"test_generated_files_exist\",\n        \"test_ui_files_exist\",\n        \"test_user_data_access\",\n        \"test_widget_imports\"\n      ],\n      \"`tests/ui/test_ui_widgets_coverage_expansion.py\": [\n        \"app\",\n        \"cleanup_widgets\",\n        \"mock_message_boxes\",\n        \"mock_user_data_dir\",\n        \"on_delete_requested\",\n        \"on_tags_changed\",\n        \"on_values_changed\",\n        \"temp_dir\",\n        \"test_dynamic_list_container_add_blank_row_real_behavior\",\n        \"test_dynamic_list_container_duplicate_detection_real_behavior\",\n        \"test_dynamic_list_container_error_handling_real_behavior\",\n        \"test_dynamic_list_container_get_values_real_behavior\",\n        \"test_dynamic_list_container_initialization_real_behavior\",\n        \"test_dynamic_list_container_row_deleted_real_behavior\",\n        \"test_dynamic_list_container_row_edited_real_behavior\",\n        \"test_dynamic_list_container_set_values_real_behavior\",\n        \"test_dynamic_list_container_signal_emission_real_behavior\",\n        \"test_period_row_widget_all_period_initialization_real_behavior\",\n        \"test_period_row_widget_day_selection_real_behavior\",\n        \"test_period_row_widget_default_initialization_real_behavior\",\n        \"test_period_row_widget_delete_requested_signal_real_behavior\",\n        \"test_period_row_widget_error_handling_real_behavior\",\n        \"test_period_row_widget_get_period_data_real_behavior\",\n        \"test_period_row_widget_initialization_real_behavior\",\n        \"test_period_row_widget_load_period_data_real_behavior\",\n        \"test_period_row_widget_read_only_mode_real_behavior\",\n        \"test_period_row_widget_validation_real_behavior\",\n        \"test_tag_widget_account_creation_mode_real_behavior\",\n        \"test_tag_widget_add_duplicate_tag_real_behavior\",\n        \"test_tag_widget_add_empty_tag_real_behavior\",\n        \"test_tag_widget_add_tag_account_creation_mode_real_behavior\",\n        \"test_tag_widget_add_tag_management_mode_real_behavior\",\n        \"test_tag_widget_delete_tag_account_creation_mode_real_behavior\",\n        \"test_tag_widget_delete_tag_real_behavior\",\n        \"test_tag_widget_edit_tag_account_creation_mode_real_behavior\",\n        \"test_tag_widget_edit_tag_real_behavior\",\n        \"test_tag_widget_error_handling_real_behavior\",\n        \"test_tag_widget_get_selected_tags_real_behavior\",\n        \"test_tag_widget_management_mode_initialization_real_behavior\",\n        \"test_tag_widget_refresh_tags_real_behavior\",\n        \"test_tag_widget_selection_changed_signal_real_behavior\",\n        \"test_tag_widget_selection_mode_checkbox_behavior_real_behavior\",\n        \"test_tag_widget_selection_mode_initialization_real_behavior\",\n        \"test_tag_widget_set_selected_tags_real_behavior\",\n        \"test_tag_widget_undo_delete_real_behavior\",\n        \"test_widget_integration_real_behavior\",\n        \"test_widget_lifecycle_real_behavior\",\n        \"test_widget_memory_usage_real_behavior\",\n        \"test_widget_performance_real_behavior\",\n        \"user_id\"\n      ],\n      \"`tests/ui/test_user_profile_dialog_coverage_expansion.py\": [\n        \"dialog\",\n        \"empty_dialog\",\n        \"qapp\",\n        \"test_add_custom_field_real_behavior\",\n        \"test_add_loved_one_widget_real_behavior\",\n        \"test_add_loved_one_widget_without_data_real_behavior\",\n        \"test_cancel_real_behavior\",\n        \"test_center_dialog_real_behavior\",\n        \"test_close_event_declined_real_behavior\",\n        \"test_close_event_real_behavior\",\n        \"test_create_custom_field_list_real_behavior\",\n        \"test_create_health_section_real_behavior\",\n        \"test_create_loved_ones_section_real_behavior\",\n        \"test_custom_field_interaction_real_behavior\",\n        \"test_dialog_cleanup_real_behavior\",\n        \"test_dialog_initialization_with_existing_data_real_behavior\",\n        \"test_dialog_initialization_without_data_real_behavior\",\n        \"test_dialog_modal_behavior_real_behavior\",\n        \"test_dialog_size_constraints_real_behavior\",\n        \"test_dialog_window_flags_real_behavior\",\n        \"test_dialog_with_parent_real_behavior\",\n        \"test_error_handling_real_behavior\",\n        \"test_key_press_event_enter_real_behavior\",\n        \"test_key_press_event_escape_real_behavior\",\n        \"test_loved_one_widget_interaction_real_behavior\",\n        \"test_multi_column_layout_real_behavior\",\n        \"test_profile_widget_integration_real_behavior\",\n        \"test_remove_custom_field_real_behavior\",\n        \"test_remove_loved_one_widget_real_behavior\",\n        \"test_save_personalization_real_behavior\",\n        \"test_save_personalization_validation_error_real_behavior\",\n        \"test_save_personalization_without_callback_real_behavior\",\n        \"test_title_case_conversion_real_behavior\",\n        \"test_user_data\"\n      ],\n      \"`tests/ui/test_widget_behavior.py\": [\n        \"qapp\",\n        \"test_checkin_enablement_real_behavior\",\n        \"test_item_management_real_behavior\",\n        \"test_tag_management_real_behavior\",\n        \"test_tag_selection_mode_real_behavior\",\n        \"test_task_enablement_real_behavior\",\n        \"test_widget_initialization_real_behavior\",\n        \"widget\"\n      ],\n      \"`tests/ui/test_widget_behavior_simple.py\": [\n        \"qapp\",\n        \"test_category_selection_widget_import_and_creation\",\n        \"test_channel_selection_widget_import_and_creation\",\n        \"test_checkin_settings_widget_import_and_creation\",\n        \"test_dynamic_list_container_import_and_creation\",\n        \"test_dynamic_list_field_import_and_creation\",\n        \"test_tag_widget_import_and_creation\",\n        \"test_tag_widget_selection_mode\",\n        \"test_task_settings_widget_import_and_creation\",\n        \"test_user_profile_settings_widget_import_and_creation\"\n      ],\n      \"`tests/unit/test_cleanup.py\": [\n        \"__init__\",\n        \"_cleanup_old_test_logs\",\n        \"_cleanup_single_user\",\n        \"_cleanup_temp_files\",\n        \"_create_user_backup\",\n        \"_find_orphaned_files\",\n        \"_find_test_users\",\n        \"_validate_user_data\",\n        \"cleanup_test_users\",\n        \"main\",\n        \"reset_test_environment\",\n        \"validate_test_data_integrity\"\n      ],\n      \"`tests/unit/test_config.py\": [\n        \"test_base_data_dir_default\",\n        \"test_default_messages_dir_path_default\",\n        \"test_environment_override\",\n        \"test_user_info_dir_path_default\",\n        \"test_validate_ai_configuration_missing_url\",\n        \"test_validate_ai_configuration_success\",\n        \"test_validate_all_configuration_success\",\n        \"test_validate_and_raise_if_invalid_failure\",\n        \"test_validate_and_raise_if_invalid_success\",\n        \"test_validate_communication_channels_no_tokens\",\n        \"test_validate_communication_channels_success\",\n        \"test_validate_core_paths_missing_directory\",\n        \"test_validate_core_paths_success\",\n        \"test_validate_environment_variables_success\",\n        \"test_validate_file_organization_settings_success\",\n        \"test_validate_logging_configuration_success\",\n        \"test_validate_scheduler_configuration_success\"\n      ],\n      \"`tests/unit/test_error_handling.py\": [\n        \"backup_function\",\n        \"cleanup_function\",\n        \"corrupt_data_function\",\n        \"inner_function\",\n        \"outer_function\",\n        \"recover_data_function\",\n        \"state_validation_function\",\n        \"test_config_error\",\n        \"test_data_error\",\n        \"test_error_handler_custom_return\",\n        \"test_error_handler_exception\",\n        \"test_error_handler_logs_error\",\n        \"test_error_handler_nested_exceptions\",\n        \"test_error_handler_success\",\n        \"test_error_handler_with_args_kwargs\",\n        \"test_error_handling_different_exception_types\",\n        \"test_error_handling_in_function_chain\",\n        \"test_error_handling_with_recovery\",\n        \"test_file_operation_error\",\n        \"test_function\",\n        \"test_handle_configuration_error\",\n        \"test_handle_errors_custom_return\",\n        \"test_handle_errors_exception\",\n        \"test_handle_errors_logs_error\",\n        \"test_handle_errors_specific_exception\",\n        \"test_handle_errors_success\",\n        \"test_handle_errors_with_args_kwargs\",\n        \"test_handle_errors_with_logging_disabled\",\n        \"test_handle_file_error\",\n        \"test_mhm_error_basic\",\n        \"test_mhm_error_with_details\",\n        \"test_validation_error\"\n      ],\n      \"`tests/unit/test_file_operations.py\": [\n        \"test_determine_file_path_default_messages\",\n        \"test_determine_file_path_invalid_file_type\",\n        \"test_determine_file_path_invalid_user_id\",\n        \"test_determine_file_path_user_file\",\n        \"test_ensure_user_directory_already_exists\",\n        \"test_ensure_user_directory_success\",\n        \"test_file_operations_lifecycle\",\n        \"test_get_user_file_path_success\",\n        \"test_load_json_data_corrupted_json\",\n        \"test_load_json_data_empty_file\",\n        \"test_load_json_data_file_not_found\",\n        \"test_load_json_data_success\",\n        \"test_load_json_data_unicode_content\",\n        \"test_load_large_json_data\",\n        \"test_save_json_data_complex_objects\",\n        \"test_save_json_data_create_directory\",\n        \"test_save_json_data_permission_error\",\n        \"test_save_json_data_success\",\n        \"test_save_large_json_data\",\n        \"test_verify_file_access_missing_file\",\n        \"test_verify_file_access_permission_error\",\n        \"test_verify_file_access_success\"\n      ],\n      \"`tests/unit/test_logging_components.py\": [\n        \"test_component_logger_propagate_and_handlers\",\n        \"test_errors_routed_to_tests_logs_in_verbose_mode\"\n      ],\n      \"`tests/unit/test_no_direct_env_mutation_policy.py\": [\n        \"test_no_direct_os_environ_mutations_in_tests\"\n      ],\n      \"`tests/unit/test_no_prints_policy.py\": [\n        \"test_no_print_calls_in_tests_except_debug_marked\"\n      ],\n      \"`tests/unit/test_recurring_tasks.py\": [\n        \"temp_user_dir\",\n        \"test_calculate_next_due_date_daily\",\n        \"test_calculate_next_due_date_invalid_pattern\",\n        \"test_calculate_next_due_date_monthly\",\n        \"test_calculate_next_due_date_weekly\",\n        \"test_calculate_next_due_date_yearly\",\n        \"test_complete_recurring_task_creates_next_instance\",\n        \"test_create_recurring_task\",\n        \"test_non_recurring_task_completion\"\n      ],\n      \"`tests/unit/test_schedule_management.py\": [\n        \"test_schedule_period_lifecycle\",\n        \"test_time_conversion_helpers\",\n        \"test_validate_and_format_time\"\n      ],\n      \"`tests/unit/test_user_data_loader_idempotency.py\": [\n        \"test_loader_registry_identity_and_idempotency\"\n      ],\n      \"`tests/unit/test_user_data_loader_order_insensitivity.py\": [\n        \"_reload_in_order\",\n        \"test_loader_registry_shared_and_complete_regardless_of_import_order\"\n      ],\n      \"`tests/unit/test_user_management.py\": [\n        \"test_create_user_files_success\",\n        \"test_get_all_user_ids_empty\",\n        \"test_get_all_user_ids_with_users\",\n        \"test_get_user_context_nonexistent_user\",\n        \"test_get_user_context_success\",\n        \"test_get_user_data_account_nonexistent_chat_id\",\n        \"test_get_user_data_account_nonexistent_discord_id\",\n        \"test_get_user_data_account_nonexistent_email\",\n        \"test_get_user_data_account_with_chat_id\",\n        \"test_get_user_data_account_with_discord_id\",\n        \"test_get_user_data_account_with_email\",\n        \"test_get_user_data_invalid_type\",\n        \"test_get_user_data_multiple_types\",\n        \"test_get_user_data_nonexistent_user\",\n        \"test_get_user_data_single_type\",\n        \"test_get_user_preferences_corrupted_file\",\n        \"test_get_user_preferences_nonexistent_user\",\n        \"test_get_user_preferences_success\",\n        \"test_hybrid_get_user_data_nonexistent_user\",\n        \"test_hybrid_get_user_data_success\",\n        \"test_save_user_data_success\",\n        \"test_save_user_preferences_invalid_user_id\",\n        \"test_update_user_preferences_nonexistent_user\",\n        \"test_update_user_preferences_success\",\n        \"test_user_lifecycle\"\n      ],\n      \"`tests/unit/test_validation.py\": [\n        \"test_is_valid_email_with_invalid_emails\",\n        \"test_is_valid_email_with_valid_emails\",\n        \"test_is_valid_phone_with_invalid_phones\",\n        \"test_is_valid_phone_with_valid_phones\",\n        \"test_title_case_with_various_inputs\",\n        \"test_validate_new_user_data_empty_updates\",\n        \"test_validate_new_user_data_invalid_account_status\",\n        \"test_validate_new_user_data_invalid_channel_type\",\n        \"test_validate_new_user_data_invalid_email\",\n        \"test_validate_new_user_data_missing_account\",\n        \"test_validate_new_user_data_missing_channel\",\n        \"test_validate_new_user_data_missing_user_id\",\n        \"test_validate_new_user_data_missing_username\",\n        \"test_validate_new_user_data_success\",\n        \"test_validate_new_user_data_user_already_exists\",\n        \"test_validate_personalization_data_empty\",\n        \"test_validate_personalization_data_invalid_custom_field_lists\",\n        \"test_validate_personalization_data_invalid_custom_fields_type\",\n        \"test_validate_personalization_data_invalid_date_format\",\n        \"test_validate_personalization_data_invalid_list_fields\",\n        \"test_validate_personalization_data_invalid_loved_one_item\",\n        \"test_validate_personalization_data_invalid_loved_ones_type\",\n        \"test_validate_personalization_data_invalid_string_fields\",\n        \"test_validate_personalization_data_success\",\n        \"test_validate_schedule_periods_all_period_excluded\",\n        \"test_validate_schedule_periods_empty\",\n        \"test_validate_schedule_periods_empty_days\",\n        \"test_validate_schedule_periods_invalid_days\",\n        \"test_validate_schedule_periods_invalid_days_type\",\n        \"test_validate_schedule_periods_invalid_time_format\",\n        \"test_validate_schedule_periods_invalid_time_order\",\n        \"test_validate_schedule_periods_missing_times\",\n        \"test_validate_schedule_periods_no_active_periods\",\n        \"test_validate_schedule_periods_success\",\n        \"test_validate_time_format_with_invalid_times\",\n        \"test_validate_time_format_with_valid_times\",\n        \"test_validate_user_update_account_invalid_email\",\n        \"test_validate_user_update_account_invalid_status\",\n        \"test_validate_user_update_account_missing_username\",\n        \"test_validate_user_update_account_success\",\n        \"test_validate_user_update_context_invalid_custom_fields\",\n        \"test_validate_user_update_context_invalid_date\",\n        \"test_validate_user_update_context_success\",\n        \"test_validate_user_update_preferences_invalid_categories\",\n        \"test_validate_user_update_preferences_invalid_channel_type\",\n        \"test_validate_user_update_preferences_success\",\n        \"test_validate_user_update_schedules_invalid_days\",\n        \"test_validate_user_update_schedules_invalid_time_format\",\n        \"test_validate_user_update_schedules_invalid_time_order\",\n        \"test_validate_user_update_schedules_success\",\n        \"test_validation_error_propagation\",\n        \"test_validation_functions_work_together\",\n        \"test_validation_with_real_file_operations\"\n      ],\n      \"`ui/dialogs/account_creator_dialog.py\": [\n        \"__init__\",\n        \"_build_features_dict\",\n        \"_determine_chat_id\",\n        \"_validate_and_accept__add_feature_settings\",\n        \"_validate_and_accept__build_account_data\",\n        \"_validate_and_accept__build_user_preferences\",\n        \"_validate_and_accept__collect_basic_user_info\",\n        \"_validate_and_accept__collect_channel_data\",\n        \"_validate_and_accept__collect_data\",\n        \"_validate_and_accept__collect_feature_settings\",\n        \"_validate_and_accept__collect_widget_data\",\n        \"_validate_and_accept__create_account\",\n        \"_validate_and_accept__handle_success\",\n        \"_validate_and_accept__input_errors\",\n        \"_validate_and_accept__schedule_new_user\",\n        \"_validate_and_accept__setup_task_tags\",\n        \"_validate_and_accept__show_error_dialog\",\n        \"_validate_and_accept__show_success_dialog\",\n        \"_validate_and_accept__update_user_index\",\n        \"accept\",\n        \"center_dialog\",\n        \"close_dialog\",\n        \"create_account\",\n        \"create_account_dialog\",\n        \"get_account_data\",\n        \"keyPressEvent\",\n        \"load_category_widget\",\n        \"load_checkin_settings_widget\",\n        \"load_message_service_widget\",\n        \"load_task_management_widget\",\n        \"load_widgets\",\n        \"on_feature_toggled\",\n        \"on_personalization_save\",\n        \"on_preferred_name_changed\",\n        \"on_username_changed\",\n        \"open_personalization_dialog\",\n        \"setup_connections\",\n        \"setup_dialog\",\n        \"setup_feature_group_boxes\",\n        \"setup_profile_button\",\n        \"update_profile_button_state\",\n        \"update_tab_visibility\",\n        \"validate_account_data\",\n        \"validate_and_accept\",\n        \"validate_input\"\n      ],\n      \"`ui/dialogs/admin_panel.py\": [\n        \"__init__\",\n        \"get_admin_data\",\n        \"set_admin_data\",\n        \"setup_ui\"\n      ],\n      \"`ui/dialogs/category_management_dialog.py\": [\n        \"__init__\",\n        \"get_selected_categories\",\n        \"load_user_category_data\",\n        \"on_enable_messages_toggled\",\n        \"save_category_settings\",\n        \"set_selected_categories\"\n      ],\n      \"`ui/dialogs/channel_management_dialog.py\": [\n        \"__init__\",\n        \"get_selected_channel\",\n        \"save_channel_settings\",\n        \"set_selected_channel\"\n      ],\n      \"`ui/dialogs/checkin_management_dialog.py\": [\n        \"__init__\",\n        \"get_checkin_settings\",\n        \"load_user_checkin_data\",\n        \"on_enable_checkins_toggled\",\n        \"save_checkin_settings\",\n        \"set_checkin_settings\"\n      ],\n      \"`ui/dialogs/schedule_editor_dialog.py\": [\n        \"__init__\",\n        \"_trigger_rescheduling\",\n        \"add_new_period\",\n        \"cancel\",\n        \"center_dialog\",\n        \"collect_period_data\",\n        \"find_lowest_available_period_number\",\n        \"get_schedule_data\",\n        \"handle_save\",\n        \"load_existing_data\",\n        \"open_schedule_editor\",\n        \"remove_period_row\",\n        \"resort_period_widgets\",\n        \"save_schedule\",\n        \"set_schedule_data\",\n        \"setup_functionality\",\n        \"sort_key\",\n        \"undo_last_delete\"\n      ],\n      \"`ui/dialogs/task_completion_dialog.py\": [\n        \"__init__\",\n        \"get_completion_data\",\n        \"get_completion_date\",\n        \"get_completion_notes\",\n        \"get_completion_time\",\n        \"setup_completion_time_components\",\n        \"setup_connections\",\n        \"setup_ui\"\n      ],\n      \"`ui/dialogs/task_crud_dialog.py\": [\n        \"__init__\",\n        \"add_new_task\",\n        \"complete_selected_task\",\n        \"delete_completed_task\",\n        \"delete_selected_task\",\n        \"edit_selected_task\",\n        \"get_selected_task_id\",\n        \"load_data\",\n        \"refresh_active_tasks\",\n        \"refresh_completed_tasks\",\n        \"restore_selected_task\",\n        \"setup_connections\",\n        \"setup_ui\",\n        \"update_statistics\"\n      ],\n      \"`ui/dialogs/task_edit_dialog.py\": [\n        \"__init__\",\n        \"add_reminder_period\",\n        \"collect_quick_reminders\",\n        \"collect_recurring_task_data\",\n        \"collect_reminder_periods\",\n        \"collect_selected_tags\",\n        \"delete_reminder_period\",\n        \"get_due_time_as_24h\",\n        \"load_recurring_task_data\",\n        \"load_task_data\",\n        \"on_hour_changed\",\n        \"on_minute_changed\",\n        \"on_no_due_date_toggled\",\n        \"on_recurring_pattern_changed\",\n        \"render_reminder_period_row\",\n        \"render_reminder_periods\",\n        \"save_task\",\n        \"set_due_time_from_24h\",\n        \"setup_connections\",\n        \"setup_due_time_components\",\n        \"setup_recurring_task_components\",\n        \"setup_ui\",\n        \"validate_form\"\n      ],\n      \"`ui/dialogs/task_management_dialog.py\": [\n        \"__init__\",\n        \"get_statistics\",\n        \"on_enable_task_management_toggled\",\n        \"save_task_settings\"\n      ],\n      \"`ui/dialogs/user_profile_dialog.py\": [\n        \"__init__\",\n        \"add_custom_field\",\n        \"add_loved_one_widget\",\n        \"cancel\",\n        \"center_dialog\",\n        \"collect_custom_field_data\",\n        \"collect_loved_ones_data\",\n        \"create_custom_field_list\",\n        \"create_goals_section\",\n        \"create_health_section\",\n        \"create_interests_section\",\n        \"create_loved_ones_section\",\n        \"create_notes_section\",\n        \"keyPressEvent\",\n        \"open_personalization_dialog\",\n        \"remove_custom_field\",\n        \"remove_loved_one_widget\",\n        \"save_personalization\",\n        \"setup_ui\",\n        \"title_case\"\n      ],\n      \"`ui/generate_ui_files.py\": [\n        \"generate_all_ui_files\",\n        \"generate_ui_file\",\n        \"main\"\n      ],\n      \"`ui/generated/account_creator_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/admin_panel_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/category_management_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/category_selection_widget_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/channel_management_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/channel_selection_widget_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/checkin_element_template_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/checkin_management_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/checkin_settings_widget_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/dynamic_list_field_template_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/period_row_template_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/schedule_editor_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/tag_widget_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/task_completion_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/task_crud_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/task_edit_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/task_management_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/task_settings_widget_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/user_profile_management_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/generated/user_profile_settings_widget_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"`ui/ui_app_qt.py\": [\n        \"__init__\",\n        \"_send_test_message__get_selected_category\",\n        \"_send_test_message__validate_service_running\",\n        \"_send_test_message__validate_user_selection\",\n        \"cleanup_old_requests\",\n        \"closeEvent\",\n        \"confirm_test_message\",\n        \"connect_signals\",\n        \"create_new_user\",\n        \"disable_content_management\",\n        \"edit_user_messages\",\n        \"edit_user_schedules\",\n        \"enable_content_management\",\n        \"force_clean_cache\",\n        \"initialize_ui\",\n        \"is_service_running\",\n        \"load_theme\",\n        \"load_ui\",\n        \"load_user_categories\",\n        \"main\",\n        \"manage_categories\",\n        \"manage_checkins\",\n        \"manage_communication_settings\",\n        \"manage_personalization\",\n        \"manage_task_crud\",\n        \"manage_tasks\",\n        \"manage_user_analytics\",\n        \"on_category_selected\",\n        \"on_save\",\n        \"on_schedule_save\",\n        \"on_user_selected\",\n        \"open_message_editor\",\n        \"open_schedule_editor\",\n        \"refresh_user_list\",\n        \"restart_service\",\n        \"run_category_scheduler\",\n        \"run_full_scheduler\",\n        \"run_user_scheduler\",\n        \"send_actual_test_message\",\n        \"send_test_message\",\n        \"show_configuration_help\",\n        \"shutdown_ui_components\",\n        \"start_service\",\n        \"stop_service\",\n        \"system_health_check\",\n        \"toggle_logging_verbosity\",\n        \"update_service_status\",\n        \"update_user_index_on_startup\",\n        \"validate_configuration\",\n        \"validate_configuration_before_start\",\n        \"view_all_users_summary\",\n        \"view_cache_status\",\n        \"view_log_file\"\n      ],\n      \"`ui/widgets/category_selection_widget.py\": [\n        \"__init__\",\n        \"get_selected_categories\",\n        \"set_selected_categories\"\n      ],\n      \"`ui/widgets/channel_selection_widget.py\": [\n        \"__init__\",\n        \"get_all_contact_info\",\n        \"get_selected_channel\",\n        \"get_timezone\",\n        \"populate_timezones\",\n        \"set_contact_info\",\n        \"set_selected_channel\",\n        \"set_timezone\"\n      ],\n      \"`ui/widgets/checkin_settings_widget.py\": [\n        \"__init__\",\n        \"add_new_period\",\n        \"add_new_question\",\n        \"connect_question_checkboxes\",\n        \"find_lowest_available_period_number\",\n        \"get_checkin_settings\",\n        \"get_default_question_state\",\n        \"load_existing_data\",\n        \"on_question_toggled\",\n        \"remove_period_row\",\n        \"set_checkin_settings\",\n        \"set_question_checkboxes\",\n        \"setup_connections\",\n        \"showEvent\",\n        \"undo_last_question_delete\",\n        \"undo_last_time_period_delete\"\n      ],\n      \"`ui/widgets/dynamic_list_container.py\": [\n        \"__init__\",\n        \"__post_init__\",\n        \"_add_blank_row\",\n        \"_deduplicate_values\",\n        \"_ensure_single_blank_row\",\n        \"_first_blank_index\",\n        \"_on_preset_toggled\",\n        \"_on_row_deleted\",\n        \"_on_row_edited\",\n        \"get_values\",\n        \"set_values\"\n      ],\n      \"`ui/widgets/dynamic_list_field.py\": [\n        \"__init__\",\n        \"_on_delete\",\n        \"get_text\",\n        \"is_blank\",\n        \"is_checked\",\n        \"on_checkbox_toggled\",\n        \"on_editing_finished\",\n        \"on_text_changed\",\n        \"set_checked\",\n        \"set_text\"\n      ],\n      \"`ui/widgets/period_row_widget.py\": [\n        \"__init__\",\n        \"_get_day_checkboxes\",\n        \"_set_read_only__all_period_read_only\",\n        \"_set_read_only__apply_read_only_styling\",\n        \"_set_read_only__checkbox_states\",\n        \"_set_read_only__clear_read_only_styling\",\n        \"_set_read_only__delete_button_visibility\",\n        \"_set_read_only__force_style_updates\",\n        \"_set_read_only__normal_checkbox_states\",\n        \"_set_read_only__time_inputs\",\n        \"_set_read_only__visual_styling\",\n        \"get_period_data\",\n        \"get_period_name\",\n        \"get_selected_days\",\n        \"is_valid\",\n        \"load_days\",\n        \"load_period_data\",\n        \"on_individual_day_toggled\",\n        \"on_select_all_days_toggled\",\n        \"request_delete\",\n        \"set_period_name\",\n        \"set_read_only\",\n        \"setup_functionality\"\n      ],\n      \"`ui/widgets/tag_widget.py\": [\n        \"__init__\",\n        \"add_tag\",\n        \"delete_tag\",\n        \"edit_tag\",\n        \"get_available_tags\",\n        \"get_selected_tags\",\n        \"load_tags\",\n        \"on_tag_selection_changed\",\n        \"refresh_tag_list\",\n        \"refresh_tags\",\n        \"set_selected_tags\",\n        \"setup_connections\",\n        \"setup_ui\",\n        \"undo_last_tag_delete\",\n        \"update_button_states\"\n      ],\n      \"`ui/widgets/task_settings_widget.py\": [\n        \"__init__\",\n        \"add_new_period\",\n        \"find_lowest_available_period_number\",\n        \"get_available_tags\",\n        \"get_recurring_task_settings\",\n        \"get_statistics\",\n        \"get_task_settings\",\n        \"load_existing_data\",\n        \"load_recurring_task_settings\",\n        \"refresh_tags\",\n        \"remove_period_row\",\n        \"save_recurring_task_settings\",\n        \"set_recurring_task_settings\",\n        \"set_task_settings\",\n        \"setup_connections\",\n        \"showEvent\",\n        \"undo_last_period_delete\",\n        \"undo_last_tag_delete\"\n      ],\n      \"`ui/widgets/user_profile_settings_widget.py\": [\n        \"__init__\",\n        \"_get_personalization_data__ensure_required_fields\",\n        \"_get_personalization_data__extract_basic_fields\",\n        \"_get_personalization_data__extract_date_of_birth\",\n        \"_get_personalization_data__extract_dynamic_containers\",\n        \"_get_personalization_data__extract_gender_identity\",\n        \"_get_personalization_data__extract_loved_ones\",\n        \"_get_personalization_data__extract_notes\",\n        \"get_personalization_data\",\n        \"get_settings\",\n        \"load_existing_data\",\n        \"populate_timezones\",\n        \"set_checkbox_group\",\n        \"set_settings\"\n      ],\n      \"`user/context_manager.py\": [\n        \"__init__\",\n        \"_get_conversation_history\",\n        \"_get_conversation_insights\",\n        \"_get_minimal_context\",\n        \"_get_mood_trends\",\n        \"_get_recent_activity\",\n        \"_get_user_preferences\",\n        \"_get_user_profile\",\n        \"add_conversation_exchange\",\n        \"format_context_for_ai\",\n        \"get_ai_context\",\n        \"get_current_user_context\"\n      ],\n      \"`user/user_context.py\": [\n        \"__new__\",\n        \"get_instance_context\",\n        \"get_internal_username\",\n        \"get_preference\",\n        \"get_preferred_name\",\n        \"get_user_id\",\n        \"load_user_data\",\n        \"save_user_data\",\n        \"set_internal_username\",\n        \"set_preference\",\n        \"set_preferred_name\",\n        \"set_user_id\",\n        \"update_preference\"\n      ],\n      \"`user/user_preferences.py\": [\n        \"__init__\",\n        \"get_all_preferences\",\n        \"get_preference\",\n        \"is_schedule_period_active\",\n        \"load_preferences\",\n        \"remove_preference\",\n        \"save_preferences\",\n        \"set_preference\",\n        \"set_schedule_period_active\",\n        \"update_preference\"\n      ]\n    }\n  },\n  \"missing\": {\n    \"count\": 2975,\n    \"files\": {\n      \"ai/cache_manager.py\": [\n        \"__init__\",\n        \"_cleanup_lru\",\n        \"_generate_key\",\n        \"_remove_entry\",\n        \"clear\",\n        \"clear_expired\",\n        \"get\",\n        \"get_context_cache\",\n        \"get_entries_by_type\",\n        \"get_response_cache\",\n        \"get_stats\",\n        \"remove_entries_by_type\",\n        \"remove_user_entries\",\n        \"set\"\n      ],\n      \"ai/chatbot.py\": [\n        \"__init__\",\n        \"__new__\",\n        \"_call_lm_studio_api\",\n        \"_create_command_parsing_prompt\",\n        \"_create_command_parsing_with_clarification_prompt\",\n        \"_create_comprehensive_context_prompt\",\n        \"_detect_mode\",\n        \"_detect_resource_constraints\",\n        \"_enhance_conversational_engagement\",\n        \"_get_adaptive_timeout\",\n        \"_get_contextual_fallback\",\n        \"_get_fallback_personalized_message\",\n        \"_get_fallback_response\",\n        \"_make_cache_key_inputs\",\n        \"_optimize_prompt\",\n        \"_smart_truncate_response\",\n        \"_test_lm_studio_connection\",\n        \"generate_contextual_response\",\n        \"generate_personalized_message\",\n        \"generate_quick_response\",\n        \"generate_response\",\n        \"get_ai_chatbot\",\n        \"get_ai_status\",\n        \"is_ai_available\",\n        \"reload_system_prompt\",\n        \"test_system_prompt_integration\"\n      ],\n      \"ai/context_builder.py\": [\n        \"__init__\",\n        \"__post_init__\",\n        \"_calculate_wellness_score\",\n        \"_determine_trend\",\n        \"_generate_insights\",\n        \"analyze_context\",\n        \"build_user_context\",\n        \"create_checkin_context\",\n        \"create_context_prompt\",\n        \"create_task_context\",\n        \"get_context_builder\"\n      ],\n      \"ai/conversation_history.py\": [\n        \"__init__\",\n        \"__post_init__\",\n        \"_cleanup_old_sessions\",\n        \"add_message\",\n        \"clear_history\",\n        \"delete_session\",\n        \"end_session\",\n        \"get_active_session\",\n        \"get_conversation_history\",\n        \"get_conversation_summary\",\n        \"get_history\",\n        \"get_recent_messages\",\n        \"get_session_messages\",\n        \"get_statistics\",\n        \"start_session\"\n      ],\n      \"ai/prompt_manager.py\": [\n        \"__init__\",\n        \"_load_custom_prompt\",\n        \"add_prompt_template\",\n        \"create_checkin_prompt\",\n        \"create_contextual_prompt\",\n        \"create_task_prompt\",\n        \"custom_prompt_length\",\n        \"fallback_prompt_keys\",\n        \"get_available_prompts\",\n        \"get_prompt\",\n        \"get_prompt_manager\",\n        \"get_prompt_template\",\n        \"has_custom_prompt\",\n        \"reload_custom_prompt\",\n        \"remove_prompt_template\"\n      ],\n      \"communication/command_handlers/analytics_handler.py\": [\n        \"_handle_checkin_analysis\",\n        \"_handle_checkin_history\",\n        \"_handle_completion_rate\",\n        \"_handle_habit_analysis\",\n        \"_handle_mood_trends\",\n        \"_handle_quant_summary\",\n        \"_handle_show_analytics\",\n        \"_handle_sleep_analysis\",\n        \"_handle_task_analytics\",\n        \"_handle_task_stats\",\n        \"_handle_wellness_score\",\n        \"_truncate_response\",\n        \"can_handle\",\n        \"get_examples\",\n        \"get_help\",\n        \"handle\"\n      ],\n      \"communication/command_handlers/base_handler.py\": [\n        \"can_handle\",\n        \"get_examples\",\n        \"get_help\",\n        \"handle\"\n      ],\n      \"communication/command_handlers/checkin_handler.py\": [\n        \"_handle_checkin_status\",\n        \"_handle_continue_checkin\",\n        \"_handle_start_checkin\",\n        \"can_handle\",\n        \"get_examples\",\n        \"get_help\",\n        \"handle\"\n      ],\n      \"communication/command_handlers/interaction_handlers.py\": [\n        \"_handle_add_schedule_period\",\n        \"_handle_add_schedule_period__parse_time_format\",\n        \"_handle_checkin_history\",\n        \"_handle_checkin_status\",\n        \"_handle_commands_list\",\n        \"_handle_complete_task\",\n        \"_handle_complete_task__find_most_urgent_task\",\n        \"_handle_complete_task__find_task_by_identifier\",\n        \"_handle_completion_rate\",\n        \"_handle_continue_checkin\",\n        \"_handle_create_task\",\n        \"_handle_create_task__parse_relative_date\",\n        \"_handle_delete_task\",\n        \"_handle_delete_task__find_task_by_identifier\",\n        \"_handle_edit_schedule_period\",\n        \"_handle_edit_schedule_period__parse_time_format\",\n        \"_handle_examples\",\n        \"_handle_general_help\",\n        \"_handle_habit_analysis\",\n        \"_handle_list_tasks\",\n        \"_handle_list_tasks__apply_filters\",\n        \"_handle_list_tasks__build_filter_info\",\n        \"_handle_list_tasks__build_response\",\n        \"_handle_list_tasks__create_rich_data\",\n        \"_handle_list_tasks__format_due_date\",\n        \"_handle_list_tasks__format_list\",\n        \"_handle_list_tasks__generate_suggestions\",\n        \"_handle_list_tasks__get_suggestion\",\n        \"_handle_list_tasks__no_tasks_response\",\n        \"_handle_list_tasks__sort_tasks\",\n        \"_handle_messages\",\n        \"_handle_mood_trends\",\n        \"_handle_profile_stats\",\n        \"_handle_quant_summary\",\n        \"_handle_schedule_status\",\n        \"_handle_show_analytics\",\n        \"_handle_show_profile\",\n        \"_handle_show_schedule\",\n        \"_handle_sleep_analysis\",\n        \"_handle_start_checkin\",\n        \"_handle_status\",\n        \"_handle_task_stats\",\n        \"_handle_update_profile\",\n        \"_handle_update_schedule\",\n        \"_handle_update_task\",\n        \"_handle_update_task__find_task_by_identifier\",\n        \"_handle_wellness_score\",\n        \"can_handle\",\n        \"get_all_handlers\",\n        \"get_examples\",\n        \"get_help\",\n        \"get_interaction_handler\",\n        \"handle\"\n      ],\n      \"communication/command_handlers/profile_handler.py\": [\n        \"_format_profile_text\",\n        \"_handle_profile_stats\",\n        \"_handle_show_profile\",\n        \"_handle_update_profile\",\n        \"can_handle\",\n        \"get_examples\",\n        \"get_help\",\n        \"handle\"\n      ],\n      \"communication/command_handlers/schedule_handler.py\": [\n        \"_handle_add_schedule_period\",\n        \"_handle_add_schedule_period__parse_time_format\",\n        \"_handle_edit_schedule_period\",\n        \"_handle_edit_schedule_period__parse_time_format\",\n        \"_handle_schedule_status\",\n        \"_handle_show_schedule\",\n        \"_handle_update_schedule\",\n        \"can_handle\",\n        \"get_examples\",\n        \"get_help\",\n        \"handle\"\n      ],\n      \"communication/command_handlers/task_handler.py\": [\n        \"_handle_complete_task\",\n        \"_handle_complete_task__find_task_by_identifier\",\n        \"_handle_create_task\",\n        \"_handle_create_task__parse_relative_date\",\n        \"_handle_delete_task\",\n        \"_handle_delete_task__find_task_by_identifier\",\n        \"_handle_list_tasks\",\n        \"_handle_list_tasks__apply_filters\",\n        \"_handle_list_tasks__build_filter_info\",\n        \"_handle_list_tasks__build_response\",\n        \"_handle_list_tasks__create_rich_data\",\n        \"_handle_list_tasks__format_due_date\",\n        \"_handle_list_tasks__format_list\",\n        \"_handle_list_tasks__generate_suggestions\",\n        \"_handle_list_tasks__get_suggestion\",\n        \"_handle_list_tasks__no_tasks_response\",\n        \"_handle_list_tasks__sort_tasks\",\n        \"_handle_task_stats\",\n        \"_handle_update_task\",\n        \"_handle_update_task__find_task_by_identifier\",\n        \"can_handle\",\n        \"get_examples\",\n        \"get_help\",\n        \"handle\"\n      ],\n      \"communication/communication_channels/base/base_channel.py\": [\n        \"__init__\",\n        \"__post_init__\",\n        \"_set_status\",\n        \"channel_type\",\n        \"get_error\",\n        \"get_status\",\n        \"is_ready\"\n      ],\n      \"communication/communication_channels/base/command_registry.py\": [\n        \"__init__\",\n        \"__post_init__\",\n        \"get_all_commands\",\n        \"get_command\",\n        \"get_command_registry\",\n        \"get_enabled_commands\",\n        \"is_command_registered\",\n        \"register_command\",\n        \"register_with_platform\",\n        \"unregister_command\",\n        \"unregister_from_platform\"\n      ],\n      \"communication/communication_channels/base/message_formatter.py\": [\n        \"create_interactive_elements\",\n        \"create_rich_content\",\n        \"format_message\",\n        \"get_message_formatter\"\n      ],\n      \"communication/communication_channels/base/rich_formatter.py\": [\n        \"__init__\",\n        \"create_embed\",\n        \"create_interactive_view\",\n        \"get_color_for_type\",\n        \"get_rich_formatter\"\n      ],\n      \"communication/communication_channels/discord/api_client.py\": [\n        \"__init__\",\n        \"get_connection_latency\",\n        \"get_discord_api_client\",\n        \"is_connected\"\n      ],\n      \"communication/communication_channels/discord/bot.py\": [\n        \"__init__\",\n        \"_check_dns_resolution\",\n        \"_check_network_connectivity\",\n        \"_check_network_health\",\n        \"_create_action_row\",\n        \"_create_discord_embed\",\n        \"_get_detailed_connection_status\",\n        \"_shared__update_connection_status\",\n        \"_should_attempt_reconnection\",\n        \"_wait_for_network_recovery\",\n        \"can_send_messages\",\n        \"channel_type\",\n        \"get_connection_status_summary\",\n        \"get_health_status\",\n        \"initialize__register_commands\",\n        \"initialize__register_events\",\n        \"initialize__run_bot_in_thread\",\n        \"is_actually_connected\"\n      ],\n      \"communication/communication_channels/discord/event_handler.py\": [\n        \"__init__\",\n        \"__post_init__\",\n        \"_register_default_handlers\",\n        \"add_disconnect_handler\",\n        \"add_error_handler\",\n        \"add_message_handler\",\n        \"add_ready_handler\",\n        \"get_discord_event_handler\",\n        \"register_events\"\n      ],\n      \"communication/communication_channels/email/bot.py\": [\n        \"__init__\",\n        \"_receive_emails_sync\",\n        \"channel_type\",\n        \"initialize__test_imap_connection\",\n        \"initialize__test_smtp_connection\",\n        \"send_message__send_email_sync\"\n      ],\n      \"communication/core/channel_monitor.py\": [\n        \"__init__\",\n        \"_attempt_channel_restart\",\n        \"_check_and_restart_stuck_channels\",\n        \"_restart_monitor_loop\",\n        \"get_channel_health_status\",\n        \"record_channel_failure\",\n        \"record_channel_success\",\n        \"reset_channel_failures\",\n        \"set_channels\",\n        \"start_restart_monitor\",\n        \"stop_restart_monitor\"\n      ],\n      \"communication/core/channel_orchestrator.py\": [\n        \"__init__\",\n        \"__init____setup_event_loop\",\n        \"__new__\",\n        \"_check_logging_health\",\n        \"_create_task_reminder_message\",\n        \"_get_default_channel_configs\",\n        \"_get_recipient_for_service\",\n        \"_handle_scheduled_checkin\",\n        \"_initialize_channel_with_retry_sync\",\n        \"_select_weighted_message\",\n        \"_send_ai_generated_message\",\n        \"_send_checkin_prompt\",\n        \"_send_predefined_message\",\n        \"_should_send_checkin_prompt\",\n        \"_shutdown_sync\",\n        \"_start_sync\",\n        \"get_active_channels\",\n        \"get_configured_channels\",\n        \"get_discord_connectivity_status\",\n        \"get_last_task_reminder\",\n        \"get_registered_channels\",\n        \"handle_message_sending\",\n        \"handle_task_reminder\",\n        \"initialize_channels_from_config\",\n        \"run_event_loop\",\n        \"send_message_sync\",\n        \"send_message_sync__queue_failed_message\",\n        \"send_message_sync__run_async_sync\",\n        \"set_scheduler_manager\",\n        \"start_all\",\n        \"start_all__start_restart_monitor\",\n        \"start_all__start_retry_thread\",\n        \"stop_all\",\n        \"stop_all__stop_restart_monitor\",\n        \"stop_all__stop_retry_thread\"\n      ],\n      \"communication/core/factory.py\": [\n        \"_initialize_registry\",\n        \"create_channel\",\n        \"get_registered_channels\"\n      ],\n      \"communication/core/retry_manager.py\": [\n        \"__init__\",\n        \"_process_retry_queue\",\n        \"_retry_loop\",\n        \"clear_queue\",\n        \"get_queue_size\",\n        \"queue_failed_message\",\n        \"start_retry_thread\",\n        \"stop_retry_thread\"\n      ],\n      \"communication/message_processing/command_parser.py\": [\n        \"__init__\",\n        \"_ai_enhanced_parse\",\n        \"_calculate_confidence\",\n        \"_extract_entities_from_ai_response\",\n        \"_extract_entities_rule_based\",\n        \"_extract_intent_from_ai_response\",\n        \"_extract_task_entities\",\n        \"_extract_task_name_from_context\",\n        \"_extract_update_entities\",\n        \"_is_valid_intent\",\n        \"_rule_based_parse\",\n        \"get_enhanced_command_parser\",\n        \"get_suggestions\",\n        \"parse\",\n        \"parse_command\"\n      ],\n      \"communication/message_processing/conversation_flow_manager.py\": [\n        \"__init__\",\n        \"_complete_checkin\",\n        \"_generate_completion_message\",\n        \"_get_next_question\",\n        \"_get_personalized_welcome\",\n        \"_get_question_text\",\n        \"_handle_checkin\",\n        \"_handle_command_during_checkin\",\n        \"_load_user_states\",\n        \"_save_user_states\",\n        \"_select_checkin_questions_with_weighting\",\n        \"_start_dynamic_checkin\",\n        \"_validate_response\",\n        \"clear_all_states\",\n        \"clear_stuck_flows\",\n        \"expire_checkin_flow_due_to_unrelated_outbound\",\n        \"handle_contextual_question\",\n        \"handle_inbound_message\",\n        \"restart_checkin\",\n        \"start_analytics_flow\",\n        \"start_checkin\",\n        \"start_messages_flow\",\n        \"start_profile_flow\",\n        \"start_schedule_flow\",\n        \"start_tasks_flow\"\n      ],\n      \"communication/message_processing/interaction_manager.py\": [\n        \"__init__\",\n        \"_enhance_response_with_ai\",\n        \"_extract_intent_from_text\",\n        \"_get_commands_response\",\n        \"_get_help_response\",\n        \"_handle_contextual_chat\",\n        \"_handle_structured_command\",\n        \"_is_ai_command_response\",\n        \"_is_clarification_request\",\n        \"_is_valid_intent\",\n        \"_parse_ai_command_response\",\n        \"_try_ai_command_parsing\",\n        \"get_available_commands\",\n        \"get_command_definitions\",\n        \"get_interaction_manager\",\n        \"get_slash_command_map\",\n        \"get_user_suggestions\",\n        \"handle_message\",\n        \"handle_user_message\"\n      ],\n      \"communication/message_processing/message_router.py\": [\n        \"__init__\",\n        \"_route_bang_command\",\n        \"_route_slash_command\",\n        \"get_bang_command_map\",\n        \"get_command_definitions\",\n        \"get_command_mapping\",\n        \"get_message_router\",\n        \"get_slash_command_map\",\n        \"is_flow_command\",\n        \"route_message\"\n      ],\n      \"core/auto_cleanup.py\": [\n        \"_calculate_cache_size__calculate_pyc_files_size\",\n        \"_calculate_cache_size__calculate_pycache_directories_size\",\n        \"_get_cleanup_status__build_status_response\",\n        \"_get_cleanup_status__calculate_days_since_cleanup\",\n        \"_get_cleanup_status__format_next_cleanup_date\",\n        \"_get_cleanup_status__get_never_cleaned_status\",\n        \"_perform_cleanup__discover_cache_files\",\n        \"_perform_cleanup__log_completion_results\",\n        \"_perform_cleanup__log_discovery_results\",\n        \"_perform_cleanup__remove_cache_directories\",\n        \"_perform_cleanup__remove_cache_files\",\n        \"_perform_cleanup__remove_cache_files_list\",\n        \"archive_old_messages_for_all_users\",\n        \"auto_cleanup_if_needed\",\n        \"calculate_cache_size\",\n        \"find_pyc_files\",\n        \"find_pycache_dirs\",\n        \"get_cleanup_status\",\n        \"get_last_cleanup_timestamp\",\n        \"perform_cleanup\",\n        \"should_run_cleanup\",\n        \"update_cleanup_timestamp\"\n      ],\n      \"core/backup_manager.py\": [\n        \"__init__\",\n        \"_add_directory_to_zip\",\n        \"_backup_config_files\",\n        \"_backup_log_files\",\n        \"_backup_user_data\",\n        \"_cleanup_old_backups\",\n        \"_create_backup__cleanup_old_backups\",\n        \"_create_backup__create_zip_file\",\n        \"_create_backup__setup_backup\",\n        \"_create_backup_manifest\",\n        \"_get_backup_info\",\n        \"_restore_config_files\",\n        \"_restore_user_data\",\n        \"_validate_backup__check_file_exists\",\n        \"_validate_backup__check_file_integrity\",\n        \"_validate_backup__validate_content_requirements\",\n        \"_validate_backup__validate_manifest\",\n        \"_validate_backup__validate_zip_file\",\n        \"_validate_system_state__ensure_user_data_directory\",\n        \"_validate_system_state__validate_user_index\",\n        \"create_automatic_backup\",\n        \"create_backup\",\n        \"ensure_backup_directory\",\n        \"list_backups\",\n        \"perform_safe_operation\",\n        \"restore_backup\",\n        \"validate_backup\",\n        \"validate_system_state\"\n      ],\n      \"core/checkin_analytics.py\": [\n        \"__init__\",\n        \"_calculate_habit_score\",\n        \"_calculate_mood_score\",\n        \"_calculate_overall_completion\",\n        \"_calculate_sleep_consistency\",\n        \"_calculate_sleep_score\",\n        \"_calculate_streak\",\n        \"_get_habit_status\",\n        \"_get_mood_distribution\",\n        \"_get_score_level\",\n        \"_get_sleep_recommendations\",\n        \"_get_wellness_recommendations\",\n        \"get_checkin_history\",\n        \"get_completion_rate\",\n        \"get_habit_analysis\",\n        \"get_mood_trends\",\n        \"get_quantitative_summaries\",\n        \"get_sleep_analysis\",\n        \"get_task_weekly_stats\",\n        \"get_wellness_score\"\n      ],\n      \"core/checkin_dynamic_manager.py\": [\n        \"__init__\",\n        \"_load_data\",\n        \"build_next_question_with_response\",\n        \"get_all_questions\",\n        \"get_categories\",\n        \"get_enabled_questions_for_ui\",\n        \"get_question_definition\",\n        \"get_question_text\",\n        \"get_question_type\",\n        \"get_question_validation\",\n        \"get_response_statement\",\n        \"get_transition_phrase\",\n        \"validate_answer\"\n      ],\n      \"core/config.py\": [\n        \"__init__\",\n        \"_normalize_path\",\n        \"ensure_user_directory\",\n        \"get_available_channels\",\n        \"get_backups_dir\",\n        \"get_channel_class_mapping\",\n        \"get_user_data_dir\",\n        \"get_user_file_path\",\n        \"print_configuration_report\",\n        \"validate_ai_configuration\",\n        \"validate_all_configuration\",\n        \"validate_and_raise_if_invalid\",\n        \"validate_communication_channels\",\n        \"validate_core_paths\",\n        \"validate_discord_config\",\n        \"validate_email_config\",\n        \"validate_environment_variables\",\n        \"validate_file_organization_settings\",\n        \"validate_logging_configuration\",\n        \"validate_minimum_config\",\n        \"validate_scheduler_configuration\"\n      ],\n      \"core/error_handling.py\": [\n        \"__enter__\",\n        \"__exit__\",\n        \"__init__\",\n        \"_get_default_data\",\n        \"_get_user_friendly_message\",\n        \"_log_error\",\n        \"_show_user_error\",\n        \"can_handle\",\n        \"decorator\",\n        \"handle_ai_error\",\n        \"handle_communication_error\",\n        \"handle_configuration_error\",\n        \"handle_error\",\n        \"handle_errors\",\n        \"handle_file_error\",\n        \"handle_network_error\",\n        \"handle_validation_error\",\n        \"recover\",\n        \"safe_file_operation\",\n        \"wrapper\"\n      ],\n      \"core/file_auditor.py\": [\n        \"__init__\",\n        \"_classify_path\",\n        \"_get_audit_directories\",\n        \"_split_env_list\",\n        \"critical\",\n        \"debug\",\n        \"error\",\n        \"info\",\n        \"record_created\",\n        \"start\",\n        \"start_auditor\",\n        \"stop\",\n        \"stop_auditor\",\n        \"warning\"\n      ],\n      \"core/file_operations.py\": [\n        \"_create_user_files__account_file\",\n        \"_create_user_files__checkins_file\",\n        \"_create_user_files__context_file\",\n        \"_create_user_files__determine_feature_enablement\",\n        \"_create_user_files__log_files\",\n        \"_create_user_files__message_files\",\n        \"_create_user_files__preferences_file\",\n        \"_create_user_files__schedules_file\",\n        \"_create_user_files__sent_messages_file\",\n        \"_create_user_files__task_files\",\n        \"_create_user_files__update_user_references\",\n        \"create_user_files\",\n        \"determine_file_path\",\n        \"load_json_data\",\n        \"save_json_data\",\n        \"verify_file_access\"\n      ],\n      \"core/logger.py\": [\n        \"__init__\",\n        \"_get_log_paths_for_environment\",\n        \"_is_testing_environment\",\n        \"_log\",\n        \"apply_test_context_formatter_to_all_loggers\",\n        \"cleanup_old_archives\",\n        \"cleanup_old_logs\",\n        \"clear_log_file_locks\",\n        \"compress_old_logs\",\n        \"critical\",\n        \"debug\",\n        \"disable_module_logging\",\n        \"doRollover\",\n        \"ensure_logs_directory\",\n        \"error\",\n        \"filter\",\n        \"force_restart_logging\",\n        \"format\",\n        \"get_component_logger\",\n        \"get_log_file_info\",\n        \"get_log_level_from_env\",\n        \"get_logger\",\n        \"get_verbose_mode\",\n        \"info\",\n        \"set_console_log_level\",\n        \"set_verbose_mode\",\n        \"setup_logging\",\n        \"setup_third_party_error_logging\",\n        \"shouldRollover\",\n        \"suppress_noisy_logging\",\n        \"toggle_verbose_logging\",\n        \"warning\"\n      ],\n      \"core/message_management.py\": [\n        \"_parse_timestamp\",\n        \"add_message\",\n        \"archive_old_messages\",\n        \"create_message_file_from_defaults\",\n        \"delete_message\",\n        \"edit_message\",\n        \"ensure_user_message_files\",\n        \"get_message_categories\",\n        \"get_recent_messages\",\n        \"get_timestamp_for_sorting\",\n        \"load_default_messages\",\n        \"store_sent_message\",\n        \"update_message\"\n      ],\n      \"core/response_tracking.py\": [\n        \"_get_response_log_filename\",\n        \"get_recent_chat_interactions\",\n        \"get_recent_checkins\",\n        \"get_recent_responses\",\n        \"get_timestamp_for_sorting\",\n        \"get_user_info_for_tracking\",\n        \"is_user_checkins_enabled\",\n        \"store_chat_interaction\",\n        \"store_user_response\",\n        \"track_user_response\"\n      ],\n      \"core/schedule_management.py\": [\n        \"add_schedule_period\",\n        \"clear_schedule_periods_cache\",\n        \"delete_schedule_period\",\n        \"edit_schedule_period\",\n        \"get_current_day_names\",\n        \"get_current_time_periods_with_validation\",\n        \"get_period_data__time_12h_display_to_24h\",\n        \"get_period_data__time_24h_to_12h_display\",\n        \"get_period_data__validate_and_format_time\",\n        \"get_schedule_days\",\n        \"get_schedule_time_periods\",\n        \"get_user_info_for_schedule_management\",\n        \"is_schedule_period_active\",\n        \"set_schedule_days\",\n        \"set_schedule_period_active\",\n        \"set_schedule_periods\",\n        \"sort_key\"\n      ],\n      \"core/schedule_utilities.py\": [\n        \"get_active_schedules\",\n        \"get_current_active_schedules\",\n        \"is_schedule_active\"\n      ],\n      \"core/scheduler.py\": [\n        \"__init__\",\n        \"_remove_user_message_job\",\n        \"_select_task_for_reminder__calculate_due_date_weight\",\n        \"_select_task_for_reminder__calculate_priority_weight\",\n        \"_select_task_for_reminder__calculate_task_weights\",\n        \"_select_task_for_reminder__handle_edge_cases\",\n        \"_select_task_for_reminder__select_task_by_weight\",\n        \"cleanup_old_tasks\",\n        \"clear_all_accumulated_jobs\",\n        \"clear_all_accumulated_jobs_standalone\",\n        \"get_random_time_within_period\",\n        \"get_random_time_within_task_period\",\n        \"handle_sending_scheduled_message\",\n        \"handle_task_reminder\",\n        \"is_job_for_category\",\n        \"is_time_conflict\",\n        \"log_scheduled_tasks\",\n        \"perform_daily_log_archival\",\n        \"process_category_schedule\",\n        \"process_user_schedules\",\n        \"reset_and_reschedule_daily_messages\",\n        \"run_category_scheduler_standalone\",\n        \"run_daily_scheduler\",\n        \"run_full_daily_scheduler\",\n        \"run_full_scheduler_standalone\",\n        \"run_user_scheduler_standalone\",\n        \"schedule_all_task_reminders\",\n        \"schedule_all_users_immediately\",\n        \"schedule_checkin_at_exact_time\",\n        \"schedule_daily_message_job\",\n        \"schedule_message_at_random_time\",\n        \"schedule_message_for_period\",\n        \"schedule_new_user\",\n        \"schedule_task_reminder\",\n        \"schedule_task_reminder_at_datetime\",\n        \"schedule_task_reminder_at_time\",\n        \"scheduler_loop\",\n        \"select_task_for_reminder\",\n        \"set_wake_timer\",\n        \"stop_scheduler\"\n      ],\n      \"core/schemas.py\": [\n        \"_accept_legacy_shape\",\n        \"_coerce_bool\",\n        \"_normalize_contact\",\n        \"_normalize_days\",\n        \"_normalize_flags\",\n        \"_normalize_periods\",\n        \"_valid_days\",\n        \"_valid_time\",\n        \"_validate_categories\",\n        \"_validate_discord_id\",\n        \"_validate_email\",\n        \"_validate_timezone\",\n        \"to_dict\",\n        \"validate_account_dict\",\n        \"validate_messages_file_dict\",\n        \"validate_preferences_dict\",\n        \"validate_schedules_dict\"\n      ],\n      \"core/service.py\": [\n        \"__init__\",\n        \"_check_and_fix_logging__check_recent_activity_timestamps\",\n        \"_check_and_fix_logging__ensure_log_file_exists\",\n        \"_check_and_fix_logging__force_restart_logging_system\",\n        \"_check_and_fix_logging__read_recent_log_content\",\n        \"_check_and_fix_logging__test_logging_functionality\",\n        \"_check_and_fix_logging__verify_test_message_present\",\n        \"_check_reschedule_requests__cleanup_request_file\",\n        \"_check_reschedule_requests__discover_request_files\",\n        \"_check_reschedule_requests__get_base_directory\",\n        \"_check_reschedule_requests__handle_processing_error\",\n        \"_check_reschedule_requests__parse_request_file\",\n        \"_check_reschedule_requests__process_valid_request\",\n        \"_check_reschedule_requests__validate_request_data\",\n        \"_check_test_message_requests__cleanup_request_file\",\n        \"_check_test_message_requests__discover_request_files\",\n        \"_check_test_message_requests__get_base_directory\",\n        \"_check_test_message_requests__handle_processing_error\",\n        \"_check_test_message_requests__parse_request_file\",\n        \"_check_test_message_requests__process_valid_request\",\n        \"_check_test_message_requests__validate_request_data\",\n        \"_cleanup_test_message_requests__get_base_directory\",\n        \"_cleanup_test_message_requests__is_test_message_request_file\",\n        \"_cleanup_test_message_requests__remove_request_file\",\n        \"check_and_fix_logging\",\n        \"check_reschedule_requests\",\n        \"check_test_message_requests\",\n        \"cleanup_reschedule_requests\",\n        \"cleanup_test_message_requests\",\n        \"emergency_shutdown\",\n        \"get_scheduler_manager\",\n        \"initialize_paths\",\n        \"main\",\n        \"run_service_loop\",\n        \"shutdown\",\n        \"signal_handler\",\n        \"start\",\n        \"validate_configuration\"\n      ],\n      \"core/service_utilities.py\": [\n        \"__init__\",\n        \"create_reschedule_request\",\n        \"is_service_running\",\n        \"load_and_localize_datetime\",\n        \"should_run\",\n        \"wait_for_network\"\n      ],\n      \"core/ui_management.py\": [\n        \"add_period_widget_to_layout\",\n        \"clear_period_widgets_from_layout\",\n        \"collect_period_data_from_widgets\",\n        \"load_period_widgets_for_category\",\n        \"period_name_for_display\",\n        \"period_name_for_storage\"\n      ],\n      \"core/user_data_handlers.py\": [\n        \"_save_user_data__create_backup\",\n        \"_save_user_data__legacy_preferences\",\n        \"_save_user_data__normalize_data\",\n        \"_save_user_data__save_single_type\",\n        \"_save_user_data__update_index\",\n        \"_save_user_data__validate_data\",\n        \"_save_user_data__validate_input\",\n        \"get_all_user_ids\",\n        \"get_user_data\",\n        \"register_data_loader\",\n        \"save_user_data\",\n        \"save_user_data_transaction\",\n        \"update_channel_preferences\",\n        \"update_user_account\",\n        \"update_user_context\",\n        \"update_user_preferences\",\n        \"update_user_schedules\"\n      ],\n      \"core/user_data_manager.py\": [\n        \"__init__\",\n        \"_get_last_interaction\",\n        \"_get_user_data_summary__add_file_info\",\n        \"_get_user_data_summary__add_log_file_info\",\n        \"_get_user_data_summary__add_message_file_info\",\n        \"_get_user_data_summary__add_missing_message_file_info\",\n        \"_get_user_data_summary__add_schedule_details\",\n        \"_get_user_data_summary__add_sent_messages_details\",\n        \"_get_user_data_summary__add_special_file_details\",\n        \"_get_user_data_summary__ensure_message_files\",\n        \"_get_user_data_summary__initialize_summary\",\n        \"_get_user_data_summary__process_core_files\",\n        \"_get_user_data_summary__process_enabled_message_files\",\n        \"_get_user_data_summary__process_log_files\",\n        \"_get_user_data_summary__process_message_files\",\n        \"_get_user_data_summary__process_orphaned_message_files\",\n        \"backup_user_data\",\n        \"build_user_index\",\n        \"delete_user_completely\",\n        \"export_user_data\",\n        \"get_all_user_summaries\",\n        \"get_user_analytics_summary\",\n        \"get_user_data_summary\",\n        \"get_user_info_for_data_manager\",\n        \"get_user_message_files\",\n        \"get_user_summary\",\n        \"rebuild_full_index\",\n        \"rebuild_user_index\",\n        \"remove_from_index\",\n        \"search_users\",\n        \"update_message_references\",\n        \"update_user_index\"\n      ],\n      \"core/user_data_validation.py\": [\n        \"_shared__title_case\",\n        \"is_valid_email\",\n        \"is_valid_phone\",\n        \"validate_new_user_data\",\n        \"validate_personalization_data\",\n        \"validate_schedule_periods\",\n        \"validate_schedule_periods__validate_time_format\",\n        \"validate_user_update\"\n      ],\n      \"core/user_management.py\": [\n        \"_ensure_default_loaders_once\",\n        \"_get_user_data__load_account\",\n        \"_get_user_data__load_context\",\n        \"_get_user_data__load_preferences\",\n        \"_get_user_data__load_schedules\",\n        \"_get_user_id_by_identifier__by_chat_id\",\n        \"_get_user_id_by_identifier__by_discord_user_id\",\n        \"_get_user_id_by_identifier__by_email\",\n        \"_get_user_id_by_identifier__by_internal_username\",\n        \"_get_user_id_by_identifier__by_phone\",\n        \"_load_presets_json\",\n        \"_save_user_data__save_account\",\n        \"_save_user_data__save_context\",\n        \"_save_user_data__save_preferences\",\n        \"_save_user_data__save_schedules\",\n        \"add_personalization_item\",\n        \"clear_personalization_cache\",\n        \"clear_user_caches\",\n        \"create_default_personalization_data\",\n        \"create_default_schedule_periods\",\n        \"create_new_user\",\n        \"ensure_all_categories_have_schedules\",\n        \"ensure_category_has_default_schedule\",\n        \"ensure_unique_ids\",\n        \"get_all_user_ids\",\n        \"get_available_data_types\",\n        \"get_data_type_info\",\n        \"get_personalization_field\",\n        \"get_predefined_options\",\n        \"get_timezone_options\",\n        \"get_user_categories\",\n        \"get_user_data_with_metadata\",\n        \"get_user_id_by_identifier\",\n        \"load_and_ensure_ids\",\n        \"migrate_legacy_schedules_structure\",\n        \"register_data_loader\",\n        \"register_default_loaders\",\n        \"remove_personalization_item\",\n        \"update_channel_preferences\",\n        \"update_personalization_field\",\n        \"update_user_account\",\n        \"update_user_context\",\n        \"update_user_schedules\"\n      ],\n      \"run_mhm.py\": [\n        \"main\"\n      ],\n      \"run_tests.py\": [\n        \"main\",\n        \"print_test_mode_info\",\n        \"run_command\"\n      ],\n      \"tasks/task_management.py\": [\n        \"_calculate_next_due_date\",\n        \"_create_next_recurring_task_instance\",\n        \"add_user_task_tag\",\n        \"are_tasks_enabled\",\n        \"cleanup_task_reminders\",\n        \"complete_task\",\n        \"create_task\",\n        \"delete_task\",\n        \"ensure_task_directory\",\n        \"get_task_by_id\",\n        \"get_tasks_due_soon\",\n        \"get_user_task_stats\",\n        \"load_active_tasks\",\n        \"load_completed_tasks\",\n        \"remove_user_task_tag\",\n        \"restore_task\",\n        \"save_active_tasks\",\n        \"save_completed_tasks\",\n        \"schedule_task_reminders\",\n        \"setup_default_task_tags\",\n        \"update_task\"\n      ],\n      \"tests/behavior/test_account_management_real_behavior.py\": [\n        \"cleanup_test_environment\",\n        \"create_test_user_data\",\n        \"main\",\n        \"setup_test_environment\",\n        \"test_category_management_real_behavior\",\n        \"test_data_consistency_real_behavior\",\n        \"test_feature_enablement_real_behavior\",\n        \"test_integration_scenarios_real_behavior\",\n        \"test_schedule_period_management_real_behavior\",\n        \"test_user_data_loading_real_behavior\"\n      ],\n      \"tests/behavior/test_ai_chatbot_behavior.py\": [\n        \"generate_response\",\n        \"test_ai_chatbot_adaptive_timeout_responds_to_system_resources\",\n        \"test_ai_chatbot_cache_performance_improvement\",\n        \"test_ai_chatbot_cleanup_and_resource_management\",\n        \"test_ai_chatbot_command_parsing_creates_structured_output\",\n        \"test_ai_chatbot_concurrent_access_safety\",\n        \"test_ai_chatbot_conversation_manager_integration\",\n        \"test_ai_chatbot_error_handling_preserves_system_stability\",\n        \"test_ai_chatbot_error_recovery_with_real_files\",\n        \"test_ai_chatbot_generates_actual_responses\",\n        \"test_ai_chatbot_handles_api_failures_gracefully\",\n        \"test_ai_chatbot_performance_under_load\",\n        \"test_ai_chatbot_prompt_optimization_improves_performance\",\n        \"test_ai_chatbot_response_tracking_integration\",\n        \"test_ai_chatbot_status_reporting_actual_system_state\",\n        \"test_ai_chatbot_system_prompt_integration_test_actual_functionality\",\n        \"test_ai_chatbot_tracks_conversation_history\",\n        \"test_ai_chatbot_user_context_manager_integration\",\n        \"test_ai_chatbot_uses_user_context_for_personalization\",\n        \"test_ai_chatbot_with_real_user_data\",\n        \"test_prompt_manager_creates_actual_file\",\n        \"test_response_cache_actually_stores_and_retrieves_data\",\n        \"test_response_cache_cleanup_actually_removes_entries\",\n        \"test_singleton_behavior_creates_single_instance\"\n      ],\n      \"tests/behavior/test_ai_context_builder_behavior.py\": [\n        \"build_context\",\n        \"test_build_user_context_creates_fresh_timestamp\",\n        \"test_build_user_context_creates_structured_context_data\",\n        \"test_build_user_context_handles_concurrent_access\",\n        \"test_build_user_context_handles_corrupted_user_data\",\n        \"test_build_user_context_handles_empty_files\",\n        \"test_build_user_context_handles_empty_user_data\",\n        \"test_build_user_context_handles_error_conditions\",\n        \"test_build_user_context_handles_large_user_data\",\n        \"test_build_user_context_handles_long_user_id\",\n        \"test_build_user_context_handles_missing_files\",\n        \"test_build_user_context_handles_missing_user_data_gracefully\",\n        \"test_build_user_context_handles_rapid_calls\",\n        \"test_build_user_context_handles_special_characters_in_user_id\",\n        \"test_build_user_context_handles_unicode_user_id\",\n        \"test_build_user_context_includes_conversation_history\",\n        \"test_build_user_context_includes_current_time\",\n        \"test_build_user_context_includes_recent_checkins\",\n        \"test_build_user_context_includes_user_data_from_files\",\n        \"test_build_user_context_without_conversation_history\",\n        \"test_context_builder_initialization_creates_components\"\n      ],\n      \"tests/behavior/test_ai_context_builder_coverage_expansion.py\": [\n        \"test_analyze_context_error_handling\",\n        \"test_analyze_context_with_checkin_data\",\n        \"test_analyze_context_with_empty_checkins\",\n        \"test_analyze_context_with_missing_data\",\n        \"test_calculate_wellness_score_all_factors\",\n        \"test_calculate_wellness_score_no_factors\",\n        \"test_create_checkin_context\",\n        \"test_create_checkin_context_error_handling\",\n        \"test_create_context_prompt_error_handling\",\n        \"test_create_context_prompt_with_analysis\",\n        \"test_create_context_prompt_with_profile\",\n        \"test_create_context_prompt_with_user_context\",\n        \"test_create_task_context\",\n        \"test_create_task_context_error_handling\",\n        \"test_determine_trend_declining\",\n        \"test_determine_trend_improving\",\n        \"test_determine_trend_insufficient_data\",\n        \"test_determine_trend_stable\",\n        \"test_generate_insights_dental_hygiene\",\n        \"test_generate_insights_energy_patterns\",\n        \"test_generate_insights_excellent_breakfast\",\n        \"test_generate_insights_low_mood\",\n        \"test_generate_insights_poor_breakfast\",\n        \"test_generate_insights_positive_mood\",\n        \"test_get_context_builder_singleton\"\n      ],\n      \"tests/behavior/test_ai_conversation_history_behavior.py\": [\n        \"add_message\",\n        \"test_add_message_appends_to_existing_session\",\n        \"test_add_message_includes_timestamp\",\n        \"test_add_message_persists_to_session\",\n        \"test_add_message_validates_content\",\n        \"test_add_message_validates_role\",\n        \"test_clear_history_removes_session_data\",\n        \"test_conversation_history_handles_concurrent_access\",\n        \"test_conversation_history_handles_large_messages\",\n        \"test_conversation_history_handles_rapid_access\",\n        \"test_conversation_history_handles_special_characters\",\n        \"test_conversation_history_handles_unicode_messages\",\n        \"test_conversation_history_initialization_creates_components\",\n        \"test_delete_session_removes_specific_session\",\n        \"test_end_session_terminates_active_session\",\n        \"test_get_conversation_summary_handles_empty_history\",\n        \"test_get_conversation_summary_returns_actual_summary\",\n        \"test_get_history_returns_all_sessions\",\n        \"test_get_recent_messages_handles_empty_history\",\n        \"test_get_recent_messages_handles_negative_limit\",\n        \"test_get_recent_messages_handles_zero_limit\",\n        \"test_get_recent_messages_respects_limit\",\n        \"test_get_recent_messages_returns_actual_data\",\n        \"test_get_statistics_returns_actual_data\",\n        \"test_start_session_creates_actual_session\"\n      ],\n      \"tests/behavior/test_auto_cleanup_behavior.py\": [\n        \"mock_exists_with_changes\",\n        \"mock_walk_with_error\",\n        \"temp_test_dir\",\n        \"temp_test_environment\",\n        \"temp_tracker_file\",\n        \"test_auto_cleanup_if_needed_not_needed_real_behavior\",\n        \"test_auto_cleanup_if_needed_real_behavior\",\n        \"test_calculate_cache_size_concurrent_file_changes_real_behavior\",\n        \"test_calculate_cache_size_empty_inputs_real_behavior\",\n        \"test_calculate_cache_size_file_corruption_handling_real_behavior\",\n        \"test_calculate_cache_size_large_cache_scenario_real_behavior\",\n        \"test_calculate_cache_size_nested_directory_structure_real_behavior\",\n        \"test_calculate_cache_size_nonexistent_files_real_behavior\",\n        \"test_calculate_cache_size_permission_error_simulation_real_behavior\",\n        \"test_calculate_cache_size_real_behavior\",\n        \"test_find_pyc_files_real_behavior\",\n        \"test_find_pycache_dirs_real_behavior\",\n        \"test_get_cleanup_status_29_days_real_behavior\",\n        \"test_get_cleanup_status_31_days_real_behavior\",\n        \"test_get_cleanup_status_corrupted_tracker_file_real_behavior\",\n        \"test_get_cleanup_status_empty_tracker_file_real_behavior\",\n        \"test_get_cleanup_status_exactly_30_days_real_behavior\",\n        \"test_get_cleanup_status_invalid_timestamp_real_behavior\",\n        \"test_get_cleanup_status_missing_timestamp_field_real_behavior\",\n        \"test_get_cleanup_status_never_cleaned_real_behavior\",\n        \"test_get_cleanup_status_overdue_cleanup_real_behavior\",\n        \"test_get_cleanup_status_recent_cleanup_real_behavior\",\n        \"test_get_cleanup_status_very_old_cleanup_real_behavior\",\n        \"test_get_cleanup_status_very_recent_cleanup_real_behavior\",\n        \"test_get_last_cleanup_timestamp_no_file_real_behavior\",\n        \"test_get_last_cleanup_timestamp_with_file_real_behavior\",\n        \"test_perform_cleanup_real_behavior\",\n        \"test_should_run_cleanup_custom_interval_real_behavior\",\n        \"test_should_run_cleanup_never_cleaned_real_behavior\",\n        \"test_should_run_cleanup_old_cleanup_real_behavior\",\n        \"test_should_run_cleanup_recent_cleanup_real_behavior\",\n        \"test_update_cleanup_timestamp_real_behavior\"\n      ],\n      \"tests/behavior/test_backup_manager_behavior.py\": [\n        \"_cleanup_test_files\",\n        \"_create_test_config_files\",\n        \"failing_operation\",\n        \"setup_backup_manager\",\n        \"test_backup_creation_and_validation_real_behavior\",\n        \"test_backup_manager_error_handling_real_behavior\",\n        \"test_backup_manager_initialization_real_behavior\",\n        \"test_backup_manager_with_empty_user_directory_real_behavior\",\n        \"test_backup_manager_with_large_user_data_real_behavior\",\n        \"test_backup_rotation_by_age_real_behavior\",\n        \"test_backup_rotation_by_count_real_behavior\",\n        \"test_create_automatic_backup_real_behavior\",\n        \"test_create_backup_with_all_components_real_behavior\",\n        \"test_create_backup_with_config_files_real_behavior\",\n        \"test_create_backup_with_user_data_real_behavior\",\n        \"test_ensure_backup_directory_real_behavior\",\n        \"test_list_backups_real_behavior\",\n        \"test_operation\",\n        \"test_perform_safe_operation_real_behavior\",\n        \"test_perform_safe_operation_with_failure_real_behavior\",\n        \"test_restore_backup_with_config_files_real_behavior\",\n        \"test_restore_backup_with_nonexistent_file_real_behavior\",\n        \"test_validate_backup_real_behavior\",\n        \"test_validate_backup_with_corrupted_file_real_behavior\",\n        \"test_validate_backup_with_missing_file_real_behavior\",\n        \"test_validate_system_state_real_behavior\",\n        \"test_validate_system_state_with_missing_user_dir_real_behavior\"\n      ],\n      \"tests/behavior/test_checkin_analytics_behavior.py\": [\n        \"analytics\",\n        \"mock_checkins_for_completion\",\n        \"mock_checkins_for_history\",\n        \"mock_checkins_for_tasks\",\n        \"mock_checkins_for_wellness\",\n        \"mock_checkins_with_habits\",\n        \"mock_checkins_with_mood\",\n        \"mock_checkins_with_sleep\",\n        \"test_analytics_initialization_real_behavior\",\n        \"test_checkin_history_no_data_real_behavior\",\n        \"test_checkin_history_with_data_real_behavior\",\n        \"test_completion_rate_no_data_real_behavior\",\n        \"test_completion_rate_with_data_real_behavior\",\n        \"test_habit_analysis_no_data_real_behavior\",\n        \"test_habit_analysis_with_data_real_behavior\",\n        \"test_mood_trends_invalid_mood_data_real_behavior\",\n        \"test_mood_trends_no_data_real_behavior\",\n        \"test_mood_trends_with_data_real_behavior\",\n        \"test_sleep_analysis_no_data_real_behavior\",\n        \"test_sleep_analysis_with_data_real_behavior\",\n        \"test_task_weekly_stats_no_data_real_behavior\",\n        \"test_task_weekly_stats_with_data_real_behavior\",\n        \"test_wellness_score_no_data_real_behavior\",\n        \"test_wellness_score_with_data_real_behavior\"\n      ],\n      \"tests/behavior/test_command_parser_coverage_expansion_phase3_simple.py\": [\n        \"setup_method\",\n        \"test_error_handling_in_parsing\",\n        \"test_extract_intent_from_ai_response_case_insensitive\",\n        \"test_extract_intent_from_ai_response_complete_task\",\n        \"test_extract_intent_from_ai_response_create_task\",\n        \"test_extract_intent_from_ai_response_list_tasks\",\n        \"test_extract_intent_from_ai_response_no_match\",\n        \"test_extract_intent_from_ai_response_start_checkin\",\n        \"test_extract_task_entities_basic\",\n        \"test_extract_task_entities_complex\",\n        \"test_extract_task_entities_no_match\",\n        \"test_extract_task_entities_with_due_date\",\n        \"test_extract_task_entities_with_priority\",\n        \"test_extract_task_name_from_context_basic\",\n        \"test_extract_task_name_from_context_complex\",\n        \"test_extract_task_name_from_context_no_match\",\n        \"test_extract_update_entities_complex\",\n        \"test_extract_update_entities_due_date\",\n        \"test_extract_update_entities_due_short\",\n        \"test_extract_update_entities_no_match\",\n        \"test_extract_update_entities_priority\",\n        \"test_get_enhanced_command_parser_singleton\",\n        \"test_get_suggestions_analytics_keywords\",\n        \"test_get_suggestions_checkin_keywords\",\n        \"test_get_suggestions_empty_input\",\n        \"test_get_suggestions_profile_keywords\",\n        \"test_get_suggestions_schedule_keywords\",\n        \"test_get_suggestions_task_keywords\",\n        \"test_get_suggestions_unknown_keywords\",\n        \"test_parse_command_function\",\n        \"test_parse_command_function_empty\",\n        \"test_parse_command_function_none\",\n        \"test_parser_ai_response_processing\",\n        \"test_parser_entity_extraction_integration\",\n        \"test_parser_initialization\",\n        \"test_parser_initialization_components\",\n        \"test_parser_integration_with_real_inputs\",\n        \"test_parser_method_signatures\",\n        \"test_parser_parse_method\",\n        \"test_parser_parse_method_empty\",\n        \"test_parser_parse_method_none\",\n        \"test_parser_parse_method_whitespace\",\n        \"test_parser_robustness\",\n        \"test_parser_suggestions_integration\",\n        \"test_parser_with_mock_ai_chatbot\",\n        \"test_parser_with_mock_interaction_handlers\",\n        \"test_parsing_result_initialization\",\n        \"test_pattern_matching_edge_cases\"\n      ],\n      \"tests/behavior/test_communication_behavior.py\": [\n        \"comm_manager\",\n        \"mock_channel_config\",\n        \"realistic_mock_channel\",\n        \"temp_dir\",\n        \"test_communication_manager_initialization\",\n        \"test_communication_manager_singleton\",\n        \"test_get_active_channels\",\n        \"test_initialize_channels_from_config\",\n        \"test_send_message_sync_channel_not_found\",\n        \"test_send_message_sync_channel_not_ready\",\n        \"test_send_message_sync_with_realistic_channel\"\n      ],\n      \"tests/behavior/test_communication_command_parser_behavior.py\": [\n        \"test_command_parser_initialization_creates_components\"\n      ],\n      \"tests/behavior/test_communication_factory_coverage_expansion.py\": [\n        \"__init__\",\n        \"channel_type\",\n        \"test_create_channel_successful_creation\",\n        \"test_create_channel_unknown_type\",\n        \"test_factory_config_integration\",\n        \"test_factory_dynamic_import_handling\",\n        \"test_factory_error_handling_create_channel\",\n        \"test_factory_error_handling_get_channels\",\n        \"test_factory_error_handling_initialization\",\n        \"test_factory_logging_behavior\",\n        \"test_factory_registry_persistence\",\n        \"test_factory_singleton_behavior\",\n        \"test_get_registered_channels_empty_registry\",\n        \"test_get_registered_channels_with_channels\",\n        \"test_initialize_registry_already_initialized\",\n        \"test_initialize_registry_successful_registration\",\n        \"test_initialize_registry_with_attribute_error\",\n        \"test_initialize_registry_with_import_error\"\n      ],\n      \"tests/behavior/test_communication_interaction_manager_behavior.py\": [\n        \"test_interaction_manager_initialization_creates_components\",\n        \"test_process_message_creates_interaction_record\",\n        \"test_process_message_handles_ai_chat\",\n        \"test_process_message_handles_checkin_commands\",\n        \"test_process_message_handles_command_parsing\",\n        \"test_process_message_handles_concurrent_access\",\n        \"test_process_message_handles_conversation_context\",\n        \"test_process_message_handles_conversation_flow\",\n        \"test_process_message_handles_empty_message\",\n        \"test_process_message_handles_error_conditions\",\n        \"test_process_message_handles_feature_flags\",\n        \"test_process_message_handles_help_commands\",\n        \"test_process_message_handles_long_messages\",\n        \"test_process_message_handles_mixed_content\",\n        \"test_process_message_handles_profile_commands\",\n        \"test_process_message_handles_rate_limiting\",\n        \"test_process_message_handles_schedule_commands\",\n        \"test_process_message_handles_special_characters\",\n        \"test_process_message_handles_task_commands\",\n        \"test_process_message_handles_unicode_characters\",\n        \"test_process_message_handles_unknown_commands\",\n        \"test_process_message_handles_user_preferences\",\n        \"test_process_message_handles_whitespace_only_message\",\n        \"test_process_message_includes_interaction_type\",\n        \"test_process_message_includes_timestamp\",\n        \"test_process_message_includes_user_context\"\n      ],\n      \"tests/behavior/test_communication_manager_coverage_expansion.py\": [\n        \"comm_manager\",\n        \"mock_channel_config\",\n        \"realistic_mock_channel\",\n        \"test_async_channel_initialization_real_behavior\",\n        \"test_async_message_sending_channel_not_ready_real_behavior\",\n        \"test_async_message_sending_real_behavior\",\n        \"test_async_shutdown_real_behavior\",\n        \"test_async_startup_real_behavior\",\n        \"test_broadcast_message_real_behavior\",\n        \"test_channel_initialization_with_retry_real_behavior\",\n        \"test_channel_restart_attempt_real_behavior\",\n        \"test_channel_restart_monitoring_real_behavior\",\n        \"test_create_task_reminder_message_real_behavior\",\n        \"test_data_dir\",\n        \"test_default_channel_configs_real_behavior\",\n        \"test_discord_connectivity_status_real_behavior\",\n        \"test_event_loop_setup_real_behavior\",\n        \"test_get_all_statuses_real_behavior\",\n        \"test_get_channel_status_real_behavior\",\n        \"test_get_recipient_for_service_real_behavior\",\n        \"test_handle_message_sending_real_behavior\",\n        \"test_handle_scheduled_checkin_real_behavior\",\n        \"test_handle_task_reminder_real_behavior\",\n        \"test_health_check_all_real_behavior\",\n        \"test_logging_health_check_real_behavior\",\n        \"test_message_queuing_real_behavior\",\n        \"test_receive_messages_real_behavior\",\n        \"test_restart_monitor_management_real_behavior\",\n        \"test_retry_queue_processing_real_behavior\",\n        \"test_retry_queue_processing_with_failure_real_behavior\",\n        \"test_retry_thread_management_real_behavior\",\n        \"test_run_async_sync_real_behavior\",\n        \"test_send_ai_generated_message_real_behavior\",\n        \"test_send_checkin_prompt_real_behavior\",\n        \"test_send_predefined_message_real_behavior\",\n        \"test_set_scheduler_manager_real_behavior\",\n        \"test_should_send_checkin_prompt_real_behavior\",\n        \"test_start_all_real_behavior\",\n        \"test_stop_all_real_behavior\",\n        \"test_sync_channel_initialization_real_behavior\",\n        \"test_sync_shutdown_real_behavior\",\n        \"test_sync_startup_real_behavior\"\n      ],\n      \"tests/behavior/test_config_coverage_expansion_phase3_simple.py\": [\n        \"test_config_validation_error_initialization\",\n        \"test_config_validation_error_with_none_values\",\n        \"test_configuration_constants_exist\",\n        \"test_configuration_error_handling\",\n        \"test_configuration_validation_integration\",\n        \"test_directory_creation_functions\",\n        \"test_ensure_user_directory_failure\",\n        \"test_ensure_user_directory_success\",\n        \"test_environment_variable_loading\",\n        \"test_get_available_channels\",\n        \"test_get_backups_dir_production_mode\",\n        \"test_get_backups_dir_testing_mode\",\n        \"test_get_channel_class_mapping\",\n        \"test_get_user_data_dir\",\n        \"test_get_user_file_path\",\n        \"test_normalize_path_edge_cases\",\n        \"test_normalize_path_function\",\n        \"test_path_handling_functions\",\n        \"test_print_configuration_report\",\n        \"test_print_configuration_report_no_channels\",\n        \"test_validate_ai_configuration_invalid_url\",\n        \"test_validate_ai_configuration_missing_url\",\n        \"test_validate_ai_configuration_valid_config\",\n        \"test_validate_all_configuration_integration\",\n        \"test_validate_and_raise_if_invalid\",\n        \"test_validate_communication_channels\",\n        \"test_validate_core_paths_success\",\n        \"test_validate_discord_config\",\n        \"test_validate_email_config\",\n        \"test_validate_environment_variables\",\n        \"test_validate_file_organization_settings\",\n        \"test_validate_logging_configuration\",\n        \"test_validate_minimum_config\",\n        \"test_validate_scheduler_configuration\",\n        \"test_validation_functions_return_correct_types\"\n      ],\n      \"tests/behavior/test_conversation_behavior.py\": [\n        \"test_checkin_flow_completion\",\n        \"test_checkin_flow_progression\",\n        \"test_conversation_manager_cancel_handling\",\n        \"test_conversation_manager_cleanup_and_resource_management\",\n        \"test_conversation_manager_command_handling\",\n        \"test_conversation_manager_concurrent_access_safety\",\n        \"test_conversation_manager_error_handling_preserves_system_stability\",\n        \"test_conversation_manager_error_recovery_with_real_files\",\n        \"test_conversation_manager_initialization_creates_structure\",\n        \"test_conversation_manager_integration_with_response_tracking\",\n        \"test_conversation_manager_performance_under_load\",\n        \"test_conversation_manager_with_real_user_data\",\n        \"test_get_question_text_returns_personalized_questions\",\n        \"test_handle_contextual_question_integrates_with_ai\",\n        \"test_handle_inbound_message_creates_user_state\",\n        \"test_handle_inbound_message_preserves_existing_state\",\n        \"test_start_checkin_creates_checkin_state\",\n        \"test_start_checkin_handles_disabled_user\",\n        \"test_validate_response_handles_edge_cases\",\n        \"test_validate_response_handles_various_inputs\"\n      ],\n      \"tests/behavior/test_core_message_management_coverage_expansion.py\": [\n        \"test_get_message_categories_from_env_real_behavior\",\n        \"test_get_message_categories_from_json_real_behavior\",\n        \"test_get_message_categories_no_env_real_behavior\",\n        \"test_get_timestamp_for_sorting_invalid_item_real_behavior\",\n        \"test_get_timestamp_for_sorting_real_behavior\",\n        \"test_get_timestamp_for_sorting_string_real_behavior\",\n        \"test_load_default_messages_file_not_found_real_behavior\",\n        \"test_load_default_messages_real_behavior\",\n        \"test_parse_timestamp_real_behavior\"\n      ],\n      \"tests/behavior/test_core_service_coverage_expansion.py\": [\n        \"mock_communication_manager\",\n        \"mock_config\",\n        \"mock_remove_with_disappearing_files\",\n        \"mock_remove_with_partial_failure\",\n        \"mock_scheduler_manager\",\n        \"service\",\n        \"test_check_and_fix_logging_basic_success\",\n        \"test_check_and_fix_logging_check_recent_activity_timestamps_invalid_timestamp\",\n        \"test_check_and_fix_logging_check_recent_activity_timestamps_old_activity\",\n        \"test_check_and_fix_logging_check_recent_activity_timestamps_recent_activity\",\n        \"test_check_and_fix_logging_failure_real_behavior\",\n        \"test_check_and_fix_logging_file_creation_failure\",\n        \"test_check_and_fix_logging_file_missing\",\n        \"test_check_and_fix_logging_old_activity_restart\",\n        \"test_check_and_fix_logging_read_recent_log_content_large_file\",\n        \"test_check_and_fix_logging_read_recent_log_content_small_file\",\n        \"test_check_and_fix_logging_recent_activity_detected\",\n        \"test_check_and_fix_logging_success_real_behavior\",\n        \"test_check_and_fix_logging_verify_test_message_present_found\",\n        \"test_check_and_fix_logging_verify_test_message_present_not_found\",\n        \"test_check_reschedule_requests_handle_processing_error_cleanup_failure\",\n        \"test_check_reschedule_requests_handle_processing_error_successful_cleanup\",\n        \"test_check_reschedule_requests_invalid_file\",\n        \"test_check_reschedule_requests_json_error\",\n        \"test_check_reschedule_requests_no_files\",\n        \"test_check_reschedule_requests_old_file_processed\",\n        \"test_check_reschedule_requests_valid_file\",\n        \"test_check_reschedule_requests_validate_request_data_missing_fields\",\n        \"test_check_reschedule_requests_validate_request_data_old_timestamp\",\n        \"test_check_test_message_requests_communication_error\",\n        \"test_check_test_message_requests_handle_processing_error_cleanup_failure\",\n        \"test_check_test_message_requests_handle_processing_error_successful_cleanup\",\n        \"test_check_test_message_requests_invalid_file\",\n        \"test_check_test_message_requests_json_error\",\n        \"test_check_test_message_requests_no_communication_manager\",\n        \"test_check_test_message_requests_no_files\",\n        \"test_check_test_message_requests_valid_file\",\n        \"test_cleanup_test_message_requests_concurrent_access_simulation_real_behavior\",\n        \"test_cleanup_test_message_requests_directory_access_error_real_behavior\",\n        \"test_cleanup_test_message_requests_empty_directory_real_behavior\",\n        \"test_cleanup_test_message_requests_file_in_use_error_real_behavior\",\n        \"test_cleanup_test_message_requests_file_permission_error_real_behavior\",\n        \"test_cleanup_test_message_requests_large_number_of_files_real_behavior\",\n        \"test_cleanup_test_message_requests_mixed_file_types_real_behavior\",\n        \"test_cleanup_test_message_requests_partial_failure_real_behavior\",\n        \"test_cleanup_test_message_requests_remove_request_file_generic_error_real_behavior\",\n        \"test_cleanup_test_message_requests_remove_request_file_not_found_error_real_behavior\",\n        \"test_cleanup_test_message_requests_remove_request_file_permission_error_real_behavior\",\n        \"test_cleanup_test_message_requests_remove_request_file_success_real_behavior\",\n        \"test_get_scheduler_manager_real_behavior\",\n        \"test_initialize_paths_real_behavior\",\n        \"test_initialize_paths_with_empty_categories_real_behavior\",\n        \"test_initialize_paths_with_invalid_categories_real_behavior\",\n        \"test_initialize_paths_with_none_user_id_real_behavior\",\n        \"test_initialize_paths_with_path_generation_error_real_behavior\",\n        \"test_main_function_real_behavior\",\n        \"test_main_function_with_service_failure_real_behavior\",\n        \"test_service_atexit_handler_real_behavior\",\n        \"test_service_atexit_handler_with_manager_stop_failure_real_behavior\",\n        \"test_service_atexit_handler_with_none_managers_real_behavior\",\n        \"test_service_cleanup_reschedule_requests_real_behavior\",\n        \"test_service_cleanup_test_message_requests_real_behavior\",\n        \"test_service_initialization_error_real_behavior\",\n        \"test_service_initialization_real_behavior\",\n        \"test_service_retry_mechanism_real_behavior\",\n        \"test_service_signal_handlers_real_behavior\",\n        \"test_service_startup_time_tracking_real_behavior\",\n        \"test_signal_handler_real_behavior\",\n        \"test_start_service_communication_manager_failure_real_behavior\",\n        \"test_start_service_configuration_failure_real_behavior\",\n        \"test_start_service_path_initialization_failure_real_behavior\",\n        \"test_start_service_scheduler_manager_failure_real_behavior\",\n        \"test_start_service_success_real_behavior\",\n        \"test_stop_service_real_behavior\",\n        \"test_stop_service_with_manager_stop_failure_real_behavior\",\n        \"test_stop_service_with_none_managers_real_behavior\",\n        \"test_validate_configuration_failure_real_behavior\",\n        \"test_validate_configuration_success_real_behavior\"\n      ],\n      \"tests/behavior/test_discord_bot_behavior.py\": [\n        \"discord_bot\",\n        \"mock_discord_bot\",\n        \"test_connection_status_update_actually_changes_state\",\n        \"test_detailed_connection_status_returns_actual_state\",\n        \"test_discord_bot_channel_type_is_async\",\n        \"test_discord_bot_cleanup_and_resource_management\",\n        \"test_discord_bot_concurrent_access_safety\",\n        \"test_discord_bot_connection_status_summary_returns_readable_string\",\n        \"test_discord_bot_error_handling_preserves_system_stability\",\n        \"test_discord_bot_error_recovery_with_real_files\",\n        \"test_discord_bot_health_check_verifies_actual_status\",\n        \"test_discord_bot_health_status_returns_actual_metrics\",\n        \"test_discord_bot_initialization_creates_proper_structure\",\n        \"test_discord_bot_initialization_with_dns_failure\",\n        \"test_discord_bot_initialization_with_valid_token\",\n        \"test_discord_bot_initialization_without_token\",\n        \"test_discord_bot_initialize_creates_thread\",\n        \"test_discord_bot_integration_with_conversation_manager\",\n        \"test_discord_bot_integration_with_user_management\",\n        \"test_discord_bot_is_actually_connected_checks_real_state\",\n        \"test_discord_bot_is_initialized_checks_actual_state\",\n        \"test_discord_bot_manual_reconnect_actually_reconnects\",\n        \"test_discord_bot_performance_under_load\",\n        \"test_discord_bot_receive_messages_returns_actual_data\",\n        \"test_discord_bot_send_dm_actually_sends_direct_message\",\n        \"test_discord_bot_send_message_actually_sends\",\n        \"test_discord_bot_send_message_handles_errors\",\n        \"test_discord_bot_shutdown_actually_cleans_up\",\n        \"test_discord_bot_shutdown_actually_stops_thread\",\n        \"test_discord_bot_with_real_user_data\",\n        \"test_discord_checkin_flow_end_to_end\",\n        \"test_discord_complete_task_by_name_variation\",\n        \"test_discord_message_to_interaction_manager_complete_task_prompt\",\n        \"test_discord_response_after_task_reminder\",\n        \"test_discord_task_create_update_complete\",\n        \"test_dns_resolution_check_actually_tests_connectivity\",\n        \"test_dns_resolution_fallback_uses_alternative_servers\",\n        \"test_interaction_manager_single_response\",\n        \"test_network_connectivity_check_tests_multiple_endpoints\",\n        \"test_network_connectivity_fallback_tries_alternative_endpoints\",\n        \"test_user_setup\"\n      ],\n      \"tests/behavior/test_dynamic_checkin_behavior.py\": [\n        \"test_build_next_question_with_response\",\n        \"test_complete_question_flow_variety\",\n        \"test_conversation_manager_uses_dynamic_questions\",\n        \"test_dynamic_checkin_manager_initialization\",\n        \"test_question_definitions\",\n        \"test_question_text_uses_dynamic_manager\",\n        \"test_response_statements\",\n        \"test_response_variety\",\n        \"test_transition_phrase_variety\",\n        \"test_ui_questions_format\",\n        \"test_validation\",\n        \"test_validation_uses_dynamic_manager\"\n      ],\n      \"tests/behavior/test_email_bot_behavior.py\": [\n        \"send_email\",\n        \"setup_method\",\n        \"test_email_bot_async_shutdown_method_behavior\",\n        \"test_email_bot_data_integrity\",\n        \"test_email_bot_error_handling_preserves_system_stability\",\n        \"test_email_bot_initialization_creates_proper_structure\",\n        \"test_email_bot_initialization_with_custom_config\",\n        \"test_email_bot_legacy_start_method_behavior\",\n        \"test_email_bot_legacy_start_method_failure_behavior\",\n        \"test_email_bot_performance_under_load\",\n        \"test_email_bot_status_checking_behavior\"\n      ],\n      \"tests/behavior/test_enhanced_command_parser_behavior.py\": [\n        \"parse_command\",\n        \"setup_method\",\n        \"test_enhanced_command_parser_ai_enhanced_parsing_behavior\",\n        \"test_enhanced_command_parser_case_insensitivity_behavior\",\n        \"test_enhanced_command_parser_checkin_patterns_behavior\",\n        \"test_enhanced_command_parser_confidence_calculation_behavior\",\n        \"test_enhanced_command_parser_consistency_behavior\",\n        \"test_enhanced_command_parser_empty_message_behavior\",\n        \"test_enhanced_command_parser_end_to_end_behavior\",\n        \"test_enhanced_command_parser_entity_extraction_behavior\",\n        \"test_enhanced_command_parser_error_handling_behavior\",\n        \"test_enhanced_command_parser_fallback_behavior\",\n        \"test_enhanced_command_parser_help_patterns_behavior\",\n        \"test_enhanced_command_parser_initialization_behavior\",\n        \"test_enhanced_command_parser_memory_behavior\",\n        \"test_enhanced_command_parser_pattern_compilation_behavior\",\n        \"test_enhanced_command_parser_performance_behavior\",\n        \"test_enhanced_command_parser_task_completion_patterns_behavior\",\n        \"test_enhanced_command_parser_task_creation_patterns_behavior\",\n        \"test_enhanced_command_parser_task_listing_patterns_behavior\",\n        \"test_enhanced_command_parser_thread_safety_behavior\",\n        \"test_enhanced_command_parser_unknown_patterns_behavior\",\n        \"test_enhanced_command_parser_with_real_ai_chatbot_behavior\",\n        \"test_enhanced_command_parser_with_real_handlers_behavior\"\n      ],\n      \"tests/behavior/test_error_handling_coverage_expansion_phase3_final.py\": [\n        \"inner_function\",\n        \"outer_function\",\n        \"test_configuration_error_initialization\",\n        \"test_data_error_initialization\",\n        \"test_error_handler_global_instance\",\n        \"test_error_handler_global_instance_functionality\",\n        \"test_error_handler_initialization\",\n        \"test_error_handler_retry_limits\",\n        \"test_error_handler_with_attribute_error\",\n        \"test_error_handler_with_bytes_warning\",\n        \"test_error_handler_with_complex_context\",\n        \"test_error_handler_with_configuration_error\",\n        \"test_error_handler_with_connection_error\",\n        \"test_error_handler_with_context\",\n        \"test_error_handler_with_custom_operation\",\n        \"test_error_handler_with_data_error\",\n        \"test_error_handler_with_default_operation\",\n        \"test_error_handler_with_deprecation_warning\",\n        \"test_error_handler_with_empty_context\",\n        \"test_error_handler_with_file_operation_error\",\n        \"test_error_handler_with_future_warning\",\n        \"test_error_handler_with_generic_exception\",\n        \"test_error_handler_with_import_error\",\n        \"test_error_handler_with_import_warning\",\n        \"test_error_handler_with_index_error\",\n        \"test_error_handler_with_io_error\",\n        \"test_error_handler_with_key_error\",\n        \"test_error_handler_with_long_operation_name\",\n        \"test_error_handler_with_mhm_error\",\n        \"test_error_handler_with_module_not_found_error\",\n        \"test_error_handler_with_multiple_strategies\",\n        \"test_error_handler_with_no_context\",\n        \"test_error_handler_with_none_context_and_error\",\n        \"test_error_handler_with_none_error\",\n        \"test_error_handler_with_os_error\",\n        \"test_error_handler_with_pending_deprecation_warning\",\n        \"test_error_handler_with_permission_error\",\n        \"test_error_handler_with_recovery_strategy\",\n        \"test_error_handler_with_resource_warning\",\n        \"test_error_handler_with_runtime_error\",\n        \"test_error_handler_with_runtime_warning\",\n        \"test_error_handler_with_special_characters_in_context\",\n        \"test_error_handler_with_syntax_warning\",\n        \"test_error_handler_with_timeout_error\",\n        \"test_error_handler_with_type_error\",\n        \"test_error_handler_with_unicode_decode_error\",\n        \"test_error_handler_with_unicode_encode_error\",\n        \"test_error_handler_with_unicode_error\",\n        \"test_error_handler_with_unicode_translate_error\",\n        \"test_error_handler_with_unicode_warning\",\n        \"test_error_handler_with_unrecoverable_error\",\n        \"test_error_handler_with_user_friendly_false\",\n        \"test_error_handler_with_user_friendly_true\",\n        \"test_error_handler_with_user_warning\",\n        \"test_error_handler_with_warning\",\n        \"test_error_recovery_strategy_base_class\",\n        \"test_file_not_found_recovery_strategy\",\n        \"test_file_not_found_recovery_strategy_with_empty_file_path\",\n        \"test_file_not_found_recovery_strategy_with_invalid_file_path\",\n        \"test_file_not_found_recovery_strategy_without_file_path\",\n        \"test_file_operation_error_initialization\",\n        \"test_function\",\n        \"test_handle_errors_decorator_custom_return\",\n        \"test_handle_errors_decorator_double_failure\",\n        \"test_handle_errors_decorator_exception\",\n        \"test_handle_errors_decorator_nested_exceptions\",\n        \"test_handle_errors_decorator_operation_name\",\n        \"test_handle_errors_decorator_recovery_failure\",\n        \"test_handle_errors_decorator_recovery_success\",\n        \"test_handle_errors_decorator_specific_exception\",\n        \"test_handle_errors_decorator_success\",\n        \"test_handle_errors_decorator_user_friendly_false\",\n        \"test_handle_errors_decorator_with_all_parameters\",\n        \"test_handle_errors_decorator_with_args_kwargs\",\n        \"test_handle_errors_decorator_with_complex_context\",\n        \"test_handle_errors_decorator_with_context\",\n        \"test_handle_errors_decorator_with_exception_in_args\",\n        \"test_handle_errors_decorator_with_operation_and_context\",\n        \"test_json_decode_recovery_strategy\",\n        \"test_json_decode_recovery_strategy_recover\",\n        \"test_mhm_error_initialization\"\n      ],\n      \"tests/behavior/test_interaction_handlers_behavior.py\": [\n        \"_create_test_user\",\n        \"test_all_handlers_return_proper_examples\",\n        \"test_all_handlers_return_proper_help\",\n        \"test_analytics_handler_can_handle_intents\",\n        \"test_checkin_handler_can_handle_intents\",\n        \"test_checkin_handler_starts_checkin_flow\",\n        \"test_get_interaction_handler_returns_correct_handler\",\n        \"test_handler_error_handling\",\n        \"test_handler_registry_creates_all_handlers\",\n        \"test_handler_response_structure\",\n        \"test_help_handler_can_handle_intents\",\n        \"test_help_handler_provides_help\",\n        \"test_profile_handler_can_handle_intents\",\n        \"test_profile_handler_shows_actual_profile\",\n        \"test_schedule_management_handler_can_handle_intents\",\n        \"test_task_management_handler_can_handle_intents\",\n        \"test_task_management_handler_completes_actual_task\",\n        \"test_task_management_handler_creates_actual_task\",\n        \"test_task_management_handler_lists_actual_tasks\"\n      ],\n      \"tests/behavior/test_interaction_handlers_coverage_expansion.py\": [\n        \"_mock_get_user_data\",\n        \"get_checkin_history\",\n        \"get_mood_trends\",\n        \"mock_communication_manager\",\n        \"test_checkin_history_displays_scale_out_of_5\",\n        \"test_checkin_status_displays_scale_out_of_5\",\n        \"test_data_dir\",\n        \"test_get_examples\",\n        \"test_get_help\",\n        \"test_handle_checkin_response_with_invalid_response\",\n        \"test_handle_checkin_status\",\n        \"test_handle_commands\",\n        \"test_handle_complete_task_no_identifier\",\n        \"test_handle_complete_task_not_found\",\n        \"test_handle_complete_task_suggestion_logic\",\n        \"test_handle_complete_task_with_identifier\",\n        \"test_handle_complete_task_with_no_tasks\",\n        \"test_handle_continue_checkin\",\n        \"test_handle_create_task_invalid_priority\",\n        \"test_handle_create_task_with_all_properties\",\n        \"test_handle_create_task_with_invalid_priority\",\n        \"test_handle_create_task_with_invalid_recurrence_pattern\",\n        \"test_handle_create_task_with_recurrence_settings\",\n        \"test_handle_create_task_with_title_only\",\n        \"test_handle_delete_task_no_identifier\",\n        \"test_handle_delete_task_with_identifier\",\n        \"test_handle_delete_task_with_invalid_task_id\",\n        \"test_handle_edit_task_with_invalid_task_id\",\n        \"test_handle_examples\",\n        \"test_handle_help\",\n        \"test_handle_help_with_invalid_handler\",\n        \"test_handle_help_with_specific_handler\",\n        \"test_handle_list_tasks_due_soon_filter\",\n        \"test_handle_list_tasks_no_tasks\",\n        \"test_handle_list_tasks_overdue_filter\",\n        \"test_handle_list_tasks_with_filters\",\n        \"test_handle_list_tasks_with_priority_filter\",\n        \"test_handle_list_tasks_with_tag_filter\",\n        \"test_handle_list_tasks_with_tasks\",\n        \"test_handle_mood_trends\",\n        \"test_handle_profile_stats\",\n        \"test_handle_show_analytics\",\n        \"test_handle_show_analytics_with_no_data\",\n        \"test_handle_show_analytics_with_specific_metric\",\n        \"test_handle_show_profile\",\n        \"test_handle_show_profile_with_missing_data\",\n        \"test_handle_show_schedule\",\n        \"test_handle_show_schedule_with_no_schedules\",\n        \"test_handle_start_checkin_new_user\",\n        \"test_handle_start_checkin_with_disabled_checkins\",\n        \"test_handle_start_checkin_with_no_questions\",\n        \"test_handle_task_stats_no_data\",\n        \"test_handle_task_stats_with_analytics\",\n        \"test_handle_unknown_intent\",\n        \"test_handle_update_profile\",\n        \"test_handle_update_profile_with_invalid_data\",\n        \"test_handle_update_schedule\",\n        \"test_handle_update_schedule_with_invalid_period\",\n        \"test_handle_update_task_no_updates\",\n        \"test_handle_update_task_with_updates\",\n        \"test_handler_with_missing_user_data\",\n        \"test_mood_trends_displays_scale_out_of_5\",\n        \"test_parse_relative_date_existing_date\",\n        \"test_parse_relative_date_next_month\",\n        \"test_parse_relative_date_next_week\",\n        \"test_parse_relative_date_today\",\n        \"test_parse_relative_date_tomorrow\",\n        \"test_profile_get_help_is_text\",\n        \"test_quantitative_summary_respects_enabled_fields\",\n        \"test_show_profile_not_raw_json\",\n        \"test_task_management_handler_error_handling\"\n      ],\n      \"tests/behavior/test_logger_behavior.py\": [\n        \"temp_log_dir\",\n        \"test_backup_directory_rotating_handler_creation_real_behavior\",\n        \"test_cleanup_old_logs_real_behavior\",\n        \"test_disable_module_logging_real_behavior\",\n        \"test_force_restart_logging_real_behavior\",\n        \"test_get_log_file_info_real_behavior\",\n        \"test_get_log_level_from_env_real_behavior\",\n        \"test_get_logger_creation_real_behavior\",\n        \"test_get_logger_same_name_real_behavior\",\n        \"test_logger_environment_integration_real_behavior\",\n        \"test_logger_full_workflow_real_behavior\",\n        \"test_set_console_log_level_real_behavior\",\n        \"test_set_verbose_mode_real_behavior\",\n        \"test_setup_logging_idempotent_real_behavior\",\n        \"test_suppress_noisy_logging_real_behavior\",\n        \"test_verbose_mode_toggle_real_behavior\"\n      ],\n      \"tests/behavior/test_logger_coverage_expansion.py\": [\n        \"_setup\",\n        \"create_record\",\n        \"log_messages\",\n        \"teardown_method\",\n        \"test_backup_directory_rotating_file_handler_initialization_real_behavior\",\n        \"test_backup_directory_rotating_file_handler_rollover_disabled_real_behavior\",\n        \"test_backup_directory_rotating_file_handler_rollover_real_behavior\",\n        \"test_cleanup_old_archives_real_behavior\",\n        \"test_cleanup_old_logs_real_behavior\",\n        \"test_component_logger_custom_level_real_behavior\",\n        \"test_component_logger_initialization_real_behavior\",\n        \"test_component_logger_logging_methods_real_behavior\",\n        \"test_component_logger_structured_data_real_behavior\",\n        \"test_compress_old_logs_no_files_real_behavior\",\n        \"test_compress_old_logs_real_behavior\",\n        \"test_get_component_logger_real_behavior\",\n        \"test_get_log_file_info_real_behavior\",\n        \"test_get_logger_real_behavior\",\n        \"test_get_verbose_mode_real_behavior\",\n        \"test_heartbeat_warning_filter_real_behavior\",\n        \"test_heartbeat_warning_filter_summary_logging_real_behavior\",\n        \"test_logger_backup_directory_creation_real_behavior\",\n        \"test_logger_concurrent_access_safety\",\n        \"test_logger_concurrent_file_access\",\n        \"test_logger_encoding_handling_real_behavior\",\n        \"test_logger_error_handling_real_behavior\",\n        \"test_logger_error_recovery_with_real_operations\",\n        \"test_logger_file_rotation_edge_cases\",\n        \"test_logger_formatter_real_behavior\",\n        \"test_logger_integration_with_multiple_components\",\n        \"test_logger_level_filtering_real_behavior\",\n        \"test_logger_memory_behavior\",\n        \"test_logger_performance_under_load\",\n        \"test_logger_thread_safety_behavior\",\n        \"test_set_verbose_mode_real_behavior\",\n        \"test_setup_logging_real_behavior\",\n        \"test_suppress_noisy_logging_real_behavior\",\n        \"test_toggle_verbose_logging_real_behavior\",\n        \"write_logs\"\n      ],\n      \"tests/behavior/test_logger_coverage_expansion_phase3_simple.py\": [\n        \"test_backup_directory_rotating_file_handler_initialization_simple\",\n        \"test_backup_directory_rotating_file_handler_rollover_simple\",\n        \"test_cleanup_old_archives_simple\",\n        \"test_cleanup_old_logs_simple\",\n        \"test_component_logger_channels_alias_simple\",\n        \"test_component_logger_error_handling_during_creation_simple\",\n        \"test_component_logger_unknown_component_fallback_simple\",\n        \"test_compress_old_logs_simple\",\n        \"test_environment_detection_functions_simple\",\n        \"test_get_log_file_info_function\",\n        \"test_get_log_file_info_with_nonexistent_files\",\n        \"test_heartbeat_warning_filter_simple\",\n        \"test_logger_integration_with_multiple_components_simple\",\n        \"test_logger_performance_under_high_load_simple\",\n        \"test_setup_logging_environment_detection_simple\",\n        \"test_suppress_noisy_logging_simple\",\n        \"test_verbose_mode_functions_simple\"\n      ],\n      \"tests/behavior/test_message_behavior.py\": [\n        \"test_add_message_file_error\",\n        \"test_add_message_success\",\n        \"test_create_message_file_from_defaults_success\",\n        \"test_delete_message_file_error\",\n        \"test_delete_message_not_found\",\n        \"test_delete_message_success\",\n        \"test_edit_message_file_error\",\n        \"test_edit_message_not_found\",\n        \"test_edit_message_success\",\n        \"test_ensure_user_message_files_success\",\n        \"test_full_message_lifecycle\",\n        \"test_get_message_categories_custom\",\n        \"test_get_message_categories_default\",\n        \"test_get_message_categories_empty\",\n        \"test_get_message_categories_success\",\n        \"test_get_recent_messages_empty\",\n        \"test_get_recent_messages_success\",\n        \"test_load_default_messages_file_not_found\",\n        \"test_load_default_messages_invalid_json\",\n        \"test_load_default_messages_success\",\n        \"test_store_sent_message_file_error\",\n        \"test_store_sent_message_success\",\n        \"test_update_message_success\"\n      ],\n      \"tests/behavior/test_observability_logging.py\": [\n        \"test_component_logs_isolation_and_errors_capture\"\n      ],\n      \"tests/behavior/test_response_tracking_behavior.py\": [\n        \"test_get_recent_chat_interactions_returns_chat_data\",\n        \"test_get_recent_checkins_returns_checkin_data\",\n        \"test_get_recent_responses_returns_actual_data\",\n        \"test_get_user_checkin_preferences_returns_actual_preferences\",\n        \"test_get_user_checkin_questions_returns_actual_questions\",\n        \"test_get_user_info_for_tracking_returns_complete_user_info\",\n        \"test_is_user_checkins_enabled_checks_actual_account_data\",\n        \"test_response_tracking_concurrent_access_safety\",\n        \"test_response_tracking_data_integrity\",\n        \"test_response_tracking_error_handling_preserves_system_stability\",\n        \"test_response_tracking_error_recovery_with_real_files\",\n        \"test_response_tracking_integration_with_user_data\",\n        \"test_response_tracking_performance_under_load\",\n        \"test_store_chat_interaction_creates_chat_log\",\n        \"test_store_user_response_creates_actual_file\",\n        \"test_store_user_response_persists_multiple_entries\",\n        \"test_track_user_response_stores_chat_interaction\",\n        \"test_track_user_response_stores_checkin\",\n        \"test_track_user_response_stores_generic_response\"\n      ],\n      \"tests/behavior/test_schedule_management_behavior.py\": [\n        \"test_clear_schedule_periods_cache_removes_entries\",\n        \"test_get_current_day_names_returns_actual_days\",\n        \"test_get_schedule_time_periods_creates_cache\",\n        \"test_schedule_cache_invalidation\",\n        \"test_schedule_period_activation_integration\",\n        \"test_schedule_period_crud_with_usercontext_mocking\",\n        \"test_schedule_period_edge_cases\",\n        \"test_schedule_period_operations_with_error_handling\",\n        \"test_schedule_period_operations_with_real_user_data\",\n        \"test_schedule_period_operations_with_scheduler_manager\",\n        \"test_schedule_period_validation_errors\",\n        \"test_set_schedule_days_persists_day_changes\",\n        \"test_set_schedule_period_active_persists_changes\",\n        \"test_set_schedule_periods_persists_complete_data\",\n        \"test_time_conversion_functions_work_correctly\",\n        \"test_validate_and_format_time_enforces_rules\"\n      ],\n      \"tests/behavior/test_scheduler_behavior.py\": [\n        \"mock_communication_manager\",\n        \"scheduler_manager\",\n        \"test_cleanup_old_tasks\",\n        \"test_get_random_time_within_period_invalid_times\",\n        \"test_get_random_time_within_period_valid_times\",\n        \"test_get_user_categories_no_user\",\n        \"test_get_user_categories_success\",\n        \"test_get_user_checkin_preferences_no_user\",\n        \"test_get_user_checkin_preferences_success\",\n        \"test_get_user_task_preferences_no_user\",\n        \"test_get_user_task_preferences_success\",\n        \"test_is_job_for_category_no_jobs\",\n        \"test_is_job_for_category_with_matching_job\",\n        \"test_is_job_for_category_with_non_matching_job\",\n        \"test_is_time_conflict_no_conflicts\",\n        \"test_log_scheduled_tasks\",\n        \"test_random_time_generation_consistency\",\n        \"test_schedule_all_task_reminders_disabled\",\n        \"test_schedule_all_task_reminders_success\",\n        \"test_scheduler_lifecycle\",\n        \"test_scheduler_manager_initialization\",\n        \"test_scheduler_with_empty_user_list\",\n        \"test_scheduler_with_invalid_user_data\",\n        \"test_scheduler_with_mock_users\",\n        \"test_stop_scheduler_no_thread\"\n      ],\n      \"tests/behavior/test_scheduler_coverage_expansion.py\": [\n        \"mock_communication_manager\",\n        \"scheduler_manager\",\n        \"test_cleanup_old_tasks_real_behavior\",\n        \"test_get_random_time_within_period_future_scheduling\",\n        \"test_get_random_time_within_period_invalid_period\",\n        \"test_get_random_time_within_period_missing_times\",\n        \"test_get_random_time_within_task_period_real_behavior\",\n        \"test_get_user_checkin_preferences_real_behavior\",\n        \"test_handle_sending_scheduled_message_no_communication_manager\",\n        \"test_handle_sending_scheduled_message_success\",\n        \"test_handle_sending_scheduled_message_with_retries\",\n        \"test_handle_task_reminder_completed_task\",\n        \"test_handle_task_reminder_no_communication_manager\",\n        \"test_handle_task_reminder_success\",\n        \"test_is_time_conflict_no_conflict_different_user\",\n        \"test_is_time_conflict_with_conflict_real_behavior\",\n        \"test_process_category_schedule_real_behavior\",\n        \"test_process_user_schedules_real_behavior\",\n        \"test_run_daily_scheduler_thread_creation_real_behavior\",\n        \"test_schedule_all_task_reminders_missing_times_real_behavior\",\n        \"test_schedule_all_task_reminders_no_tasks_real_behavior\",\n        \"test_schedule_all_task_reminders_real_behavior\",\n        \"test_schedule_all_task_reminders_standalone_real_behavior\",\n        \"test_schedule_all_task_reminders_tasks_disabled\",\n        \"test_schedule_all_task_reminders_with_tasks_real_behavior\",\n        \"test_schedule_all_users_immediately_real_behavior\",\n        \"test_schedule_checkin_at_exact_time_real_behavior\",\n        \"test_schedule_checkin_missing_period_real_behavior\",\n        \"test_schedule_checkin_missing_start_time_real_behavior\",\n        \"test_schedule_daily_message_job_no_periods\",\n        \"test_schedule_daily_message_job_real_behavior\",\n        \"test_schedule_message_for_period_max_retries_exceeded\",\n        \"test_schedule_message_for_period_real_behavior\",\n        \"test_schedule_message_for_period_time_conflict_retry\",\n        \"test_schedule_new_user_real_behavior\",\n        \"test_schedule_task_reminder_at_time_completed_task\",\n        \"test_schedule_task_reminder_at_time_real_behavior\",\n        \"test_scheduler_loop_daily_job_scheduling_real_behavior\",\n        \"test_scheduler_loop_error_handling_real_behavior\",\n        \"test_scheduler_loop_stop_event_handling_real_behavior\",\n        \"test_scheduler_manager_initialization_real_behavior\",\n        \"test_scheduler_manager_no_communication_manager\",\n        \"test_select_task_for_reminder_due_today_weighting_real_behavior\",\n        \"test_select_task_for_reminder_empty_list_real_behavior\",\n        \"test_select_task_for_reminder_exception_handling_real_behavior\",\n        \"test_select_task_for_reminder_invalid_date_format_real_behavior\",\n        \"test_select_task_for_reminder_large_task_list_real_behavior\",\n        \"test_select_task_for_reminder_month_proximity_weighting_real_behavior\",\n        \"test_select_task_for_reminder_no_due_date_weighting_real_behavior\",\n        \"test_select_task_for_reminder_overdue_weighting_real_behavior\",\n        \"test_select_task_for_reminder_priority_weighting_real_behavior\",\n        \"test_select_task_for_reminder_single_task_real_behavior\",\n        \"test_select_task_for_reminder_week_proximity_weighting_real_behavior\",\n        \"test_select_task_for_reminder_zero_weights_fallback_real_behavior\",\n        \"test_set_wake_timer_failure_handling\",\n        \"test_set_wake_timer_process_failure_real_behavior\",\n        \"test_set_wake_timer_real_behavior\",\n        \"test_set_wake_timer_success_real_behavior\",\n        \"test_stop_scheduler_no_thread_graceful_handling\",\n        \"test_stop_scheduler_thread_cleanup_real_behavior\"\n      ],\n      \"tests/behavior/test_service_behavior.py\": [\n        \"mock_get_user_data_side_effect\",\n        \"mock_join_side_effect\",\n        \"mock_shutdown_side_effect\",\n        \"mock_sleep_side_effect\",\n        \"mock_start_side_effect\",\n        \"service\",\n        \"temp_base_dir\",\n        \"temp_dir\",\n        \"test_check_and_fix_logging_real_behavior\",\n        \"test_check_reschedule_requests_real_behavior\",\n        \"test_check_test_message_requests_real_behavior\",\n        \"test_cleanup_reschedule_requests_real_behavior\",\n        \"test_cleanup_test_message_requests_real_behavior\",\n        \"test_emergency_shutdown_real_behavior\",\n        \"test_get_user_categories_real_behavior\",\n        \"test_initialize_paths_real_behavior\",\n        \"test_main_function_real_behavior\",\n        \"test_real_cleanup_removes_actual_files\",\n        \"test_real_emergency_shutdown_changes_service_state\",\n        \"test_real_file_based_communication_creates_and_removes_files\",\n        \"test_real_get_user_categories_returns_actual_data\",\n        \"test_real_service_error_recovery_stops_service\",\n        \"test_real_service_initialization_creates_actual_service\",\n        \"test_real_signal_handler_changes_service_state\",\n        \"test_run_service_loop_shutdown_file_detection_real_behavior\",\n        \"test_service_error_recovery_real_behavior\",\n        \"test_service_file_based_communication_integration_real_behavior\",\n        \"test_service_initialization\",\n        \"test_service_integration_with_managers_real_behavior\",\n        \"test_service_loop_heartbeat_logging_real_behavior\",\n        \"test_shutdown_real_behavior\",\n        \"test_signal_handler_real_behavior\",\n        \"test_start_service_real_behavior\",\n        \"test_validate_configuration_real_behavior\"\n      ],\n      \"tests/behavior/test_service_utilities_behavior.py\": [\n        \"test_create_reschedule_request_creates_actual_file\",\n        \"test_create_reschedule_request_skips_when_service_not_running\",\n        \"test_is_service_running_checks_actual_processes\",\n        \"test_is_service_running_handles_process_errors_gracefully\",\n        \"test_load_and_localize_datetime_creates_timezone_aware_datetime\",\n        \"test_load_and_localize_datetime_raises_error_for_invalid_format\",\n        \"test_load_and_localize_datetime_raises_error_for_invalid_timezone\",\n        \"test_service_utilities_concurrent_access_safety\",\n        \"test_service_utilities_data_integrity\",\n        \"test_service_utilities_error_handling_preserves_system_stability\",\n        \"test_service_utilities_error_recovery_with_real_operations\",\n        \"test_service_utilities_integration_with_reschedule_workflow\",\n        \"test_service_utilities_performance_under_load\",\n        \"test_throttler_handles_invalid_timestamp_format\",\n        \"test_throttler_initialization_creates_proper_structure\",\n        \"test_throttler_should_run_respects_interval\",\n        \"test_throttler_should_run_returns_true_on_first_call\",\n        \"test_title_case_converts_text_properly\",\n        \"test_title_case_handles_special_words_correctly\",\n        \"test_title_case_preserves_mixed_case_words\",\n        \"test_wait_for_network_returns_false_when_network_unavailable\",\n        \"test_wait_for_network_returns_true_when_network_available\"\n      ],\n      \"tests/behavior/test_static_logging_check.py\": [\n        \"test_repo_static_logging_check_passes\"\n      ],\n      \"tests/behavior/test_task_behavior.py\": [\n        \"temp_dir\",\n        \"test_are_tasks_enabled\",\n        \"test_complete_task\",\n        \"test_create_task\",\n        \"test_delete_task\",\n        \"test_ensure_task_directory\",\n        \"test_get_task_by_id\",\n        \"test_get_tasks_due_soon\",\n        \"test_get_user_task_stats\",\n        \"test_load_active_tasks\",\n        \"test_save_active_tasks\",\n        \"test_update_task\",\n        \"user_id\"\n      ],\n      \"tests/behavior/test_task_management_coverage_expansion.py\": [\n        \"mock_user_data_dir\",\n        \"temp_dir\",\n        \"test_add_user_task_tag_empty_tag_real_behavior\",\n        \"test_add_user_task_tag_empty_user_id_real_behavior\",\n        \"test_add_user_task_tag_existing_tag_real_behavior\",\n        \"test_add_user_task_tag_new_tag_real_behavior\",\n        \"test_are_tasks_enabled_empty_user_id_real_behavior\",\n        \"test_are_tasks_enabled_real_behavior\",\n        \"test_complete_task_not_found_real_behavior\",\n        \"test_complete_task_with_completion_data_real_behavior\",\n        \"test_complete_task_with_default_completion_real_behavior\",\n        \"test_create_task_with_all_parameters_real_behavior\",\n        \"test_create_task_with_empty_title_real_behavior\",\n        \"test_create_task_with_empty_user_id_real_behavior\",\n        \"test_create_task_with_minimal_parameters_real_behavior\",\n        \"test_delete_task_not_found_real_behavior\",\n        \"test_delete_task_real_behavior\",\n        \"test_ensure_task_directory_existing_structure_real_behavior\",\n        \"test_ensure_task_directory_real_behavior\",\n        \"test_ensure_task_directory_with_empty_user_id_real_behavior\",\n        \"test_ensure_task_directory_with_none_user_id_real_behavior\",\n        \"test_get_task_by_id_active_task_real_behavior\",\n        \"test_get_task_by_id_completed_task_real_behavior\",\n        \"test_get_task_by_id_not_found_real_behavior\",\n        \"test_get_tasks_due_soon_empty_user_id_real_behavior\",\n        \"test_get_tasks_due_soon_real_behavior\",\n        \"test_get_tasks_due_soon_with_invalid_date_real_behavior\",\n        \"test_get_user_task_stats_empty_user_id_real_behavior\",\n        \"test_get_user_task_stats_error_handling_real_behavior\",\n        \"test_get_user_task_stats_real_behavior\",\n        \"test_get_user_task_tags_empty_user_id_real_behavior\",\n        \"test_get_user_task_tags_real_behavior\",\n        \"test_load_active_tasks_empty_file_real_behavior\",\n        \"test_load_active_tasks_missing_file_real_behavior\",\n        \"test_load_active_tasks_real_behavior\",\n        \"test_load_completed_tasks_real_behavior\",\n        \"test_remove_user_task_tag_not_found_real_behavior\",\n        \"test_remove_user_task_tag_real_behavior\",\n        \"test_restore_task_not_found_real_behavior\",\n        \"test_restore_task_real_behavior\",\n        \"test_restore_task_with_reminders_real_behavior\",\n        \"test_save_active_tasks_real_behavior\",\n        \"test_save_active_tasks_with_empty_user_id_real_behavior\",\n        \"test_save_completed_tasks_real_behavior\",\n        \"test_schedule_task_reminders_empty_periods_real_behavior\",\n        \"test_schedule_task_reminders_no_scheduler_real_behavior\",\n        \"test_schedule_task_reminders_real_behavior\",\n        \"test_setup_default_task_tags_empty_user_id_real_behavior\",\n        \"test_setup_default_task_tags_existing_user_real_behavior\",\n        \"test_setup_default_task_tags_new_user_real_behavior\",\n        \"test_update_task_not_found_real_behavior\",\n        \"test_update_task_real_behavior\",\n        \"test_update_task_with_reminder_periods_real_behavior\",\n        \"user_id\"\n      ],\n      \"tests/behavior/test_ui_app_behavior.py\": [\n        \"qt_app\",\n        \"test_confirm_test_message_user_cancels_real_behavior\",\n        \"test_confirm_test_message_user_confirms_real_behavior\",\n        \"test_send_actual_test_message_creates_request_file_real_behavior\",\n        \"test_send_test_message_edge_case_negative_index_real_behavior\",\n        \"test_send_test_message_invalid_category_real_behavior\",\n        \"test_send_test_message_no_category_selected_real_behavior\",\n        \"test_send_test_message_no_user_selected_real_behavior\",\n        \"test_send_test_message_service_manager_error_real_behavior\",\n        \"test_send_test_message_service_not_running_real_behavior\",\n        \"test_send_test_message_successful_flow_real_behavior\",\n        \"test_service_manager_configuration_validation_checks_actual_config\",\n        \"test_service_manager_configuration_validation_handles_invalid_config\",\n        \"test_service_manager_initialization_creates_proper_structure\",\n        \"test_service_manager_service_status_check_checks_actual_processes\",\n        \"test_service_manager_service_status_check_handles_no_service\",\n        \"test_ui_app_category_management_opens_category_dialog\",\n        \"test_ui_app_category_selection_enables_content_management\",\n        \"test_ui_app_checkin_management_opens_checkin_dialog\",\n        \"test_ui_app_communication_settings_opens_channel_management\",\n        \"test_ui_app_concurrent_access_safety\",\n        \"test_ui_app_data_integrity\",\n        \"test_ui_app_error_handling_preserves_system_stability\",\n        \"test_ui_app_error_recovery_with_real_operations\",\n        \"test_ui_app_initialization_creates_proper_structure\",\n        \"test_ui_app_integration_with_service_manager\",\n        \"test_ui_app_new_user_creation_opens_account_creator\",\n        \"test_ui_app_performance_under_load\",\n        \"test_ui_app_personalization_opens_user_profile_dialog\",\n        \"test_ui_app_task_management_opens_task_dialog\",\n        \"test_ui_app_user_list_refresh_loads_actual_user_data\",\n        \"test_ui_app_user_selection_loads_user_categories\"\n      ],\n      \"tests/behavior/test_user_context_behavior.py\": [\n        \"test_add_conversation_exchange_actually_stores_data\",\n        \"test_add_conversation_exchange_maintains_history_limit\",\n        \"test_format_context_for_ai_creates_readable_string\",\n        \"test_format_context_for_ai_handles_empty_context\",\n        \"test_get_active_schedules_identifies_active_periods\",\n        \"test_get_conversation_history_handles_empty_history\",\n        \"test_get_conversation_history_returns_actual_data\",\n        \"test_get_conversation_insights_analyzes_actual_data\",\n        \"test_get_current_user_context_handles_no_user_gracefully\",\n        \"test_get_current_user_context_uses_usercontext_singleton\",\n        \"test_get_mood_trends_analyzes_checkin_data\",\n        \"test_get_recent_activity_integrates_multiple_sources\",\n        \"test_get_user_context_creates_complete_structure\",\n        \"test_get_user_context_without_conversation_history\",\n        \"test_get_user_profile_uses_existing_infrastructure\",\n        \"test_user_context_manager_cleanup_and_resource_management\",\n        \"test_user_context_manager_concurrent_access_safety\",\n        \"test_user_context_manager_error_handling_preserves_system_stability\",\n        \"test_user_context_manager_error_recovery_with_real_files\",\n        \"test_user_context_manager_initialization_creates_structure\",\n        \"test_user_context_manager_integration_with_ai_chatbot\",\n        \"test_user_context_manager_performance_under_load\",\n        \"test_user_context_manager_with_real_user_data\"\n      ],\n      \"tests/behavior/test_user_management_coverage_expansion.py\": [\n        \"_setup\",\n        \"mock_path\",\n        \"teardown_method\",\n        \"test_cache_management_real_behavior\",\n        \"test_cache_timeout_real_behavior\",\n        \"test_create_default_schedule_periods_checkin_real_behavior\",\n        \"test_create_default_schedule_periods_no_category_real_behavior\",\n        \"test_create_default_schedule_periods_other_category_real_behavior\",\n        \"test_create_default_schedule_periods_tasks_real_behavior\",\n        \"test_data_validation_real_behavior\",\n        \"test_error_handling_load_account_real_behavior\",\n        \"test_error_handling_save_account_real_behavior\",\n        \"test_file_persistence_real_behavior\",\n        \"test_get_all_user_ids_no_directory_real_behavior\",\n        \"test_get_all_user_ids_real_behavior\",\n        \"test_get_available_data_types_real_behavior\",\n        \"test_get_data_type_info_real_behavior\",\n        \"test_load_account_data_auto_create_real_behavior\",\n        \"test_load_account_data_no_auto_create_real_behavior\",\n        \"test_load_account_data_real_behavior\",\n        \"test_load_context_data_auto_create_real_behavior\",\n        \"test_load_context_data_real_behavior\",\n        \"test_load_preferences_data_auto_create_real_behavior\",\n        \"test_load_preferences_data_real_behavior\",\n        \"test_load_schedules_data_auto_create_real_behavior\",\n        \"test_load_schedules_data_real_behavior\",\n        \"test_loader\",\n        \"test_register_data_loader_real_behavior\",\n        \"test_save_account_data_invalid_user_id_real_behavior\",\n        \"test_save_account_data_real_behavior\",\n        \"test_save_context_data_real_behavior\",\n        \"test_save_preferences_data_real_behavior\",\n        \"test_save_schedules_data_invalid_user_id_real_behavior\",\n        \"test_save_schedules_data_real_behavior\",\n        \"test_update_user_schedules_invalid_user_id_real_behavior\",\n        \"test_update_user_schedules_real_behavior\",\n        \"test_user_data_concurrent_access_real_behavior\",\n        \"test_user_data_consistency_real_behavior\",\n        \"test_user_data_error_recovery_real_behavior\",\n        \"test_user_data_lifecycle_real_behavior\",\n        \"test_user_data_performance_real_behavior\",\n        \"user_operation\"\n      ],\n      \"tests/behavior/test_utilities_demo.py\": [\n        \"test_basic_user_creation\",\n        \"test_comprehensive_user_types\",\n        \"test_consistent_user_data\",\n        \"test_custom_fields_user_creation\",\n        \"test_discord_user_creation\",\n        \"test_easy_maintenance\",\n        \"test_edge_case_users\",\n        \"test_email_user_creation\",\n        \"test_environment_management\",\n        \"test_flexible_configuration\",\n        \"test_full_featured_user_creation\",\n        \"test_minimal_user_creation\",\n        \"test_multiple_user_types_in_single_test\",\n        \"test_real_user_scenarios\",\n        \"test_reduced_code_duplication\",\n        \"test_scheduled_user_creation\",\n        \"test_user_data_consistency\",\n        \"test_user_data_factory_usage\"\n      ],\n      \"tests/conftest.py\": [\n        \"__init__\",\n        \"_apply_get_user_data_shim_early\",\n        \"_fallback_read_from_files\",\n        \"_helper\",\n        \"_load_single_type\",\n        \"_missing_keys\",\n        \"_prune_old_files\",\n        \"_update_index\",\n        \"about\",\n        \"archive_old_backups\",\n        \"check_rotation_needed\",\n        \"cleanup_communication_manager\",\n        \"cleanup_conversation_manager\",\n        \"cleanup_old_archives\",\n        \"cleanup_test_users_after_session\",\n        \"cleanup_tmp_at_session_end\",\n        \"clear_user_caches_between_tests\",\n        \"critical\",\n        \"enforce_user_dir_locations\",\n        \"ensure_mock_config_applied\",\n        \"ensure_user_materialized\",\n        \"env_guard_and_restore\",\n        \"fix_user_data_loaders\",\n        \"force_test_data_directory\",\n        \"format\",\n        \"information\",\n        \"initialize_loader_import_order\",\n        \"isolate_logging\",\n        \"log_lifecycle_maintenance\",\n        \"materialize_user_minimal_via_public_apis\",\n        \"mock_ai_response\",\n        \"mock_communication_data\",\n        \"mock_config\",\n        \"mock_logger\",\n        \"mock_message_data\",\n        \"mock_schedule_data\",\n        \"mock_service_data\",\n        \"mock_task_data\",\n        \"mock_user_data\",\n        \"mock_user_data_with_messages\",\n        \"path_sanitizer\",\n        \"perform_lifecycle_maintenance\",\n        \"prune_test_artifacts_before_and_after_session\",\n        \"pytest_collection_modifyitems\",\n        \"pytest_configure\",\n        \"pytest_runtest_logreport\",\n        \"pytest_sessionfinish\",\n        \"pytest_sessionstart\",\n        \"question\",\n        \"register_log_file\",\n        \"register_user_data_loaders_session\",\n        \"rotate_all_logs\",\n        \"session_log_rotation_check\",\n        \"setup_component_log_rotation\",\n        \"setup_logging_isolation\",\n        \"setup_qmessagebox_patches\",\n        \"setup_test_logging\",\n        \"shim_get_user_data_to_invoke_loaders\",\n        \"temp_file\",\n        \"test_data_dir\",\n        \"test_path_factory\",\n        \"toggle_data_shim_per_marker\",\n        \"update_user_index_for_test\",\n        \"verify_required_loaders_present\",\n        \"verify_user_data_loader_registry\",\n        \"wait_until\",\n        \"warning\",\n        \"wrapped_get_user_data\"\n      ],\n      \"tests/debug_file_paths.py\": [\n        \"test_debug_file_paths\"\n      ],\n      \"tests/integration/test_account_lifecycle.py\": [\n        \"_ensure_minimal_structure\",\n        \"_materialize_and_verify\",\n        \"save_user_data_simple\",\n        \"setup_test_environment\",\n        \"test_add_message_category\",\n        \"test_add_schedule_period\",\n        \"test_complete_account_lifecycle\",\n        \"test_create_basic_account\",\n        \"test_create_full_account\",\n        \"test_disable_tasks_for_full_user\",\n        \"test_enable_checkins_for_basic_user\",\n        \"test_modify_schedule_period\",\n        \"test_reenable_tasks_for_user\",\n        \"test_remove_message_category\",\n        \"test_remove_schedule_period\"\n      ],\n      \"tests/integration/test_account_management.py\": [\n        \"test_account_management_data_structures\",\n        \"test_account_management_functions\",\n        \"test_account_management_imports\",\n        \"test_account_management_integration\",\n        \"test_account_management_safe_operations\",\n        \"test_account_management_validation\"\n      ],\n      \"tests/integration/test_user_creation.py\": [\n        \"test_basic_email_user_creation\",\n        \"test_corrupted_data_handling\",\n        \"test_discord_user_creation\",\n        \"test_duplicate_user_creation\",\n        \"test_email_validation\",\n        \"test_full_user_lifecycle\",\n        \"test_invalid_user_id\",\n        \"test_multiple_users_same_channel\",\n        \"test_required_fields_validation\",\n        \"test_timezone_validation\",\n        \"test_user_creation_with_schedules\",\n        \"test_user_with_all_features\",\n        \"test_user_with_custom_fields\",\n        \"test_username_validation\"\n      ],\n      \"tests/test_isolation.py\": [\n        \"__enter__\",\n        \"__exit__\",\n        \"__init__\",\n        \"create_safe_scheduler_manager\",\n        \"ensure_test_isolation\",\n        \"mock_schtasks_call\",\n        \"mock_system_calls\",\n        \"verify_no_real_tasks_created\"\n      ],\n      \"tests/test_utilities.py\": [\n        \"_create_user_files_directly\",\n        \"_create_user_files_directly__account_data\",\n        \"_create_user_files_directly__context_data\",\n        \"_create_user_files_directly__directory_structure\",\n        \"_create_user_files_directly__message_files\",\n        \"_create_user_files_directly__preferences_data\",\n        \"_create_user_files_directly__save_json\",\n        \"_create_user_files_directly__schedules_data\",\n        \"cleanup_test_data_environment\",\n        \"cleanup_test_environment\",\n        \"create_account_data\",\n        \"create_basic_user\",\n        \"create_basic_user__update_index\",\n        \"create_basic_user__verify_creation\",\n        \"create_basic_user__with_test_dir\",\n        \"create_context_data\",\n        \"create_corrupted_user_data\",\n        \"create_discord_user\",\n        \"create_discord_user__with_test_dir\",\n        \"create_email_user\",\n        \"create_email_user__impl\",\n        \"create_email_user__with_test_dir\",\n        \"create_full_featured_user\",\n        \"create_full_featured_user__impl\",\n        \"create_full_featured_user__with_test_dir\",\n        \"create_minimal_user\",\n        \"create_minimal_user__impl\",\n        \"create_minimal_user__with_test_dir\",\n        \"create_minimal_user__with_test_dir_and_get_id\",\n        \"create_minimal_user_and_get_id\",\n        \"create_preferences_data\",\n        \"create_schedules_data\",\n        \"create_test_message_data\",\n        \"create_test_schedule_data\",\n        \"create_test_task_data\",\n        \"create_test_user\",\n        \"create_user_with_complex_checkins\",\n        \"create_user_with_complex_checkins__impl\",\n        \"create_user_with_complex_checkins__with_test_dir\",\n        \"create_user_with_custom_fields\",\n        \"create_user_with_custom_fields__impl\",\n        \"create_user_with_disabilities\",\n        \"create_user_with_disabilities__impl\",\n        \"create_user_with_disabilities__with_test_dir\",\n        \"create_user_with_health_focus\",\n        \"create_user_with_health_focus__impl\",\n        \"create_user_with_health_focus__with_test_dir\",\n        \"create_user_with_inconsistent_data\",\n        \"create_user_with_inconsistent_data__impl\",\n        \"create_user_with_inconsistent_data__with_test_dir\",\n        \"create_user_with_limited_data\",\n        \"create_user_with_limited_data__impl\",\n        \"create_user_with_limited_data__with_test_dir\",\n        \"create_user_with_schedules\",\n        \"create_user_with_schedules__impl\",\n        \"create_user_with_task_focus\",\n        \"create_user_with_task_focus__impl\",\n        \"create_user_with_task_focus__with_test_dir\",\n        \"get_test_user_data\",\n        \"get_test_user_id_by_internal_username\",\n        \"setup_test_data_environment\",\n        \"setup_test_environment\",\n        \"verify_email_user_creation__with_test_dir\"\n      ],\n      \"tests/ui/test_account_creation_ui.py\": [\n        \"dialog\",\n        \"mock_accept_impl\",\n        \"qapp\",\n        \"test_account_creation_real_behavior\",\n        \"test_dialog_initialization_real_behavior\",\n        \"test_duplicate_username_handling_real_behavior\",\n        \"test_feature_enablement_persistence_real_behavior\",\n        \"test_feature_enablement_real_behavior\",\n        \"test_feature_validation_real_behavior\",\n        \"test_file_system_error_handling_real_behavior\",\n        \"test_full_account_lifecycle_real_behavior\",\n        \"test_invalid_data_handling_real_behavior\",\n        \"test_messages_validation_real_behavior\",\n        \"test_multiple_users_same_features_real_behavior\",\n        \"test_timezone_validation_real_behavior\",\n        \"test_user_index_integration_real_behavior\",\n        \"test_user_profile_dialog_integration\",\n        \"test_username_validation_real_behavior\",\n        \"test_widget_data_collection_real_behavior\",\n        \"test_widget_error_handling_real_behavior\"\n      ],\n      \"tests/ui/test_channel_management_dialog_coverage_expansion.py\": [\n        \"mock_user_data\",\n        \"test_get_selected_channel\",\n        \"test_save_channel_settings_exception_handling\",\n        \"test_save_channel_settings_removes_old_settings\",\n        \"test_save_channel_settings_success_discord\",\n        \"test_save_channel_settings_success_email\",\n        \"test_save_channel_settings_validation_error_discord_required\",\n        \"test_save_channel_settings_validation_error_email_required\",\n        \"test_save_channel_settings_validation_error_invalid_discord_id\",\n        \"test_save_channel_settings_validation_error_invalid_email\",\n        \"test_save_channel_settings_without_user\",\n        \"test_set_selected_channel\"\n      ],\n      \"tests/ui/test_dialog_behavior.py\": [\n        \"dialog\",\n        \"qapp\",\n        \"test_category_selection_real_behavior\",\n        \"test_channel_configuration_real_behavior\",\n        \"test_checkin_enablement_real_behavior\",\n        \"test_data_loading_real_behavior\",\n        \"test_data_saving_real_behavior\",\n        \"test_dialog_initialization_real_behavior\",\n        \"test_dynamic_list_fields_real_behavior\",\n        \"test_task_statistics_real_behavior\"\n      ],\n      \"tests/ui/test_dialog_coverage_expansion.py\": [\n        \"dialog\",\n        \"qapp\",\n        \"test_add_new_period_real_behavior\",\n        \"test_add_task_real_behavior\",\n        \"test_data_saving_real_behavior\",\n        \"test_delete_period_real_behavior\",\n        \"test_delete_task_real_behavior\",\n        \"test_dialog_initialization_real_behavior\",\n        \"test_dynamic_list_fields_real_behavior\",\n        \"test_edit_task_real_behavior\",\n        \"test_existing_data_loading_real_behavior\",\n        \"test_open_schedule_editor_function_real_behavior\",\n        \"test_profile_data_editing_real_behavior\",\n        \"test_task_completion_real_behavior\",\n        \"test_task_data_editing_real_behavior\",\n        \"test_task_saving_real_behavior\",\n        \"test_undo_delete_real_behavior\",\n        \"test_user_data\",\n        \"test_validation_error_handling_real_behavior\"\n      ],\n      \"tests/ui/test_dialogs.py\": [\n        \"mock_save\",\n        \"test_dialog_imports\",\n        \"test_dialog_instantiation\",\n        \"test_generated_files_exist\",\n        \"test_ui_files_exist\",\n        \"test_user_data_access\",\n        \"test_widget_imports\"\n      ],\n      \"tests/ui/test_ui_widgets_coverage_expansion.py\": [\n        \"app\",\n        \"cleanup_widgets\",\n        \"mock_message_boxes\",\n        \"mock_user_data_dir\",\n        \"on_delete_requested\",\n        \"on_tags_changed\",\n        \"on_values_changed\",\n        \"temp_dir\",\n        \"test_dynamic_list_container_add_blank_row_real_behavior\",\n        \"test_dynamic_list_container_duplicate_detection_real_behavior\",\n        \"test_dynamic_list_container_error_handling_real_behavior\",\n        \"test_dynamic_list_container_get_values_real_behavior\",\n        \"test_dynamic_list_container_initialization_real_behavior\",\n        \"test_dynamic_list_container_row_deleted_real_behavior\",\n        \"test_dynamic_list_container_row_edited_real_behavior\",\n        \"test_dynamic_list_container_set_values_real_behavior\",\n        \"test_dynamic_list_container_signal_emission_real_behavior\",\n        \"test_period_row_widget_all_period_initialization_real_behavior\",\n        \"test_period_row_widget_day_selection_real_behavior\",\n        \"test_period_row_widget_default_initialization_real_behavior\",\n        \"test_period_row_widget_delete_requested_signal_real_behavior\",\n        \"test_period_row_widget_error_handling_real_behavior\",\n        \"test_period_row_widget_get_period_data_real_behavior\",\n        \"test_period_row_widget_initialization_real_behavior\",\n        \"test_period_row_widget_load_period_data_real_behavior\",\n        \"test_period_row_widget_read_only_mode_real_behavior\",\n        \"test_period_row_widget_validation_real_behavior\",\n        \"test_tag_widget_account_creation_mode_real_behavior\",\n        \"test_tag_widget_add_duplicate_tag_real_behavior\",\n        \"test_tag_widget_add_empty_tag_real_behavior\",\n        \"test_tag_widget_add_tag_account_creation_mode_real_behavior\",\n        \"test_tag_widget_add_tag_management_mode_real_behavior\",\n        \"test_tag_widget_delete_tag_account_creation_mode_real_behavior\",\n        \"test_tag_widget_delete_tag_real_behavior\",\n        \"test_tag_widget_edit_tag_account_creation_mode_real_behavior\",\n        \"test_tag_widget_edit_tag_real_behavior\",\n        \"test_tag_widget_error_handling_real_behavior\",\n        \"test_tag_widget_get_selected_tags_real_behavior\",\n        \"test_tag_widget_management_mode_initialization_real_behavior\",\n        \"test_tag_widget_refresh_tags_real_behavior\",\n        \"test_tag_widget_selection_changed_signal_real_behavior\",\n        \"test_tag_widget_selection_mode_checkbox_behavior_real_behavior\",\n        \"test_tag_widget_selection_mode_initialization_real_behavior\",\n        \"test_tag_widget_set_selected_tags_real_behavior\",\n        \"test_tag_widget_undo_delete_real_behavior\",\n        \"test_widget_integration_real_behavior\",\n        \"test_widget_lifecycle_real_behavior\",\n        \"test_widget_memory_usage_real_behavior\",\n        \"test_widget_performance_real_behavior\",\n        \"user_id\"\n      ],\n      \"tests/ui/test_user_profile_dialog_coverage_expansion.py\": [\n        \"dialog\",\n        \"empty_dialog\",\n        \"qapp\",\n        \"test_add_custom_field_real_behavior\",\n        \"test_add_loved_one_widget_real_behavior\",\n        \"test_add_loved_one_widget_without_data_real_behavior\",\n        \"test_cancel_real_behavior\",\n        \"test_center_dialog_real_behavior\",\n        \"test_close_event_declined_real_behavior\",\n        \"test_close_event_real_behavior\",\n        \"test_create_custom_field_list_real_behavior\",\n        \"test_create_health_section_real_behavior\",\n        \"test_create_loved_ones_section_real_behavior\",\n        \"test_custom_field_interaction_real_behavior\",\n        \"test_dialog_cleanup_real_behavior\",\n        \"test_dialog_initialization_with_existing_data_real_behavior\",\n        \"test_dialog_initialization_without_data_real_behavior\",\n        \"test_dialog_modal_behavior_real_behavior\",\n        \"test_dialog_size_constraints_real_behavior\",\n        \"test_dialog_window_flags_real_behavior\",\n        \"test_dialog_with_parent_real_behavior\",\n        \"test_error_handling_real_behavior\",\n        \"test_key_press_event_enter_real_behavior\",\n        \"test_key_press_event_escape_real_behavior\",\n        \"test_loved_one_widget_interaction_real_behavior\",\n        \"test_multi_column_layout_real_behavior\",\n        \"test_profile_widget_integration_real_behavior\",\n        \"test_remove_custom_field_real_behavior\",\n        \"test_remove_loved_one_widget_real_behavior\",\n        \"test_save_personalization_real_behavior\",\n        \"test_save_personalization_validation_error_real_behavior\",\n        \"test_save_personalization_without_callback_real_behavior\",\n        \"test_title_case_conversion_real_behavior\",\n        \"test_user_data\"\n      ],\n      \"tests/ui/test_widget_behavior.py\": [\n        \"qapp\",\n        \"test_checkin_enablement_real_behavior\",\n        \"test_item_management_real_behavior\",\n        \"test_tag_management_real_behavior\",\n        \"test_tag_selection_mode_real_behavior\",\n        \"test_task_enablement_real_behavior\",\n        \"test_widget_initialization_real_behavior\",\n        \"widget\"\n      ],\n      \"tests/ui/test_widget_behavior_simple.py\": [\n        \"qapp\",\n        \"test_category_selection_widget_import_and_creation\",\n        \"test_channel_selection_widget_import_and_creation\",\n        \"test_checkin_settings_widget_import_and_creation\",\n        \"test_dynamic_list_container_import_and_creation\",\n        \"test_dynamic_list_field_import_and_creation\",\n        \"test_tag_widget_import_and_creation\",\n        \"test_tag_widget_selection_mode\",\n        \"test_task_settings_widget_import_and_creation\",\n        \"test_user_profile_settings_widget_import_and_creation\"\n      ],\n      \"tests/unit/test_cleanup.py\": [\n        \"__init__\",\n        \"_cleanup_old_test_logs\",\n        \"_cleanup_single_user\",\n        \"_cleanup_temp_files\",\n        \"_create_user_backup\",\n        \"_find_orphaned_files\",\n        \"_find_test_users\",\n        \"_validate_user_data\",\n        \"cleanup_test_users\",\n        \"main\",\n        \"reset_test_environment\",\n        \"validate_test_data_integrity\"\n      ],\n      \"tests/unit/test_config.py\": [\n        \"test_base_data_dir_default\",\n        \"test_default_messages_dir_path_default\",\n        \"test_environment_override\",\n        \"test_user_info_dir_path_default\",\n        \"test_validate_ai_configuration_missing_url\",\n        \"test_validate_ai_configuration_success\",\n        \"test_validate_all_configuration_success\",\n        \"test_validate_and_raise_if_invalid_failure\",\n        \"test_validate_and_raise_if_invalid_success\",\n        \"test_validate_communication_channels_no_tokens\",\n        \"test_validate_communication_channels_success\",\n        \"test_validate_core_paths_missing_directory\",\n        \"test_validate_core_paths_success\",\n        \"test_validate_environment_variables_success\",\n        \"test_validate_file_organization_settings_success\",\n        \"test_validate_logging_configuration_success\",\n        \"test_validate_scheduler_configuration_success\"\n      ],\n      \"tests/unit/test_error_handling.py\": [\n        \"backup_function\",\n        \"cleanup_function\",\n        \"corrupt_data_function\",\n        \"inner_function\",\n        \"outer_function\",\n        \"recover_data_function\",\n        \"state_validation_function\",\n        \"test_config_error\",\n        \"test_data_error\",\n        \"test_error_handler_custom_return\",\n        \"test_error_handler_exception\",\n        \"test_error_handler_logs_error\",\n        \"test_error_handler_nested_exceptions\",\n        \"test_error_handler_success\",\n        \"test_error_handler_with_args_kwargs\",\n        \"test_error_handling_different_exception_types\",\n        \"test_error_handling_in_function_chain\",\n        \"test_error_handling_with_recovery\",\n        \"test_file_operation_error\",\n        \"test_function\",\n        \"test_handle_configuration_error\",\n        \"test_handle_errors_custom_return\",\n        \"test_handle_errors_exception\",\n        \"test_handle_errors_logs_error\",\n        \"test_handle_errors_specific_exception\",\n        \"test_handle_errors_success\",\n        \"test_handle_errors_with_args_kwargs\",\n        \"test_handle_errors_with_logging_disabled\",\n        \"test_handle_file_error\",\n        \"test_mhm_error_basic\",\n        \"test_mhm_error_with_details\",\n        \"test_validation_error\"\n      ],\n      \"tests/unit/test_file_operations.py\": [\n        \"test_determine_file_path_default_messages\",\n        \"test_determine_file_path_invalid_file_type\",\n        \"test_determine_file_path_invalid_user_id\",\n        \"test_determine_file_path_user_file\",\n        \"test_ensure_user_directory_already_exists\",\n        \"test_ensure_user_directory_success\",\n        \"test_file_operations_lifecycle\",\n        \"test_get_user_file_path_success\",\n        \"test_load_json_data_corrupted_json\",\n        \"test_load_json_data_empty_file\",\n        \"test_load_json_data_file_not_found\",\n        \"test_load_json_data_success\",\n        \"test_load_json_data_unicode_content\",\n        \"test_load_large_json_data\",\n        \"test_save_json_data_complex_objects\",\n        \"test_save_json_data_create_directory\",\n        \"test_save_json_data_permission_error\",\n        \"test_save_json_data_success\",\n        \"test_save_large_json_data\",\n        \"test_verify_file_access_missing_file\",\n        \"test_verify_file_access_permission_error\",\n        \"test_verify_file_access_success\"\n      ],\n      \"tests/unit/test_logging_components.py\": [\n        \"test_component_logger_propagate_and_handlers\",\n        \"test_errors_routed_to_tests_logs_in_verbose_mode\"\n      ],\n      \"tests/unit/test_no_prints_policy.py\": [\n        \"test_no_print_calls_in_tests_except_debug_marked\"\n      ],\n      \"tests/unit/test_recurring_tasks.py\": [\n        \"temp_user_dir\",\n        \"test_calculate_next_due_date_daily\",\n        \"test_calculate_next_due_date_invalid_pattern\",\n        \"test_calculate_next_due_date_monthly\",\n        \"test_calculate_next_due_date_weekly\",\n        \"test_calculate_next_due_date_yearly\",\n        \"test_complete_recurring_task_creates_next_instance\",\n        \"test_create_recurring_task\",\n        \"test_non_recurring_task_completion\"\n      ],\n      \"tests/unit/test_schedule_management.py\": [\n        \"test_schedule_period_lifecycle\",\n        \"test_time_conversion_helpers\",\n        \"test_validate_and_format_time\"\n      ],\n      \"tests/unit/test_user_data_loader_idempotency.py\": [\n        \"test_loader_registry_identity_and_idempotency\"\n      ],\n      \"tests/unit/test_user_data_loader_order_insensitivity.py\": [\n        \"_reload_in_order\",\n        \"test_loader_registry_shared_and_complete_regardless_of_import_order\"\n      ],\n      \"tests/unit/test_user_management.py\": [\n        \"test_create_user_files_success\",\n        \"test_get_all_user_ids_empty\",\n        \"test_get_all_user_ids_with_users\",\n        \"test_get_user_context_nonexistent_user\",\n        \"test_get_user_context_success\",\n        \"test_get_user_data_account_nonexistent_chat_id\",\n        \"test_get_user_data_account_nonexistent_discord_id\",\n        \"test_get_user_data_account_nonexistent_email\",\n        \"test_get_user_data_account_with_chat_id\",\n        \"test_get_user_data_account_with_discord_id\",\n        \"test_get_user_data_account_with_email\",\n        \"test_get_user_data_invalid_type\",\n        \"test_get_user_data_multiple_types\",\n        \"test_get_user_data_nonexistent_user\",\n        \"test_get_user_data_single_type\",\n        \"test_get_user_preferences_corrupted_file\",\n        \"test_get_user_preferences_nonexistent_user\",\n        \"test_get_user_preferences_success\",\n        \"test_hybrid_get_user_data_nonexistent_user\",\n        \"test_hybrid_get_user_data_success\",\n        \"test_save_user_data_success\",\n        \"test_save_user_preferences_invalid_user_id\",\n        \"test_update_user_preferences_nonexistent_user\",\n        \"test_update_user_preferences_success\",\n        \"test_user_lifecycle\"\n      ],\n      \"tests/unit/test_validation.py\": [\n        \"test_is_valid_email_with_invalid_emails\",\n        \"test_is_valid_email_with_valid_emails\",\n        \"test_is_valid_phone_with_invalid_phones\",\n        \"test_is_valid_phone_with_valid_phones\",\n        \"test_title_case_with_various_inputs\",\n        \"test_validate_new_user_data_empty_updates\",\n        \"test_validate_new_user_data_invalid_account_status\",\n        \"test_validate_new_user_data_invalid_channel_type\",\n        \"test_validate_new_user_data_invalid_email\",\n        \"test_validate_new_user_data_missing_account\",\n        \"test_validate_new_user_data_missing_channel\",\n        \"test_validate_new_user_data_missing_user_id\",\n        \"test_validate_new_user_data_missing_username\",\n        \"test_validate_new_user_data_success\",\n        \"test_validate_new_user_data_user_already_exists\",\n        \"test_validate_personalization_data_empty\",\n        \"test_validate_personalization_data_invalid_custom_field_lists\",\n        \"test_validate_personalization_data_invalid_custom_fields_type\",\n        \"test_validate_personalization_data_invalid_date_format\",\n        \"test_validate_personalization_data_invalid_list_fields\",\n        \"test_validate_personalization_data_invalid_loved_one_item\",\n        \"test_validate_personalization_data_invalid_loved_ones_type\",\n        \"test_validate_personalization_data_invalid_string_fields\",\n        \"test_validate_personalization_data_success\",\n        \"test_validate_schedule_periods_all_period_excluded\",\n        \"test_validate_schedule_periods_empty\",\n        \"test_validate_schedule_periods_empty_days\",\n        \"test_validate_schedule_periods_invalid_days\",\n        \"test_validate_schedule_periods_invalid_days_type\",\n        \"test_validate_schedule_periods_invalid_time_format\",\n        \"test_validate_schedule_periods_invalid_time_order\",\n        \"test_validate_schedule_periods_missing_times\",\n        \"test_validate_schedule_periods_no_active_periods\",\n        \"test_validate_schedule_periods_success\",\n        \"test_validate_time_format_with_invalid_times\",\n        \"test_validate_time_format_with_valid_times\",\n        \"test_validate_user_update_account_invalid_email\",\n        \"test_validate_user_update_account_invalid_status\",\n        \"test_validate_user_update_account_missing_username\",\n        \"test_validate_user_update_account_success\",\n        \"test_validate_user_update_context_invalid_custom_fields\",\n        \"test_validate_user_update_context_invalid_date\",\n        \"test_validate_user_update_context_success\",\n        \"test_validate_user_update_preferences_invalid_categories\",\n        \"test_validate_user_update_preferences_invalid_channel_type\",\n        \"test_validate_user_update_preferences_success\",\n        \"test_validate_user_update_schedules_invalid_days\",\n        \"test_validate_user_update_schedules_invalid_time_format\",\n        \"test_validate_user_update_schedules_invalid_time_order\",\n        \"test_validate_user_update_schedules_success\",\n        \"test_validation_error_propagation\",\n        \"test_validation_functions_work_together\",\n        \"test_validation_with_real_file_operations\"\n      ],\n      \"ui/dialogs/account_creator_dialog.py\": [\n        \"__init__\",\n        \"_build_features_dict\",\n        \"_determine_chat_id\",\n        \"_validate_and_accept__add_feature_settings\",\n        \"_validate_and_accept__build_account_data\",\n        \"_validate_and_accept__build_user_preferences\",\n        \"_validate_and_accept__collect_basic_user_info\",\n        \"_validate_and_accept__collect_channel_data\",\n        \"_validate_and_accept__collect_data\",\n        \"_validate_and_accept__collect_feature_settings\",\n        \"_validate_and_accept__collect_widget_data\",\n        \"_validate_and_accept__create_account\",\n        \"_validate_and_accept__handle_success\",\n        \"_validate_and_accept__input_errors\",\n        \"_validate_and_accept__schedule_new_user\",\n        \"_validate_and_accept__setup_task_tags\",\n        \"_validate_and_accept__show_error_dialog\",\n        \"_validate_and_accept__show_success_dialog\",\n        \"_validate_and_accept__update_user_index\",\n        \"accept\",\n        \"center_dialog\",\n        \"close_dialog\",\n        \"create_account\",\n        \"create_account_dialog\",\n        \"get_account_data\",\n        \"keyPressEvent\",\n        \"load_category_widget\",\n        \"load_checkin_settings_widget\",\n        \"load_message_service_widget\",\n        \"load_task_management_widget\",\n        \"load_widgets\",\n        \"on_feature_toggled\",\n        \"on_personalization_save\",\n        \"on_preferred_name_changed\",\n        \"on_username_changed\",\n        \"open_personalization_dialog\",\n        \"setup_connections\",\n        \"setup_dialog\",\n        \"setup_feature_group_boxes\",\n        \"setup_profile_button\",\n        \"update_profile_button_state\",\n        \"update_tab_visibility\",\n        \"validate_account_data\",\n        \"validate_and_accept\",\n        \"validate_input\"\n      ],\n      \"ui/dialogs/admin_panel.py\": [\n        \"__init__\",\n        \"get_admin_data\",\n        \"set_admin_data\",\n        \"setup_ui\"\n      ],\n      \"ui/dialogs/category_management_dialog.py\": [\n        \"__init__\",\n        \"get_selected_categories\",\n        \"load_user_category_data\",\n        \"on_enable_messages_toggled\",\n        \"save_category_settings\",\n        \"set_selected_categories\"\n      ],\n      \"ui/dialogs/channel_management_dialog.py\": [\n        \"__init__\",\n        \"get_selected_channel\",\n        \"save_channel_settings\",\n        \"set_selected_channel\"\n      ],\n      \"ui/dialogs/checkin_management_dialog.py\": [\n        \"__init__\",\n        \"get_checkin_settings\",\n        \"load_user_checkin_data\",\n        \"on_enable_checkins_toggled\",\n        \"save_checkin_settings\",\n        \"set_checkin_settings\"\n      ],\n      \"ui/dialogs/schedule_editor_dialog.py\": [\n        \"__init__\",\n        \"_trigger_rescheduling\",\n        \"add_new_period\",\n        \"cancel\",\n        \"center_dialog\",\n        \"collect_period_data\",\n        \"find_lowest_available_period_number\",\n        \"get_schedule_data\",\n        \"handle_save\",\n        \"load_existing_data\",\n        \"open_schedule_editor\",\n        \"remove_period_row\",\n        \"resort_period_widgets\",\n        \"save_schedule\",\n        \"set_schedule_data\",\n        \"setup_functionality\",\n        \"sort_key\",\n        \"undo_last_delete\"\n      ],\n      \"ui/dialogs/task_completion_dialog.py\": [\n        \"__init__\",\n        \"get_completion_data\",\n        \"get_completion_date\",\n        \"get_completion_notes\",\n        \"get_completion_time\",\n        \"setup_completion_time_components\",\n        \"setup_connections\",\n        \"setup_ui\"\n      ],\n      \"ui/dialogs/task_crud_dialog.py\": [\n        \"__init__\",\n        \"add_new_task\",\n        \"complete_selected_task\",\n        \"delete_completed_task\",\n        \"delete_selected_task\",\n        \"edit_selected_task\",\n        \"get_selected_task_id\",\n        \"load_data\",\n        \"refresh_active_tasks\",\n        \"refresh_completed_tasks\",\n        \"restore_selected_task\",\n        \"setup_connections\",\n        \"setup_ui\",\n        \"update_statistics\"\n      ],\n      \"ui/dialogs/task_edit_dialog.py\": [\n        \"__init__\",\n        \"add_reminder_period\",\n        \"collect_quick_reminders\",\n        \"collect_recurring_task_data\",\n        \"collect_reminder_periods\",\n        \"collect_selected_tags\",\n        \"delete_reminder_period\",\n        \"get_due_time_as_24h\",\n        \"load_recurring_task_data\",\n        \"load_task_data\",\n        \"on_hour_changed\",\n        \"on_minute_changed\",\n        \"on_no_due_date_toggled\",\n        \"on_recurring_pattern_changed\",\n        \"render_reminder_period_row\",\n        \"render_reminder_periods\",\n        \"save_task\",\n        \"set_due_time_from_24h\",\n        \"setup_connections\",\n        \"setup_due_time_components\",\n        \"setup_recurring_task_components\",\n        \"setup_ui\",\n        \"validate_form\"\n      ],\n      \"ui/dialogs/task_management_dialog.py\": [\n        \"__init__\",\n        \"get_statistics\",\n        \"on_enable_task_management_toggled\",\n        \"save_task_settings\"\n      ],\n      \"ui/dialogs/user_profile_dialog.py\": [\n        \"__init__\",\n        \"add_custom_field\",\n        \"add_loved_one_widget\",\n        \"cancel\",\n        \"center_dialog\",\n        \"collect_custom_field_data\",\n        \"collect_loved_ones_data\",\n        \"create_custom_field_list\",\n        \"create_goals_section\",\n        \"create_health_section\",\n        \"create_interests_section\",\n        \"create_loved_ones_section\",\n        \"create_notes_section\",\n        \"keyPressEvent\",\n        \"open_personalization_dialog\",\n        \"remove_custom_field\",\n        \"remove_loved_one_widget\",\n        \"save_personalization\",\n        \"setup_ui\",\n        \"title_case\"\n      ],\n      \"ui/generate_ui_files.py\": [\n        \"generate_all_ui_files\",\n        \"generate_ui_file\",\n        \"main\"\n      ],\n      \"ui/generated/account_creator_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/admin_panel_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/category_management_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/category_selection_widget_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/channel_management_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/channel_selection_widget_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/checkin_element_template_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/checkin_management_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/checkin_settings_widget_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/dynamic_list_field_template_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/period_row_template_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/schedule_editor_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/tag_widget_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/task_completion_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/task_crud_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/task_edit_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/task_management_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/task_settings_widget_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/user_profile_management_dialog_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/generated/user_profile_settings_widget_pyqt.py\": [\n        \"retranslateUi\",\n        \"setupUi\"\n      ],\n      \"ui/ui_app_qt.py\": [\n        \"__init__\",\n        \"_send_test_message__get_selected_category\",\n        \"_send_test_message__validate_service_running\",\n        \"_send_test_message__validate_user_selection\",\n        \"cleanup_old_requests\",\n        \"closeEvent\",\n        \"confirm_test_message\",\n        \"connect_signals\",\n        \"create_new_user\",\n        \"disable_content_management\",\n        \"edit_user_messages\",\n        \"edit_user_schedules\",\n        \"enable_content_management\",\n        \"force_clean_cache\",\n        \"initialize_ui\",\n        \"is_service_running\",\n        \"load_theme\",\n        \"load_ui\",\n        \"load_user_categories\",\n        \"main\",\n        \"manage_categories\",\n        \"manage_checkins\",\n        \"manage_communication_settings\",\n        \"manage_personalization\",\n        \"manage_task_crud\",\n        \"manage_tasks\",\n        \"manage_user_analytics\",\n        \"on_category_selected\",\n        \"on_save\",\n        \"on_schedule_save\",\n        \"on_user_selected\",\n        \"open_message_editor\",\n        \"open_schedule_editor\",\n        \"refresh_user_list\",\n        \"restart_service\",\n        \"run_category_scheduler\",\n        \"run_full_scheduler\",\n        \"run_user_scheduler\",\n        \"send_actual_test_message\",\n        \"send_test_message\",\n        \"show_configuration_help\",\n        \"shutdown_ui_components\",\n        \"start_service\",\n        \"stop_service\",\n        \"system_health_check\",\n        \"toggle_logging_verbosity\",\n        \"update_service_status\",\n        \"update_user_index_on_startup\",\n        \"validate_configuration\",\n        \"validate_configuration_before_start\",\n        \"view_all_users_summary\",\n        \"view_cache_status\",\n        \"view_log_file\"\n      ],\n      \"ui/widgets/category_selection_widget.py\": [\n        \"__init__\",\n        \"get_selected_categories\",\n        \"set_selected_categories\"\n      ],\n      \"ui/widgets/channel_selection_widget.py\": [\n        \"__init__\",\n        \"get_all_contact_info\",\n        \"get_selected_channel\",\n        \"get_timezone\",\n        \"populate_timezones\",\n        \"set_contact_info\",\n        \"set_selected_channel\",\n        \"set_timezone\"\n      ],\n      \"ui/widgets/checkin_settings_widget.py\": [\n        \"__init__\",\n        \"add_new_period\",\n        \"add_new_question\",\n        \"connect_question_checkboxes\",\n        \"find_lowest_available_period_number\",\n        \"get_checkin_settings\",\n        \"get_default_question_state\",\n        \"load_existing_data\",\n        \"on_question_toggled\",\n        \"remove_period_row\",\n        \"set_checkin_settings\",\n        \"set_question_checkboxes\",\n        \"setup_connections\",\n        \"showEvent\",\n        \"undo_last_question_delete\",\n        \"undo_last_time_period_delete\"\n      ],\n      \"ui/widgets/dynamic_list_container.py\": [\n        \"__init__\",\n        \"__post_init__\",\n        \"_add_blank_row\",\n        \"_deduplicate_values\",\n        \"_ensure_single_blank_row\",\n        \"_first_blank_index\",\n        \"_on_preset_toggled\",\n        \"_on_row_deleted\",\n        \"_on_row_edited\",\n        \"get_values\",\n        \"set_values\"\n      ],\n      \"ui/widgets/dynamic_list_field.py\": [\n        \"__init__\",\n        \"_on_delete\",\n        \"get_text\",\n        \"is_blank\",\n        \"is_checked\",\n        \"on_checkbox_toggled\",\n        \"on_editing_finished\",\n        \"on_text_changed\",\n        \"set_checked\",\n        \"set_text\"\n      ],\n      \"ui/widgets/period_row_widget.py\": [\n        \"__init__\",\n        \"_get_day_checkboxes\",\n        \"_set_read_only__all_period_read_only\",\n        \"_set_read_only__apply_read_only_styling\",\n        \"_set_read_only__checkbox_states\",\n        \"_set_read_only__clear_read_only_styling\",\n        \"_set_read_only__delete_button_visibility\",\n        \"_set_read_only__force_style_updates\",\n        \"_set_read_only__normal_checkbox_states\",\n        \"_set_read_only__time_inputs\",\n        \"_set_read_only__visual_styling\",\n        \"get_period_data\",\n        \"get_period_name\",\n        \"get_selected_days\",\n        \"is_valid\",\n        \"load_days\",\n        \"load_period_data\",\n        \"on_individual_day_toggled\",\n        \"on_select_all_days_toggled\",\n        \"request_delete\",\n        \"set_period_name\",\n        \"set_read_only\",\n        \"setup_functionality\"\n      ],\n      \"ui/widgets/tag_widget.py\": [\n        \"__init__\",\n        \"add_tag\",\n        \"delete_tag\",\n        \"edit_tag\",\n        \"get_available_tags\",\n        \"get_selected_tags\",\n        \"load_tags\",\n        \"on_tag_selection_changed\",\n        \"refresh_tag_list\",\n        \"refresh_tags\",\n        \"set_selected_tags\",\n        \"setup_connections\",\n        \"setup_ui\",\n        \"undo_last_tag_delete\",\n        \"update_button_states\"\n      ],\n      \"ui/widgets/task_settings_widget.py\": [\n        \"__init__\",\n        \"add_new_period\",\n        \"find_lowest_available_period_number\",\n        \"get_available_tags\",\n        \"get_recurring_task_settings\",\n        \"get_statistics\",\n        \"get_task_settings\",\n        \"load_existing_data\",\n        \"load_recurring_task_settings\",\n        \"refresh_tags\",\n        \"remove_period_row\",\n        \"save_recurring_task_settings\",\n        \"set_recurring_task_settings\",\n        \"set_task_settings\",\n        \"setup_connections\",\n        \"showEvent\",\n        \"undo_last_period_delete\",\n        \"undo_last_tag_delete\"\n      ],\n      \"ui/widgets/user_profile_settings_widget.py\": [\n        \"__init__\",\n        \"_get_personalization_data__ensure_required_fields\",\n        \"_get_personalization_data__extract_basic_fields\",\n        \"_get_personalization_data__extract_date_of_birth\",\n        \"_get_personalization_data__extract_dynamic_containers\",\n        \"_get_personalization_data__extract_gender_identity\",\n        \"_get_personalization_data__extract_loved_ones\",\n        \"_get_personalization_data__extract_notes\",\n        \"get_personalization_data\",\n        \"get_settings\",\n        \"load_existing_data\",\n        \"populate_timezones\",\n        \"set_checkbox_group\",\n        \"set_settings\"\n      ],\n      \"user/context_manager.py\": [\n        \"__init__\",\n        \"_get_conversation_history\",\n        \"_get_conversation_insights\",\n        \"_get_minimal_context\",\n        \"_get_mood_trends\",\n        \"_get_recent_activity\",\n        \"_get_user_preferences\",\n        \"_get_user_profile\",\n        \"add_conversation_exchange\",\n        \"format_context_for_ai\",\n        \"get_ai_context\",\n        \"get_current_user_context\"\n      ],\n      \"user/user_context.py\": [\n        \"__new__\",\n        \"get_instance_context\",\n        \"get_internal_username\",\n        \"get_preference\",\n        \"get_preferred_name\",\n        \"get_user_id\",\n        \"load_user_data\",\n        \"save_user_data\",\n        \"set_internal_username\",\n        \"set_preference\",\n        \"set_preferred_name\",\n        \"set_user_id\",\n        \"update_preference\"\n      ],\n      \"user/user_preferences.py\": [\n        \"__init__\",\n        \"get_all_preferences\",\n        \"get_preference\",\n        \"is_schedule_period_active\",\n        \"load_preferences\",\n        \"remove_preference\",\n        \"save_preferences\",\n        \"set_preference\",\n        \"set_schedule_period_active\",\n        \"update_preference\"\n      ]\n    },\n    \"missing_files\": [\n      \"ai/cache_manager.py\",\n      \"ai/chatbot.py\",\n      \"ai/context_builder.py\",\n      \"ai/conversation_history.py\",\n      \"ai/prompt_manager.py\",\n      \"communication/command_handlers/analytics_handler.py\",\n      \"communication/command_handlers/base_handler.py\",\n      \"communication/command_handlers/checkin_handler.py\",\n      \"communication/command_handlers/interaction_handlers.py\",\n      \"communication/command_handlers/profile_handler.py\",\n      \"communication/command_handlers/schedule_handler.py\",\n      \"communication/command_handlers/task_handler.py\",\n      \"communication/communication_channels/base/base_channel.py\",\n      \"communication/communication_channels/base/command_registry.py\",\n      \"communication/communication_channels/base/message_formatter.py\",\n      \"communication/communication_channels/base/rich_formatter.py\",\n      \"communication/communication_channels/discord/api_client.py\",\n      \"communication/communication_channels/discord/bot.py\",\n      \"communication/communication_channels/discord/event_handler.py\",\n      \"communication/communication_channels/email/bot.py\",\n      \"communication/core/channel_monitor.py\",\n      \"communication/core/channel_orchestrator.py\",\n      \"communication/core/factory.py\",\n      \"communication/core/retry_manager.py\",\n      \"communication/message_processing/command_parser.py\",\n      \"communication/message_processing/conversation_flow_manager.py\",\n      \"communication/message_processing/interaction_manager.py\",\n      \"communication/message_processing/message_router.py\",\n      \"core/auto_cleanup.py\",\n      \"core/backup_manager.py\",\n      \"core/checkin_analytics.py\",\n      \"core/checkin_dynamic_manager.py\",\n      \"core/config.py\",\n      \"core/error_handling.py\",\n      \"core/file_auditor.py\",\n      \"core/file_operations.py\",\n      \"core/logger.py\",\n      \"core/message_management.py\",\n      \"core/response_tracking.py\",\n      \"core/schedule_management.py\",\n      \"core/schedule_utilities.py\",\n      \"core/scheduler.py\",\n      \"core/schemas.py\",\n      \"core/service.py\",\n      \"core/service_utilities.py\",\n      \"core/ui_management.py\",\n      \"core/user_data_handlers.py\",\n      \"core/user_data_manager.py\",\n      \"core/user_data_validation.py\",\n      \"core/user_management.py\",\n      \"run_mhm.py\",\n      \"run_tests.py\",\n      \"tasks/task_management.py\",\n      \"tests/behavior/test_account_management_real_behavior.py\",\n      \"tests/behavior/test_ai_chatbot_behavior.py\",\n      \"tests/behavior/test_ai_context_builder_behavior.py\",\n      \"tests/behavior/test_ai_context_builder_coverage_expansion.py\",\n      \"tests/behavior/test_ai_conversation_history_behavior.py\",\n      \"tests/behavior/test_auto_cleanup_behavior.py\",\n      \"tests/behavior/test_backup_manager_behavior.py\",\n      \"tests/behavior/test_checkin_analytics_behavior.py\",\n      \"tests/behavior/test_command_parser_coverage_expansion_phase3_simple.py\",\n      \"tests/behavior/test_communication_behavior.py\",\n      \"tests/behavior/test_communication_command_parser_behavior.py\",\n      \"tests/behavior/test_communication_factory_coverage_expansion.py\",\n      \"tests/behavior/test_communication_interaction_manager_behavior.py\",\n      \"tests/behavior/test_communication_manager_coverage_expansion.py\",\n      \"tests/behavior/test_config_coverage_expansion_phase3_simple.py\",\n      \"tests/behavior/test_conversation_behavior.py\",\n      \"tests/behavior/test_core_message_management_coverage_expansion.py\",\n      \"tests/behavior/test_core_service_coverage_expansion.py\",\n      \"tests/behavior/test_discord_bot_behavior.py\",\n      \"tests/behavior/test_dynamic_checkin_behavior.py\",\n      \"tests/behavior/test_email_bot_behavior.py\",\n      \"tests/behavior/test_enhanced_command_parser_behavior.py\",\n      \"tests/behavior/test_error_handling_coverage_expansion_phase3_final.py\",\n      \"tests/behavior/test_interaction_handlers_behavior.py\",\n      \"tests/behavior/test_interaction_handlers_coverage_expansion.py\",\n      \"tests/behavior/test_logger_behavior.py\",\n      \"tests/behavior/test_logger_coverage_expansion.py\",\n      \"tests/behavior/test_logger_coverage_expansion_phase3_simple.py\",\n      \"tests/behavior/test_message_behavior.py\",\n      \"tests/behavior/test_observability_logging.py\",\n      \"tests/behavior/test_response_tracking_behavior.py\",\n      \"tests/behavior/test_schedule_management_behavior.py\",\n      \"tests/behavior/test_scheduler_behavior.py\",\n      \"tests/behavior/test_scheduler_coverage_expansion.py\",\n      \"tests/behavior/test_service_behavior.py\",\n      \"tests/behavior/test_service_utilities_behavior.py\",\n      \"tests/behavior/test_static_logging_check.py\",\n      \"tests/behavior/test_task_behavior.py\",\n      \"tests/behavior/test_task_management_coverage_expansion.py\",\n      \"tests/behavior/test_ui_app_behavior.py\",\n      \"tests/behavior/test_user_context_behavior.py\",\n      \"tests/behavior/test_user_management_coverage_expansion.py\",\n      \"tests/behavior/test_utilities_demo.py\",\n      \"tests/conftest.py\",\n      \"tests/debug_file_paths.py\",\n      \"tests/integration/test_account_lifecycle.py\",\n      \"tests/integration/test_account_management.py\",\n      \"tests/integration/test_user_creation.py\",\n      \"tests/test_isolation.py\",\n      \"tests/test_utilities.py\",\n      \"tests/ui/test_account_creation_ui.py\",\n      \"tests/ui/test_channel_management_dialog_coverage_expansion.py\",\n      \"tests/ui/test_dialog_behavior.py\",\n      \"tests/ui/test_dialog_coverage_expansion.py\",\n      \"tests/ui/test_dialogs.py\",\n      \"tests/ui/test_ui_widgets_coverage_expansion.py\",\n      \"tests/ui/test_user_profile_dialog_coverage_expansion.py\",\n      \"tests/ui/test_widget_behavior.py\",\n      \"tests/ui/test_widget_behavior_simple.py\",\n      \"tests/unit/test_cleanup.py\",\n      \"tests/unit/test_config.py\",\n      \"tests/unit/test_error_handling.py\",\n      \"tests/unit/test_file_operations.py\",\n      \"tests/unit/test_logging_components.py\",\n      \"tests/unit/test_no_prints_policy.py\",\n      \"tests/unit/test_recurring_tasks.py\",\n      \"tests/unit/test_schedule_management.py\",\n      \"tests/unit/test_user_data_loader_idempotency.py\",\n      \"tests/unit/test_user_data_loader_order_insensitivity.py\",\n      \"tests/unit/test_user_management.py\",\n      \"tests/unit/test_validation.py\",\n      \"ui/dialogs/account_creator_dialog.py\",\n      \"ui/dialogs/admin_panel.py\",\n      \"ui/dialogs/category_management_dialog.py\",\n      \"ui/dialogs/channel_management_dialog.py\",\n      \"ui/dialogs/checkin_management_dialog.py\",\n      \"ui/dialogs/schedule_editor_dialog.py\",\n      \"ui/dialogs/task_completion_dialog.py\",\n      \"ui/dialogs/task_crud_dialog.py\",\n      \"ui/dialogs/task_edit_dialog.py\",\n      \"ui/dialogs/task_management_dialog.py\",\n      \"ui/dialogs/user_profile_dialog.py\",\n      \"ui/generate_ui_files.py\",\n      \"ui/generated/account_creator_dialog_pyqt.py\",\n      \"ui/generated/admin_panel_pyqt.py\",\n      \"ui/generated/category_management_dialog_pyqt.py\",\n      \"ui/generated/category_selection_widget_pyqt.py\",\n      \"ui/generated/channel_management_dialog_pyqt.py\",\n      \"ui/generated/channel_selection_widget_pyqt.py\",\n      \"ui/generated/checkin_element_template_pyqt.py\",\n      \"ui/generated/checkin_management_dialog_pyqt.py\",\n      \"ui/generated/checkin_settings_widget_pyqt.py\",\n      \"ui/generated/dynamic_list_field_template_pyqt.py\",\n      \"ui/generated/period_row_template_pyqt.py\",\n      \"ui/generated/schedule_editor_dialog_pyqt.py\",\n      \"ui/generated/tag_widget_pyqt.py\",\n      \"ui/generated/task_completion_dialog_pyqt.py\",\n      \"ui/generated/task_crud_dialog_pyqt.py\",\n      \"ui/generated/task_edit_dialog_pyqt.py\",\n      \"ui/generated/task_management_dialog_pyqt.py\",\n      \"ui/generated/task_settings_widget_pyqt.py\",\n      \"ui/generated/user_profile_management_dialog_pyqt.py\",\n      \"ui/generated/user_profile_settings_widget_pyqt.py\",\n      \"ui/ui_app_qt.py\",\n      \"ui/widgets/category_selection_widget.py\",\n      \"ui/widgets/channel_selection_widget.py\",\n      \"ui/widgets/checkin_settings_widget.py\",\n      \"ui/widgets/dynamic_list_container.py\",\n      \"ui/widgets/dynamic_list_field.py\",\n      \"ui/widgets/period_row_widget.py\",\n      \"ui/widgets/tag_widget.py\",\n      \"ui/widgets/task_settings_widget.py\",\n      \"ui/widgets/user_profile_settings_widget.py\",\n      \"user/context_manager.py\",\n      \"user/user_context.py\",\n      \"user/user_preferences.py\"\n    ]\n  },\n  \"registry_sections\": {\n    \"ai/cache_manager.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Entry in the response cache\",\n          \"methods\": [],\n          \"name\": \"CacheEntry\"\n        },\n        {\n          \"docstring\": \"Simple in-memory cache for AI responses to avoid repeated calculations\",\n          \"methods\": [\n            \"__init__\",\n            \"_generate_key\",\n            \"get\",\n            \"set\",\n            \"_remove_entry\",\n            \"_cleanup_lru\",\n            \"clear\",\n            \"clear_expired\",\n            \"get_stats\",\n            \"get_entries_by_type\",\n            \"remove_entries_by_type\",\n            \"remove_user_entries\"\n          ],\n          \"name\": \"ResponseCache\"\n        },\n        {\n          \"docstring\": \"Cache for user context information\",\n          \"methods\": [\n            \"__init__\",\n            \"get\",\n            \"set\",\n            \"clear\",\n            \"clear_expired\"\n          ],\n          \"name\": \"ContextCache\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Get the global response cache instance\",\n          \"name\": \"get_response_cache\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Get the global context cache instance\",\n          \"name\": \"get_context_cache\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"max_size\",\n            \"ttl\"\n          ],\n          \"docstring\": \"Initialize the response cache\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"prompt\",\n            \"user_id\",\n            \"prompt_type\"\n          ],\n          \"docstring\": \"Generate cache key from prompt, user context, and prompt type\",\n          \"name\": \"_generate_key\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"prompt\",\n            \"user_id\",\n            \"prompt_type\"\n          ],\n          \"docstring\": \"Get cached response if available and not expired\",\n          \"name\": \"get\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"prompt\",\n            \"response\",\n            \"user_id\",\n            \"prompt_type\",\n            \"metadata\"\n          ],\n          \"docstring\": \"Cache a response\",\n          \"name\": \"set\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"key\"\n          ],\n          \"docstring\": \"Remove an entry from the cache\",\n          \"name\": \"_remove_entry\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Remove least recently used items\",\n          \"name\": \"_cleanup_lru\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Clear all cached responses\",\n          \"name\": \"clear\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Remove all expired entries from the cache\",\n          \"name\": \"clear_expired\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get cache statistics\",\n          \"name\": \"get_stats\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"prompt_type\"\n          ],\n          \"docstring\": \"Get all cache entries for a specific prompt type\",\n          \"name\": \"get_entries_by_type\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"prompt_type\"\n          ],\n          \"docstring\": \"Remove all cache entries for a specific prompt type\",\n          \"name\": \"remove_entries_by_type\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Remove all cache entries for a specific user\",\n          \"name\": \"remove_user_entries\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"ttl\"\n          ],\n          \"docstring\": \"Initialize the context cache\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Get cached context for a user\",\n          \"name\": \"get\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"context\"\n          ],\n          \"docstring\": \"Cache context for a user\",\n          \"name\": \"set\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Clear all cached contexts\",\n          \"name\": \"clear\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Remove all expired contexts\",\n          \"name\": \"clear_expired\"\n        }\n      ]\n    },\n    \"ai/chatbot.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"A Singleton container for LM Studio API client.\",\n          \"methods\": [\n            \"__new__\",\n            \"__init__\",\n            \"_make_cache_key_inputs\",\n            \"_test_lm_studio_connection\",\n            \"_call_lm_studio_api\",\n            \"_get_contextual_fallback\",\n            \"_get_fallback_response\",\n            \"_get_fallback_personalized_message\",\n            \"_optimize_prompt\",\n            \"_create_comprehensive_context_prompt\",\n            \"_detect_mode\",\n            \"_create_command_parsing_prompt\",\n            \"_create_command_parsing_with_clarification_prompt\",\n            \"generate_response\",\n            \"is_ai_available\",\n            \"reload_system_prompt\",\n            \"test_system_prompt_integration\",\n            \"get_ai_status\",\n            \"generate_personalized_message\",\n            \"generate_quick_response\",\n            \"generate_contextual_response\",\n            \"_detect_resource_constraints\",\n            \"_smart_truncate_response\",\n            \"_enhance_conversational_engagement\",\n            \"_get_adaptive_timeout\"\n          ],\n          \"name\": \"AIChatBotSingleton\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Return the shared AIChatBot instance.\",\n          \"name\": \"get_ai_chatbot\"\n        },\n        {\n          \"args\": [\n            \"cls\"\n          ],\n          \"docstring\": \"Create a new instance.\",\n          \"name\": \"__new__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mode\",\n            \"user_prompt\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Create consistent cache key inputs using prompt_type parameter.\",\n          \"name\": \"_make_cache_key_inputs\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test connection to LM Studio server.\",\n          \"name\": \"_test_lm_studio_connection\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"messages\",\n            \"max_tokens\",\n            \"temperature\",\n            \"timeout\"\n          ],\n          \"docstring\": \"Make an API call to LM Studio using OpenAI-compatible format.\",\n          \"name\": \"_call_lm_studio_api\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_prompt\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Provide contextually aware fallback responses based on user data and prompt analysis.\\n        Now actually analyzes user's check-in data for meaningful responses.\",\n          \"name\": \"_get_contextual_fallback\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_prompt\"\n          ],\n          \"docstring\": \"Legacy fallback method for backwards compatibility.\",\n          \"name\": \"_get_fallback_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Provide fallback personalized messages when AI model is not available.\",\n          \"name\": \"_get_fallback_personalized_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_prompt\",\n            \"context\"\n          ],\n          \"docstring\": \"Create optimized messages array for LM Studio API.\",\n          \"name\": \"_optimize_prompt\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"user_prompt\"\n          ],\n          \"docstring\": \"Create a comprehensive context prompt with all user data for LM Studio.\",\n          \"name\": \"_create_comprehensive_context_prompt\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_prompt\"\n          ],\n          \"docstring\": \"Detect whether the prompt is a command or a chat query.\",\n          \"name\": \"_detect_mode\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_prompt\"\n          ],\n          \"docstring\": \"Create a prompt instructing the model to return strict JSON.\",\n          \"name\": \"_create_command_parsing_prompt\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_prompt\"\n          ],\n          \"docstring\": \"Create a prompt instructing the model to return strict JSON and ask for clarification if ambiguous.\",\n          \"name\": \"_create_command_parsing_with_clarification_prompt\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_prompt\",\n            \"timeout\",\n            \"user_id\",\n            \"mode\"\n          ],\n          \"docstring\": \"Generate a basic AI response from user_prompt, using LM Studio API.\\n        Uses adaptive timeout to prevent blocking for too long with improved performance optimizations.\",\n          \"name\": \"generate_response\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Check if the AI model is available and functional.\",\n          \"name\": \"is_ai_available\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Reload the system prompt from file (useful for development and testing).\",\n          \"name\": \"reload_system_prompt\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test the system prompt integration and return status information.\",\n          \"name\": \"test_system_prompt_integration\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get detailed status information about the AI system.\",\n          \"name\": \"get_ai_status\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"timeout\"\n          ],\n          \"docstring\": \"Generate a personalized message by examining the user's recent responses\\n        (check-in data). Uses longer timeout since this is not real-time.\",\n          \"name\": \"generate_personalized_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_prompt\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Generate a quick response for real-time chat (Discord, etc.).\\n        Uses shorter timeout optimized for responsiveness.\",\n          \"name\": \"generate_quick_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"user_prompt\",\n            \"timeout\"\n          ],\n          \"docstring\": \"Generate a context-aware response using comprehensive user data.\\n        Integrates with existing UserContext and UserPreferences systems.\",\n          \"name\": \"generate_contextual_response\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Detect if system is resource-constrained.\",\n          \"name\": \"_detect_resource_constraints\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"text\",\n            \"max_chars\",\n            \"max_words\"\n          ],\n          \"docstring\": \"Smartly truncate response to avoid mid-sentence cuts.\\n        Supports both character and word limits.\",\n          \"name\": \"_smart_truncate_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"response\"\n          ],\n          \"docstring\": \"Enhance response to ensure good conversational engagement.\\n        Adds engagement prompts if the response doesn't already have them.\",\n          \"name\": \"_enhance_conversational_engagement\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"base_timeout\"\n          ],\n          \"docstring\": \"Get adaptive timeout based on system resources.\",\n          \"name\": \"_get_adaptive_timeout\"\n        }\n      ]\n    },\n    \"ai/context_builder.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Structured context data for AI interactions\",\n          \"methods\": [\n            \"__post_init__\"\n          ],\n          \"name\": \"ContextData\"\n        },\n        {\n          \"docstring\": \"Analysis results from context data\",\n          \"methods\": [\n            \"__post_init__\"\n          ],\n          \"name\": \"ContextAnalysis\"\n        },\n        {\n          \"docstring\": \"Builds comprehensive context for AI interactions\",\n          \"methods\": [\n            \"__init__\",\n            \"build_user_context\",\n            \"analyze_context\",\n            \"_determine_trend\",\n            \"_calculate_wellness_score\",\n            \"_generate_insights\",\n            \"create_context_prompt\",\n            \"create_task_context\",\n            \"create_checkin_context\"\n          ],\n          \"name\": \"ContextBuilder\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Get the global context builder instance\",\n          \"name\": \"get_context_builder\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Post-initialization setup\",\n          \"name\": \"__post_init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Post-initialization setup\",\n          \"name\": \"__post_init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the context builder\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"include_conversation_history\"\n          ],\n          \"docstring\": \"Build comprehensive context for a user\\n        \\n        Args:\\n            user_id: User ID to build context for\\n            include_conversation_history: Whether to include conversation history\\n            \\n        Returns:\\n            ContextData object with all available context\",\n          \"name\": \"build_user_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"context_data\"\n          ],\n          \"docstring\": \"Analyze context data to extract insights\\n        \\n        Args:\\n            context_data: Context data to analyze\\n            \\n        Returns:\\n            ContextAnalysis with insights and trends\",\n          \"name\": \"analyze_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"values\"\n          ],\n          \"docstring\": \"Determine trend from a list of values\",\n          \"name\": \"_determine_trend\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"breakfast_rate\",\n            \"avg_mood\",\n            \"avg_energy\",\n            \"teeth_brushing_rate\"\n          ],\n          \"docstring\": \"Calculate overall wellness score (0-100)\",\n          \"name\": \"_calculate_wellness_score\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"breakfast_rate\",\n            \"avg_mood\",\n            \"avg_energy\",\n            \"teeth_brushing_rate\",\n            \"mood_trend\",\n            \"energy_trend\"\n          ],\n          \"docstring\": \"Generate insights from analyzed data\",\n          \"name\": \"_generate_insights\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"context_data\",\n            \"analysis\"\n          ],\n          \"docstring\": \"Create a context prompt string for AI interactions\\n        \\n        Args:\\n            context_data: User context data\\n            analysis: Optional pre-computed analysis\\n            \\n        Returns:\\n            Formatted context prompt string\",\n          \"name\": \"create_context_prompt\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"task_description\"\n          ],\n          \"docstring\": \"Create context specifically for task-related interactions\\n        \\n        Args:\\n            user_id: User ID\\n            task_description: Description of the task\\n            \\n        Returns:\\n            Task-specific context string\",\n          \"name\": \"create_task_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"checkin_type\"\n          ],\n          \"docstring\": \"Create context specifically for check-in interactions\\n        \\n        Args:\\n            user_id: User ID\\n            checkin_type: Type of check-in (daily, weekly, etc.)\\n            \\n        Returns:\\n            Check-in specific context string\",\n          \"name\": \"create_checkin_context\"\n        }\n      ]\n    },\n    \"ai/conversation_history.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"A single message in a conversation\",\n          \"methods\": [\n            \"__post_init__\"\n          ],\n          \"name\": \"ConversationMessage\"\n        },\n        {\n          \"docstring\": \"A conversation session with multiple messages\",\n          \"methods\": [\n            \"__post_init__\"\n          ],\n          \"name\": \"ConversationSession\"\n        },\n        {\n          \"docstring\": \"Manages conversation history for AI interactions\",\n          \"methods\": [\n            \"__init__\",\n            \"start_session\",\n            \"end_session\",\n            \"add_message\",\n            \"get_history\",\n            \"get_recent_messages\",\n            \"get_active_session\",\n            \"get_session_messages\",\n            \"clear_history\",\n            \"delete_session\",\n            \"get_conversation_summary\",\n            \"_cleanup_old_sessions\",\n            \"get_statistics\"\n          ],\n          \"name\": \"ConversationHistory\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Get the global conversation history instance\",\n          \"name\": \"get_conversation_history\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Post-initialization setup\",\n          \"name\": \"__post_init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Post-initialization setup\",\n          \"name\": \"__post_init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"max_sessions_per_user\",\n            \"max_messages_per_session\"\n          ],\n          \"docstring\": \"Initialize the conversation history manager\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"session_id\"\n          ],\n          \"docstring\": \"Start a new conversation session\\n        \\n        Args:\\n            user_id: User ID\\n            session_id: Optional custom session ID\\n            \\n        Returns:\\n            Session ID\",\n          \"name\": \"start_session\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"End the active conversation session for a user\\n        \\n        Args:\\n            user_id: User ID\\n            \\n        Returns:\\n            True if session was ended successfully\",\n          \"name\": \"end_session\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"role\",\n            \"content\",\n            \"metadata\"\n          ],\n          \"docstring\": \"Add a message to the active conversation session\\n        \\n        Args:\\n            user_id: User ID\\n            role: Message role (\\\"user\\\" or \\\"assistant\\\")\\n            content: Message content\\n            metadata: Optional message metadata\\n            \\n        Returns:\\n            True if message was added successfully\",\n          \"name\": \"add_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"limit\",\n            \"include_metadata\"\n          ],\n          \"docstring\": \"Get conversation history for a user\\n        \\n        Args:\\n            user_id: User ID\\n            limit: Maximum number of messages to return\\n            include_metadata: Whether to include message metadata\\n            \\n        Returns:\\n            List of conversation messages\",\n          \"name\": \"get_history\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"count\"\n          ],\n          \"docstring\": \"Get recent conversation messages for a user\\n        \\n        Args:\\n            user_id: User ID\\n            count: Number of recent messages to return\\n            \\n        Returns:\\n            List of recent conversation messages\",\n          \"name\": \"get_recent_messages\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Get the active conversation session for a user\\n        \\n        Args:\\n            user_id: User ID\\n            \\n        Returns:\\n            Active conversation session or None\",\n          \"name\": \"get_active_session\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"session_id\"\n          ],\n          \"docstring\": \"Get all messages from a specific session\\n        \\n        Args:\\n            user_id: User ID\\n            session_id: Session ID\\n            \\n        Returns:\\n            List of messages in the session\",\n          \"name\": \"get_session_messages\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Clear all conversation history for a user\\n        \\n        Args:\\n            user_id: User ID\\n            \\n        Returns:\\n            True if history was cleared successfully\",\n          \"name\": \"clear_history\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"session_id\"\n          ],\n          \"docstring\": \"Delete a specific conversation session\\n        \\n        Args:\\n            user_id: User ID\\n            session_id: Session ID to delete\\n            \\n        Returns:\\n            True if session was deleted successfully\",\n          \"name\": \"delete_session\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"session_id\"\n          ],\n          \"docstring\": \"Get a summary of conversation history\\n        \\n        Args:\\n            user_id: User ID\\n            session_id: Optional specific session ID\\n            \\n        Returns:\\n            Conversation summary string\",\n          \"name\": \"get_conversation_summary\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Clean up old sessions for a user\",\n          \"name\": \"_cleanup_old_sessions\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Get conversation statistics for a user\\n        \\n        Args:\\n            user_id: User ID\\n            \\n        Returns:\\n            Dictionary with conversation statistics\",\n          \"name\": \"get_statistics\"\n        }\n      ]\n    },\n    \"ai/prompt_manager.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Template for AI prompts\",\n          \"methods\": [],\n          \"name\": \"PromptTemplate\"\n        },\n        {\n          \"docstring\": \"Manages AI prompts and templates\",\n          \"methods\": [\n            \"__init__\",\n            \"_load_custom_prompt\",\n            \"get_prompt\",\n            \"get_prompt_template\",\n            \"add_prompt_template\",\n            \"remove_prompt_template\",\n            \"reload_custom_prompt\",\n            \"has_custom_prompt\",\n            \"custom_prompt_length\",\n            \"fallback_prompt_keys\",\n            \"get_available_prompts\",\n            \"create_contextual_prompt\",\n            \"create_task_prompt\",\n            \"create_checkin_prompt\"\n          ],\n          \"name\": \"PromptManager\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Get the global prompt manager instance\",\n          \"name\": \"get_prompt_manager\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the prompt manager\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load the custom system prompt from file\",\n          \"name\": \"_load_custom_prompt\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"prompt_type\"\n          ],\n          \"docstring\": \"Get the appropriate prompt for the given type\\n        \\n        Args:\\n            prompt_type: Type of prompt ('wellness', 'command', 'neurodivergent_support', etc.)\\n            \\n        Returns:\\n            The prompt string\",\n          \"name\": \"get_prompt\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"prompt_type\"\n          ],\n          \"docstring\": \"Get the full prompt template for the given type\\n        \\n        Args:\\n            prompt_type: Type of prompt\\n            \\n        Returns:\\n            PromptTemplate object or None if not found\",\n          \"name\": \"get_prompt_template\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"template\"\n          ],\n          \"docstring\": \"Add a custom prompt template\\n        \\n        Args:\\n            template: PromptTemplate to add\",\n          \"name\": \"add_prompt_template\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"prompt_type\"\n          ],\n          \"docstring\": \"Remove a custom prompt template\\n        \\n        Args:\\n            prompt_type: Name of the template to remove\\n            \\n        Returns:\\n            True if template was removed, False if not found\",\n          \"name\": \"remove_prompt_template\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Reload the custom prompt from file (useful for development)\",\n          \"name\": \"reload_custom_prompt\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Check if a custom prompt is loaded.\",\n          \"name\": \"has_custom_prompt\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the length of the custom prompt.\",\n          \"name\": \"custom_prompt_length\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the keys of available fallback prompts.\",\n          \"name\": \"fallback_prompt_keys\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get all available prompt types and their descriptions\\n        \\n        Returns:\\n            Dictionary mapping prompt types to descriptions\",\n          \"name\": \"get_available_prompts\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"base_prompt\",\n            \"context\",\n            \"user_input\"\n          ],\n          \"docstring\": \"Create a contextual prompt by combining base prompt, context, and user input\\n        \\n        Args:\\n            base_prompt: Base system prompt\\n            context: Contextual information\\n            user_input: User's input\\n            \\n        Returns:\\n            Combined contextual prompt\",\n          \"name\": \"create_contextual_prompt\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"task_description\",\n            \"user_context\"\n          ],\n          \"docstring\": \"Create a task-specific prompt\\n        \\n        Args:\\n            task_description: Description of the task\\n            user_context: User context information\\n            \\n        Returns:\\n            Task-specific prompt\",\n          \"name\": \"create_task_prompt\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"checkin_type\",\n            \"user_context\"\n          ],\n          \"docstring\": \"Create a check-in specific prompt\\n        \\n        Args:\\n            checkin_type: Type of check-in (daily, weekly, etc.)\\n            user_context: User context information\\n            \\n        Returns:\\n            Check-in specific prompt\",\n          \"name\": \"create_checkin_prompt\"\n        }\n      ]\n    },\n    \"communication/command_handlers/analytics_handler.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Handler for analytics and insights interactions\",\n          \"methods\": [\n            \"can_handle\",\n            \"handle\",\n            \"_handle_show_analytics\",\n            \"_handle_mood_trends\",\n            \"_handle_quant_summary\",\n            \"_handle_habit_analysis\",\n            \"_handle_sleep_analysis\",\n            \"_handle_wellness_score\",\n            \"_handle_checkin_history\",\n            \"_handle_checkin_analysis\",\n            \"_handle_completion_rate\",\n            \"_handle_task_analytics\",\n            \"_handle_task_stats\",\n            \"get_help\",\n            \"get_examples\",\n            \"_truncate_response\"\n          ],\n          \"name\": \"AnalyticsHandler\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"intent\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"parsed_command\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show comprehensive analytics overview\",\n          \"name\": \"_handle_show_analytics\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show mood trends analysis\",\n          \"name\": \"_handle_mood_trends\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show per-field quantitative summaries for opted-in fields.\",\n          \"name\": \"_handle_quant_summary\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show habit analysis\",\n          \"name\": \"_handle_habit_analysis\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show sleep analysis\",\n          \"name\": \"_handle_sleep_analysis\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show wellness score\",\n          \"name\": \"_handle_wellness_score\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show check-in history\",\n          \"name\": \"_handle_checkin_history\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show comprehensive check-in response analysis\",\n          \"name\": \"_handle_checkin_analysis\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show completion rate\",\n          \"name\": \"_handle_completion_rate\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show comprehensive task analytics and insights\",\n          \"name\": \"_handle_task_analytics\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show detailed task statistics\",\n          \"name\": \"_handle_task_stats\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_examples\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"response\",\n            \"max_length\"\n          ],\n          \"docstring\": \"Truncate response to fit Discord message limits\",\n          \"name\": \"_truncate_response\"\n        }\n      ]\n    },\n    \"communication/command_handlers/base_handler.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Abstract base class for interaction handlers\",\n          \"methods\": [\n            \"can_handle\",\n            \"handle\",\n            \"get_help\",\n            \"get_examples\"\n          ],\n          \"name\": \"InteractionHandler\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"intent\"\n          ],\n          \"docstring\": \"Check if this handler can handle the given intent\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"parsed_command\"\n          ],\n          \"docstring\": \"Handle the interaction and return a response\",\n          \"name\": \"handle\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get help text for this handler\",\n          \"name\": \"get_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get example commands for this handler\",\n          \"name\": \"get_examples\"\n        }\n      ]\n    },\n    \"communication/command_handlers/checkin_handler.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Handler for check-in interactions\",\n          \"methods\": [\n            \"can_handle\",\n            \"handle\",\n            \"_handle_start_checkin\",\n            \"_handle_continue_checkin\",\n            \"_handle_checkin_status\",\n            \"get_help\",\n            \"get_examples\"\n          ],\n          \"name\": \"CheckinHandler\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"intent\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"parsed_command\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Handle starting a check-in by delegating to conversation manager\",\n          \"name\": \"_handle_start_checkin\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle continuing a check-in\",\n          \"name\": \"_handle_continue_checkin\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Handle check-in status request\",\n          \"name\": \"_handle_checkin_status\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_examples\"\n        }\n      ]\n    },\n    \"communication/command_handlers/interaction_handlers.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Abstract base class for interaction handlers\",\n          \"methods\": [\n            \"can_handle\",\n            \"handle\",\n            \"get_help\",\n            \"get_examples\"\n          ],\n          \"name\": \"InteractionHandler\"\n        },\n        {\n          \"docstring\": \"Handler for task management interactions\",\n          \"methods\": [\n            \"can_handle\",\n            \"handle\",\n            \"_handle_create_task\",\n            \"_handle_create_task__parse_relative_date\",\n            \"_handle_list_tasks\",\n            \"_handle_list_tasks__apply_filters\",\n            \"_handle_list_tasks__no_tasks_response\",\n            \"_handle_list_tasks__sort_tasks\",\n            \"_handle_list_tasks__format_list\",\n            \"_handle_list_tasks__format_due_date\",\n            \"_handle_list_tasks__build_filter_info\",\n            \"_handle_list_tasks__build_response\",\n            \"_handle_list_tasks__generate_suggestions\",\n            \"_handle_list_tasks__get_suggestion\",\n            \"_handle_list_tasks__create_rich_data\",\n            \"_handle_complete_task\",\n            \"_handle_delete_task\",\n            \"_handle_update_task\",\n            \"_handle_task_stats\",\n            \"_handle_complete_task__find_task_by_identifier\",\n            \"_handle_complete_task__find_most_urgent_task\",\n            \"_handle_delete_task__find_task_by_identifier\",\n            \"_handle_update_task__find_task_by_identifier\",\n            \"get_help\",\n            \"get_examples\"\n          ],\n          \"name\": \"TaskManagementHandler\"\n        },\n        {\n          \"docstring\": \"Handler for check-in interactions\",\n          \"methods\": [\n            \"can_handle\",\n            \"handle\",\n            \"_handle_start_checkin\",\n            \"_handle_continue_checkin\",\n            \"_handle_checkin_status\",\n            \"get_help\",\n            \"get_examples\"\n          ],\n          \"name\": \"CheckinHandler\"\n        },\n        {\n          \"docstring\": \"Handler for profile management interactions\",\n          \"methods\": [\n            \"can_handle\",\n            \"handle\",\n            \"_handle_show_profile\",\n            \"_handle_update_profile\",\n            \"_handle_profile_stats\",\n            \"get_help\",\n            \"get_examples\"\n          ],\n          \"name\": \"ProfileHandler\"\n        },\n        {\n          \"docstring\": \"Handler for help and command information\",\n          \"methods\": [\n            \"can_handle\",\n            \"handle\",\n            \"_handle_general_help\",\n            \"_handle_commands_list\",\n            \"_handle_examples\",\n            \"_handle_status\",\n            \"_handle_messages\",\n            \"get_help\",\n            \"get_examples\"\n          ],\n          \"name\": \"HelpHandler\"\n        },\n        {\n          \"docstring\": \"Handler for schedule management interactions\",\n          \"methods\": [\n            \"can_handle\",\n            \"handle\",\n            \"_handle_show_schedule\",\n            \"_handle_update_schedule\",\n            \"_handle_schedule_status\",\n            \"_handle_add_schedule_period\",\n            \"_handle_add_schedule_period__parse_time_format\",\n            \"_handle_edit_schedule_period__parse_time_format\",\n            \"_handle_edit_schedule_period\",\n            \"get_help\",\n            \"get_examples\"\n          ],\n          \"name\": \"ScheduleManagementHandler\"\n        },\n        {\n          \"docstring\": \"Handler for analytics and insights interactions\",\n          \"methods\": [\n            \"can_handle\",\n            \"handle\",\n            \"_handle_show_analytics\",\n            \"_handle_quant_summary\",\n            \"_handle_mood_trends\",\n            \"_handle_habit_analysis\",\n            \"_handle_sleep_analysis\",\n            \"_handle_wellness_score\",\n            \"_handle_checkin_history\",\n            \"_handle_completion_rate\",\n            \"get_help\",\n            \"get_examples\"\n          ],\n          \"name\": \"AnalyticsHandler\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"intent\"\n          ],\n          \"docstring\": \"Get the appropriate handler for an intent\",\n          \"name\": \"get_interaction_handler\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Get all registered handlers\",\n          \"name\": \"get_all_handlers\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"intent\"\n          ],\n          \"docstring\": \"Check if this handler can handle the given intent\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"parsed_command\"\n          ],\n          \"docstring\": \"Handle the interaction and return a response\",\n          \"name\": \"handle\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get help text for this handler\",\n          \"name\": \"get_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get example commands for this handler\",\n          \"name\": \"get_examples\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"intent\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"parsed_command\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle task creation\",\n          \"name\": \"_handle_create_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"date_str\"\n          ],\n          \"docstring\": \"Convert relative date strings to proper dates\",\n          \"name\": \"_handle_create_task__parse_relative_date\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle task listing with enhanced filtering and details\",\n          \"name\": \"_handle_list_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"tasks\",\n            \"filter_type\",\n            \"priority_filter\",\n            \"tag_filter\"\n          ],\n          \"docstring\": \"Apply filters to tasks and return filtered list.\",\n          \"name\": \"_handle_list_tasks__apply_filters\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"filter_type\",\n            \"priority_filter\",\n            \"tag_filter\"\n          ],\n          \"docstring\": \"Get appropriate response when no tasks match filters.\",\n          \"name\": \"_handle_list_tasks__no_tasks_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tasks\"\n          ],\n          \"docstring\": \"Sort tasks by priority and due date.\",\n          \"name\": \"_handle_list_tasks__sort_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tasks\"\n          ],\n          \"docstring\": \"Format task list with enhanced details.\",\n          \"name\": \"_handle_list_tasks__format_list\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"due_date\"\n          ],\n          \"docstring\": \"Format due date with urgency indicator.\",\n          \"name\": \"_handle_list_tasks__format_due_date\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"filter_type\",\n            \"priority_filter\",\n            \"tag_filter\"\n          ],\n          \"docstring\": \"Build filter information list.\",\n          \"name\": \"_handle_list_tasks__build_filter_info\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"task_list\",\n            \"filter_info\",\n            \"total_tasks\"\n          ],\n          \"docstring\": \"Build the main task list response.\",\n          \"name\": \"_handle_list_tasks__build_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tasks\",\n            \"filter_info\"\n          ],\n          \"docstring\": \"Generate contextual suggestions based on current state.\",\n          \"name\": \"_handle_list_tasks__generate_suggestions\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tasks\"\n          ],\n          \"docstring\": \"Get contextual show suggestion based on task analysis.\",\n          \"name\": \"_handle_list_tasks__get_suggestion\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"filter_info\",\n            \"tasks\"\n          ],\n          \"docstring\": \"Create rich data for Discord embeds.\",\n          \"name\": \"_handle_list_tasks__create_rich_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle task completion\",\n          \"name\": \"_handle_complete_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle task deletion\",\n          \"name\": \"_handle_delete_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle task updates\",\n          \"name\": \"_handle_update_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle task statistics with dynamic time periods\",\n          \"name\": \"_handle_task_stats\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tasks\",\n            \"identifier\"\n          ],\n          \"docstring\": \"Find a task by number, name, or task_id\",\n          \"name\": \"_handle_complete_task__find_task_by_identifier\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tasks\"\n          ],\n          \"docstring\": \"Find the most urgent task based on priority and due date\",\n          \"name\": \"_handle_complete_task__find_most_urgent_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tasks\",\n            \"identifier\"\n          ],\n          \"docstring\": \"Find a task by number, name, or task_id\",\n          \"name\": \"_handle_delete_task__find_task_by_identifier\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tasks\",\n            \"identifier\"\n          ],\n          \"docstring\": \"Find a task by number, name, or task_id\",\n          \"name\": \"_handle_update_task__find_task_by_identifier\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_examples\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"intent\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"parsed_command\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Handle starting a check-in by delegating to conversation manager\",\n          \"name\": \"_handle_start_checkin\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle continuing a check-in\",\n          \"name\": \"_handle_continue_checkin\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Handle check-in status request\",\n          \"name\": \"_handle_checkin_status\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_examples\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"intent\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"parsed_command\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Handle showing user profile with comprehensive personalization data\",\n          \"name\": \"_handle_show_profile\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle comprehensive profile updates\",\n          \"name\": \"_handle_update_profile\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Handle profile statistics\",\n          \"name\": \"_handle_profile_stats\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_examples\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"intent\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"parsed_command\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle general help request\",\n          \"name\": \"_handle_general_help\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Handle commands list request\",\n          \"name\": \"_handle_commands_list\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle examples request\",\n          \"name\": \"_handle_examples\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Handle status request with detailed system information\",\n          \"name\": \"_handle_status\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Handle messages request with message history and settings\",\n          \"name\": \"_handle_messages\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_examples\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"intent\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"parsed_command\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show schedule for a specific category or all categories\",\n          \"name\": \"_handle_show_schedule\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Update schedule settings\",\n          \"name\": \"_handle_update_schedule\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show status of schedules\",\n          \"name\": \"_handle_schedule_status\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Add a new schedule period with enhanced options\",\n          \"name\": \"_handle_add_schedule_period\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"time_str\"\n          ],\n          \"docstring\": \"Parse various time formats and convert to standard format\",\n          \"name\": \"_handle_add_schedule_period__parse_time_format\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"time_str\"\n          ],\n          \"docstring\": \"Parse various time formats and convert to standard format\",\n          \"name\": \"_handle_edit_schedule_period__parse_time_format\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Edit an existing schedule period with enhanced options\",\n          \"name\": \"_handle_edit_schedule_period\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_examples\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"intent\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"parsed_command\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show comprehensive analytics overview\",\n          \"name\": \"_handle_show_analytics\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show per-field quantitative summaries for opted-in fields.\",\n          \"name\": \"_handle_quant_summary\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show mood trends analysis\",\n          \"name\": \"_handle_mood_trends\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show habit analysis\",\n          \"name\": \"_handle_habit_analysis\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show sleep analysis\",\n          \"name\": \"_handle_sleep_analysis\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show wellness score\",\n          \"name\": \"_handle_wellness_score\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show check-in history\",\n          \"name\": \"_handle_checkin_history\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show completion rate\",\n          \"name\": \"_handle_completion_rate\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_examples\"\n        }\n      ]\n    },\n    \"communication/command_handlers/profile_handler.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Handler for profile management interactions\",\n          \"methods\": [\n            \"can_handle\",\n            \"handle\",\n            \"_handle_show_profile\",\n            \"_handle_update_profile\",\n            \"_handle_profile_stats\",\n            \"_format_profile_text\",\n            \"get_help\",\n            \"get_examples\"\n          ],\n          \"name\": \"ProfileHandler\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"intent\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"parsed_command\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Handle showing user profile with comprehensive personalization data\",\n          \"name\": \"_handle_show_profile\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle comprehensive profile updates\",\n          \"name\": \"_handle_update_profile\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Handle profile statistics\",\n          \"name\": \"_handle_profile_stats\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"account_data\",\n            \"context_data\",\n            \"preferences_data\"\n          ],\n          \"docstring\": \"Create a clean, readable profile string for channels like Discord.\",\n          \"name\": \"_format_profile_text\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_examples\"\n        }\n      ]\n    },\n    \"communication/command_handlers/schedule_handler.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Handler for schedule management interactions\",\n          \"methods\": [\n            \"can_handle\",\n            \"handle\",\n            \"_handle_show_schedule\",\n            \"_handle_update_schedule\",\n            \"_handle_schedule_status\",\n            \"_handle_add_schedule_period\",\n            \"_handle_add_schedule_period__parse_time_format\",\n            \"_handle_edit_schedule_period__parse_time_format\",\n            \"_handle_edit_schedule_period\",\n            \"get_help\",\n            \"get_examples\"\n          ],\n          \"name\": \"ScheduleManagementHandler\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"intent\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"parsed_command\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show schedule for a specific category or all categories\",\n          \"name\": \"_handle_show_schedule\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Update schedule settings\",\n          \"name\": \"_handle_update_schedule\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Show status of schedules\",\n          \"name\": \"_handle_schedule_status\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Add a new schedule period with enhanced options\",\n          \"name\": \"_handle_add_schedule_period\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"time_str\"\n          ],\n          \"docstring\": \"Parse various time formats and convert to standard format\",\n          \"name\": \"_handle_add_schedule_period__parse_time_format\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"time_str\"\n          ],\n          \"docstring\": \"Parse various time formats and convert to standard format\",\n          \"name\": \"_handle_edit_schedule_period__parse_time_format\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Edit an existing schedule period with enhanced options\",\n          \"name\": \"_handle_edit_schedule_period\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_examples\"\n        }\n      ]\n    },\n    \"communication/command_handlers/task_handler.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Handler for task management interactions\",\n          \"methods\": [\n            \"can_handle\",\n            \"handle\",\n            \"_handle_create_task\",\n            \"_handle_create_task__parse_relative_date\",\n            \"_handle_list_tasks\",\n            \"_handle_list_tasks__apply_filters\",\n            \"_handle_list_tasks__no_tasks_response\",\n            \"_handle_list_tasks__sort_tasks\",\n            \"_handle_list_tasks__format_list\",\n            \"_handle_list_tasks__format_due_date\",\n            \"_handle_list_tasks__build_filter_info\",\n            \"_handle_list_tasks__build_response\",\n            \"_handle_list_tasks__generate_suggestions\",\n            \"_handle_list_tasks__get_suggestion\",\n            \"_handle_list_tasks__create_rich_data\",\n            \"_handle_complete_task\",\n            \"_handle_delete_task\",\n            \"_handle_update_task\",\n            \"_handle_task_stats\",\n            \"_handle_complete_task__find_task_by_identifier\",\n            \"_handle_delete_task__find_task_by_identifier\",\n            \"_handle_update_task__find_task_by_identifier\",\n            \"get_help\",\n            \"get_examples\"\n          ],\n          \"name\": \"TaskManagementHandler\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"intent\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"parsed_command\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle task creation\",\n          \"name\": \"_handle_create_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"date_str\"\n          ],\n          \"docstring\": \"Convert relative date strings to proper dates\",\n          \"name\": \"_handle_create_task__parse_relative_date\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle task listing with enhanced filtering and details\",\n          \"name\": \"_handle_list_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"tasks\",\n            \"filter_type\",\n            \"priority_filter\",\n            \"tag_filter\"\n          ],\n          \"docstring\": \"Apply filters to tasks and return filtered list.\",\n          \"name\": \"_handle_list_tasks__apply_filters\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"filter_type\",\n            \"priority_filter\",\n            \"tag_filter\"\n          ],\n          \"docstring\": \"Get appropriate response when no tasks match filters.\",\n          \"name\": \"_handle_list_tasks__no_tasks_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tasks\"\n          ],\n          \"docstring\": \"Sort tasks by priority and due date.\",\n          \"name\": \"_handle_list_tasks__sort_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tasks\"\n          ],\n          \"docstring\": \"Format task list with enhanced details.\",\n          \"name\": \"_handle_list_tasks__format_list\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"due_date\"\n          ],\n          \"docstring\": \"Format due date with urgency indicator.\",\n          \"name\": \"_handle_list_tasks__format_due_date\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"filter_type\",\n            \"priority_filter\",\n            \"tag_filter\"\n          ],\n          \"docstring\": \"Build filter information list.\",\n          \"name\": \"_handle_list_tasks__build_filter_info\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"task_list\",\n            \"filter_info\",\n            \"total_tasks\"\n          ],\n          \"docstring\": \"Build the main task list response.\",\n          \"name\": \"_handle_list_tasks__build_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tasks\",\n            \"filter_info\"\n          ],\n          \"docstring\": \"Generate contextual suggestions based on current state.\",\n          \"name\": \"_handle_list_tasks__generate_suggestions\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tasks\"\n          ],\n          \"docstring\": \"Get contextual show suggestion based on task analysis.\",\n          \"name\": \"_handle_list_tasks__get_suggestion\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"filter_info\",\n            \"tasks\"\n          ],\n          \"docstring\": \"Create rich data for Discord embeds.\",\n          \"name\": \"_handle_list_tasks__create_rich_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle task completion\",\n          \"name\": \"_handle_complete_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle task deletion\",\n          \"name\": \"_handle_delete_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle task updates\",\n          \"name\": \"_handle_update_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"entities\"\n          ],\n          \"docstring\": \"Handle task statistics with dynamic time periods\",\n          \"name\": \"_handle_task_stats\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tasks\",\n            \"identifier\"\n          ],\n          \"docstring\": \"Find a task by number, name, or task_id\",\n          \"name\": \"_handle_complete_task__find_task_by_identifier\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tasks\",\n            \"identifier\"\n          ],\n          \"docstring\": \"Find a task by number, name, or task_id\",\n          \"name\": \"_handle_delete_task__find_task_by_identifier\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tasks\",\n            \"identifier\"\n          ],\n          \"docstring\": \"Find a task by number, name, or task_id\",\n          \"name\": \"_handle_update_task__find_task_by_identifier\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_examples\"\n        }\n      ]\n    },\n    \"communication/communication_channels/base/base_channel.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [],\n          \"name\": \"ChannelStatus\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [],\n          \"name\": \"ChannelType\"\n        },\n        {\n          \"docstring\": \"Configuration for communication channels\",\n          \"methods\": [\n            \"__post_init__\"\n          ],\n          \"name\": \"ChannelConfig\"\n        },\n        {\n          \"docstring\": \"Abstract base class for all communication channels\",\n          \"methods\": [\n            \"__init__\",\n            \"channel_type\",\n            \"is_ready\",\n            \"get_status\",\n            \"get_error\",\n            \"_set_status\"\n          ],\n          \"name\": \"BaseChannel\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Post-initialization setup.\",\n          \"name\": \"__post_init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"config\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Return whether this channel is sync or async\",\n          \"name\": \"channel_type\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Check if channel is ready to send/receive messages\",\n          \"name\": \"is_ready\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get current channel status\",\n          \"name\": \"get_status\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get last error message\",\n          \"name\": \"get_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"status\",\n            \"error_message\"\n          ],\n          \"docstring\": \"Internal method to update status\",\n          \"name\": \"_set_status\"\n        }\n      ]\n    },\n    \"communication/communication_channels/base/command_registry.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Definition of a command that can be registered\",\n          \"methods\": [\n            \"__post_init__\"\n          ],\n          \"name\": \"CommandDefinition\"\n        },\n        {\n          \"docstring\": \"Abstract base class for command registration utilities\",\n          \"methods\": [\n            \"__init__\",\n            \"register_command\",\n            \"unregister_command\",\n            \"get_command\",\n            \"get_all_commands\",\n            \"get_enabled_commands\",\n            \"is_command_registered\",\n            \"register_with_platform\",\n            \"unregister_from_platform\"\n          ],\n          \"name\": \"CommandRegistry\"\n        },\n        {\n          \"docstring\": \"Discord-specific command registry\",\n          \"methods\": [\n            \"__init__\",\n            \"register_with_platform\",\n            \"unregister_from_platform\"\n          ],\n          \"name\": \"DiscordCommandRegistry\"\n        },\n        {\n          \"docstring\": \"Email-specific command registry\",\n          \"methods\": [\n            \"register_with_platform\",\n            \"unregister_from_platform\"\n          ],\n          \"name\": \"EmailCommandRegistry\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"channel_type\",\n            \"platform_instance\"\n          ],\n          \"docstring\": \"Get the appropriate command registry for a channel type\",\n          \"name\": \"get_command_registry\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Post-initialization setup\",\n          \"name\": \"__post_init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the command registry\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"command_def\"\n          ],\n          \"docstring\": \"Register a command definition\",\n          \"name\": \"register_command\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"command_name\"\n          ],\n          \"docstring\": \"Unregister a command\",\n          \"name\": \"unregister_command\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"command_name\"\n          ],\n          \"docstring\": \"Get a command by name or alias\",\n          \"name\": \"get_command\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get all registered commands\",\n          \"name\": \"get_all_commands\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get all enabled commands\",\n          \"name\": \"get_enabled_commands\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"command_name\"\n          ],\n          \"docstring\": \"Check if a command is registered\",\n          \"name\": \"is_command_registered\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"command_def\"\n          ],\n          \"docstring\": \"Register command with the specific platform (Discord, etc.)\",\n          \"name\": \"register_with_platform\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"command_name\"\n          ],\n          \"docstring\": \"Unregister command from the specific platform\",\n          \"name\": \"unregister_from_platform\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"bot\"\n          ],\n          \"docstring\": \"Initialize Discord command registry\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"command_def\"\n          ],\n          \"docstring\": \"Register command with Discord\",\n          \"name\": \"register_with_platform\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"command_name\"\n          ],\n          \"docstring\": \"Unregister command from Discord\",\n          \"name\": \"unregister_from_platform\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"command_def\"\n          ],\n          \"docstring\": \"Register command with email system\",\n          \"name\": \"register_with_platform\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"command_name\"\n          ],\n          \"docstring\": \"Unregister command from email system\",\n          \"name\": \"unregister_from_platform\"\n        }\n      ]\n    },\n    \"communication/communication_channels/base/message_formatter.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Abstract base class for message formatting utilities\",\n          \"methods\": [\n            \"format_message\",\n            \"create_rich_content\",\n            \"create_interactive_elements\"\n          ],\n          \"name\": \"MessageFormatter\"\n        },\n        {\n          \"docstring\": \"Simple text-based message formatter for plain text channels\",\n          \"methods\": [\n            \"format_message\",\n            \"create_rich_content\",\n            \"create_interactive_elements\"\n          ],\n          \"name\": \"TextMessageFormatter\"\n        },\n        {\n          \"docstring\": \"Email-specific message formatter\",\n          \"methods\": [\n            \"format_message\",\n            \"create_rich_content\",\n            \"create_interactive_elements\"\n          ],\n          \"name\": \"EmailMessageFormatter\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"channel_type\"\n          ],\n          \"docstring\": \"Get the appropriate message formatter for a channel type\",\n          \"name\": \"get_message_formatter\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"rich_data\"\n          ],\n          \"docstring\": \"Format a message with optional rich data\",\n          \"name\": \"format_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"rich_data\"\n          ],\n          \"docstring\": \"Create rich content (embed, card, etc.) from rich data\",\n          \"name\": \"create_rich_content\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"suggestions\"\n          ],\n          \"docstring\": \"Create interactive elements (buttons, menus, etc.) from suggestions\",\n          \"name\": \"create_interactive_elements\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"rich_data\"\n          ],\n          \"docstring\": \"Format a message as plain text\",\n          \"name\": \"format_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"rich_data\"\n          ],\n          \"docstring\": \"Create rich text content\",\n          \"name\": \"create_rich_content\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"suggestions\"\n          ],\n          \"docstring\": \"Create text-based interactive elements\",\n          \"name\": \"create_interactive_elements\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"rich_data\"\n          ],\n          \"docstring\": \"Format a message for email\",\n          \"name\": \"format_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"rich_data\"\n          ],\n          \"docstring\": \"Create rich email content\",\n          \"name\": \"create_rich_content\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"suggestions\"\n          ],\n          \"docstring\": \"Create email-friendly interactive elements\",\n          \"name\": \"create_interactive_elements\"\n        }\n      ]\n    },\n    \"communication/communication_channels/base/rich_formatter.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Abstract base class for rich formatting utilities\",\n          \"methods\": [\n            \"create_embed\",\n            \"create_interactive_view\",\n            \"get_color_for_type\"\n          ],\n          \"name\": \"RichFormatter\"\n        },\n        {\n          \"docstring\": \"Discord-specific rich formatting utilities\",\n          \"methods\": [\n            \"__init__\",\n            \"create_embed\",\n            \"create_interactive_view\",\n            \"get_color_for_type\"\n          ],\n          \"name\": \"DiscordRichFormatter\"\n        },\n        {\n          \"docstring\": \"Email-specific rich formatting utilities\",\n          \"methods\": [\n            \"create_embed\",\n            \"create_interactive_view\",\n            \"get_color_for_type\"\n          ],\n          \"name\": \"EmailRichFormatter\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"channel_type\"\n          ],\n          \"docstring\": \"Get the appropriate rich formatter for a channel type\",\n          \"name\": \"get_rich_formatter\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"rich_data\"\n          ],\n          \"docstring\": \"Create a rich embed/card from rich data\",\n          \"name\": \"create_embed\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"suggestions\"\n          ],\n          \"docstring\": \"Create interactive view with buttons/menus from suggestions\",\n          \"name\": \"create_interactive_view\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"content_type\"\n          ],\n          \"docstring\": \"Get appropriate color for content type\",\n          \"name\": \"get_color_for_type\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize Discord formatter\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"rich_data\"\n          ],\n          \"docstring\": \"Create a Discord embed from rich data\",\n          \"name\": \"create_embed\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"suggestions\"\n          ],\n          \"docstring\": \"Create a Discord view with buttons from suggestions\",\n          \"name\": \"create_interactive_view\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"content_type\"\n          ],\n          \"docstring\": \"Get Discord color for content type\",\n          \"name\": \"get_color_for_type\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"rich_data\"\n          ],\n          \"docstring\": \"Create rich HTML content for email\",\n          \"name\": \"create_embed\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"suggestions\"\n          ],\n          \"docstring\": \"Create HTML buttons for email\",\n          \"name\": \"create_interactive_view\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"content_type\"\n          ],\n          \"docstring\": \"Get HTML color for content type\",\n          \"name\": \"get_color_for_type\"\n        }\n      ]\n    },\n    \"communication/communication_channels/discord/api_client.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Data structure for Discord messages\",\n          \"methods\": [],\n          \"name\": \"MessageData\"\n        },\n        {\n          \"docstring\": \"Options for sending messages\",\n          \"methods\": [],\n          \"name\": \"SendMessageOptions\"\n        },\n        {\n          \"docstring\": \"Discord API client for handling Discord-specific operations\",\n          \"methods\": [\n            \"__init__\",\n            \"is_connected\",\n            \"get_connection_latency\"\n          ],\n          \"name\": \"DiscordAPIClient\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"bot\"\n          ],\n          \"docstring\": \"Get a Discord API client instance\",\n          \"name\": \"get_discord_api_client\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"bot\"\n          ],\n          \"docstring\": \"Initialize the Discord API client\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Check if the bot is connected to Discord\",\n          \"name\": \"is_connected\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the bot's connection latency\",\n          \"name\": \"get_connection_latency\"\n        }\n      ]\n    },\n    \"communication/communication_channels/discord/bot.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Detailed Discord connection status for better error reporting\",\n          \"methods\": [],\n          \"name\": \"DiscordConnectionStatus\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__init__\",\n            \"channel_type\",\n            \"_check_dns_resolution\",\n            \"_check_network_connectivity\",\n            \"_wait_for_network_recovery\",\n            \"_get_detailed_connection_status\",\n            \"_shared__update_connection_status\",\n            \"_check_network_health\",\n            \"_should_attempt_reconnection\",\n            \"initialize__run_bot_in_thread\",\n            \"initialize__register_events\",\n            \"initialize__register_commands\",\n            \"_create_discord_embed\",\n            \"_create_action_row\",\n            \"get_health_status\",\n            \"get_connection_status_summary\",\n            \"is_actually_connected\",\n            \"can_send_messages\"\n          ],\n          \"name\": \"DiscordBot\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"config\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the channel type for Discord bot.\\n        \\n        Returns:\\n            ChannelType.ASYNC: Discord bot operates asynchronously\",\n          \"name\": \"channel_type\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"hostname\"\n          ],\n          \"docstring\": \"Check DNS resolution for a hostname with enhanced fallback and error reporting\",\n          \"name\": \"_check_dns_resolution\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"hostname\",\n            \"port\"\n          ],\n          \"docstring\": \"Check if network connectivity is available to Discord servers with enhanced fallback and timeout handling\",\n          \"name\": \"_check_network_connectivity\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"max_wait\"\n          ],\n          \"docstring\": \"Wait for network connectivity to recover with enhanced monitoring and early exit\",\n          \"name\": \"_wait_for_network_recovery\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get detailed connection status information\",\n          \"name\": \"_get_detailed_connection_status\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"status\",\n            \"error_info\"\n          ],\n          \"docstring\": \"Update connection status with detailed error information\",\n          \"name\": \"_shared__update_connection_status\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Comprehensive network health check with detailed reporting\",\n          \"name\": \"_check_network_health\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Determine if reconnection should be attempted based on various factors\",\n          \"name\": \"_should_attempt_reconnection\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Run Discord bot in completely isolated thread with its own event loop\",\n          \"name\": \"initialize__run_bot_in_thread\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Register Discord event handlers\",\n          \"name\": \"initialize__register_events\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Register Discord commands\",\n          \"name\": \"initialize__register_commands\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"rich_data\"\n          ],\n          \"docstring\": \"Create a Discord embed from rich data\",\n          \"name\": \"_create_discord_embed\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"suggestions\"\n          ],\n          \"docstring\": \"Create a Discord view with buttons from suggestions\",\n          \"name\": \"_create_action_row\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get comprehensive health status information\",\n          \"name\": \"get_health_status\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get a human-readable connection status summary\",\n          \"name\": \"get_connection_status_summary\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Check if the Discord bot is actually connected, regardless of initialization status\",\n          \"name\": \"is_actually_connected\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Check if the Discord bot can actually send messages\",\n          \"name\": \"can_send_messages\"\n        }\n      ]\n    },\n    \"communication/communication_channels/discord/event_handler.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Types of Discord events\",\n          \"methods\": [],\n          \"name\": \"EventType\"\n        },\n        {\n          \"docstring\": \"Context for Discord events\",\n          \"methods\": [\n            \"__post_init__\"\n          ],\n          \"name\": \"EventContext\"\n        },\n        {\n          \"docstring\": \"Handles Discord events and routes them to appropriate handlers\",\n          \"methods\": [\n            \"__init__\",\n            \"_register_default_handlers\",\n            \"add_message_handler\",\n            \"add_ready_handler\",\n            \"add_disconnect_handler\",\n            \"add_error_handler\",\n            \"register_events\"\n          ],\n          \"name\": \"DiscordEventHandler\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"bot\"\n          ],\n          \"docstring\": \"Get a Discord event handler instance\",\n          \"name\": \"get_discord_event_handler\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Post-initialization setup\",\n          \"name\": \"__post_init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"bot\"\n          ],\n          \"docstring\": \"Initialize the Discord event handler\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Register default event handlers\",\n          \"name\": \"_register_default_handlers\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"handler\"\n          ],\n          \"docstring\": \"Add a custom message handler\",\n          \"name\": \"add_message_handler\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"handler\"\n          ],\n          \"docstring\": \"Add a custom ready handler\",\n          \"name\": \"add_ready_handler\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"handler\"\n          ],\n          \"docstring\": \"Add a custom disconnect handler\",\n          \"name\": \"add_disconnect_handler\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"handler\"\n          ],\n          \"docstring\": \"Add a custom error handler\",\n          \"name\": \"add_error_handler\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"bot\"\n          ],\n          \"docstring\": \"Register all event handlers with a Discord bot\",\n          \"name\": \"register_events\"\n        }\n      ]\n    },\n    \"communication/communication_channels/email/bot.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Custom exception for email bot-related errors.\",\n          \"methods\": [],\n          \"name\": \"EmailBotError\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__init__\",\n            \"channel_type\",\n            \"initialize__test_smtp_connection\",\n            \"initialize__test_imap_connection\",\n            \"send_message__send_email_sync\",\n            \"_receive_emails_sync\"\n          ],\n          \"name\": \"EmailBot\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"config\"\n          ],\n          \"docstring\": \"Initialize the EmailBot with configuration.\\n        \\n        Args:\\n            config: Channel configuration object. If None, creates default config\\n                   with email-specific settings (max_retries=3, retry_delay=1.0,\\n                   backoff_multiplier=2.0)\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the channel type for email bot.\\n        \\n        Returns:\\n            ChannelType.SYNC: Email operations are synchronous\",\n          \"name\": \"channel_type\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test SMTP connection synchronously\",\n          \"name\": \"initialize__test_smtp_connection\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test IMAP connection synchronously\",\n          \"name\": \"initialize__test_imap_connection\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"recipient\",\n            \"message\",\n            \"kwargs\"\n          ],\n          \"docstring\": \"Send email synchronously\",\n          \"name\": \"send_message__send_email_sync\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Receive emails synchronously\",\n          \"name\": \"_receive_emails_sync\"\n        }\n      ]\n    },\n    \"communication/core/channel_monitor.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Monitors channel health and manages automatic restart logic\",\n          \"methods\": [\n            \"__init__\",\n            \"set_channels\",\n            \"start_restart_monitor\",\n            \"stop_restart_monitor\",\n            \"_restart_monitor_loop\",\n            \"_check_and_restart_stuck_channels\",\n            \"_attempt_channel_restart\",\n            \"record_channel_failure\",\n            \"record_channel_success\",\n            \"get_channel_health_status\",\n            \"reset_channel_failures\"\n          ],\n          \"name\": \"ChannelMonitor\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the channel monitor\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"channels_dict\"\n          ],\n          \"docstring\": \"Set the channels dictionary for monitoring\",\n          \"name\": \"set_channels\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Start the automatic restart monitor thread\",\n          \"name\": \"start_restart_monitor\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Stop the automatic restart monitor thread\",\n          \"name\": \"stop_restart_monitor\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Main restart monitor loop that checks channel health\",\n          \"name\": \"_restart_monitor_loop\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Check for stuck channels and attempt restarts\",\n          \"name\": \"_check_and_restart_stuck_channels\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"channel_name\"\n          ],\n          \"docstring\": \"Attempt to restart a specific channel\",\n          \"name\": \"_attempt_channel_restart\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"channel_name\"\n          ],\n          \"docstring\": \"Record a failure for a specific channel\",\n          \"name\": \"record_channel_failure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"channel_name\"\n          ],\n          \"docstring\": \"Record a success for a specific channel (resets failure count)\",\n          \"name\": \"record_channel_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get health status for all monitored channels\",\n          \"name\": \"get_channel_health_status\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"channel_name\"\n          ],\n          \"docstring\": \"Reset failure counts for a specific channel or all channels\",\n          \"name\": \"reset_channel_failures\"\n        }\n      ]\n    },\n    \"communication/core/channel_orchestrator.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Custom exception for bot initialization failures.\",\n          \"methods\": [],\n          \"name\": \"BotInitializationError\"\n        },\n        {\n          \"docstring\": \"Custom exception for message sending failures.\",\n          \"methods\": [],\n          \"name\": \"MessageSendError\"\n        },\n        {\n          \"docstring\": \"Manages all communication channels with improved modularity\",\n          \"methods\": [\n            \"__new__\",\n            \"__init__\",\n            \"__init____setup_event_loop\",\n            \"send_message_sync__run_async_sync\",\n            \"set_scheduler_manager\",\n            \"send_message_sync__queue_failed_message\",\n            \"start_all__start_retry_thread\",\n            \"stop_all__stop_retry_thread\",\n            \"start_all__start_restart_monitor\",\n            \"stop_all__stop_restart_monitor\",\n            \"initialize_channels_from_config\",\n            \"_get_default_channel_configs\",\n            \"start_all\",\n            \"_start_sync\",\n            \"_initialize_channel_with_retry_sync\",\n            \"_check_logging_health\",\n            \"send_message_sync\",\n            \"get_discord_connectivity_status\",\n            \"stop_all\",\n            \"_shutdown_sync\",\n            \"handle_message_sending\",\n            \"_get_recipient_for_service\",\n            \"_should_send_checkin_prompt\",\n            \"_handle_scheduled_checkin\",\n            \"_send_checkin_prompt\",\n            \"_send_ai_generated_message\",\n            \"_send_predefined_message\",\n            \"get_active_channels\",\n            \"get_configured_channels\",\n            \"get_registered_channels\",\n            \"handle_task_reminder\",\n            \"get_last_task_reminder\",\n            \"_create_task_reminder_message\",\n            \"_select_weighted_message\"\n          ],\n          \"name\": \"CommunicationManager\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"cls\",\n            \"*args\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"Ensure that only one instance of the CommunicationManager exists (Singleton pattern).\",\n          \"name\": \"__new__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the CommunicationManager singleton\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Set up a dedicated event loop for async operations\",\n          \"name\": \"__init____setup_event_loop\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"coro\"\n          ],\n          \"docstring\": \"Run async function synchronously using our managed loop\",\n          \"name\": \"send_message_sync__run_async_sync\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Set the scheduler manager for the communication manager.\",\n          \"name\": \"set_scheduler_manager\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"category\",\n            \"message\",\n            \"recipient\",\n            \"channel_name\"\n          ],\n          \"docstring\": \"Queue a failed message for retry\",\n          \"name\": \"send_message_sync__queue_failed_message\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Start the retry thread for failed messages\",\n          \"name\": \"start_all__start_retry_thread\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Stop the retry thread\",\n          \"name\": \"stop_all__stop_retry_thread\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Start the automatic restart monitor thread\",\n          \"name\": \"start_all__start_restart_monitor\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Stop the automatic restart monitor thread\",\n          \"name\": \"stop_all__stop_restart_monitor\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"channel_configs\"\n          ],\n          \"docstring\": \"Initialize channels from configuration\",\n          \"name\": \"initialize_channels_from_config\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get default channel configurations\",\n          \"name\": \"_get_default_channel_configs\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Start all communication channels\",\n          \"name\": \"start_all\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Synchronous method to start all configured channels\",\n          \"name\": \"_start_sync\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"channel\",\n            \"config\"\n          ],\n          \"docstring\": \"Synchronous version of channel initialization with retry logic\",\n          \"name\": \"_initialize_channel_with_retry_sync\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Check if logging is still working and recover if needed.\\n        \\n        Verifies that the logging system is functional and attempts to restart it if issues are detected.\",\n          \"name\": \"_check_logging_health\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"channel_name\",\n            \"recipient\",\n            \"message\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"Synchronous wrapper with logging health check\",\n          \"name\": \"send_message_sync\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get detailed Discord connectivity status if available\",\n          \"name\": \"get_discord_connectivity_status\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Stop all communication channels\",\n          \"name\": \"stop_all\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Synchronous shutdown method for all channels.\\n        \\n        Stops all communication channels and cleans up resources.\",\n          \"name\": \"_shutdown_sync\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Handle sending messages for a user and category with improved recipient resolution.\\n        Now uses scheduled check-ins instead of random replacement.\",\n          \"name\": \"handle_message_sending\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"messaging_service\",\n            \"preferences\"\n          ],\n          \"docstring\": \"Get the appropriate recipient ID for the messaging service\",\n          \"name\": \"_get_recipient_for_service\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"checkin_prefs\"\n          ],\n          \"docstring\": \"Determine if it's time to send a check-in prompt based on user preferences.\\n        For check-ins, we respect the schedule-based approach - if the scheduler\\n        triggered this function, it means it's time for a check-in during the\\n        scheduled period.\",\n          \"name\": \"_should_send_checkin_prompt\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"messaging_service\",\n            \"recipient\"\n          ],\n          \"docstring\": \"Handle scheduled check-in messages based on user preferences and frequency.\",\n          \"name\": \"_handle_scheduled_checkin\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"messaging_service\",\n            \"recipient\"\n          ],\n          \"docstring\": \"Send a check-in prompt message to start the check-in flow.\",\n          \"name\": \"_send_checkin_prompt\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"category\",\n            \"messaging_service\",\n            \"recipient\"\n          ],\n          \"docstring\": \"Send an AI-generated personalized message using contextual AI\",\n          \"name\": \"_send_ai_generated_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"category\",\n            \"messaging_service\",\n            \"recipient\"\n          ],\n          \"docstring\": \"Send a pre-defined message from the user's message library with deduplication\",\n          \"name\": \"_send_predefined_message\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get list of currently active/running channels\",\n          \"name\": \"get_active_channels\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get list of channels that are configured (from config)\",\n          \"name\": \"get_configured_channels\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get list of channels that are registered in the factory\",\n          \"name\": \"get_registered_channels\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"task_id\"\n          ],\n          \"docstring\": \"Handle sending task reminders for a user.\",\n          \"name\": \"handle_task_reminder\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Get the task ID of the last task reminder sent to a user.\\n        \\n        Args:\\n            user_id: The user's ID\\n            \\n        Returns:\\n            The task ID of the last reminder, or None if no reminder was sent\",\n          \"name\": \"get_last_task_reminder\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"task\"\n          ],\n          \"docstring\": \"Create a formatted task reminder message.\",\n          \"name\": \"_create_task_reminder_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"available_messages\",\n            \"matching_periods\"\n          ],\n          \"docstring\": \"Select a message using a weighting system that prioritizes\\n        messages with specific time periods over 'ALL' time periods.\\n        \\n        Args:\\n            available_messages: List of available messages\\n            matching_periods: List of current matching time periods\\n            \\n        Returns:\\n            Selected message\",\n          \"name\": \"_select_weighted_message\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Run the event loop in a separate thread for async operations.\\n                    \\n                    This nested function is used to manage the event loop for async channel operations.\",\n          \"name\": \"run_event_loop\"\n        }\n      ]\n    },\n    \"communication/core/factory.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Factory for creating communication channels using config-based discovery\",\n          \"methods\": [\n            \"_initialize_registry\",\n            \"create_channel\",\n            \"get_registered_channels\"\n          ],\n          \"name\": \"ChannelFactory\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"cls\"\n          ],\n          \"docstring\": \"Initialize the channel registry from configuration\",\n          \"name\": \"_initialize_registry\"\n        },\n        {\n          \"args\": [\n            \"cls\",\n            \"name\",\n            \"config\"\n          ],\n          \"docstring\": \"Create a channel instance\",\n          \"name\": \"create_channel\"\n        },\n        {\n          \"args\": [\n            \"cls\"\n          ],\n          \"docstring\": \"Get list of registered channel types\",\n          \"name\": \"get_registered_channels\"\n        }\n      ]\n    },\n    \"communication/core/retry_manager.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Represents a message that failed to send and is queued for retry\",\n          \"methods\": [],\n          \"name\": \"QueuedMessage\"\n        },\n        {\n          \"docstring\": \"Manages message retry logic and failed message queuing\",\n          \"methods\": [\n            \"__init__\",\n            \"queue_failed_message\",\n            \"start_retry_thread\",\n            \"stop_retry_thread\",\n            \"_retry_loop\",\n            \"_process_retry_queue\",\n            \"get_queue_size\",\n            \"clear_queue\"\n          ],\n          \"name\": \"RetryManager\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the retry manager\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"category\",\n            \"message\",\n            \"recipient\",\n            \"channel_name\"\n          ],\n          \"docstring\": \"Queue a failed message for retry\",\n          \"name\": \"queue_failed_message\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Start the retry thread for failed messages\",\n          \"name\": \"start_retry_thread\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Stop the retry thread\",\n          \"name\": \"stop_retry_thread\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Main retry loop that processes failed messages\",\n          \"name\": \"_retry_loop\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Process the retry queue and attempt to resend failed messages\",\n          \"name\": \"_process_retry_queue\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the current size of the retry queue\",\n          \"name\": \"get_queue_size\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Clear all queued messages (use with caution)\",\n          \"name\": \"clear_queue\"\n        }\n      ]\n    },\n    \"communication/message_processing/command_parser.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Result of command parsing with confidence and method used\",\n          \"methods\": [],\n          \"name\": \"ParsingResult\"\n        },\n        {\n          \"docstring\": \"Enhanced command parser that combines rule-based and AI parsing\",\n          \"methods\": [\n            \"__init__\",\n            \"parse\",\n            \"_rule_based_parse\",\n            \"_ai_enhanced_parse\",\n            \"_extract_entities_rule_based\",\n            \"_extract_task_entities\",\n            \"_extract_task_name_from_context\",\n            \"_extract_update_entities\",\n            \"_extract_intent_from_ai_response\",\n            \"_extract_entities_from_ai_response\",\n            \"_calculate_confidence\",\n            \"_is_valid_intent\",\n            \"get_suggestions\"\n          ],\n          \"name\": \"EnhancedCommandParser\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Get the global enhanced command parser instance\",\n          \"name\": \"get_enhanced_command_parser\"\n        },\n        {\n          \"args\": [\n            \"message\"\n          ],\n          \"docstring\": \"Convenience function to parse a command\",\n          \"name\": \"parse_command\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Parse a user message into a structured command.\\n        \\n        Returns:\\n            ParsingResult with parsed command, confidence, and method used\",\n          \"name\": \"parse\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\"\n          ],\n          \"docstring\": \"Parse using rule-based patterns\",\n          \"name\": \"_rule_based_parse\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Parse using AI chatbot capabilities\",\n          \"name\": \"_ai_enhanced_parse\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"intent\",\n            \"match\",\n            \"message\"\n          ],\n          \"docstring\": \"Extract entities using rule-based patterns\",\n          \"name\": \"_extract_entities_rule_based\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"title\"\n          ],\n          \"docstring\": \"Extract task-related entities from title\",\n          \"name\": \"_extract_task_entities\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\"\n          ],\n          \"docstring\": \"Extract task name from natural language context\",\n          \"name\": \"_extract_task_name_from_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"update_text\"\n          ],\n          \"docstring\": \"Extract update entities from update text\",\n          \"name\": \"_extract_update_entities\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"ai_response\"\n          ],\n          \"docstring\": \"Extract intent from AI response text\",\n          \"name\": \"_extract_intent_from_ai_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"ai_response\"\n          ],\n          \"docstring\": \"Extract entities from AI response text\",\n          \"name\": \"_extract_entities_from_ai_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"intent\",\n            \"match\",\n            \"message\"\n          ],\n          \"docstring\": \"Calculate confidence score for a parsed command\",\n          \"name\": \"_calculate_confidence\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"intent\"\n          ],\n          \"docstring\": \"Check if intent is supported by any handler\",\n          \"name\": \"_is_valid_intent\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"partial_message\"\n          ],\n          \"docstring\": \"Get command suggestions based on partial input\",\n          \"name\": \"get_suggestions\"\n        }\n      ]\n    },\n    \"communication/message_processing/conversation_flow_manager.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__init__\",\n            \"_load_user_states\",\n            \"_save_user_states\",\n            \"expire_checkin_flow_due_to_unrelated_outbound\",\n            \"handle_inbound_message\",\n            \"start_checkin\",\n            \"clear_stuck_flows\",\n            \"clear_all_states\",\n            \"restart_checkin\",\n            \"start_tasks_flow\",\n            \"start_profile_flow\",\n            \"start_schedule_flow\",\n            \"start_messages_flow\",\n            \"start_analytics_flow\",\n            \"_start_dynamic_checkin\",\n            \"_get_personalized_welcome\",\n            \"_get_next_question\",\n            \"_get_question_text\",\n            \"_handle_checkin\",\n            \"_validate_response\",\n            \"_complete_checkin\",\n            \"_handle_command_during_checkin\",\n            \"_generate_completion_message\",\n            \"handle_contextual_question\",\n            \"_select_checkin_questions_with_weighting\"\n          ],\n          \"name\": \"ConversationManager\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load user states from disk\",\n          \"name\": \"_load_user_states\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Save user states to disk\",\n          \"name\": \"_save_user_states\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Expire an active check-in flow when an unrelated outbound message is sent.\\n        Safe no-op if no flow or different flow is active.\",\n          \"name\": \"expire_checkin_flow_due_to_unrelated_outbound\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"message_text\"\n          ],\n          \"docstring\": \"Primary entry point. Takes user's message and returns a (reply_text, completed).\\n        \\n        Now defaults to contextual chat for all messages unless user is in a specific flow\\n        or uses a special command.\",\n          \"name\": \"handle_inbound_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Public method to start a check-in flow for a user.\\n        This is the proper way to initiate check-ins from external modules.\",\n          \"name\": \"start_checkin\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Clear any stuck conversation flows for a user.\\n        This is a safety mechanism to reset flow state when it gets stuck.\",\n          \"name\": \"clear_stuck_flows\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Clear all user states - primarily for testing.\",\n          \"name\": \"clear_all_states\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Force restart a check-in flow, clearing any existing checkin state.\\n        This should be used when user explicitly wants to start over.\",\n          \"name\": \"restart_checkin\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Starter for a future tasks multi-step flow (placeholder).\",\n          \"name\": \"start_tasks_flow\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"start_profile_flow\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"start_schedule_flow\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"start_messages_flow\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"start_analytics_flow\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Start a dynamic check-in flow based on user preferences with weighted question selection\",\n          \"name\": \"_start_dynamic_checkin\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"question_count\"\n          ],\n          \"docstring\": \"Generate a personalized welcome message based on user history\",\n          \"name\": \"_get_personalized_welcome\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"user_state\"\n          ],\n          \"docstring\": \"Get the next question in the check-in flow\",\n          \"name\": \"_get_next_question\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"question_key\",\n            \"previous_data\"\n          ],\n          \"docstring\": \"Get appropriate question text based on question type and previous responses\",\n          \"name\": \"_get_question_text\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"user_state\",\n            \"message_text\"\n          ],\n          \"docstring\": \"Enhanced check-in flow with dynamic questions and better validation\",\n          \"name\": \"_handle_checkin\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"question_key\",\n            \"response\"\n          ],\n          \"docstring\": \"Validate user response based on question type using dynamic manager\",\n          \"name\": \"_validate_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"user_state\"\n          ],\n          \"docstring\": \"Complete the check-in and provide personalized feedback\",\n          \"name\": \"_complete_checkin\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"message_text\"\n          ],\n          \"docstring\": \"Handle common commands while user is in a checkin flow\",\n          \"name\": \"_handle_command_during_checkin\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"data\"\n          ],\n          \"docstring\": \"Generate a personalized completion message based on responses\",\n          \"name\": \"_generate_completion_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"message_text\"\n          ],\n          \"docstring\": \"Handle a single contextual question without entering a conversation flow.\\n        Perfect for one-off questions that benefit from user context.\",\n          \"name\": \"handle_contextual_question\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"enabled_questions\"\n          ],\n          \"docstring\": \"Select check-in questions using weighted randomization to ensure variety.\\n        \\n        Args:\\n            user_id: User ID\\n            enabled_questions: Dictionary of enabled questions from user preferences\\n            \\n        Returns:\\n            List of question keys in selected order\",\n          \"name\": \"_select_checkin_questions_with_weighting\"\n        }\n      ]\n    },\n    \"communication/message_processing/interaction_manager.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [],\n          \"name\": \"CommandDefinition\"\n        },\n        {\n          \"docstring\": \"Main manager for handling user interactions across all channels\",\n          \"methods\": [\n            \"__init__\",\n            \"handle_message\",\n            \"get_slash_command_map\",\n            \"get_command_definitions\",\n            \"_handle_structured_command\",\n            \"_handle_contextual_chat\",\n            \"_enhance_response_with_ai\",\n            \"_get_help_response\",\n            \"_get_commands_response\",\n            \"get_available_commands\",\n            \"get_user_suggestions\",\n            \"_is_ai_command_response\",\n            \"_parse_ai_command_response\",\n            \"_is_clarification_request\",\n            \"_extract_intent_from_text\",\n            \"_is_valid_intent\",\n            \"_try_ai_command_parsing\"\n          ],\n          \"name\": \"InteractionManager\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Get the global interaction manager instance\",\n          \"name\": \"get_interaction_manager\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"message\",\n            \"channel_type\"\n          ],\n          \"docstring\": \"Convenience function to handle a user message\",\n          \"name\": \"handle_user_message\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"message\",\n            \"channel_type\"\n          ],\n          \"docstring\": \"Main entry point for handling user messages.\\n        \\n        Args:\\n            user_id: The user's ID\\n            message: The user's message\\n            channel_type: Type of channel (discord, email)\\n            \\n        Returns:\\n            InteractionResponse with appropriate response\",\n          \"name\": \"handle_message\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Expose slash command mappings without coupling callers to internals.\\n        Returns a dict like {'tasks': 'show my tasks', ...} suitable for Discord registration.\",\n          \"name\": \"get_slash_command_map\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Return canonical command definitions: name, mapped_message, description.\",\n          \"name\": \"get_command_definitions\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"parsing_result\",\n            \"channel_type\"\n          ],\n          \"docstring\": \"Handle a structured command using interaction handlers\",\n          \"name\": \"_handle_structured_command\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"message\",\n            \"channel_type\"\n          ],\n          \"docstring\": \"Handle contextual chat using AI chatbot with mixed intent support\",\n          \"name\": \"_handle_contextual_chat\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"response\",\n            \"parsed_command\"\n          ],\n          \"docstring\": \"Enhance a structured response with AI contextual information\",\n          \"name\": \"_enhance_response_with_ai\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"message\"\n          ],\n          \"docstring\": \"Get a help response when command parsing fails\",\n          \"name\": \"_get_help_response\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Return a concise, channel-agnostic commands list for quick discovery.\",\n          \"name\": \"_get_commands_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Get list of available commands for the user\",\n          \"name\": \"get_available_commands\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"context\"\n          ],\n          \"docstring\": \"Get personalized suggestions for the user\",\n          \"name\": \"get_user_suggestions\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"ai_response\"\n          ],\n          \"docstring\": \"Check if AI response indicates this was a command\",\n          \"name\": \"_is_ai_command_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"ai_response\",\n            \"original_message\"\n          ],\n          \"docstring\": \"Parse AI command response into ParsedCommand\",\n          \"name\": \"_parse_ai_command_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"ai_response\"\n          ],\n          \"docstring\": \"Check if AI response is asking for clarification\",\n          \"name\": \"_is_clarification_request\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"text\"\n          ],\n          \"docstring\": \"Extract intent from AI text response\",\n          \"name\": \"_extract_intent_from_text\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"intent\"\n          ],\n          \"docstring\": \"Check if intent is supported by any handler\",\n          \"name\": \"_is_valid_intent\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"message\",\n            \"channel_type\"\n          ],\n          \"docstring\": \"Attempt to parse ambiguous messages using AI command parsing.\",\n          \"name\": \"_try_ai_command_parsing\"\n        }\n      ]\n    },\n    \"communication/message_processing/message_router.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Types of messages that can be routed\",\n          \"methods\": [],\n          \"name\": \"MessageType\"\n        },\n        {\n          \"docstring\": \"Result of message routing\",\n          \"methods\": [],\n          \"name\": \"RoutingResult\"\n        },\n        {\n          \"docstring\": \"Routes messages to appropriate handlers based on message type and content\",\n          \"methods\": [\n            \"__init__\",\n            \"route_message\",\n            \"_route_slash_command\",\n            \"_route_bang_command\",\n            \"get_command_definitions\",\n            \"get_slash_command_map\",\n            \"get_bang_command_map\",\n            \"is_flow_command\",\n            \"get_command_mapping\"\n          ],\n          \"name\": \"MessageRouter\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Get the global message router instance\",\n          \"name\": \"get_message_router\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the message router\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\"\n          ],\n          \"docstring\": \"Route a message to determine its type and appropriate handling.\\n        \\n        Args:\\n            message: The user's message\\n            \\n        Returns:\\n            RoutingResult with message type and routing information\",\n          \"name\": \"route_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\"\n          ],\n          \"docstring\": \"Route a slash command\",\n          \"name\": \"_route_slash_command\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\"\n          ],\n          \"docstring\": \"Route a bang command\",\n          \"name\": \"_route_bang_command\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Return canonical command definitions\",\n          \"name\": \"get_command_definitions\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get slash command mappings\",\n          \"name\": \"get_slash_command_map\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get bang command mappings\",\n          \"name\": \"get_bang_command_map\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"command_name\"\n          ],\n          \"docstring\": \"Check if a command is a flow command\",\n          \"name\": \"is_flow_command\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"command_name\"\n          ],\n          \"docstring\": \"Get the mapped message for a command\",\n          \"name\": \"get_command_mapping\"\n        }\n      ]\n    },\n    \"core/auto_cleanup.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Get the timestamp of the last cleanup from tracker file.\",\n          \"name\": \"get_last_cleanup_timestamp\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Update the cleanup tracker file with current timestamp.\",\n          \"name\": \"update_cleanup_timestamp\"\n        },\n        {\n          \"args\": [\n            \"interval_days\"\n          ],\n          \"docstring\": \"Check if cleanup should run based on last cleanup time.\",\n          \"name\": \"should_run_cleanup\"\n        },\n        {\n          \"args\": [\n            \"root_path\"\n          ],\n          \"docstring\": \"Find all __pycache__ directories recursively.\",\n          \"name\": \"find_pycache_dirs\"\n        },\n        {\n          \"args\": [\n            \"root_path\"\n          ],\n          \"docstring\": \"Find all .pyc files recursively.\",\n          \"name\": \"find_pyc_files\"\n        },\n        {\n          \"args\": [\n            \"pycache_dirs\"\n          ],\n          \"docstring\": \"Calculate total size of __pycache__ directories.\",\n          \"name\": \"_calculate_cache_size__calculate_pycache_directories_size\"\n        },\n        {\n          \"args\": [\n            \"pyc_files\"\n          ],\n          \"docstring\": \"Calculate total size of standalone .pyc files.\",\n          \"name\": \"_calculate_cache_size__calculate_pyc_files_size\"\n        },\n        {\n          \"args\": [\n            \"pycache_dirs\",\n            \"pyc_files\"\n          ],\n          \"docstring\": \"Calculate total size of cache files.\",\n          \"name\": \"calculate_cache_size\"\n        },\n        {\n          \"args\": [\n            \"root_path\"\n          ],\n          \"docstring\": \"Discover all cache files and directories in the given root path.\",\n          \"name\": \"_perform_cleanup__discover_cache_files\"\n        },\n        {\n          \"args\": [\n            \"pycache_dirs\",\n            \"pyc_files\"\n          ],\n          \"docstring\": \"Calculate total size and log discovery results.\",\n          \"name\": \"_perform_cleanup__log_discovery_results\"\n        },\n        {\n          \"args\": [\n            \"pycache_dirs\",\n            \"pyc_files\"\n          ],\n          \"docstring\": \"Remove all discovered cache directories and files.\",\n          \"name\": \"_perform_cleanup__remove_cache_files\"\n        },\n        {\n          \"args\": [\n            \"pycache_dirs\"\n          ],\n          \"docstring\": \"Remove all __pycache__ directories.\",\n          \"name\": \"_perform_cleanup__remove_cache_directories\"\n        },\n        {\n          \"args\": [\n            \"pyc_files\"\n          ],\n          \"docstring\": \"Remove all standalone .pyc files.\",\n          \"name\": \"_perform_cleanup__remove_cache_files_list\"\n        },\n        {\n          \"args\": [\n            \"removed_dirs\",\n            \"removed_files\",\n            \"total_size\"\n          ],\n          \"docstring\": \"Log the final cleanup results and statistics.\",\n          \"name\": \"_perform_cleanup__log_completion_results\"\n        },\n        {\n          \"args\": [\n            \"root_path\"\n          ],\n          \"docstring\": \"Perform the actual cleanup of cache files.\",\n          \"name\": \"perform_cleanup\"\n        },\n        {\n          \"args\": [\n            \"root_path\",\n            \"interval_days\"\n          ],\n          \"docstring\": \"Main function to check if cleanup is needed and perform it if so.\\n    Returns True if cleanup was performed, False if not needed.\",\n          \"name\": \"auto_cleanup_if_needed\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Archive old messages for all users during monthly cleanup.\\n    This runs alongside the cache cleanup to maintain message file sizes.\",\n          \"name\": \"archive_old_messages_for_all_users\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Get status when cleanup has never been performed.\",\n          \"name\": \"_get_cleanup_status__get_never_cleaned_status\"\n        },\n        {\n          \"args\": [\n            \"last_cleanup_timestamp\"\n          ],\n          \"docstring\": \"Calculate days since last cleanup.\",\n          \"name\": \"_get_cleanup_status__calculate_days_since_cleanup\"\n        },\n        {\n          \"args\": [\n            \"last_date\"\n          ],\n          \"docstring\": \"Format the next cleanup date or return 'Overdue'.\",\n          \"name\": \"_get_cleanup_status__format_next_cleanup_date\"\n        },\n        {\n          \"args\": [\n            \"last_date\",\n            \"days_since\",\n            \"next_cleanup\"\n          ],\n          \"docstring\": \"Build the final status response dictionary.\",\n          \"name\": \"_get_cleanup_status__build_status_response\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Get information about the cleanup status.\",\n          \"name\": \"get_cleanup_status\"\n        }\n      ]\n    },\n    \"core/backup_manager.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Manages automatic backups and rollback operations.\",\n          \"methods\": [\n            \"__init__\",\n            \"ensure_backup_directory\",\n            \"_create_backup__setup_backup\",\n            \"_create_backup__create_zip_file\",\n            \"_create_backup__cleanup_old_backups\",\n            \"create_backup\",\n            \"_backup_user_data\",\n            \"_backup_config_files\",\n            \"_backup_log_files\",\n            \"_create_backup_manifest\",\n            \"_add_directory_to_zip\",\n            \"_cleanup_old_backups\",\n            \"list_backups\",\n            \"_get_backup_info\",\n            \"restore_backup\",\n            \"_restore_user_data\",\n            \"_restore_config_files\",\n            \"_validate_backup__check_file_exists\",\n            \"_validate_backup__validate_zip_file\",\n            \"_validate_backup__check_file_integrity\",\n            \"_validate_backup__validate_manifest\",\n            \"_validate_backup__validate_content_requirements\",\n            \"validate_backup\"\n          ],\n          \"name\": \"BackupManager\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"operation_name\"\n          ],\n          \"docstring\": \"Create an automatic backup before major operations.\\n    \\n    Args:\\n        operation_name: Name of the operation being performed\\n    \\n    Returns:\\n        Path to the backup file, or None if failed\",\n          \"name\": \"create_automatic_backup\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Validate the user index file and corresponding user directories.\",\n          \"name\": \"_validate_system_state__validate_user_index\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Ensure the user data directory exists, creating it if necessary.\",\n          \"name\": \"_validate_system_state__ensure_user_data_directory\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Validate the current system state for consistency.\\n    \\n    Returns:\\n        True if system is in a valid state, False otherwise\",\n          \"name\": \"validate_system_state\"\n        },\n        {\n          \"args\": [\n            \"operation_func\",\n            \"*args\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"Perform an operation with automatic backup and rollback capability.\\n    \\n    Args:\\n        operation_func: Function to perform\\n        *args: Arguments for the operation function\\n        **kwargs: Keyword arguments for the operation function\\n    \\n    Returns:\\n        True if operation succeeded, False if it failed and was rolled back\",\n          \"name\": \"perform_safe_operation\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the BackupManager with default settings.\\n        \\n        Sets up backup directory, maximum backup count, and ensures backup directory exists.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Ensure backup directory exists.\",\n          \"name\": \"ensure_backup_directory\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"backup_name\"\n          ],\n          \"docstring\": \"Setup backup name and path parameters.\",\n          \"name\": \"_create_backup__setup_backup\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"backup_path\",\n            \"backup_name\",\n            \"include_users\",\n            \"include_config\",\n            \"include_logs\"\n          ],\n          \"docstring\": \"Create the backup zip file with all specified components.\",\n          \"name\": \"_create_backup__create_zip_file\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Clean up old backups by count and age.\",\n          \"name\": \"_create_backup__cleanup_old_backups\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"backup_name\",\n            \"include_users\",\n            \"include_config\",\n            \"include_logs\"\n          ],\n          \"docstring\": \"Create a comprehensive backup of the system.\\n        \\n        Args:\\n            backup_name: Custom name for the backup (auto-generated if None)\\n            include_users: Whether to include user data\\n            include_config: Whether to include configuration files\\n            include_logs: Whether to include log files\\n        \\n        Returns:\\n            Path to the backup file, or None if failed\",\n          \"name\": \"create_backup\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"zipf\"\n          ],\n          \"docstring\": \"Backup all user data directories.\",\n          \"name\": \"_backup_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"zipf\"\n          ],\n          \"docstring\": \"Backup configuration files.\",\n          \"name\": \"_backup_config_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"zipf\"\n          ],\n          \"docstring\": \"Backup log files.\",\n          \"name\": \"_backup_log_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"zipf\",\n            \"backup_name\",\n            \"include_users\",\n            \"include_config\",\n            \"include_logs\"\n          ],\n          \"docstring\": \"Create a manifest file describing the backup contents.\",\n          \"name\": \"_create_backup_manifest\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"zipf\",\n            \"directory\",\n            \"zip_path\"\n          ],\n          \"docstring\": \"Recursively add a directory to the zip file.\",\n          \"name\": \"_add_directory_to_zip\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Remove old backups by count and age retention policy.\",\n          \"name\": \"_cleanup_old_backups\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"List all available backups with metadata.\",\n          \"name\": \"list_backups\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"backup_path\"\n          ],\n          \"docstring\": \"Get information about a specific backup.\",\n          \"name\": \"_get_backup_info\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"backup_path\",\n            \"restore_users\",\n            \"restore_config\"\n          ],\n          \"docstring\": \"Restore from a backup file.\\n        \\n        Args:\\n            backup_path: Path to the backup file\\n            restore_users: Whether to restore user data\\n            restore_config: Whether to restore configuration files\\n        \\n        Returns:\\n            True if restoration was successful, False otherwise\",\n          \"name\": \"restore_backup\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"zipf\"\n          ],\n          \"docstring\": \"Restore user data from backup.\",\n          \"name\": \"_restore_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"zipf\"\n          ],\n          \"docstring\": \"Restore configuration files from backup.\",\n          \"name\": \"_restore_config_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"backup_path\",\n            \"errors\"\n          ],\n          \"docstring\": \"Check if the backup file exists and add error if not.\",\n          \"name\": \"_validate_backup__check_file_exists\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"backup_path\"\n          ],\n          \"docstring\": \"Validate zip file integrity and contents.\",\n          \"name\": \"_validate_backup__validate_zip_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"zipf\",\n            \"errors\"\n          ],\n          \"docstring\": \"Check if the zip file is not corrupted.\",\n          \"name\": \"_validate_backup__check_file_integrity\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"zipf\",\n            \"errors\"\n          ],\n          \"docstring\": \"Validate the backup manifest file.\",\n          \"name\": \"_validate_backup__validate_manifest\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"zipf\",\n            \"errors\"\n          ],\n          \"docstring\": \"Validate that backup contains required content.\",\n          \"name\": \"_validate_backup__validate_content_requirements\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"backup_path\"\n          ],\n          \"docstring\": \"Validate a backup file for integrity and completeness.\\n        \\n        Args:\\n            backup_path: Path to the backup file\\n        \\n        Returns:\\n            Tuple of (is_valid, list_of_errors)\",\n          \"name\": \"validate_backup\"\n        }\n      ]\n    },\n    \"core/checkin_analytics.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__init__\",\n            \"get_mood_trends\",\n            \"get_habit_analysis\",\n            \"get_sleep_analysis\",\n            \"get_wellness_score\",\n            \"get_checkin_history\",\n            \"get_quantitative_summaries\",\n            \"get_completion_rate\",\n            \"get_task_weekly_stats\",\n            \"_get_mood_distribution\",\n            \"_calculate_streak\",\n            \"_get_habit_status\",\n            \"_calculate_overall_completion\",\n            \"_calculate_sleep_consistency\",\n            \"_get_sleep_recommendations\",\n            \"_calculate_mood_score\",\n            \"_calculate_habit_score\",\n            \"_calculate_sleep_score\",\n            \"_get_score_level\",\n            \"_get_wellness_recommendations\"\n          ],\n          \"name\": \"CheckinAnalytics\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the CheckinAnalytics instance.\\n        \\n        This class provides analytics and insights from check-in data.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"days\"\n          ],\n          \"docstring\": \"Analyze mood trends over the specified period\",\n          \"name\": \"get_mood_trends\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"days\"\n          ],\n          \"docstring\": \"Analyze habit patterns from check-in data\",\n          \"name\": \"get_habit_analysis\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"days\"\n          ],\n          \"docstring\": \"Analyze sleep patterns from check-in data\",\n          \"name\": \"get_sleep_analysis\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"days\"\n          ],\n          \"docstring\": \"Calculate overall wellness score from check-in data\",\n          \"name\": \"get_wellness_score\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"days\"\n          ],\n          \"docstring\": \"Get check-in history with proper date formatting\",\n          \"name\": \"get_checkin_history\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"days\",\n            \"enabled_fields\"\n          ],\n          \"docstring\": \"Compute per-field averages and ranges for opted-in quantitative fields.\\n\\n        Parameters:\\n            user_id: target user\\n            days: number of recent check-ins to analyze\\n            enabled_fields: list of fields to include (e.g., ['mood','energy','stress','sleep_quality','anxiety'])\\n\\n        Returns mapping: { field: { 'average': float, 'min': float, 'max': float, 'count': int } }\\n        Only includes fields that appear in the data and are in enabled_fields if provided.\",\n          \"name\": \"get_quantitative_summaries\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"days\"\n          ],\n          \"docstring\": \"Calculate overall completion rate for check-ins\",\n          \"name\": \"get_completion_rate\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"days\"\n          ],\n          \"docstring\": \"Calculate weekly statistics for tasks\",\n          \"name\": \"get_task_weekly_stats\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"moods\"\n          ],\n          \"docstring\": \"Calculate distribution of mood scores\",\n          \"name\": \"_get_mood_distribution\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"checkins\",\n            \"habit_key\"\n          ],\n          \"docstring\": \"Calculate current and best streaks for a habit\",\n          \"name\": \"_calculate_streak\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"completion_rate\"\n          ],\n          \"docstring\": \"Get status description for habit completion rate\",\n          \"name\": \"_get_habit_status\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"habit_stats\"\n          ],\n          \"docstring\": \"Calculate overall habit completion rate\",\n          \"name\": \"_calculate_overall_completion\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"hours\"\n          ],\n          \"docstring\": \"Calculate sleep consistency (lower variance = more consistent)\",\n          \"name\": \"_calculate_sleep_consistency\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"avg_hours\",\n            \"avg_quality\",\n            \"poor_days\"\n          ],\n          \"docstring\": \"Generate sleep recommendations\",\n          \"name\": \"_get_sleep_recommendations\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"checkins\"\n          ],\n          \"docstring\": \"Calculate mood score (0-100)\",\n          \"name\": \"_calculate_mood_score\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"checkins\"\n          ],\n          \"docstring\": \"Calculate habit score (0-100)\",\n          \"name\": \"_calculate_habit_score\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"checkins\"\n          ],\n          \"docstring\": \"Calculate sleep score (0-100)\",\n          \"name\": \"_calculate_sleep_score\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"score\"\n          ],\n          \"docstring\": \"Get wellness score level description\",\n          \"name\": \"_get_score_level\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mood_score\",\n            \"habit_score\",\n            \"sleep_score\"\n          ],\n          \"docstring\": \"Generate wellness recommendations based on component scores\",\n          \"name\": \"_get_wellness_recommendations\"\n        }\n      ]\n    },\n    \"core/checkin_dynamic_manager.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Manages dynamic check-in questions and responses loaded from JSON files.\",\n          \"methods\": [\n            \"__init__\",\n            \"_load_data\",\n            \"get_question_definition\",\n            \"get_all_questions\",\n            \"get_question_text\",\n            \"get_question_type\",\n            \"get_question_validation\",\n            \"get_response_statement\",\n            \"get_transition_phrase\",\n            \"build_next_question_with_response\",\n            \"validate_answer\",\n            \"get_enabled_questions_for_ui\",\n            \"get_categories\"\n          ],\n          \"name\": \"DynamicCheckinManager\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the dynamic check-in manager.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load questions and responses data from JSON files.\",\n          \"name\": \"_load_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"question_key\"\n          ],\n          \"docstring\": \"Get the definition for a specific question.\",\n          \"name\": \"get_question_definition\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get all question definitions.\",\n          \"name\": \"get_all_questions\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"question_key\"\n          ],\n          \"docstring\": \"Get the question text for a specific question.\",\n          \"name\": \"get_question_text\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"question_key\"\n          ],\n          \"docstring\": \"Get the type of a specific question.\",\n          \"name\": \"get_question_type\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"question_key\"\n          ],\n          \"docstring\": \"Get validation rules for a specific question.\",\n          \"name\": \"get_question_validation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"question_key\",\n            \"answer_value\"\n          ],\n          \"docstring\": \"Get a random response statement for a question answer.\",\n          \"name\": \"get_response_statement\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get a random transition phrase.\",\n          \"name\": \"get_transition_phrase\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"question_key\",\n            \"previous_question_key\",\n            \"previous_answer\"\n          ],\n          \"docstring\": \"Build the next question text with a response statement from the previous answer.\",\n          \"name\": \"build_next_question_with_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"question_key\",\n            \"answer\"\n          ],\n          \"docstring\": \"Validate an answer for a specific question.\",\n          \"name\": \"validate_answer\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get questions formatted for UI display with enabled_by_default status.\",\n          \"name\": \"get_enabled_questions_for_ui\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get all question categories.\",\n          \"name\": \"get_categories\"\n        }\n      ]\n    },\n    \"core/config.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Custom exception for configuration validation errors with detailed information.\",\n          \"methods\": [\n            \"__init__\"\n          ],\n          \"name\": \"ConfigValidationError\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"value\"\n          ],\n          \"docstring\": \"Normalize path strings from environment to avoid Windows escape issues.\\n    - Removes CR/LF control chars\\n    - Strips surrounding quotes\\n    - Normalizes separators to OS-specific\",\n          \"name\": \"_normalize_path\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Get list of available communication channels based on configuration.\\n    \\n    Returns:\\n        List[str]: List of available channel names that can be used with ChannelFactory\",\n          \"name\": \"get_available_channels\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Get mapping of channel names to their class names for dynamic imports.\\n    \\n    Returns:\\n        Dict[str, str]: Mapping of channel name to fully qualified class name\",\n          \"name\": \"get_channel_class_mapping\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Validate that all core paths are accessible and can be created if needed.\",\n          \"name\": \"validate_core_paths\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Validate AI-related configuration settings.\",\n          \"name\": \"validate_ai_configuration\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Validate communication channel configurations.\",\n          \"name\": \"validate_communication_channels\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Validate logging configuration.\",\n          \"name\": \"validate_logging_configuration\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Validate scheduler configuration.\",\n          \"name\": \"validate_scheduler_configuration\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Validate file organization settings.\",\n          \"name\": \"validate_file_organization_settings\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Check for common environment variable issues.\",\n          \"name\": \"validate_environment_variables\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Comprehensive configuration validation that checks all aspects of the configuration.\\n    \\n    Returns:\\n        Dict containing validation results with the following structure:\\n        {\\n            'valid': bool,\\n            'errors': List[str],\\n            'warnings': List[str],\\n            'available_channels': List[str],\\n            'summary': str\\n        }\",\n          \"name\": \"validate_all_configuration\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Validate configuration and raise ConfigValidationError if invalid.\\n    \\n    Returns:\\n        List of available communication channels if validation passes.\\n    \\n    Raises:\\n        ConfigValidationError: If configuration is invalid with detailed error information.\",\n          \"name\": \"validate_and_raise_if_invalid\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Print a detailed configuration report to the console.\",\n          \"name\": \"print_configuration_report\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Get the data directory for a specific user.\",\n          \"name\": \"get_user_data_dir\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Get the backups directory, redirected under tests when MHM_TESTING=1.\\n    Returns tests/data/backups if testing, otherwise BASE_DATA_DIR/backups.\",\n          \"name\": \"get_backups_dir\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"Get the file path for a specific user file type.\",\n          \"name\": \"get_user_file_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Ensure user directory exists if using subdirectories.\",\n          \"name\": \"ensure_user_directory\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Validate email configuration settings.\\n    \\n    Returns:\\n        bool: True if email configuration is valid\\n        \\n    Raises:\\n        ConfigurationError: If required email configuration variables are missing\",\n          \"name\": \"validate_email_config\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Validate Discord configuration settings.\\n    \\n    Returns:\\n        bool: True if Discord configuration is valid\\n        \\n    Raises:\\n        ConfigurationError: If DISCORD_BOT_TOKEN is missing\",\n          \"name\": \"validate_discord_config\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Ensure at least one communication channel is configured\",\n          \"name\": \"validate_minimum_config\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"missing_configs\",\n            \"warnings\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        }\n      ]\n    },\n    \"core/error_handling.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Base exception for all MHM-specific errors.\",\n          \"methods\": [\n            \"__init__\"\n          ],\n          \"name\": \"MHMError\"\n        },\n        {\n          \"docstring\": \"Raised when there are issues with data files or data integrity.\",\n          \"methods\": [],\n          \"name\": \"DataError\"\n        },\n        {\n          \"docstring\": \"Raised when file operations fail.\",\n          \"methods\": [],\n          \"name\": \"FileOperationError\"\n        },\n        {\n          \"docstring\": \"Raised when configuration is invalid or missing.\",\n          \"methods\": [],\n          \"name\": \"ConfigurationError\"\n        },\n        {\n          \"docstring\": \"Raised when communication channels fail.\",\n          \"methods\": [],\n          \"name\": \"CommunicationError\"\n        },\n        {\n          \"docstring\": \"Raised when scheduler operations fail.\",\n          \"methods\": [],\n          \"name\": \"SchedulerError\"\n        },\n        {\n          \"docstring\": \"Raised when UI operations fail.\",\n          \"methods\": [],\n          \"name\": \"UserInterfaceError\"\n        },\n        {\n          \"docstring\": \"Raised when AI operations fail.\",\n          \"methods\": [],\n          \"name\": \"AIError\"\n        },\n        {\n          \"docstring\": \"Raised when data validation fails.\",\n          \"methods\": [],\n          \"name\": \"ValidationError\"\n        },\n        {\n          \"docstring\": \"Raised when error recovery fails.\",\n          \"methods\": [],\n          \"name\": \"RecoveryError\"\n        },\n        {\n          \"docstring\": \"Base class for error recovery strategies.\",\n          \"methods\": [\n            \"__init__\",\n            \"can_handle\",\n            \"recover\"\n          ],\n          \"name\": \"ErrorRecoveryStrategy\"\n        },\n        {\n          \"docstring\": \"Recovery strategy for missing files.\",\n          \"methods\": [\n            \"__init__\",\n            \"can_handle\",\n            \"recover\",\n            \"_get_default_data\"\n          ],\n          \"name\": \"FileNotFoundRecovery\"\n        },\n        {\n          \"docstring\": \"Recovery strategy for corrupted JSON files.\",\n          \"methods\": [\n            \"__init__\",\n            \"can_handle\",\n            \"recover\",\n            \"_get_default_data\"\n          ],\n          \"name\": \"JSONDecodeRecovery\"\n        },\n        {\n          \"docstring\": \"Recovery strategy for network-related errors.\",\n          \"methods\": [\n            \"__init__\",\n            \"can_handle\",\n            \"recover\"\n          ],\n          \"name\": \"NetworkRecovery\"\n        },\n        {\n          \"docstring\": \"Recovery strategy for configuration-related errors.\",\n          \"methods\": [\n            \"__init__\",\n            \"can_handle\",\n            \"recover\"\n          ],\n          \"name\": \"ConfigurationRecovery\"\n        },\n        {\n          \"docstring\": \"Centralized error handler for MHM.\",\n          \"methods\": [\n            \"__init__\",\n            \"handle_error\",\n            \"_log_error\",\n            \"_show_user_error\",\n            \"_get_user_friendly_message\"\n          ],\n          \"name\": \"ErrorHandler\"\n        },\n        {\n          \"docstring\": \"Context manager for safe file operations.\",\n          \"methods\": [\n            \"__init__\",\n            \"__enter__\",\n            \"__exit__\"\n          ],\n          \"name\": \"SafeFileContext\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"operation\",\n            \"context\",\n            \"user_friendly\",\n            \"default_return\"\n          ],\n          \"docstring\": \"Decorator to automatically handle errors in functions.\\n    \\n    Args:\\n        operation: Description of the operation (defaults to function name)\\n        context: Additional context to pass to error handler\\n        user_friendly: Whether to show user-friendly error messages\\n        default_return: Value to return if error occurs and can't be recovered\",\n          \"name\": \"handle_errors\"\n        },\n        {\n          \"args\": [\n            \"file_path\",\n            \"operation\",\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Context manager for safe file operations with automatic error handling.\\n    \\n    Usage:\\n        with safe_file_operation(\\\"path/to/file.json\\\", \\\"loading user data\\\", user_id=\\\"123\\\"):\\n            # file operations here\",\n          \"name\": \"safe_file_operation\"\n        },\n        {\n          \"args\": [\n            \"error\",\n            \"file_path\",\n            \"operation\",\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Convenience function for handling file-related errors.\",\n          \"name\": \"handle_file_error\"\n        },\n        {\n          \"args\": [\n            \"error\",\n            \"channel\",\n            \"operation\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Convenience function for handling communication errors.\",\n          \"name\": \"handle_communication_error\"\n        },\n        {\n          \"args\": [\n            \"error\",\n            \"setting\",\n            \"operation\"\n          ],\n          \"docstring\": \"Convenience function for handling configuration errors.\",\n          \"name\": \"handle_configuration_error\"\n        },\n        {\n          \"args\": [\n            \"error\",\n            \"operation\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Convenience function for handling network errors.\",\n          \"name\": \"handle_network_error\"\n        },\n        {\n          \"args\": [\n            \"error\",\n            \"field\",\n            \"operation\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Convenience function for handling validation errors.\",\n          \"name\": \"handle_validation_error\"\n        },\n        {\n          \"args\": [\n            \"error\",\n            \"operation\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Convenience function for handling AI-related errors.\",\n          \"name\": \"handle_ai_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"details\",\n            \"recoverable\"\n          ],\n          \"docstring\": \"Initialize a new MHM error.\\n        \\n        Args:\\n            message: Human-readable error message\\n            details: Optional dictionary with additional error details\\n            recoverable: Whether this error can be recovered from\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"name\",\n            \"description\"\n          ],\n          \"docstring\": \"Initialize an error recovery strategy.\\n        \\n        Args:\\n            name: The name of the recovery strategy\\n            description: A description of what this strategy does\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"error\"\n          ],\n          \"docstring\": \"Check if this strategy can handle the given error.\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"error\",\n            \"context\"\n          ],\n          \"docstring\": \"Attempt to recover from the error. Returns True if successful.\",\n          \"name\": \"recover\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the FileNotFoundRecovery strategy.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"error\"\n          ],\n          \"docstring\": \"Check if this strategy can handle the given error.\\n        \\n        Args:\\n            error: The exception to check\\n            \\n        Returns:\\n            True if this strategy can handle FileNotFoundError or file operation errors containing \\\"not found\\\"\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"error\",\n            \"context\"\n          ],\n          \"docstring\": \"Attempt to recover from the error by creating missing files with default data.\\n        \\n        Args:\\n            error: The exception that occurred\\n            context: Additional context containing file_path and other relevant information\\n            \\n        Returns:\\n            True if recovery was successful, False otherwise\",\n          \"name\": \"recover\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"file_path\",\n            \"context\"\n          ],\n          \"docstring\": \"Get appropriate default data based on file type.\",\n          \"name\": \"_get_default_data\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the JSONDecodeRecovery strategy.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"error\"\n          ],\n          \"docstring\": \"Check if this strategy can handle the given error.\\n        \\n        Args:\\n            error: The exception to check\\n            \\n        Returns:\\n            True if this strategy can handle JSON decode errors or JSON-related file operation errors\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"error\",\n            \"context\"\n          ],\n          \"docstring\": \"Attempt to recover from the error by recreating corrupted JSON files.\\n        \\n        Args:\\n            error: The exception that occurred\\n            context: Additional context containing file_path and other relevant information\\n            \\n        Returns:\\n            True if recovery was successful, False otherwise\",\n          \"name\": \"recover\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"file_path\",\n            \"context\"\n          ],\n          \"docstring\": \"Get appropriate default data based on file type.\",\n          \"name\": \"_get_default_data\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the NetworkRecovery strategy.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"error\"\n          ],\n          \"docstring\": \"Check if this strategy can handle the given error.\\n        \\n        Args:\\n            error: The exception to check\\n            \\n        Returns:\\n            True if this strategy can handle network-related errors\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"error\",\n            \"context\"\n          ],\n          \"docstring\": \"Attempt to recover from network errors by waiting and retrying.\\n        \\n        Args:\\n            error: The exception that occurred\\n            context: Additional context containing operation details\\n            \\n        Returns:\\n            True if recovery was successful, False otherwise\",\n          \"name\": \"recover\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the ConfigurationRecovery strategy.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"error\"\n          ],\n          \"docstring\": \"Check if this strategy can handle the given error.\\n        \\n        Args:\\n            error: The exception to check\\n            \\n        Returns:\\n            True if this strategy can handle configuration-related errors\",\n          \"name\": \"can_handle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"error\",\n            \"context\"\n          ],\n          \"docstring\": \"Attempt to recover from configuration errors by using default values.\\n        \\n        Args:\\n            error: The exception that occurred\\n            context: Additional context containing configuration details\\n            \\n        Returns:\\n            True if recovery was successful, False otherwise\",\n          \"name\": \"recover\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the ErrorHandler with default recovery strategies.\\n        \\n        Sets up recovery strategies for common error types like missing files and corrupted JSON.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"error\",\n            \"context\",\n            \"operation\",\n            \"user_friendly\"\n          ],\n          \"docstring\": \"Handle an error with recovery strategies and logging.\\n        \\n        Args:\\n            error: The exception that occurred\\n            context: Additional context about the error\\n            operation: Description of the operation that failed\\n            user_friendly: Whether to show user-friendly error messages\\n            \\n        Returns:\\n            True if error was recovered from, False otherwise\",\n          \"name\": \"handle_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"error\",\n            \"context\"\n          ],\n          \"docstring\": \"Log error with context.\",\n          \"name\": \"_log_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"error\",\n            \"context\",\n            \"custom_message\"\n          ],\n          \"docstring\": \"Show user-friendly error message.\",\n          \"name\": \"_show_user_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"error\",\n            \"context\"\n          ],\n          \"docstring\": \"Convert technical error to user-friendly message.\",\n          \"name\": \"_get_user_friendly_message\"\n        },\n        {\n          \"args\": [\n            \"func\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"decorator\"\n        },\n        {\n          \"args\": [\n            \"*args\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"wrapper\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"file_path\",\n            \"operation\",\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Initialize the safe file context.\\n            \\n            Args:\\n                file_path: Path to the file being operated on\\n                operation: Description of the operation being performed\\n                user_id: ID of the user performing the operation\\n                category: Category of the operation\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Enter the context manager for safe file operations.\\n            \\n            Returns:\\n                self: The SafeFileContext instance\",\n          \"name\": \"__enter__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"exc_type\",\n            \"exc_val\",\n            \"exc_tb\"\n          ],\n          \"docstring\": \"Exit the context manager and handle any exceptions.\\n            \\n            Args:\\n                exc_type: Type of exception if any occurred\\n                exc_val: Exception value if any occurred\\n                exc_tb: Exception traceback if any occurred\",\n          \"name\": \"__exit__\"\n        }\n      ]\n    },\n    \"core/file_auditor.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Auditor for tracking file creation and modification patterns.\",\n          \"methods\": [\n            \"__init__\",\n            \"_get_audit_directories\",\n            \"start\",\n            \"stop\"\n          ],\n          \"name\": \"FileAuditor\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"info\",\n            \"warning\",\n            \"debug\",\n            \"error\",\n            \"critical\"\n          ],\n          \"name\": \"_DummyLogger\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"value\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_split_env_list\"\n        },\n        {\n          \"args\": [\n            \"path\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_classify_path\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"start_auditor\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"stop_auditor\"\n        },\n        {\n          \"args\": [\n            \"path\",\n            \"reason\",\n            \"extra\"\n          ],\n          \"docstring\": \"Programmatically record a file creation event.\\n\\n    Safe to call even if auditor disabled. Includes optional stack if FILE_AUDIT_STACK=1.\",\n          \"name\": \"record_created\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get configurable audit directories from environment or use defaults.\",\n          \"name\": \"_get_audit_directories\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Start the file auditor (no-op for now).\",\n          \"name\": \"start\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Stop the file auditor (no-op for now).\",\n          \"name\": \"stop\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"*args\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"info\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"*args\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"warning\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"*args\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"debug\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"*args\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"*args\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"critical\"\n        }\n      ]\n    },\n    \"core/file_operations.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [\n            \"paths\"\n          ],\n          \"docstring\": \"Verify that files exist and are accessible.\\n    \\n    Args:\\n        paths: List of file paths to verify\\n        \\n    Raises:\\n        FileOperationError: If any file is not found or inaccessible\",\n          \"name\": \"verify_file_access\"\n        },\n        {\n          \"args\": [\n            \"file_type\",\n            \"identifier\"\n          ],\n          \"docstring\": \"Determine file path based on file type and identifier.\\n    Updated to support new organized structure.\\n    \\n    Args:\\n        file_type: Type of file ('users', 'messages', 'schedules', 'sent_messages', 'default_messages', 'tasks')\\n        identifier: Identifier for the file (format depends on file_type)\\n        \\n    Returns:\\n        str: Full file path\\n        \\n    Raises:\\n        FileOperationError: If file_type is unknown or identifier format is invalid\",\n          \"name\": \"determine_file_path\"\n        },\n        {\n          \"args\": [\n            \"file_path\"\n          ],\n          \"docstring\": \"Load data from a JSON file with comprehensive error handling and auto-create user files if missing.\\n    \\n    Args:\\n        file_path: Path to the JSON file to load\\n        \\n    Returns:\\n        dict/list: Loaded JSON data, or None if loading failed\",\n          \"name\": \"load_json_data\"\n        },\n        {\n          \"args\": [\n            \"data\",\n            \"file_path\"\n          ],\n          \"docstring\": \"Save data to a JSON file with comprehensive error handling.\\n    \\n    Args:\\n        data: Data to save (must be JSON serializable)\\n        file_path: Path where to save the file\\n        \\n    Returns:\\n        bool: True if successful, False if failed\\n        \\n    Raises:\\n        FileOperationError: If saving fails\",\n          \"name\": \"save_json_data\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"categories\",\n            \"user_preferences\"\n          ],\n          \"docstring\": \"Creates files for a new user in the appropriate structure.\\n    Ensures schedules.json contains a block for each category, plus checkin and task reminder blocks.\\n    \\n    Args:\\n        user_id: The user ID\\n        categories: List of message categories the user is opted into\\n        user_preferences: Optional user preferences dict to determine which files to create\",\n          \"name\": \"create_user_files\"\n        },\n        {\n          \"args\": [\n            \"user_prefs\"\n          ],\n          \"docstring\": \"Determine which features are enabled based on user preferences.\\n    \\n    Args:\\n        user_prefs: User preferences dictionary\\n        \\n    Returns:\\n        tuple: (tasks_enabled, checkins_enabled)\",\n          \"name\": \"_create_user_files__determine_feature_enablement\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"user_prefs\",\n            \"categories\",\n            \"tasks_enabled\",\n            \"checkins_enabled\"\n          ],\n          \"docstring\": \"Create account.json with actual user data.\",\n          \"name\": \"_create_user_files__account_file\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"user_prefs\",\n            \"categories\",\n            \"tasks_enabled\",\n            \"checkins_enabled\"\n          ],\n          \"docstring\": \"Create preferences.json with actual user data.\",\n          \"name\": \"_create_user_files__preferences_file\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"user_prefs\"\n          ],\n          \"docstring\": \"Create user_context.json with actual personalization data.\",\n          \"name\": \"_create_user_files__context_file\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"categories\",\n            \"user_prefs\",\n            \"tasks_enabled\",\n            \"checkins_enabled\"\n          ],\n          \"docstring\": \"Create schedules file with appropriate structure.\",\n          \"name\": \"_create_user_files__schedules_file\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Initialize empty log files if they don't exist.\",\n          \"name\": \"_create_user_files__log_files\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Create sent_messages.json in messages/ subdirectory.\",\n          \"name\": \"_create_user_files__sent_messages_file\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Create task files if tasks are enabled.\",\n          \"name\": \"_create_user_files__task_files\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Create checkins.json only if checkins are enabled.\",\n          \"name\": \"_create_user_files__checkins_file\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"categories\"\n          ],\n          \"docstring\": \"Create message files for each enabled category directly.\",\n          \"name\": \"_create_user_files__message_files\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Auto-update message references and user index.\",\n          \"name\": \"_create_user_files__update_user_references\"\n        }\n      ]\n    },\n    \"core/logger.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Custom formatter that automatically prepends test names to log messages.\",\n          \"methods\": [\n            \"format\"\n          ],\n          \"name\": \"TestContextFormatter\"\n        },\n        {\n          \"docstring\": \"Component-specific logger that writes to dedicated log files.\\n    \\n    Each component gets its own log file with appropriate rotation and formatting.\",\n          \"methods\": [\n            \"__init__\",\n            \"debug\",\n            \"info\",\n            \"warning\",\n            \"error\",\n            \"critical\",\n            \"_log\"\n          ],\n          \"name\": \"ComponentLogger\"\n        },\n        {\n          \"docstring\": \"Custom rotating file handler that moves rotated files to a backup directory.\\n    Supports both time-based and size-based rotation.\",\n          \"methods\": [\n            \"__init__\",\n            \"shouldRollover\",\n            \"doRollover\"\n          ],\n          \"name\": \"BackupDirectoryRotatingFileHandler\"\n        },\n        {\n          \"docstring\": \"Filter to suppress excessive Discord heartbeat warnings while keeping track of them.\\n    \\n    - Allows first 3 heartbeat warnings to pass through\\n    - Suppresses subsequent warnings for 10 minutes\\n    - Logs a summary every hour with total count\",\n          \"methods\": [\n            \"__init__\",\n            \"filter\"\n          ],\n          \"name\": \"HeartbeatWarningFilter\"\n        },\n        {\n          \"docstring\": \"Filter to exclude records for specific logger name prefixes.\\n    Example use: prevent Discord-related logs from going to app.log.\",\n          \"methods\": [\n            \"__init__\",\n            \"filter\"\n          ],\n          \"name\": \"ExcludeLoggerNamesFilter\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__init__\"\n          ],\n          \"name\": \"_DummyLogger\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__init__\",\n            \"debug\",\n            \"info\",\n            \"warning\",\n            \"error\",\n            \"critical\"\n          ],\n          \"name\": \"DummyComponentLogger\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Check if we're running in a testing environment.\",\n          \"name\": \"_is_testing_environment\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Apply TestContextFormatter to all existing loggers when in test mode.\",\n          \"name\": \"apply_test_context_formatter_to_all_loggers\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Get appropriate log paths based on the current environment.\",\n          \"name\": \"_get_log_paths_for_environment\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Get log level from environment variable, default to WARNING for quiet mode.\\n    \\n    Returns:\\n        int: Logging level constant (e.g., logging.WARNING, logging.DEBUG)\",\n          \"name\": \"get_log_level_from_env\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Ensure the logs directory structure exists.\",\n          \"name\": \"ensure_logs_directory\"\n        },\n        {\n          \"args\": [\n            \"component_name\"\n          ],\n          \"docstring\": \"Get or create a component-specific logger.\\n    \\n    Args:\\n        component_name: Name of the component (e.g., 'discord', 'ai', 'user_activity')\\n    \\n    Returns:\\n        ComponentLogger: Logger for the specified component\",\n          \"name\": \"get_component_logger\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Set up logging with file and console handlers. Ensure it is called only once.\\n    \\n    Creates a dual-handler logging system:\\n    - File handler: Always logs at DEBUG level with rotation\\n    - Console handler: Respects verbosity settings (WARNING by default)\\n    \\n    Automatically suppresses noisy third-party library logging.\",\n          \"name\": \"setup_logging\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Set up dedicated error logging for third-party libraries.\\n    \\n    Routes ERROR and CRITICAL messages from asyncio, discord, and aiohttp\\n    to the errors.log file instead of app.log.\",\n          \"name\": \"setup_third_party_error_logging\"\n        },\n        {\n          \"args\": [\n            \"name\"\n          ],\n          \"docstring\": \"Get a logger with the specified name.\\n    \\n    Args:\\n        name: Logger name (usually __name__)\\n    \\n    Returns:\\n        logging.Logger: Configured logger\",\n          \"name\": \"get_logger\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Suppress excessive logging from third-party libraries.\\n    \\n    Sets logging level to WARNING for common noisy libraries to reduce log spam\\n    while keeping important warnings and errors visible.\",\n          \"name\": \"suppress_noisy_logging\"\n        },\n        {\n          \"args\": [\n            \"level\"\n          ],\n          \"docstring\": \"Set the console logging level while keeping file logging at DEBUG.\\n    \\n    Args:\\n        level: logging level (e.g., logging.DEBUG, logging.INFO, logging.WARNING)\",\n          \"name\": \"set_console_log_level\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Toggle between verbose (DEBUG/INFO) and quiet (WARNING+) logging for console output.\\n    File logging always remains at DEBUG level.\\n    \\n    Returns:\\n        bool: True if verbose mode is now enabled, False if quiet mode\",\n          \"name\": \"toggle_verbose_logging\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Get current verbose mode status.\\n    \\n    Returns:\\n        bool: True if verbose mode is enabled\",\n          \"name\": \"get_verbose_mode\"\n        },\n        {\n          \"args\": [\n            \"enabled\"\n          ],\n          \"docstring\": \"Explicitly set verbose mode.\\n    \\n    Args:\\n        enabled (bool): True to enable verbose mode, False for quiet mode\",\n          \"name\": \"set_verbose_mode\"\n        },\n        {\n          \"args\": [\n            \"module_name\"\n          ],\n          \"docstring\": \"Disable debug logging for a specific module.\\n    \\n    Args:\\n        module_name: Name of the module to disable debug logging for\",\n          \"name\": \"disable_module_logging\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Get information about current log files and their sizes.\\n    \\n    Returns:\\n        dict: Information about log files including total size and file count\",\n          \"name\": \"get_log_file_info\"\n        },\n        {\n          \"args\": [\n            \"max_total_size_mb\"\n          ],\n          \"docstring\": \"Clean up old log files if total size exceeds the limit.\\n    \\n    Args:\\n        max_total_size_mb (int): Maximum total size in MB before cleanup (default 50MB)\\n    \\n    Returns:\\n        bool: True if cleanup was performed, False otherwise\",\n          \"name\": \"cleanup_old_logs\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Compress log files older than 7 days and move them to archive directory.\\n    \\n    Returns:\\n        int: Number of files compressed and archived\",\n          \"name\": \"compress_old_logs\"\n        },\n        {\n          \"args\": [\n            \"max_days\"\n          ],\n          \"docstring\": \"Remove archived log files older than specified days.\\n    \\n    Args:\\n        max_days (int): Maximum age in days for archived files (default 30)\\n    \\n    Returns:\\n        int: Number of files removed\",\n          \"name\": \"cleanup_old_archives\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Force restart the logging system by clearing all handlers and reinitializing.\\n    \\n    Useful when logging configuration becomes corrupted or needs to be reset.\\n    \\n    Returns:\\n        bool: True if restart was successful, False otherwise\",\n          \"name\": \"force_restart_logging\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Clear any file locks that might be preventing log rotation.\\n    \\n    This function attempts to handle Windows file locking issues by:\\n    1. Temporarily disabling log rotation\\n    2. Closing all log file handlers\\n    3. Reopening them with fresh file handles\\n    \\n    Returns:\\n        bool: True if locks were cleared successfully, False otherwise\",\n          \"name\": \"clear_log_file_locks\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"record\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"format\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"component_name\",\n            \"log_file_path\",\n            \"level\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"Log debug message with optional structured data.\",\n          \"name\": \"debug\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"Log info message with optional structured data.\",\n          \"name\": \"info\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"Log warning message with optional structured data.\",\n          \"name\": \"warning\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"Log error message with optional structured data.\",\n          \"name\": \"error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"Log critical message with optional structured data.\",\n          \"name\": \"critical\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"level\",\n            \"message\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"Internal logging method with structured data support.\",\n          \"name\": \"_log\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"filename\",\n            \"backup_dir\",\n            \"maxBytes\",\n            \"backupCount\",\n            \"encoding\",\n            \"delay\",\n            \"when\",\n            \"interval\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"record\"\n          ],\n          \"docstring\": \"Determine if rollover should occur based on both time and size.\",\n          \"name\": \"shouldRollover\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Do a rollover, as described in __init__().\",\n          \"name\": \"doRollover\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"record\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"filter\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"excluded_prefixes\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"record\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"filter\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"name\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"name\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"debug\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"info\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"warning\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"message\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"critical\"\n        }\n      ]\n    },\n    \"core/message_management.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Retrieves message categories from the environment variable CATEGORIES.\\n    Allows for either a comma-separated string or a JSON array.\\n    \\n    Returns:\\n        List[str]: List of message categories\",\n          \"name\": \"get_message_categories\"\n        },\n        {\n          \"args\": [\n            \"category\"\n          ],\n          \"docstring\": \"Load default messages for a specific category.\",\n          \"name\": \"load_default_messages\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\",\n            \"message_data\",\n            \"index\"\n          ],\n          \"docstring\": \"Add a new message to a user's category.\\n    \\n    Args:\\n        user_id: The user ID\\n        category: The message category\\n        message_data: Dictionary containing message data\\n        index: Optional position to insert the message (None for append)\",\n          \"name\": \"add_message\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\",\n            \"message_id\",\n            \"updated_data\"\n          ],\n          \"docstring\": \"Edit an existing message in a user's category.\\n    \\n    Args:\\n        user_id: The user ID\\n        category: The message category\\n        message_id: The ID of the message to edit\\n        updated_data: Dictionary containing updated message data\\n        \\n    Raises:\\n        ValidationError: If message ID is not found or category is invalid\",\n          \"name\": \"edit_message\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\",\n            \"message_id\",\n            \"new_message_data\"\n          ],\n          \"docstring\": \"Update a message by its message_id.\\n    \\n    Args:\\n        user_id: The user ID\\n        category: The message category\\n        message_id: The ID of the message to update\\n        new_message_data: Complete new message data to replace the existing message\\n        \\n    Raises:\\n        ValidationError: If message ID is not found or category is invalid\",\n          \"name\": \"update_message\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\",\n            \"message_id\"\n          ],\n          \"docstring\": \"Delete a specific message from a user's category.\\n    \\n    Args:\\n        user_id: The user ID\\n        category: The message category\\n        message_id: The ID of the message to delete\\n        \\n    Raises:\\n        ValidationError: If the message ID is not found or the category is invalid\",\n          \"name\": \"delete_message\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\",\n            \"limit\",\n            \"days_back\"\n          ],\n          \"docstring\": \"Get recent messages with flexible filtering.\\n    \\n    This function replaces get_last_10_messages() with enhanced functionality\\n    that supports both category-specific and cross-category queries.\\n    \\n    Args:\\n        user_id: The user ID\\n        category: Optional category filter (None = all categories)\\n        limit: Maximum number of messages to return\\n        days_back: Only include messages from last N days\\n        \\n    Returns:\\n        List[dict]: List of recent messages, sorted by timestamp descending\",\n          \"name\": \"get_recent_messages\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\",\n            \"message_id\",\n            \"message\",\n            \"delivery_status\",\n            \"time_period\"\n          ],\n          \"docstring\": \"Store sent message in chronological order.\\n    \\n    This function maintains the chronological structure by inserting new messages\\n    in the correct position based on timestamp.\\n    \\n    Args:\\n        user_id: The user ID\\n        category: The message category\\n        message_id: The message ID\\n        message: The message content\\n        delivery_status: Delivery status (default: \\\"sent\\\")\\n        time_period: The time period when the message was sent (e.g., \\\"morning\\\", \\\"evening\\\")\\n        \\n    Returns:\\n        bool: True if message stored successfully\",\n          \"name\": \"store_sent_message\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"days_to_keep\"\n          ],\n          \"docstring\": \"Archive messages older than specified days.\\n    \\n    This function implements file rotation by moving old messages to archive files,\\n    keeping the active sent_messages.json file manageable in size.\\n    \\n    Args:\\n        user_id: The user ID\\n        days_to_keep: Number of days to keep in active file\\n        \\n    Returns:\\n        bool: True if archiving successful\",\n          \"name\": \"archive_old_messages\"\n        },\n        {\n          \"args\": [\n            \"timestamp_str\"\n          ],\n          \"docstring\": \"Parse timestamp string to datetime object.\\n    \\n    Handles multiple timestamp formats for backward compatibility.\\n    \\n    Args:\\n        timestamp_str: Timestamp string to parse\\n        \\n    Returns:\\n        datetime: Parsed datetime object\",\n          \"name\": \"_parse_timestamp\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Create a user's message file for a specific category from default messages.\\n    This is the actual worker function that creates the file.\\n    \\n    Args:\\n        user_id: The user ID\\n        category: The specific category to create a message file for\\n        \\n    Returns:\\n        bool: True if file was created successfully\",\n          \"name\": \"create_message_file_from_defaults\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"categories\"\n          ],\n          \"docstring\": \"Ensure user has message files for specified categories.\\n    Creates messages directory if missing, checks which files are missing, and creates them.\\n    \\n    Args:\\n        user_id: The user ID\\n        categories: List of categories to check/create message files for (can be subset of user's categories)\\n        \\n    Returns:\\n        dict: Summary of the operation with keys:\\n            - success: bool - True if all files were created/validated successfully\\n            - directory_created: bool - True if messages directory was created\\n            - files_checked: int - Number of categories checked\\n            - files_created: int - Number of new files created\\n            - files_existing: int - Number of files that already existed\",\n          \"name\": \"ensure_user_message_files\"\n        },\n        {\n          \"args\": [\n            \"item\"\n          ],\n          \"docstring\": \"Convert timestamp to float for consistent sorting.\\n    \\n    Args:\\n        item: Dictionary containing a timestamp field or other data type\\n        \\n    Returns:\\n        float: Timestamp as float for sorting, or 0.0 for invalid items\",\n          \"name\": \"get_timestamp_for_sorting\"\n        }\n      ]\n    },\n    \"core/response_tracking.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [\n            \"response_type\"\n          ],\n          \"docstring\": \"Get the filename for a response log type.\",\n          \"name\": \"_get_response_log_filename\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"response_data\",\n            \"response_type\"\n          ],\n          \"docstring\": \"Store user response data in appropriate file structure.\",\n          \"name\": \"store_user_response\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"user_message\",\n            \"ai_response\",\n            \"context_used\"\n          ],\n          \"docstring\": \"Store a chat interaction between user and AI.\",\n          \"name\": \"store_chat_interaction\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"response_type\",\n            \"limit\"\n          ],\n          \"docstring\": \"Get recent responses for a user from appropriate file structure.\",\n          \"name\": \"get_recent_responses\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"limit\"\n          ],\n          \"docstring\": \"Get recent check-in responses for a user.\",\n          \"name\": \"get_recent_checkins\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"limit\"\n          ],\n          \"docstring\": \"Get recent chat interactions for a user.\",\n          \"name\": \"get_recent_chat_interactions\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Check if check-ins are enabled for a user.\",\n          \"name\": \"is_user_checkins_enabled\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Get user information for response tracking.\",\n          \"name\": \"get_user_info_for_tracking\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\",\n            \"response_data\"\n          ],\n          \"docstring\": \"Track a user's response to a message.\",\n          \"name\": \"track_user_response\"\n        },\n        {\n          \"args\": [\n            \"item\"\n          ],\n          \"docstring\": \"Convert timestamp to float for consistent sorting\",\n          \"name\": \"get_timestamp_for_sorting\"\n        }\n      ]\n    },\n    \"core/schedule_management.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Get schedule time periods for a specific user and category (new format).\",\n          \"name\": \"get_schedule_time_periods\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\",\n            \"period_name\",\n            \"active\"\n          ],\n          \"docstring\": \"Set whether a schedule period is active or inactive.\\n    \\n    Args:\\n        user_id: The user ID\\n        category: The schedule category\\n        period_name: The name of the period to modify\\n        active: Whether the period should be active (default: True)\\n        \\n    Returns:\\n        bool: True if the period was found and updated, False otherwise\",\n          \"name\": \"set_schedule_period_active\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\",\n            \"period_name\"\n          ],\n          \"docstring\": \"Check if a schedule period is currently active.\\n    \\n    Args:\\n        user_id: The user ID\\n        category: The schedule category\\n        period_name: The name of the period to check\\n        \\n    Returns:\\n        bool: True if the period is active, False otherwise (defaults to True if field is missing)\",\n          \"name\": \"is_schedule_period_active\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Returns the current active time periods for a user and category.\\n    If no active period is found, defaults to the first available period.\",\n          \"name\": \"get_current_time_periods_with_validation\"\n        },\n        {\n          \"args\": [\n            \"category\",\n            \"period_name\",\n            \"start_time\",\n            \"end_time\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"add_schedule_period\"\n        },\n        {\n          \"args\": [\n            \"category\",\n            \"period_name\",\n            \"new_start_time\",\n            \"new_end_time\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"edit_schedule_period\"\n        },\n        {\n          \"args\": [\n            \"category\",\n            \"period_name\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Delete a schedule period from a category.\\n    \\n    Args:\\n        category: The schedule category\\n        period_name: The name of the period to delete\\n        scheduler_manager: Optional scheduler manager for rescheduling (default: None)\",\n          \"name\": \"delete_schedule_period\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Clear the schedule periods cache for a specific user/category or all.\",\n          \"name\": \"clear_schedule_periods_cache\"\n        },\n        {\n          \"args\": [\n            \"time_str\"\n          ],\n          \"docstring\": \"Validate and format a time string to HH:MM format.\\n    \\n    Args:\\n        time_str: Time string to validate and format\\n        \\n    Returns:\\n        str: Formatted time string in HH:MM format\\n        \\n    Raises:\\n        ValueError: If the time format is invalid\",\n          \"name\": \"get_period_data__validate_and_format_time\"\n        },\n        {\n          \"args\": [\n            \"time_24h\"\n          ],\n          \"docstring\": \"Convert 24-hour time string (HH:MM) to 12-hour display format.\\n    \\n    Args:\\n        time_24h (str): Time in 24-hour format (e.g., \\\"14:30\\\")\\n        \\n    Returns:\\n        tuple: (hour_12, minute, is_pm) where:\\n            - hour_12 (int): Hour in 12-hour format (1-12)\\n            - minute (int): Minute (0-59)\\n            - is_pm (bool): True if PM, False if AM\",\n          \"name\": \"get_period_data__time_24h_to_12h_display\"\n        },\n        {\n          \"args\": [\n            \"hour_12\",\n            \"minute\",\n            \"is_pm\"\n          ],\n          \"docstring\": \"Convert 12-hour display format to 24-hour time string.\\n    \\n    Args:\\n        hour_12 (int): Hour in 12-hour format (1-12)\\n        minute (int): Minute (0-59)\\n        is_pm (bool): True if PM, False if AM\\n        \\n    Returns:\\n        str: Time in 24-hour format (HH:MM)\",\n          \"name\": \"get_period_data__time_12h_display_to_24h\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Returns the name of the current day plus 'ALL' for universal day messages.\",\n          \"name\": \"get_current_day_names\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\",\n            \"periods_dict\"\n          ],\n          \"docstring\": \"Replace all schedule periods for a category with the given dict (period_name: {active, days, start_time, end_time}).\",\n          \"name\": \"set_schedule_periods\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Get the schedule days for a user and category.\\n    \\n    Args:\\n        user_id: The user ID\\n        category: The schedule category\\n        \\n    Returns:\\n        list: List of days for the schedule, defaults to all days of the week\",\n          \"name\": \"get_schedule_days\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\",\n            \"days\"\n          ],\n          \"docstring\": \"Set the schedule days for a user and category.\\n    \\n    Args:\\n        user_id: The user ID\\n        category: The schedule category\\n        days: List of days to set for the schedule\",\n          \"name\": \"set_schedule_days\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Get user info for schedule management operations.\",\n          \"name\": \"get_user_info_for_schedule_management\"\n        },\n        {\n          \"args\": [\n            \"item\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"sort_key\"\n        }\n      ]\n    },\n    \"core/schedule_utilities.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [\n            \"schedules\"\n          ],\n          \"docstring\": \"Get list of currently active schedule periods.\\n    \\n    Args:\\n        schedules: Dictionary containing schedule periods\\n        \\n    Returns:\\n        list: List of active schedule period names\",\n          \"name\": \"get_active_schedules\"\n        },\n        {\n          \"args\": [\n            \"schedule_data\",\n            \"current_time\"\n          ],\n          \"docstring\": \"Check if a schedule period is currently active based on time and day.\\n    \\n    Args:\\n        schedule_data: Dictionary containing schedule period data\\n        current_time: Current time to check against (defaults to now)\\n        \\n    Returns:\\n        bool: True if the schedule is active, False otherwise\",\n          \"name\": \"is_schedule_active\"\n        },\n        {\n          \"args\": [\n            \"schedules\",\n            \"current_time\"\n          ],\n          \"docstring\": \"Get list of schedule periods that are currently active based on time and day.\\n    \\n    Args:\\n        schedules: Dictionary containing all schedule periods\\n        current_time: Current time to check against (defaults to now)\\n        \\n    Returns:\\n        list: List of currently active schedule period names\",\n          \"name\": \"get_current_active_schedules\"\n        }\n      ]\n    },\n    \"core/scheduler.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__init__\",\n            \"run_daily_scheduler\",\n            \"stop_scheduler\",\n            \"reset_and_reschedule_daily_messages\",\n            \"is_job_for_category\",\n            \"schedule_all_users_immediately\",\n            \"schedule_new_user\",\n            \"run_full_daily_scheduler\",\n            \"schedule_daily_message_job\",\n            \"schedule_message_for_period\",\n            \"schedule_checkin_at_exact_time\",\n            \"schedule_message_at_random_time\",\n            \"is_time_conflict\",\n            \"get_random_time_within_period\",\n            \"log_scheduled_tasks\",\n            \"handle_sending_scheduled_message\",\n            \"_remove_user_message_job\",\n            \"handle_task_reminder\",\n            \"set_wake_timer\",\n            \"cleanup_old_tasks\",\n            \"clear_all_accumulated_jobs\",\n            \"schedule_all_task_reminders\",\n            \"_select_task_for_reminder__handle_edge_cases\",\n            \"_select_task_for_reminder__calculate_priority_weight\",\n            \"_select_task_for_reminder__calculate_due_date_weight\",\n            \"_select_task_for_reminder__calculate_task_weights\",\n            \"_select_task_for_reminder__select_task_by_weight\",\n            \"select_task_for_reminder\",\n            \"get_random_time_within_task_period\",\n            \"schedule_task_reminder_at_time\",\n            \"schedule_task_reminder\",\n            \"schedule_task_reminder_at_datetime\",\n            \"perform_daily_log_archival\"\n          ],\n          \"name\": \"SchedulerManager\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Standalone function to run the full scheduler for all users.\\n    This can be called from the admin UI without needing a scheduler instance.\",\n          \"name\": \"run_full_scheduler_standalone\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Standalone function to run scheduler for a specific user.\\n    This can be called from the admin UI without needing a scheduler instance.\",\n          \"name\": \"run_user_scheduler_standalone\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Standalone function to run scheduler for a specific user and category.\\n    This can be called from the admin UI without needing a scheduler instance.\",\n          \"name\": \"run_category_scheduler_standalone\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Standalone function to schedule all task reminders for a user.\\n    This can be called from the admin UI without needing a scheduler instance.\",\n          \"name\": \"schedule_all_task_reminders\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Standalone function to clear all accumulated scheduler jobs.\\n    This can be called from the admin UI or service to fix job accumulation issues.\",\n          \"name\": \"clear_all_accumulated_jobs_standalone\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Process schedules for a specific user.\",\n          \"name\": \"process_user_schedules\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Process schedule for a specific user and category.\",\n          \"name\": \"process_category_schedule\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"communication_manager\"\n          ],\n          \"docstring\": \"Initialize the SchedulerManager with communication manager.\\n        \\n        Args:\\n            communication_manager: The communication manager for sending messages\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Starts the daily scheduler in a separate thread that handles all users.\",\n          \"name\": \"run_daily_scheduler\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Stops the scheduler thread.\",\n          \"name\": \"stop_scheduler\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"category\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Resets scheduled tasks for a specific category and reschedules daily messages for that category.\",\n          \"name\": \"reset_and_reschedule_daily_messages\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"job\",\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Determines if a job is scheduled for a specific user and category.\",\n          \"name\": \"is_job_for_category\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Schedule daily messages immediately for all users\",\n          \"name\": \"schedule_all_users_immediately\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Schedule a newly created user immediately.\\n        This method should be called after a new user is created to add them to the scheduler.\\n        \\n        Args:\\n            user_id: The ID of the newly created user\",\n          \"name\": \"schedule_new_user\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Runs the full daily scheduler process - same as system startup.\\n        This includes clearing accumulated jobs, scheduling all users, checkins, and task reminders.\",\n          \"name\": \"run_full_daily_scheduler\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Schedules daily messages immediately for the specified user and category.\\n        Schedules one message per active period in the category.\",\n          \"name\": \"schedule_daily_message_job\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"category\",\n            \"period_name\"\n          ],\n          \"docstring\": \"Schedules a message at a random time within a specific period for a user and category.\",\n          \"name\": \"schedule_message_for_period\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"period_name\"\n          ],\n          \"docstring\": \"Schedule a check-in at the exact time specified in the period.\",\n          \"name\": \"schedule_checkin_at_exact_time\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Schedules a message at a random time within the user's preferred time periods.\",\n          \"name\": \"schedule_message_at_random_time\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"schedule_datetime\"\n          ],\n          \"docstring\": \"Checks if there is a time conflict with any existing scheduled jobs for the user.\",\n          \"name\": \"is_time_conflict\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"category\",\n            \"period\",\n            \"timezone_str\"\n          ],\n          \"docstring\": \"Get a random time within a specified period for a given category.\",\n          \"name\": \"get_random_time_within_period\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Logs all current and upcoming scheduled tasks in a user-friendly manner.\",\n          \"name\": \"log_scheduled_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"category\",\n            \"retry_attempts\",\n            \"retry_delay\"\n          ],\n          \"docstring\": \"Handles the sending of scheduled messages with retries.\\n        This is a one-time job that removes itself after execution.\",\n          \"name\": \"handle_sending_scheduled_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Removes user message jobs from the scheduler after execution.\\n        This makes user message jobs effectively one-time jobs.\",\n          \"name\": \"_remove_user_message_job\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"task_id\",\n            \"retry_attempts\",\n            \"retry_delay\"\n          ],\n          \"docstring\": \"Handles sending task reminders with retries.\",\n          \"name\": \"handle_task_reminder\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"schedule_time\",\n            \"user_id\",\n            \"category\",\n            \"period\",\n            \"wake_ahead_minutes\"\n          ],\n          \"docstring\": \"Set a Windows scheduled task to wake the computer before a scheduled message.\\n        \\n        Args:\\n            schedule_time: The datetime when the message is scheduled\\n            user_id: The user ID\\n            category: The message category\\n            period: The time period name\\n            wake_ahead_minutes: Minutes before schedule_time to wake the computer (default: 4)\",\n          \"name\": \"set_wake_timer\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Cleans up all tasks (scheduled jobs and system tasks) associated with a given user and category.\",\n          \"name\": \"cleanup_old_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Clears all accumulated scheduler jobs and reschedules only the necessary ones.\",\n          \"name\": \"clear_all_accumulated_jobs\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Schedule reminders for all active tasks for a user.\\n        For each reminder period, pick one random task and schedule it at a random time within the period.\",\n          \"name\": \"schedule_all_task_reminders\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"incomplete_tasks\"\n          ],\n          \"docstring\": \"Handle edge cases for task selection.\",\n          \"name\": \"_select_task_for_reminder__handle_edge_cases\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"task\"\n          ],\n          \"docstring\": \"Calculate priority-based weight for a task.\",\n          \"name\": \"_select_task_for_reminder__calculate_priority_weight\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"task\",\n            \"today\"\n          ],\n          \"docstring\": \"Calculate due date proximity weight for a task.\",\n          \"name\": \"_select_task_for_reminder__calculate_due_date_weight\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"incomplete_tasks\",\n            \"today\"\n          ],\n          \"docstring\": \"Calculate weights for all tasks.\",\n          \"name\": \"_select_task_for_reminder__calculate_task_weights\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"task_weights\",\n            \"incomplete_tasks\"\n          ],\n          \"docstring\": \"Select a task based on calculated weights.\",\n          \"name\": \"_select_task_for_reminder__select_task_by_weight\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"incomplete_tasks\"\n          ],\n          \"docstring\": \"Select a task for reminder using priority-based and due date proximity weighting.\\n        \\n        Args:\\n            incomplete_tasks: List of incomplete tasks to choose from\\n            \\n        Returns:\\n            Selected task dictionary\",\n          \"name\": \"select_task_for_reminder\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"start_time\",\n            \"end_time\"\n          ],\n          \"docstring\": \"Generate a random time within a task reminder period.\\n        Args:\\n            start_time: Start time in HH:MM format (e.g., \\\"17:00\\\")\\n            end_time: End time in HH:MM format (e.g., \\\"18:00\\\")\\n        Returns:\\n            Random time in HH:MM format\",\n          \"name\": \"get_random_time_within_task_period\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"task_id\",\n            \"reminder_time\"\n          ],\n          \"docstring\": \"Schedule a reminder for a specific task at the specified time (daily).\",\n          \"name\": \"schedule_task_reminder_at_time\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"task_id\",\n            \"reminder_time\"\n          ],\n          \"docstring\": \"Legacy function for backward compatibility.\\n        Schedule a reminder for a specific task at the specified time.\",\n          \"name\": \"schedule_task_reminder\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"task_id\",\n            \"date_str\",\n            \"time_str\"\n          ],\n          \"docstring\": \"Schedule a reminder for a specific task at a specific date and time.\",\n          \"name\": \"schedule_task_reminder_at_datetime\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Perform daily log archival to compress old logs and clean up archives.\\n        This runs automatically at 02:00 daily via the scheduler.\",\n          \"name\": \"perform_daily_log_archival\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"scheduler_loop\"\n        }\n      ]\n    },\n    \"core/schemas.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"_coerce_bool\",\n            \"_normalize_flags\"\n          ],\n          \"name\": \"FeaturesModel\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"_validate_email\",\n            \"_validate_discord_id\",\n            \"_validate_timezone\"\n          ],\n          \"name\": \"AccountModel\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"_normalize_contact\"\n          ],\n          \"name\": \"ChannelModel\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"_validate_categories\"\n          ],\n          \"name\": \"PreferencesModel\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"_valid_time\",\n            \"_valid_days\"\n          ],\n          \"name\": \"PeriodModel\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"_accept_legacy_shape\"\n          ],\n          \"name\": \"CategoryScheduleModel\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"to_dict\"\n          ],\n          \"name\": \"SchedulesModel\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"_normalize_days\",\n            \"_normalize_periods\"\n          ],\n          \"name\": \"MessageModel\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [],\n          \"name\": \"MessagesFileModel\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"data\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"validate_account_dict\"\n        },\n        {\n          \"args\": [\n            \"data\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"validate_preferences_dict\"\n        },\n        {\n          \"args\": [\n            \"data\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"validate_schedules_dict\"\n        },\n        {\n          \"args\": [\n            \"data\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"validate_messages_file_dict\"\n        },\n        {\n          \"args\": [\n            \"cls\",\n            \"v\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_coerce_bool\"\n        },\n        {\n          \"args\": [\n            \"cls\",\n            \"v\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_normalize_flags\"\n        },\n        {\n          \"args\": [\n            \"cls\",\n            \"v\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_validate_email\"\n        },\n        {\n          \"args\": [\n            \"cls\",\n            \"v\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_validate_discord_id\"\n        },\n        {\n          \"args\": [\n            \"cls\",\n            \"v\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_validate_timezone\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_normalize_contact\"\n        },\n        {\n          \"args\": [\n            \"cls\",\n            \"v\"\n          ],\n          \"docstring\": \"Validate that all categories are in the allowed list.\",\n          \"name\": \"_validate_categories\"\n        },\n        {\n          \"args\": [\n            \"cls\",\n            \"v\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_valid_time\"\n        },\n        {\n          \"args\": [\n            \"cls\",\n            \"v\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_valid_days\"\n        },\n        {\n          \"args\": [\n            \"cls\",\n            \"data\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_accept_legacy_shape\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"to_dict\"\n        },\n        {\n          \"args\": [\n            \"cls\",\n            \"v\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_normalize_days\"\n        },\n        {\n          \"args\": [\n            \"cls\",\n            \"v\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_normalize_periods\"\n        }\n      ]\n    },\n    \"core/service.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Custom exception for initialization errors.\",\n          \"methods\": [],\n          \"name\": \"InitializationError\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__init__\",\n            \"validate_configuration\",\n            \"initialize_paths\",\n            \"_check_and_fix_logging__test_logging_functionality\",\n            \"_check_and_fix_logging__ensure_log_file_exists\",\n            \"_check_and_fix_logging__read_recent_log_content\",\n            \"_check_and_fix_logging__verify_test_message_present\",\n            \"_check_and_fix_logging__check_recent_activity_timestamps\",\n            \"_check_and_fix_logging__force_restart_logging_system\",\n            \"check_and_fix_logging\",\n            \"start\",\n            \"run_service_loop\",\n            \"_check_test_message_requests__get_base_directory\",\n            \"_check_test_message_requests__discover_request_files\",\n            \"_check_test_message_requests__parse_request_file\",\n            \"_check_test_message_requests__validate_request_data\",\n            \"_check_test_message_requests__process_valid_request\",\n            \"_check_test_message_requests__cleanup_request_file\",\n            \"_check_test_message_requests__handle_processing_error\",\n            \"check_test_message_requests\",\n            \"_cleanup_test_message_requests__get_base_directory\",\n            \"_cleanup_test_message_requests__is_test_message_request_file\",\n            \"_cleanup_test_message_requests__remove_request_file\",\n            \"cleanup_test_message_requests\",\n            \"_check_reschedule_requests__get_base_directory\",\n            \"_check_reschedule_requests__discover_request_files\",\n            \"_check_reschedule_requests__parse_request_file\",\n            \"_check_reschedule_requests__validate_request_data\",\n            \"_check_reschedule_requests__process_valid_request\",\n            \"_check_reschedule_requests__cleanup_request_file\",\n            \"_check_reschedule_requests__handle_processing_error\",\n            \"check_reschedule_requests\",\n            \"cleanup_reschedule_requests\",\n            \"shutdown\",\n            \"signal_handler\",\n            \"emergency_shutdown\"\n          ],\n          \"name\": \"MHMService\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Get the scheduler manager instance from the global service.\\n    Safely handle cases where the global 'service' symbol may not be defined yet.\",\n          \"name\": \"get_scheduler_manager\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Main entry point for the MHM backend service.\\n    \\n    Creates and starts the service, handling initialization errors and graceful shutdown.\",\n          \"name\": \"main\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the MHM backend service.\\n        \\n        Sets up communication manager, scheduler manager, and registers emergency shutdown handler.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Validate all configuration settings before starting the service.\",\n          \"name\": \"validate_configuration\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize and verify all required file paths for the service.\\n        \\n        Creates paths for log files, user data directories, and message files for all users.\\n        \\n        Returns:\\n            List[str]: List of all initialized file paths\",\n          \"name\": \"initialize_paths\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_message\"\n          ],\n          \"docstring\": \"Test if logging functionality works by writing a test message and flushing handlers.\",\n          \"name\": \"_check_and_fix_logging__test_logging_functionality\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Ensure the log file exists, creating it if necessary.\",\n          \"name\": \"_check_and_fix_logging__ensure_log_file_exists\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Read the last 1000 characters from the log file to check for recent activity.\",\n          \"name\": \"_check_and_fix_logging__read_recent_log_content\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"recent_content\",\n            \"test_message\",\n            \"test_timestamp\"\n          ],\n          \"docstring\": \"Check if our test message or recent timestamp patterns are present in log content.\",\n          \"name\": \"_check_and_fix_logging__verify_test_message_present\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"recent_content\"\n          ],\n          \"docstring\": \"Check if there's any recent activity within the last 5 minutes using timestamp patterns.\",\n          \"name\": \"_check_and_fix_logging__check_recent_activity_timestamps\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Force restart the logging system and update the global logger.\",\n          \"name\": \"_check_and_fix_logging__force_restart_logging_system\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Check if logging is working and restart if needed\",\n          \"name\": \"check_and_fix_logging\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Start the MHM backend service.\\n        \\n        Initializes communication channels, scheduler, and begins the main service loop.\\n        Sets up signal handlers for graceful shutdown.\",\n          \"name\": \"start\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Keep the service running until shutdown is requested\",\n          \"name\": \"run_service_loop\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the base directory for test message request files.\",\n          \"name\": \"_check_test_message_requests__get_base_directory\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"base_dir\"\n          ],\n          \"docstring\": \"Discover all test message request files in the base directory.\",\n          \"name\": \"_check_test_message_requests__discover_request_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"request_file\"\n          ],\n          \"docstring\": \"Parse and validate a test message request file.\",\n          \"name\": \"_check_test_message_requests__parse_request_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"request_data\",\n            \"filename\"\n          ],\n          \"docstring\": \"Validate request data and check if it should be processed.\",\n          \"name\": \"_check_test_message_requests__validate_request_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"request_data\"\n          ],\n          \"docstring\": \"Process a valid test message request.\",\n          \"name\": \"_check_test_message_requests__process_valid_request\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"request_file\",\n            \"filename\"\n          ],\n          \"docstring\": \"Clean up a processed request file.\",\n          \"name\": \"_check_test_message_requests__cleanup_request_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"request_file\",\n            \"filename\",\n            \"error\"\n          ],\n          \"docstring\": \"Handle errors during request processing.\",\n          \"name\": \"_check_test_message_requests__handle_processing_error\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Check for and process test message request files from admin panel\",\n          \"name\": \"check_test_message_requests\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the base directory for test message request files.\",\n          \"name\": \"_cleanup_test_message_requests__get_base_directory\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"filename\"\n          ],\n          \"docstring\": \"Check if a filename matches the test message request file pattern.\",\n          \"name\": \"_cleanup_test_message_requests__is_test_message_request_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"request_file\",\n            \"filename\"\n          ],\n          \"docstring\": \"Remove a single test message request file with proper error handling.\",\n          \"name\": \"_cleanup_test_message_requests__remove_request_file\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Clean up any remaining test message request files\",\n          \"name\": \"cleanup_test_message_requests\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the base directory for reschedule request files.\",\n          \"name\": \"_check_reschedule_requests__get_base_directory\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"base_dir\"\n          ],\n          \"docstring\": \"Discover all reschedule request files in the base directory.\",\n          \"name\": \"_check_reschedule_requests__discover_request_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"request_file\"\n          ],\n          \"docstring\": \"Parse and validate a reschedule request file.\",\n          \"name\": \"_check_reschedule_requests__parse_request_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"request_data\",\n            \"filename\"\n          ],\n          \"docstring\": \"Validate request data and check if it should be processed.\",\n          \"name\": \"_check_reschedule_requests__validate_request_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"request_data\"\n          ],\n          \"docstring\": \"Process a valid reschedule request.\",\n          \"name\": \"_check_reschedule_requests__process_valid_request\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"request_file\",\n            \"filename\"\n          ],\n          \"docstring\": \"Clean up a processed request file.\",\n          \"name\": \"_check_reschedule_requests__cleanup_request_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"request_file\",\n            \"filename\",\n            \"error\"\n          ],\n          \"docstring\": \"Handle errors during request processing.\",\n          \"name\": \"_check_reschedule_requests__handle_processing_error\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Check for and process reschedule request files from UI\",\n          \"name\": \"check_reschedule_requests\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Clean up any remaining reschedule request files\",\n          \"name\": \"cleanup_reschedule_requests\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Gracefully shutdown the service\",\n          \"name\": \"shutdown\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"signum\",\n            \"frame\"\n          ],\n          \"docstring\": \"Handle shutdown signals for graceful service termination.\\n        \\n        Args:\\n            signum: Signal number\\n            frame: Current stack frame\",\n          \"name\": \"signal_handler\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Emergency shutdown handler registered with atexit\",\n          \"name\": \"emergency_shutdown\"\n        }\n      ]\n    },\n    \"core/service_utilities.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"A utility class for throttling operations based on time intervals.\\n    \\n    Prevents operations from running too frequently by tracking the last execution time.\",\n          \"methods\": [\n            \"__init__\",\n            \"should_run\"\n          ],\n          \"name\": \"Throttler\"\n        },\n        {\n          \"docstring\": \"Exception raised when time format is invalid.\\n    \\n    Used for time parsing and validation operations.\",\n          \"methods\": [],\n          \"name\": \"InvalidTimeFormatError\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Create a reschedule request file that the service will pick up.\\n    \\n    Args:\\n        user_id: The user ID\\n        category: The category to reschedule\\n        \\n    Returns:\\n        bool: True if request was created successfully\",\n          \"name\": \"create_reschedule_request\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Check if the MHM service is currently running\",\n          \"name\": \"is_service_running\"\n        },\n        {\n          \"args\": [\n            \"timeout\"\n          ],\n          \"docstring\": \"Wait for the network to be available, retrying every 5 seconds up to a timeout.\",\n          \"name\": \"wait_for_network\"\n        },\n        {\n          \"args\": [\n            \"datetime_str\",\n            \"timezone_str\"\n          ],\n          \"docstring\": \"Load and localize a datetime string to a specific timezone.\\n    \\n    Args:\\n        datetime_str: Datetime string in format \\\"YYYY-MM-DD HH:MM\\\"\\n        timezone_str: Timezone string (default: 'America/Regina')\\n        \\n    Returns:\\n        datetime: Timezone-aware datetime object\\n        \\n    Raises:\\n        InvalidTimeFormatError: If datetime_str format is invalid\",\n          \"name\": \"load_and_localize_datetime\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"interval\"\n          ],\n          \"docstring\": \"Initialize the throttler with a specified interval.\\n        \\n        Args:\\n            interval: Time interval in seconds between allowed operations\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Check if enough time has passed since the last run to allow another execution.\",\n          \"name\": \"should_run\"\n        }\n      ]\n    },\n    \"core/ui_management.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [\n            \"layout\",\n            \"widget_list\"\n          ],\n          \"docstring\": \"Clear all period widgets from a layout.\\n    \\n    Args:\\n        layout: The QVBoxLayout to clear\\n        widget_list: Optional list to track widgets (will be cleared if provided)\\n    \\n    Returns:\\n        None\",\n          \"name\": \"clear_period_widgets_from_layout\"\n        },\n        {\n          \"args\": [\n            \"layout\",\n            \"period_name\",\n            \"period_data\",\n            \"category\",\n            \"parent_widget\",\n            \"widget_list\",\n            \"delete_callback\"\n          ],\n          \"docstring\": \"Add a period widget to a layout with proper display formatting.\\n    \\n    Args:\\n        layout: The QVBoxLayout to add the widget to\\n        period_name: The period name\\n        period_data: The period data dictionary\\n        category: The category (tasks, checkin, or schedule category)\\n        parent_widget: The parent widget for the period widget\\n        widget_list: Optional list to track widgets\\n        delete_callback: Optional callback for delete signal\\n    \\n    Returns:\\n        The created PeriodRowWidget or None if failed\",\n          \"name\": \"add_period_widget_to_layout\"\n        },\n        {\n          \"args\": [\n            \"layout\",\n            \"user_id\",\n            \"category\",\n            \"parent_widget\",\n            \"widget_list\",\n            \"delete_callback\"\n          ],\n          \"docstring\": \"Load and display period widgets for a specific category.\\n    \\n    Args:\\n        layout: The QVBoxLayout to add widgets to\\n        user_id: The user ID\\n        category: The category (tasks, checkin, or schedule category)\\n        parent_widget: The parent widget for period widgets\\n        widget_list: Optional list to track widgets\\n        delete_callback: Optional callback for delete signal\\n    \\n    Returns:\\n        List of created widgets\",\n          \"name\": \"load_period_widgets_for_category\"\n        },\n        {\n          \"args\": [\n            \"widget_list\",\n            \"category\"\n          ],\n          \"docstring\": \"Collect period data from a list of period widgets.\\n    \\n    Args:\\n        widget_list: List of PeriodRowWidget instances\\n        category: The category (tasks, checkin, or schedule category)\\n    \\n    Returns:\\n        Dictionary of period data with storage-formatted names, each with only 'active', 'days', 'start_time', 'end_time'.\",\n          \"name\": \"collect_period_data_from_widgets\"\n        },\n        {\n          \"args\": [\n            \"period_name\",\n            \"category\"\n          ],\n          \"docstring\": \"Convert period name to display format using existing logic.\\n    \\n    Args:\\n        period_name: The period name to convert\\n        category: The category (tasks, checkin, or schedule category)\\n    \\n    Returns:\\n        Display-formatted period name\",\n          \"name\": \"period_name_for_display\"\n        },\n        {\n          \"args\": [\n            \"display_name\",\n            \"category\"\n          ],\n          \"docstring\": \"Convert display period name to storage format.\\n    \\n    Args:\\n        display_name: The display-formatted period name\\n        category: The category (tasks, checkin, or schedule category)\\n    \\n    Returns:\\n        Storage-formatted period name (preserve original case)\",\n          \"name\": \"period_name_for_storage\"\n        }\n      ]\n    },\n    \"core/user_data_handlers.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [\n            \"data_type\",\n            \"loader_func\",\n            \"file_type\",\n            \"default_fields\",\n            \"metadata_fields\",\n            \"description\"\n          ],\n          \"docstring\": \"Proxy to the original *register_data_loader*.\\n\\n    Imported here so callers can simply do::\\n\\n        from core.user_data_handlers import register_data_loader\\n\\n    \\u2026and forget about *core.user_management*.\",\n          \"name\": \"register_data_loader\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"data_types\",\n            \"fields\",\n            \"auto_create\",\n            \"include_metadata\",\n            \"normalize_on_read\"\n          ],\n          \"docstring\": \"Migrated implementation of get_user_data.\",\n          \"name\": \"get_user_data\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"data_updates\"\n          ],\n          \"docstring\": \"Validate input parameters and initialize result structure.\",\n          \"name\": \"_save_user_data__validate_input\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"valid_types\",\n            \"create_backup\"\n          ],\n          \"docstring\": \"Create backup if needed for major data updates.\",\n          \"name\": \"_save_user_data__create_backup\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"data_updates\",\n            \"valid_types\",\n            \"validate_data\",\n            \"is_new_user\"\n          ],\n          \"docstring\": \"Validate data for new and existing users.\",\n          \"name\": \"_save_user_data__validate_data\"\n        },\n        {\n          \"args\": [\n            \"updated\",\n            \"updates\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Handle legacy preferences compatibility and cleanup.\",\n          \"name\": \"_save_user_data__legacy_preferences\"\n        },\n        {\n          \"args\": [\n            \"dt\",\n            \"updated\"\n          ],\n          \"docstring\": \"Apply Pydantic normalization to data.\",\n          \"name\": \"_save_user_data__normalize_data\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"dt\",\n            \"updates\",\n            \"auto_create\"\n          ],\n          \"docstring\": \"Save a single data type for a user.\",\n          \"name\": \"_save_user_data__save_single_type\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"result\",\n            \"update_index\"\n          ],\n          \"docstring\": \"Update user index and clear cache if needed.\",\n          \"name\": \"_save_user_data__update_index\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"data_updates\",\n            \"auto_create\",\n            \"update_index\",\n            \"create_backup\",\n            \"validate_data\"\n          ],\n          \"docstring\": \"Migrated implementation of save_user_data.\",\n          \"name\": \"save_user_data\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"data_updates\",\n            \"auto_create\"\n          ],\n          \"docstring\": \"Atomic wrapper copied from user_management.\",\n          \"name\": \"save_user_data_transaction\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Return a list of *all* user IDs known to the system.\",\n          \"name\": \"get_all_user_ids\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"schedules_data\"\n          ],\n          \"docstring\": \"Persist a complete schedules dict for *user_id*.\\n\\n    Wrapper around the original helper in **core.user_management** \\u2013 keeps\\n    outside modules decoupled from the legacy path.\",\n          \"name\": \"update_user_schedules\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"updates\",\n            \"auto_create\"\n          ],\n          \"docstring\": \"Update (part of) a user\\u2019s *account.json* file.\\n\\n    This is a thin convenience wrapper around :pyfunc:`save_user_data` that\\n    scopes *updates* to the ``account`` data-type.\",\n          \"name\": \"update_user_account\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"updates\",\n            \"auto_create\"\n          ],\n          \"docstring\": \"Update *preferences.json*.\\n\\n    Includes the extra bookkeeping originally implemented in\\n    ``core.user_management.update_user_preferences`` (default schedule creation\\n    for new categories, message-file creation, etc.) so behaviour remains\\n    unchanged.\",\n          \"name\": \"update_user_preferences\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"updates\",\n            \"auto_create\"\n          ],\n          \"docstring\": \"Update *user_context.json* for the given user.\",\n          \"name\": \"update_user_context\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"updates\",\n            \"auto_create\"\n          ],\n          \"docstring\": \"Specialised helper \\u2013 update only the *preferences.channel* subtree.\",\n          \"name\": \"update_channel_preferences\"\n        }\n      ]\n    },\n    \"core/user_data_manager.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Enhanced user data management with references, backup, and indexing capabilities\",\n          \"methods\": [\n            \"__init__\",\n            \"update_message_references\",\n            \"get_user_message_files\",\n            \"backup_user_data\",\n            \"export_user_data\",\n            \"delete_user_completely\",\n            \"get_user_data_summary\",\n            \"_get_user_data_summary__initialize_summary\",\n            \"_get_user_data_summary__process_core_files\",\n            \"_get_user_data_summary__add_file_info\",\n            \"_get_user_data_summary__add_special_file_details\",\n            \"_get_user_data_summary__add_schedule_details\",\n            \"_get_user_data_summary__add_sent_messages_details\",\n            \"_get_user_data_summary__process_message_files\",\n            \"_get_user_data_summary__ensure_message_files\",\n            \"_get_user_data_summary__process_enabled_message_files\",\n            \"_get_user_data_summary__process_orphaned_message_files\",\n            \"_get_user_data_summary__add_message_file_info\",\n            \"_get_user_data_summary__add_missing_message_file_info\",\n            \"_get_user_data_summary__process_log_files\",\n            \"_get_user_data_summary__add_log_file_info\",\n            \"_get_last_interaction\",\n            \"update_user_index\",\n            \"remove_from_index\",\n            \"rebuild_full_index\",\n            \"search_users\"\n          ],\n          \"name\": \"UserDataManager\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Update message file references for a user.\\n    \\n    Args:\\n        user_id: The user's ID\\n        \\n    Returns:\\n        bool: True if references were updated successfully\",\n          \"name\": \"update_message_references\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"include_messages\"\n          ],\n          \"docstring\": \"Create a backup of user data.\\n    \\n    Args:\\n        user_id: The user's ID\\n        include_messages: Whether to include message files in backup\\n        \\n    Returns:\\n        str: Path to the created backup file\",\n          \"name\": \"backup_user_data\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"export_format\"\n          ],\n          \"docstring\": \"Export user data to a structured format.\\n    \\n    Args:\\n        user_id: The user's ID\\n        export_format: Format for export (currently only \\\"json\\\" supported)\\n        \\n    Returns:\\n        Dict containing all user data in structured format\",\n          \"name\": \"export_user_data\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"create_backup\"\n          ],\n          \"docstring\": \"Completely delete a user and all their data.\\n    \\n    Args:\\n        user_id: The user's ID\\n        create_backup: Whether to create a backup before deletion\\n        \\n    Returns:\\n        bool: True if user was deleted successfully\",\n          \"name\": \"delete_user_completely\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Get a summary of user data.\\n    \\n    Args:\\n        user_id: The user's ID\\n        \\n    Returns:\\n        Dict containing user data summary\",\n          \"name\": \"get_user_data_summary\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Update the user index for a specific user.\\n    \\n    Args:\\n        user_id: The user's ID\\n        \\n    Returns:\\n        bool: True if index was updated successfully\",\n          \"name\": \"update_user_index\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Rebuild the complete user index.\\n    \\n    Returns:\\n        bool: True if index was rebuilt successfully\",\n          \"name\": \"rebuild_user_index\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Get user info using the new centralized data structure.\",\n          \"name\": \"get_user_info_for_data_manager\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Build an index of all users and their message data.\",\n          \"name\": \"build_user_index\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Get a summary of user data and message statistics.\",\n          \"name\": \"get_user_summary\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Get summaries for all users.\",\n          \"name\": \"get_all_user_summaries\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Get an analytics summary for a user including interaction patterns and data usage.\\n    \\n    Args:\\n        user_id: The user's ID\\n        \\n    Returns:\\n        Dict containing analytics summary information\",\n          \"name\": \"get_user_analytics_summary\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the UserDataManager.\\n        \\n        Sets up backup directory and index file path for user data management operations.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Add/update message file references in user profile\",\n          \"name\": \"update_message_references\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Get all message file paths for a user\",\n          \"name\": \"get_user_message_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"include_messages\"\n          ],\n          \"docstring\": \"Create a complete backup of user's data\",\n          \"name\": \"backup_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"export_format\"\n          ],\n          \"docstring\": \"Export all user data to a structured format\",\n          \"name\": \"export_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"create_backup\"\n          ],\n          \"docstring\": \"Completely remove all traces of a user from the system\",\n          \"name\": \"delete_user_completely\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Get a comprehensive summary of user data including file counts and sizes.\\n        \\n        Args:\\n            user_id: The user's ID\\n            \\n        Returns:\\n            Dict containing summary information about the user's data\",\n          \"name\": \"get_user_data_summary\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Initialize the summary structure with default values.\",\n          \"name\": \"_get_user_data_summary__initialize_summary\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"summary\"\n          ],\n          \"docstring\": \"Process core user data files (profile, preferences, schedules, etc.).\",\n          \"name\": \"_get_user_data_summary__process_core_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"file_path\",\n            \"file_type\",\n            \"summary\"\n          ],\n          \"docstring\": \"Add basic file information to the summary.\",\n          \"name\": \"_get_user_data_summary__add_file_info\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"file_path\",\n            \"file_type\",\n            \"summary\"\n          ],\n          \"docstring\": \"Add special details for specific file types (schedules, sent_messages).\",\n          \"name\": \"_get_user_data_summary__add_special_file_details\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"file_path\",\n            \"summary\"\n          ],\n          \"docstring\": \"Add schedule-specific details to the summary.\",\n          \"name\": \"_get_user_data_summary__add_schedule_details\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"file_path\",\n            \"summary\"\n          ],\n          \"docstring\": \"Add sent messages count to the summary.\",\n          \"name\": \"_get_user_data_summary__add_sent_messages_details\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"summary\"\n          ],\n          \"docstring\": \"Process message files for all user categories.\",\n          \"name\": \"_get_user_data_summary__process_message_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"categories\"\n          ],\n          \"docstring\": \"Ensure message files exist for all user categories.\",\n          \"name\": \"_get_user_data_summary__ensure_message_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"categories\",\n            \"summary\"\n          ],\n          \"docstring\": \"Process message files for enabled categories.\",\n          \"name\": \"_get_user_data_summary__process_enabled_message_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"categories\",\n            \"message_files\",\n            \"summary\"\n          ],\n          \"docstring\": \"Process orphaned message files (categories not enabled but files exist).\",\n          \"name\": \"_get_user_data_summary__process_orphaned_message_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"file_path\",\n            \"category\",\n            \"summary\",\n            \"orphaned\"\n          ],\n          \"docstring\": \"Add message file information to the summary.\",\n          \"name\": \"_get_user_data_summary__add_message_file_info\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"file_path\",\n            \"category\",\n            \"summary\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Add information for missing message files.\",\n          \"name\": \"_get_user_data_summary__add_missing_message_file_info\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"summary\"\n          ],\n          \"docstring\": \"Process log files (checkins, chat_interactions).\",\n          \"name\": \"_get_user_data_summary__process_log_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"log_file\",\n            \"log_type\",\n            \"summary\"\n          ],\n          \"docstring\": \"Add log file information to the summary.\",\n          \"name\": \"_get_user_data_summary__add_log_file_info\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Get the timestamp of the user's last interaction with the system.\\n        \\n        Args:\\n            user_id: The user's ID\\n            \\n        Returns:\\n            str: ISO format timestamp of last interaction, or default if none found\",\n          \"name\": \"_get_last_interaction\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Update the user index with current information for a specific user.\\n        \\n        Creates a comprehensive multi-identifier structure:\\n        - Fast lookups: {\\\"internal_username\\\": \\\"UUID\\\", \\\"email\\\": \\\"UUID\\\", \\\"discord_user_id\\\": \\\"UUID\\\", \\\"phone\\\": \\\"UUID\\\"}\\n        - Detailed mapping: {\\\"users\\\": {\\\"UUID\\\": {\\\"internal_username\\\": \\\"...\\\", \\\"active\\\": true, ...}}} for rich info\\n        \\n        Args:\\n            user_id: The user's ID (UUID)\\n            \\n        Returns:\\n            bool: True if index was updated successfully\",\n          \"name\": \"update_user_index\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Remove a user from the index.\\n        \\n        Removes all identifier mappings (internal_username, email, discord_user_id, phone) and detailed mapping.\\n        \\n        Args:\\n            user_id: The user's ID (UUID)\\n            \\n        Returns:\\n            bool: True if user was removed from index successfully\",\n          \"name\": \"remove_from_index\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Rebuild the complete user index from scratch.\\n        \\n        Creates a comprehensive multi-identifier structure:\\n        - Fast lookups: {\\\"internal_username\\\": \\\"UUID\\\", \\\"email:email\\\": \\\"UUID\\\", \\\"discord:discord_id\\\": \\\"UUID\\\", \\\"phone:phone\\\": \\\"UUID\\\"}\\n        - Detailed mapping: {\\\"users\\\": {\\\"UUID\\\": {\\\"internal_username\\\": \\\"...\\\", \\\"active\\\": true, ...}}} for rich info\\n        \\n        Returns:\\n            bool: True if index was rebuilt successfully\",\n          \"name\": \"rebuild_full_index\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"query\",\n            \"search_fields\"\n          ],\n          \"docstring\": \"Search for users based on query string and specified fields.\\n        \\n        Args:\\n            query: Search query string\\n            search_fields: List of fields to search in (default: all fields)\\n            \\n        Returns:\\n            List of user summaries matching the search criteria\",\n          \"name\": \"search_users\"\n        }\n      ]\n    },\n    \"core/user_data_validation.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [\n            \"email\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"is_valid_email\"\n        },\n        {\n          \"args\": [\n            \"phone\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"is_valid_phone\"\n        },\n        {\n          \"args\": [\n            \"time_str\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"validate_schedule_periods__validate_time_format\"\n        },\n        {\n          \"args\": [\n            \"text\"\n          ],\n          \"docstring\": \"Convert text to title case with special handling for technical terms.\",\n          \"name\": \"_shared__title_case\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"data_type\",\n            \"updates\"\n          ],\n          \"docstring\": \"Validate partial updates to an existing user's data.\",\n          \"name\": \"validate_user_update\"\n        },\n        {\n          \"args\": [\n            \"periods\",\n            \"category\"\n          ],\n          \"docstring\": \"Validate schedule periods and return (is_valid, error_messages).\\n    \\n    Args:\\n        periods: Dictionary of period_name -> period_data\\n        category: Category name for error messages (e.g., \\\"tasks\\\", \\\"check-ins\\\")\\n    \\n    Returns:\\n        Tuple of (is_valid, list_of_error_messages)\",\n          \"name\": \"validate_schedule_periods\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"data_updates\"\n          ],\n          \"docstring\": \"Validate complete dataset required for a brand-new user.\",\n          \"name\": \"validate_new_user_data\"\n        },\n        {\n          \"args\": [\n            \"data\"\n          ],\n          \"docstring\": \"Validate *context/personalization* structure.\\n\\n    No field is required; we only type-check fields that are present.\\n    This logic previously lived in ``core.user_management``.\",\n          \"name\": \"validate_personalization_data\"\n        }\n      ]\n    },\n    \"core/user_management.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [\n            \"data_type\",\n            \"loader_func\",\n            \"file_type\",\n            \"default_fields\",\n            \"metadata_fields\",\n            \"description\",\n            \"force\"\n          ],\n          \"docstring\": \"Register a new data loader for the centralized system.\\n    \\n    Args:\\n        data_type: Unique identifier for the data type\\n        loader_func: Function that loads the data\\n        file_type: File type identifier\\n        default_fields: Commonly accessed fields\\n        metadata_fields: Fields that contain metadata\\n        description: Human-readable description\",\n          \"name\": \"register_data_loader\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Ensure required loaders are registered (idempotent).\\n\\n    Mutates the shared USER_DATA_LOADERS in-place, setting any missing/None\\n    loader entries for: account, preferences, context, schedules.\",\n          \"name\": \"register_default_loaders\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"_ensure_default_loaders_once\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Get list of available data types.\",\n          \"name\": \"get_available_data_types\"\n        },\n        {\n          \"args\": [\n            \"data_type\"\n          ],\n          \"docstring\": \"Get information about a specific data type.\",\n          \"name\": \"get_data_type_info\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Get all user IDs from the system.\",\n          \"name\": \"get_all_user_ids\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"auto_create\"\n          ],\n          \"docstring\": \"Load user account data from account.json.\",\n          \"name\": \"_get_user_data__load_account\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"account_data\"\n          ],\n          \"docstring\": \"Save user account data to account.json.\",\n          \"name\": \"_save_user_data__save_account\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"auto_create\"\n          ],\n          \"docstring\": \"Load user preferences data from preferences.json.\",\n          \"name\": \"_get_user_data__load_preferences\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"preferences_data\"\n          ],\n          \"docstring\": \"Save user preferences data to preferences.json.\",\n          \"name\": \"_save_user_data__save_preferences\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"auto_create\"\n          ],\n          \"docstring\": \"Load user context data from user_context.json.\",\n          \"name\": \"_get_user_data__load_context\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"context_data\"\n          ],\n          \"docstring\": \"Save user context data to user_context.json.\",\n          \"name\": \"_save_user_data__save_context\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"auto_create\"\n          ],\n          \"docstring\": \"Load user schedules data from schedules.json.\",\n          \"name\": \"_get_user_data__load_schedules\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"schedules_data\"\n          ],\n          \"docstring\": \"Save user schedules data to schedules.json.\",\n          \"name\": \"_save_user_data__save_schedules\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"schedules_data\"\n          ],\n          \"docstring\": \"Update user schedules data.\",\n          \"name\": \"update_user_schedules\"\n        },\n        {\n          \"args\": [\n            \"category\"\n          ],\n          \"docstring\": \"Create default schedule periods for a new category.\",\n          \"name\": \"create_default_schedule_periods\"\n        },\n        {\n          \"args\": [\n            \"schedules_data\"\n          ],\n          \"docstring\": \"Migrate legacy schedules structure to new format.\",\n          \"name\": \"migrate_legacy_schedules_structure\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\"\n          ],\n          \"docstring\": \"Ensure a category has default schedule periods if it doesn't exist.\",\n          \"name\": \"ensure_category_has_default_schedule\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"updates\",\n            \"auto_create\"\n          ],\n          \"docstring\": \"Update user account information.\",\n          \"name\": \"update_user_account\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"updates\",\n            \"auto_create\"\n          ],\n          \"docstring\": \"Update user context information.\",\n          \"name\": \"update_user_context\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"updates\",\n            \"auto_create\"\n          ],\n          \"docstring\": \"Update channel preferences without triggering category schedule creation.\",\n          \"name\": \"update_channel_preferences\"\n        },\n        {\n          \"args\": [\n            \"user_data\"\n          ],\n          \"docstring\": \"Create a new user with the new data structure.\",\n          \"name\": \"create_new_user\"\n        },\n        {\n          \"args\": [\n            \"internal_username\"\n          ],\n          \"docstring\": \"Helper function: Get user ID by internal username using the user index for fast lookup.\",\n          \"name\": \"_get_user_id_by_identifier__by_internal_username\"\n        },\n        {\n          \"args\": [\n            \"email\"\n          ],\n          \"docstring\": \"Helper function: Get user ID by email using the user index for fast lookup.\",\n          \"name\": \"_get_user_id_by_identifier__by_email\"\n        },\n        {\n          \"args\": [\n            \"phone\"\n          ],\n          \"docstring\": \"Helper function: Get user ID by phone using the user index for fast lookup.\",\n          \"name\": \"_get_user_id_by_identifier__by_phone\"\n        },\n        {\n          \"args\": [\n            \"chat_id\"\n          ],\n          \"docstring\": \"Helper function: Get user ID by chat ID.\",\n          \"name\": \"_get_user_id_by_identifier__by_chat_id\"\n        },\n        {\n          \"args\": [\n            \"discord_user_id\"\n          ],\n          \"docstring\": \"Helper function: Get user ID by Discord user ID using the user index for fast lookup.\",\n          \"name\": \"_get_user_id_by_identifier__by_discord_user_id\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Clear user data caches.\",\n          \"name\": \"clear_user_caches\"\n        },\n        {\n          \"args\": [\n            \"data\"\n          ],\n          \"docstring\": \"Ensure all messages have unique IDs.\",\n          \"name\": \"ensure_unique_ids\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Load messages for all categories and ensure IDs are unique for a user.\",\n          \"name\": \"load_and_ensure_ids\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Ensure all categories in user preferences have corresponding schedules.\",\n          \"name\": \"ensure_all_categories_have_schedules\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Get user's message categories using centralized system.\",\n          \"name\": \"get_user_categories\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"data_types\"\n          ],\n          \"docstring\": \"Get user data with file metadata using centralized system.\",\n          \"name\": \"get_user_data_with_metadata\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Load presets from resources/presets.json (cached).\",\n          \"name\": \"_load_presets_json\"\n        },\n        {\n          \"args\": [\n            \"field\"\n          ],\n          \"docstring\": \"Return predefined options for a personalization field.\",\n          \"name\": \"get_predefined_options\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Get timezone options.\",\n          \"name\": \"get_timezone_options\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Create default personalization data structure.\",\n          \"name\": \"create_default_personalization_data\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"field\"\n          ],\n          \"docstring\": \"Get a specific field from personalization data using centralized system.\",\n          \"name\": \"get_personalization_field\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"field\",\n            \"value\"\n          ],\n          \"docstring\": \"Update a specific field in personalization data using centralized system.\",\n          \"name\": \"update_personalization_field\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"field\",\n            \"item\"\n          ],\n          \"docstring\": \"Add an item to a list field in personalization data using centralized system.\",\n          \"name\": \"add_personalization_item\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"field\",\n            \"item\"\n          ],\n          \"docstring\": \"Remove an item from a list field in personalization data using centralized system.\",\n          \"name\": \"remove_personalization_item\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Clear the personalization cache for a specific user or all users.\",\n          \"name\": \"clear_personalization_cache\"\n        },\n        {\n          \"args\": [\n            \"identifier\"\n          ],\n          \"docstring\": \"Get user ID by any identifier (internal_username, email, discord_user_id, phone).\\n    \\n    Automatically detects the identifier type and uses the appropriate lookup method.\\n    \\n    Args:\\n        identifier: The identifier to look up (can be any supported type)\\n        \\n    Returns:\\n        Optional[str]: User ID if found, None otherwise\",\n          \"name\": \"get_user_id_by_identifier\"\n        }\n      ]\n    },\n    \"run_mhm.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Launch the MHM Manager UI\",\n          \"name\": \"main\"\n        }\n      ]\n    },\n    \"run_tests.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [\n            \"cmd\",\n            \"description\",\n            \"progress_interval\"\n          ],\n          \"docstring\": \"Run a command and return success status with periodic progress logs.\",\n          \"name\": \"run_command\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Print helpful information about test modes.\",\n          \"name\": \"print_test_mode_info\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"main\"\n        }\n      ]\n    },\n    \"tasks/task_management.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Custom exception for task management errors.\",\n          \"methods\": [],\n          \"name\": \"TaskManagementError\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Ensure the task directory structure exists for a user.\",\n          \"name\": \"ensure_task_directory\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Load active tasks for a user.\",\n          \"name\": \"load_active_tasks\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"tasks\"\n          ],\n          \"docstring\": \"Save active tasks for a user.\",\n          \"name\": \"save_active_tasks\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Load completed tasks for a user.\",\n          \"name\": \"load_completed_tasks\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"tasks\"\n          ],\n          \"docstring\": \"Save completed tasks for a user.\",\n          \"name\": \"save_completed_tasks\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"title\",\n            \"description\",\n            \"due_date\",\n            \"due_time\",\n            \"priority\",\n            \"reminder_periods\",\n            \"tags\",\n            \"quick_reminders\",\n            \"recurrence_pattern\",\n            \"recurrence_interval\",\n            \"repeat_after_completion\"\n          ],\n          \"docstring\": \"Create a new task for a user.\",\n          \"name\": \"create_task\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"task_id\",\n            \"updates\"\n          ],\n          \"docstring\": \"Update an existing task.\",\n          \"name\": \"update_task\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"task_id\",\n            \"completion_data\"\n          ],\n          \"docstring\": \"Mark a task as completed.\",\n          \"name\": \"complete_task\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"task_id\"\n          ],\n          \"docstring\": \"Restore a completed task to active status.\",\n          \"name\": \"restore_task\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"task_id\"\n          ],\n          \"docstring\": \"Delete a task (permanently remove it).\",\n          \"name\": \"delete_task\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"task_id\"\n          ],\n          \"docstring\": \"Get a specific task by ID.\",\n          \"name\": \"get_task_by_id\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"days_ahead\"\n          ],\n          \"docstring\": \"Get tasks due within the specified number of days.\",\n          \"name\": \"get_tasks_due_soon\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Check if task management is enabled for a user.\",\n          \"name\": \"are_tasks_enabled\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"task_id\",\n            \"reminder_periods\"\n          ],\n          \"docstring\": \"Schedule reminders for a specific task based on its reminder periods.\",\n          \"name\": \"schedule_task_reminders\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"task_id\"\n          ],\n          \"docstring\": \"Clean up all reminders for a specific task.\",\n          \"name\": \"cleanup_task_reminders\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"tag\"\n          ],\n          \"docstring\": \"Add a new tag to the user's task settings.\",\n          \"name\": \"add_user_task_tag\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Set up default task tags for a user when task management is first enabled.\",\n          \"name\": \"setup_default_task_tags\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"tag\"\n          ],\n          \"docstring\": \"Remove a tag from the user's task settings.\",\n          \"name\": \"remove_user_task_tag\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Get task statistics for a user.\",\n          \"name\": \"get_user_task_stats\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"completed_task\"\n          ],\n          \"docstring\": \"Create the next instance of a recurring task when the current one is completed.\",\n          \"name\": \"_create_next_recurring_task_instance\"\n        },\n        {\n          \"args\": [\n            \"completion_date\",\n            \"recurrence_pattern\",\n            \"recurrence_interval\",\n            \"repeat_after_completion\"\n          ],\n          \"docstring\": \"Calculate the next due date for a recurring task.\",\n          \"name\": \"_calculate_next_due_date\"\n        }\n      ]\n    },\n    \"tests/behavior/test_account_management_real_behavior.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create isolated test environment with temporary directories\",\n          \"name\": \"setup_test_environment\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\",\n            \"base_state\"\n          ],\n          \"docstring\": \"Create test user data with specific base state using centralized utilities\",\n          \"name\": \"create_test_user_data\"\n        },\n        {\n          \"args\": [\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test actual user data loading with file verification\",\n          \"name\": \"test_user_data_loading_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test actual feature enablement with file creation/deletion\",\n          \"name\": \"test_feature_enablement_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test actual category management with file persistence\",\n          \"name\": \"test_category_management_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test actual schedule period management with file persistence\",\n          \"name\": \"test_schedule_period_management_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test complex integration scenarios with multiple operations\",\n          \"name\": \"test_integration_scenarios_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test data consistency across multiple operations\",\n          \"name\": \"test_data_consistency_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"test_dir\"\n          ],\n          \"docstring\": \"Clean up test environment\",\n          \"name\": \"cleanup_test_environment\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Run all real behavior tests\",\n          \"name\": \"main\"\n        }\n      ]\n    },\n    \"tests/behavior/test_ai_chatbot_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test AI chatbot real behavior and side effects.\",\n          \"methods\": [\n            \"test_singleton_behavior_creates_single_instance\",\n            \"test_prompt_manager_creates_actual_file\",\n            \"test_response_cache_actually_stores_and_retrieves_data\",\n            \"test_response_cache_cleanup_actually_removes_entries\",\n            \"test_ai_chatbot_generates_actual_responses\",\n            \"test_ai_chatbot_handles_api_failures_gracefully\",\n            \"test_ai_chatbot_tracks_conversation_history\",\n            \"test_ai_chatbot_uses_user_context_for_personalization\",\n            \"test_ai_chatbot_adaptive_timeout_responds_to_system_resources\",\n            \"test_ai_chatbot_command_parsing_creates_structured_output\",\n            \"test_ai_chatbot_prompt_optimization_improves_performance\",\n            \"test_ai_chatbot_status_reporting_actual_system_state\",\n            \"test_ai_chatbot_system_prompt_integration_test_actual_functionality\",\n            \"test_ai_chatbot_error_handling_preserves_system_stability\",\n            \"test_ai_chatbot_conversation_manager_integration\",\n            \"test_ai_chatbot_user_context_manager_integration\",\n            \"test_ai_chatbot_response_tracking_integration\",\n            \"test_ai_chatbot_performance_under_load\",\n            \"test_ai_chatbot_cache_performance_improvement\",\n            \"test_ai_chatbot_cleanup_and_resource_management\"\n          ],\n          \"name\": \"TestAIChatBotBehavior\"\n        },\n        {\n          \"docstring\": \"Test AI chatbot integration with other system components.\",\n          \"methods\": [\n            \"test_ai_chatbot_with_real_user_data\",\n            \"test_ai_chatbot_error_recovery_with_real_files\",\n            \"test_ai_chatbot_concurrent_access_safety\"\n          ],\n          \"name\": \"TestAIChatBotIntegration\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot singleton actually creates only one instance.\",\n          \"name\": \"test_singleton_behavior_creates_single_instance\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that prompt manager actually creates and manages prompt files.\",\n          \"name\": \"test_prompt_manager_creates_actual_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that response cache actually stores and retrieves data.\",\n          \"name\": \"test_response_cache_actually_stores_and_retrieves_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that response cache cleanup actually removes old entries.\",\n          \"name\": \"test_response_cache_cleanup_actually_removes_entries\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot actually generates responses with real behavior.\",\n          \"name\": \"test_ai_chatbot_generates_actual_responses\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot handles API failures and provides fallbacks.\",\n          \"name\": \"test_ai_chatbot_handles_api_failures_gracefully\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot actually tracks conversation history.\",\n          \"name\": \"test_ai_chatbot_tracks_conversation_history\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot actually uses user context for personalized responses.\",\n          \"name\": \"test_ai_chatbot_uses_user_context_for_personalization\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot adaptive timeout actually responds to system resources.\",\n          \"name\": \"test_ai_chatbot_adaptive_timeout_responds_to_system_resources\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot command parsing actually creates structured output.\",\n          \"name\": \"test_ai_chatbot_command_parsing_creates_structured_output\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot prompt optimization actually improves performance.\",\n          \"name\": \"test_ai_chatbot_prompt_optimization_improves_performance\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot status reporting reflects actual system state.\",\n          \"name\": \"test_ai_chatbot_status_reporting_actual_system_state\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot system prompt integration test actually verifies functionality.\",\n          \"name\": \"test_ai_chatbot_system_prompt_integration_test_actual_functionality\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot error handling actually preserves system stability.\",\n          \"name\": \"test_ai_chatbot_error_handling_preserves_system_stability\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot integrates properly with conversation manager.\",\n          \"name\": \"test_ai_chatbot_conversation_manager_integration\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot integrates properly with user context manager.\",\n          \"name\": \"test_ai_chatbot_user_context_manager_integration\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot integrates properly with response tracking.\",\n          \"name\": \"test_ai_chatbot_response_tracking_integration\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot performs well under load.\",\n          \"name\": \"test_ai_chatbot_performance_under_load\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot cache actually improves performance.\",\n          \"name\": \"test_ai_chatbot_cache_performance_improvement\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot properly manages resources and cleanup.\",\n          \"name\": \"test_ai_chatbot_cleanup_and_resource_management\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test AI chatbot with real user data files.\",\n          \"name\": \"test_ai_chatbot_with_real_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test AI chatbot error recovery with real file operations.\",\n          \"name\": \"test_ai_chatbot_error_recovery_with_real_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that AI chatbot handles concurrent access safely.\",\n          \"name\": \"test_ai_chatbot_concurrent_access_safety\"\n        },\n        {\n          \"args\": [\n            \"thread_id\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"generate_response\"\n        }\n      ]\n    },\n    \"tests/behavior/test_ai_context_builder_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test real behavior of context builder functionality.\",\n          \"methods\": [\n            \"test_context_builder_initialization_creates_components\",\n            \"test_build_user_context_creates_structured_context_data\",\n            \"test_build_user_context_includes_user_data_from_files\",\n            \"test_build_user_context_includes_conversation_history\",\n            \"test_build_user_context_handles_missing_user_data_gracefully\",\n            \"test_build_user_context_includes_current_time\",\n            \"test_build_user_context_includes_recent_checkins\",\n            \"test_build_user_context_without_conversation_history\",\n            \"test_build_user_context_handles_error_conditions\",\n            \"test_build_user_context_creates_fresh_timestamp\",\n            \"test_build_user_context_handles_empty_user_data\",\n            \"test_build_user_context_handles_corrupted_user_data\",\n            \"test_build_user_context_handles_missing_files\",\n            \"test_build_user_context_handles_empty_files\",\n            \"test_build_user_context_handles_long_user_id\",\n            \"test_build_user_context_handles_special_characters_in_user_id\",\n            \"test_build_user_context_handles_unicode_user_id\",\n            \"test_build_user_context_handles_concurrent_access\",\n            \"test_build_user_context_handles_rapid_calls\",\n            \"test_build_user_context_handles_large_user_data\"\n          ],\n          \"name\": \"TestContextBuilderBehavior\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that context builder initialization creates required components.\",\n          \"name\": \"test_context_builder_initialization_creates_components\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context creates actual structured context data.\",\n          \"name\": \"test_build_user_context_creates_structured_context_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context actually reads and includes user data from files.\",\n          \"name\": \"test_build_user_context_includes_user_data_from_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context includes actual conversation history.\",\n          \"name\": \"test_build_user_context_includes_conversation_history\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context handles missing user data gracefully.\",\n          \"name\": \"test_build_user_context_handles_missing_user_data_gracefully\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context includes current time information.\",\n          \"name\": \"test_build_user_context_includes_current_time\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context includes recent checkins information.\",\n          \"name\": \"test_build_user_context_includes_recent_checkins\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context can exclude conversation history.\",\n          \"name\": \"test_build_user_context_without_conversation_history\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context handles error conditions gracefully.\",\n          \"name\": \"test_build_user_context_handles_error_conditions\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context creates fresh timestamp for each call.\",\n          \"name\": \"test_build_user_context_creates_fresh_timestamp\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context handles empty user data gracefully.\",\n          \"name\": \"test_build_user_context_handles_empty_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context handles corrupted user data gracefully.\",\n          \"name\": \"test_build_user_context_handles_corrupted_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context handles missing user files gracefully.\",\n          \"name\": \"test_build_user_context_handles_missing_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context handles empty user files gracefully.\",\n          \"name\": \"test_build_user_context_handles_empty_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context handles long user IDs correctly.\",\n          \"name\": \"test_build_user_context_handles_long_user_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context handles special characters in user IDs.\",\n          \"name\": \"test_build_user_context_handles_special_characters_in_user_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context handles unicode characters in user IDs.\",\n          \"name\": \"test_build_user_context_handles_unicode_user_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context handles concurrent access safely.\",\n          \"name\": \"test_build_user_context_handles_concurrent_access\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context handles rapid successive calls.\",\n          \"name\": \"test_build_user_context_handles_rapid_calls\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that build_user_context handles large user data efficiently.\",\n          \"name\": \"test_build_user_context_handles_large_user_data\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"build_context\"\n        }\n      ]\n    },\n    \"tests/behavior/test_ai_context_builder_coverage_expansion.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test coverage expansion for ContextBuilder module.\",\n          \"methods\": [\n            \"test_analyze_context_with_empty_checkins\",\n            \"test_analyze_context_with_checkin_data\",\n            \"test_analyze_context_with_missing_data\",\n            \"test_determine_trend_improving\",\n            \"test_determine_trend_declining\",\n            \"test_determine_trend_stable\",\n            \"test_determine_trend_insufficient_data\",\n            \"test_calculate_wellness_score_all_factors\",\n            \"test_calculate_wellness_score_no_factors\",\n            \"test_generate_insights_excellent_breakfast\",\n            \"test_generate_insights_poor_breakfast\",\n            \"test_generate_insights_positive_mood\",\n            \"test_generate_insights_low_mood\",\n            \"test_generate_insights_energy_patterns\",\n            \"test_generate_insights_dental_hygiene\",\n            \"test_create_context_prompt_with_profile\",\n            \"test_create_context_prompt_with_user_context\",\n            \"test_create_context_prompt_with_analysis\",\n            \"test_create_task_context\",\n            \"test_create_checkin_context\",\n            \"test_get_context_builder_singleton\",\n            \"test_analyze_context_error_handling\",\n            \"test_create_context_prompt_error_handling\",\n            \"test_create_task_context_error_handling\",\n            \"test_create_checkin_context_error_handling\"\n          ],\n          \"name\": \"TestContextBuilderCoverageExpansion\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test analyze_context with empty recent checkins.\",\n          \"name\": \"test_analyze_context_with_empty_checkins\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test analyze_context with actual checkin data.\",\n          \"name\": \"test_analyze_context_with_checkin_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test analyze_context with missing data fields.\",\n          \"name\": \"test_analyze_context_with_missing_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test _determine_trend with improving values.\",\n          \"name\": \"test_determine_trend_improving\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test _determine_trend with declining values.\",\n          \"name\": \"test_determine_trend_declining\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test _determine_trend with stable values.\",\n          \"name\": \"test_determine_trend_stable\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test _determine_trend with insufficient data.\",\n          \"name\": \"test_determine_trend_insufficient_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test _calculate_wellness_score with all factors present.\",\n          \"name\": \"test_calculate_wellness_score_all_factors\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test _calculate_wellness_score with no factors present.\",\n          \"name\": \"test_calculate_wellness_score_no_factors\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test _generate_insights with excellent breakfast rate.\",\n          \"name\": \"test_generate_insights_excellent_breakfast\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test _generate_insights with poor breakfast rate.\",\n          \"name\": \"test_generate_insights_poor_breakfast\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test _generate_insights with positive mood.\",\n          \"name\": \"test_generate_insights_positive_mood\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test _generate_insights with low mood.\",\n          \"name\": \"test_generate_insights_low_mood\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test _generate_insights with energy patterns.\",\n          \"name\": \"test_generate_insights_energy_patterns\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test _generate_insights with dental hygiene patterns.\",\n          \"name\": \"test_generate_insights_dental_hygiene\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test create_context_prompt with user profile data.\",\n          \"name\": \"test_create_context_prompt_with_profile\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test create_context_prompt with user context data.\",\n          \"name\": \"test_create_context_prompt_with_user_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test create_context_prompt with pre-computed analysis.\",\n          \"name\": \"test_create_context_prompt_with_analysis\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test create_task_context method.\",\n          \"name\": \"test_create_task_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test create_checkin_context method.\",\n          \"name\": \"test_create_checkin_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test get_context_builder singleton behavior.\",\n          \"name\": \"test_get_context_builder_singleton\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test analyze_context error handling.\",\n          \"name\": \"test_analyze_context_error_handling\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test create_context_prompt error handling.\",\n          \"name\": \"test_create_context_prompt_error_handling\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test create_task_context error handling.\",\n          \"name\": \"test_create_task_context_error_handling\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test create_checkin_context error handling.\",\n          \"name\": \"test_create_checkin_context_error_handling\"\n        }\n      ]\n    },\n    \"tests/behavior/test_ai_conversation_history_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test real behavior of conversation history functionality.\",\n          \"methods\": [\n            \"test_conversation_history_initialization_creates_components\",\n            \"test_start_session_creates_actual_session\",\n            \"test_add_message_persists_to_session\",\n            \"test_add_message_appends_to_existing_session\",\n            \"test_get_recent_messages_returns_actual_data\",\n            \"test_get_recent_messages_handles_empty_history\",\n            \"test_clear_history_removes_session_data\",\n            \"test_get_conversation_summary_returns_actual_summary\",\n            \"test_get_conversation_summary_handles_empty_history\",\n            \"test_add_message_includes_timestamp\",\n            \"test_add_message_validates_role\",\n            \"test_add_message_validates_content\",\n            \"test_get_recent_messages_respects_limit\",\n            \"test_get_recent_messages_handles_zero_limit\",\n            \"test_get_recent_messages_handles_negative_limit\",\n            \"test_conversation_history_handles_concurrent_access\",\n            \"test_conversation_history_handles_rapid_access\",\n            \"test_conversation_history_handles_large_messages\",\n            \"test_conversation_history_handles_special_characters\",\n            \"test_conversation_history_handles_unicode_messages\",\n            \"test_end_session_terminates_active_session\",\n            \"test_get_statistics_returns_actual_data\",\n            \"test_delete_session_removes_specific_session\",\n            \"test_get_history_returns_all_sessions\"\n          ],\n          \"name\": \"TestConversationHistoryBehavior\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that conversation history initialization creates required components.\",\n          \"name\": \"test_conversation_history_initialization_creates_components\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that start_session creates actual session data.\",\n          \"name\": \"test_start_session_creates_actual_session\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that add_message actually persists messages to session.\",\n          \"name\": \"test_add_message_persists_to_session\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that add_message appends to existing session.\",\n          \"name\": \"test_add_message_appends_to_existing_session\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that get_recent_messages returns actual session data.\",\n          \"name\": \"test_get_recent_messages_returns_actual_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that get_recent_messages handles empty conversation history.\",\n          \"name\": \"test_get_recent_messages_handles_empty_history\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that clear_history removes actual session data.\",\n          \"name\": \"test_clear_history_removes_session_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that get_conversation_summary returns actual conversation summary.\",\n          \"name\": \"test_get_conversation_summary_returns_actual_summary\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that get_conversation_summary handles empty conversation history.\",\n          \"name\": \"test_get_conversation_summary_handles_empty_history\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that add_message includes timestamp in message data.\",\n          \"name\": \"test_add_message_includes_timestamp\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that add_message validates role parameter.\",\n          \"name\": \"test_add_message_validates_role\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that add_message validates content parameter.\",\n          \"name\": \"test_add_message_validates_content\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that get_recent_messages respects the count limit.\",\n          \"name\": \"test_get_recent_messages_respects_limit\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that get_recent_messages handles zero count gracefully.\",\n          \"name\": \"test_get_recent_messages_handles_zero_limit\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that get_recent_messages handles negative limit.\",\n          \"name\": \"test_get_recent_messages_handles_negative_limit\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that conversation history handles concurrent access safely.\",\n          \"name\": \"test_conversation_history_handles_concurrent_access\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that conversation history handles rapid successive access.\",\n          \"name\": \"test_conversation_history_handles_rapid_access\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that conversation history handles large message content.\",\n          \"name\": \"test_conversation_history_handles_large_messages\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that conversation history handles special characters in messages.\",\n          \"name\": \"test_conversation_history_handles_special_characters\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that conversation history handles unicode messages.\",\n          \"name\": \"test_conversation_history_handles_unicode_messages\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that end_session terminates the active session.\",\n          \"name\": \"test_end_session_terminates_active_session\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that get_statistics returns actual conversation statistics.\",\n          \"name\": \"test_get_statistics_returns_actual_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that delete_session removes a specific session.\",\n          \"name\": \"test_delete_session_removes_specific_session\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that get_history returns all sessions for a user.\",\n          \"name\": \"test_get_history_returns_all_sessions\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"add_message\"\n        }\n      ]\n    },\n    \"tests/behavior/test_auto_cleanup_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test timestamp tracking functionality with real behavior verification.\",\n          \"methods\": [\n            \"temp_tracker_file\",\n            \"test_get_last_cleanup_timestamp_no_file_real_behavior\",\n            \"test_get_last_cleanup_timestamp_with_file_real_behavior\",\n            \"test_update_cleanup_timestamp_real_behavior\"\n          ],\n          \"name\": \"TestAutoCleanupTimestampBehavior\"\n        },\n        {\n          \"docstring\": \"Test cleanup logic and decision making with real behavior verification.\",\n          \"methods\": [\n            \"temp_tracker_file\",\n            \"test_should_run_cleanup_never_cleaned_real_behavior\",\n            \"test_should_run_cleanup_recent_cleanup_real_behavior\",\n            \"test_should_run_cleanup_old_cleanup_real_behavior\",\n            \"test_should_run_cleanup_custom_interval_real_behavior\"\n          ],\n          \"name\": \"TestAutoCleanupLogicBehavior\"\n        },\n        {\n          \"docstring\": \"Test file discovery functionality with real behavior verification.\",\n          \"methods\": [\n            \"temp_test_dir\",\n            \"test_find_pycache_dirs_real_behavior\",\n            \"test_find_pyc_files_real_behavior\",\n            \"test_calculate_cache_size_real_behavior\",\n            \"test_calculate_cache_size_large_cache_scenario_real_behavior\",\n            \"test_calculate_cache_size_file_corruption_handling_real_behavior\",\n            \"test_calculate_cache_size_nonexistent_files_real_behavior\",\n            \"test_calculate_cache_size_empty_inputs_real_behavior\",\n            \"test_calculate_cache_size_permission_error_simulation_real_behavior\",\n            \"test_calculate_cache_size_nested_directory_structure_real_behavior\",\n            \"test_calculate_cache_size_concurrent_file_changes_real_behavior\"\n          ],\n          \"name\": \"TestAutoCleanupFileDiscoveryBehavior\"\n        },\n        {\n          \"docstring\": \"Test cleanup status functionality with real behavior verification.\",\n          \"methods\": [\n            \"temp_tracker_file\",\n            \"test_get_cleanup_status_never_cleaned_real_behavior\",\n            \"test_get_cleanup_status_recent_cleanup_real_behavior\",\n            \"test_get_cleanup_status_overdue_cleanup_real_behavior\",\n            \"test_get_cleanup_status_exactly_30_days_real_behavior\",\n            \"test_get_cleanup_status_29_days_real_behavior\",\n            \"test_get_cleanup_status_31_days_real_behavior\",\n            \"test_get_cleanup_status_very_recent_cleanup_real_behavior\",\n            \"test_get_cleanup_status_very_old_cleanup_real_behavior\",\n            \"test_get_cleanup_status_corrupted_tracker_file_real_behavior\",\n            \"test_get_cleanup_status_empty_tracker_file_real_behavior\",\n            \"test_get_cleanup_status_missing_timestamp_field_real_behavior\",\n            \"test_get_cleanup_status_invalid_timestamp_real_behavior\"\n          ],\n          \"name\": \"TestAutoCleanupStatusBehavior\"\n        },\n        {\n          \"docstring\": \"Test integrated cleanup functionality with real behavior verification.\",\n          \"methods\": [\n            \"temp_test_environment\",\n            \"test_perform_cleanup_real_behavior\",\n            \"test_auto_cleanup_if_needed_real_behavior\",\n            \"test_auto_cleanup_if_needed_not_needed_real_behavior\"\n          ],\n          \"name\": \"TestAutoCleanupIntegrationBehavior\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create temporary tracker file for testing.\",\n          \"name\": \"temp_tracker_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test getting timestamp when no tracker file exists.\",\n          \"name\": \"test_get_last_cleanup_timestamp_no_file_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test getting timestamp from existing tracker file.\",\n          \"name\": \"test_get_last_cleanup_timestamp_with_file_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test updating cleanup timestamp creates file with correct data.\",\n          \"name\": \"test_update_cleanup_timestamp_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create temporary tracker file for testing.\",\n          \"name\": \"temp_tracker_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cleanup decision when never cleaned before.\",\n          \"name\": \"test_should_run_cleanup_never_cleaned_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cleanup decision when recently cleaned.\",\n          \"name\": \"test_should_run_cleanup_recent_cleanup_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cleanup decision when last cleanup was old.\",\n          \"name\": \"test_should_run_cleanup_old_cleanup_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cleanup decision with custom interval.\",\n          \"name\": \"test_should_run_cleanup_custom_interval_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create temporary test directory with cache files.\",\n          \"name\": \"temp_test_dir\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_test_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test finding __pycache__ directories.\",\n          \"name\": \"test_find_pycache_dirs_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_test_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test finding .pyc files.\",\n          \"name\": \"test_find_pyc_files_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_test_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test calculating cache size.\",\n          \"name\": \"test_calculate_cache_size_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_test_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test calculating cache size with large number of files.\",\n          \"name\": \"test_calculate_cache_size_large_cache_scenario_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_test_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cache size calculation when files are corrupted or inaccessible.\",\n          \"name\": \"test_calculate_cache_size_file_corruption_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_test_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cache size calculation with non-existent files.\",\n          \"name\": \"test_calculate_cache_size_nonexistent_files_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_test_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cache size calculation with empty inputs.\",\n          \"name\": \"test_calculate_cache_size_empty_inputs_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_test_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cache size calculation when file access fails.\",\n          \"name\": \"test_calculate_cache_size_permission_error_simulation_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_test_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cache size calculation with deeply nested directories.\",\n          \"name\": \"test_calculate_cache_size_nested_directory_structure_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_test_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cache size calculation when files change during calculation.\",\n          \"name\": \"test_calculate_cache_size_concurrent_file_changes_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create temporary tracker file for testing.\",\n          \"name\": \"temp_tracker_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test status when never cleaned before.\",\n          \"name\": \"test_get_cleanup_status_never_cleaned_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test status when recently cleaned.\",\n          \"name\": \"test_get_cleanup_status_recent_cleanup_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test status when cleanup is overdue.\",\n          \"name\": \"test_get_cleanup_status_overdue_cleanup_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test status when cleanup was exactly 30 days ago (boundary condition).\",\n          \"name\": \"test_get_cleanup_status_exactly_30_days_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test status when cleanup was 29 days ago (just under threshold).\",\n          \"name\": \"test_get_cleanup_status_29_days_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test status when cleanup was 31 days ago (just over threshold).\",\n          \"name\": \"test_get_cleanup_status_31_days_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test status when cleanup was very recent (1 day ago).\",\n          \"name\": \"test_get_cleanup_status_very_recent_cleanup_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test status when cleanup was very old (100+ days ago).\",\n          \"name\": \"test_get_cleanup_status_very_old_cleanup_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test status when tracker file contains invalid JSON.\",\n          \"name\": \"test_get_cleanup_status_corrupted_tracker_file_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test status when tracker file is empty.\",\n          \"name\": \"test_get_cleanup_status_empty_tracker_file_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test status when tracker file is missing timestamp field.\",\n          \"name\": \"test_get_cleanup_status_missing_timestamp_field_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_tracker_file\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test status when tracker file contains invalid timestamp.\",\n          \"name\": \"test_get_cleanup_status_invalid_timestamp_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create temporary test environment with cache files and tracker.\",\n          \"name\": \"temp_test_environment\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_test_environment\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test performing actual cleanup.\",\n          \"name\": \"test_perform_cleanup_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_test_environment\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test automatic cleanup decision and execution.\",\n          \"name\": \"test_auto_cleanup_if_needed_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_test_environment\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test auto cleanup when not needed.\",\n          \"name\": \"test_auto_cleanup_if_needed_not_needed_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"path\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_walk_with_error\"\n        },\n        {\n          \"args\": [\n            \"path\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_exists_with_changes\"\n        }\n      ]\n    },\n    \"tests/behavior/test_backup_manager_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test BackupManager behavior with real file system operations.\",\n          \"methods\": [\n            \"setup_backup_manager\",\n            \"_create_test_config_files\",\n            \"_cleanup_test_files\",\n            \"test_backup_manager_initialization_real_behavior\",\n            \"test_create_backup_with_user_data_real_behavior\",\n            \"test_create_backup_with_config_files_real_behavior\",\n            \"test_create_backup_with_all_components_real_behavior\",\n            \"test_backup_rotation_by_count_real_behavior\",\n            \"test_backup_rotation_by_age_real_behavior\",\n            \"test_list_backups_real_behavior\",\n            \"test_validate_backup_real_behavior\",\n            \"test_validate_backup_with_corrupted_file_real_behavior\",\n            \"test_validate_backup_with_missing_file_real_behavior\",\n            \"test_backup_creation_and_validation_real_behavior\",\n            \"test_restore_backup_with_config_files_real_behavior\",\n            \"test_restore_backup_with_nonexistent_file_real_behavior\",\n            \"test_ensure_backup_directory_real_behavior\",\n            \"test_create_automatic_backup_real_behavior\",\n            \"test_validate_system_state_real_behavior\",\n            \"test_validate_system_state_with_missing_user_dir_real_behavior\",\n            \"test_perform_safe_operation_real_behavior\",\n            \"test_perform_safe_operation_with_failure_real_behavior\",\n            \"test_backup_manager_with_large_user_data_real_behavior\",\n            \"test_backup_manager_error_handling_real_behavior\",\n            \"test_backup_manager_with_empty_user_directory_real_behavior\"\n          ],\n          \"name\": \"TestBackupManagerBehavior\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Set up backup manager with test data directory.\",\n          \"name\": \"setup_backup_manager\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create test configuration files.\",\n          \"name\": \"_create_test_config_files\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Clean up test files and directories.\",\n          \"name\": \"_cleanup_test_files\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test BackupManager initialization creates backup directory.\",\n          \"name\": \"test_backup_manager_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup creation includes user data.\",\n          \"name\": \"test_create_backup_with_user_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup creation includes configuration files.\",\n          \"name\": \"test_create_backup_with_config_files_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup creation with all components.\",\n          \"name\": \"test_create_backup_with_all_components_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup rotation removes old backups by count.\",\n          \"name\": \"test_backup_rotation_by_count_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup rotation removes old backups by age.\",\n          \"name\": \"test_backup_rotation_by_age_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test listing backups returns correct metadata.\",\n          \"name\": \"test_list_backups_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup validation with valid backup.\",\n          \"name\": \"test_validate_backup_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup validation with corrupted file.\",\n          \"name\": \"test_validate_backup_with_corrupted_file_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup validation with missing file.\",\n          \"name\": \"test_validate_backup_with_missing_file_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup creation and validation functionality.\",\n          \"name\": \"test_backup_creation_and_validation_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup restoration with configuration files.\",\n          \"name\": \"test_restore_backup_with_config_files_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup restoration with non-existent file.\",\n          \"name\": \"test_restore_backup_with_nonexistent_file_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup directory creation.\",\n          \"name\": \"test_ensure_backup_directory_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test automatic backup creation.\",\n          \"name\": \"test_create_automatic_backup_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test system state validation.\",\n          \"name\": \"test_validate_system_state_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test system state validation with missing user directory.\",\n          \"name\": \"test_validate_system_state_with_missing_user_dir_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test safe operation with backup and rollback.\",\n          \"name\": \"test_perform_safe_operation_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test safe operation with failure and rollback.\",\n          \"name\": \"test_perform_safe_operation_with_failure_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup manager with large user data.\",\n          \"name\": \"test_backup_manager_with_large_user_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup manager error handling.\",\n          \"name\": \"test_backup_manager_error_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup manager with empty user directory.\",\n          \"name\": \"test_backup_manager_with_empty_user_directory_real_behavior\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_operation\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"failing_operation\"\n        }\n      ]\n    },\n    \"tests/behavior/test_checkin_analytics_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test CheckinAnalytics initialization with real behavior verification.\",\n          \"methods\": [\n            \"test_analytics_initialization_real_behavior\"\n          ],\n          \"name\": \"TestCheckinAnalyticsInitializationBehavior\"\n        },\n        {\n          \"docstring\": \"Test mood trends analysis with real behavior verification.\",\n          \"methods\": [\n            \"analytics\",\n            \"mock_checkins_with_mood\",\n            \"test_mood_trends_no_data_real_behavior\",\n            \"test_mood_trends_with_data_real_behavior\",\n            \"test_mood_trends_invalid_mood_data_real_behavior\"\n          ],\n          \"name\": \"TestCheckinAnalyticsMoodTrendsBehavior\"\n        },\n        {\n          \"docstring\": \"Test habit analysis with real behavior verification.\",\n          \"methods\": [\n            \"analytics\",\n            \"mock_checkins_with_habits\",\n            \"test_habit_analysis_no_data_real_behavior\",\n            \"test_habit_analysis_with_data_real_behavior\"\n          ],\n          \"name\": \"TestCheckinAnalyticsHabitAnalysisBehavior\"\n        },\n        {\n          \"docstring\": \"Test sleep analysis with real behavior verification.\",\n          \"methods\": [\n            \"analytics\",\n            \"mock_checkins_with_sleep\",\n            \"test_sleep_analysis_no_data_real_behavior\",\n            \"test_sleep_analysis_with_data_real_behavior\"\n          ],\n          \"name\": \"TestCheckinAnalyticsSleepAnalysisBehavior\"\n        },\n        {\n          \"docstring\": \"Test wellness score calculation with real behavior verification.\",\n          \"methods\": [\n            \"analytics\",\n            \"mock_checkins_for_wellness\",\n            \"test_wellness_score_no_data_real_behavior\",\n            \"test_wellness_score_with_data_real_behavior\"\n          ],\n          \"name\": \"TestCheckinAnalyticsWellnessScoreBehavior\"\n        },\n        {\n          \"docstring\": \"Test check-in history functionality with real behavior verification.\",\n          \"methods\": [\n            \"analytics\",\n            \"mock_checkins_for_history\",\n            \"test_checkin_history_no_data_real_behavior\",\n            \"test_checkin_history_with_data_real_behavior\"\n          ],\n          \"name\": \"TestCheckinAnalyticsHistoryBehavior\"\n        },\n        {\n          \"docstring\": \"Test completion rate calculation with real behavior verification.\",\n          \"methods\": [\n            \"analytics\",\n            \"mock_checkins_for_completion\",\n            \"test_completion_rate_no_data_real_behavior\",\n            \"test_completion_rate_with_data_real_behavior\"\n          ],\n          \"name\": \"TestCheckinAnalyticsCompletionRateBehavior\"\n        },\n        {\n          \"docstring\": \"Test task weekly stats with real behavior verification.\",\n          \"methods\": [\n            \"analytics\",\n            \"mock_checkins_for_tasks\",\n            \"test_task_weekly_stats_no_data_real_behavior\",\n            \"test_task_weekly_stats_with_data_real_behavior\"\n          ],\n          \"name\": \"TestCheckinAnalyticsTaskStatsBehavior\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test CheckinAnalytics can be initialized.\",\n          \"name\": \"test_analytics_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create CheckinAnalytics instance for testing.\",\n          \"name\": \"analytics\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create mock check-in data with mood information.\",\n          \"name\": \"mock_checkins_with_mood\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"analytics\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test mood trends with no check-in data.\",\n          \"name\": \"test_mood_trends_no_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"analytics\",\n            \"mock_checkins_with_mood\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test mood trends analysis with valid data.\",\n          \"name\": \"test_mood_trends_with_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"analytics\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test mood trends with invalid mood data.\",\n          \"name\": \"test_mood_trends_invalid_mood_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create CheckinAnalytics instance for testing.\",\n          \"name\": \"analytics\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create mock check-in data with habit information.\",\n          \"name\": \"mock_checkins_with_habits\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"analytics\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test habit analysis with no check-in data.\",\n          \"name\": \"test_habit_analysis_no_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"analytics\",\n            \"mock_checkins_with_habits\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test habit analysis with valid data.\",\n          \"name\": \"test_habit_analysis_with_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create CheckinAnalytics instance for testing.\",\n          \"name\": \"analytics\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create mock check-in data with sleep information.\",\n          \"name\": \"mock_checkins_with_sleep\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"analytics\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test sleep analysis with no check-in data.\",\n          \"name\": \"test_sleep_analysis_no_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"analytics\",\n            \"mock_checkins_with_sleep\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test sleep analysis with valid data.\",\n          \"name\": \"test_sleep_analysis_with_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create CheckinAnalytics instance for testing.\",\n          \"name\": \"analytics\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create mock check-in data for wellness scoring.\",\n          \"name\": \"mock_checkins_for_wellness\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"analytics\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test wellness score with no check-in data.\",\n          \"name\": \"test_wellness_score_no_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"analytics\",\n            \"mock_checkins_for_wellness\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test wellness score calculation with valid data.\",\n          \"name\": \"test_wellness_score_with_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create CheckinAnalytics instance for testing.\",\n          \"name\": \"analytics\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create mock check-in data for history testing.\",\n          \"name\": \"mock_checkins_for_history\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"analytics\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test check-in history with no data.\",\n          \"name\": \"test_checkin_history_no_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"analytics\",\n            \"mock_checkins_for_history\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test check-in history with valid data.\",\n          \"name\": \"test_checkin_history_with_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create CheckinAnalytics instance for testing.\",\n          \"name\": \"analytics\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create mock check-in data for completion rate testing.\",\n          \"name\": \"mock_checkins_for_completion\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"analytics\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test completion rate with no data.\",\n          \"name\": \"test_completion_rate_no_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"analytics\",\n            \"mock_checkins_for_completion\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test completion rate calculation with valid data.\",\n          \"name\": \"test_completion_rate_with_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create CheckinAnalytics instance for testing.\",\n          \"name\": \"analytics\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create mock check-in data for task stats testing.\",\n          \"name\": \"mock_checkins_for_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"analytics\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test task weekly stats with no data.\",\n          \"name\": \"test_task_weekly_stats_no_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"analytics\",\n            \"mock_checkins_for_tasks\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test task weekly stats calculation with valid data.\",\n          \"name\": \"test_task_weekly_stats_with_data_real_behavior\"\n        }\n      ]\n    },\n    \"tests/behavior/test_command_parser_coverage_expansion_phase3_simple.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test coverage expansion for command_parser.py - Phase 3 Simple\",\n          \"methods\": [\n            \"setup_method\",\n            \"test_parsing_result_initialization\",\n            \"test_parser_initialization\",\n            \"test_get_suggestions_empty_input\",\n            \"test_get_suggestions_task_keywords\",\n            \"test_get_suggestions_checkin_keywords\",\n            \"test_get_suggestions_profile_keywords\",\n            \"test_get_suggestions_schedule_keywords\",\n            \"test_get_suggestions_analytics_keywords\",\n            \"test_get_suggestions_unknown_keywords\",\n            \"test_extract_task_entities_basic\",\n            \"test_extract_task_entities_with_priority\",\n            \"test_extract_task_entities_with_due_date\",\n            \"test_extract_task_entities_complex\",\n            \"test_extract_task_entities_no_match\",\n            \"test_extract_task_name_from_context_basic\",\n            \"test_extract_task_name_from_context_complex\",\n            \"test_extract_task_name_from_context_no_match\",\n            \"test_extract_update_entities_priority\",\n            \"test_extract_update_entities_due_date\",\n            \"test_extract_update_entities_due_short\",\n            \"test_extract_update_entities_complex\",\n            \"test_extract_update_entities_no_match\",\n            \"test_extract_intent_from_ai_response_create_task\",\n            \"test_extract_intent_from_ai_response_list_tasks\",\n            \"test_extract_intent_from_ai_response_complete_task\",\n            \"test_extract_intent_from_ai_response_start_checkin\",\n            \"test_extract_intent_from_ai_response_no_match\",\n            \"test_extract_intent_from_ai_response_case_insensitive\",\n            \"test_parse_command_function\",\n            \"test_parse_command_function_empty\",\n            \"test_parse_command_function_none\",\n            \"test_get_enhanced_command_parser_singleton\",\n            \"test_parser_parse_method\",\n            \"test_parser_parse_method_empty\",\n            \"test_parser_parse_method_none\",\n            \"test_parser_parse_method_whitespace\",\n            \"test_parser_with_mock_ai_chatbot\",\n            \"test_parser_with_mock_interaction_handlers\",\n            \"test_error_handling_in_parsing\",\n            \"test_pattern_matching_edge_cases\",\n            \"test_parser_integration_with_real_inputs\",\n            \"test_parser_suggestions_integration\",\n            \"test_parser_entity_extraction_integration\",\n            \"test_parser_ai_response_processing\",\n            \"test_parser_initialization_components\",\n            \"test_parser_method_signatures\",\n            \"test_parser_robustness\"\n          ],\n          \"name\": \"TestCommandParserCoverageExpansionPhase3Simple\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Set up test fixtures\",\n          \"name\": \"setup_method\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test ParsingResult initialization\",\n          \"name\": \"test_parsing_result_initialization\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test EnhancedCommandParser initialization\",\n          \"name\": \"test_parser_initialization\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test get_suggestions with empty input\",\n          \"name\": \"test_get_suggestions_empty_input\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test get_suggestions with task-related keywords\",\n          \"name\": \"test_get_suggestions_task_keywords\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test get_suggestions with check-in related keywords\",\n          \"name\": \"test_get_suggestions_checkin_keywords\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test get_suggestions with profile-related keywords\",\n          \"name\": \"test_get_suggestions_profile_keywords\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test get_suggestions with schedule-related keywords\",\n          \"name\": \"test_get_suggestions_schedule_keywords\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test get_suggestions with analytics-related keywords\",\n          \"name\": \"test_get_suggestions_analytics_keywords\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test get_suggestions with unknown keywords\",\n          \"name\": \"test_get_suggestions_unknown_keywords\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_task_entities with basic input\",\n          \"name\": \"test_extract_task_entities_basic\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_task_entities with priority keywords\",\n          \"name\": \"test_extract_task_entities_with_priority\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_task_entities with due date\",\n          \"name\": \"test_extract_task_entities_with_due_date\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_task_entities with complex input\",\n          \"name\": \"test_extract_task_entities_complex\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_task_entities with no matching patterns\",\n          \"name\": \"test_extract_task_entities_no_match\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_task_name_from_context with basic input\",\n          \"name\": \"test_extract_task_name_from_context_basic\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_task_name_from_context with complex input\",\n          \"name\": \"test_extract_task_name_from_context_complex\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_task_name_from_context with no matching patterns\",\n          \"name\": \"test_extract_task_name_from_context_no_match\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_update_entities with priority\",\n          \"name\": \"test_extract_update_entities_priority\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_update_entities with due date\",\n          \"name\": \"test_extract_update_entities_due_date\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_update_entities with short due format\",\n          \"name\": \"test_extract_update_entities_due_short\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_update_entities with multiple entities\",\n          \"name\": \"test_extract_update_entities_complex\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_update_entities with no matching patterns\",\n          \"name\": \"test_extract_update_entities_no_match\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_intent_from_ai_response with create task\",\n          \"name\": \"test_extract_intent_from_ai_response_create_task\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_intent_from_ai_response with list tasks\",\n          \"name\": \"test_extract_intent_from_ai_response_list_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_intent_from_ai_response with complete task\",\n          \"name\": \"test_extract_intent_from_ai_response_complete_task\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_intent_from_ai_response with start checkin\",\n          \"name\": \"test_extract_intent_from_ai_response_start_checkin\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_intent_from_ai_response with no matching patterns\",\n          \"name\": \"test_extract_intent_from_ai_response_no_match\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test _extract_intent_from_ai_response with case insensitive matching\",\n          \"name\": \"test_extract_intent_from_ai_response_case_insensitive\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test the parse_command convenience function\",\n          \"name\": \"test_parse_command_function\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test the parse_command convenience function with empty input\",\n          \"name\": \"test_parse_command_function_empty\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test the parse_command convenience function with None input\",\n          \"name\": \"test_parse_command_function_none\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test get_enhanced_command_parser returns singleton\",\n          \"name\": \"test_get_enhanced_command_parser_singleton\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test the parser's parse method\",\n          \"name\": \"test_parser_parse_method\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test the parser's parse method with empty input\",\n          \"name\": \"test_parser_parse_method_empty\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test the parser's parse method with None input\",\n          \"name\": \"test_parser_parse_method_none\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test the parser's parse method with whitespace-only input\",\n          \"name\": \"test_parser_parse_method_whitespace\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test parser with mocked AI chatbot\",\n          \"name\": \"test_parser_with_mock_ai_chatbot\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test parser with mocked interaction handlers\",\n          \"name\": \"test_parser_with_mock_interaction_handlers\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test error handling in parsing methods\",\n          \"name\": \"test_error_handling_in_parsing\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test pattern matching with edge cases\",\n          \"name\": \"test_pattern_matching_edge_cases\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test parser integration with real input patterns\",\n          \"name\": \"test_parser_integration_with_real_inputs\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test parser suggestions integration\",\n          \"name\": \"test_parser_suggestions_integration\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test parser entity extraction integration\",\n          \"name\": \"test_parser_entity_extraction_integration\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test parser AI response processing\",\n          \"name\": \"test_parser_ai_response_processing\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test parser initialization components\",\n          \"name\": \"test_parser_initialization_components\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test parser method signatures\",\n          \"name\": \"test_parser_method_signatures\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test parser robustness with various inputs\",\n          \"name\": \"test_parser_robustness\"\n        }\n      ]\n    },\n    \"tests/behavior/test_communication_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test cases for the CommunicationManager class.\",\n          \"methods\": [\n            \"temp_dir\",\n            \"comm_manager\",\n            \"mock_channel_config\",\n            \"realistic_mock_channel\",\n            \"test_communication_manager_singleton\",\n            \"test_communication_manager_initialization\",\n            \"test_initialize_channels_from_config\",\n            \"test_get_active_channels\",\n            \"test_send_message_sync_with_realistic_channel\",\n            \"test_send_message_sync_channel_not_ready\",\n            \"test_send_message_sync_channel_not_found\"\n          ],\n          \"name\": \"TestCommunicationManager\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_path_factory\"\n          ],\n          \"docstring\": \"Provide a per-test directory under tests/data/tmp.\",\n          \"name\": \"temp_dir\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create a CommunicationManager instance for testing.\",\n          \"name\": \"comm_manager\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create a mock channel configuration.\",\n          \"name\": \"mock_channel_config\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create a realistic mock channel with proper async methods.\",\n          \"name\": \"realistic_mock_channel\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\"\n          ],\n          \"docstring\": \"Test that CommunicationManager follows singleton pattern.\",\n          \"name\": \"test_communication_manager_singleton\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\"\n          ],\n          \"docstring\": \"Test CommunicationManager initialization.\",\n          \"name\": \"test_communication_manager_initialization\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_factory\",\n            \"comm_manager\",\n            \"mock_channel_config\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test channel initialization from configuration with realistic channel behavior.\",\n          \"name\": \"test_initialize_channels_from_config\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test getting active channels with realistic channel setup.\",\n          \"name\": \"test_get_active_channels\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test synchronous message sending with realistic channel behavior.\",\n          \"name\": \"test_send_message_sync_with_realistic_channel\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test synchronous message sending when channel is not ready.\",\n          \"name\": \"test_send_message_sync_channel_not_ready\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\"\n          ],\n          \"docstring\": \"Test synchronous message sending when channel doesn't exist.\",\n          \"name\": \"test_send_message_sync_channel_not_found\"\n        }\n      ]\n    },\n    \"tests/behavior/test_communication_command_parser_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test real behavior of command parser functionality.\",\n          \"methods\": [\n            \"test_command_parser_initialization_creates_components\"\n          ],\n          \"name\": \"TestCommandParserBehavior\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that command parser initialization creates required components.\",\n          \"name\": \"test_command_parser_initialization_creates_components\"\n        }\n      ]\n    },\n    \"tests/behavior/test_communication_factory_coverage_expansion.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test coverage expansion for Communication Factory module.\",\n          \"methods\": [\n            \"test_initialize_registry_already_initialized\",\n            \"test_initialize_registry_with_import_error\",\n            \"test_initialize_registry_with_attribute_error\",\n            \"test_initialize_registry_successful_registration\",\n            \"test_create_channel_unknown_type\",\n            \"test_create_channel_successful_creation\",\n            \"test_get_registered_channels_empty_registry\",\n            \"test_get_registered_channels_with_channels\",\n            \"test_factory_error_handling_initialization\",\n            \"test_factory_error_handling_create_channel\",\n            \"test_factory_error_handling_get_channels\",\n            \"test_factory_registry_persistence\",\n            \"test_factory_dynamic_import_handling\",\n            \"test_factory_config_integration\",\n            \"test_factory_logging_behavior\",\n            \"test_factory_singleton_behavior\"\n          ],\n          \"name\": \"TestCommunicationFactoryCoverageExpansion\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__init__\",\n            \"channel_type\"\n          ],\n          \"name\": \"MockChannel\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__init__\",\n            \"channel_type\"\n          ],\n          \"name\": \"ErrorChannel\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test _initialize_registry when already initialized.\",\n          \"name\": \"test_initialize_registry_already_initialized\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test _initialize_registry with import error.\",\n          \"name\": \"test_initialize_registry_with_import_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test _initialize_registry with attribute error.\",\n          \"name\": \"test_initialize_registry_with_attribute_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test _initialize_registry with successful channel registration.\",\n          \"name\": \"test_initialize_registry_successful_registration\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test create_channel with unknown channel type.\",\n          \"name\": \"test_create_channel_unknown_type\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test create_channel with successful channel creation.\",\n          \"name\": \"test_create_channel_successful_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test get_registered_channels with empty registry.\",\n          \"name\": \"test_get_registered_channels_empty_registry\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test get_registered_channels with registered channels.\",\n          \"name\": \"test_get_registered_channels_with_channels\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test factory error handling during initialization.\",\n          \"name\": \"test_factory_error_handling_initialization\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test factory error handling during channel creation.\",\n          \"name\": \"test_factory_error_handling_create_channel\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test factory error handling during get_registered_channels.\",\n          \"name\": \"test_factory_error_handling_get_channels\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that registry persists between calls.\",\n          \"name\": \"test_factory_registry_persistence\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test factory handling of dynamic imports.\",\n          \"name\": \"test_factory_dynamic_import_handling\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test factory integration with configuration system.\",\n          \"name\": \"test_factory_config_integration\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test factory logging behavior.\",\n          \"name\": \"test_factory_logging_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test factory singleton-like behavior.\",\n          \"name\": \"test_factory_singleton_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"config\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"channel_type\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"config\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"channel_type\"\n        }\n      ]\n    },\n    \"tests/behavior/test_communication_interaction_manager_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test real behavior of interaction manager functionality.\",\n          \"methods\": [\n            \"test_interaction_manager_initialization_creates_components\",\n            \"test_process_message_creates_interaction_record\",\n            \"test_process_message_handles_command_parsing\",\n            \"test_process_message_handles_conversation_flow\",\n            \"test_process_message_handles_ai_chat\",\n            \"test_process_message_includes_user_context\",\n            \"test_process_message_handles_task_commands\",\n            \"test_process_message_handles_schedule_commands\",\n            \"test_process_message_handles_checkin_commands\",\n            \"test_process_message_handles_profile_commands\",\n            \"test_process_message_handles_help_commands\",\n            \"test_process_message_handles_unknown_commands\",\n            \"test_process_message_handles_empty_message\",\n            \"test_process_message_handles_whitespace_only_message\",\n            \"test_process_message_includes_timestamp\",\n            \"test_process_message_includes_interaction_type\",\n            \"test_process_message_handles_long_messages\",\n            \"test_process_message_handles_special_characters\",\n            \"test_process_message_handles_unicode_characters\",\n            \"test_process_message_handles_mixed_content\",\n            \"test_process_message_handles_conversation_context\",\n            \"test_process_message_handles_error_conditions\",\n            \"test_process_message_handles_concurrent_access\",\n            \"test_process_message_handles_rate_limiting\",\n            \"test_process_message_handles_user_preferences\",\n            \"test_process_message_handles_feature_flags\"\n          ],\n          \"name\": \"TestInteractionManagerBehavior\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that interaction manager initialization creates required components.\",\n          \"name\": \"test_interaction_manager_initialization_creates_components\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message creates actual interaction record.\",\n          \"name\": \"test_process_message_creates_interaction_record\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles command parsing correctly.\",\n          \"name\": \"test_process_message_handles_command_parsing\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles conversation flow correctly.\",\n          \"name\": \"test_process_message_handles_conversation_flow\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles AI chat correctly.\",\n          \"name\": \"test_process_message_handles_ai_chat\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message includes user context in processing.\",\n          \"name\": \"test_process_message_includes_user_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles task-related commands.\",\n          \"name\": \"test_process_message_handles_task_commands\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles schedule-related commands.\",\n          \"name\": \"test_process_message_handles_schedule_commands\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles checkin-related commands.\",\n          \"name\": \"test_process_message_handles_checkin_commands\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles profile-related commands.\",\n          \"name\": \"test_process_message_handles_profile_commands\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles help commands.\",\n          \"name\": \"test_process_message_handles_help_commands\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles unknown commands gracefully.\",\n          \"name\": \"test_process_message_handles_unknown_commands\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles empty messages.\",\n          \"name\": \"test_process_message_handles_empty_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles whitespace-only messages.\",\n          \"name\": \"test_process_message_handles_whitespace_only_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message includes timestamp in result.\",\n          \"name\": \"test_process_message_includes_timestamp\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message includes interaction type in result.\",\n          \"name\": \"test_process_message_includes_interaction_type\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles long messages correctly.\",\n          \"name\": \"test_process_message_handles_long_messages\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles special characters correctly.\",\n          \"name\": \"test_process_message_handles_special_characters\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles unicode characters correctly.\",\n          \"name\": \"test_process_message_handles_unicode_characters\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles mixed content types.\",\n          \"name\": \"test_process_message_handles_mixed_content\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message maintains conversation context.\",\n          \"name\": \"test_process_message_handles_conversation_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles error conditions gracefully.\",\n          \"name\": \"test_process_message_handles_error_conditions\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles concurrent access safely.\",\n          \"name\": \"test_process_message_handles_concurrent_access\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message handles rate limiting correctly.\",\n          \"name\": \"test_process_message_handles_rate_limiting\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message respects user preferences.\",\n          \"name\": \"test_process_message_handles_user_preferences\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that process_message respects feature flags.\",\n          \"name\": \"test_process_message_handles_feature_flags\"\n        }\n      ]\n    },\n    \"tests/behavior/test_communication_manager_coverage_expansion.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Comprehensive tests for CommunicationManager uncovered functionality.\",\n          \"methods\": [\n            \"test_data_dir\",\n            \"comm_manager\",\n            \"mock_channel_config\",\n            \"realistic_mock_channel\",\n            \"test_message_queuing_real_behavior\",\n            \"test_retry_thread_management_real_behavior\",\n            \"test_restart_monitor_management_real_behavior\",\n            \"test_channel_restart_monitoring_real_behavior\",\n            \"test_channel_restart_attempt_real_behavior\",\n            \"test_retry_queue_processing_real_behavior\",\n            \"test_retry_queue_processing_with_failure_real_behavior\",\n            \"test_async_channel_initialization_real_behavior\",\n            \"test_channel_initialization_with_retry_real_behavior\",\n            \"test_sync_channel_initialization_real_behavior\",\n            \"test_default_channel_configs_real_behavior\",\n            \"test_async_startup_real_behavior\",\n            \"test_sync_startup_real_behavior\",\n            \"test_async_message_sending_real_behavior\",\n            \"test_async_message_sending_channel_not_ready_real_behavior\",\n            \"test_logging_health_check_real_behavior\",\n            \"test_broadcast_message_real_behavior\",\n            \"test_get_channel_status_real_behavior\",\n            \"test_get_all_statuses_real_behavior\",\n            \"test_health_check_all_real_behavior\",\n            \"test_discord_connectivity_status_real_behavior\",\n            \"test_async_shutdown_real_behavior\",\n            \"test_sync_shutdown_real_behavior\",\n            \"test_receive_messages_real_behavior\",\n            \"test_handle_message_sending_real_behavior\",\n            \"test_get_recipient_for_service_real_behavior\",\n            \"test_should_send_checkin_prompt_real_behavior\",\n            \"test_handle_scheduled_checkin_real_behavior\",\n            \"test_send_checkin_prompt_real_behavior\",\n            \"test_send_ai_generated_message_real_behavior\",\n            \"test_send_predefined_message_real_behavior\",\n            \"test_handle_task_reminder_real_behavior\",\n            \"test_create_task_reminder_message_real_behavior\",\n            \"test_event_loop_setup_real_behavior\",\n            \"test_run_async_sync_real_behavior\",\n            \"test_set_scheduler_manager_real_behavior\",\n            \"test_start_all_real_behavior\",\n            \"test_stop_all_real_behavior\"\n          ],\n          \"name\": \"TestCommunicationManagerCoverageExpansion\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_path_factory\"\n          ],\n          \"docstring\": \"Provide per-test directory under tests/data/tmp.\",\n          \"name\": \"test_data_dir\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create a CommunicationManager instance for testing.\",\n          \"name\": \"comm_manager\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create a mock channel configuration.\",\n          \"name\": \"mock_channel_config\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create a realistic mock channel with proper async methods.\",\n          \"name\": \"realistic_mock_channel\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\"\n          ],\n          \"docstring\": \"Test message queuing functionality for failed messages.\",\n          \"name\": \"test_message_queuing_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\"\n          ],\n          \"docstring\": \"Test retry thread start/stop functionality.\",\n          \"name\": \"test_retry_thread_management_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\"\n          ],\n          \"docstring\": \"Test restart monitor thread start/stop functionality.\",\n          \"name\": \"test_restart_monitor_management_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test channel restart monitoring functionality.\",\n          \"name\": \"test_channel_restart_monitoring_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\",\n            \"mock_channel_config\"\n          ],\n          \"docstring\": \"Test channel restart attempt functionality.\",\n          \"name\": \"test_channel_restart_attempt_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test retry queue processing functionality.\",\n          \"name\": \"test_retry_queue_processing_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test retry queue processing when message sending fails.\",\n          \"name\": \"test_retry_queue_processing_with_failure_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\",\n            \"mock_channel_config\"\n          ],\n          \"docstring\": \"Test async channel initialization functionality.\",\n          \"name\": \"test_async_channel_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\",\n            \"mock_channel_config\"\n          ],\n          \"docstring\": \"Test channel initialization with retry logic.\",\n          \"name\": \"test_channel_initialization_with_retry_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\",\n            \"mock_channel_config\"\n          ],\n          \"docstring\": \"Test synchronous channel initialization functionality.\",\n          \"name\": \"test_sync_channel_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\"\n          ],\n          \"docstring\": \"Test default channel configuration generation.\",\n          \"name\": \"test_default_channel_configs_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\",\n            \"mock_channel_config\"\n          ],\n          \"docstring\": \"Test async startup functionality.\",\n          \"name\": \"test_async_startup_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\",\n            \"mock_channel_config\"\n          ],\n          \"docstring\": \"Test synchronous startup functionality.\",\n          \"name\": \"test_sync_startup_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test async message sending functionality.\",\n          \"name\": \"test_async_message_sending_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test async message sending when channel is not ready.\",\n          \"name\": \"test_async_message_sending_channel_not_ready_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\"\n          ],\n          \"docstring\": \"Test logging health check functionality.\",\n          \"name\": \"test_logging_health_check_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test broadcast message functionality.\",\n          \"name\": \"test_broadcast_message_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test getting channel status functionality.\",\n          \"name\": \"test_get_channel_status_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test getting all channel statuses functionality.\",\n          \"name\": \"test_get_all_statuses_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test health check all channels functionality.\",\n          \"name\": \"test_health_check_all_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test Discord connectivity status functionality.\",\n          \"name\": \"test_discord_connectivity_status_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test async shutdown functionality.\",\n          \"name\": \"test_async_shutdown_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test synchronous shutdown functionality.\",\n          \"name\": \"test_sync_shutdown_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test receive messages functionality.\",\n          \"name\": \"test_receive_messages_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test handle message sending functionality.\",\n          \"name\": \"test_handle_message_sending_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test getting recipient for service functionality.\",\n          \"name\": \"test_get_recipient_for_service_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test checkin prompt sending logic.\",\n          \"name\": \"test_should_send_checkin_prompt_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test scheduled checkin handling functionality.\",\n          \"name\": \"test_handle_scheduled_checkin_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test sending checkin prompt functionality.\",\n          \"name\": \"test_send_checkin_prompt_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test sending AI generated message functionality.\",\n          \"name\": \"test_send_ai_generated_message_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test sending predefined message functionality.\",\n          \"name\": \"test_send_predefined_message_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test task reminder handling functionality.\",\n          \"name\": \"test_handle_task_reminder_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\"\n          ],\n          \"docstring\": \"Test creating task reminder message functionality.\",\n          \"name\": \"test_create_task_reminder_message_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\"\n          ],\n          \"docstring\": \"Test event loop setup functionality.\",\n          \"name\": \"test_event_loop_setup_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\"\n          ],\n          \"docstring\": \"Test running async functions synchronously.\",\n          \"name\": \"test_run_async_sync_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\"\n          ],\n          \"docstring\": \"Test setting scheduler manager functionality.\",\n          \"name\": \"test_set_scheduler_manager_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\",\n            \"mock_channel_config\"\n          ],\n          \"docstring\": \"Test start all functionality.\",\n          \"name\": \"test_start_all_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"comm_manager\",\n            \"realistic_mock_channel\"\n          ],\n          \"docstring\": \"Test stop all functionality.\",\n          \"name\": \"test_stop_all_real_behavior\"\n        }\n      ]\n    },\n    \"tests/behavior/test_config_coverage_expansion_phase3_simple.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test coverage expansion for core/config.py - Phase 3 Simple\",\n          \"methods\": [\n            \"test_config_validation_error_initialization\",\n            \"test_config_validation_error_with_none_values\",\n            \"test_normalize_path_function\",\n            \"test_normalize_path_edge_cases\",\n            \"test_get_available_channels\",\n            \"test_get_channel_class_mapping\",\n            \"test_validate_core_paths_success\",\n            \"test_validate_ai_configuration_missing_url\",\n            \"test_validate_ai_configuration_invalid_url\",\n            \"test_validate_ai_configuration_valid_config\",\n            \"test_validate_communication_channels\",\n            \"test_validate_logging_configuration\",\n            \"test_validate_scheduler_configuration\",\n            \"test_validate_file_organization_settings\",\n            \"test_validate_environment_variables\",\n            \"test_validate_all_configuration_integration\",\n            \"test_validate_and_raise_if_invalid\",\n            \"test_print_configuration_report\",\n            \"test_print_configuration_report_no_channels\",\n            \"test_get_user_data_dir\",\n            \"test_get_backups_dir_testing_mode\",\n            \"test_get_backups_dir_production_mode\",\n            \"test_get_user_file_path\",\n            \"test_ensure_user_directory_success\",\n            \"test_ensure_user_directory_failure\",\n            \"test_validate_email_config\",\n            \"test_validate_discord_config\",\n            \"test_validate_minimum_config\",\n            \"test_environment_variable_loading\",\n            \"test_configuration_constants_exist\",\n            \"test_configuration_error_handling\",\n            \"test_validation_functions_return_correct_types\",\n            \"test_path_handling_functions\",\n            \"test_directory_creation_functions\",\n            \"test_configuration_validation_integration\"\n          ],\n          \"name\": \"TestConfigCoverageExpansionPhase3Simple\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test ConfigValidationError initialization\",\n          \"name\": \"test_config_validation_error_initialization\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test ConfigValidationError with None values\",\n          \"name\": \"test_config_validation_error_with_none_values\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test _normalize_path function\",\n          \"name\": \"test_normalize_path_function\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test path normalization with edge cases\",\n          \"name\": \"test_normalize_path_edge_cases\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test get_available_channels function\",\n          \"name\": \"test_get_available_channels\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test get_channel_class_mapping function\",\n          \"name\": \"test_get_channel_class_mapping\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test validate_core_paths function with successful validation\",\n          \"name\": \"test_validate_core_paths_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test validate_ai_configuration with missing LM Studio URL\",\n          \"name\": \"test_validate_ai_configuration_missing_url\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test validate_ai_configuration with invalid URL\",\n          \"name\": \"test_validate_ai_configuration_invalid_url\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test validate_ai_configuration with valid configuration\",\n          \"name\": \"test_validate_ai_configuration_valid_config\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test validate_communication_channels function\",\n          \"name\": \"test_validate_communication_channels\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test validate_logging_configuration function\",\n          \"name\": \"test_validate_logging_configuration\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test validate_scheduler_configuration function\",\n          \"name\": \"test_validate_scheduler_configuration\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test validate_file_organization_settings function\",\n          \"name\": \"test_validate_file_organization_settings\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test validate_environment_variables function\",\n          \"name\": \"test_validate_environment_variables\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test validate_all_configuration function integration\",\n          \"name\": \"test_validate_all_configuration_integration\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test validate_and_raise_if_invalid function\",\n          \"name\": \"test_validate_and_raise_if_invalid\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\",\n            \"capsys\"\n          ],\n          \"docstring\": \"Test print_configuration_report function\",\n          \"name\": \"test_print_configuration_report\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\",\n            \"capsys\"\n          ],\n          \"docstring\": \"Test print_configuration_report function with no available channels\",\n          \"name\": \"test_print_configuration_report_no_channels\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test get_user_data_dir function\",\n          \"name\": \"test_get_user_data_dir\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test get_backups_dir function in testing mode\",\n          \"name\": \"test_get_backups_dir_testing_mode\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test get_backups_dir function in production mode\",\n          \"name\": \"test_get_backups_dir_production_mode\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test get_user_file_path function\",\n          \"name\": \"test_get_user_file_path\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test ensure_user_directory function with success\",\n          \"name\": \"test_ensure_user_directory_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test ensure_user_directory function with failure\",\n          \"name\": \"test_ensure_user_directory_failure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test validate_email_config function\",\n          \"name\": \"test_validate_email_config\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test validate_discord_config function\",\n          \"name\": \"test_validate_discord_config\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test validate_minimum_config function\",\n          \"name\": \"test_validate_minimum_config\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test environment variable loading and parsing\",\n          \"name\": \"test_environment_variable_loading\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test that all expected configuration constants exist\",\n          \"name\": \"test_configuration_constants_exist\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test configuration error handling\",\n          \"name\": \"test_configuration_error_handling\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test that all validation functions return correct types\",\n          \"name\": \"test_validation_functions_return_correct_types\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test path handling functions\",\n          \"name\": \"test_path_handling_functions\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test directory creation functions\",\n          \"name\": \"test_directory_creation_functions\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test configuration validation integration\",\n          \"name\": \"test_configuration_validation_integration\"\n        }\n      ]\n    },\n    \"tests/behavior/test_conversation_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test ConversationManager real behavior and side effects.\",\n          \"methods\": [\n            \"test_conversation_manager_initialization_creates_structure\",\n            \"test_handle_inbound_message_creates_user_state\",\n            \"test_handle_inbound_message_preserves_existing_state\",\n            \"test_start_checkin_creates_checkin_state\",\n            \"test_start_checkin_handles_disabled_user\",\n            \"test_checkin_flow_progression\",\n            \"test_checkin_flow_completion\",\n            \"test_validate_response_handles_various_inputs\",\n            \"test_validate_response_handles_edge_cases\",\n            \"test_get_question_text_returns_personalized_questions\",\n            \"test_handle_contextual_question_integrates_with_ai\",\n            \"test_conversation_manager_error_handling_preserves_system_stability\",\n            \"test_conversation_manager_performance_under_load\",\n            \"test_conversation_manager_cleanup_and_resource_management\",\n            \"test_conversation_manager_integration_with_response_tracking\",\n            \"test_conversation_manager_command_handling\",\n            \"test_conversation_manager_cancel_handling\"\n          ],\n          \"name\": \"TestConversationManagerBehavior\"\n        },\n        {\n          \"docstring\": \"Integration tests for ConversationManager with real user data.\",\n          \"methods\": [\n            \"test_conversation_manager_with_real_user_data\",\n            \"test_conversation_manager_error_recovery_with_real_files\",\n            \"test_conversation_manager_concurrent_access_safety\"\n          ],\n          \"name\": \"TestConversationManagerIntegration\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that ConversationManager initialization creates proper internal structure.\",\n          \"name\": \"test_conversation_manager_initialization_creates_structure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that handle_inbound_message actually creates user state when needed.\",\n          \"name\": \"test_handle_inbound_message_creates_user_state\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that handle_inbound_message preserves existing user state.\",\n          \"name\": \"test_handle_inbound_message_preserves_existing_state\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that start_checkin actually creates check-in state.\",\n          \"name\": \"test_start_checkin_creates_checkin_state\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that start_checkin handles users with disabled check-ins.\",\n          \"name\": \"test_start_checkin_handles_disabled_user\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that check-in flow actually progresses through states.\",\n          \"name\": \"test_checkin_flow_progression\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that check-in flow actually completes and cleans up state.\",\n          \"name\": \"test_checkin_flow_completion\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that _validate_response actually validates different types of responses.\",\n          \"name\": \"test_validate_response_handles_various_inputs\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that _validate_response handles edge cases gracefully.\",\n          \"name\": \"test_validate_response_handles_edge_cases\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that _get_question_text returns personalized questions based on context.\",\n          \"name\": \"test_get_question_text_returns_personalized_questions\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that handle_contextual_question integrates with AI chatbot.\",\n          \"name\": \"test_handle_contextual_question_integrates_with_ai\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that ConversationManager error handling preserves system stability.\",\n          \"name\": \"test_conversation_manager_error_handling_preserves_system_stability\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that ConversationManager performs well under load.\",\n          \"name\": \"test_conversation_manager_performance_under_load\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that ConversationManager properly manages resources and cleanup.\",\n          \"name\": \"test_conversation_manager_cleanup_and_resource_management\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that ConversationManager integrates properly with response tracking.\",\n          \"name\": \"test_conversation_manager_integration_with_response_tracking\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that ConversationManager properly handles special commands.\",\n          \"name\": \"test_conversation_manager_command_handling\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that ConversationManager properly handles cancel commands.\",\n          \"name\": \"test_conversation_manager_cancel_handling\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test ConversationManager with real user data files.\",\n          \"name\": \"test_conversation_manager_with_real_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test ConversationManager error recovery with corrupted real files.\",\n          \"name\": \"test_conversation_manager_error_recovery_with_real_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test ConversationManager safety under concurrent access.\",\n          \"name\": \"test_conversation_manager_concurrent_access_safety\"\n        }\n      ]\n    },\n    \"tests/behavior/test_core_message_management_coverage_expansion.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test class for Core Message Management coverage expansion.\",\n          \"methods\": [\n            \"test_get_message_categories_from_env_real_behavior\",\n            \"test_get_message_categories_from_json_real_behavior\",\n            \"test_get_message_categories_no_env_real_behavior\",\n            \"test_load_default_messages_real_behavior\",\n            \"test_load_default_messages_file_not_found_real_behavior\",\n            \"test_parse_timestamp_real_behavior\",\n            \"test_get_timestamp_for_sorting_real_behavior\",\n            \"test_get_timestamp_for_sorting_string_real_behavior\",\n            \"test_get_timestamp_for_sorting_invalid_item_real_behavior\"\n          ],\n          \"name\": \"TestCoreMessageManagementCoverageExpansion\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting message categories from environment variable.\",\n          \"name\": \"test_get_message_categories_from_env_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting message categories from JSON format.\",\n          \"name\": \"test_get_message_categories_from_json_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting message categories when no environment variable.\",\n          \"name\": \"test_get_message_categories_no_env_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test loading default messages for a category.\",\n          \"name\": \"test_load_default_messages_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test loading default messages when file doesn't exist.\",\n          \"name\": \"test_load_default_messages_file_not_found_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test parsing timestamp strings.\",\n          \"name\": \"test_parse_timestamp_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting timestamp for sorting.\",\n          \"name\": \"test_get_timestamp_for_sorting_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting timestamp for sorting with string timestamp.\",\n          \"name\": \"test_get_timestamp_for_sorting_string_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting timestamp for sorting with invalid item type.\",\n          \"name\": \"test_get_timestamp_for_sorting_invalid_item_real_behavior\"\n        }\n      ]\n    },\n    \"tests/behavior/test_core_service_coverage_expansion.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test class for expanding Core Service test coverage.\",\n          \"methods\": [\n            \"service\",\n            \"mock_config\",\n            \"mock_communication_manager\",\n            \"mock_scheduler_manager\",\n            \"test_service_initialization_real_behavior\",\n            \"test_validate_configuration_success_real_behavior\",\n            \"test_validate_configuration_failure_real_behavior\",\n            \"test_initialize_paths_real_behavior\",\n            \"test_initialize_paths_with_none_user_id_real_behavior\",\n            \"test_initialize_paths_with_invalid_categories_real_behavior\",\n            \"test_initialize_paths_with_empty_categories_real_behavior\",\n            \"test_initialize_paths_with_path_generation_error_real_behavior\",\n            \"test_check_and_fix_logging_success_real_behavior\",\n            \"test_check_and_fix_logging_failure_real_behavior\",\n            \"test_signal_handler_real_behavior\",\n            \"test_start_service_success_real_behavior\",\n            \"test_start_service_configuration_failure_real_behavior\",\n            \"test_start_service_path_initialization_failure_real_behavior\",\n            \"test_start_service_communication_manager_failure_real_behavior\",\n            \"test_start_service_scheduler_manager_failure_real_behavior\",\n            \"test_stop_service_real_behavior\",\n            \"test_stop_service_with_none_managers_real_behavior\",\n            \"test_stop_service_with_manager_stop_failure_real_behavior\",\n            \"test_get_scheduler_manager_real_behavior\",\n            \"test_main_function_real_behavior\",\n            \"test_main_function_with_service_failure_real_behavior\",\n            \"test_service_atexit_handler_real_behavior\",\n            \"test_service_atexit_handler_with_none_managers_real_behavior\",\n            \"test_service_atexit_handler_with_manager_stop_failure_real_behavior\",\n            \"test_service_initialization_error_real_behavior\",\n            \"test_service_startup_time_tracking_real_behavior\",\n            \"test_service_signal_handlers_real_behavior\",\n            \"test_service_retry_mechanism_real_behavior\",\n            \"test_service_cleanup_test_message_requests_real_behavior\",\n            \"test_cleanup_test_message_requests_empty_directory_real_behavior\",\n            \"test_cleanup_test_message_requests_large_number_of_files_real_behavior\",\n            \"test_cleanup_test_message_requests_file_permission_error_real_behavior\",\n            \"test_cleanup_test_message_requests_partial_failure_real_behavior\",\n            \"test_cleanup_test_message_requests_directory_access_error_real_behavior\",\n            \"test_cleanup_test_message_requests_mixed_file_types_real_behavior\",\n            \"test_cleanup_test_message_requests_concurrent_access_simulation_real_behavior\",\n            \"test_cleanup_test_message_requests_file_in_use_error_real_behavior\",\n            \"test_cleanup_test_message_requests_remove_request_file_success_real_behavior\",\n            \"test_cleanup_test_message_requests_remove_request_file_permission_error_real_behavior\",\n            \"test_cleanup_test_message_requests_remove_request_file_not_found_error_real_behavior\",\n            \"test_cleanup_test_message_requests_remove_request_file_generic_error_real_behavior\",\n            \"test_service_cleanup_reschedule_requests_real_behavior\",\n            \"test_check_and_fix_logging_basic_success\",\n            \"test_check_and_fix_logging_file_missing\",\n            \"test_check_and_fix_logging_file_creation_failure\",\n            \"test_check_and_fix_logging_old_activity_restart\",\n            \"test_check_and_fix_logging_recent_activity_detected\",\n            \"test_check_reschedule_requests_no_files\",\n            \"test_check_reschedule_requests_valid_file\",\n            \"test_check_reschedule_requests_invalid_file\",\n            \"test_check_reschedule_requests_old_file_processed\",\n            \"test_check_reschedule_requests_json_error\",\n            \"test_check_test_message_requests_no_files\",\n            \"test_check_test_message_requests_valid_file\",\n            \"test_check_test_message_requests_invalid_file\",\n            \"test_check_test_message_requests_json_error\",\n            \"test_check_test_message_requests_no_communication_manager\",\n            \"test_check_test_message_requests_communication_error\",\n            \"test_check_and_fix_logging_check_recent_activity_timestamps_recent_activity\",\n            \"test_check_and_fix_logging_check_recent_activity_timestamps_old_activity\",\n            \"test_check_and_fix_logging_check_recent_activity_timestamps_invalid_timestamp\",\n            \"test_check_and_fix_logging_read_recent_log_content_large_file\",\n            \"test_check_and_fix_logging_read_recent_log_content_small_file\",\n            \"test_check_and_fix_logging_verify_test_message_present_found\",\n            \"test_check_and_fix_logging_verify_test_message_present_not_found\",\n            \"test_check_reschedule_requests_handle_processing_error_successful_cleanup\",\n            \"test_check_reschedule_requests_handle_processing_error_cleanup_failure\",\n            \"test_check_test_message_requests_handle_processing_error_successful_cleanup\",\n            \"test_check_test_message_requests_handle_processing_error_cleanup_failure\",\n            \"test_check_reschedule_requests_validate_request_data_old_timestamp\",\n            \"test_check_reschedule_requests_validate_request_data_missing_fields\"\n          ],\n          \"name\": \"TestCoreServiceCoverageExpansion\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create a fresh MHMService instance for each test.\",\n          \"name\": \"service\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Mock configuration to avoid real config dependencies.\",\n          \"name\": \"mock_config\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Mock communication manager.\",\n          \"name\": \"mock_communication_manager\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Mock scheduler manager.\",\n          \"name\": \"mock_scheduler_manager\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test service initialization with real behavior verification.\",\n          \"name\": \"test_service_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test successful configuration validation.\",\n          \"name\": \"test_validate_configuration_success_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test configuration validation failure.\",\n          \"name\": \"test_validate_configuration_failure_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test path initialization with real behavior verification.\",\n          \"name\": \"test_initialize_paths_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test path initialization with None user ID handling.\",\n          \"name\": \"test_initialize_paths_with_none_user_id_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test path initialization with invalid categories data.\",\n          \"name\": \"test_initialize_paths_with_invalid_categories_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test path initialization with empty categories list.\",\n          \"name\": \"test_initialize_paths_with_empty_categories_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test path initialization with path generation error.\",\n          \"name\": \"test_initialize_paths_with_path_generation_error_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test successful logging check and fix.\",\n          \"name\": \"test_check_and_fix_logging_success_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test logging check and fix failure.\",\n          \"name\": \"test_check_and_fix_logging_failure_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test signal handler behavior.\",\n          \"name\": \"test_signal_handler_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\",\n            \"mock_config\",\n            \"mock_communication_manager\",\n            \"mock_scheduler_manager\"\n          ],\n          \"docstring\": \"Test successful service startup.\",\n          \"name\": \"test_start_service_success_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test service startup with configuration failure.\",\n          \"name\": \"test_start_service_configuration_failure_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test service startup with path initialization failure.\",\n          \"name\": \"test_start_service_path_initialization_failure_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test service startup with communication manager failure.\",\n          \"name\": \"test_start_service_communication_manager_failure_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\",\n            \"mock_config\",\n            \"mock_communication_manager\"\n          ],\n          \"docstring\": \"Test service startup with scheduler manager failure.\",\n          \"name\": \"test_start_service_scheduler_manager_failure_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\",\n            \"mock_communication_manager\",\n            \"mock_scheduler_manager\"\n          ],\n          \"docstring\": \"Test service shutdown.\",\n          \"name\": \"test_stop_service_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test service shutdown with None managers.\",\n          \"name\": \"test_stop_service_with_none_managers_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\",\n            \"mock_communication_manager\",\n            \"mock_scheduler_manager\"\n          ],\n          \"docstring\": \"Test service shutdown with manager stop failure.\",\n          \"name\": \"test_stop_service_with_manager_stop_failure_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting scheduler manager.\",\n          \"name\": \"test_get_scheduler_manager_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test main function behavior.\",\n          \"name\": \"test_main_function_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test main function with service failure.\",\n          \"name\": \"test_main_function_with_service_failure_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test service atexit handler behavior.\",\n          \"name\": \"test_service_atexit_handler_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test service atexit handler with None managers.\",\n          \"name\": \"test_service_atexit_handler_with_none_managers_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test service atexit handler with manager stop failure.\",\n          \"name\": \"test_service_atexit_handler_with_manager_stop_failure_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test InitializationError exception.\",\n          \"name\": \"test_service_initialization_error_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test service startup time tracking.\",\n          \"name\": \"test_service_startup_time_tracking_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test service signal handlers setup.\",\n          \"name\": \"test_service_signal_handlers_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test service retry mechanism for startup failures.\",\n          \"name\": \"test_service_retry_mechanism_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test service cleanup test message requests.\",\n          \"name\": \"test_service_cleanup_test_message_requests_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cleanup when no request files exist.\",\n          \"name\": \"test_cleanup_test_message_requests_empty_directory_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cleanup with many request files.\",\n          \"name\": \"test_cleanup_test_message_requests_large_number_of_files_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cleanup when file removal fails due to permission errors.\",\n          \"name\": \"test_cleanup_test_message_requests_file_permission_error_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cleanup when some files succeed and others fail.\",\n          \"name\": \"test_cleanup_test_message_requests_partial_failure_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cleanup when directory listing fails.\",\n          \"name\": \"test_cleanup_test_message_requests_directory_access_error_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cleanup with mixed file types in directory.\",\n          \"name\": \"test_cleanup_test_message_requests_mixed_file_types_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cleanup when files disappear during processing.\",\n          \"name\": \"test_cleanup_test_message_requests_concurrent_access_simulation_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cleanup when files are in use by another process.\",\n          \"name\": \"test_cleanup_test_message_requests_file_in_use_error_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test successful file removal by helper function.\",\n          \"name\": \"test_cleanup_test_message_requests_remove_request_file_success_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test file removal with permission error by helper function.\",\n          \"name\": \"test_cleanup_test_message_requests_remove_request_file_permission_error_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test file removal with file not found error by helper function.\",\n          \"name\": \"test_cleanup_test_message_requests_remove_request_file_not_found_error_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test file removal with generic error by helper function.\",\n          \"name\": \"test_cleanup_test_message_requests_remove_request_file_generic_error_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test service cleanup reschedule requests.\",\n          \"name\": \"test_service_cleanup_reschedule_requests_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test basic successful logging verification.\",\n          \"name\": \"test_check_and_fix_logging_basic_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test logging verification when log file doesn't exist.\",\n          \"name\": \"test_check_and_fix_logging_file_missing\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test logging verification when log file creation fails.\",\n          \"name\": \"test_check_and_fix_logging_file_creation_failure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test logging restart when activity is too old.\",\n          \"name\": \"test_check_and_fix_logging_old_activity_restart\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test detection of recent logging activity.\",\n          \"name\": \"test_check_and_fix_logging_recent_activity_detected\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test reschedule requests when no files exist.\",\n          \"name\": \"test_check_reschedule_requests_no_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test reschedule requests with valid file.\",\n          \"name\": \"test_check_reschedule_requests_valid_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test reschedule requests with invalid file data.\",\n          \"name\": \"test_check_reschedule_requests_invalid_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test reschedule requests with old timestamp still processed.\",\n          \"name\": \"test_check_reschedule_requests_old_file_processed\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test reschedule requests with JSON parsing error.\",\n          \"name\": \"test_check_reschedule_requests_json_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test test message requests when no files exist.\",\n          \"name\": \"test_check_test_message_requests_no_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test test message requests with valid file.\",\n          \"name\": \"test_check_test_message_requests_valid_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test test message requests with invalid file data.\",\n          \"name\": \"test_check_test_message_requests_invalid_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test test message requests with JSON parsing error.\",\n          \"name\": \"test_check_test_message_requests_json_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test test message requests when communication manager is None.\",\n          \"name\": \"test_check_test_message_requests_no_communication_manager\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test test message requests when communication manager raises error.\",\n          \"name\": \"test_check_test_message_requests_communication_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test the most complex helper function - recent activity timestamp checking with recent activity.\",\n          \"name\": \"test_check_and_fix_logging_check_recent_activity_timestamps_recent_activity\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test the most complex helper function - recent activity timestamp checking with old activity.\",\n          \"name\": \"test_check_and_fix_logging_check_recent_activity_timestamps_old_activity\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test the most complex helper function - recent activity timestamp checking with invalid timestamp.\",\n          \"name\": \"test_check_and_fix_logging_check_recent_activity_timestamps_invalid_timestamp\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test reading recent log content from a large log file.\",\n          \"name\": \"test_check_and_fix_logging_read_recent_log_content_large_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test reading recent log content from a small log file.\",\n          \"name\": \"test_check_and_fix_logging_read_recent_log_content_small_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test verifying test message presence when message is found.\",\n          \"name\": \"test_check_and_fix_logging_verify_test_message_present_found\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test verifying test message presence when message is not found.\",\n          \"name\": \"test_check_and_fix_logging_verify_test_message_present_not_found\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test error handling helper with successful file cleanup.\",\n          \"name\": \"test_check_reschedule_requests_handle_processing_error_successful_cleanup\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test error handling helper when file cleanup fails.\",\n          \"name\": \"test_check_reschedule_requests_handle_processing_error_cleanup_failure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test test message error handling helper with successful file cleanup.\",\n          \"name\": \"test_check_test_message_requests_handle_processing_error_successful_cleanup\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test test message error handling helper when file cleanup fails.\",\n          \"name\": \"test_check_test_message_requests_handle_processing_error_cleanup_failure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test request data validation with old timestamp.\",\n          \"name\": \"test_check_reschedule_requests_validate_request_data_old_timestamp\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test request data validation with missing required fields.\",\n          \"name\": \"test_check_reschedule_requests_validate_request_data_missing_fields\"\n        },\n        {\n          \"args\": [\n            \"file_path\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_remove_with_partial_failure\"\n        },\n        {\n          \"args\": [\n            \"file_path\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_remove_with_disappearing_files\"\n        }\n      ]\n    },\n    \"tests/behavior/test_discord_bot_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test Discord bot real behavior and side effects\",\n          \"methods\": [\n            \"discord_bot\",\n            \"mock_discord_bot\",\n            \"test_discord_bot_initialization_creates_proper_structure\",\n            \"test_discord_bot_channel_type_is_async\",\n            \"test_dns_resolution_check_actually_tests_connectivity\",\n            \"test_dns_resolution_fallback_uses_alternative_servers\",\n            \"test_network_connectivity_check_tests_multiple_endpoints\",\n            \"test_network_connectivity_fallback_tries_alternative_endpoints\",\n            \"test_connection_status_update_actually_changes_state\",\n            \"test_detailed_connection_status_returns_actual_state\",\n            \"test_discord_bot_initialization_with_valid_token\",\n            \"test_discord_bot_initialization_without_token\",\n            \"test_discord_bot_initialization_with_dns_failure\",\n            \"test_discord_bot_shutdown_actually_cleans_up\",\n            \"test_discord_bot_send_message_actually_sends\",\n            \"test_discord_bot_send_message_handles_errors\",\n            \"test_discord_bot_receive_messages_returns_actual_data\",\n            \"test_discord_bot_health_check_verifies_actual_status\",\n            \"test_discord_bot_health_status_returns_actual_metrics\",\n            \"test_discord_bot_connection_status_summary_returns_readable_string\",\n            \"test_discord_bot_is_actually_connected_checks_real_state\",\n            \"test_discord_bot_manual_reconnect_actually_reconnects\",\n            \"test_discord_bot_initialize_creates_thread\",\n            \"test_interaction_manager_single_response\",\n            \"test_discord_checkin_flow_end_to_end\",\n            \"test_discord_task_create_update_complete\",\n            \"test_discord_complete_task_by_name_variation\",\n            \"test_discord_response_after_task_reminder\",\n            \"test_discord_bot_shutdown_actually_stops_thread\",\n            \"test_discord_bot_is_initialized_checks_actual_state\",\n            \"test_discord_bot_send_dm_actually_sends_direct_message\"\n          ],\n          \"name\": \"TestDiscordBotBehavior\"\n        },\n        {\n          \"docstring\": \"Test Discord bot integration with other system components\",\n          \"methods\": [\n            \"test_user_setup\",\n            \"mock_discord_bot\",\n            \"test_discord_bot_integration_with_conversation_manager\",\n            \"test_discord_message_to_interaction_manager_complete_task_prompt\",\n            \"test_discord_bot_integration_with_user_management\",\n            \"test_discord_bot_error_handling_preserves_system_stability\",\n            \"test_discord_bot_performance_under_load\",\n            \"test_discord_bot_cleanup_and_resource_management\",\n            \"test_discord_bot_with_real_user_data\",\n            \"test_discord_bot_error_recovery_with_real_files\",\n            \"test_discord_bot_concurrent_access_safety\"\n          ],\n          \"name\": \"TestDiscordBotIntegration\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [],\n          \"name\": \"FakeAuthor\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [],\n          \"name\": \"FakeMessage\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a Discord bot instance for testing\",\n          \"name\": \"discord_bot\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create a mock Discord bot instance\",\n          \"name\": \"mock_discord_bot\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that Discord bot initialization creates proper internal structure\",\n          \"name\": \"test_discord_bot_initialization_creates_proper_structure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that Discord bot channel type is correctly set to ASYNC\",\n          \"name\": \"test_discord_bot_channel_type_is_async\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that DNS resolution check actually tests network connectivity\",\n          \"name\": \"test_dns_resolution_check_actually_tests_connectivity\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that DNS resolution fallback actually tries alternative DNS servers\",\n          \"name\": \"test_dns_resolution_fallback_uses_alternative_servers\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that network connectivity check actually tests multiple Discord endpoints\",\n          \"name\": \"test_network_connectivity_check_tests_multiple_endpoints\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that network connectivity fallback actually tries alternative endpoints\",\n          \"name\": \"test_network_connectivity_fallback_tries_alternative_endpoints\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that connection status update actually changes internal state\",\n          \"name\": \"test_connection_status_update_actually_changes_state\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that detailed connection status returns actual system state\",\n          \"name\": \"test_detailed_connection_status_returns_actual_state\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_discord_bot\"\n          ],\n          \"docstring\": \"Test that Discord bot initialization actually creates bot instance with valid token\",\n          \"name\": \"test_discord_bot_initialization_with_valid_token\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that Discord bot initialization fails gracefully without token\",\n          \"name\": \"test_discord_bot_initialization_without_token\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that Discord bot initialization handles DNS failures gracefully\",\n          \"name\": \"test_discord_bot_initialization_with_dns_failure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_discord_bot\"\n          ],\n          \"docstring\": \"Test that Discord bot shutdown actually cleans up resources\",\n          \"name\": \"test_discord_bot_shutdown_actually_cleans_up\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_discord_bot\"\n          ],\n          \"docstring\": \"Test that Discord bot send_message actually sends messages\",\n          \"name\": \"test_discord_bot_send_message_actually_sends\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_discord_bot\"\n          ],\n          \"docstring\": \"Test that Discord bot send_message handles errors gracefully\",\n          \"name\": \"test_discord_bot_send_message_handles_errors\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_discord_bot\"\n          ],\n          \"docstring\": \"Test that Discord bot receive_messages returns actual message data\",\n          \"name\": \"test_discord_bot_receive_messages_returns_actual_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_discord_bot\"\n          ],\n          \"docstring\": \"Test that Discord bot health check actually verifies system status\",\n          \"name\": \"test_discord_bot_health_check_verifies_actual_status\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_discord_bot\"\n          ],\n          \"docstring\": \"Test that Discord bot health status returns actual system metrics\",\n          \"name\": \"test_discord_bot_health_status_returns_actual_metrics\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that Discord bot connection status summary returns readable string\",\n          \"name\": \"test_discord_bot_connection_status_summary_returns_readable_string\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_discord_bot\"\n          ],\n          \"docstring\": \"Test that Discord bot is_actually_connected checks real connection state\",\n          \"name\": \"test_discord_bot_is_actually_connected_checks_real_state\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_discord_bot\"\n          ],\n          \"docstring\": \"Test that Discord bot manual reconnect actually attempts reconnection\",\n          \"name\": \"test_discord_bot_manual_reconnect_actually_reconnects\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that Discord bot initialize actually creates a thread\",\n          \"name\": \"test_discord_bot_initialize_creates_thread\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Ensure a single inbound message yields one main response (no duplicates).\",\n          \"name\": \"test_interaction_manager_single_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Simulate a Discord user going through a check-in flow via /checkin and responding to prompts.\",\n          \"name\": \"test_discord_checkin_flow_end_to_end\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a task, update it, then complete it through InteractionManager natural language.\",\n          \"name\": \"test_discord_task_create_update_complete\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Complete a task by a fuzzy name match like 'complete per davey' -> 'Pet Davey'.\",\n          \"name\": \"test_discord_complete_task_by_name_variation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Simulate a user replying to a reminder by completing the first task.\",\n          \"name\": \"test_discord_response_after_task_reminder\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that Discord bot shutdown actually stops the thread\",\n          \"name\": \"test_discord_bot_shutdown_actually_stops_thread\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_discord_bot\"\n          ],\n          \"docstring\": \"Test that Discord bot is_initialized checks actual initialization state\",\n          \"name\": \"test_discord_bot_is_initialized_checks_actual_state\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_discord_bot\"\n          ],\n          \"docstring\": \"Test that Discord bot send_dm actually sends direct messages\",\n          \"name\": \"test_discord_bot_send_dm_actually_sends_direct_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Set up test user data for integration tests\",\n          \"name\": \"test_user_setup\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create a mock Discord bot instance for integration tests\",\n          \"name\": \"mock_discord_bot\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"test_user_setup\"\n          ],\n          \"docstring\": \"Test that Discord bot integrates properly with conversation manager\",\n          \"name\": \"test_discord_bot_integration_with_conversation_manager\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"End-to-end-ish: ensure plain 'complete task' routes to InteractionManager and returns a helpful prompt, not a generic error.\",\n          \"name\": \"test_discord_message_to_interaction_manager_complete_task_prompt\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"test_user_setup\"\n          ],\n          \"docstring\": \"Test that Discord bot integrates properly with user management\",\n          \"name\": \"test_discord_bot_integration_with_user_management\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that Discord bot error handling preserves system stability\",\n          \"name\": \"test_discord_bot_error_handling_preserves_system_stability\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that Discord bot performs well under load\",\n          \"name\": \"test_discord_bot_performance_under_load\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_discord_bot\"\n          ],\n          \"docstring\": \"Test that Discord bot properly manages resources and cleanup\",\n          \"name\": \"test_discord_bot_cleanup_and_resource_management\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"test_user_setup\"\n          ],\n          \"docstring\": \"Test Discord bot with real user data\",\n          \"name\": \"test_discord_bot_with_real_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test Discord bot error recovery with real files\",\n          \"name\": \"test_discord_bot_error_recovery_with_real_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that Discord bot handles concurrent access safely\",\n          \"name\": \"test_discord_bot_concurrent_access_safety\"\n        }\n      ]\n    },\n    \"tests/behavior/test_dynamic_checkin_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test the dynamic check-in manager functionality.\",\n          \"methods\": [\n            \"test_dynamic_checkin_manager_initialization\",\n            \"test_question_definitions\",\n            \"test_response_statements\",\n            \"test_validation\",\n            \"test_build_next_question_with_response\",\n            \"test_ui_questions_format\"\n          ],\n          \"name\": \"TestDynamicCheckinManager\"\n        },\n        {\n          \"docstring\": \"Test integration with the conversation flow manager.\",\n          \"methods\": [\n            \"test_conversation_manager_uses_dynamic_questions\",\n            \"test_question_text_uses_dynamic_manager\",\n            \"test_validation_uses_dynamic_manager\"\n          ],\n          \"name\": \"TestDynamicCheckinIntegration\"\n        },\n        {\n          \"docstring\": \"Test that the system provides variety in responses.\",\n          \"methods\": [\n            \"test_response_variety\",\n            \"test_transition_phrase_variety\",\n            \"test_complete_question_flow_variety\"\n          ],\n          \"name\": \"TestDynamicCheckinVariety\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that the dynamic check-in manager initializes correctly.\",\n          \"name\": \"test_dynamic_checkin_manager_initialization\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that question definitions are loaded correctly.\",\n          \"name\": \"test_question_definitions\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that response statements are loaded and varied.\",\n          \"name\": \"test_response_statements\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that validation works correctly for different question types.\",\n          \"name\": \"test_validation\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test building questions with response statements.\",\n          \"name\": \"test_build_next_question_with_response\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that questions are formatted correctly for UI.\",\n          \"name\": \"test_ui_questions_format\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that the conversation manager uses the dynamic question system.\",\n          \"name\": \"test_conversation_manager_uses_dynamic_questions\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that question text is retrieved from the dynamic manager.\",\n          \"name\": \"test_question_text_uses_dynamic_manager\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that validation uses the dynamic manager.\",\n          \"name\": \"test_validation_uses_dynamic_manager\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that we get varied responses for the same answer.\",\n          \"name\": \"test_response_variety\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that transition phrases provide variety.\",\n          \"name\": \"test_transition_phrase_variety\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that complete question flows provide variety.\",\n          \"name\": \"test_complete_question_flow_variety\"\n        }\n      ]\n    },\n    \"tests/behavior/test_email_bot_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test real behavior of Email Bot.\",\n          \"methods\": [\n            \"setup_method\",\n            \"test_email_bot_initialization_creates_proper_structure\",\n            \"test_email_bot_initialization_with_custom_config\",\n            \"test_email_bot_legacy_start_method_behavior\",\n            \"test_email_bot_legacy_start_method_failure_behavior\",\n            \"test_email_bot_async_shutdown_method_behavior\",\n            \"test_email_bot_status_checking_behavior\",\n            \"test_email_bot_error_handling_preserves_system_stability\",\n            \"test_email_bot_performance_under_load\",\n            \"test_email_bot_data_integrity\"\n          ],\n          \"name\": \"TestEmailBotBehavior\"\n        },\n        {\n          \"docstring\": \"Test integration behavior of Email Bot.\",\n          \"methods\": [\n            \"setup_method\"\n          ],\n          \"name\": \"TestEmailBotIntegration\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Set up test environment.\",\n          \"name\": \"setup_method\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that EmailBot initialization creates proper internal structure.\",\n          \"name\": \"test_email_bot_initialization_creates_proper_structure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that EmailBot initialization with custom config works properly.\",\n          \"name\": \"test_email_bot_initialization_with_custom_config\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test legacy start method behavior.\",\n          \"name\": \"test_email_bot_legacy_start_method_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test legacy start method failure behavior.\",\n          \"name\": \"test_email_bot_legacy_start_method_failure_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test async shutdown method behavior.\",\n          \"name\": \"test_email_bot_async_shutdown_method_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test email bot status checking behavior.\",\n          \"name\": \"test_email_bot_status_checking_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that email bot error handling preserves system stability.\",\n          \"name\": \"test_email_bot_error_handling_preserves_system_stability\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that email bot performs well under load.\",\n          \"name\": \"test_email_bot_performance_under_load\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that email bot maintains data integrity.\",\n          \"name\": \"test_email_bot_data_integrity\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Set up test environment.\",\n          \"name\": \"setup_method\"\n        },\n        {\n          \"args\": [\n            \"recipient\",\n            \"message\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"send_email\"\n        }\n      ]\n    },\n    \"tests/behavior/test_enhanced_command_parser_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test real behavior of Enhanced Command Parser.\",\n          \"methods\": [\n            \"setup_method\",\n            \"test_enhanced_command_parser_initialization_behavior\",\n            \"test_enhanced_command_parser_empty_message_behavior\",\n            \"test_enhanced_command_parser_task_creation_patterns_behavior\",\n            \"test_enhanced_command_parser_task_listing_patterns_behavior\",\n            \"test_enhanced_command_parser_task_completion_patterns_behavior\",\n            \"test_enhanced_command_parser_checkin_patterns_behavior\",\n            \"test_enhanced_command_parser_help_patterns_behavior\",\n            \"test_enhanced_command_parser_entity_extraction_behavior\",\n            \"test_enhanced_command_parser_confidence_calculation_behavior\",\n            \"test_enhanced_command_parser_case_insensitivity_behavior\",\n            \"test_enhanced_command_parser_unknown_patterns_behavior\",\n            \"test_enhanced_command_parser_ai_enhanced_parsing_behavior\",\n            \"test_enhanced_command_parser_fallback_behavior\",\n            \"test_enhanced_command_parser_error_handling_behavior\",\n            \"test_enhanced_command_parser_performance_behavior\",\n            \"test_enhanced_command_parser_pattern_compilation_behavior\"\n          ],\n          \"name\": \"TestEnhancedCommandParserBehavior\"\n        },\n        {\n          \"docstring\": \"Test integration behavior of Enhanced Command Parser.\",\n          \"methods\": [\n            \"setup_method\",\n            \"test_enhanced_command_parser_with_real_handlers_behavior\",\n            \"test_enhanced_command_parser_with_real_ai_chatbot_behavior\",\n            \"test_enhanced_command_parser_end_to_end_behavior\",\n            \"test_enhanced_command_parser_consistency_behavior\",\n            \"test_enhanced_command_parser_memory_behavior\",\n            \"test_enhanced_command_parser_thread_safety_behavior\"\n          ],\n          \"name\": \"TestEnhancedCommandParserIntegration\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Set up test environment.\",\n          \"name\": \"setup_method\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that parser initializes with all required components.\",\n          \"name\": \"test_enhanced_command_parser_initialization_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test parser behavior with empty messages.\",\n          \"name\": \"test_enhanced_command_parser_empty_message_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test real behavior of task creation pattern matching.\",\n          \"name\": \"test_enhanced_command_parser_task_creation_patterns_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test real behavior of task listing pattern matching.\",\n          \"name\": \"test_enhanced_command_parser_task_listing_patterns_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test real behavior of task completion pattern matching.\",\n          \"name\": \"test_enhanced_command_parser_task_completion_patterns_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test real behavior of checkin pattern matching.\",\n          \"name\": \"test_enhanced_command_parser_checkin_patterns_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test real behavior of help pattern matching.\",\n          \"name\": \"test_enhanced_command_parser_help_patterns_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test real behavior of entity extraction.\",\n          \"name\": \"test_enhanced_command_parser_entity_extraction_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test real behavior of confidence calculation.\",\n          \"name\": \"test_enhanced_command_parser_confidence_calculation_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test real behavior of case insensitive matching.\",\n          \"name\": \"test_enhanced_command_parser_case_insensitivity_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test real behavior with unknown patterns.\",\n          \"name\": \"test_enhanced_command_parser_unknown_patterns_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test real behavior of AI-enhanced parsing.\",\n          \"name\": \"test_enhanced_command_parser_ai_enhanced_parsing_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test real behavior of fallback parsing.\",\n          \"name\": \"test_enhanced_command_parser_fallback_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test real behavior of error handling.\",\n          \"name\": \"test_enhanced_command_parser_error_handling_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test real behavior of parsing performance.\",\n          \"name\": \"test_enhanced_command_parser_performance_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test real behavior of pattern compilation.\",\n          \"name\": \"test_enhanced_command_parser_pattern_compilation_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Set up test environment.\",\n          \"name\": \"setup_method\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test parser behavior with real interaction handlers.\",\n          \"name\": \"test_enhanced_command_parser_with_real_handlers_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test parser behavior with real AI chatbot.\",\n          \"name\": \"test_enhanced_command_parser_with_real_ai_chatbot_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test end-to-end behavior of command parsing workflow.\",\n          \"name\": \"test_enhanced_command_parser_end_to_end_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test consistency of parsing behavior across multiple calls.\",\n          \"name\": \"test_enhanced_command_parser_consistency_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test memory usage behavior of parser.\",\n          \"name\": \"test_enhanced_command_parser_memory_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test thread safety behavior of parser.\",\n          \"name\": \"test_enhanced_command_parser_thread_safety_behavior\"\n        },\n        {\n          \"args\": [\n            \"command\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"parse_command\"\n        }\n      ]\n    },\n    \"tests/behavior/test_error_handling_coverage_expansion_phase3_final.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test coverage expansion for core/error_handling.py - Phase 3 Final\",\n          \"methods\": [\n            \"test_mhm_error_initialization\",\n            \"test_data_error_initialization\",\n            \"test_file_operation_error_initialization\",\n            \"test_configuration_error_initialization\",\n            \"test_error_recovery_strategy_base_class\",\n            \"test_file_not_found_recovery_strategy\",\n            \"test_json_decode_recovery_strategy\",\n            \"test_error_handler_initialization\",\n            \"test_error_handler_with_recovery_strategy\",\n            \"test_error_handler_with_multiple_strategies\",\n            \"test_error_handler_with_context\",\n            \"test_error_handler_with_complex_context\",\n            \"test_handle_errors_decorator_success\",\n            \"test_handle_errors_decorator_exception\",\n            \"test_handle_errors_decorator_custom_return\",\n            \"test_handle_errors_decorator_specific_exception\",\n            \"test_handle_errors_decorator_with_context\",\n            \"test_handle_errors_decorator_nested_exceptions\",\n            \"test_handle_errors_decorator_with_args_kwargs\",\n            \"test_handle_errors_decorator_with_exception_in_args\",\n            \"test_handle_errors_decorator_user_friendly_false\",\n            \"test_handle_errors_decorator_operation_name\",\n            \"test_handle_errors_decorator_recovery_success\",\n            \"test_handle_errors_decorator_recovery_failure\",\n            \"test_handle_errors_decorator_double_failure\",\n            \"test_handle_errors_decorator_with_complex_context\",\n            \"test_handle_errors_decorator_with_operation_and_context\",\n            \"test_handle_errors_decorator_with_all_parameters\",\n            \"test_error_handler_global_instance\",\n            \"test_error_handler_global_instance_functionality\",\n            \"test_error_handler_retry_limits\",\n            \"test_error_handler_with_unrecoverable_error\",\n            \"test_error_handler_with_no_context\",\n            \"test_error_handler_with_empty_context\",\n            \"test_error_handler_with_user_friendly_false\",\n            \"test_error_handler_with_user_friendly_true\",\n            \"test_error_handler_with_default_operation\",\n            \"test_error_handler_with_custom_operation\",\n            \"test_error_handler_with_long_operation_name\",\n            \"test_error_handler_with_special_characters_in_context\",\n            \"test_error_handler_with_none_error\",\n            \"test_error_handler_with_none_context_and_error\",\n            \"test_file_not_found_recovery_strategy_without_file_path\",\n            \"test_file_not_found_recovery_strategy_with_invalid_file_path\",\n            \"test_file_not_found_recovery_strategy_with_empty_file_path\",\n            \"test_json_decode_recovery_strategy_recover\",\n            \"test_error_handler_with_file_operation_error\",\n            \"test_error_handler_with_data_error\",\n            \"test_error_handler_with_configuration_error\",\n            \"test_error_handler_with_mhm_error\",\n            \"test_error_handler_with_generic_exception\",\n            \"test_error_handler_with_runtime_error\",\n            \"test_error_handler_with_type_error\",\n            \"test_error_handler_with_attribute_error\",\n            \"test_error_handler_with_key_error\",\n            \"test_error_handler_with_index_error\",\n            \"test_error_handler_with_os_error\",\n            \"test_error_handler_with_io_error\",\n            \"test_error_handler_with_permission_error\",\n            \"test_error_handler_with_timeout_error\",\n            \"test_error_handler_with_connection_error\",\n            \"test_error_handler_with_import_error\",\n            \"test_error_handler_with_module_not_found_error\",\n            \"test_error_handler_with_unicode_error\",\n            \"test_error_handler_with_unicode_decode_error\",\n            \"test_error_handler_with_unicode_encode_error\",\n            \"test_error_handler_with_unicode_translate_error\",\n            \"test_error_handler_with_warning\",\n            \"test_error_handler_with_user_warning\",\n            \"test_error_handler_with_deprecation_warning\",\n            \"test_error_handler_with_future_warning\",\n            \"test_error_handler_with_pending_deprecation_warning\",\n            \"test_error_handler_with_runtime_warning\",\n            \"test_error_handler_with_syntax_warning\",\n            \"test_error_handler_with_import_warning\",\n            \"test_error_handler_with_unicode_warning\",\n            \"test_error_handler_with_bytes_warning\",\n            \"test_error_handler_with_resource_warning\"\n          ],\n          \"name\": \"TestErrorHandlingCoverageExpansionPhase3Final\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test MHMError initialization\",\n          \"name\": \"test_mhm_error_initialization\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test DataError initialization\",\n          \"name\": \"test_data_error_initialization\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test FileOperationError initialization\",\n          \"name\": \"test_file_operation_error_initialization\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test ConfigurationError initialization\",\n          \"name\": \"test_configuration_error_initialization\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test ErrorRecoveryStrategy base class\",\n          \"name\": \"test_error_recovery_strategy_base_class\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test FileNotFoundRecovery strategy\",\n          \"name\": \"test_file_not_found_recovery_strategy\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test JSONDecodeRecovery strategy\",\n          \"name\": \"test_json_decode_recovery_strategy\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test ErrorHandler initialization\",\n          \"name\": \"test_error_handler_initialization\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with recovery strategy\",\n          \"name\": \"test_error_handler_with_recovery_strategy\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with multiple recovery strategies\",\n          \"name\": \"test_error_handler_with_multiple_strategies\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with additional context\",\n          \"name\": \"test_error_handler_with_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with complex context\",\n          \"name\": \"test_error_handler_with_complex_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test handle_errors decorator with successful function\",\n          \"name\": \"test_handle_errors_decorator_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test handle_errors decorator with exception\",\n          \"name\": \"test_handle_errors_decorator_exception\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test handle_errors decorator with custom return value\",\n          \"name\": \"test_handle_errors_decorator_custom_return\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test handle_errors decorator with specific exception handling\",\n          \"name\": \"test_handle_errors_decorator_specific_exception\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test handle_errors decorator with context\",\n          \"name\": \"test_handle_errors_decorator_with_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test handle_errors decorator with nested exceptions\",\n          \"name\": \"test_handle_errors_decorator_nested_exceptions\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test handle_errors decorator with function arguments\",\n          \"name\": \"test_handle_errors_decorator_with_args_kwargs\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test handle_errors decorator with exception in function arguments\",\n          \"name\": \"test_handle_errors_decorator_with_exception_in_args\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test handle_errors decorator with user_friendly=False\",\n          \"name\": \"test_handle_errors_decorator_user_friendly_false\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test handle_errors decorator with custom operation name\",\n          \"name\": \"test_handle_errors_decorator_operation_name\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test handle_errors decorator with successful recovery\",\n          \"name\": \"test_handle_errors_decorator_recovery_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test handle_errors decorator with failed recovery\",\n          \"name\": \"test_handle_errors_decorator_recovery_failure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test handle_errors decorator with double failure after recovery\",\n          \"name\": \"test_handle_errors_decorator_double_failure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test handle_errors decorator with complex context\",\n          \"name\": \"test_handle_errors_decorator_with_complex_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test handle_errors decorator with both operation and context\",\n          \"name\": \"test_handle_errors_decorator_with_operation_and_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test handle_errors decorator with all parameters\",\n          \"name\": \"test_handle_errors_decorator_with_all_parameters\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test the global error_handler instance\",\n          \"name\": \"test_error_handler_global_instance\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test the global error_handler instance functionality\",\n          \"name\": \"test_error_handler_global_instance_functionality\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler retry limits\",\n          \"name\": \"test_error_handler_retry_limits\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with unrecoverable error\",\n          \"name\": \"test_error_handler_with_unrecoverable_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with no context\",\n          \"name\": \"test_error_handler_with_no_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with empty context\",\n          \"name\": \"test_error_handler_with_empty_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with user_friendly=False\",\n          \"name\": \"test_error_handler_with_user_friendly_false\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with user_friendly=True\",\n          \"name\": \"test_error_handler_with_user_friendly_true\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with default operation name\",\n          \"name\": \"test_error_handler_with_default_operation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with custom operation name\",\n          \"name\": \"test_error_handler_with_custom_operation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with long operation name\",\n          \"name\": \"test_error_handler_with_long_operation_name\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with special characters in context\",\n          \"name\": \"test_error_handler_with_special_characters_in_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with None error\",\n          \"name\": \"test_error_handler_with_none_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with None context and error\",\n          \"name\": \"test_error_handler_with_none_context_and_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test FileNotFoundRecovery strategy without file_path in context\",\n          \"name\": \"test_file_not_found_recovery_strategy_without_file_path\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test FileNotFoundRecovery strategy with invalid file_path in context\",\n          \"name\": \"test_file_not_found_recovery_strategy_with_invalid_file_path\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test FileNotFoundRecovery strategy with empty file_path in context\",\n          \"name\": \"test_file_not_found_recovery_strategy_with_empty_file_path\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test JSONDecodeRecovery strategy recover method\",\n          \"name\": \"test_json_decode_recovery_strategy_recover\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with FileOperationError\",\n          \"name\": \"test_error_handler_with_file_operation_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with DataError\",\n          \"name\": \"test_error_handler_with_data_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with ConfigurationError\",\n          \"name\": \"test_error_handler_with_configuration_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with MHMError\",\n          \"name\": \"test_error_handler_with_mhm_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with generic Exception\",\n          \"name\": \"test_error_handler_with_generic_exception\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with RuntimeError\",\n          \"name\": \"test_error_handler_with_runtime_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with TypeError\",\n          \"name\": \"test_error_handler_with_type_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with AttributeError\",\n          \"name\": \"test_error_handler_with_attribute_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with KeyError\",\n          \"name\": \"test_error_handler_with_key_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with IndexError\",\n          \"name\": \"test_error_handler_with_index_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with OSError\",\n          \"name\": \"test_error_handler_with_os_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with IOError\",\n          \"name\": \"test_error_handler_with_io_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with PermissionError\",\n          \"name\": \"test_error_handler_with_permission_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with TimeoutError\",\n          \"name\": \"test_error_handler_with_timeout_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with ConnectionError\",\n          \"name\": \"test_error_handler_with_connection_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with ImportError\",\n          \"name\": \"test_error_handler_with_import_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with ModuleNotFoundError\",\n          \"name\": \"test_error_handler_with_module_not_found_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with UnicodeError\",\n          \"name\": \"test_error_handler_with_unicode_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with UnicodeDecodeError\",\n          \"name\": \"test_error_handler_with_unicode_decode_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with UnicodeEncodeError\",\n          \"name\": \"test_error_handler_with_unicode_encode_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with UnicodeTranslateError\",\n          \"name\": \"test_error_handler_with_unicode_translate_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with Warning\",\n          \"name\": \"test_error_handler_with_warning\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with UserWarning\",\n          \"name\": \"test_error_handler_with_user_warning\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with DeprecationWarning\",\n          \"name\": \"test_error_handler_with_deprecation_warning\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with FutureWarning\",\n          \"name\": \"test_error_handler_with_future_warning\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with PendingDeprecationWarning\",\n          \"name\": \"test_error_handler_with_pending_deprecation_warning\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with RuntimeWarning\",\n          \"name\": \"test_error_handler_with_runtime_warning\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with SyntaxWarning\",\n          \"name\": \"test_error_handler_with_syntax_warning\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with ImportWarning\",\n          \"name\": \"test_error_handler_with_import_warning\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with UnicodeWarning\",\n          \"name\": \"test_error_handler_with_unicode_warning\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with BytesWarning\",\n          \"name\": \"test_error_handler_with_bytes_warning\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test error handler with ResourceWarning\",\n          \"name\": \"test_error_handler_with_resource_warning\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"outer_function\"\n        },\n        {\n          \"args\": [\n            \"arg1\",\n            \"arg2\",\n            \"kwarg1\",\n            \"kwarg2\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [\n            \"arg1\",\n            \"arg2\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"inner_function\"\n        }\n      ]\n    },\n    \"tests/behavior/test_interaction_handlers_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test interaction handlers real behavior and side effects.\",\n          \"methods\": [\n            \"_create_test_user\",\n            \"test_handler_registry_creates_all_handlers\",\n            \"test_get_interaction_handler_returns_correct_handler\",\n            \"test_task_management_handler_can_handle_intents\",\n            \"test_checkin_handler_can_handle_intents\",\n            \"test_profile_handler_can_handle_intents\",\n            \"test_schedule_management_handler_can_handle_intents\",\n            \"test_analytics_handler_can_handle_intents\",\n            \"test_help_handler_can_handle_intents\",\n            \"test_task_management_handler_creates_actual_task\",\n            \"test_task_management_handler_lists_actual_tasks\",\n            \"test_task_management_handler_completes_actual_task\",\n            \"test_checkin_handler_starts_checkin_flow\",\n            \"test_profile_handler_shows_actual_profile\",\n            \"test_help_handler_provides_help\",\n            \"test_all_handlers_return_proper_help\",\n            \"test_all_handlers_return_proper_examples\",\n            \"test_handler_error_handling\",\n            \"test_handler_response_structure\"\n          ],\n          \"name\": \"TestInteractionHandlersBehavior\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"enable_checkins\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a test user with proper account setup.\",\n          \"name\": \"_create_test_user\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that all handlers are properly registered and accessible.\",\n          \"name\": \"test_handler_registry_creates_all_handlers\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that get_interaction_handler returns the correct handler for each intent.\",\n          \"name\": \"test_get_interaction_handler_returns_correct_handler\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that TaskManagementHandler can handle all expected intents.\",\n          \"name\": \"test_task_management_handler_can_handle_intents\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that CheckinHandler can handle all expected intents.\",\n          \"name\": \"test_checkin_handler_can_handle_intents\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that ProfileHandler can handle all expected intents.\",\n          \"name\": \"test_profile_handler_can_handle_intents\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that ScheduleManagementHandler can handle all expected intents.\",\n          \"name\": \"test_schedule_management_handler_can_handle_intents\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that AnalyticsHandler can handle all expected intents.\",\n          \"name\": \"test_analytics_handler_can_handle_intents\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that HelpHandler can handle all expected intents.\",\n          \"name\": \"test_help_handler_can_handle_intents\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that TaskManagementHandler actually creates a task in the system.\",\n          \"name\": \"test_task_management_handler_creates_actual_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that TaskManagementHandler actually lists tasks from the system.\",\n          \"name\": \"test_task_management_handler_lists_actual_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that TaskManagementHandler actually completes a task in the system.\",\n          \"name\": \"test_task_management_handler_completes_actual_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that CheckinHandler starts a check-in flow.\",\n          \"name\": \"test_checkin_handler_starts_checkin_flow\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that ProfileHandler shows actual user profile data.\",\n          \"name\": \"test_profile_handler_shows_actual_profile\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that HelpHandler provides helpful information.\",\n          \"name\": \"test_help_handler_provides_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that all handlers return proper help text.\",\n          \"name\": \"test_all_handlers_return_proper_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that all handlers return proper example commands.\",\n          \"name\": \"test_all_handlers_return_proper_examples\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that handlers handle errors gracefully.\",\n          \"name\": \"test_handler_error_handling\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that all handlers return properly structured responses.\",\n          \"name\": \"test_handler_response_structure\"\n        }\n      ]\n    },\n    \"tests/behavior/test_interaction_handlers_coverage_expansion.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test TaskManagementHandler comprehensive coverage.\",\n          \"methods\": [\n            \"test_handle_create_task_with_title_only\",\n            \"test_handle_create_task_with_all_properties\",\n            \"test_handle_create_task_invalid_priority\",\n            \"test_parse_relative_date_today\",\n            \"test_parse_relative_date_tomorrow\",\n            \"test_parse_relative_date_next_week\",\n            \"test_parse_relative_date_next_month\",\n            \"test_parse_relative_date_existing_date\",\n            \"test_handle_list_tasks_no_tasks\",\n            \"test_handle_list_tasks_with_tasks\",\n            \"test_handle_list_tasks_with_filters\",\n            \"test_handle_list_tasks_due_soon_filter\",\n            \"test_handle_list_tasks_overdue_filter\",\n            \"test_handle_complete_task_with_identifier\",\n            \"test_handle_complete_task_no_identifier\",\n            \"test_handle_complete_task_not_found\",\n            \"test_handle_delete_task_with_identifier\",\n            \"test_handle_delete_task_no_identifier\",\n            \"test_handle_update_task_with_updates\",\n            \"test_handle_update_task_no_updates\",\n            \"test_handle_task_stats_with_analytics\",\n            \"test_handle_task_stats_no_data\",\n            \"test_handle_unknown_intent\",\n            \"test_get_help\",\n            \"test_get_examples\"\n          ],\n          \"name\": \"TestTaskManagementHandlerCoverage\"\n        },\n        {\n          \"docstring\": \"Test CheckinHandler comprehensive coverage.\",\n          \"methods\": [\n            \"test_handle_start_checkin_new_user\",\n            \"test_handle_continue_checkin\",\n            \"test_handle_checkin_status\",\n            \"test_checkin_status_displays_scale_out_of_5\"\n          ],\n          \"name\": \"TestCheckinHandlerCoverage\"\n        },\n        {\n          \"docstring\": \"Test ProfileHandler comprehensive coverage.\",\n          \"methods\": [\n            \"test_handle_show_profile\",\n            \"test_profile_get_help_is_text\",\n            \"test_show_profile_not_raw_json\",\n            \"test_handle_update_profile\",\n            \"test_handle_profile_stats\"\n          ],\n          \"name\": \"TestProfileHandlerCoverage\"\n        },\n        {\n          \"docstring\": \"Test ScheduleManagementHandler comprehensive coverage.\",\n          \"methods\": [\n            \"test_handle_show_schedule\",\n            \"test_handle_update_schedule\"\n          ],\n          \"name\": \"TestScheduleManagementHandlerCoverage\"\n        },\n        {\n          \"docstring\": \"Test AnalyticsHandler comprehensive coverage.\",\n          \"methods\": [\n            \"test_handle_show_analytics\",\n            \"test_handle_mood_trends\",\n            \"test_quantitative_summary_respects_enabled_fields\",\n            \"test_mood_trends_displays_scale_out_of_5\",\n            \"test_checkin_history_displays_scale_out_of_5\"\n          ],\n          \"name\": \"TestAnalyticsHandlerCoverage\"\n        },\n        {\n          \"docstring\": \"Test HelpHandler comprehensive coverage.\",\n          \"methods\": [\n            \"test_handle_help\",\n            \"test_handle_commands\",\n            \"test_handle_examples\"\n          ],\n          \"name\": \"TestHelpHandlerCoverage\"\n        },\n        {\n          \"docstring\": \"Test error handling in interaction handlers.\",\n          \"methods\": [\n            \"test_task_management_handler_error_handling\"\n          ],\n          \"name\": \"TestErrorHandling\"\n        },\n        {\n          \"docstring\": \"Test advanced task management functionality for coverage expansion.\",\n          \"methods\": [\n            \"test_handle_create_task_with_recurrence_settings\",\n            \"test_handle_create_task_with_invalid_priority\",\n            \"test_handle_create_task_with_invalid_recurrence_pattern\",\n            \"test_handle_list_tasks_with_priority_filter\",\n            \"test_handle_list_tasks_with_tag_filter\",\n            \"test_handle_complete_task_suggestion_logic\",\n            \"test_handle_complete_task_with_no_tasks\",\n            \"test_handle_edit_task_with_invalid_task_id\",\n            \"test_handle_delete_task_with_invalid_task_id\"\n          ],\n          \"name\": \"TestTaskManagementAdvancedCoverage\"\n        },\n        {\n          \"docstring\": \"Test advanced checkin handler functionality for coverage expansion.\",\n          \"methods\": [\n            \"test_handle_start_checkin_with_disabled_checkins\",\n            \"test_handle_start_checkin_with_no_questions\",\n            \"test_handle_checkin_response_with_invalid_response\"\n          ],\n          \"name\": \"TestCheckinHandlerAdvancedCoverage\"\n        },\n        {\n          \"docstring\": \"Test advanced profile handler functionality for coverage expansion.\",\n          \"methods\": [\n            \"test_handle_show_profile_with_missing_data\",\n            \"test_handle_update_profile_with_invalid_data\"\n          ],\n          \"name\": \"TestProfileHandlerAdvancedCoverage\"\n        },\n        {\n          \"docstring\": \"Test advanced schedule management functionality for coverage expansion.\",\n          \"methods\": [\n            \"test_handle_show_schedule_with_no_schedules\",\n            \"test_handle_update_schedule_with_invalid_period\"\n          ],\n          \"name\": \"TestScheduleManagementHandlerAdvancedCoverage\"\n        },\n        {\n          \"docstring\": \"Test advanced analytics handler functionality for coverage expansion.\",\n          \"methods\": [\n            \"test_handle_show_analytics_with_no_data\",\n            \"test_handle_show_analytics_with_specific_metric\"\n          ],\n          \"name\": \"TestAnalyticsHandlerAdvancedCoverage\"\n        },\n        {\n          \"docstring\": \"Test advanced help handler functionality for coverage expansion.\",\n          \"methods\": [\n            \"test_handle_help_with_specific_handler\",\n            \"test_handle_help_with_invalid_handler\",\n            \"test_handler_with_missing_user_data\"\n          ],\n          \"name\": \"TestHelpHandlerAdvancedCoverage\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"get_mood_trends\"\n          ],\n          \"name\": \"_MockAnalytics\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"get_checkin_history\"\n          ],\n          \"name\": \"_MockAnalytics\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Mock communication manager for testing.\",\n          \"name\": \"mock_communication_manager\"\n        },\n        {\n          \"args\": [\n            \"test_path_factory\"\n          ],\n          \"docstring\": \"Provide per-test data directory under tests/data/tmp.\",\n          \"name\": \"test_data_dir\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test task creation with only title.\",\n          \"name\": \"test_handle_create_task_with_title_only\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test task creation with all properties.\",\n          \"name\": \"test_handle_create_task_with_all_properties\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test task creation with invalid priority.\",\n          \"name\": \"test_handle_create_task_invalid_priority\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test relative date parsing for 'today'.\",\n          \"name\": \"test_parse_relative_date_today\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test relative date parsing for 'tomorrow'.\",\n          \"name\": \"test_parse_relative_date_tomorrow\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test relative date parsing for 'next week'.\",\n          \"name\": \"test_parse_relative_date_next_week\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test relative date parsing for 'next month'.\",\n          \"name\": \"test_parse_relative_date_next_month\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test relative date parsing for existing date.\",\n          \"name\": \"test_parse_relative_date_existing_date\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test listing tasks when user has no tasks.\",\n          \"name\": \"test_handle_list_tasks_no_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test listing tasks when user has tasks.\",\n          \"name\": \"test_handle_list_tasks_with_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test listing tasks with various filters.\",\n          \"name\": \"test_handle_list_tasks_with_filters\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test listing tasks with due_soon filter.\",\n          \"name\": \"test_handle_list_tasks_due_soon_filter\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test listing tasks with overdue filter.\",\n          \"name\": \"test_handle_list_tasks_overdue_filter\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test completing a task with identifier.\",\n          \"name\": \"test_handle_complete_task_with_identifier\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test completing a task without identifier.\",\n          \"name\": \"test_handle_complete_task_no_identifier\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test completing a task that doesn't exist.\",\n          \"name\": \"test_handle_complete_task_not_found\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test deleting a task with identifier.\",\n          \"name\": \"test_handle_delete_task_with_identifier\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test deleting a task without identifier.\",\n          \"name\": \"test_handle_delete_task_no_identifier\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test updating a task with specific updates.\",\n          \"name\": \"test_handle_update_task_with_updates\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test updating a task without specifying updates.\",\n          \"name\": \"test_handle_update_task_no_updates\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test task statistics with analytics.\",\n          \"name\": \"test_handle_task_stats_with_analytics\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test task statistics with no data.\",\n          \"name\": \"test_handle_task_stats_no_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test handling unknown intent.\",\n          \"name\": \"test_handle_unknown_intent\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting help text.\",\n          \"name\": \"test_get_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting example commands.\",\n          \"name\": \"test_get_examples\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test starting check-in for new user.\",\n          \"name\": \"test_handle_start_checkin_new_user\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test continuing check-in process.\",\n          \"name\": \"test_handle_continue_checkin\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test checking check-in status.\",\n          \"name\": \"test_handle_checkin_status\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"monkeypatch\"\n          ],\n          \"docstring\": \"Ensure check-in status lines render mood values on a /5 scale.\",\n          \"name\": \"test_checkin_status_displays_scale_out_of_5\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test showing user profile.\",\n          \"name\": \"test_handle_show_profile\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"ProfileHandler.get_help should return a helpful text string.\",\n          \"name\": \"test_profile_get_help_is_text\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Profile display should be formatted text, not raw JSON.\",\n          \"name\": \"test_show_profile_not_raw_json\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test updating user profile.\",\n          \"name\": \"test_handle_update_profile\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test showing profile statistics.\",\n          \"name\": \"test_handle_profile_stats\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test showing user schedule.\",\n          \"name\": \"test_handle_show_schedule\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test updating user schedule.\",\n          \"name\": \"test_handle_update_schedule\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test showing analytics.\",\n          \"name\": \"test_handle_show_analytics\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test showing mood trends.\",\n          \"name\": \"test_handle_mood_trends\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"monkeypatch\"\n          ],\n          \"docstring\": \"Quant summary should include only enabled numeric fields present in data.\",\n          \"name\": \"test_quantitative_summary_respects_enabled_fields\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"monkeypatch\"\n          ],\n          \"docstring\": \"Ensure mood trends render averages/ranges on a /5 scale.\",\n          \"name\": \"test_mood_trends_displays_scale_out_of_5\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"monkeypatch\"\n          ],\n          \"docstring\": \"Ensure check-in history shows mood as /5.\",\n          \"name\": \"test_checkin_history_displays_scale_out_of_5\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test showing help.\",\n          \"name\": \"test_handle_help\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test showing commands.\",\n          \"name\": \"test_handle_commands\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test showing examples.\",\n          \"name\": \"test_handle_examples\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test error handling in task management.\",\n          \"name\": \"test_task_management_handler_error_handling\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test task creation with recurrence settings from user preferences.\",\n          \"name\": \"test_handle_create_task_with_recurrence_settings\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test task creation with invalid priority (should default to medium).\",\n          \"name\": \"test_handle_create_task_with_invalid_priority\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test task creation with invalid recurrence pattern (should be ignored).\",\n          \"name\": \"test_handle_create_task_with_invalid_recurrence_pattern\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test task listing with priority filter.\",\n          \"name\": \"test_handle_list_tasks_with_priority_filter\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test task listing with tag filter.\",\n          \"name\": \"test_handle_list_tasks_with_tag_filter\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test task completion suggestion logic when no specific task is mentioned.\",\n          \"name\": \"test_handle_complete_task_suggestion_logic\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test task completion when user has no tasks.\",\n          \"name\": \"test_handle_complete_task_with_no_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test task editing with invalid task ID.\",\n          \"name\": \"test_handle_edit_task_with_invalid_task_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test task deletion with invalid task ID.\",\n          \"name\": \"test_handle_delete_task_with_invalid_task_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test starting checkin when checkins are disabled for user.\",\n          \"name\": \"test_handle_start_checkin_with_disabled_checkins\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test starting checkin when no questions are available.\",\n          \"name\": \"test_handle_start_checkin_with_no_questions\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test checkin response handling with invalid response format.\",\n          \"name\": \"test_handle_checkin_response_with_invalid_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test profile display when user data is missing.\",\n          \"name\": \"test_handle_show_profile_with_missing_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test profile update with invalid data.\",\n          \"name\": \"test_handle_update_profile_with_invalid_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test schedule display when user has no schedules.\",\n          \"name\": \"test_handle_show_schedule_with_no_schedules\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test schedule update with invalid time period.\",\n          \"name\": \"test_handle_update_schedule_with_invalid_period\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test analytics display when user has no data.\",\n          \"name\": \"test_handle_show_analytics_with_no_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test analytics display with specific metric request.\",\n          \"name\": \"test_handle_show_analytics_with_specific_metric\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test help display for specific handler.\",\n          \"name\": \"test_handle_help_with_specific_handler\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test help display for invalid handler.\",\n          \"name\": \"test_handle_help_with_invalid_handler\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test handlers with missing user data.\",\n          \"name\": \"test_handler_with_missing_user_data\"\n        },\n        {\n          \"args\": [\n            \"uid\",\n            \"section\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_mock_get_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"uid\",\n            \"days\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_mood_trends\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"uid\",\n            \"days\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_checkin_history\"\n        }\n      ]\n    },\n    \"tests/behavior/test_logger_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test logger initialization with real behavior verification.\",\n          \"methods\": [\n            \"temp_log_dir\",\n            \"test_get_logger_creation_real_behavior\",\n            \"test_get_logger_same_name_real_behavior\",\n            \"test_get_log_level_from_env_real_behavior\"\n          ],\n          \"name\": \"TestLoggerInitializationBehavior\"\n        },\n        {\n          \"docstring\": \"Test logger verbosity control with real behavior verification.\",\n          \"methods\": [\n            \"temp_log_dir\",\n            \"test_verbose_mode_toggle_real_behavior\",\n            \"test_set_verbose_mode_real_behavior\",\n            \"test_set_console_log_level_real_behavior\"\n          ],\n          \"name\": \"TestLoggerVerbosityBehavior\"\n        },\n        {\n          \"docstring\": \"Test noise suppression functionality with real behavior verification.\",\n          \"methods\": [\n            \"test_suppress_noisy_logging_real_behavior\",\n            \"test_disable_module_logging_real_behavior\"\n          ],\n          \"name\": \"TestLoggerNoiseSuppressionBehavior\"\n        },\n        {\n          \"docstring\": \"Test logger file operations with real behavior verification.\",\n          \"methods\": [\n            \"temp_log_dir\",\n            \"test_backup_directory_rotating_handler_creation_real_behavior\",\n            \"test_get_log_file_info_real_behavior\",\n            \"test_cleanup_old_logs_real_behavior\"\n          ],\n          \"name\": \"TestLoggerFileOperationsBehavior\"\n        },\n        {\n          \"docstring\": \"Test logger restart functionality with real behavior verification.\",\n          \"methods\": [\n            \"temp_log_dir\",\n            \"test_force_restart_logging_real_behavior\",\n            \"test_setup_logging_idempotent_real_behavior\"\n          ],\n          \"name\": \"TestLoggerRestartBehavior\"\n        },\n        {\n          \"docstring\": \"Test logger integration with real behavior verification.\",\n          \"methods\": [\n            \"temp_log_dir\",\n            \"test_logger_full_workflow_real_behavior\",\n            \"test_logger_environment_integration_real_behavior\"\n          ],\n          \"name\": \"TestLoggerIntegrationBehavior\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create temporary log directory for testing.\",\n          \"name\": \"temp_log_dir\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_log_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test logger can be created successfully.\",\n          \"name\": \"test_get_logger_creation_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_log_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test getting same logger returns same instance.\",\n          \"name\": \"test_get_logger_same_name_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test getting log level from environment.\",\n          \"name\": \"test_get_log_level_from_env_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create temporary log directory for testing.\",\n          \"name\": \"temp_log_dir\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_log_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test verbose mode toggle functionality.\",\n          \"name\": \"test_verbose_mode_toggle_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_log_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test setting verbose mode explicitly.\",\n          \"name\": \"test_set_verbose_mode_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_log_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test setting console log level.\",\n          \"name\": \"test_set_console_log_level_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test suppression of noisy third-party logging.\",\n          \"name\": \"test_suppress_noisy_logging_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test disabling specific module logging.\",\n          \"name\": \"test_disable_module_logging_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create temporary log directory for testing.\",\n          \"name\": \"temp_log_dir\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_log_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test BackupDirectoryRotatingFileHandler creation.\",\n          \"name\": \"test_backup_directory_rotating_handler_creation_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_log_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test getting log file information.\",\n          \"name\": \"test_get_log_file_info_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_log_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cleanup of old log files.\",\n          \"name\": \"test_cleanup_old_logs_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create temporary log directory for testing.\",\n          \"name\": \"temp_log_dir\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_log_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test forcing logging restart.\",\n          \"name\": \"test_force_restart_logging_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_log_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test setup_logging is idempotent.\",\n          \"name\": \"test_setup_logging_idempotent_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create temporary log directory for testing.\",\n          \"name\": \"temp_log_dir\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_log_dir\",\n            \"monkeypatch\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test complete logger workflow.\",\n          \"name\": \"test_logger_full_workflow_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_log_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test logger integration with environment variables.\",\n          \"name\": \"test_logger_environment_integration_real_behavior\"\n        }\n      ]\n    },\n    \"tests/behavior/test_logger_coverage_expansion.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test Core Logger coverage expansion with real behavior verification.\",\n          \"methods\": [\n            \"_setup\",\n            \"teardown_method\",\n            \"test_component_logger_initialization_real_behavior\",\n            \"test_component_logger_custom_level_real_behavior\",\n            \"test_component_logger_logging_methods_real_behavior\",\n            \"test_component_logger_structured_data_real_behavior\",\n            \"test_backup_directory_rotating_file_handler_initialization_real_behavior\",\n            \"test_backup_directory_rotating_file_handler_rollover_real_behavior\",\n            \"test_backup_directory_rotating_file_handler_rollover_disabled_real_behavior\",\n            \"test_heartbeat_warning_filter_real_behavior\",\n            \"test_heartbeat_warning_filter_summary_logging_real_behavior\",\n            \"test_get_component_logger_real_behavior\",\n            \"test_get_logger_real_behavior\",\n            \"test_suppress_noisy_logging_real_behavior\",\n            \"test_compress_old_logs_real_behavior\",\n            \"test_compress_old_logs_no_files_real_behavior\",\n            \"test_cleanup_old_archives_real_behavior\",\n            \"test_cleanup_old_logs_real_behavior\",\n            \"test_logger_error_handling_real_behavior\",\n            \"test_logger_performance_under_load\",\n            \"test_logger_memory_behavior\",\n            \"test_logger_thread_safety_behavior\",\n            \"test_logger_file_rotation_edge_cases\",\n            \"test_logger_encoding_handling_real_behavior\",\n            \"test_logger_concurrent_file_access\",\n            \"test_logger_backup_directory_creation_real_behavior\",\n            \"test_logger_formatter_real_behavior\",\n            \"test_logger_level_filtering_real_behavior\",\n            \"test_get_log_file_info_real_behavior\",\n            \"test_setup_logging_real_behavior\",\n            \"test_toggle_verbose_logging_real_behavior\",\n            \"test_get_verbose_mode_real_behavior\",\n            \"test_set_verbose_mode_real_behavior\"\n          ],\n          \"name\": \"TestLoggerCoverageExpansion\"\n        },\n        {\n          \"docstring\": \"Test integration behavior of Core Logger.\",\n          \"methods\": [\n            \"_setup\",\n            \"teardown_method\",\n            \"test_logger_integration_with_multiple_components\",\n            \"test_logger_error_recovery_with_real_operations\",\n            \"test_logger_concurrent_access_safety\",\n            \"test_logger_memory_behavior\",\n            \"test_logger_thread_safety_behavior\"\n          ],\n          \"name\": \"TestLoggerIntegration\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_path_factory\"\n          ],\n          \"docstring\": \"Set up test environment.\",\n          \"name\": \"_setup\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Clean up test environment.\",\n          \"name\": \"teardown_method\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that component logger initializes with proper structure.\",\n          \"name\": \"test_component_logger_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test component logger with custom log level.\",\n          \"name\": \"test_component_logger_custom_level_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test all logging methods with real behavior.\",\n          \"name\": \"test_component_logger_logging_methods_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test logging with structured data.\",\n          \"name\": \"test_component_logger_structured_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup directory rotating file handler initialization.\",\n          \"name\": \"test_backup_directory_rotating_file_handler_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test log file rollover with real behavior.\",\n          \"name\": \"test_backup_directory_rotating_file_handler_rollover_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test rollover when disabled.\",\n          \"name\": \"test_backup_directory_rotating_file_handler_rollover_disabled_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test heartbeat warning filter with real behavior.\",\n          \"name\": \"test_heartbeat_warning_filter_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test heartbeat warning filter summary logging.\",\n          \"name\": \"test_heartbeat_warning_filter_summary_logging_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test get_component_logger function with real behavior.\",\n          \"name\": \"test_get_component_logger_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test get_logger function with real behavior.\",\n          \"name\": \"test_get_logger_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test suppress_noisy_logging function with real behavior.\",\n          \"name\": \"test_suppress_noisy_logging_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test compression of old log files with real behavior.\",\n          \"name\": \"test_compress_old_logs_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test compression when no files exist.\",\n          \"name\": \"test_compress_old_logs_no_files_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test cleanup of old archives with real behavior.\",\n          \"name\": \"test_cleanup_old_archives_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test cleanup of old log files with real behavior.\",\n          \"name\": \"test_cleanup_old_logs_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test logger error handling with real behavior.\",\n          \"name\": \"test_logger_error_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test logger performance under load.\",\n          \"name\": \"test_logger_performance_under_load\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test memory usage behavior of logger.\",\n          \"name\": \"test_logger_memory_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test thread safety behavior of logger.\",\n          \"name\": \"test_logger_thread_safety_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test logger file rotation edge cases.\",\n          \"name\": \"test_logger_file_rotation_edge_cases\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test logger encoding handling with real behavior.\",\n          \"name\": \"test_logger_encoding_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test concurrent file access behavior.\",\n          \"name\": \"test_logger_concurrent_file_access\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test backup directory creation with real behavior.\",\n          \"name\": \"test_logger_backup_directory_creation_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test logger formatter with real behavior.\",\n          \"name\": \"test_logger_formatter_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test logger level filtering with real behavior.\",\n          \"name\": \"test_logger_level_filtering_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test get_log_file_info function with real behavior.\",\n          \"name\": \"test_get_log_file_info_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test setup_logging function with real behavior.\",\n          \"name\": \"test_setup_logging_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test toggle_verbose_logging function with real behavior.\",\n          \"name\": \"test_toggle_verbose_logging_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test get_verbose_mode function with real behavior.\",\n          \"name\": \"test_get_verbose_mode_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test set_verbose_mode function with real behavior.\",\n          \"name\": \"test_set_verbose_mode_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_path_factory\"\n          ],\n          \"docstring\": \"Set up test environment.\",\n          \"name\": \"_setup\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Clean up test environment.\",\n          \"name\": \"teardown_method\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test logger integration with multiple components.\",\n          \"name\": \"test_logger_integration_with_multiple_components\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test error recovery when working with real operations.\",\n          \"name\": \"test_logger_error_recovery_with_real_operations\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that logger handles concurrent access safely.\",\n          \"name\": \"test_logger_concurrent_access_safety\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test memory usage behavior of logger.\",\n          \"name\": \"test_logger_memory_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test thread safety behavior of logger.\",\n          \"name\": \"test_logger_thread_safety_behavior\"\n        },\n        {\n          \"args\": [\n            \"level\",\n            \"message\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"create_record\"\n        },\n        {\n          \"args\": [\n            \"thread_id\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"log_messages\"\n        },\n        {\n          \"args\": [\n            \"thread_id\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"write_logs\"\n        },\n        {\n          \"args\": [\n            \"thread_id\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"log_messages\"\n        },\n        {\n          \"args\": [\n            \"thread_id\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"log_messages\"\n        }\n      ]\n    },\n    \"tests/behavior/test_logger_coverage_expansion_phase3_simple.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Simple test suite to expand logger coverage from 68% to 75%+\",\n          \"methods\": [\n            \"test_get_log_file_info_function\",\n            \"test_get_log_file_info_with_nonexistent_files\",\n            \"test_verbose_mode_functions_simple\",\n            \"test_environment_detection_functions_simple\",\n            \"test_component_logger_channels_alias_simple\",\n            \"test_component_logger_unknown_component_fallback_simple\",\n            \"test_backup_directory_rotating_file_handler_rollover_simple\",\n            \"test_heartbeat_warning_filter_simple\",\n            \"test_compress_old_logs_simple\",\n            \"test_cleanup_old_archives_simple\",\n            \"test_cleanup_old_logs_simple\",\n            \"test_suppress_noisy_logging_simple\",\n            \"test_setup_logging_environment_detection_simple\",\n            \"test_component_logger_error_handling_during_creation_simple\",\n            \"test_backup_directory_rotating_file_handler_initialization_simple\",\n            \"test_logger_integration_with_multiple_components_simple\",\n            \"test_logger_performance_under_high_load_simple\"\n          ],\n          \"name\": \"TestLoggerCoverageExpansionPhase3Simple\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test get_log_file_info function with proper mocking\",\n          \"name\": \"test_get_log_file_info_function\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test get_log_file_info with nonexistent files\",\n          \"name\": \"test_get_log_file_info_with_nonexistent_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test verbose mode setting and getting functions\",\n          \"name\": \"test_verbose_mode_functions_simple\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test environment detection functions\",\n          \"name\": \"test_environment_detection_functions_simple\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test that 'channels' component name is aliased to 'communication_manager'\",\n          \"name\": \"test_component_logger_channels_alias_simple\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test that unknown component names fall back to main log file\",\n          \"name\": \"test_component_logger_unknown_component_fallback_simple\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test BackupDirectoryRotatingFileHandler rollover with simple conditions\",\n          \"name\": \"test_backup_directory_rotating_file_handler_rollover_simple\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test HeartbeatWarningFilter basic functionality\",\n          \"name\": \"test_heartbeat_warning_filter_simple\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test compress_old_logs with simple conditions\",\n          \"name\": \"test_compress_old_logs_simple\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test cleanup_old_archives with simple conditions\",\n          \"name\": \"test_cleanup_old_archives_simple\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test cleanup_old_logs with simple conditions\",\n          \"name\": \"test_cleanup_old_logs_simple\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test suppress_noisy_logging function\",\n          \"name\": \"test_suppress_noisy_logging_simple\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test setup_logging with different environment configurations\",\n          \"name\": \"test_setup_logging_environment_detection_simple\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test ComponentLogger error handling during creation\",\n          \"name\": \"test_component_logger_error_handling_during_creation_simple\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test BackupDirectoryRotatingFileHandler initialization with simple parameters\",\n          \"name\": \"test_backup_directory_rotating_file_handler_initialization_simple\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test logger integration with multiple components\",\n          \"name\": \"test_logger_integration_with_multiple_components_simple\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tmp_path\"\n          ],\n          \"docstring\": \"Test logger performance under high load conditions\",\n          \"name\": \"test_logger_performance_under_high_load_simple\"\n        }\n      ]\n    },\n    \"tests/behavior/test_message_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test message category functionality.\",\n          \"methods\": [\n            \"test_get_message_categories_success\",\n            \"test_get_message_categories_default\",\n            \"test_get_message_categories_custom\",\n            \"test_get_message_categories_empty\"\n          ],\n          \"name\": \"TestMessageCategories\"\n        },\n        {\n          \"docstring\": \"Test default message loading functionality.\",\n          \"methods\": [\n            \"test_load_default_messages_success\",\n            \"test_load_default_messages_file_not_found\",\n            \"test_load_default_messages_invalid_json\"\n          ],\n          \"name\": \"TestDefaultMessages\"\n        },\n        {\n          \"docstring\": \"Test message CRUD operations.\",\n          \"methods\": [\n            \"test_add_message_success\",\n            \"test_edit_message_success\",\n            \"test_edit_message_not_found\",\n            \"test_update_message_success\",\n            \"test_delete_message_success\",\n            \"test_delete_message_not_found\"\n          ],\n          \"name\": \"TestMessageCRUD\"\n        },\n        {\n          \"docstring\": \"Test sent message tracking functionality.\",\n          \"methods\": [\n            \"test_store_sent_message_success\",\n            \"test_get_recent_messages_success\",\n            \"test_get_recent_messages_empty\"\n          ],\n          \"name\": \"TestSentMessages\"\n        },\n        {\n          \"docstring\": \"Test message file creation and management.\",\n          \"methods\": [\n            \"test_create_message_file_from_defaults_success\",\n            \"test_ensure_user_message_files_success\"\n          ],\n          \"name\": \"TestMessageFileManagement\"\n        },\n        {\n          \"docstring\": \"Test error handling in message management functions.\",\n          \"methods\": [\n            \"test_add_message_file_error\",\n            \"test_edit_message_file_error\",\n            \"test_delete_message_file_error\",\n            \"test_store_sent_message_file_error\"\n          ],\n          \"name\": \"TestErrorHandling\"\n        },\n        {\n          \"docstring\": \"Test integration between message management functions.\",\n          \"methods\": [\n            \"test_full_message_lifecycle\"\n          ],\n          \"name\": \"TestIntegration\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting message categories successfully.\",\n          \"name\": \"test_get_message_categories_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting default message categories.\",\n          \"name\": \"test_get_message_categories_default\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting custom message categories.\",\n          \"name\": \"test_get_message_categories_custom\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting message categories when none are defined.\",\n          \"name\": \"test_get_message_categories_empty\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test loading default messages successfully.\",\n          \"name\": \"test_load_default_messages_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test loading default messages when file doesn't exist.\",\n          \"name\": \"test_load_default_messages_file_not_found\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test loading default messages with invalid JSON.\",\n          \"name\": \"test_load_default_messages_invalid_json\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test adding a message successfully.\",\n          \"name\": \"test_add_message_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test editing a message successfully.\",\n          \"name\": \"test_edit_message_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test editing a message that doesn't exist.\",\n          \"name\": \"test_edit_message_not_found\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test updating a message successfully.\",\n          \"name\": \"test_update_message_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test deleting a message successfully.\",\n          \"name\": \"test_delete_message_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test deleting a message that doesn't exist.\",\n          \"name\": \"test_delete_message_not_found\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test storing a sent message successfully.\",\n          \"name\": \"test_store_sent_message_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test getting last 10 sent messages successfully.\",\n          \"name\": \"test_get_recent_messages_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test getting last 10 messages when none exist.\",\n          \"name\": \"test_get_recent_messages_empty\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test creating message file from defaults successfully.\",\n          \"name\": \"test_create_message_file_from_defaults_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test ensuring user message files exist successfully.\",\n          \"name\": \"test_ensure_user_message_files_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test add_message handles file errors gracefully.\",\n          \"name\": \"test_add_message_file_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test edit_message handles file errors gracefully.\",\n          \"name\": \"test_edit_message_file_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test delete_message handles file errors gracefully.\",\n          \"name\": \"test_delete_message_file_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test store_sent_message handles file errors gracefully.\",\n          \"name\": \"test_store_sent_message_file_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test complete message lifecycle (add, edit, delete).\",\n          \"name\": \"test_full_message_lifecycle\"\n        }\n      ]\n    },\n    \"tests/behavior/test_observability_logging.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [\n            \"tmp_path\",\n            \"monkeypatch\"\n          ],\n          \"docstring\": \"Verify component logs go to their files, do not duplicate into app.log, and errors go to errors.log.\",\n          \"name\": \"test_component_logs_isolation_and_errors_capture\"\n        }\n      ]\n    },\n    \"tests/behavior/test_response_tracking_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test real behavior of response tracking functions.\",\n          \"methods\": [\n            \"test_store_user_response_creates_actual_file\",\n            \"test_store_user_response_persists_multiple_entries\",\n            \"test_store_chat_interaction_creates_chat_log\",\n            \"test_get_recent_responses_returns_actual_data\",\n            \"test_get_recent_checkins_returns_checkin_data\",\n            \"test_get_recent_chat_interactions_returns_chat_data\",\n            \"test_get_user_checkin_preferences_returns_actual_preferences\",\n            \"test_is_user_checkins_enabled_checks_actual_account_data\",\n            \"test_get_user_checkin_questions_returns_actual_questions\",\n            \"test_get_user_info_for_tracking_returns_complete_user_info\",\n            \"test_track_user_response_stores_checkin\",\n            \"test_track_user_response_stores_chat_interaction\",\n            \"test_track_user_response_stores_generic_response\",\n            \"test_response_tracking_error_handling_preserves_system_stability\",\n            \"test_response_tracking_performance_under_load\",\n            \"test_response_tracking_data_integrity\"\n          ],\n          \"name\": \"TestResponseTrackingBehavior\"\n        },\n        {\n          \"docstring\": \"Test integration between response tracking functions.\",\n          \"methods\": [\n            \"test_response_tracking_integration_with_user_data\",\n            \"test_response_tracking_error_recovery_with_real_files\",\n            \"test_response_tracking_concurrent_access_safety\"\n          ],\n          \"name\": \"TestResponseTrackingIntegration\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that storing user response actually creates data files.\",\n          \"name\": \"test_store_user_response_creates_actual_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that storing multiple responses actually persists all entries.\",\n          \"name\": \"test_store_user_response_persists_multiple_entries\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that chat interactions are stored in chat interactions file.\",\n          \"name\": \"test_store_chat_interaction_creates_chat_log\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that getting recent responses actually returns stored data.\",\n          \"name\": \"test_get_recent_responses_returns_actual_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that getting recent checkins returns actual checkin data.\",\n          \"name\": \"test_get_recent_checkins_returns_checkin_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that getting recent chat interactions returns actual chat data.\",\n          \"name\": \"test_get_recent_chat_interactions_returns_chat_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that getting user checkin preferences returns actual preference data.\",\n          \"name\": \"test_get_user_checkin_preferences_returns_actual_preferences\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that checking if user checkins are enabled checks actual account data.\",\n          \"name\": \"test_is_user_checkins_enabled_checks_actual_account_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that getting user checkin questions returns actual question configuration.\",\n          \"name\": \"test_get_user_checkin_questions_returns_actual_questions\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that getting user info for tracking returns complete user information.\",\n          \"name\": \"test_get_user_info_for_tracking_returns_complete_user_info\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that tracking user response stores checkin data.\",\n          \"name\": \"test_track_user_response_stores_checkin\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that tracking user response stores chat interaction data.\",\n          \"name\": \"test_track_user_response_stores_chat_interaction\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that tracking user response stores generic response data.\",\n          \"name\": \"test_track_user_response_stores_generic_response\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that response tracking error handling preserves system stability.\",\n          \"name\": \"test_response_tracking_error_handling_preserves_system_stability\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that response tracking performs well under load.\",\n          \"name\": \"test_response_tracking_performance_under_load\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that response tracking maintains data integrity.\",\n          \"name\": \"test_response_tracking_data_integrity\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test integration between response tracking and user data management.\",\n          \"name\": \"test_response_tracking_integration_with_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test error recovery when working with real files.\",\n          \"name\": \"test_response_tracking_error_recovery_with_real_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that response tracking handles concurrent access safely.\",\n          \"name\": \"test_response_tracking_concurrent_access_safety\"\n        }\n      ]\n    },\n    \"tests/behavior/test_schedule_management_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test schedule management real behavior and side effects.\",\n          \"methods\": [\n            \"test_get_schedule_time_periods_creates_cache\",\n            \"test_set_schedule_period_active_persists_changes\",\n            \"test_clear_schedule_periods_cache_removes_entries\",\n            \"test_validate_and_format_time_enforces_rules\",\n            \"test_time_conversion_functions_work_correctly\",\n            \"test_get_current_day_names_returns_actual_days\",\n            \"test_schedule_period_activation_integration\",\n            \"test_schedule_cache_invalidation\",\n            \"test_set_schedule_periods_persists_complete_data\",\n            \"test_set_schedule_days_persists_day_changes\",\n            \"test_schedule_period_crud_with_usercontext_mocking\",\n            \"test_schedule_period_operations_with_error_handling\",\n            \"test_schedule_period_validation_errors\",\n            \"test_schedule_period_operations_with_scheduler_manager\",\n            \"test_schedule_period_operations_with_real_user_data\",\n            \"test_schedule_period_edge_cases\"\n          ],\n          \"name\": \"TestScheduleManagementBehavior\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that getting schedule periods actually creates cache entries.\",\n          \"name\": \"test_get_schedule_time_periods_creates_cache\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that setting period active actually persists changes to user data.\",\n          \"name\": \"test_set_schedule_period_active_persists_changes\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that clearing schedule periods cache actually removes cache entries.\",\n          \"name\": \"test_clear_schedule_periods_cache_removes_entries\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that time validation actually enforces format rules.\",\n          \"name\": \"test_validate_and_format_time_enforces_rules\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that time conversion functions produce accurate results.\",\n          \"name\": \"test_time_conversion_functions_work_correctly\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that get_current_day_names returns actual current day information.\",\n          \"name\": \"test_get_current_day_names_returns_actual_days\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test complete integration of schedule period activation workflow.\",\n          \"name\": \"test_schedule_period_activation_integration\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that schedule cache is properly invalidated when data changes.\",\n          \"name\": \"test_schedule_cache_invalidation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that setting schedule periods actually persists complete data structure.\",\n          \"name\": \"test_set_schedule_periods_persists_complete_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that setting schedule days actually persists day changes.\",\n          \"name\": \"test_set_schedule_days_persists_day_changes\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test CRUD operations with proper UserContext mocking.\",\n          \"name\": \"test_schedule_period_crud_with_usercontext_mocking\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that schedule operations handle errors gracefully.\",\n          \"name\": \"test_schedule_period_operations_with_error_handling\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that schedule operations validate input correctly.\",\n          \"name\": \"test_schedule_period_validation_errors\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test schedule operations with scheduler manager integration.\",\n          \"name\": \"test_schedule_period_operations_with_scheduler_manager\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test schedule operations with realistic user data setup.\",\n          \"name\": \"test_schedule_period_operations_with_real_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test schedule operations with edge cases and boundary conditions.\",\n          \"name\": \"test_schedule_period_edge_cases\"\n        }\n      ]\n    },\n    \"tests/behavior/test_scheduler_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test SchedulerManager functionality.\",\n          \"methods\": [\n            \"scheduler_manager\",\n            \"test_scheduler_manager_initialization\",\n            \"test_stop_scheduler_no_thread\",\n            \"test_is_job_for_category_no_jobs\",\n            \"test_is_job_for_category_with_matching_job\",\n            \"test_is_job_for_category_with_non_matching_job\",\n            \"test_get_random_time_within_period_valid_times\",\n            \"test_get_random_time_within_period_invalid_times\",\n            \"test_is_time_conflict_no_conflicts\",\n            \"test_cleanup_old_tasks\",\n            \"test_log_scheduled_tasks\"\n          ],\n          \"name\": \"TestSchedulerManager\"\n        },\n        {\n          \"docstring\": \"Test standalone scheduler functions.\",\n          \"methods\": [\n            \"test_get_user_categories_success\",\n            \"test_get_user_categories_no_user\",\n            \"test_get_user_task_preferences_success\",\n            \"test_get_user_task_preferences_no_user\",\n            \"test_get_user_checkin_preferences_success\",\n            \"test_get_user_checkin_preferences_no_user\"\n          ],\n          \"name\": \"TestSchedulerFunctions\"\n        },\n        {\n          \"docstring\": \"Test scheduler integration scenarios.\",\n          \"methods\": [\n            \"test_scheduler_lifecycle\",\n            \"test_scheduler_with_mock_users\"\n          ],\n          \"name\": \"TestSchedulerIntegration\"\n        },\n        {\n          \"docstring\": \"Test scheduler edge cases and error conditions.\",\n          \"methods\": [\n            \"test_scheduler_with_empty_user_list\",\n            \"test_scheduler_with_invalid_user_data\",\n            \"test_random_time_generation_consistency\"\n          ],\n          \"name\": \"TestSchedulerEdgeCases\"\n        },\n        {\n          \"docstring\": \"Test task reminder specific functions.\",\n          \"methods\": [\n            \"test_schedule_all_task_reminders_success\",\n            \"test_schedule_all_task_reminders_disabled\"\n          ],\n          \"name\": \"TestTaskReminderFunctions\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Create a mock communication manager.\",\n          \"name\": \"mock_communication_manager\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_communication_manager\"\n          ],\n          \"docstring\": \"Create a SchedulerManager instance for testing.\",\n          \"name\": \"scheduler_manager\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_communication_manager\"\n          ],\n          \"docstring\": \"Test SchedulerManager initialization.\",\n          \"name\": \"test_scheduler_manager_initialization\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test stopping scheduler when no thread is running.\",\n          \"name\": \"test_stop_scheduler_no_thread\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test checking for jobs when no jobs exist.\",\n          \"name\": \"test_is_job_for_category_no_jobs\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test checking for jobs when a matching job exists.\",\n          \"name\": \"test_is_job_for_category_with_matching_job\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test checking for jobs when no matching job exists.\",\n          \"name\": \"test_is_job_for_category_with_non_matching_job\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test getting random time within a valid time period.\",\n          \"name\": \"test_get_random_time_within_period_valid_times\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test getting random time with invalid time format.\",\n          \"name\": \"test_get_random_time_within_period_invalid_times\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test time conflict detection when no conflicts exist.\",\n          \"name\": \"test_is_time_conflict_no_conflicts\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test cleaning up old scheduled tasks.\",\n          \"name\": \"test_cleanup_old_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test logging of scheduled tasks.\",\n          \"name\": \"test_log_scheduled_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Test getting user categories successfully.\",\n          \"name\": \"test_get_user_categories_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting categories for non-existent user.\",\n          \"name\": \"test_get_user_categories_no_user\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Test getting user task preferences successfully.\",\n          \"name\": \"test_get_user_task_preferences_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting task preferences for non-existent user.\",\n          \"name\": \"test_get_user_task_preferences_no_user\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Test getting user check-in preferences successfully.\",\n          \"name\": \"test_get_user_checkin_preferences_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting check-in preferences for non-existent user.\",\n          \"name\": \"test_get_user_checkin_preferences_no_user\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_communication_manager\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test complete scheduler lifecycle.\",\n          \"name\": \"test_scheduler_lifecycle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_communication_manager\"\n          ],\n          \"docstring\": \"Test scheduler with mock user data.\",\n          \"name\": \"test_scheduler_with_mock_users\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_communication_manager\"\n          ],\n          \"docstring\": \"Test scheduler behavior with no users.\",\n          \"name\": \"test_scheduler_with_empty_user_list\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_communication_manager\"\n          ],\n          \"docstring\": \"Test scheduler behavior with invalid user data.\",\n          \"name\": \"test_scheduler_with_invalid_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_communication_manager\"\n          ],\n          \"docstring\": \"Test that random time generation is consistent within bounds.\",\n          \"name\": \"test_random_time_generation_consistency\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test scheduling all task reminders for a user.\",\n          \"name\": \"test_schedule_all_task_reminders_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test scheduling task reminders when task management is disabled.\",\n          \"name\": \"test_schedule_all_task_reminders_disabled\"\n        }\n      ]\n    },\n    \"tests/behavior/test_scheduler_coverage_expansion.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test SchedulerManager lifecycle and threading.\",\n          \"methods\": [\n            \"test_scheduler_manager_initialization_real_behavior\",\n            \"test_run_daily_scheduler_thread_creation_real_behavior\",\n            \"test_stop_scheduler_thread_cleanup_real_behavior\",\n            \"test_stop_scheduler_no_thread_graceful_handling\"\n          ],\n          \"name\": \"TestSchedulerManagerLifecycle\"\n        },\n        {\n          \"docstring\": \"Test message scheduling functionality.\",\n          \"methods\": [\n            \"test_schedule_all_users_immediately_real_behavior\",\n            \"test_schedule_new_user_real_behavior\",\n            \"test_schedule_daily_message_job_real_behavior\",\n            \"test_schedule_daily_message_job_no_periods\",\n            \"test_schedule_message_for_period_real_behavior\",\n            \"test_schedule_message_for_period_time_conflict_retry\"\n          ],\n          \"name\": \"TestMessageScheduling\"\n        },\n        {\n          \"docstring\": \"Test task reminder scheduling functionality.\",\n          \"methods\": [\n            \"test_schedule_all_task_reminders_real_behavior\",\n            \"test_schedule_all_task_reminders_tasks_disabled\",\n            \"test_schedule_task_reminder_at_time_real_behavior\",\n            \"test_schedule_task_reminder_at_time_completed_task\",\n            \"test_get_random_time_within_task_period_real_behavior\"\n          ],\n          \"name\": \"TestTaskReminderScheduling\"\n        },\n        {\n          \"docstring\": \"Test time management and conflict detection.\",\n          \"methods\": [\n            \"test_is_time_conflict_with_conflict_real_behavior\",\n            \"test_is_time_conflict_no_conflict_different_user\",\n            \"test_get_random_time_within_period_future_scheduling\",\n            \"test_get_random_time_within_period_invalid_period\"\n          ],\n          \"name\": \"TestTimeManagement\"\n        },\n        {\n          \"docstring\": \"Test message handling and retry logic.\",\n          \"methods\": [\n            \"test_handle_sending_scheduled_message_success\",\n            \"test_handle_sending_scheduled_message_with_retries\",\n            \"test_handle_task_reminder_success\",\n            \"test_handle_task_reminder_completed_task\"\n          ],\n          \"name\": \"TestMessageHandling\"\n        },\n        {\n          \"docstring\": \"Test wake timer functionality (Windows scheduled tasks).\",\n          \"methods\": [\n            \"test_set_wake_timer_real_behavior\",\n            \"test_set_wake_timer_failure_handling\"\n          ],\n          \"name\": \"TestWakeTimerFunctionality\"\n        },\n        {\n          \"docstring\": \"Test cleanup operations.\",\n          \"methods\": [\n            \"test_cleanup_old_tasks_real_behavior\"\n          ],\n          \"name\": \"TestCleanupOperations\"\n        },\n        {\n          \"docstring\": \"Test standalone scheduler functions.\",\n          \"methods\": [\n            \"test_schedule_all_task_reminders_standalone_real_behavior\",\n            \"test_process_user_schedules_real_behavior\",\n            \"test_process_category_schedule_real_behavior\",\n            \"test_get_user_checkin_preferences_real_behavior\"\n          ],\n          \"name\": \"TestStandaloneFunctions\"\n        },\n        {\n          \"docstring\": \"Test error handling and edge cases.\",\n          \"methods\": [\n            \"test_scheduler_manager_no_communication_manager\",\n            \"test_handle_sending_scheduled_message_no_communication_manager\",\n            \"test_handle_task_reminder_no_communication_manager\",\n            \"test_get_random_time_within_period_missing_times\",\n            \"test_schedule_message_for_period_max_retries_exceeded\"\n          ],\n          \"name\": \"TestErrorHandling\"\n        },\n        {\n          \"docstring\": \"Test scheduler loop functionality and error handling.\",\n          \"methods\": [\n            \"test_scheduler_loop_daily_job_scheduling_real_behavior\",\n            \"test_scheduler_loop_error_handling_real_behavior\",\n            \"test_scheduler_loop_stop_event_handling_real_behavior\"\n          ],\n          \"name\": \"TestSchedulerLoopCoverage\"\n        },\n        {\n          \"docstring\": \"Test check-in scheduling functionality.\",\n          \"methods\": [\n            \"test_schedule_checkin_at_exact_time_real_behavior\",\n            \"test_schedule_checkin_missing_period_real_behavior\",\n            \"test_schedule_checkin_missing_start_time_real_behavior\"\n          ],\n          \"name\": \"TestCheckinSchedulingCoverage\"\n        },\n        {\n          \"docstring\": \"Test task reminder scheduling functionality.\",\n          \"methods\": [\n            \"test_schedule_all_task_reminders_with_tasks_real_behavior\",\n            \"test_schedule_all_task_reminders_no_tasks_real_behavior\",\n            \"test_schedule_all_task_reminders_missing_times_real_behavior\"\n          ],\n          \"name\": \"TestTaskReminderSchedulingCoverage\"\n        },\n        {\n          \"docstring\": \"Test wake timer functionality.\",\n          \"methods\": [\n            \"test_set_wake_timer_success_real_behavior\",\n            \"test_set_wake_timer_process_failure_real_behavior\"\n          ],\n          \"name\": \"TestWakeTimerCoverage\"\n        },\n        {\n          \"docstring\": \"Test comprehensive behavior of select_task_for_reminder function.\",\n          \"methods\": [\n            \"test_select_task_for_reminder_empty_list_real_behavior\",\n            \"test_select_task_for_reminder_single_task_real_behavior\",\n            \"test_select_task_for_reminder_priority_weighting_real_behavior\",\n            \"test_select_task_for_reminder_due_today_weighting_real_behavior\",\n            \"test_select_task_for_reminder_overdue_weighting_real_behavior\",\n            \"test_select_task_for_reminder_no_due_date_weighting_real_behavior\",\n            \"test_select_task_for_reminder_invalid_date_format_real_behavior\",\n            \"test_select_task_for_reminder_large_task_list_real_behavior\",\n            \"test_select_task_for_reminder_zero_weights_fallback_real_behavior\",\n            \"test_select_task_for_reminder_exception_handling_real_behavior\",\n            \"test_select_task_for_reminder_week_proximity_weighting_real_behavior\",\n            \"test_select_task_for_reminder_month_proximity_weighting_real_behavior\"\n          ],\n          \"name\": \"TestSelectTaskForReminderBehavior\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Create a mock communication manager.\",\n          \"name\": \"mock_communication_manager\"\n        },\n        {\n          \"args\": [\n            \"mock_communication_manager\"\n          ],\n          \"docstring\": \"Create a SchedulerManager instance for testing.\",\n          \"name\": \"scheduler_manager\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_communication_manager\"\n          ],\n          \"docstring\": \"Test SchedulerManager initialization with real behavior verification.\",\n          \"name\": \"test_scheduler_manager_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test that run_daily_scheduler creates a thread and starts it.\",\n          \"name\": \"test_run_daily_scheduler_thread_creation_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test that stop_scheduler properly cleans up the thread.\",\n          \"name\": \"test_stop_scheduler_thread_cleanup_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test stopping scheduler when no thread is running.\",\n          \"name\": \"test_stop_scheduler_no_thread_graceful_handling\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test scheduling all users immediately with real behavior verification.\",\n          \"name\": \"test_schedule_all_users_immediately_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test scheduling a newly created user.\",\n          \"name\": \"test_schedule_new_user_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test scheduling daily messages for a specific user and category.\",\n          \"name\": \"test_schedule_daily_message_job_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test scheduling daily messages when no periods are available.\",\n          \"name\": \"test_schedule_daily_message_job_no_periods\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test scheduling a message for a specific period.\",\n          \"name\": \"test_schedule_message_for_period_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test scheduling with time conflicts and retry logic.\",\n          \"name\": \"test_schedule_message_for_period_time_conflict_retry\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test scheduling all task reminders for a user.\",\n          \"name\": \"test_schedule_all_task_reminders_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test scheduling task reminders when tasks are disabled.\",\n          \"name\": \"test_schedule_all_task_reminders_tasks_disabled\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test scheduling a task reminder at a specific time.\",\n          \"name\": \"test_schedule_task_reminder_at_time_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test scheduling task reminder for a completed task.\",\n          \"name\": \"test_schedule_task_reminder_at_time_completed_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test generating random time within a task period.\",\n          \"name\": \"test_get_random_time_within_task_period_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test time conflict detection when conflicts exist.\",\n          \"name\": \"test_is_time_conflict_with_conflict_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test time conflict detection with different user.\",\n          \"name\": \"test_is_time_conflict_no_conflict_different_user\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test getting random time for future scheduling.\",\n          \"name\": \"test_get_random_time_within_period_future_scheduling\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test getting random time with invalid period.\",\n          \"name\": \"test_get_random_time_within_period_invalid_period\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test successful message sending.\",\n          \"name\": \"test_handle_sending_scheduled_message_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test message sending with retry logic.\",\n          \"name\": \"test_handle_sending_scheduled_message_with_retries\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test successful task reminder sending.\",\n          \"name\": \"test_handle_task_reminder_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test task reminder for completed task.\",\n          \"name\": \"test_handle_task_reminder_completed_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test setting wake timer for scheduled messages.\",\n          \"name\": \"test_set_wake_timer_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test wake timer failure handling.\",\n          \"name\": \"test_set_wake_timer_failure_handling\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test cleaning up old scheduled tasks.\",\n          \"name\": \"test_cleanup_old_tasks_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test standalone schedule_all_task_reminders function.\",\n          \"name\": \"test_schedule_all_task_reminders_standalone_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test processing schedules for a specific user.\",\n          \"name\": \"test_process_user_schedules_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test processing schedule for a specific category.\",\n          \"name\": \"test_process_category_schedule_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting user check-in preferences.\",\n          \"name\": \"test_get_user_checkin_preferences_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test scheduler manager with no communication manager.\",\n          \"name\": \"test_scheduler_manager_no_communication_manager\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test message sending with no communication manager.\",\n          \"name\": \"test_handle_sending_scheduled_message_no_communication_manager\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test task reminder with no communication manager.\",\n          \"name\": \"test_handle_task_reminder_no_communication_manager\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test getting random time with missing start/end times.\",\n          \"name\": \"test_get_random_time_within_period_missing_times\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test scheduling with max retries exceeded.\",\n          \"name\": \"test_schedule_message_for_period_max_retries_exceeded\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that scheduler loop properly schedules daily jobs for all users.\",\n          \"name\": \"test_scheduler_loop_daily_job_scheduling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test scheduler loop error handling when scheduling fails.\",\n          \"name\": \"test_scheduler_loop_error_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test scheduler loop properly responds to stop events.\",\n          \"name\": \"test_scheduler_loop_stop_event_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test scheduling check-in at exact time with real behavior.\",\n          \"name\": \"test_schedule_checkin_at_exact_time_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test check-in scheduling with missing time period.\",\n          \"name\": \"test_schedule_checkin_missing_period_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test check-in scheduling with missing start time.\",\n          \"name\": \"test_schedule_checkin_missing_start_time_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test scheduling task reminders when tasks exist.\",\n          \"name\": \"test_schedule_all_task_reminders_with_tasks_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test scheduling task reminders when no tasks exist.\",\n          \"name\": \"test_schedule_all_task_reminders_no_tasks_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test scheduling task reminders with missing start/end times.\",\n          \"name\": \"test_schedule_all_task_reminders_missing_times_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test successful wake timer setting.\",\n          \"name\": \"test_set_wake_timer_success_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test wake timer setting when process fails.\",\n          \"name\": \"test_set_wake_timer_process_failure_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test selecting task from empty list returns None.\",\n          \"name\": \"test_select_task_for_reminder_empty_list_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test selecting task from single-item list returns that task.\",\n          \"name\": \"test_select_task_for_reminder_single_task_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test priority-based weighting works correctly.\",\n          \"name\": \"test_select_task_for_reminder_priority_weighting_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test due date proximity weighting for tasks due today.\",\n          \"name\": \"test_select_task_for_reminder_due_today_weighting_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test overdue task weighting with exponential increase.\",\n          \"name\": \"test_select_task_for_reminder_overdue_weighting_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test tasks without due dates get slight reduction in weight.\",\n          \"name\": \"test_select_task_for_reminder_no_due_date_weighting_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test handling of invalid date formats gracefully.\",\n          \"name\": \"test_select_task_for_reminder_invalid_date_format_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test performance and correctness with large task lists.\",\n          \"name\": \"test_select_task_for_reminder_large_task_list_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test fallback to random selection when all weights are zero.\",\n          \"name\": \"test_select_task_for_reminder_zero_weights_fallback_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test exception handling with fallback to random selection.\",\n          \"name\": \"test_select_task_for_reminder_exception_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test sliding scale weighting for tasks due within a week.\",\n          \"name\": \"test_select_task_for_reminder_week_proximity_weighting_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"scheduler_manager\"\n          ],\n          \"docstring\": \"Test sliding scale weighting for tasks due within a month.\",\n          \"name\": \"test_select_task_for_reminder_month_proximity_weighting_real_behavior\"\n        }\n      ]\n    },\n    \"tests/behavior/test_service_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test cases for the MHMService class.\",\n          \"methods\": [\n            \"temp_dir\",\n            \"service\",\n            \"temp_base_dir\",\n            \"test_service_initialization\",\n            \"test_validate_configuration_real_behavior\",\n            \"test_initialize_paths_real_behavior\",\n            \"test_check_and_fix_logging_real_behavior\",\n            \"test_start_service_real_behavior\",\n            \"test_signal_handler_real_behavior\",\n            \"test_shutdown_real_behavior\",\n            \"test_emergency_shutdown_real_behavior\",\n            \"test_run_service_loop_shutdown_file_detection_real_behavior\",\n            \"test_check_test_message_requests_real_behavior\",\n            \"test_cleanup_test_message_requests_real_behavior\",\n            \"test_check_reschedule_requests_real_behavior\",\n            \"test_cleanup_reschedule_requests_real_behavior\",\n            \"test_get_user_categories_real_behavior\",\n            \"test_main_function_real_behavior\",\n            \"test_service_integration_with_managers_real_behavior\",\n            \"test_service_error_recovery_real_behavior\",\n            \"test_service_loop_heartbeat_logging_real_behavior\",\n            \"test_service_file_based_communication_integration_real_behavior\",\n            \"test_real_file_based_communication_creates_and_removes_files\",\n            \"test_real_cleanup_removes_actual_files\",\n            \"test_real_service_initialization_creates_actual_service\",\n            \"test_real_signal_handler_changes_service_state\",\n            \"test_real_emergency_shutdown_changes_service_state\",\n            \"test_real_get_user_categories_returns_actual_data\",\n            \"test_real_service_error_recovery_stops_service\"\n          ],\n          \"name\": \"TestMHMService\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_path_factory\"\n          ],\n          \"docstring\": \"Provide a per-test directory under tests/data/tmp.\",\n          \"name\": \"temp_dir\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create an MHMService instance for testing.\",\n          \"name\": \"service\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_path_factory\"\n          ],\n          \"docstring\": \"Provide a per-test base directory under tests/data/tmp for file-based communication tests.\",\n          \"name\": \"temp_base_dir\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"Test MHMService initialization.\",\n          \"name\": \"test_service_initialization\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_dir\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test configuration validation with real file operations.\",\n          \"name\": \"test_validate_configuration_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_dir\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test path initialization with real file system operations.\",\n          \"name\": \"test_initialize_paths_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_dir\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test logging health check with real file operations.\",\n          \"name\": \"test_check_and_fix_logging_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test service startup with real state changes.\",\n          \"name\": \"test_start_service_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test signal handler with real state changes.\",\n          \"name\": \"test_signal_handler_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test service shutdown with real state changes.\",\n          \"name\": \"test_shutdown_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test emergency shutdown with real state changes.\",\n          \"name\": \"test_emergency_shutdown_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_dir\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test service loop detects shutdown request file with real file operations.\",\n          \"name\": \"test_run_service_loop_shutdown_file_detection_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_base_dir\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test processing of test message request files with real file operations.\",\n          \"name\": \"test_check_test_message_requests_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_base_dir\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cleanup of test message request files with real file operations.\",\n          \"name\": \"test_cleanup_test_message_requests_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_base_dir\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test processing of reschedule request files with real file operations.\",\n          \"name\": \"test_check_reschedule_requests_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_base_dir\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test cleanup of reschedule request files with real file operations.\",\n          \"name\": \"test_cleanup_reschedule_requests_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test get_user_categories with real data structures.\",\n          \"name\": \"test_get_user_categories_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test main function with real service creation.\",\n          \"name\": \"test_main_function_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test service integration with real manager objects.\",\n          \"name\": \"test_service_integration_with_managers_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test service error recovery with real state changes.\",\n          \"name\": \"test_service_error_recovery_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test service loop heartbeat logging with real state management.\",\n          \"name\": \"test_service_loop_heartbeat_logging_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_base_dir\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test service file-based communication integration with real file operations.\",\n          \"name\": \"test_service_file_based_communication_integration_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_base_dir\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Verify that test message requests actually create and remove files.\",\n          \"name\": \"test_real_file_based_communication_creates_and_removes_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_base_dir\",\n            \"service\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Verify that cleanup actually removes real files.\",\n          \"name\": \"test_real_cleanup_removes_actual_files\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Verify that service initialization creates a real service object.\",\n          \"name\": \"test_real_service_initialization_creates_actual_service\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Verify that signal handler actually changes service state.\",\n          \"name\": \"test_real_signal_handler_changes_service_state\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Verify that emergency shutdown actually changes service state.\",\n          \"name\": \"test_real_emergency_shutdown_changes_service_state\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Verify that get_user_categories returns actual data structures.\",\n          \"name\": \"test_real_get_user_categories_returns_actual_data\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Verify that error recovery actually stops the service.\",\n          \"name\": \"test_real_service_error_recovery_stops_service\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"data_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_get_user_data_side_effect\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Mock side effect for service start that changes actual service state.\\n                \\n                Updates the service running status and startup time to simulate\\n                real service startup behavior for testing.\",\n          \"name\": \"mock_start_side_effect\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Mock side effect for service shutdown that changes actual service state.\\n                \\n                Updates the service running status and calls stop methods on managers\\n                to simulate real service shutdown behavior for testing.\",\n          \"name\": \"mock_shutdown_side_effect\"\n        },\n        {\n          \"args\": [\n            \"seconds\"\n          ],\n          \"docstring\": \"Mock side effect for time.sleep that breaks out of service loop.\\n                \\n                Tracks call count and stops the service after a few iterations\\n                to prevent infinite loops during testing.\\n                \\n                Args:\\n                    seconds: Number of seconds to sleep (ignored in mock)\",\n          \"name\": \"mock_sleep_side_effect\"\n        },\n        {\n          \"args\": [\n            \"*args\"\n          ],\n          \"docstring\": \"Mock side effect for os.path.join that returns test file path.\\n                \\n                Returns the test request file path when the specific filename\\n                is requested, otherwise delegates to the real os.path.join.\\n                \\n                Args:\\n                    *args: Path components to join\\n                    \\n                Returns:\\n                    str: Joined path, or test file path for specific filename\",\n          \"name\": \"mock_join_side_effect\"\n        },\n        {\n          \"args\": [\n            \"*args\"\n          ],\n          \"docstring\": \"Mock side effect for os.path.join that returns test file path.\\n                \\n                Returns the test request file path when the specific filename\\n                is requested, otherwise delegates to the real os.path.join.\\n                \\n                Args:\\n                    *args: Path components to join\\n                    \\n                Returns:\\n                    str: Joined path, or test file path for specific filename\",\n          \"name\": \"mock_join_side_effect\"\n        }\n      ]\n    },\n    \"tests/behavior/test_service_utilities_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test real behavior of service utility functions.\",\n          \"methods\": [\n            \"test_throttler_initialization_creates_proper_structure\",\n            \"test_throttler_should_run_returns_true_on_first_call\",\n            \"test_throttler_should_run_respects_interval\",\n            \"test_throttler_handles_invalid_timestamp_format\",\n            \"test_create_reschedule_request_creates_actual_file\",\n            \"test_create_reschedule_request_skips_when_service_not_running\",\n            \"test_is_service_running_checks_actual_processes\",\n            \"test_is_service_running_handles_process_errors_gracefully\",\n            \"test_wait_for_network_returns_true_when_network_available\",\n            \"test_wait_for_network_returns_false_when_network_unavailable\",\n            \"test_load_and_localize_datetime_creates_timezone_aware_datetime\",\n            \"test_load_and_localize_datetime_raises_error_for_invalid_format\",\n            \"test_load_and_localize_datetime_raises_error_for_invalid_timezone\",\n            \"test_title_case_converts_text_properly\",\n            \"test_title_case_handles_special_words_correctly\",\n            \"test_title_case_preserves_mixed_case_words\",\n            \"test_service_utilities_error_handling_preserves_system_stability\",\n            \"test_service_utilities_performance_under_load\",\n            \"test_service_utilities_data_integrity\"\n          ],\n          \"name\": \"TestServiceUtilitiesBehavior\"\n        },\n        {\n          \"docstring\": \"Test integration between service utility functions.\",\n          \"methods\": [\n            \"test_service_utilities_integration_with_reschedule_workflow\",\n            \"test_service_utilities_error_recovery_with_real_operations\",\n            \"test_service_utilities_concurrent_access_safety\"\n          ],\n          \"name\": \"TestServiceUtilitiesIntegration\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that Throttler initialization creates proper internal structure.\",\n          \"name\": \"test_throttler_initialization_creates_proper_structure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that Throttler should_run returns True on first call.\",\n          \"name\": \"test_throttler_should_run_returns_true_on_first_call\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that Throttler should_run respects the time interval.\",\n          \"name\": \"test_throttler_should_run_respects_interval\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that Throttler handles invalid timestamp format gracefully.\",\n          \"name\": \"test_throttler_handles_invalid_timestamp_format\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that creating reschedule request actually creates flag file.\",\n          \"name\": \"test_create_reschedule_request_creates_actual_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that creating reschedule request skips when service is not running.\",\n          \"name\": \"test_create_reschedule_request_skips_when_service_not_running\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that is_service_running checks actual system processes.\",\n          \"name\": \"test_is_service_running_checks_actual_processes\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that is_service_running handles process errors gracefully.\",\n          \"name\": \"test_is_service_running_handles_process_errors_gracefully\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that wait_for_network returns True when network is available.\",\n          \"name\": \"test_wait_for_network_returns_true_when_network_available\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that wait_for_network returns False when network is unavailable.\",\n          \"name\": \"test_wait_for_network_returns_false_when_network_unavailable\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that load_and_localize_datetime creates timezone-aware datetime.\",\n          \"name\": \"test_load_and_localize_datetime_creates_timezone_aware_datetime\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that load_and_localize_datetime handles invalid format gracefully.\",\n          \"name\": \"test_load_and_localize_datetime_raises_error_for_invalid_format\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that load_and_localize_datetime handles invalid timezone gracefully.\",\n          \"name\": \"test_load_and_localize_datetime_raises_error_for_invalid_timezone\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that title_case converts text to proper title case.\",\n          \"name\": \"test_title_case_converts_text_properly\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that title_case handles special words and abbreviations correctly.\",\n          \"name\": \"test_title_case_handles_special_words_correctly\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that title_case preserves already properly cased words.\",\n          \"name\": \"test_title_case_preserves_mixed_case_words\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that service utilities error handling preserves system stability.\",\n          \"name\": \"test_service_utilities_error_handling_preserves_system_stability\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that service utilities perform well under load.\",\n          \"name\": \"test_service_utilities_performance_under_load\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that service utilities maintain data integrity.\",\n          \"name\": \"test_service_utilities_data_integrity\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test integration between service utilities in reschedule workflow.\",\n          \"name\": \"test_service_utilities_integration_with_reschedule_workflow\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test error recovery when working with real operations.\",\n          \"name\": \"test_service_utilities_error_recovery_with_real_operations\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that service utilities handle concurrent access safely.\",\n          \"name\": \"test_service_utilities_concurrent_access_safety\"\n        }\n      ]\n    },\n    \"tests/behavior/test_static_logging_check.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Ensure the repository logging static check passes in CI/test runs.\",\n          \"name\": \"test_repo_static_logging_check_passes\"\n        }\n      ]\n    },\n    \"tests/behavior/test_task_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test cases for task management functions.\",\n          \"methods\": [\n            \"temp_dir\",\n            \"user_id\",\n            \"test_ensure_task_directory\",\n            \"test_load_active_tasks\",\n            \"test_save_active_tasks\",\n            \"test_create_task\",\n            \"test_update_task\",\n            \"test_complete_task\",\n            \"test_delete_task\",\n            \"test_get_task_by_id\",\n            \"test_get_tasks_due_soon\",\n            \"test_are_tasks_enabled\",\n            \"test_get_user_task_stats\"\n          ],\n          \"name\": \"TestTaskManagement\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_path_factory\"\n          ],\n          \"docstring\": \"Provide a per-test directory under tests/data/tmp.\",\n          \"name\": \"temp_dir\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create a test user ID.\",\n          \"name\": \"user_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_get_user_dir\",\n            \"user_id\",\n            \"temp_dir\"\n          ],\n          \"docstring\": \"Test task directory creation.\",\n          \"name\": \"test_ensure_task_directory\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_get_user_dir\",\n            \"user_id\",\n            \"temp_dir\"\n          ],\n          \"docstring\": \"Test loading active tasks.\",\n          \"name\": \"test_load_active_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_get_user_dir\",\n            \"user_id\",\n            \"temp_dir\"\n          ],\n          \"docstring\": \"Test saving active tasks.\",\n          \"name\": \"test_save_active_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_get_user_dir\",\n            \"temp_dir\"\n          ],\n          \"docstring\": \"Test task creation with file verification.\",\n          \"name\": \"test_create_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_get_user_dir\",\n            \"temp_dir\"\n          ],\n          \"docstring\": \"Test task updating with file verification.\",\n          \"name\": \"test_update_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_get_user_dir\",\n            \"temp_dir\"\n          ],\n          \"docstring\": \"Test task completion with file and side effect verification.\",\n          \"name\": \"test_complete_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_get_user_dir\",\n            \"temp_dir\"\n          ],\n          \"docstring\": \"Test task deletion with file verification.\",\n          \"name\": \"test_delete_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_get_user_dir\",\n            \"temp_dir\"\n          ],\n          \"docstring\": \"Test getting a task by ID with file verification.\",\n          \"name\": \"test_get_task_by_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_get_user_dir\",\n            \"temp_dir\"\n          ],\n          \"docstring\": \"Test getting tasks due soon with file verification.\",\n          \"name\": \"test_get_tasks_due_soon\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_get_user_data\"\n          ],\n          \"docstring\": \"Test checking if tasks are enabled with mock user data.\",\n          \"name\": \"test_are_tasks_enabled\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_get_user_dir\",\n            \"temp_dir\"\n          ],\n          \"docstring\": \"Test getting user task statistics with file verification.\",\n          \"name\": \"test_get_user_task_stats\"\n        }\n      ]\n    },\n    \"tests/behavior/test_task_management_coverage_expansion.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Comprehensive test coverage expansion for task management.\",\n          \"methods\": [\n            \"temp_dir\",\n            \"user_id\",\n            \"mock_user_data_dir\",\n            \"test_ensure_task_directory_real_behavior\",\n            \"test_ensure_task_directory_with_empty_user_id_real_behavior\",\n            \"test_ensure_task_directory_with_none_user_id_real_behavior\",\n            \"test_ensure_task_directory_existing_structure_real_behavior\",\n            \"test_load_active_tasks_real_behavior\",\n            \"test_load_active_tasks_empty_file_real_behavior\",\n            \"test_load_active_tasks_missing_file_real_behavior\",\n            \"test_save_active_tasks_real_behavior\",\n            \"test_save_active_tasks_with_empty_user_id_real_behavior\",\n            \"test_load_completed_tasks_real_behavior\",\n            \"test_save_completed_tasks_real_behavior\",\n            \"test_create_task_with_all_parameters_real_behavior\",\n            \"test_create_task_with_minimal_parameters_real_behavior\",\n            \"test_create_task_with_empty_user_id_real_behavior\",\n            \"test_create_task_with_empty_title_real_behavior\",\n            \"test_update_task_real_behavior\",\n            \"test_update_task_with_reminder_periods_real_behavior\",\n            \"test_update_task_not_found_real_behavior\",\n            \"test_complete_task_with_completion_data_real_behavior\",\n            \"test_complete_task_with_default_completion_real_behavior\",\n            \"test_complete_task_not_found_real_behavior\",\n            \"test_restore_task_real_behavior\",\n            \"test_restore_task_with_reminders_real_behavior\",\n            \"test_restore_task_not_found_real_behavior\",\n            \"test_delete_task_real_behavior\",\n            \"test_delete_task_not_found_real_behavior\",\n            \"test_get_task_by_id_active_task_real_behavior\",\n            \"test_get_task_by_id_completed_task_real_behavior\",\n            \"test_get_task_by_id_not_found_real_behavior\",\n            \"test_get_tasks_due_soon_real_behavior\",\n            \"test_get_tasks_due_soon_with_invalid_date_real_behavior\",\n            \"test_get_tasks_due_soon_empty_user_id_real_behavior\",\n            \"test_are_tasks_enabled_real_behavior\",\n            \"test_are_tasks_enabled_empty_user_id_real_behavior\",\n            \"test_schedule_task_reminders_real_behavior\",\n            \"test_schedule_task_reminders_no_scheduler_real_behavior\",\n            \"test_schedule_task_reminders_empty_periods_real_behavior\",\n            \"test_get_user_task_tags_real_behavior\",\n            \"test_get_user_task_tags_empty_user_id_real_behavior\",\n            \"test_add_user_task_tag_new_tag_real_behavior\",\n            \"test_add_user_task_tag_existing_tag_real_behavior\",\n            \"test_add_user_task_tag_empty_user_id_real_behavior\",\n            \"test_add_user_task_tag_empty_tag_real_behavior\",\n            \"test_remove_user_task_tag_real_behavior\",\n            \"test_remove_user_task_tag_not_found_real_behavior\",\n            \"test_setup_default_task_tags_new_user_real_behavior\",\n            \"test_setup_default_task_tags_existing_user_real_behavior\",\n            \"test_setup_default_task_tags_empty_user_id_real_behavior\",\n            \"test_get_user_task_stats_real_behavior\",\n            \"test_get_user_task_stats_empty_user_id_real_behavior\",\n            \"test_get_user_task_stats_error_handling_real_behavior\"\n          ],\n          \"name\": \"TestTaskManagementCoverageExpansion\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_path_factory\"\n          ],\n          \"docstring\": \"Provide a per-test directory under tests/data/tmp.\",\n          \"name\": \"temp_dir\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create a test user ID.\",\n          \"name\": \"user_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_dir\"\n          ],\n          \"docstring\": \"Mock user data directory.\",\n          \"name\": \"mock_user_data_dir\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test task directory creation with real file system behavior.\",\n          \"name\": \"test_ensure_task_directory_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\"\n          ],\n          \"docstring\": \"Test task directory creation with empty user ID.\",\n          \"name\": \"test_ensure_task_directory_with_empty_user_id_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\"\n          ],\n          \"docstring\": \"Test task directory creation with None user ID.\",\n          \"name\": \"test_ensure_task_directory_with_none_user_id_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test task directory creation when structure already exists.\",\n          \"name\": \"test_ensure_task_directory_existing_structure_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test loading active tasks with real file operations.\",\n          \"name\": \"test_load_active_tasks_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test loading active tasks from empty file.\",\n          \"name\": \"test_load_active_tasks_empty_file_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test loading active tasks when file doesn't exist.\",\n          \"name\": \"test_load_active_tasks_missing_file_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test saving active tasks with real file operations.\",\n          \"name\": \"test_save_active_tasks_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\"\n          ],\n          \"docstring\": \"Test saving active tasks with empty user ID.\",\n          \"name\": \"test_save_active_tasks_with_empty_user_id_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test loading completed tasks with real file operations.\",\n          \"name\": \"test_load_completed_tasks_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test saving completed tasks with real file operations.\",\n          \"name\": \"test_save_completed_tasks_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test task creation with all optional parameters.\",\n          \"name\": \"test_create_task_with_all_parameters_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test task creation with minimal required parameters.\",\n          \"name\": \"test_create_task_with_minimal_parameters_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\"\n          ],\n          \"docstring\": \"Test task creation with empty user ID.\",\n          \"name\": \"test_create_task_with_empty_user_id_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test task creation with empty title.\",\n          \"name\": \"test_create_task_with_empty_title_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test task updating with real behavior verification.\",\n          \"name\": \"test_update_task_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test task updating with reminder periods.\",\n          \"name\": \"test_update_task_with_reminder_periods_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test updating a non-existent task.\",\n          \"name\": \"test_update_task_not_found_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test task completion with custom completion data.\",\n          \"name\": \"test_complete_task_with_completion_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test task completion with default completion time.\",\n          \"name\": \"test_complete_task_with_default_completion_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test completing a non-existent task.\",\n          \"name\": \"test_complete_task_not_found_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test task restoration from completed to active.\",\n          \"name\": \"test_restore_task_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test task restoration with reminder periods.\",\n          \"name\": \"test_restore_task_with_reminders_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test restoring a non-existent completed task.\",\n          \"name\": \"test_restore_task_not_found_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test task deletion with cleanup verification.\",\n          \"name\": \"test_delete_task_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test deleting a non-existent task.\",\n          \"name\": \"test_delete_task_not_found_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test getting an active task by ID.\",\n          \"name\": \"test_get_task_by_id_active_task_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test getting a completed task by ID.\",\n          \"name\": \"test_get_task_by_id_completed_task_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test getting a non-existent task by ID.\",\n          \"name\": \"test_get_task_by_id_not_found_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test getting tasks due within specified days.\",\n          \"name\": \"test_get_tasks_due_soon_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test getting tasks due soon with invalid date format.\",\n          \"name\": \"test_get_tasks_due_soon_with_invalid_date_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\"\n          ],\n          \"docstring\": \"Test getting tasks due soon with empty user ID.\",\n          \"name\": \"test_get_tasks_due_soon_empty_user_id_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test checking if tasks are enabled for a user.\",\n          \"name\": \"test_are_tasks_enabled_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\"\n          ],\n          \"docstring\": \"Test checking tasks enabled with empty user ID.\",\n          \"name\": \"test_are_tasks_enabled_empty_user_id_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test scheduling task-specific reminders.\",\n          \"name\": \"test_schedule_task_reminders_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test scheduling reminders when scheduler is not available.\",\n          \"name\": \"test_schedule_task_reminders_no_scheduler_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test scheduling reminders with empty periods.\",\n          \"name\": \"test_schedule_task_reminders_empty_periods_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test getting user task tags from preferences.\",\n          \"name\": \"test_get_user_task_tags_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\"\n          ],\n          \"docstring\": \"Test getting task tags with empty user ID.\",\n          \"name\": \"test_get_user_task_tags_empty_user_id_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test adding a new task tag.\",\n          \"name\": \"test_add_user_task_tag_new_tag_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test adding an existing task tag.\",\n          \"name\": \"test_add_user_task_tag_existing_tag_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\"\n          ],\n          \"docstring\": \"Test adding task tag with empty user ID.\",\n          \"name\": \"test_add_user_task_tag_empty_user_id_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test adding empty task tag.\",\n          \"name\": \"test_add_user_task_tag_empty_tag_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test removing a task tag.\",\n          \"name\": \"test_remove_user_task_tag_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test removing a non-existent task tag.\",\n          \"name\": \"test_remove_user_task_tag_not_found_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test setting up default task tags for new user.\",\n          \"name\": \"test_setup_default_task_tags_new_user_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test setting up default task tags for user with existing tags.\",\n          \"name\": \"test_setup_default_task_tags_existing_user_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\"\n          ],\n          \"docstring\": \"Test setting up default task tags with empty user ID.\",\n          \"name\": \"test_setup_default_task_tags_empty_user_id_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test getting user task statistics.\",\n          \"name\": \"test_get_user_task_stats_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\"\n          ],\n          \"docstring\": \"Test getting task statistics with empty user ID.\",\n          \"name\": \"test_get_user_task_stats_empty_user_id_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test task statistics error handling.\",\n          \"name\": \"test_get_user_task_stats_error_handling_real_behavior\"\n        }\n      ]\n    },\n    \"tests/behavior/test_ui_app_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test real behavior of the main UI application.\",\n          \"methods\": [\n            \"qt_app\",\n            \"test_ui_app_initialization_creates_proper_structure\",\n            \"test_service_manager_initialization_creates_proper_structure\",\n            \"test_service_manager_configuration_validation_checks_actual_config\",\n            \"test_service_manager_configuration_validation_handles_invalid_config\",\n            \"test_service_manager_service_status_check_checks_actual_processes\",\n            \"test_service_manager_service_status_check_handles_no_service\",\n            \"test_ui_app_user_list_refresh_loads_actual_user_data\",\n            \"test_ui_app_user_selection_loads_user_categories\",\n            \"test_ui_app_category_selection_enables_content_management\",\n            \"test_ui_app_new_user_creation_opens_account_creator\",\n            \"test_ui_app_communication_settings_opens_channel_management\",\n            \"test_ui_app_category_management_opens_category_dialog\",\n            \"test_ui_app_checkin_management_opens_checkin_dialog\",\n            \"test_ui_app_task_management_opens_task_dialog\",\n            \"test_ui_app_personalization_opens_user_profile_dialog\",\n            \"test_ui_app_error_handling_preserves_system_stability\",\n            \"test_ui_app_performance_under_load\",\n            \"test_ui_app_data_integrity\"\n          ],\n          \"name\": \"TestUIAppBehavior\"\n        },\n        {\n          \"docstring\": \"Test integration between UI app components.\",\n          \"methods\": [\n            \"test_ui_app_integration_with_service_manager\",\n            \"test_ui_app_error_recovery_with_real_operations\",\n            \"test_ui_app_concurrent_access_safety\"\n          ],\n          \"name\": \"TestUIAppIntegration\"\n        },\n        {\n          \"docstring\": \"Test UI app integration and complex workflows.\",\n          \"methods\": [\n            \"qt_app\",\n            \"test_ui_app_initialization_creates_proper_structure\",\n            \"test_send_test_message_no_user_selected_real_behavior\",\n            \"test_send_test_message_service_not_running_real_behavior\",\n            \"test_send_test_message_no_category_selected_real_behavior\",\n            \"test_send_test_message_invalid_category_real_behavior\",\n            \"test_send_test_message_successful_flow_real_behavior\",\n            \"test_confirm_test_message_user_confirms_real_behavior\",\n            \"test_confirm_test_message_user_cancels_real_behavior\",\n            \"test_send_actual_test_message_creates_request_file_real_behavior\",\n            \"test_send_test_message_edge_case_negative_index_real_behavior\",\n            \"test_send_test_message_service_manager_error_real_behavior\"\n          ],\n          \"name\": \"TestUIAppIntegration\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create a QApplication instance for testing.\",\n          \"name\": \"qt_app\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that UI app initialization creates proper internal structure.\",\n          \"name\": \"test_ui_app_initialization_creates_proper_structure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that ServiceManager initialization creates proper internal structure.\",\n          \"name\": \"test_service_manager_initialization_creates_proper_structure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that configuration validation checks actual configuration.\",\n          \"name\": \"test_service_manager_configuration_validation_checks_actual_config\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that configuration validation handles invalid configuration.\",\n          \"name\": \"test_service_manager_configuration_validation_handles_invalid_config\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that service status check checks actual system processes.\",\n          \"name\": \"test_service_manager_service_status_check_checks_actual_processes\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that service status check handles when service is not running.\",\n          \"name\": \"test_service_manager_service_status_check_handles_no_service\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that user list refresh loads actual user data.\",\n          \"name\": \"test_ui_app_user_list_refresh_loads_actual_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that user selection loads user categories.\",\n          \"name\": \"test_ui_app_user_selection_loads_user_categories\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that category selection enables content management.\",\n          \"name\": \"test_ui_app_category_selection_enables_content_management\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that new user creation opens account creator dialog.\",\n          \"name\": \"test_ui_app_new_user_creation_opens_account_creator\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that communication settings opens channel management dialog.\",\n          \"name\": \"test_ui_app_communication_settings_opens_channel_management\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that category management opens category management dialog.\",\n          \"name\": \"test_ui_app_category_management_opens_category_dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that checkin management opens checkin management dialog.\",\n          \"name\": \"test_ui_app_checkin_management_opens_checkin_dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that task management opens task management dialog.\",\n          \"name\": \"test_ui_app_task_management_opens_task_dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that personalization opens user profile dialog.\",\n          \"name\": \"test_ui_app_personalization_opens_user_profile_dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that UI app error handling preserves system stability.\",\n          \"name\": \"test_ui_app_error_handling_preserves_system_stability\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that UI app performs well under load.\",\n          \"name\": \"test_ui_app_performance_under_load\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that UI app maintains data integrity.\",\n          \"name\": \"test_ui_app_data_integrity\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test integration between UI app and service manager.\",\n          \"name\": \"test_ui_app_integration_with_service_manager\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test error recovery when working with real operations.\",\n          \"name\": \"test_ui_app_error_recovery_with_real_operations\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that UI app handles concurrent access safely.\",\n          \"name\": \"test_ui_app_concurrent_access_safety\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create a QApplication instance for testing.\",\n          \"name\": \"qt_app\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that UI app initialization creates proper internal structure.\",\n          \"name\": \"test_ui_app_initialization_creates_proper_structure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test send_test_message when no user is selected.\",\n          \"name\": \"test_send_test_message_no_user_selected_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test send_test_message when service is not running.\",\n          \"name\": \"test_send_test_message_service_not_running_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test send_test_message when no category is selected.\",\n          \"name\": \"test_send_test_message_no_category_selected_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test send_test_message when category data is invalid.\",\n          \"name\": \"test_send_test_message_invalid_category_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test successful send_test_message flow.\",\n          \"name\": \"test_send_test_message_successful_flow_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test confirm_test_message when user confirms.\",\n          \"name\": \"test_confirm_test_message_user_confirms_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test confirm_test_message when user cancels.\",\n          \"name\": \"test_confirm_test_message_user_cancels_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test send_actual_test_message creates request file.\",\n          \"name\": \"test_send_actual_test_message_creates_request_file_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test send_test_message with negative combo box index.\",\n          \"name\": \"test_send_test_message_edge_case_negative_index_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qt_app\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test send_test_message when service manager throws error.\",\n          \"name\": \"test_send_test_message_service_manager_error_real_behavior\"\n        }\n      ]\n    },\n    \"tests/behavior/test_user_context_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test UserContextManager real behavior and side effects.\",\n          \"methods\": [\n            \"test_user_context_manager_initialization_creates_structure\",\n            \"test_get_current_user_context_uses_usercontext_singleton\",\n            \"test_get_current_user_context_handles_no_user_gracefully\",\n            \"test_get_user_context_creates_complete_structure\",\n            \"test_get_user_context_without_conversation_history\",\n            \"test_add_conversation_exchange_actually_stores_data\",\n            \"test_add_conversation_exchange_maintains_history_limit\",\n            \"test_get_conversation_history_returns_actual_data\",\n            \"test_get_conversation_history_handles_empty_history\",\n            \"test_get_user_profile_uses_existing_infrastructure\",\n            \"test_get_recent_activity_integrates_multiple_sources\",\n            \"test_get_conversation_insights_analyzes_actual_data\",\n            \"test_get_mood_trends_analyzes_checkin_data\",\n            \"test_get_active_schedules_identifies_active_periods\",\n            \"test_format_context_for_ai_creates_readable_string\",\n            \"test_format_context_for_ai_handles_empty_context\",\n            \"test_user_context_manager_error_handling_preserves_system_stability\",\n            \"test_user_context_manager_integration_with_ai_chatbot\",\n            \"test_user_context_manager_performance_under_load\",\n            \"test_user_context_manager_cleanup_and_resource_management\"\n          ],\n          \"name\": \"TestUserContextManagerBehavior\"\n        },\n        {\n          \"docstring\": \"Integration tests for UserContextManager with real user data.\",\n          \"methods\": [\n            \"test_user_context_manager_with_real_user_data\",\n            \"test_user_context_manager_error_recovery_with_real_files\",\n            \"test_user_context_manager_concurrent_access_safety\"\n          ],\n          \"name\": \"TestUserContextManagerIntegration\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that UserContextManager initialization creates proper internal structure.\",\n          \"name\": \"test_user_context_manager_initialization_creates_structure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that get_current_user_context actually uses UserContext singleton.\",\n          \"name\": \"test_get_current_user_context_uses_usercontext_singleton\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that get_current_user_context handles no logged-in user gracefully.\",\n          \"name\": \"test_get_current_user_context_handles_no_user_gracefully\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that get_user_context creates complete context structure.\",\n          \"name\": \"test_get_user_context_creates_complete_structure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that get_user_context excludes conversation history when requested.\",\n          \"name\": \"test_get_user_context_without_conversation_history\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that add_conversation_exchange actually stores conversation data.\",\n          \"name\": \"test_add_conversation_exchange_actually_stores_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that add_conversation_exchange maintains conversation history limit.\",\n          \"name\": \"test_add_conversation_exchange_maintains_history_limit\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that _get_conversation_history returns actual stored conversation data.\",\n          \"name\": \"test_get_conversation_history_returns_actual_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that _get_conversation_history handles users with no conversation history.\",\n          \"name\": \"test_get_conversation_history_handles_empty_history\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that _get_user_profile actually uses existing user infrastructure.\",\n          \"name\": \"test_get_user_profile_uses_existing_infrastructure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that _get_recent_activity integrates data from multiple sources.\",\n          \"name\": \"test_get_recent_activity_integrates_multiple_sources\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that _get_conversation_insights analyzes actual conversation data.\",\n          \"name\": \"test_get_conversation_insights_analyzes_actual_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that _get_mood_trends analyzes actual checkin data.\",\n          \"name\": \"test_get_mood_trends_analyzes_checkin_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that get_active_schedules identifies actually active schedule periods.\",\n          \"name\": \"test_get_active_schedules_identifies_active_periods\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that format_context_for_ai creates actual readable string from context.\",\n          \"name\": \"test_format_context_for_ai_creates_readable_string\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that format_context_for_ai handles empty or minimal context gracefully.\",\n          \"name\": \"test_format_context_for_ai_handles_empty_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that UserContextManager error handling preserves system stability.\",\n          \"name\": \"test_user_context_manager_error_handling_preserves_system_stability\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that UserContextManager integrates properly with AI chatbot.\",\n          \"name\": \"test_user_context_manager_integration_with_ai_chatbot\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that UserContextManager performs well under load.\",\n          \"name\": \"test_user_context_manager_performance_under_load\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that UserContextManager properly manages resources and cleanup.\",\n          \"name\": \"test_user_context_manager_cleanup_and_resource_management\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test UserContextManager with real user data files.\",\n          \"name\": \"test_user_context_manager_with_real_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test UserContextManager error recovery with corrupted real files.\",\n          \"name\": \"test_user_context_manager_error_recovery_with_real_files\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test UserContextManager safety under concurrent access.\",\n          \"name\": \"test_user_context_manager_concurrent_access_safety\"\n        }\n      ]\n    },\n    \"tests/behavior/test_user_management_coverage_expansion.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test Core User Management coverage expansion with real behavior verification.\",\n          \"methods\": [\n            \"_setup\",\n            \"teardown_method\",\n            \"test_register_data_loader_real_behavior\",\n            \"test_get_available_data_types_real_behavior\",\n            \"test_get_data_type_info_real_behavior\",\n            \"test_get_all_user_ids_real_behavior\",\n            \"test_get_all_user_ids_no_directory_real_behavior\",\n            \"test_load_account_data_real_behavior\",\n            \"test_load_account_data_auto_create_real_behavior\",\n            \"test_load_account_data_no_auto_create_real_behavior\",\n            \"test_save_account_data_real_behavior\",\n            \"test_save_account_data_invalid_user_id_real_behavior\",\n            \"test_load_preferences_data_real_behavior\",\n            \"test_load_preferences_data_auto_create_real_behavior\",\n            \"test_save_preferences_data_real_behavior\",\n            \"test_load_context_data_real_behavior\",\n            \"test_load_context_data_auto_create_real_behavior\",\n            \"test_save_context_data_real_behavior\",\n            \"test_load_schedules_data_real_behavior\",\n            \"test_load_schedules_data_auto_create_real_behavior\",\n            \"test_save_schedules_data_real_behavior\",\n            \"test_save_schedules_data_invalid_user_id_real_behavior\",\n            \"test_update_user_schedules_real_behavior\",\n            \"test_update_user_schedules_invalid_user_id_real_behavior\",\n            \"test_create_default_schedule_periods_tasks_real_behavior\",\n            \"test_create_default_schedule_periods_checkin_real_behavior\",\n            \"test_create_default_schedule_periods_other_category_real_behavior\",\n            \"test_create_default_schedule_periods_no_category_real_behavior\",\n            \"test_cache_management_real_behavior\",\n            \"test_cache_timeout_real_behavior\",\n            \"test_error_handling_load_account_real_behavior\",\n            \"test_error_handling_save_account_real_behavior\",\n            \"test_data_validation_real_behavior\",\n            \"test_file_persistence_real_behavior\"\n          ],\n          \"name\": \"TestUserManagementCoverageExpansion\"\n        },\n        {\n          \"docstring\": \"Test integration behavior of Core User Management.\",\n          \"methods\": [\n            \"_setup\",\n            \"teardown_method\",\n            \"test_user_data_lifecycle_real_behavior\",\n            \"test_user_data_consistency_real_behavior\",\n            \"test_user_data_error_recovery_real_behavior\",\n            \"test_user_data_performance_real_behavior\",\n            \"test_user_data_concurrent_access_real_behavior\"\n          ],\n          \"name\": \"TestUserManagementIntegration\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_path_factory\",\n            \"monkeypatch\"\n          ],\n          \"docstring\": \"Set up test environment with per-test directory and path patches.\",\n          \"name\": \"_setup\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Clean up test environment.\",\n          \"name\": \"teardown_method\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test data loader registration with real behavior.\",\n          \"name\": \"test_register_data_loader_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting available data types.\",\n          \"name\": \"test_get_available_data_types_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting data type information.\",\n          \"name\": \"test_get_data_type_info_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting all user IDs with real behavior.\",\n          \"name\": \"test_get_all_user_ids_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test getting user IDs when directory doesn't exist.\",\n          \"name\": \"test_get_all_user_ids_no_directory_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test loading account data with real behavior.\",\n          \"name\": \"test_load_account_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test auto-creating account data when file doesn't exist.\",\n          \"name\": \"test_load_account_data_auto_create_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test loading account data without auto-creation.\",\n          \"name\": \"test_load_account_data_no_auto_create_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test saving account data with real behavior.\",\n          \"name\": \"test_save_account_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test saving account data with invalid user ID.\",\n          \"name\": \"test_save_account_data_invalid_user_id_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test loading preferences data with real behavior.\",\n          \"name\": \"test_load_preferences_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test auto-creating preferences data when file doesn't exist.\",\n          \"name\": \"test_load_preferences_data_auto_create_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test saving preferences data with real behavior.\",\n          \"name\": \"test_save_preferences_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test loading context data with real behavior.\",\n          \"name\": \"test_load_context_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test auto-creating context data when file doesn't exist.\",\n          \"name\": \"test_load_context_data_auto_create_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test saving context data with real behavior.\",\n          \"name\": \"test_save_context_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test loading schedules data with real behavior.\",\n          \"name\": \"test_load_schedules_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test auto-creating schedules data when file doesn't exist.\",\n          \"name\": \"test_load_schedules_data_auto_create_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test saving schedules data with real behavior.\",\n          \"name\": \"test_save_schedules_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test saving schedules data with invalid user ID.\",\n          \"name\": \"test_save_schedules_data_invalid_user_id_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test updating user schedules with real behavior.\",\n          \"name\": \"test_update_user_schedules_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test updating schedules with invalid user ID.\",\n          \"name\": \"test_update_user_schedules_invalid_user_id_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test creating default schedule periods for tasks category.\",\n          \"name\": \"test_create_default_schedule_periods_tasks_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test creating default schedule periods for checkin category.\",\n          \"name\": \"test_create_default_schedule_periods_checkin_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test creating default schedule periods for other categories.\",\n          \"name\": \"test_create_default_schedule_periods_other_category_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test creating default schedule periods without category.\",\n          \"name\": \"test_create_default_schedule_periods_no_category_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test cache management behavior.\",\n          \"name\": \"test_cache_management_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test cache timeout behavior.\",\n          \"name\": \"test_cache_timeout_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test error handling in account loading.\",\n          \"name\": \"test_error_handling_load_account_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test error handling in account saving.\",\n          \"name\": \"test_error_handling_save_account_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test data validation behavior.\",\n          \"name\": \"test_data_validation_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test file persistence behavior.\",\n          \"name\": \"test_file_persistence_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_path_factory\"\n          ],\n          \"docstring\": \"Set up test environment.\",\n          \"name\": \"_setup\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Clean up test environment.\",\n          \"name\": \"teardown_method\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test complete user data lifecycle.\",\n          \"name\": \"test_user_data_lifecycle_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test user data consistency across operations.\",\n          \"name\": \"test_user_data_consistency_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test user data error recovery.\",\n          \"name\": \"test_user_data_error_recovery_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test user data performance under load.\",\n          \"name\": \"test_user_data_performance_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test user data concurrent access behavior.\",\n          \"name\": \"test_user_data_concurrent_access_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"auto_create\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"test_loader\"\n        },\n        {\n          \"args\": [\n            \"thread_id\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"user_operation\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"file_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_path\"\n        }\n      ]\n    },\n    \"tests/behavior/test_utilities_demo.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Demonstration of centralized test utilities usage\",\n          \"methods\": [\n            \"test_basic_user_creation\",\n            \"test_discord_user_creation\",\n            \"test_full_featured_user_creation\",\n            \"test_minimal_user_creation\",\n            \"test_user_data_factory_usage\",\n            \"test_environment_management\",\n            \"test_multiple_user_types_in_single_test\",\n            \"test_email_user_creation\",\n            \"test_custom_fields_user_creation\",\n            \"test_scheduled_user_creation\",\n            \"test_comprehensive_user_types\",\n            \"test_real_user_scenarios\",\n            \"test_edge_case_users\",\n            \"test_user_data_consistency\"\n          ],\n          \"name\": \"TestUtilitiesDemo\"\n        },\n        {\n          \"docstring\": \"Demonstrate the benefits of centralized test utilities\",\n          \"methods\": [\n            \"test_reduced_code_duplication\",\n            \"test_consistent_user_data\",\n            \"test_easy_maintenance\",\n            \"test_flexible_configuration\"\n          ],\n          \"name\": \"TestUtilitiesBenefits\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Demonstrate creating a basic test user\",\n          \"name\": \"test_basic_user_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Demonstrate creating a Discord-specific test user\",\n          \"name\": \"test_discord_user_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Demonstrate creating a full-featured test user\",\n          \"name\": \"test_full_featured_user_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Demonstrate creating a minimal test user\",\n          \"name\": \"test_minimal_user_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Demonstrate using the user data factory for custom data structures\",\n          \"name\": \"test_user_data_factory_usage\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Demonstrate test environment setup and cleanup\",\n          \"name\": \"test_environment_management\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test creating multiple different user types in a single test.\",\n          \"name\": \"test_multiple_user_types_in_single_test\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test creating an email user with specific email address.\",\n          \"name\": \"test_email_user_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test creating a user with custom fields.\",\n          \"name\": \"test_custom_fields_user_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test creating a user with comprehensive schedules.\",\n          \"name\": \"test_scheduled_user_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test all comprehensive user types to ensure they cover real user scenarios.\",\n          \"name\": \"test_comprehensive_user_types\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test scenarios that mirror real user data patterns.\",\n          \"name\": \"test_real_user_scenarios\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test edge cases and boundary conditions for user creation.\",\n          \"name\": \"test_edge_case_users\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that all user types produce consistent data structures.\",\n          \"name\": \"test_user_data_consistency\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Show how much less code is needed with centralized utilities\",\n          \"name\": \"test_reduced_code_duplication\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Show that all tests use consistent user data structures\",\n          \"name\": \"test_consistent_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Show how easy it is to update user creation logic\",\n          \"name\": \"test_easy_maintenance\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Show the flexibility of the utilities\",\n          \"name\": \"test_flexible_configuration\"\n        }\n      ]\n    },\n    \"tests/conftest.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Custom formatter that automatically prepends test names to log messages.\",\n          \"methods\": [\n            \"format\"\n          ],\n          \"name\": \"TestContextFormatter\"\n        },\n        {\n          \"docstring\": \"Manages session-based log rotation that rotates ALL logs together if any exceed size limits.\",\n          \"methods\": [\n            \"__init__\",\n            \"register_log_file\",\n            \"check_rotation_needed\",\n            \"rotate_all_logs\"\n          ],\n          \"name\": \"SessionLogRotationManager\"\n        },\n        {\n          \"docstring\": \"Manages log file lifecycle including backup, archive, and cleanup operations.\",\n          \"methods\": [\n            \"__init__\",\n            \"cleanup_old_archives\",\n            \"archive_old_backups\",\n            \"perform_lifecycle_maintenance\"\n          ],\n          \"name\": \"LogLifecycleManager\"\n        },\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"information\",\n            \"warning\",\n            \"critical\",\n            \"question\",\n            \"about\"\n          ],\n          \"name\": \"MockQMessageBox\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Set up logging isolation before any core modules are imported.\",\n          \"name\": \"setup_logging_isolation\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"verify_user_data_loader_registry\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Import core.user_management before core.user_data_handlers and register loaders once.\\n\\n    This ensures both modules share the same USER_DATA_LOADERS dict and that required\\n    loaders are present without relying on the data shim.\",\n          \"name\": \"initialize_loader_import_order\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"_apply_get_user_data_shim_early\"\n        },\n        {\n          \"args\": [\n            \"request\",\n            \"monkeypatch\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"toggle_data_shim_per_marker\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Set up global QMessageBox patches to prevent popup dialogs during testing.\",\n          \"name\": \"setup_qmessagebox_patches\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Set up dedicated logging for tests with complete isolation from main app logging.\",\n          \"name\": \"setup_test_logging\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Replace component logger handlers with simple file handlers under tests/logs.\\n\\n    Uses simple FileHandler to avoid rotation conflicts during test sessions.\\n    Session-based rotation is handled separately by SessionLogRotationManager.\",\n          \"name\": \"setup_component_log_rotation\"\n        },\n        {\n          \"args\": [\n            \"target_dir\",\n            \"patterns\",\n            \"older_than_days\"\n          ],\n          \"docstring\": \"Remove files in target_dir matching any pattern older than N days.\\n\\n    Returns the number of files removed.\",\n          \"name\": \"_prune_old_files\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Prune old logs (tests/logs) and backups (tests/data/backups) before and after the session.\\n\\n    Defaults: logs older than 14 days, test backups older than 7 days.\\n    Override via TEST_LOG_RETENTION_DAYS and TEST_BACKUP_RETENTION_DAYS env vars.\",\n          \"name\": \"prune_test_artifacts_before_and_after_session\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Perform log lifecycle maintenance at session start.\",\n          \"name\": \"log_lifecycle_maintenance\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Check for log rotation needs at session start and end.\",\n          \"name\": \"session_log_rotation_check\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Ensure complete logging isolation during tests to prevent test logs from appearing in main app.log.\",\n          \"name\": \"isolate_logging\"\n        },\n        {\n          \"args\": [\n            \"predicate\",\n            \"timeout_seconds\",\n            \"poll_seconds\"\n          ],\n          \"docstring\": \"Poll predicate() until it returns True or timeout elapses.\\n\\n    Returns True if predicate succeeds within timeout, otherwise False.\",\n          \"name\": \"wait_until\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Ensure minimal structures exist without overwriting existing data.\\n\\n    - Merges into existing account (preserves internal_username and enabled features)\\n    - Adds missing preferences keys (keeps existing categories/channel)\\n    - Adds a default motivational/morning period if schedules missing\",\n          \"name\": \"materialize_user_minimal_via_public_apis\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Provide the repository-scoped test data directory for all tests.\",\n          \"name\": \"test_data_dir\"\n        },\n        {\n          \"args\": [\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Mock configuration for testing with proper test data directory.\",\n          \"name\": \"mock_config\"\n        },\n        {\n          \"args\": [\n            \"mock_config\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Verify mock_config fixture is active for every test.\",\n          \"name\": \"ensure_mock_config_applied\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Ensure user data caches don't leak between tests.\",\n          \"name\": \"clear_user_caches_between_tests\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Ensure core user data loaders are present without overwriting metadata.\",\n          \"name\": \"register_user_data_loaders_session\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Ensure loaders stay correctly registered for each test without overwriting metadata.\",\n          \"name\": \"fix_user_data_loaders\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Shim core.user_management.get_user_data to ensure structured dicts.\\n\\n    If a test calls get_user_data with 'all' or a specific type and the result is\\n    empty/missing, invoke the registered loaders in USER_DATA_LOADERS to assemble\\n    the expected structure. This preserves production behavior when everything is\\n    wired correctly, but guards against import-order timing in tests.\",\n          \"name\": \"shim_get_user_data_to_invoke_loaders\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Fail fast if required user-data loaders are missing at session start.\",\n          \"name\": \"verify_required_loaders_present\"\n        },\n        {\n          \"args\": [\n            \"monkeypatch\"\n          ],\n          \"docstring\": \"Snapshot and restore critical environment variables to prevent test leakage.\\n\\n    Restores after each test to ensure environment stability across the suite.\",\n          \"name\": \"env_guard_and_restore\"\n        },\n        {\n          \"args\": [\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Provide a per-test directory under tests/data/tmp/<uuid> for ad-hoc temp usage.\\n\\n    Prefer this over raw tempfile.mkdtemp/TemporaryDirectory to keep paths within the repo.\",\n          \"name\": \"test_path_factory\"\n        },\n        {\n          \"args\": [\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Return a helper to ensure account/preferences/context files exist for a user.\\n\\n    If the user directory is missing, uses TestUserFactory to create a basic user.\\n    If present but missing files, writes minimal JSON structures to materialize them.\",\n          \"name\": \"ensure_user_materialized\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Guardrail: ensure temp resolution stays within tests/data and detect escapes.\\n\\n    Fails fast if the active temp directory is outside tests/data.\",\n          \"name\": \"path_sanitizer\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Ensure tests only create user dirs under tests/data/users.\\n\\n    - Fails if a top-level tests/data/test-user* directory appears.\\n    - Fails if any test-user* directory is created under tests/data/tmp.\\n    Cleans stray dirs to keep workspace tidy before failing.\",\n          \"name\": \"enforce_user_dir_locations\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Clear tests/data/tmp contents at session end to keep the workspace tidy.\",\n          \"name\": \"cleanup_tmp_at_session_end\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Route all system temp usage into tests/data for the entire session.\",\n          \"name\": \"force_test_data_directory\"\n        },\n        {\n          \"args\": [\n            \"mock_config\",\n            \"test_data_dir\",\n            \"request\"\n          ],\n          \"docstring\": \"Create mock user data for testing with unique user ID for each test.\",\n          \"name\": \"mock_user_data\"\n        },\n        {\n          \"args\": [\n            \"test_data_dir\",\n            \"mock_config\",\n            \"request\"\n          ],\n          \"docstring\": \"Create mock user data for testing with automated_messages enabled and categories.\",\n          \"name\": \"mock_user_data_with_messages\"\n        },\n        {\n          \"args\": [\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Helper fixture to update user index for test users.\",\n          \"name\": \"update_user_index_for_test\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Remove test users from tests/data/users/ after all tests. NEVER touches real user data.\",\n          \"name\": \"cleanup_test_users_after_session\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Clear user caches between tests to prevent state pollution.\",\n          \"name\": \"clear_user_caches_between_tests\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Mock logger for testing.\",\n          \"name\": \"mock_logger\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Create a temporary file for testing.\",\n          \"name\": \"temp_file\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Mock AI response for testing.\",\n          \"name\": \"mock_ai_response\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Mock task data for testing.\",\n          \"name\": \"mock_task_data\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Mock message data for testing.\",\n          \"name\": \"mock_message_data\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Mock service data for testing.\",\n          \"name\": \"mock_service_data\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Mock communication data for testing.\",\n          \"name\": \"mock_communication_data\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Mock schedule data for testing.\",\n          \"name\": \"mock_schedule_data\"\n        },\n        {\n          \"args\": [\n            \"config\"\n          ],\n          \"docstring\": \"Configure pytest for MHM testing.\",\n          \"name\": \"pytest_configure\"\n        },\n        {\n          \"args\": [\n            \"config\",\n            \"items\"\n          ],\n          \"docstring\": \"Modify test collection to add default markers.\",\n          \"name\": \"pytest_collection_modifyitems\"\n        },\n        {\n          \"args\": [\n            \"session\"\n          ],\n          \"docstring\": \"Log test session start.\",\n          \"name\": \"pytest_sessionstart\"\n        },\n        {\n          \"args\": [\n            \"session\",\n            \"exitstatus\"\n          ],\n          \"docstring\": \"Log test session finish.\",\n          \"name\": \"pytest_sessionfinish\"\n        },\n        {\n          \"args\": [\n            \"report\"\n          ],\n          \"docstring\": \"Log individual test results.\",\n          \"name\": \"pytest_runtest_logreport\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Clean up CommunicationManager singleton after all tests complete.\",\n          \"name\": \"cleanup_communication_manager\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Clean up ConversationManager state before each test.\",\n          \"name\": \"cleanup_conversation_manager\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"_missing_keys\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"key\",\n            \"auto_create\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_load_single_type\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"data_type\",\n            \"*args\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"wrapped_get_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"record\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"format\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"max_size_mb\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"file_path\"\n          ],\n          \"docstring\": \"Register a log file for session-based rotation monitoring.\",\n          \"name\": \"register_log_file\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Check if any log file exceeds the size limit.\",\n          \"name\": \"check_rotation_needed\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Rotate all registered log files together to maintain continuity.\",\n          \"name\": \"rotate_all_logs\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"archive_days\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Remove archive files older than the specified number of days.\",\n          \"name\": \"cleanup_old_archives\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Move old backup files to archive directory.\",\n          \"name\": \"archive_old_backups\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Perform all lifecycle maintenance operations.\",\n          \"name\": \"perform_lifecycle_maintenance\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"key\",\n            \"auto_create\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_load_single_type\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"key\"\n          ],\n          \"docstring\": \"Read requested type directly from user JSON files as a last resort.\",\n          \"name\": \"_fallback_read_from_files\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"data_type\",\n            \"*args\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"wrapped_get_user_data\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_helper\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_update_index\"\n        },\n        {\n          \"args\": [\n            \"*args\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"information\"\n        },\n        {\n          \"args\": [\n            \"*args\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"warning\"\n        },\n        {\n          \"args\": [\n            \"*args\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"critical\"\n        },\n        {\n          \"args\": [\n            \"*args\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"question\"\n        },\n        {\n          \"args\": [\n            \"*args\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"about\"\n        }\n      ]\n    },\n    \"tests/debug_file_paths.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Debug test to check if the issue is with file paths.\",\n          \"name\": \"test_debug_file_paths\"\n        }\n      ]\n    },\n    \"tests/integration/test_account_lifecycle.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test complete account lifecycle workflows with real behavior verification.\",\n          \"methods\": [\n            \"_materialize_and_verify\",\n            \"_ensure_minimal_structure\",\n            \"save_user_data_simple\",\n            \"setup_test_environment\",\n            \"test_create_basic_account\",\n            \"test_create_full_account\",\n            \"test_enable_checkins_for_basic_user\",\n            \"test_disable_tasks_for_full_user\",\n            \"test_reenable_tasks_for_user\",\n            \"test_add_message_category\",\n            \"test_remove_message_category\",\n            \"test_add_schedule_period\",\n            \"test_modify_schedule_period\",\n            \"test_remove_schedule_period\",\n            \"test_complete_account_lifecycle\"\n          ],\n          \"name\": \"TestAccountLifecycle\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"uid\"\n          ],\n          \"docstring\": \"Ensure minimal structures exist without overwriting existing data; return full user data.\",\n          \"name\": \"_materialize_and_verify\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"uid\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_ensure_minimal_structure\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"account_data\",\n            \"preferences_data\",\n            \"schedules_data\"\n          ],\n          \"docstring\": \"Helper function to save user data in the correct format.\",\n          \"name\": \"save_user_data_simple\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Set up isolated test environment for each test.\",\n          \"name\": \"setup_test_environment\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test creating a basic account with only messages enabled.\",\n          \"name\": \"test_create_basic_account\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test creating a full account with all features enabled.\",\n          \"name\": \"test_create_full_account\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test enabling check-ins for a user who only has messages enabled.\",\n          \"name\": \"test_enable_checkins_for_basic_user\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test disabling tasks for a user who has all features enabled.\",\n          \"name\": \"test_disable_tasks_for_full_user\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test re-enabling tasks for a user who previously had them disabled.\",\n          \"name\": \"test_reenable_tasks_for_user\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"update_user_index_for_test\"\n          ],\n          \"docstring\": \"Test adding a new message category to user preferences.\",\n          \"name\": \"test_add_message_category\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test removing a message category from user preferences.\",\n          \"name\": \"test_remove_message_category\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test adding a new schedule period to user schedules.\",\n          \"name\": \"test_add_schedule_period\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test modifying an existing schedule period.\",\n          \"name\": \"test_modify_schedule_period\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test removing a schedule period from user schedules.\",\n          \"name\": \"test_remove_schedule_period\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test complete account lifecycle: create, modify, disable, re-enable, delete.\",\n          \"name\": \"test_complete_account_lifecycle\"\n        }\n      ]\n    },\n    \"tests/integration/test_account_management.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Test that all account management modules can be imported without errors\",\n          \"name\": \"test_account_management_imports\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Test that all account management functions can be called (with safe test data)\",\n          \"name\": \"test_account_management_functions\"\n        },\n        {\n          \"args\": [\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test that account management can handle the expected data structures\",\n          \"name\": \"test_account_management_data_structures\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Test that account management validation works correctly\",\n          \"name\": \"test_account_management_validation\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Test account management operations with temporary test data\",\n          \"name\": \"test_account_management_safe_operations\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Test that account management integrates properly with other systems\",\n          \"name\": \"test_account_management_integration\"\n        }\n      ]\n    },\n    \"tests/integration/test_user_creation.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test comprehensive user creation scenarios.\",\n          \"methods\": [\n            \"test_basic_email_user_creation\",\n            \"test_discord_user_creation\",\n            \"test_user_with_custom_fields\",\n            \"test_user_creation_with_schedules\"\n          ],\n          \"name\": \"TestUserCreationScenarios\"\n        },\n        {\n          \"docstring\": \"Test validation scenarios during user creation.\",\n          \"methods\": [\n            \"test_username_validation\",\n            \"test_email_validation\",\n            \"test_timezone_validation\",\n            \"test_required_fields_validation\"\n          ],\n          \"name\": \"TestUserCreationValidation\"\n        },\n        {\n          \"docstring\": \"Test error handling during user creation.\",\n          \"methods\": [\n            \"test_duplicate_user_creation\",\n            \"test_invalid_user_id\",\n            \"test_corrupted_data_handling\"\n          ],\n          \"name\": \"TestUserCreationErrorHandling\"\n        },\n        {\n          \"docstring\": \"Test integration scenarios for user creation.\",\n          \"methods\": [\n            \"test_full_user_lifecycle\",\n            \"test_multiple_users_same_channel\",\n            \"test_user_with_all_features\"\n          ],\n          \"name\": \"TestUserCreationIntegration\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test creating a basic email user with minimal settings.\",\n          \"name\": \"test_basic_email_user_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test creating a Discord user with full features enabled.\",\n          \"name\": \"test_discord_user_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test creating a user with extensive custom fields using enhanced test utilities.\",\n          \"name\": \"test_user_with_custom_fields\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test creating a user with schedule periods using enhanced test utilities.\",\n          \"name\": \"test_user_creation_with_schedules\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test username validation.\",\n          \"name\": \"test_username_validation\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test email validation.\",\n          \"name\": \"test_email_validation\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test timezone validation.\",\n          \"name\": \"test_timezone_validation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test that required fields are validated.\",\n          \"name\": \"test_required_fields_validation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test creating a user that already exists.\",\n          \"name\": \"test_duplicate_user_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test creating user with invalid user ID.\",\n          \"name\": \"test_invalid_user_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test handling corrupted user data.\",\n          \"name\": \"test_corrupted_data_handling\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test complete user lifecycle: create, update, delete.\",\n          \"name\": \"test_full_user_lifecycle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test creating multiple users with the same channel type.\",\n          \"name\": \"test_multiple_users_same_channel\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test creating a user with all possible features enabled.\",\n          \"name\": \"test_user_with_all_features\"\n        }\n      ]\n    },\n    \"tests/test_isolation.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Context manager to ensure test isolation.\",\n          \"methods\": [\n            \"__init__\",\n            \"__enter__\",\n            \"__exit__\"\n          ],\n          \"name\": \"TestIsolationManager\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Mock all system calls that could create real resources.\\n    \\n    This should be called at the start of any test that might trigger\\n    system resource creation.\",\n          \"name\": \"mock_system_calls\"\n        },\n        {\n          \"args\": [\n            \"*args\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"Mock schtasks calls to prevent real task creation.\",\n          \"name\": \"mock_schtasks_call\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Ensure that tests are properly isolated from system resources.\\n    \\n    This function should be called in test setup to prevent any\\n    real system resource creation.\",\n          \"name\": \"ensure_test_isolation\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Create a SchedulerManager instance with all system calls mocked.\\n    \\n    This should be used in tests that need to test scheduler functionality\\n    without creating real system resources.\",\n          \"name\": \"create_safe_scheduler_manager\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Verify that no real Windows tasks were created during test execution.\\n    \\n    This should be called in test teardown to ensure tests didn't\\n    accidentally create real system resources.\",\n          \"name\": \"verify_no_real_tasks_created\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"__enter__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"exc_type\",\n            \"exc_val\",\n            \"exc_tb\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"__exit__\"\n        }\n      ]\n    },\n    \"tests/test_utilities.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Factory for creating test users with different configurations\",\n          \"methods\": [\n            \"create_basic_user\",\n            \"_create_user_files_directly__directory_structure\",\n            \"_create_user_files_directly__account_data\",\n            \"_create_user_files_directly__preferences_data\",\n            \"_create_user_files_directly__context_data\",\n            \"_create_user_files_directly__save_json\",\n            \"_create_user_files_directly__schedules_data\",\n            \"_create_user_files_directly__message_files\",\n            \"create_basic_user__update_index\",\n            \"_create_user_files_directly\",\n            \"create_basic_user__with_test_dir\",\n            \"create_discord_user\",\n            \"create_discord_user__with_test_dir\",\n            \"create_full_featured_user\",\n            \"create_full_featured_user__with_test_dir\",\n            \"create_full_featured_user__impl\",\n            \"create_email_user\",\n            \"create_email_user__with_test_dir\",\n            \"create_email_user__impl\",\n            \"create_user_with_custom_fields\",\n            \"create_user_with_custom_fields__impl\",\n            \"create_user_with_schedules\",\n            \"create_user_with_schedules__impl\",\n            \"create_minimal_user\",\n            \"create_minimal_user_and_get_id\",\n            \"create_minimal_user__with_test_dir\",\n            \"create_minimal_user__with_test_dir_and_get_id\",\n            \"create_minimal_user__impl\",\n            \"create_user_with_complex_checkins\",\n            \"create_user_with_complex_checkins__with_test_dir\",\n            \"create_user_with_complex_checkins__impl\",\n            \"create_user_with_health_focus\",\n            \"create_user_with_health_focus__with_test_dir\",\n            \"create_user_with_health_focus__impl\",\n            \"create_user_with_task_focus\",\n            \"create_user_with_task_focus__with_test_dir\",\n            \"create_user_with_task_focus__impl\",\n            \"create_user_with_disabilities\",\n            \"create_user_with_disabilities__with_test_dir\",\n            \"create_user_with_disabilities__impl\",\n            \"create_user_with_limited_data\",\n            \"create_user_with_limited_data__with_test_dir\",\n            \"create_user_with_limited_data__impl\",\n            \"create_user_with_inconsistent_data\",\n            \"create_user_with_inconsistent_data__with_test_dir\",\n            \"create_user_with_inconsistent_data__impl\",\n            \"get_test_user_data\",\n            \"get_test_user_id_by_internal_username\",\n            \"create_basic_user__verify_creation\",\n            \"verify_email_user_creation__with_test_dir\"\n          ],\n          \"name\": \"TestUserFactory\"\n        },\n        {\n          \"docstring\": \"Manages test data directories and cleanup\",\n          \"methods\": [\n            \"setup_test_environment\",\n            \"cleanup_test_environment\"\n          ],\n          \"name\": \"TestDataManager\"\n        },\n        {\n          \"docstring\": \"Factory for creating specific test user data structures\",\n          \"methods\": [\n            \"create_account_data\",\n            \"create_preferences_data\",\n            \"create_schedules_data\",\n            \"create_context_data\"\n          ],\n          \"name\": \"TestUserDataFactory\"\n        },\n        {\n          \"docstring\": \"Factory for creating test data for various scenarios\",\n          \"methods\": [\n            \"create_corrupted_user_data\",\n            \"create_test_schedule_data\",\n            \"create_test_task_data\",\n            \"create_test_message_data\"\n          ],\n          \"name\": \"TestDataFactory\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"user_id\",\n            \"user_type\",\n            \"test_data_dir\",\n            \"**kwargs\"\n          ],\n          \"docstring\": \"Convenience function to create test users with different configurations\\n    \\n    Args:\\n        user_id: Unique identifier for the test user\\n        user_type: Type of user to create. Options:\\n            - \\\"basic\\\": Basic user with configurable features\\n            - \\\"discord\\\": Discord-specific user\\n            - \\\"email\\\": Email-specific user\\n\\n            - \\\"full\\\": Full featured user with all capabilities\\n            - \\\"minimal\\\": Minimal user with only messaging\\n            - \\\"health\\\": Health-focused user\\n            - \\\"task\\\": Task/productivity-focused user\\n            - \\\"disability\\\": User with accessibility considerations\\n            - \\\"complex_checkins\\\": User with complex check-in configurations\\n            - \\\"limited_data\\\": User with minimal data (like real users)\\n            - \\\"inconsistent\\\": User with inconsistent/partial data\\n            - \\\"custom_fields\\\": User with custom field configurations\\n            - \\\"scheduled\\\": User with custom schedule configurations\\n        test_data_dir: Test data directory to use (required for modern test approach)\\n        **kwargs: Additional arguments passed to the specific creation method\\n        \\n    Returns:\\n        bool: True if user was created successfully, False otherwise\",\n          \"name\": \"create_test_user\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Convenience function to set up test data environment\\n    \\n    Returns:\\n        tuple: (test_dir, test_data_dir, test_test_data_dir)\",\n          \"name\": \"setup_test_data_environment\"\n        },\n        {\n          \"args\": [\n            \"test_dir\"\n          ],\n          \"docstring\": \"Convenience function to clean up test data environment\\n    \\n    Args:\\n        test_dir: Path to the test directory to clean up\",\n          \"name\": \"cleanup_test_data_environment\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"enable_checkins\",\n            \"enable_tasks\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a test user with basic functionality enabled\\n        \\n        Args:\\n            user_id: Unique identifier for the test user\\n            enable_checkins: Whether to enable check-ins for this user\\n            enable_tasks: Whether to enable task management for this user\\n            test_data_dir: Test data directory to use (if None, uses real user directory)\\n            \\n        Returns:\\n            bool: True if user was created successfully, False otherwise\",\n          \"name\": \"create_basic_user\"\n        },\n        {\n          \"args\": [\n            \"test_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Create the user directory structure and return paths.\",\n          \"name\": \"_create_user_files_directly__directory_structure\"\n        },\n        {\n          \"args\": [\n            \"actual_user_id\",\n            \"user_id\",\n            \"user_data\"\n          ],\n          \"docstring\": \"Create account data structure.\",\n          \"name\": \"_create_user_files_directly__account_data\"\n        },\n        {\n          \"args\": [\n            \"user_data\"\n          ],\n          \"docstring\": \"Create preferences data structure.\",\n          \"name\": \"_create_user_files_directly__preferences_data\"\n        },\n        {\n          \"args\": [\n            \"user_data\"\n          ],\n          \"docstring\": \"Create user context data structure.\",\n          \"name\": \"_create_user_files_directly__context_data\"\n        },\n        {\n          \"args\": [\n            \"file_path\",\n            \"data\"\n          ],\n          \"docstring\": \"Save data to a JSON file.\",\n          \"name\": \"_create_user_files_directly__save_json\"\n        },\n        {\n          \"args\": [\n            \"categories\"\n          ],\n          \"docstring\": \"Create default schedule periods for categories.\",\n          \"name\": \"_create_user_files_directly__schedules_data\"\n        },\n        {\n          \"args\": [\n            \"user_dir\",\n            \"categories\"\n          ],\n          \"docstring\": \"Create message directory and default message files.\",\n          \"name\": \"_create_user_files_directly__message_files\"\n        },\n        {\n          \"args\": [\n            \"test_data_dir\",\n            \"user_id\",\n            \"actual_user_id\"\n          ],\n          \"docstring\": \"Update user index to map internal_username to UUID.\",\n          \"name\": \"create_basic_user__update_index\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Helper function to create user files directly in test directory\",\n          \"name\": \"_create_user_files_directly\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"enable_checkins\",\n            \"enable_tasks\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create basic user with test directory by directly saving files\",\n          \"name\": \"create_basic_user__with_test_dir\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"discord_user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a test user specifically configured for Discord testing\\n        \\n        Args:\\n            user_id: Unique identifier for the test user\\n            discord_user_id: Discord user ID (defaults to user_id if not provided)\\n            test_data_dir: Test data directory to use (if None, uses real user directory)\\n            \\n        Returns:\\n            bool: True if user was created successfully, False otherwise\",\n          \"name\": \"create_discord_user\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"discord_user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create discord user with test directory by directly saving files\",\n          \"name\": \"create_discord_user__with_test_dir\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a test user with all features enabled and comprehensive data\\n        \\n        Args:\\n            user_id: Unique identifier for the test user\\n            test_data_dir: Test data directory to use (if None, uses real user directory)\\n            \\n        Returns:\\n            bool: True if user was created successfully, False otherwise\",\n          \"name\": \"create_full_featured_user\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create full featured user with test directory by directly saving files\",\n          \"name\": \"create_full_featured_user__with_test_dir\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Internal implementation of full featured user creation\",\n          \"name\": \"create_full_featured_user__impl\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"email\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a test user specifically configured for email testing\\n        \\n        Args:\\n            user_id: Unique identifier for the test user\\n            email: Email address (defaults to user_id@example.com if not provided)\\n            test_data_dir: Test data directory to use (if None, uses real user directory)\\n            \\n        Returns:\\n            str: User ID if user was created successfully, None otherwise\",\n          \"name\": \"create_email_user\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"email\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create email user with test directory by directly saving files\",\n          \"name\": \"create_email_user__with_test_dir\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"email\"\n          ],\n          \"docstring\": \"Internal implementation of email user creation\",\n          \"name\": \"create_email_user__impl\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"custom_fields\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a test user with custom fields for testing custom field functionality\\n        \\n        Args:\\n            user_id: Unique identifier for the test user\\n            custom_fields: Dictionary of custom fields to add to user context\\n            test_data_dir: Test data directory to use (if None, uses real user directory)\\n            \\n        Returns:\\n            bool: True if user was created successfully, False otherwise\",\n          \"name\": \"create_user_with_custom_fields\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"custom_fields\"\n          ],\n          \"docstring\": \"Internal implementation of custom fields user creation\",\n          \"name\": \"create_user_with_custom_fields__impl\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"schedule_config\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a test user with comprehensive schedule configuration\\n        \\n        Args:\\n            user_id: Unique identifier for the test user\\n            schedule_config: Custom schedule configuration\\n            test_data_dir: Test data directory to use (if None, uses real user directory)\\n            \\n        Returns:\\n            bool: True if user was created successfully, False otherwise\",\n          \"name\": \"create_user_with_schedules\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"schedule_config\"\n          ],\n          \"docstring\": \"Internal implementation of schedules user creation\",\n          \"name\": \"create_user_with_schedules__impl\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a minimal test user with only basic messaging enabled\\n        \\n        Args:\\n            user_id: Unique identifier for the test user\\n            test_data_dir: Test data directory to use (if None, uses real user directory)\\n            \\n        Returns:\\n            bool: True if user was created successfully, False otherwise\",\n          \"name\": \"create_minimal_user\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a minimal test user and return the actual UUID\\n        \\n        Args:\\n            user_id: Unique identifier for the test user\\n            test_data_dir: Test data directory to use (if None, uses real user directory)\\n            \\n        Returns:\\n            tuple[bool, str]: (success, actual_user_id) where actual_user_id is the UUID\",\n          \"name\": \"create_minimal_user_and_get_id\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create minimal user with test directory by directly saving files\",\n          \"name\": \"create_minimal_user__with_test_dir\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create minimal user with test directory and return the actual UUID\",\n          \"name\": \"create_minimal_user__with_test_dir_and_get_id\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Internal implementation of minimal user creation\",\n          \"name\": \"create_minimal_user__impl\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a test user with complex check-in configurations\\n        \\n        Args:\\n            user_id: Unique identifier for the test user\\n            test_data_dir: Test data directory to use (if None, uses real user directory)\\n            \\n        Returns:\\n            bool: True if user was created successfully, False otherwise\",\n          \"name\": \"create_user_with_complex_checkins\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create complex checkins user with test directory by directly saving files\",\n          \"name\": \"create_user_with_complex_checkins__with_test_dir\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Internal implementation of complex checkins user creation\",\n          \"name\": \"create_user_with_complex_checkins__impl\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a test user with health-focused features and data\\n        \\n        Args:\\n            user_id: Unique identifier for the test user\\n            test_data_dir: Test data directory to use (if None, uses real user directory)\\n            \\n        Returns:\\n            bool: True if user was created successfully, False otherwise\",\n          \"name\": \"create_user_with_health_focus\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create health focus user with test directory by directly saving files\",\n          \"name\": \"create_user_with_health_focus__with_test_dir\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Internal implementation of health focus user creation\",\n          \"name\": \"create_user_with_health_focus__impl\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a test user with task management focus\\n        \\n        Args:\\n            user_id: Unique identifier for the test user\\n            test_data_dir: Test data directory to use (if None, uses real user directory)\\n            \\n        Returns:\\n            bool: True if user was created successfully, False otherwise\",\n          \"name\": \"create_user_with_task_focus\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create task focus user with test directory by directly saving files\",\n          \"name\": \"create_user_with_task_focus__with_test_dir\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Internal implementation of task focus user creation\",\n          \"name\": \"create_user_with_task_focus__impl\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a test user with disability-focused features and data\\n        \\n        Args:\\n            user_id: Unique identifier for the test user\\n            test_data_dir: Test data directory to use (if None, uses real user directory)\\n            \\n        Returns:\\n            bool: True if user was created successfully, False otherwise\",\n          \"name\": \"create_user_with_disabilities\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create disability user with test directory by directly saving files\",\n          \"name\": \"create_user_with_disabilities__with_test_dir\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Internal implementation of disability user creation\",\n          \"name\": \"create_user_with_disabilities__impl\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a test user with minimal data for testing edge cases\\n        \\n        Args:\\n            user_id: Unique identifier for the test user\\n            test_data_dir: Test data directory to use (if None, uses real user directory)\\n            \\n        Returns:\\n            bool: True if user was created successfully, False otherwise\",\n          \"name\": \"create_user_with_limited_data\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create limited data user with test directory by directly saving files\",\n          \"name\": \"create_user_with_limited_data__with_test_dir\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Internal implementation of limited data user creation\",\n          \"name\": \"create_user_with_limited_data__impl\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create a test user with inconsistent data for testing edge cases\\n        \\n        Args:\\n            user_id: Unique identifier for the test user\\n            test_data_dir: Test data directory to use (if None, uses real user directory)\\n            \\n        Returns:\\n            bool: True if user was created successfully, False otherwise\",\n          \"name\": \"create_user_with_inconsistent_data\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create inconsistent data user with test directory by directly saving files\",\n          \"name\": \"create_user_with_inconsistent_data__with_test_dir\"\n        },\n        {\n          \"args\": [\n            \"user_id\"\n          ],\n          \"docstring\": \"Internal implementation of inconsistent data user creation\",\n          \"name\": \"create_user_with_inconsistent_data__impl\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Get user data from test directory\",\n          \"name\": \"get_test_user_data\"\n        },\n        {\n          \"args\": [\n            \"internal_username\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Get user ID by internal username from test directory\",\n          \"name\": \"get_test_user_id_by_internal_username\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"actual_user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Helper function to verify user creation with proper configuration patching\",\n          \"name\": \"create_basic_user__verify_creation\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"actual_user_id\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Helper function to verify email user creation with proper configuration patching\",\n          \"name\": \"verify_email_user_creation__with_test_dir\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Create isolated test environment with temporary directories\\n        \\n        Returns:\\n            tuple: (test_dir, test_data_dir, test_test_data_dir)\",\n          \"name\": \"setup_test_environment\"\n        },\n        {\n          \"args\": [\n            \"test_dir\"\n          ],\n          \"docstring\": \"Clean up test environment and remove temporary files\\n        \\n        Args:\\n            test_dir: Path to the test directory to clean up\",\n          \"name\": \"cleanup_test_environment\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"**overrides\"\n          ],\n          \"docstring\": \"Create standard account data structure with optional overrides\\n        \\n        Args:\\n            user_id: User identifier\\n            **overrides: Optional field overrides\\n            \\n        Returns:\\n            Dict containing account data\",\n          \"name\": \"create_account_data\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"**overrides\"\n          ],\n          \"docstring\": \"Create standard preferences data structure with optional overrides\\n        \\n        Args:\\n            user_id: User identifier\\n            **overrides: Optional field overrides\\n            \\n        Returns:\\n            Dict containing preferences data\",\n          \"name\": \"create_preferences_data\"\n        },\n        {\n          \"args\": [\n            \"**overrides\"\n          ],\n          \"docstring\": \"Create standard schedules data structure with optional overrides\\n        \\n        Args:\\n            **overrides: Optional field overrides\\n            \\n        Returns:\\n            Dict containing schedules data\",\n          \"name\": \"create_schedules_data\"\n        },\n        {\n          \"args\": [\n            \"**overrides\"\n          ],\n          \"docstring\": \"Create standard context data structure with optional overrides\\n        \\n        Args:\\n            **overrides: Optional field overrides\\n            \\n        Returns:\\n            Dict containing context data\",\n          \"name\": \"create_context_data\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"corruption_type\"\n          ],\n          \"docstring\": \"Create a user with corrupted data for testing error handling\\n        \\n        Args:\\n            user_id: Unique identifier for the test user\\n            corruption_type: Type of corruption (\\\"invalid_json\\\", \\\"missing_file\\\", \\\"empty_file\\\")\\n            \\n        Returns:\\n            bool: True if corrupted user was created successfully, False otherwise\",\n          \"name\": \"create_corrupted_user_data\"\n        },\n        {\n          \"args\": [\n            \"categories\"\n          ],\n          \"docstring\": \"Create test schedule data for testing schedule management\\n        \\n        Args:\\n            categories: List of categories to create schedules for\\n            \\n        Returns:\\n            Dict containing schedule data\",\n          \"name\": \"create_test_schedule_data\"\n        },\n        {\n          \"args\": [\n            \"task_count\"\n          ],\n          \"docstring\": \"Create test task data for testing task management\\n        \\n        Args:\\n            task_count: Number of tasks to create\\n            \\n        Returns:\\n            List of task dictionaries\",\n          \"name\": \"create_test_task_data\"\n        },\n        {\n          \"args\": [\n            \"category\",\n            \"message_count\"\n          ],\n          \"docstring\": \"Create test message data for testing message management\\n        \\n        Args:\\n            category: Message category\\n            message_count: Number of messages to create\\n            \\n        Returns:\\n            List of message dictionaries\",\n          \"name\": \"create_test_message_data\"\n        }\n      ]\n    },\n    \"tests/ui/test_account_creation_ui.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test account creation dialog with real behavior verification.\",\n          \"methods\": [\n            \"dialog\",\n            \"test_dialog_initialization_real_behavior\",\n            \"test_feature_enablement_real_behavior\",\n            \"test_username_validation_real_behavior\",\n            \"test_timezone_validation_real_behavior\",\n            \"test_feature_validation_real_behavior\",\n            \"test_messages_validation_real_behavior\",\n            \"test_account_creation_real_behavior\",\n            \"test_widget_data_collection_real_behavior\"\n          ],\n          \"name\": \"TestAccountCreationDialogRealBehavior\"\n        },\n        {\n          \"docstring\": \"Test account management functionality with real behavior verification.\",\n          \"methods\": [\n            \"test_user_profile_dialog_integration\",\n            \"test_user_index_integration_real_behavior\",\n            \"test_feature_enablement_persistence_real_behavior\"\n          ],\n          \"name\": \"TestAccountManagementRealBehavior\"\n        },\n        {\n          \"docstring\": \"Test error handling in account creation and management.\",\n          \"methods\": [\n            \"test_duplicate_username_handling_real_behavior\",\n            \"test_invalid_data_handling_real_behavior\",\n            \"test_file_system_error_handling_real_behavior\",\n            \"test_widget_error_handling_real_behavior\"\n          ],\n          \"name\": \"TestAccountCreationErrorHandling\"\n        },\n        {\n          \"docstring\": \"Test integration scenarios for account creation and management.\",\n          \"methods\": [\n            \"test_full_account_lifecycle_real_behavior\",\n            \"test_multiple_users_same_features_real_behavior\"\n          ],\n          \"name\": \"TestAccountCreationIntegration\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Create QApplication instance for UI testing.\",\n          \"name\": \"qapp\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Create account creation dialog for testing.\",\n          \"name\": \"dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\",\n          \"name\": \"test_dialog_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test feature enablement checkboxes control tab visibility.\",\n          \"name\": \"test_feature_enablement_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test username validation with real UI interactions.\",\n          \"name\": \"test_username_validation_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test timezone validation with real UI interactions.\",\n          \"name\": \"test_timezone_validation_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test feature validation with proper category requirements.\",\n          \"name\": \"test_feature_validation_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test messages-specific validation when messages are enabled.\",\n          \"name\": \"test_messages_validation_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test complete account creation workflow with real file operations.\",\n          \"name\": \"test_account_creation_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test that widgets properly collect and return data.\",\n          \"name\": \"test_widget_data_collection_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test user profile dialog integration with real user data.\",\n          \"name\": \"test_user_profile_dialog_integration\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test user index integration with real file operations.\",\n          \"name\": \"test_user_index_integration_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test that feature enablement is properly persisted using enhanced test utilities.\",\n          \"name\": \"test_feature_enablement_persistence_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test handling of duplicate usernames using enhanced test utilities.\",\n          \"name\": \"test_duplicate_username_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test handling of invalid data during account creation.\",\n          \"name\": \"test_invalid_data_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test handling of file system errors.\",\n          \"name\": \"test_file_system_error_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test handling of widget errors during account creation.\",\n          \"name\": \"test_widget_error_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test complete account lifecycle with real file operations.\",\n          \"name\": \"test_full_account_lifecycle_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test creating multiple users with same features.\",\n          \"name\": \"test_multiple_users_same_features_real_behavior\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"mock_accept_impl\"\n        }\n      ]\n    },\n    \"tests/ui/test_channel_management_dialog_coverage_expansion.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test coverage expansion for ChannelManagementDialog.\",\n          \"methods\": [\n            \"mock_user_data\",\n            \"test_save_channel_settings_without_user\",\n            \"test_save_channel_settings_success_email\",\n            \"test_save_channel_settings_success_discord\",\n            \"test_save_channel_settings_validation_error_email_required\",\n            \"test_save_channel_settings_validation_error_discord_required\",\n            \"test_save_channel_settings_validation_error_invalid_email\",\n            \"test_save_channel_settings_validation_error_invalid_discord_id\",\n            \"test_save_channel_settings_validation_error_invalid_email\",\n            \"test_save_channel_settings_exception_handling\",\n            \"test_save_channel_settings_removes_old_settings\",\n            \"test_get_selected_channel\",\n            \"test_set_selected_channel\"\n          ],\n          \"name\": \"TestChannelManagementDialogCoverageExpansion\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Mock user data for testing.\",\n          \"name\": \"mock_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test save_channel_settings when no user ID is set.\",\n          \"name\": \"test_save_channel_settings_without_user\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Test successful save with email channel.\",\n          \"name\": \"test_save_channel_settings_success_email\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Test successful save with Discord channel.\",\n          \"name\": \"test_save_channel_settings_success_discord\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Test validation error when email is required but not provided.\",\n          \"name\": \"test_save_channel_settings_validation_error_email_required\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Test validation error when Discord ID is required but not provided.\",\n          \"name\": \"test_save_channel_settings_validation_error_discord_required\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Test validation error for invalid email format.\",\n          \"name\": \"test_save_channel_settings_validation_error_invalid_email\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Test validation error for missing Discord ID.\",\n          \"name\": \"test_save_channel_settings_validation_error_invalid_discord_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Test validation error for invalid email format.\",\n          \"name\": \"test_save_channel_settings_validation_error_invalid_email\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Test exception handling during save.\",\n          \"name\": \"test_save_channel_settings_exception_handling\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Test that old settings are properly removed.\",\n          \"name\": \"test_save_channel_settings_removes_old_settings\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Test get_selected_channel method.\",\n          \"name\": \"test_get_selected_channel\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Test set_selected_channel method.\",\n          \"name\": \"test_set_selected_channel\"\n        }\n      ]\n    },\n    \"tests/ui/test_dialog_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test user profile dialog with real behavior verification.\",\n          \"methods\": [\n            \"dialog\",\n            \"test_dialog_initialization_real_behavior\",\n            \"test_data_loading_real_behavior\",\n            \"test_data_saving_real_behavior\",\n            \"test_dynamic_list_fields_real_behavior\"\n          ],\n          \"name\": \"TestUserProfileDialogBehavior\"\n        },\n        {\n          \"docstring\": \"Test category management dialog with real behavior verification.\",\n          \"methods\": [\n            \"dialog\",\n            \"test_dialog_initialization_real_behavior\",\n            \"test_category_selection_real_behavior\"\n          ],\n          \"name\": \"TestCategoryManagementDialogBehavior\"\n        },\n        {\n          \"docstring\": \"Test channel management dialog with real behavior verification.\",\n          \"methods\": [\n            \"dialog\",\n            \"test_dialog_initialization_real_behavior\",\n            \"test_channel_configuration_real_behavior\"\n          ],\n          \"name\": \"TestChannelManagementDialogBehavior\"\n        },\n        {\n          \"docstring\": \"Test check-in management dialog with real behavior verification.\",\n          \"methods\": [\n            \"dialog\",\n            \"test_dialog_initialization_real_behavior\",\n            \"test_checkin_enablement_real_behavior\"\n          ],\n          \"name\": \"TestCheckinManagementDialogBehavior\"\n        },\n        {\n          \"docstring\": \"Test task management dialog with real behavior verification.\",\n          \"methods\": [\n            \"dialog\",\n            \"test_dialog_initialization_real_behavior\",\n            \"test_task_statistics_real_behavior\"\n          ],\n          \"name\": \"TestTaskManagementDialogBehavior\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Create QApplication instance for UI testing.\",\n          \"name\": \"qapp\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create user profile dialog for testing.\",\n          \"name\": \"dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\",\n          \"name\": \"test_dialog_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test dialog loads existing user data correctly.\",\n          \"name\": \"test_data_loading_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test dialog saves user data correctly.\",\n          \"name\": \"test_data_saving_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test dynamic list fields work correctly.\",\n          \"name\": \"test_dynamic_list_fields_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create category management dialog for testing.\",\n          \"name\": \"dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\",\n          \"name\": \"test_dialog_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test category selection and saving works correctly.\",\n          \"name\": \"test_category_selection_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create channel management dialog for testing.\",\n          \"name\": \"dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\",\n          \"name\": \"test_dialog_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test channel configuration and saving works correctly.\",\n          \"name\": \"test_channel_configuration_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create check-in management dialog for testing.\",\n          \"name\": \"dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\",\n          \"name\": \"test_dialog_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test check-in enablement toggle works correctly.\",\n          \"name\": \"test_checkin_enablement_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create task management dialog for testing.\",\n          \"name\": \"dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\",\n          \"name\": \"test_dialog_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test task statistics are calculated and displayed correctly.\",\n          \"name\": \"test_task_statistics_real_behavior\"\n        }\n      ]\n    },\n    \"tests/ui/test_dialog_coverage_expansion.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test schedule editor dialog with real behavior verification.\",\n          \"methods\": [\n            \"test_user_data\",\n            \"dialog\",\n            \"test_dialog_initialization_real_behavior\",\n            \"test_existing_data_loading_real_behavior\",\n            \"test_add_new_period_real_behavior\",\n            \"test_delete_period_real_behavior\",\n            \"test_undo_delete_real_behavior\",\n            \"test_data_saving_real_behavior\",\n            \"test_validation_error_handling_real_behavior\",\n            \"test_open_schedule_editor_function_real_behavior\"\n          ],\n          \"name\": \"TestScheduleEditorDialogBehavior\"\n        },\n        {\n          \"docstring\": \"Test TaskEditDialog behavior.\",\n          \"methods\": [\n            \"test_user_data\",\n            \"dialog\",\n            \"test_dialog_initialization_real_behavior\",\n            \"test_task_data_editing_real_behavior\",\n            \"test_task_saving_real_behavior\",\n            \"test_validation_error_handling_real_behavior\"\n          ],\n          \"name\": \"TestTaskEditDialogBehavior\"\n        },\n        {\n          \"docstring\": \"Test TaskCrudDialog behavior.\",\n          \"methods\": [\n            \"test_user_data\",\n            \"dialog\",\n            \"test_dialog_initialization_real_behavior\",\n            \"test_add_task_real_behavior\",\n            \"test_edit_task_real_behavior\",\n            \"test_delete_task_real_behavior\"\n          ],\n          \"name\": \"TestTaskCrudDialogBehavior\"\n        },\n        {\n          \"docstring\": \"Test task completion dialog with real behavior verification.\",\n          \"methods\": [\n            \"test_user_data\",\n            \"dialog\",\n            \"test_dialog_initialization_real_behavior\",\n            \"test_task_completion_real_behavior\"\n          ],\n          \"name\": \"TestTaskCompletionDialogBehavior\"\n        },\n        {\n          \"docstring\": \"Test UserProfileDialog behavior.\",\n          \"methods\": [\n            \"test_user_data\",\n            \"dialog\",\n            \"test_dialog_initialization_real_behavior\",\n            \"test_profile_data_editing_real_behavior\",\n            \"test_dynamic_list_fields_real_behavior\",\n            \"test_validation_error_handling_real_behavior\"\n          ],\n          \"name\": \"TestUserProfileDialogBehavior\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Create QApplication instance for UI testing.\",\n          \"name\": \"qapp\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create test user with schedule data.\",\n          \"name\": \"test_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create schedule editor dialog for testing.\",\n          \"name\": \"dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test dialog initialization loads existing data.\",\n          \"name\": \"test_dialog_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test dialog loads existing schedule data.\",\n          \"name\": \"test_existing_data_loading_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test adding a new period creates widget and updates data.\",\n          \"name\": \"test_add_new_period_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test deleting a period removes widget and tracks for undo.\",\n          \"name\": \"test_delete_period_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test undo delete restores deleted period.\",\n          \"name\": \"test_undo_delete_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test saving dialog data updates user files.\",\n          \"name\": \"test_data_saving_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test validation errors are handled gracefully.\",\n          \"name\": \"test_validation_error_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test open_schedule_editor function creates and shows dialog.\",\n          \"name\": \"test_open_schedule_editor_function_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"test_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create task edit dialog for testing.\",\n          \"name\": \"dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test dialog initialization sets up UI correctly.\",\n          \"name\": \"test_dialog_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test editing task data updates form fields.\",\n          \"name\": \"test_task_data_editing_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test task saving functionality.\",\n          \"name\": \"test_task_saving_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test validation errors are handled gracefully.\",\n          \"name\": \"test_validation_error_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"test_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create task CRUD dialog for testing.\",\n          \"name\": \"dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test dialog initialization sets up UI correctly.\",\n          \"name\": \"test_dialog_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test adding a new task updates the table.\",\n          \"name\": \"test_add_task_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test editing a task shows edit dialog.\",\n          \"name\": \"test_edit_task_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test deleting a task removes it from the table.\",\n          \"name\": \"test_delete_task_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create test user with task data.\",\n          \"name\": \"test_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create task completion dialog for testing.\",\n          \"name\": \"dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test dialog initialization sets up UI correctly.\",\n          \"name\": \"test_dialog_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test completing a task updates user data.\",\n          \"name\": \"test_task_completion_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"test_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create user profile dialog for testing.\",\n          \"name\": \"dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test dialog initialization sets up UI correctly.\",\n          \"name\": \"test_dialog_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test editing profile data updates form fields.\",\n          \"name\": \"test_profile_data_editing_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test dynamic list fields (health conditions, medications, etc.).\",\n          \"name\": \"test_dynamic_list_fields_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test validation errors are handled gracefully.\",\n          \"name\": \"test_validation_error_handling_real_behavior\"\n        }\n      ]\n    },\n    \"tests/ui/test_dialogs.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Test that all dialog modules can be imported without errors\",\n          \"name\": \"test_dialog_imports\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Test that all widget modules can be imported without errors\",\n          \"name\": \"test_widget_imports\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Test that all required UI files exist\",\n          \"name\": \"test_ui_files_exist\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Test that all generated Python UI files exist\",\n          \"name\": \"test_generated_files_exist\"\n        },\n        {\n          \"args\": [\n            \"test_data_dir\",\n            \"mock_config\",\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Test that we can access user data for testing - READ ONLY\",\n          \"name\": \"test_user_data_access\"\n        },\n        {\n          \"args\": [\n            \"monkeypatch\"\n          ],\n          \"docstring\": \"Test that dialogs can be instantiated (without showing them)\",\n          \"name\": \"test_dialog_instantiation\"\n        },\n        {\n          \"args\": [\n            \"data\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"mock_save\"\n        }\n      ]\n    },\n    \"tests/ui/test_ui_widgets_coverage_expansion.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Comprehensive test coverage expansion for UI widgets.\",\n          \"methods\": [\n            \"app\",\n            \"temp_dir\",\n            \"user_id\",\n            \"mock_user_data_dir\",\n            \"mock_message_boxes\",\n            \"cleanup_widgets\",\n            \"test_tag_widget_management_mode_initialization_real_behavior\",\n            \"test_tag_widget_selection_mode_initialization_real_behavior\",\n            \"test_tag_widget_account_creation_mode_real_behavior\",\n            \"test_tag_widget_add_tag_management_mode_real_behavior\",\n            \"test_tag_widget_add_tag_account_creation_mode_real_behavior\",\n            \"test_tag_widget_add_duplicate_tag_real_behavior\",\n            \"test_tag_widget_add_empty_tag_real_behavior\",\n            \"test_tag_widget_edit_tag_real_behavior\",\n            \"test_tag_widget_edit_tag_account_creation_mode_real_behavior\",\n            \"test_tag_widget_delete_tag_real_behavior\",\n            \"test_tag_widget_delete_tag_account_creation_mode_real_behavior\",\n            \"test_tag_widget_undo_delete_real_behavior\",\n            \"test_tag_widget_selection_mode_checkbox_behavior_real_behavior\",\n            \"test_tag_widget_selection_changed_signal_real_behavior\",\n            \"test_tag_widget_get_selected_tags_real_behavior\",\n            \"test_tag_widget_set_selected_tags_real_behavior\",\n            \"test_tag_widget_refresh_tags_real_behavior\",\n            \"test_period_row_widget_initialization_real_behavior\",\n            \"test_period_row_widget_default_initialization_real_behavior\",\n            \"test_period_row_widget_all_period_initialization_real_behavior\",\n            \"test_period_row_widget_load_period_data_real_behavior\",\n            \"test_period_row_widget_get_period_data_real_behavior\",\n            \"test_period_row_widget_delete_requested_signal_real_behavior\",\n            \"test_period_row_widget_read_only_mode_real_behavior\",\n            \"test_period_row_widget_validation_real_behavior\",\n            \"test_period_row_widget_day_selection_real_behavior\",\n            \"test_dynamic_list_container_initialization_real_behavior\",\n            \"test_dynamic_list_container_add_blank_row_real_behavior\",\n            \"test_dynamic_list_container_row_edited_real_behavior\",\n            \"test_dynamic_list_container_row_deleted_real_behavior\",\n            \"test_dynamic_list_container_get_values_real_behavior\",\n            \"test_dynamic_list_container_set_values_real_behavior\",\n            \"test_dynamic_list_container_duplicate_detection_real_behavior\",\n            \"test_dynamic_list_container_signal_emission_real_behavior\",\n            \"test_tag_widget_error_handling_real_behavior\",\n            \"test_period_row_widget_error_handling_real_behavior\",\n            \"test_dynamic_list_container_error_handling_real_behavior\",\n            \"test_widget_integration_real_behavior\",\n            \"test_widget_lifecycle_real_behavior\",\n            \"test_widget_performance_real_behavior\",\n            \"test_widget_memory_usage_real_behavior\"\n          ],\n          \"name\": \"TestUIWidgetsCoverageExpansion\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create QApplication instance for testing.\",\n          \"name\": \"app\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_path_factory\"\n          ],\n          \"docstring\": \"Provide a per-test directory under tests/data/tmp.\",\n          \"name\": \"temp_dir\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create a test user ID.\",\n          \"name\": \"user_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_dir\"\n          ],\n          \"docstring\": \"Mock user data directory.\",\n          \"name\": \"mock_user_data_dir\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Mock all QMessageBox dialogs to prevent real UI dialogs during testing.\",\n          \"name\": \"mock_message_boxes\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Ensure widgets are properly cleaned up after each test.\",\n          \"name\": \"cleanup_widgets\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test TagWidget initialization in management mode.\",\n          \"name\": \"test_tag_widget_management_mode_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test TagWidget initialization in selection mode.\",\n          \"name\": \"test_tag_widget_selection_mode_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\"\n          ],\n          \"docstring\": \"Test TagWidget in account creation mode (no user_id).\",\n          \"name\": \"test_tag_widget_account_creation_mode_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test adding a tag in management mode.\",\n          \"name\": \"test_tag_widget_add_tag_management_mode_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\"\n          ],\n          \"docstring\": \"Test adding a tag in account creation mode.\",\n          \"name\": \"test_tag_widget_add_tag_account_creation_mode_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test adding a duplicate tag.\",\n          \"name\": \"test_tag_widget_add_duplicate_tag_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test adding an empty tag.\",\n          \"name\": \"test_tag_widget_add_empty_tag_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test editing a tag.\",\n          \"name\": \"test_tag_widget_edit_tag_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\"\n          ],\n          \"docstring\": \"Test editing a tag in account creation mode.\",\n          \"name\": \"test_tag_widget_edit_tag_account_creation_mode_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test deleting a tag.\",\n          \"name\": \"test_tag_widget_delete_tag_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\"\n          ],\n          \"docstring\": \"Test deleting a tag in account creation mode.\",\n          \"name\": \"test_tag_widget_delete_tag_account_creation_mode_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\"\n          ],\n          \"docstring\": \"Test undoing tag deletion in account creation mode.\",\n          \"name\": \"test_tag_widget_undo_delete_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test checkbox behavior in selection mode.\",\n          \"name\": \"test_tag_widget_selection_mode_checkbox_behavior_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test that selection changes emit signals.\",\n          \"name\": \"test_tag_widget_selection_changed_signal_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test getting selected tags.\",\n          \"name\": \"test_tag_widget_get_selected_tags_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test setting selected tags.\",\n          \"name\": \"test_tag_widget_set_selected_tags_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test refreshing tags.\",\n          \"name\": \"test_tag_widget_refresh_tags_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test PeriodRowWidget initialization.\",\n          \"name\": \"test_period_row_widget_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test PeriodRowWidget initialization with default data.\",\n          \"name\": \"test_period_row_widget_default_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test PeriodRowWidget initialization for ALL period.\",\n          \"name\": \"test_period_row_widget_all_period_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test loading period data into UI.\",\n          \"name\": \"test_period_row_widget_load_period_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test getting period data from UI.\",\n          \"name\": \"test_period_row_widget_get_period_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test that delete button emits signal.\",\n          \"name\": \"test_period_row_widget_delete_requested_signal_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test read-only mode functionality.\",\n          \"name\": \"test_period_row_widget_read_only_mode_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test period validation.\",\n          \"name\": \"test_period_row_widget_validation_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test day selection functionality.\",\n          \"name\": \"test_period_row_widget_day_selection_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test DynamicListContainer initialization.\",\n          \"name\": \"test_dynamic_list_container_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test adding a blank row.\",\n          \"name\": \"test_dynamic_list_container_add_blank_row_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test row editing behavior.\",\n          \"name\": \"test_dynamic_list_container_row_edited_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test row deletion behavior.\",\n          \"name\": \"test_dynamic_list_container_row_deleted_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test getting values from container.\",\n          \"name\": \"test_dynamic_list_container_get_values_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test setting values in container.\",\n          \"name\": \"test_dynamic_list_container_set_values_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test duplicate value detection.\",\n          \"name\": \"test_dynamic_list_container_duplicate_detection_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test that value changes emit signals.\",\n          \"name\": \"test_dynamic_list_container_signal_emission_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test error handling in TagWidget.\",\n          \"name\": \"test_tag_widget_error_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test error handling in PeriodRowWidget.\",\n          \"name\": \"test_period_row_widget_error_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\"\n          ],\n          \"docstring\": \"Test error handling in DynamicListContainer.\",\n          \"name\": \"test_dynamic_list_container_error_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test integration between widgets.\",\n          \"name\": \"test_widget_integration_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test widget lifecycle management.\",\n          \"name\": \"test_widget_lifecycle_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test widget performance with large datasets.\",\n          \"name\": \"test_widget_performance_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"app\",\n            \"mock_user_data_dir\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Test widget memory usage.\",\n          \"name\": \"test_widget_memory_usage_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"widget_instance\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"on_delete_requested\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"on_tags_changed\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"on_values_changed\"\n        }\n      ]\n    },\n    \"tests/ui/test_user_profile_dialog_coverage_expansion.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Comprehensive test suite for UserProfileDialog coverage expansion.\",\n          \"methods\": [\n            \"test_user_data\",\n            \"dialog\",\n            \"empty_dialog\",\n            \"test_dialog_initialization_with_existing_data_real_behavior\",\n            \"test_dialog_initialization_without_data_real_behavior\",\n            \"test_center_dialog_real_behavior\",\n            \"test_key_press_event_escape_real_behavior\",\n            \"test_key_press_event_enter_real_behavior\",\n            \"test_create_custom_field_list_real_behavior\",\n            \"test_add_custom_field_real_behavior\",\n            \"test_remove_custom_field_real_behavior\",\n            \"test_create_health_section_real_behavior\",\n            \"test_create_loved_ones_section_real_behavior\",\n            \"test_add_loved_one_widget_real_behavior\",\n            \"test_add_loved_one_widget_without_data_real_behavior\",\n            \"test_remove_loved_one_widget_real_behavior\",\n            \"test_save_personalization_real_behavior\",\n            \"test_save_personalization_without_callback_real_behavior\",\n            \"test_save_personalization_validation_error_real_behavior\",\n            \"test_cancel_real_behavior\",\n            \"test_close_event_real_behavior\",\n            \"test_close_event_declined_real_behavior\",\n            \"test_title_case_conversion_real_behavior\",\n            \"test_multi_column_layout_real_behavior\",\n            \"test_custom_field_interaction_real_behavior\",\n            \"test_loved_one_widget_interaction_real_behavior\",\n            \"test_dialog_with_parent_real_behavior\",\n            \"test_dialog_window_flags_real_behavior\",\n            \"test_dialog_modal_behavior_real_behavior\",\n            \"test_dialog_size_constraints_real_behavior\",\n            \"test_profile_widget_integration_real_behavior\",\n            \"test_error_handling_real_behavior\",\n            \"test_dialog_cleanup_real_behavior\"\n          ],\n          \"name\": \"TestUserProfileDialogCoverageExpansion\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Create QApplication instance for UI testing.\",\n          \"name\": \"qapp\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create test user with personalization data.\",\n          \"name\": \"test_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create user profile dialog for testing.\",\n          \"name\": \"dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Create user profile dialog with no existing data.\",\n          \"name\": \"empty_dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test dialog initialization with existing personalization data.\",\n          \"name\": \"test_dialog_initialization_with_existing_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"empty_dialog\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test dialog initialization without existing data.\",\n          \"name\": \"test_dialog_initialization_without_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test dialog centering functionality.\",\n          \"name\": \"test_center_dialog_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test escape key handling.\",\n          \"name\": \"test_key_press_event_escape_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test enter key handling.\",\n          \"name\": \"test_key_press_event_enter_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test custom field list creation.\",\n          \"name\": \"test_create_custom_field_list_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test adding custom fields.\",\n          \"name\": \"test_add_custom_field_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test removing custom fields.\",\n          \"name\": \"test_remove_custom_field_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test health section creation.\",\n          \"name\": \"test_create_health_section_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test loved ones section creation.\",\n          \"name\": \"test_create_loved_ones_section_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test adding loved one widgets.\",\n          \"name\": \"test_add_loved_one_widget_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test adding loved one widget without data.\",\n          \"name\": \"test_add_loved_one_widget_without_data_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test removing loved one widgets.\",\n          \"name\": \"test_remove_loved_one_widget_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test saving personalization data.\",\n          \"name\": \"test_save_personalization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test saving personalization without save callback.\",\n          \"name\": \"test_save_personalization_without_callback_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test saving personalization with validation errors.\",\n          \"name\": \"test_save_personalization_validation_error_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test canceling the dialog.\",\n          \"name\": \"test_cancel_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test close event handling.\",\n          \"name\": \"test_close_event_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test close event handling when user declines.\",\n          \"name\": \"test_close_event_declined_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test title case conversion in custom field list creation.\",\n          \"name\": \"test_title_case_conversion_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test multi-column layout for large predefined value sets.\",\n          \"name\": \"test_multi_column_layout_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test custom field interaction (add, edit, remove).\",\n          \"name\": \"test_custom_field_interaction_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test loved one widget interaction (add, edit, remove).\",\n          \"name\": \"test_loved_one_widget_interaction_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test dialog creation with parent window.\",\n          \"name\": \"test_dialog_with_parent_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test dialog window flags are set correctly.\",\n          \"name\": \"test_dialog_window_flags_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test dialog modal behavior.\",\n          \"name\": \"test_dialog_modal_behavior_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test dialog size constraints.\",\n          \"name\": \"test_dialog_size_constraints_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test integration with UserProfileSettingsWidget.\",\n          \"name\": \"test_profile_widget_integration_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test error handling in dialog operations.\",\n          \"name\": \"test_error_handling_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"dialog\",\n            \"test_user_data\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test dialog cleanup on destruction.\",\n          \"name\": \"test_dialog_cleanup_real_behavior\"\n        }\n      ]\n    },\n    \"tests/ui/test_widget_behavior.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test TagWidget with real behavior verification.\",\n          \"methods\": [\n            \"widget\",\n            \"test_widget_initialization_real_behavior\",\n            \"test_tag_management_real_behavior\",\n            \"test_tag_selection_mode_real_behavior\"\n          ],\n          \"name\": \"TestTagWidgetBehavior\"\n        },\n        {\n          \"docstring\": \"Test TaskSettingsWidget with real behavior verification.\",\n          \"methods\": [\n            \"widget\",\n            \"test_widget_initialization_real_behavior\",\n            \"test_task_enablement_real_behavior\"\n          ],\n          \"name\": \"TestTaskSettingsWidgetBehavior\"\n        },\n        {\n          \"docstring\": \"Test CategorySelectionWidget with real behavior verification.\",\n          \"methods\": [\n            \"widget\",\n            \"test_widget_initialization_real_behavior\"\n          ],\n          \"name\": \"TestCategorySelectionWidgetBehavior\"\n        },\n        {\n          \"docstring\": \"Test ChannelSelectionWidget with real behavior verification.\",\n          \"methods\": [\n            \"widget\",\n            \"test_widget_initialization_real_behavior\"\n          ],\n          \"name\": \"TestChannelSelectionWidgetBehavior\"\n        },\n        {\n          \"docstring\": \"Test CheckinSettingsWidget with real behavior verification.\",\n          \"methods\": [\n            \"widget\",\n            \"test_widget_initialization_real_behavior\",\n            \"test_checkin_enablement_real_behavior\"\n          ],\n          \"name\": \"TestCheckinSettingsWidgetBehavior\"\n        },\n        {\n          \"docstring\": \"Test UserProfileSettingsWidget with real behavior verification.\",\n          \"methods\": [\n            \"widget\",\n            \"test_widget_initialization_real_behavior\"\n          ],\n          \"name\": \"TestUserProfileSettingsWidgetBehavior\"\n        },\n        {\n          \"docstring\": \"Test PeriodRowWidget with real behavior verification.\",\n          \"methods\": [\n            \"widget\",\n            \"test_widget_initialization_real_behavior\"\n          ],\n          \"name\": \"TestPeriodRowWidgetBehavior\"\n        },\n        {\n          \"docstring\": \"Test DynamicListField with real behavior verification.\",\n          \"methods\": [\n            \"widget\",\n            \"test_widget_initialization_real_behavior\",\n            \"test_item_management_real_behavior\"\n          ],\n          \"name\": \"TestDynamicListFieldBehavior\"\n        },\n        {\n          \"docstring\": \"Test DynamicListContainer with real behavior verification.\",\n          \"methods\": [\n            \"widget\",\n            \"test_widget_initialization_real_behavior\"\n          ],\n          \"name\": \"TestDynamicListContainerBehavior\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Create QApplication instance for UI testing.\",\n          \"name\": \"qapp\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Create TagWidget for testing.\",\n          \"name\": \"widget\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"widget\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\",\n          \"name\": \"test_widget_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"widget\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test adding and removing tags works correctly.\",\n          \"name\": \"test_tag_management_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test widget works in selection mode.\",\n          \"name\": \"test_tag_selection_mode_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Create TaskSettingsWidget for testing.\",\n          \"name\": \"widget\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"widget\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\",\n          \"name\": \"test_widget_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"widget\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test task period management works correctly.\",\n          \"name\": \"test_task_enablement_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Create CategorySelectionWidget for testing.\",\n          \"name\": \"widget\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"widget\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\",\n          \"name\": \"test_widget_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Create ChannelSelectionWidget for testing.\",\n          \"name\": \"widget\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"widget\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\",\n          \"name\": \"test_widget_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Create CheckinSettingsWidget for testing.\",\n          \"name\": \"widget\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"widget\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\",\n          \"name\": \"test_widget_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"widget\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test check-in period management works correctly.\",\n          \"name\": \"test_checkin_enablement_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Create UserProfileSettingsWidget for testing.\",\n          \"name\": \"widget\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"widget\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\",\n          \"name\": \"test_widget_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\"\n          ],\n          \"docstring\": \"Create PeriodRowWidget for testing.\",\n          \"name\": \"widget\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"widget\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\",\n          \"name\": \"test_widget_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\"\n          ],\n          \"docstring\": \"Create DynamicListField for testing.\",\n          \"name\": \"widget\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"widget\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\",\n          \"name\": \"test_widget_initialization_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"widget\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test dynamic list field functionality.\",\n          \"name\": \"test_item_management_real_behavior\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\"\n          ],\n          \"docstring\": \"Create DynamicListContainer for testing.\",\n          \"name\": \"widget\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"widget\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\",\n          \"name\": \"test_widget_initialization_real_behavior\"\n        }\n      ]\n    },\n    \"tests/ui/test_widget_behavior_simple.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test TagWidget basic functionality without complex UI setup.\",\n          \"methods\": [\n            \"test_tag_widget_import_and_creation\",\n            \"test_tag_widget_selection_mode\"\n          ],\n          \"name\": \"TestTagWidgetBasicBehavior\"\n        },\n        {\n          \"docstring\": \"Test TaskSettingsWidget basic functionality.\",\n          \"methods\": [\n            \"test_task_settings_widget_import_and_creation\"\n          ],\n          \"name\": \"TestTaskSettingsWidgetBasicBehavior\"\n        },\n        {\n          \"docstring\": \"Test CategorySelectionWidget basic functionality.\",\n          \"methods\": [\n            \"test_category_selection_widget_import_and_creation\"\n          ],\n          \"name\": \"TestCategorySelectionWidgetBasicBehavior\"\n        },\n        {\n          \"docstring\": \"Test ChannelSelectionWidget basic functionality.\",\n          \"methods\": [\n            \"test_channel_selection_widget_import_and_creation\"\n          ],\n          \"name\": \"TestChannelSelectionWidgetBasicBehavior\"\n        },\n        {\n          \"docstring\": \"Test CheckinSettingsWidget basic functionality.\",\n          \"methods\": [\n            \"test_checkin_settings_widget_import_and_creation\"\n          ],\n          \"name\": \"TestCheckinSettingsWidgetBasicBehavior\"\n        },\n        {\n          \"docstring\": \"Test UserProfileSettingsWidget basic functionality.\",\n          \"methods\": [\n            \"test_user_profile_settings_widget_import_and_creation\"\n          ],\n          \"name\": \"TestUserProfileSettingsWidgetBasicBehavior\"\n        },\n        {\n          \"docstring\": \"Test DynamicListField basic functionality.\",\n          \"methods\": [\n            \"test_dynamic_list_field_import_and_creation\"\n          ],\n          \"name\": \"TestDynamicListFieldBasicBehavior\"\n        },\n        {\n          \"docstring\": \"Test DynamicListContainer basic functionality.\",\n          \"methods\": [\n            \"test_dynamic_list_container_import_and_creation\"\n          ],\n          \"name\": \"TestDynamicListContainerBasicBehavior\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Create QApplication instance for UI testing.\",\n          \"name\": \"qapp\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test TagWidget can be imported and created.\",\n          \"name\": \"test_tag_widget_import_and_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test TagWidget works in selection mode.\",\n          \"name\": \"test_tag_widget_selection_mode\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test TaskSettingsWidget can be imported and created.\",\n          \"name\": \"test_task_settings_widget_import_and_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test CategorySelectionWidget can be imported and created.\",\n          \"name\": \"test_category_selection_widget_import_and_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test ChannelSelectionWidget can be imported and created.\",\n          \"name\": \"test_channel_selection_widget_import_and_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test CheckinSettingsWidget can be imported and created.\",\n          \"name\": \"test_checkin_settings_widget_import_and_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test UserProfileSettingsWidget can be imported and created.\",\n          \"name\": \"test_user_profile_settings_widget_import_and_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test DynamicListField can be imported and created.\",\n          \"name\": \"test_dynamic_list_field_import_and_creation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"qapp\"\n          ],\n          \"docstring\": \"REAL BEHAVIOR TEST: Test DynamicListContainer can be imported and created.\",\n          \"name\": \"test_dynamic_list_container_import_and_creation\"\n        }\n      ]\n    },\n    \"tests/unit/test_cleanup.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Manages test data cleanup and isolation.\",\n          \"methods\": [\n            \"__init__\",\n            \"cleanup_test_users\",\n            \"_find_test_users\",\n            \"_cleanup_single_user\",\n            \"_create_user_backup\",\n            \"reset_test_environment\",\n            \"_cleanup_old_test_logs\",\n            \"_cleanup_temp_files\",\n            \"validate_test_data_integrity\",\n            \"_validate_user_data\",\n            \"_find_orphaned_files\"\n          ],\n          \"name\": \"CleanupManager\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Command-line interface for test cleanup.\",\n          \"name\": \"main\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Initialize the cleanup manager.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_ids\"\n          ],\n          \"docstring\": \"Clean up test user data.\\n        \\n        Args:\\n            user_ids: List of user IDs to clean up. If None, cleans up all test users.\\n            \\n        Returns:\\n            bool: True if cleanup was successful, False otherwise.\",\n          \"name\": \"cleanup_test_users\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Find all test users in the user directory.\",\n          \"name\": \"_find_test_users\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Clean up a single test user.\",\n          \"name\": \"_cleanup_single_user\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"user_path\"\n          ],\n          \"docstring\": \"Create a backup of user data before cleanup.\",\n          \"name\": \"_create_user_backup\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Reset the entire test environment.\",\n          \"name\": \"reset_test_environment\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"keep_days\"\n          ],\n          \"docstring\": \"Clean up old test log files.\",\n          \"name\": \"_cleanup_old_test_logs\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Clean up temporary test files.\",\n          \"name\": \"_cleanup_temp_files\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Validate the integrity of test data.\",\n          \"name\": \"validate_test_data_integrity\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"user_path\"\n          ],\n          \"docstring\": \"Validate a single user's data integrity.\",\n          \"name\": \"_validate_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Find orphaned files in the user directory.\",\n          \"name\": \"_find_orphaned_files\"\n        }\n      ]\n    },\n    \"tests/unit/test_config.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test configuration validation functions.\",\n          \"methods\": [\n            \"test_validate_core_paths_success\",\n            \"test_validate_core_paths_missing_directory\",\n            \"test_validate_ai_configuration_success\",\n            \"test_validate_ai_configuration_missing_url\",\n            \"test_validate_communication_channels_success\",\n            \"test_validate_communication_channels_no_tokens\",\n            \"test_validate_logging_configuration_success\",\n            \"test_validate_scheduler_configuration_success\",\n            \"test_validate_file_organization_settings_success\",\n            \"test_validate_environment_variables_success\",\n            \"test_validate_all_configuration_success\",\n            \"test_validate_and_raise_if_invalid_success\",\n            \"test_validate_and_raise_if_invalid_failure\"\n          ],\n          \"name\": \"TestConfigValidation\"\n        },\n        {\n          \"docstring\": \"Test configuration constants.\",\n          \"methods\": [\n            \"test_base_data_dir_default\",\n            \"test_user_info_dir_path_default\",\n            \"test_default_messages_dir_path_default\",\n            \"test_environment_override\"\n          ],\n          \"name\": \"TestConfigConstants\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"test_path_factory\"\n          ],\n          \"docstring\": \"Test successful core path validation.\",\n          \"name\": \"test_validate_core_paths_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test core path validation with missing directory.\",\n          \"name\": \"test_validate_core_paths_missing_directory\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test successful AI configuration validation.\",\n          \"name\": \"test_validate_ai_configuration_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test AI configuration validation with missing URL.\",\n          \"name\": \"test_validate_ai_configuration_missing_url\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test successful communication channels validation.\",\n          \"name\": \"test_validate_communication_channels_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test communication channels validation with no tokens.\",\n          \"name\": \"test_validate_communication_channels_no_tokens\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test successful logging configuration validation.\",\n          \"name\": \"test_validate_logging_configuration_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test successful scheduler configuration validation.\",\n          \"name\": \"test_validate_scheduler_configuration_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test successful file organization settings validation.\",\n          \"name\": \"test_validate_file_organization_settings_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test successful environment variables validation.\",\n          \"name\": \"test_validate_environment_variables_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"test_path_factory\"\n          ],\n          \"docstring\": \"Test comprehensive configuration validation.\",\n          \"name\": \"test_validate_all_configuration_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"test_path_factory\"\n          ],\n          \"docstring\": \"Test successful validation with no exceptions.\",\n          \"name\": \"test_validate_and_raise_if_invalid_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test validation failure raises ConfigurationError.\",\n          \"name\": \"test_validate_and_raise_if_invalid_failure\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test BASE_DATA_DIR default value.\",\n          \"name\": \"test_base_data_dir_default\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test USER_INFO_DIR_PATH default value.\",\n          \"name\": \"test_user_info_dir_path_default\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test DEFAULT_MESSAGES_DIR_PATH default value.\",\n          \"name\": \"test_default_messages_dir_path_default\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test environment variable override.\",\n          \"name\": \"test_environment_override\"\n        }\n      ]\n    },\n    \"tests/unit/test_error_handling.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test custom exception classes.\",\n          \"methods\": [\n            \"test_mhm_error_basic\",\n            \"test_mhm_error_with_details\",\n            \"test_data_error\",\n            \"test_file_operation_error\",\n            \"test_config_error\",\n            \"test_validation_error\"\n          ],\n          \"name\": \"TestCustomExceptions\"\n        },\n        {\n          \"docstring\": \"Test the handle_errors decorator.\",\n          \"methods\": [\n            \"test_error_handler_success\",\n            \"test_error_handler_exception\",\n            \"test_error_handler_custom_return\",\n            \"test_error_handler_logs_error\"\n          ],\n          \"name\": \"TestErrorHandlerDecorator\"\n        },\n        {\n          \"docstring\": \"Test the handle_errors decorator.\",\n          \"methods\": [\n            \"test_handle_errors_success\",\n            \"test_handle_errors_exception\",\n            \"test_handle_errors_custom_return\",\n            \"test_handle_errors_specific_exception\",\n            \"test_handle_errors_logs_error\"\n          ],\n          \"name\": \"TestHandleErrorsDecorator\"\n        },\n        {\n          \"docstring\": \"Test specific error handling functions.\",\n          \"methods\": [\n            \"test_handle_file_error\",\n            \"test_handle_configuration_error\"\n          ],\n          \"name\": \"TestErrorHandlingFunctions\"\n        },\n        {\n          \"docstring\": \"Test error handling integration scenarios.\",\n          \"methods\": [\n            \"test_error_handling_in_function_chain\",\n            \"test_error_handling_with_recovery\",\n            \"test_error_handling_different_exception_types\"\n          ],\n          \"name\": \"TestErrorHandlingIntegration\"\n        },\n        {\n          \"docstring\": \"Test error handling edge cases.\",\n          \"methods\": [\n            \"test_error_handler_with_args_kwargs\",\n            \"test_handle_errors_with_args_kwargs\",\n            \"test_error_handler_nested_exceptions\",\n            \"test_handle_errors_with_logging_disabled\"\n          ],\n          \"name\": \"TestErrorHandlingEdgeCases\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test basic MHMError creation.\",\n          \"name\": \"test_mhm_error_basic\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test MHMError with custom details.\",\n          \"name\": \"test_mhm_error_with_details\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test DataError exception.\",\n          \"name\": \"test_data_error\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test FileOperationError exception.\",\n          \"name\": \"test_file_operation_error\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test ConfigError exception.\",\n          \"name\": \"test_config_error\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test ValidationError exception.\",\n          \"name\": \"test_validation_error\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test error_handler with successful function.\",\n          \"name\": \"test_error_handler_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test error_handler with exception.\",\n          \"name\": \"test_error_handler_exception\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test error_handler with custom return value.\",\n          \"name\": \"test_error_handler_custom_return\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test error_handler logs errors.\",\n          \"name\": \"test_error_handler_logs_error\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test handle_errors with successful function.\",\n          \"name\": \"test_handle_errors_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test handle_errors with exception.\",\n          \"name\": \"test_handle_errors_exception\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test handle_errors with custom return value.\",\n          \"name\": \"test_handle_errors_custom_return\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test handle_errors with specific exception handling.\",\n          \"name\": \"test_handle_errors_specific_exception\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test handle_errors logs errors.\",\n          \"name\": \"test_handle_errors_logs_error\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test handle_file_error function.\",\n          \"name\": \"test_handle_file_error\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test handle_configuration_error function.\",\n          \"name\": \"test_handle_configuration_error\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test error handling in a chain of functions.\",\n          \"name\": \"test_error_handling_in_function_chain\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_path_factory\"\n          ],\n          \"docstring\": \"Test error handling with recovery mechanisms and real side effects.\",\n          \"name\": \"test_error_handling_with_recovery\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test error handling with different exception types and side effects.\",\n          \"name\": \"test_error_handling_different_exception_types\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test error_handler with function arguments.\",\n          \"name\": \"test_error_handler_with_args_kwargs\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test handle_errors with function arguments.\",\n          \"name\": \"test_handle_errors_with_args_kwargs\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test error_handler with nested exceptions.\",\n          \"name\": \"test_error_handler_nested_exceptions\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test handle_errors when logging is disabled.\",\n          \"name\": \"test_handle_errors_with_logging_disabled\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Test Function.\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [\n            \"exception_type\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [\n            \"arg1\",\n            \"arg2\",\n            \"kwarg1\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [\n            \"arg1\",\n            \"arg2\",\n            \"kwarg1\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"outer_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"inner_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"outer_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"inner_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"corrupt_data_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"recover_data_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"backup_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"cleanup_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"state_validation_function\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_function\"\n        }\n      ]\n    },\n    \"tests/unit/test_file_operations.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test file operations functions.\",\n          \"methods\": [\n            \"test_load_json_data_success\",\n            \"test_load_json_data_file_not_found\",\n            \"test_load_json_data_corrupted_json\",\n            \"test_load_json_data_empty_file\",\n            \"test_save_json_data_success\",\n            \"test_save_json_data_create_directory\",\n            \"test_save_json_data_permission_error\",\n            \"test_determine_file_path_user_file\",\n            \"test_determine_file_path_default_messages\",\n            \"test_verify_file_access_success\",\n            \"test_verify_file_access_missing_file\",\n            \"test_verify_file_access_permission_error\",\n            \"test_get_user_file_path_success\",\n            \"test_ensure_user_directory_success\",\n            \"test_ensure_user_directory_already_exists\"\n          ],\n          \"name\": \"TestFileOperations\"\n        },\n        {\n          \"docstring\": \"Test edge cases and error conditions.\",\n          \"methods\": [\n            \"test_load_json_data_unicode_content\",\n            \"test_save_json_data_complex_objects\",\n            \"test_determine_file_path_invalid_user_id\",\n            \"test_determine_file_path_invalid_file_type\",\n            \"test_file_operations_lifecycle\"\n          ],\n          \"name\": \"TestFileOperationsEdgeCases\"\n        },\n        {\n          \"docstring\": \"Test file operations performance and large data handling.\",\n          \"methods\": [\n            \"test_save_large_json_data\",\n            \"test_load_large_json_data\"\n          ],\n          \"name\": \"TestFileOperationsPerformance\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"temp_file\"\n          ],\n          \"docstring\": \"Test loading JSON data successfully.\",\n          \"name\": \"test_load_json_data_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test loading JSON data from non-existent file.\",\n          \"name\": \"test_load_json_data_file_not_found\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_file\"\n          ],\n          \"docstring\": \"Test loading corrupted JSON data.\",\n          \"name\": \"test_load_json_data_corrupted_json\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_file\"\n          ],\n          \"docstring\": \"Test loading from empty file.\",\n          \"name\": \"test_load_json_data_empty_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_file\"\n          ],\n          \"docstring\": \"Test saving JSON data successfully.\",\n          \"name\": \"test_save_json_data_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test saving JSON data with directory creation.\",\n          \"name\": \"test_save_json_data_create_directory\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test saving JSON data with permission error.\",\n          \"name\": \"test_save_json_data_permission_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test determining file path for user file.\",\n          \"name\": \"test_determine_file_path_user_file\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test determining file path for default messages.\",\n          \"name\": \"test_determine_file_path_default_messages\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_file\"\n          ],\n          \"docstring\": \"Test file access verification for accessible file.\",\n          \"name\": \"test_verify_file_access_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test file access verification for missing file.\",\n          \"name\": \"test_verify_file_access_missing_file\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test file access verification with permission error.\",\n          \"name\": \"test_verify_file_access_permission_error\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test getting user file path successfully.\",\n          \"name\": \"test_get_user_file_path_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test ensuring user directory exists.\",\n          \"name\": \"test_ensure_user_directory_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test ensuring user directory that already exists.\",\n          \"name\": \"test_ensure_user_directory_already_exists\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_file\"\n          ],\n          \"docstring\": \"Test loading JSON data with unicode content.\",\n          \"name\": \"test_load_json_data_unicode_content\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_file\"\n          ],\n          \"docstring\": \"Test saving JSON data with complex objects.\",\n          \"name\": \"test_save_json_data_complex_objects\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test determining file path with invalid user ID.\",\n          \"name\": \"test_determine_file_path_invalid_user_id\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test determining file path with invalid file type.\",\n          \"name\": \"test_determine_file_path_invalid_file_type\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test complete file operations lifecycle using centralized utilities.\",\n          \"name\": \"test_file_operations_lifecycle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_file\"\n          ],\n          \"docstring\": \"Test saving large JSON data with performance verification.\",\n          \"name\": \"test_save_large_json_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"temp_file\"\n          ],\n          \"docstring\": \"Test loading large JSON data.\",\n          \"name\": \"test_load_large_json_data\"\n        }\n      ]\n    },\n    \"tests/unit/test_logging_components.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [\n            \"tmp_path\",\n            \"monkeypatch\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"test_component_logger_propagate_and_handlers\"\n        },\n        {\n          \"args\": [\n            \"tmp_path\",\n            \"monkeypatch\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"test_errors_routed_to_tests_logs_in_verbose_mode\"\n        }\n      ]\n    },\n    \"tests/unit/test_no_prints_policy.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Policy: tests should not use print(); prefer logging or assertions.\\n\\n    Allowed: files containing '@pytest.mark.debug' marker.\",\n          \"name\": \"test_no_print_calls_in_tests_except_debug_marked\"\n        }\n      ]\n    },\n    \"tests/unit/test_recurring_tasks.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test recurring tasks functionality.\",\n          \"methods\": [\n            \"temp_user_dir\",\n            \"test_create_recurring_task\",\n            \"test_complete_recurring_task_creates_next_instance\",\n            \"test_calculate_next_due_date_daily\",\n            \"test_calculate_next_due_date_weekly\",\n            \"test_calculate_next_due_date_monthly\",\n            \"test_calculate_next_due_date_yearly\",\n            \"test_calculate_next_due_date_invalid_pattern\",\n            \"test_non_recurring_task_completion\"\n          ],\n          \"name\": \"TestRecurringTasks\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_path_factory\"\n          ],\n          \"docstring\": \"Provide a per-test user directory under tests/data/tmp.\",\n          \"name\": \"temp_user_dir\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_get_user_data_dir\",\n            \"temp_user_dir\"\n          ],\n          \"docstring\": \"Test creating a recurring task.\",\n          \"name\": \"test_create_recurring_task\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_get_user_data_dir\",\n            \"temp_user_dir\"\n          ],\n          \"docstring\": \"Test that completing a recurring task creates the next instance.\",\n          \"name\": \"test_complete_recurring_task_creates_next_instance\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test calculating next due date for daily recurrence.\",\n          \"name\": \"test_calculate_next_due_date_daily\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test calculating next due date for weekly recurrence.\",\n          \"name\": \"test_calculate_next_due_date_weekly\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test calculating next due date for monthly recurrence.\",\n          \"name\": \"test_calculate_next_due_date_monthly\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test calculating next due date for yearly recurrence.\",\n          \"name\": \"test_calculate_next_due_date_yearly\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test calculating next due date with invalid pattern.\",\n          \"name\": \"test_calculate_next_due_date_invalid_pattern\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_get_user_data_dir\",\n            \"temp_user_dir\"\n          ],\n          \"docstring\": \"Test that completing a non-recurring task doesn't create a new instance.\",\n          \"name\": \"test_non_recurring_task_completion\"\n        }\n      ]\n    },\n    \"tests/unit/test_schedule_management.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Tests for time validation and conversion helpers.\",\n          \"methods\": [\n            \"test_validate_and_format_time\",\n            \"test_time_conversion_helpers\"\n          ],\n          \"name\": \"TestPeriodValidation\"\n        },\n        {\n          \"docstring\": \"Tests for schedule period lifecycle operations.\",\n          \"methods\": [\n            \"test_schedule_period_lifecycle\"\n          ],\n          \"name\": \"TestScheduleManagement\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Ensure various time formats are normalized to HH:MM.\",\n          \"name\": \"test_validate_and_format_time\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Verify 12h/24h conversion helpers.\",\n          \"name\": \"test_time_conversion_helpers\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Add, edit, deactivate, and delete a schedule period.\",\n          \"name\": \"test_schedule_period_lifecycle\"\n        }\n      ]\n    },\n    \"tests/unit/test_user_data_loader_idempotency.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_loader_registry_identity_and_idempotency\"\n        }\n      ]\n    },\n    \"tests/unit/test_user_data_loader_order_insensitivity.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [\n            \"first_module\",\n            \"second_module\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_reload_in_order\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"test_loader_registry_shared_and_complete_regardless_of_import_order\"\n        }\n      ]\n    },\n    \"tests/unit/test_user_management.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test user management functions.\",\n          \"methods\": [\n            \"test_get_all_user_ids_empty\",\n            \"test_get_all_user_ids_with_users\",\n            \"test_get_user_preferences_success\",\n            \"test_get_user_preferences_nonexistent_user\",\n            \"test_get_user_context_success\",\n            \"test_get_user_context_nonexistent_user\",\n            \"test_hybrid_get_user_data_success\",\n            \"test_hybrid_get_user_data_nonexistent_user\",\n            \"test_save_user_data_success\",\n            \"test_create_user_files_success\",\n            \"test_update_user_preferences_success\",\n            \"test_get_user_data_account_with_chat_id\",\n            \"test_get_user_data_account_nonexistent_chat_id\",\n            \"test_get_user_data_account_with_discord_id\",\n            \"test_get_user_data_account_nonexistent_discord_id\",\n            \"test_get_user_data_account_with_email\",\n            \"test_get_user_data_account_nonexistent_email\"\n          ],\n          \"name\": \"TestUserManagement\"\n        },\n        {\n          \"docstring\": \"Test edge cases and error conditions.\",\n          \"methods\": [\n            \"test_get_user_preferences_corrupted_file\",\n            \"test_save_user_preferences_invalid_user_id\",\n            \"test_update_user_preferences_nonexistent_user\",\n            \"test_user_lifecycle\",\n            \"test_get_user_data_single_type\",\n            \"test_get_user_data_multiple_types\",\n            \"test_get_user_data_invalid_type\",\n            \"test_get_user_data_nonexistent_user\"\n          ],\n          \"name\": \"TestUserManagementEdgeCases\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test getting user IDs when no users exist.\",\n          \"name\": \"test_get_all_user_ids_empty\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_user_data\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test getting user IDs when users exist.\",\n          \"name\": \"test_get_all_user_ids_with_users\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test getting user preferences successfully.\",\n          \"name\": \"test_get_user_preferences_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test getting preferences for non-existent user.\",\n          \"name\": \"test_get_user_preferences_nonexistent_user\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test getting user context successfully.\",\n          \"name\": \"test_get_user_context_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test getting context for non-existent user.\",\n          \"name\": \"test_get_user_context_nonexistent_user\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\"\n          ],\n          \"docstring\": \"Test loading user data successfully using new hybrid API.\",\n          \"name\": \"test_hybrid_get_user_data_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test loading non-existent user data using new hybrid API.\",\n          \"name\": \"test_hybrid_get_user_data_nonexistent_user\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test saving user data successfully using centralized utilities.\",\n          \"name\": \"test_save_user_data_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test creating user files successfully.\",\n          \"name\": \"test_create_user_files_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test updating user preferences successfully.\",\n          \"name\": \"test_update_user_preferences_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test getting user account with chat_id field.\",\n          \"name\": \"test_get_user_data_account_with_chat_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test getting user account for non-existent user.\",\n          \"name\": \"test_get_user_data_account_nonexistent_chat_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test getting user account with discord_user_id field.\",\n          \"name\": \"test_get_user_data_account_with_discord_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test getting user account for non-existent user.\",\n          \"name\": \"test_get_user_data_account_nonexistent_discord_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test getting user account with email successfully.\",\n          \"name\": \"test_get_user_data_account_with_email\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test getting user account for non-existent user.\",\n          \"name\": \"test_get_user_data_account_nonexistent_email\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test getting preferences with corrupted JSON file.\",\n          \"name\": \"test_get_user_preferences_corrupted_file\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test saving preferences with invalid user ID.\",\n          \"name\": \"test_save_user_preferences_invalid_user_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test updating preferences for non-existent user.\",\n          \"name\": \"test_update_user_preferences_nonexistent_user\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test complete user lifecycle with real side effects and system state verification.\",\n          \"name\": \"test_user_lifecycle\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test getting single data type using hybrid API.\",\n          \"name\": \"test_get_user_data_single_type\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test getting multiple data types using hybrid API.\",\n          \"name\": \"test_get_user_data_multiple_types\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_user_data\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test getting invalid data type using hybrid API.\",\n          \"name\": \"test_get_user_data_invalid_type\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"mock_config\"\n          ],\n          \"docstring\": \"Test getting data for nonexistent user using hybrid API.\",\n          \"name\": \"test_get_user_data_nonexistent_user\"\n        }\n      ]\n    },\n    \"tests/unit/test_validation.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Test basic validation functions with real behavior verification.\",\n          \"methods\": [\n            \"test_is_valid_email_with_valid_emails\",\n            \"test_is_valid_email_with_invalid_emails\",\n            \"test_is_valid_phone_with_valid_phones\",\n            \"test_is_valid_phone_with_invalid_phones\",\n            \"test_validate_time_format_with_valid_times\",\n            \"test_validate_time_format_with_invalid_times\",\n            \"test_title_case_with_various_inputs\"\n          ],\n          \"name\": \"TestPrimitiveValidators\"\n        },\n        {\n          \"docstring\": \"Test user update validation with real behavior verification.\",\n          \"methods\": [\n            \"test_validate_user_update_account_success\",\n            \"test_validate_user_update_account_missing_username\",\n            \"test_validate_user_update_account_invalid_status\",\n            \"test_validate_user_update_account_invalid_email\",\n            \"test_validate_user_update_preferences_success\",\n            \"test_validate_user_update_preferences_invalid_categories\",\n            \"test_validate_user_update_preferences_invalid_channel_type\",\n            \"test_validate_user_update_context_success\",\n            \"test_validate_user_update_context_invalid_date\",\n            \"test_validate_user_update_context_invalid_custom_fields\",\n            \"test_validate_user_update_schedules_success\",\n            \"test_validate_user_update_schedules_invalid_time_format\",\n            \"test_validate_user_update_schedules_invalid_time_order\",\n            \"test_validate_user_update_schedules_invalid_days\"\n          ],\n          \"name\": \"TestUserUpdateValidation\"\n        },\n        {\n          \"docstring\": \"Test schedule periods validation with real behavior verification.\",\n          \"methods\": [\n            \"test_validate_schedule_periods_success\",\n            \"test_validate_schedule_periods_empty\",\n            \"test_validate_schedule_periods_no_active_periods\",\n            \"test_validate_schedule_periods_all_period_excluded\",\n            \"test_validate_schedule_periods_missing_times\",\n            \"test_validate_schedule_periods_invalid_time_format\",\n            \"test_validate_schedule_periods_invalid_time_order\",\n            \"test_validate_schedule_periods_invalid_days_type\",\n            \"test_validate_schedule_periods_empty_days\",\n            \"test_validate_schedule_periods_invalid_days\"\n          ],\n          \"name\": \"TestSchedulePeriodsValidation\"\n        },\n        {\n          \"docstring\": \"Test new user data validation with real behavior verification.\",\n          \"methods\": [\n            \"test_validate_new_user_data_success\",\n            \"test_validate_new_user_data_missing_user_id\",\n            \"test_validate_new_user_data_empty_updates\",\n            \"test_validate_new_user_data_user_already_exists\",\n            \"test_validate_new_user_data_missing_account\",\n            \"test_validate_new_user_data_missing_username\",\n            \"test_validate_new_user_data_missing_channel\",\n            \"test_validate_new_user_data_invalid_channel_type\",\n            \"test_validate_new_user_data_invalid_email\",\n            \"test_validate_new_user_data_invalid_account_status\"\n          ],\n          \"name\": \"TestNewUserDataValidation\"\n        },\n        {\n          \"docstring\": \"Test personalization data validation with real behavior verification.\",\n          \"methods\": [\n            \"test_validate_personalization_data_success\",\n            \"test_validate_personalization_data_empty\",\n            \"test_validate_personalization_data_invalid_string_fields\",\n            \"test_validate_personalization_data_invalid_list_fields\",\n            \"test_validate_personalization_data_invalid_custom_fields_type\",\n            \"test_validate_personalization_data_invalid_custom_field_lists\",\n            \"test_validate_personalization_data_invalid_date_format\",\n            \"test_validate_personalization_data_invalid_loved_ones_type\",\n            \"test_validate_personalization_data_invalid_loved_one_item\"\n          ],\n          \"name\": \"TestPersonalizationDataValidation\"\n        },\n        {\n          \"docstring\": \"Test validation functions working together with real behavior verification.\",\n          \"methods\": [\n            \"test_validation_functions_work_together\",\n            \"test_validation_error_propagation\",\n            \"test_validation_with_real_file_operations\"\n          ],\n          \"name\": \"TestValidationIntegration\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test email validation with various valid email formats.\",\n          \"name\": \"test_is_valid_email_with_valid_emails\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test email validation with various invalid email formats.\",\n          \"name\": \"test_is_valid_email_with_invalid_emails\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test phone validation with various valid phone formats.\",\n          \"name\": \"test_is_valid_phone_with_valid_phones\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test phone validation with various invalid phone formats.\",\n          \"name\": \"test_is_valid_phone_with_invalid_phones\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test time format validation with valid 24-hour times.\",\n          \"name\": \"test_validate_time_format_with_valid_times\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test time format validation with invalid time formats.\",\n          \"name\": \"test_validate_time_format_with_invalid_times\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test title case conversion with various text inputs.\",\n          \"name\": \"test_title_case_with_various_inputs\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test successful account update validation.\",\n          \"name\": \"test_validate_user_update_account_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test account update validation with missing internal_username.\",\n          \"name\": \"test_validate_user_update_account_missing_username\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test account update validation with invalid account status.\",\n          \"name\": \"test_validate_user_update_account_invalid_status\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test account update validation with invalid email format.\",\n          \"name\": \"test_validate_user_update_account_invalid_email\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test successful preferences update validation.\",\n          \"name\": \"test_validate_user_update_preferences_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test preferences update validation with invalid categories.\",\n          \"name\": \"test_validate_user_update_preferences_invalid_categories\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test preferences update validation with invalid channel type.\",\n          \"name\": \"test_validate_user_update_preferences_invalid_channel_type\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test successful context update validation.\",\n          \"name\": \"test_validate_user_update_context_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test context update validation with invalid date format.\",\n          \"name\": \"test_validate_user_update_context_invalid_date\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test context update validation with invalid custom_fields type.\",\n          \"name\": \"test_validate_user_update_context_invalid_custom_fields\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test successful schedules update validation.\",\n          \"name\": \"test_validate_user_update_schedules_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test schedules update validation with invalid time format.\",\n          \"name\": \"test_validate_user_update_schedules_invalid_time_format\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test schedules update validation with invalid time ordering.\",\n          \"name\": \"test_validate_user_update_schedules_invalid_time_order\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test schedules update validation with invalid days.\",\n          \"name\": \"test_validate_user_update_schedules_invalid_days\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test successful schedule periods validation.\",\n          \"name\": \"test_validate_schedule_periods_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test schedule periods validation with empty periods.\",\n          \"name\": \"test_validate_schedule_periods_empty\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test schedule periods validation with no active periods.\",\n          \"name\": \"test_validate_schedule_periods_no_active_periods\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that ALL period is excluded from active period requirement.\",\n          \"name\": \"test_validate_schedule_periods_all_period_excluded\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test schedule periods validation with missing start/end times.\",\n          \"name\": \"test_validate_schedule_periods_missing_times\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test schedule periods validation with invalid time format.\",\n          \"name\": \"test_validate_schedule_periods_invalid_time_format\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test schedule periods validation with invalid time ordering.\",\n          \"name\": \"test_validate_schedule_periods_invalid_time_order\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test schedule periods validation with invalid days type.\",\n          \"name\": \"test_validate_schedule_periods_invalid_days_type\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test schedule periods validation with empty days list.\",\n          \"name\": \"test_validate_schedule_periods_empty_days\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test schedule periods validation with invalid day names.\",\n          \"name\": \"test_validate_schedule_periods_invalid_days\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test successful new user data validation.\",\n          \"name\": \"test_validate_new_user_data_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test new user data validation with missing user_id.\",\n          \"name\": \"test_validate_new_user_data_missing_user_id\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test new user data validation with empty updates.\",\n          \"name\": \"test_validate_new_user_data_empty_updates\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test new user data validation when user already exists.\",\n          \"name\": \"test_validate_new_user_data_user_already_exists\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test new user data validation with missing account data.\",\n          \"name\": \"test_validate_new_user_data_missing_account\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test new user data validation with missing internal_username.\",\n          \"name\": \"test_validate_new_user_data_missing_username\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test new user data validation with missing channel.\",\n          \"name\": \"test_validate_new_user_data_missing_channel\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test new user data validation with invalid channel type.\",\n          \"name\": \"test_validate_new_user_data_invalid_channel_type\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test new user data validation with invalid email format.\",\n          \"name\": \"test_validate_new_user_data_invalid_email\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test new user data validation with invalid account status.\",\n          \"name\": \"test_validate_new_user_data_invalid_account_status\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test successful personalization data validation.\",\n          \"name\": \"test_validate_personalization_data_success\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test personalization data validation with empty data.\",\n          \"name\": \"test_validate_personalization_data_empty\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test personalization data validation with invalid string field types.\",\n          \"name\": \"test_validate_personalization_data_invalid_string_fields\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test personalization data validation with invalid list field types.\",\n          \"name\": \"test_validate_personalization_data_invalid_list_fields\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test personalization data validation with invalid custom_fields type.\",\n          \"name\": \"test_validate_personalization_data_invalid_custom_fields_type\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test personalization data validation with invalid custom field list types.\",\n          \"name\": \"test_validate_personalization_data_invalid_custom_field_lists\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test personalization data validation with invalid date format.\",\n          \"name\": \"test_validate_personalization_data_invalid_date_format\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test personalization data validation with invalid loved_ones type.\",\n          \"name\": \"test_validate_personalization_data_invalid_loved_ones_type\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test personalization data validation with invalid loved_one item type.\",\n          \"name\": \"test_validate_personalization_data_invalid_loved_one_item\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test that validation functions work together correctly.\",\n          \"name\": \"test_validation_functions_work_together\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Test that validation errors propagate correctly through the system.\",\n          \"name\": \"test_validation_error_propagation\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"test_data_dir\"\n          ],\n          \"docstring\": \"Test validation with real file system operations.\",\n          \"name\": \"test_validation_with_real_file_operations\"\n        }\n      ]\n    },\n    \"ui/dialogs/account_creator_dialog.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Account creation dialog using existing UI files.\",\n          \"methods\": [\n            \"__init__\",\n            \"setup_dialog\",\n            \"load_widgets\",\n            \"load_category_widget\",\n            \"load_message_service_widget\",\n            \"load_task_management_widget\",\n            \"load_checkin_settings_widget\",\n            \"setup_feature_group_boxes\",\n            \"setup_profile_button\",\n            \"center_dialog\",\n            \"accept\",\n            \"close_dialog\",\n            \"setup_connections\",\n            \"keyPressEvent\",\n            \"on_username_changed\",\n            \"on_preferred_name_changed\",\n            \"on_feature_toggled\",\n            \"update_tab_visibility\",\n            \"open_personalization_dialog\",\n            \"update_profile_button_state\",\n            \"validate_input\",\n            \"_validate_and_accept__collect_basic_user_info\",\n            \"_validate_and_accept__collect_feature_settings\",\n            \"_validate_and_accept__collect_channel_data\",\n            \"_validate_and_accept__collect_widget_data\",\n            \"_validate_and_accept__build_account_data\",\n            \"_validate_and_accept__show_error_dialog\",\n            \"_validate_and_accept__show_success_dialog\",\n            \"validate_and_accept\",\n            \"_validate_and_accept__input_errors\",\n            \"_validate_and_accept__collect_data\",\n            \"_validate_and_accept__create_account\",\n            \"_validate_and_accept__handle_success\",\n            \"create_account\",\n            \"_validate_and_accept__build_user_preferences\",\n            \"_determine_chat_id\",\n            \"_build_features_dict\",\n            \"_validate_and_accept__add_feature_settings\",\n            \"_validate_and_accept__setup_task_tags\",\n            \"_validate_and_accept__update_user_index\",\n            \"_validate_and_accept__schedule_new_user\",\n            \"get_account_data\",\n            \"validate_account_data\"\n          ],\n          \"name\": \"AccountCreatorDialog\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"parent\",\n            \"communication_manager\"\n          ],\n          \"docstring\": \"Create and show the account creation dialog.\",\n          \"name\": \"create_account_dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"communication_manager\"\n          ],\n          \"docstring\": \"Initialize the account creator dialog.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Set up the dialog properties.\",\n          \"name\": \"setup_dialog\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load all the widget UI files into the placeholder widgets.\",\n          \"name\": \"load_widgets\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load the category selection widget.\",\n          \"name\": \"load_category_widget\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load the message service selection widget.\",\n          \"name\": \"load_message_service_widget\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load the task management widget.\",\n          \"name\": \"load_task_management_widget\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load the check-in settings widget.\",\n          \"name\": \"load_checkin_settings_widget\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup group boxes for task management and check-ins (no longer collapsible in tab structure).\",\n          \"name\": \"setup_feature_group_boxes\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup the profile button.\",\n          \"name\": \"setup_profile_button\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Center the dialog on the parent window.\",\n          \"name\": \"center_dialog\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Override accept to prevent automatic dialog closing.\",\n          \"name\": \"accept\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Close the dialog properly.\",\n          \"name\": \"close_dialog\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup signal connections.\",\n          \"name\": \"setup_connections\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"event\"\n          ],\n          \"docstring\": \"Handle key press events for the dialog.\",\n          \"name\": \"keyPressEvent\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Handle username change.\",\n          \"name\": \"on_username_changed\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Handle preferred name change.\",\n          \"name\": \"on_preferred_name_changed\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"checked\"\n          ],\n          \"docstring\": \"Handle feature enablement checkbox toggles.\",\n          \"name\": \"on_feature_toggled\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Update tab visibility based on feature enablement.\",\n          \"name\": \"update_tab_visibility\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Open the personalization dialog.\",\n          \"name\": \"open_personalization_dialog\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Update the profile button to show if profile has been configured.\",\n          \"name\": \"update_profile_button_state\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Validate the input and return (is_valid, error_message).\",\n          \"name\": \"validate_input\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Collect basic user information from UI fields.\",\n          \"name\": \"_validate_and_accept__collect_basic_user_info\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Collect feature enablement states from UI.\",\n          \"name\": \"_validate_and_accept__collect_feature_settings\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Collect channel and contact information from widgets.\",\n          \"name\": \"_validate_and_accept__collect_channel_data\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Collect data from all widgets.\",\n          \"name\": \"_validate_and_accept__collect_widget_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"username\",\n            \"preferred_name\",\n            \"timezone\",\n            \"channel_data\",\n            \"contact_info\",\n            \"categories\",\n            \"task_settings\",\n            \"checkin_settings\",\n            \"messages_enabled\",\n            \"tasks_enabled\",\n            \"checkins_enabled\"\n          ],\n          \"docstring\": \"Build the complete account data structure.\",\n          \"name\": \"_validate_and_accept__build_account_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"title\",\n            \"message\"\n          ],\n          \"docstring\": \"Show an error dialog with the given title and message.\",\n          \"name\": \"_validate_and_accept__show_error_dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"username\"\n          ],\n          \"docstring\": \"Show a success dialog for account creation.\",\n          \"name\": \"_validate_and_accept__show_success_dialog\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Validate input and accept the dialog.\",\n          \"name\": \"validate_and_accept\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Validate input and show error dialog if validation fails.\",\n          \"name\": \"_validate_and_accept__input_errors\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Collect all data from UI and build account data structure.\",\n          \"name\": \"_validate_and_accept__collect_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"account_data\"\n          ],\n          \"docstring\": \"Create the account and set up all necessary components.\",\n          \"name\": \"_validate_and_accept__create_account\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"username\"\n          ],\n          \"docstring\": \"Handle successful account creation.\",\n          \"name\": \"_validate_and_accept__handle_success\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"account_data\"\n          ],\n          \"docstring\": \"Create the user account.\",\n          \"name\": \"create_account\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"account_data\"\n          ],\n          \"docstring\": \"Build user preferences data structure.\",\n          \"name\": \"_validate_and_accept__build_user_preferences\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"channel_type\",\n            \"email\",\n            \"phone\",\n            \"discord_user_id\"\n          ],\n          \"docstring\": \"Determine chat_id based on channel type.\",\n          \"name\": \"_determine_chat_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"features_enabled\"\n          ],\n          \"docstring\": \"Build features dictionary in the correct format.\",\n          \"name\": \"_build_features_dict\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_preferences\",\n            \"account_data\",\n            \"features_enabled\"\n          ],\n          \"docstring\": \"Add feature-specific settings to user preferences.\",\n          \"name\": \"_validate_and_accept__add_feature_settings\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"account_data\"\n          ],\n          \"docstring\": \"Set up task tags for the new user.\",\n          \"name\": \"_validate_and_accept__setup_task_tags\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Update user index for the new user.\",\n          \"name\": \"_validate_and_accept__update_user_index\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Schedule the new user in the scheduler.\",\n          \"name\": \"_validate_and_accept__schedule_new_user\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the account data from the form.\",\n          \"name\": \"get_account_data\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Validate the account data.\",\n          \"name\": \"validate_account_data\"\n        },\n        {\n          \"args\": [\n            \"data\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"on_personalization_save\"\n        }\n      ]\n    },\n    \"ui/dialogs/admin_panel.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Dialog for admin panel functionality.\",\n          \"methods\": [\n            \"__init__\",\n            \"setup_ui\",\n            \"get_admin_data\",\n            \"set_admin_data\"\n          ],\n          \"name\": \"AdminPanelDialog\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\"\n          ],\n          \"docstring\": \"Initialize the AdminPanelDialog.\\n        \\n        Args:\\n            parent: Parent widget for the dialog\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup the UI components.\",\n          \"name\": \"setup_ui\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the admin panel data.\\n        \\n        Returns:\\n            dict: Admin panel data (currently returns empty dict as placeholder)\",\n          \"name\": \"get_admin_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"data\"\n          ],\n          \"docstring\": \"Set the admin panel data.\\n        \\n        Args:\\n            data: Admin panel data to set (currently not implemented)\",\n          \"name\": \"set_admin_data\"\n        }\n      ]\n    },\n    \"ui/dialogs/category_management_dialog.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__init__\",\n            \"load_user_category_data\",\n            \"on_enable_messages_toggled\",\n            \"save_category_settings\",\n            \"get_selected_categories\",\n            \"set_selected_categories\"\n          ],\n          \"name\": \"CategoryManagementDialog\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load user's current category settings\",\n          \"name\": \"load_user_category_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"checked\"\n          ],\n          \"docstring\": \"Handle enable automated messages checkbox toggle.\",\n          \"name\": \"on_enable_messages_toggled\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Save the selected categories back to user preferences\",\n          \"name\": \"save_category_settings\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_selected_categories\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"categories\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"set_selected_categories\"\n        }\n      ]\n    },\n    \"ui/dialogs/channel_management_dialog.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__init__\",\n            \"save_channel_settings\",\n            \"get_selected_channel\",\n            \"set_selected_channel\"\n          ],\n          \"name\": \"ChannelManagementDialog\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"save_channel_settings\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_selected_channel\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"channel\",\n            \"value\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"set_selected_channel\"\n        }\n      ]\n    },\n    \"ui/dialogs/checkin_management_dialog.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Dialog for managing check-in settings.\",\n          \"methods\": [\n            \"__init__\",\n            \"on_enable_checkins_toggled\",\n            \"load_user_checkin_data\",\n            \"save_checkin_settings\",\n            \"get_checkin_settings\",\n            \"set_checkin_settings\"\n          ],\n          \"name\": \"CheckinManagementDialog\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"checked\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"on_enable_checkins_toggled\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load the user's current check-in settings\",\n          \"name\": \"load_user_checkin_data\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Save the check-in settings back to user preferences\",\n          \"name\": \"save_checkin_settings\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the current check-in settings.\",\n          \"name\": \"get_checkin_settings\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"settings\"\n          ],\n          \"docstring\": \"Set the check-in settings.\",\n          \"name\": \"set_checkin_settings\"\n        }\n      ]\n    },\n    \"ui/dialogs/schedule_editor_dialog.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Dialog for editing schedules.\",\n          \"methods\": [\n            \"__init__\",\n            \"center_dialog\",\n            \"setup_functionality\",\n            \"load_existing_data\",\n            \"add_new_period\",\n            \"resort_period_widgets\",\n            \"find_lowest_available_period_number\",\n            \"remove_period_row\",\n            \"undo_last_delete\",\n            \"collect_period_data\",\n            \"handle_save\",\n            \"save_schedule\",\n            \"_trigger_rescheduling\",\n            \"cancel\",\n            \"get_schedule_data\",\n            \"set_schedule_data\"\n          ],\n          \"name\": \"ScheduleEditorDialog\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"parent\",\n            \"user_id\",\n            \"category\",\n            \"on_save\"\n          ],\n          \"docstring\": \"Open the schedule editor dialog.\",\n          \"name\": \"open_schedule_editor\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"user_id\",\n            \"category\",\n            \"on_save\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Center the dialog on the parent window.\",\n          \"name\": \"center_dialog\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup the functionality and connect signals.\",\n          \"name\": \"setup_functionality\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load existing schedule data using the new reusable function.\",\n          \"name\": \"load_existing_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"period_name\",\n            \"period_data\"\n          ],\n          \"docstring\": \"Add a new period row using the PeriodRowWidget.\",\n          \"name\": \"add_new_period\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Re-sort the period widgets to maintain proper order (ALL at bottom).\",\n          \"name\": \"resort_period_widgets\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Find the lowest available number for new period names.\",\n          \"name\": \"find_lowest_available_period_number\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"row_widget\"\n          ],\n          \"docstring\": \"Remove a period row and store it for undo.\",\n          \"name\": \"remove_period_row\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Undo the last deletion.\",\n          \"name\": \"undo_last_delete\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Collect period data using the new reusable function.\",\n          \"name\": \"collect_period_data\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Handle save button click - prevents dialog closure on validation errors.\",\n          \"name\": \"handle_save\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Save the schedule data.\",\n          \"name\": \"save_schedule\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Trigger rescheduling for this user and category when schedule changes.\",\n          \"name\": \"_trigger_rescheduling\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Cancel the dialog.\",\n          \"name\": \"cancel\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the current schedule data.\",\n          \"name\": \"get_schedule_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"data\"\n          ],\n          \"docstring\": \"Set the schedule data.\",\n          \"name\": \"set_schedule_data\"\n        },\n        {\n          \"args\": [\n            \"widget\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"sort_key\"\n        }\n      ]\n    },\n    \"ui/dialogs/task_completion_dialog.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Dialog for specifying task completion details.\",\n          \"methods\": [\n            \"__init__\",\n            \"setup_ui\",\n            \"setup_completion_time_components\",\n            \"setup_connections\",\n            \"get_completion_date\",\n            \"get_completion_time\",\n            \"get_completion_notes\",\n            \"get_completion_data\"\n          ],\n          \"name\": \"TaskCompletionDialog\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"task_title\"\n          ],\n          \"docstring\": \"Initialize the task completion dialog.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup the UI components.\",\n          \"name\": \"setup_ui\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup the completion time input components.\",\n          \"name\": \"setup_completion_time_components\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup signal connections.\",\n          \"name\": \"setup_connections\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get completion date as string.\",\n          \"name\": \"get_completion_date\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get completion time as 24-hour format string.\",\n          \"name\": \"get_completion_time\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get completion notes.\",\n          \"name\": \"get_completion_notes\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get all completion data as a dictionary.\",\n          \"name\": \"get_completion_data\"\n        }\n      ]\n    },\n    \"ui/dialogs/task_crud_dialog.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Dialog for full CRUD operations on tasks.\",\n          \"methods\": [\n            \"__init__\",\n            \"setup_ui\",\n            \"setup_connections\",\n            \"load_data\",\n            \"refresh_active_tasks\",\n            \"refresh_completed_tasks\",\n            \"update_statistics\",\n            \"get_selected_task_id\",\n            \"add_new_task\",\n            \"edit_selected_task\",\n            \"complete_selected_task\",\n            \"delete_selected_task\",\n            \"restore_selected_task\",\n            \"delete_completed_task\"\n          ],\n          \"name\": \"TaskCrudDialog\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Initialize the task CRUD dialog.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup the UI components.\",\n          \"name\": \"setup_ui\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup signal connections.\",\n          \"name\": \"setup_connections\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load all task data and update displays.\",\n          \"name\": \"load_data\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Refresh the active tasks table.\",\n          \"name\": \"refresh_active_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Refresh the completed tasks table.\",\n          \"name\": \"refresh_completed_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Update the statistics display.\",\n          \"name\": \"update_statistics\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"table\"\n          ],\n          \"docstring\": \"Get the task ID of the selected row in the given table.\",\n          \"name\": \"get_selected_task_id\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Open dialog to add a new task.\",\n          \"name\": \"add_new_task\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Edit the selected task.\",\n          \"name\": \"edit_selected_task\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Mark the selected task as completed.\",\n          \"name\": \"complete_selected_task\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Delete the selected task.\",\n          \"name\": \"delete_selected_task\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Restore a completed task to active status.\",\n          \"name\": \"restore_selected_task\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Permanently delete a completed task.\",\n          \"name\": \"delete_completed_task\"\n        }\n      ]\n    },\n    \"ui/dialogs/task_edit_dialog.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Dialog for creating or editing tasks.\",\n          \"methods\": [\n            \"__init__\",\n            \"setup_ui\",\n            \"setup_due_time_components\",\n            \"setup_recurring_task_components\",\n            \"on_recurring_pattern_changed\",\n            \"on_hour_changed\",\n            \"on_minute_changed\",\n            \"on_no_due_date_toggled\",\n            \"setup_connections\",\n            \"load_task_data\",\n            \"load_recurring_task_data\",\n            \"set_due_time_from_24h\",\n            \"get_due_time_as_24h\",\n            \"add_reminder_period\",\n            \"render_reminder_periods\",\n            \"render_reminder_period_row\",\n            \"delete_reminder_period\",\n            \"validate_form\",\n            \"collect_reminder_periods\",\n            \"collect_quick_reminders\",\n            \"collect_selected_tags\",\n            \"collect_recurring_task_data\",\n            \"save_task\"\n          ],\n          \"name\": \"TaskEditDialog\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"user_id\",\n            \"task_data\"\n          ],\n          \"docstring\": \"Initialize the task edit dialog.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup the UI components.\",\n          \"name\": \"setup_ui\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup the due time input components.\",\n          \"name\": \"setup_due_time_components\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup the recurring task input components.\",\n          \"name\": \"setup_recurring_task_components\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"pattern_text\"\n          ],\n          \"docstring\": \"Handle recurring pattern selection change.\",\n          \"name\": \"on_recurring_pattern_changed\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"hour_text\"\n          ],\n          \"docstring\": \"Handle hour selection change.\",\n          \"name\": \"on_hour_changed\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"minute_text\"\n          ],\n          \"docstring\": \"Handle minute selection change.\",\n          \"name\": \"on_minute_changed\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"checked\"\n          ],\n          \"docstring\": \"Handle No Due Date checkbox toggle.\",\n          \"name\": \"on_no_due_date_toggled\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup signal connections.\",\n          \"name\": \"setup_connections\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load existing task data into the form.\",\n          \"name\": \"load_task_data\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load recurring task data into the form.\",\n          \"name\": \"load_recurring_task_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"time\"\n          ],\n          \"docstring\": \"Set due time components from 24-hour time.\",\n          \"name\": \"set_due_time_from_24h\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get due time as 24-hour format string.\",\n          \"name\": \"get_due_time_as_24h\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Add a new reminder period.\",\n          \"name\": \"add_reminder_period\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Render the reminder periods in the UI.\",\n          \"name\": \"render_reminder_periods\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"index\",\n            \"period\"\n          ],\n          \"docstring\": \"Render a single reminder period row.\",\n          \"name\": \"render_reminder_period_row\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"index\"\n          ],\n          \"docstring\": \"Delete a reminder period.\",\n          \"name\": \"delete_reminder_period\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Validate the form data.\",\n          \"name\": \"validate_form\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Collect reminder period data from the UI.\",\n          \"name\": \"collect_reminder_periods\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Collect quick reminder options.\",\n          \"name\": \"collect_quick_reminders\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Collect selected tags from the tag widget.\",\n          \"name\": \"collect_selected_tags\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Collect recurring task settings from the form.\",\n          \"name\": \"collect_recurring_task_data\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Save the task data.\",\n          \"name\": \"save_task\"\n        }\n      ]\n    },\n    \"ui/dialogs/task_management_dialog.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__init__\",\n            \"on_enable_task_management_toggled\",\n            \"save_task_settings\",\n            \"get_statistics\"\n          ],\n          \"name\": \"TaskManagementDialog\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"checked\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"on_enable_task_management_toggled\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Save the task settings.\",\n          \"name\": \"save_task_settings\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_statistics\"\n        }\n      ]\n    },\n    \"ui/dialogs/user_profile_dialog.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"PySide6-based personalization dialog for user account creation and management.\",\n          \"methods\": [\n            \"__init__\",\n            \"center_dialog\",\n            \"setup_ui\",\n            \"keyPressEvent\",\n            \"create_custom_field_list\",\n            \"add_custom_field\",\n            \"remove_custom_field\",\n            \"create_health_section\",\n            \"create_loved_ones_section\",\n            \"add_loved_one_widget\",\n            \"remove_loved_one_widget\",\n            \"create_interests_section\",\n            \"create_notes_section\",\n            \"create_goals_section\",\n            \"collect_custom_field_data\",\n            \"collect_loved_ones_data\",\n            \"save_personalization\",\n            \"cancel\"\n          ],\n          \"name\": \"UserProfileDialog\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"parent\",\n            \"user_id\",\n            \"on_save\",\n            \"existing_data\"\n          ],\n          \"docstring\": \"Open the personalization dialog.\\n    \\n    Args:\\n        parent: Parent widget\\n        user_id: User ID for the personalization data\\n        on_save: Optional callback function to call when saving\\n        existing_data: Optional existing personalization data\\n        \\n    Returns:\\n        QDialog.DialogCode: Dialog result code\",\n          \"name\": \"open_personalization_dialog\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"user_id\",\n            \"on_save\",\n            \"existing_data\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Center the dialog on the parent window.\",\n          \"name\": \"center_dialog\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup the user interface.\",\n          \"name\": \"setup_ui\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"event\"\n          ],\n          \"docstring\": \"Handle key press events for the dialog.\",\n          \"name\": \"keyPressEvent\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"parent_layout\",\n            \"predefined_values\",\n            \"existing_values\",\n            \"label_text\"\n          ],\n          \"docstring\": \"Creates a multi-column list with preset items (checkbox + label) and custom fields (checkbox + entry + delete).\",\n          \"name\": \"create_custom_field_list\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"parent_layout\",\n            \"field_type\",\n            \"value\",\n            \"checked\"\n          ],\n          \"docstring\": \"Add a custom field row with checkbox, entry, and delete button.\",\n          \"name\": \"add_custom_field\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"field_frame\"\n          ],\n          \"docstring\": \"Remove a custom field from the layout.\",\n          \"name\": \"remove_custom_field\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create the health section of the personalization dialog.\\n        \\n        Returns:\\n            QGroupBox: Health section group box\",\n          \"name\": \"create_health_section\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create the loved ones section of the personalization dialog.\\n        \\n        Returns:\\n            QGroupBox: Loved ones section group box\",\n          \"name\": \"create_loved_ones_section\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"parent_layout\",\n            \"loved_one_data\"\n          ],\n          \"docstring\": \"Add a loved one widget to the layout.\\n        \\n        Args:\\n            parent_layout: Parent layout to add the widget to\\n            loved_one_data: Optional existing loved one data\",\n          \"name\": \"add_loved_one_widget\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"frame\"\n          ],\n          \"docstring\": \"Remove a loved one widget from the layout.\\n        \\n        Args:\\n            frame: Frame widget to remove\",\n          \"name\": \"remove_loved_one_widget\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create the interests section of the personalization dialog.\\n        \\n        Returns:\\n            QGroupBox: Interests section group box\",\n          \"name\": \"create_interests_section\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create the notes section of the personalization dialog.\\n        \\n        Returns:\\n            QGroupBox: Notes section group box\",\n          \"name\": \"create_notes_section\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Create the goals section of the personalization dialog.\\n        \\n        Returns:\\n            QGroupBox: Goals section group box\",\n          \"name\": \"create_goals_section\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"group_box\"\n          ],\n          \"docstring\": \"Collect data from custom field checkboxes and entries.\\n        \\n        Args:\\n            group_box: Group box containing custom fields\\n            \\n        Returns:\\n            list: List of selected values from checkboxes and custom entries\",\n          \"name\": \"collect_custom_field_data\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Collect data from loved ones widgets.\\n        \\n        Returns:\\n            list: List of loved ones data dictionaries\",\n          \"name\": \"collect_loved_ones_data\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Save the personalization data.\",\n          \"name\": \"save_personalization\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Cancel the personalization dialog.\",\n          \"name\": \"cancel\"\n        },\n        {\n          \"args\": [\n            \"s\"\n          ],\n          \"docstring\": \"Convert snake_case or lowercase to Title Case.\\n            \\n            Args:\\n                s: String to convert to title case\\n                \\n            Returns:\\n                str: String converted to title case\",\n          \"name\": \"title_case\"\n        }\n      ]\n    },\n    \"ui/generate_ui_files.py\": {\n      \"classes\": [],\n      \"functions\": [\n        {\n          \"args\": [\n            \"ui_file_path\",\n            \"output_path\"\n          ],\n          \"docstring\": \"Generate a UI Python file from a .ui file with proper headers.\\n    \\n    Args:\\n        ui_file_path: Path to the .ui file\\n        output_path: Path for the generated Python file\\n        \\n    Returns:\\n        bool: True if successful, False otherwise\",\n          \"name\": \"generate_ui_file\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Generate all UI files in the project.\",\n          \"name\": \"generate_all_ui_files\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Main function.\",\n          \"name\": \"main\"\n        }\n      ]\n    },\n    \"ui/generated/account_creator_dialog_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Dialog_create_account\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_create_account\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_create_account\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/admin_panel_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_ui_app_mainwindow\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"ui_app_mainwindow\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"ui_app_mainwindow\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/category_management_dialog_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Dialog_category_management\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_category_management\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_category_management\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/category_selection_widget_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Form_category_selection_widget\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Form_category_selection_widget\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Form_category_selection_widget\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/channel_management_dialog_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Dialog\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/channel_selection_widget_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Form_channel_selection\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Form_channel_selection\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Form_channel_selection\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/checkin_element_template_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Form_checkin_element_template\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Form_checkin_element_template\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Form_checkin_element_template\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/checkin_management_dialog_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Dialog_checkin_management\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_checkin_management\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_checkin_management\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/checkin_settings_widget_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Form_checkin_settings\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Form_checkin_settings\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Form_checkin_settings\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/dynamic_list_field_template_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Form_dynamic_list_field_template\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Form_dynamic_list_field_template\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Form_dynamic_list_field_template\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/period_row_template_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Form_period_row_template\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Form_period_row_template\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Form_period_row_template\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/schedule_editor_dialog_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Dialog_edit_schedule\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_edit_schedule\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_edit_schedule\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/tag_widget_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Widget_tag\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Widget_tag\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Widget_tag\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/task_completion_dialog_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Dialog_task_completion\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_task_completion\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_task_completion\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/task_crud_dialog_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Dialog_task_crud\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_task_crud\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_task_crud\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/task_edit_dialog_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Dialog_task_edit\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_task_edit\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_task_edit\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/task_management_dialog_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Dialog_task_management\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_task_management\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_task_management\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/task_settings_widget_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Form_task_settings\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Form_task_settings\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Form_task_settings\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/user_profile_management_dialog_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Dialog_user_profile\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_user_profile\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Dialog_user_profile\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/generated/user_profile_settings_widget_pyqt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"setupUi\",\n            \"retranslateUi\"\n          ],\n          \"name\": \"Ui_Form_user_profile_settings\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"Form_user_profile_settings\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"setupUi\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"Form_user_profile_settings\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"retranslateUi\"\n        }\n      ]\n    },\n    \"ui/ui_app_qt.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Manages the MHM backend service process\",\n          \"methods\": [\n            \"__init__\",\n            \"validate_configuration_before_start\",\n            \"is_service_running\",\n            \"start_service\",\n            \"stop_service\",\n            \"restart_service\"\n          ],\n          \"name\": \"ServiceManager\"\n        },\n        {\n          \"docstring\": \"Main MHM Management UI using PySide6\",\n          \"methods\": [\n            \"__init__\",\n            \"load_ui\",\n            \"load_theme\",\n            \"connect_signals\",\n            \"initialize_ui\",\n            \"update_user_index_on_startup\",\n            \"update_service_status\",\n            \"start_service\",\n            \"stop_service\",\n            \"restart_service\",\n            \"run_full_scheduler\",\n            \"run_user_scheduler\",\n            \"run_category_scheduler\",\n            \"refresh_user_list\",\n            \"on_user_selected\",\n            \"load_user_categories\",\n            \"on_category_selected\",\n            \"enable_content_management\",\n            \"disable_content_management\",\n            \"create_new_user\",\n            \"manage_communication_settings\",\n            \"manage_categories\",\n            \"manage_checkins\",\n            \"manage_tasks\",\n            \"manage_task_crud\",\n            \"manage_personalization\",\n            \"manage_user_analytics\",\n            \"edit_user_messages\",\n            \"open_message_editor\",\n            \"edit_user_schedules\",\n            \"open_schedule_editor\",\n            \"_send_test_message__validate_user_selection\",\n            \"_send_test_message__validate_service_running\",\n            \"_send_test_message__get_selected_category\",\n            \"send_test_message\",\n            \"confirm_test_message\",\n            \"send_actual_test_message\",\n            \"toggle_logging_verbosity\",\n            \"view_log_file\",\n            \"view_cache_status\",\n            \"force_clean_cache\",\n            \"validate_configuration\",\n            \"show_configuration_help\",\n            \"view_all_users_summary\",\n            \"system_health_check\",\n            \"closeEvent\",\n            \"shutdown_ui_components\"\n          ],\n          \"name\": \"MHMManagerUI\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [],\n          \"docstring\": \"Main entry point for the Qt-based UI application\",\n          \"name\": \"main\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Validate configuration before attempting to start the service.\",\n          \"name\": \"validate_configuration_before_start\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Check if the MHM service is running\",\n          \"name\": \"is_service_running\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Start the MHM backend service\",\n          \"name\": \"start_service\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Stop the MHM backend service\",\n          \"name\": \"stop_service\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Restart the MHM backend service\",\n          \"name\": \"restart_service\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load the UI from the .ui file\",\n          \"name\": \"load_ui\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load and apply the QSS theme from the styles directory\",\n          \"name\": \"load_theme\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Connect UI signals to slots\",\n          \"name\": \"connect_signals\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the UI state\",\n          \"name\": \"initialize_ui\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Automatically update the user index when the admin panel starts\",\n          \"name\": \"update_user_index_on_startup\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Update the service status display\",\n          \"name\": \"update_service_status\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Start the MHM service\",\n          \"name\": \"start_service\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Stop the MHM service\",\n          \"name\": \"stop_service\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Restart the MHM service\",\n          \"name\": \"restart_service\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Run the full scheduler for all users\",\n          \"name\": \"run_full_scheduler\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Run scheduler for the selected user\",\n          \"name\": \"run_user_scheduler\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Run scheduler for the selected user and category\",\n          \"name\": \"run_category_scheduler\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Refresh the user list in the combo box using user index\",\n          \"name\": \"refresh_user_list\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_display\"\n          ],\n          \"docstring\": \"Handle user selection from combo box\",\n          \"name\": \"on_user_selected\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Load categories for the selected user\",\n          \"name\": \"load_user_categories\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"category\"\n          ],\n          \"docstring\": \"Handle category selection\",\n          \"name\": \"on_category_selected\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Enable content management buttons\",\n          \"name\": \"enable_content_management\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Disable content management buttons\",\n          \"name\": \"disable_content_management\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Open dialog to create a new user\",\n          \"name\": \"create_new_user\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"manage_communication_settings\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"manage_categories\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"manage_checkins\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"manage_tasks\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"manage_task_crud\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"manage_personalization\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Open user analytics interface for selected user\",\n          \"name\": \"manage_user_analytics\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Open message editing interface for selected user\",\n          \"name\": \"edit_user_messages\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"parent_dialog\",\n            \"category\"\n          ],\n          \"docstring\": \"Open the message editing window for a specific category\",\n          \"name\": \"open_message_editor\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Open schedule editing interface for selected user\",\n          \"name\": \"edit_user_schedules\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"parent_dialog\",\n            \"category\"\n          ],\n          \"docstring\": \"Open the schedule editing window for a specific category\",\n          \"name\": \"open_schedule_editor\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Validate that a user is selected.\",\n          \"name\": \"_send_test_message__validate_user_selection\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Validate that the service is running.\",\n          \"name\": \"_send_test_message__validate_service_running\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get and validate the selected category from the dropdown.\",\n          \"name\": \"_send_test_message__get_selected_category\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Send a test message to the selected user\",\n          \"name\": \"send_test_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"category\"\n          ],\n          \"docstring\": \"Confirm and send test message\",\n          \"name\": \"confirm_test_message\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"category\"\n          ],\n          \"docstring\": \"Send a test message via the running service\",\n          \"name\": \"send_actual_test_message\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Toggle logging verbosity and update menu.\",\n          \"name\": \"toggle_logging_verbosity\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Open the log file in the default text editor.\",\n          \"name\": \"view_log_file\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Show cache cleanup status and information.\",\n          \"name\": \"view_cache_status\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Force cache cleanup regardless of schedule.\",\n          \"name\": \"force_clean_cache\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Show detailed configuration validation report.\",\n          \"name\": \"validate_configuration\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"parent_window\"\n          ],\n          \"docstring\": \"Show help for fixing configuration issues.\",\n          \"name\": \"show_configuration_help\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Show a summary of all users in the system.\",\n          \"name\": \"view_all_users_summary\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Perform a basic system health check.\",\n          \"name\": \"system_health_check\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"event\"\n          ],\n          \"docstring\": \"Handle window close event\",\n          \"name\": \"closeEvent\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Shutdown any UI-created components gracefully\",\n          \"name\": \"shutdown_ui_components\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"\",\n          \"name\": \"cleanup_old_requests\"\n        },\n        {\n          \"args\": [\n            \"data\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"on_save\"\n        },\n        {\n          \"args\": [],\n          \"docstring\": \"Callback when schedule is saved.\",\n          \"name\": \"on_schedule_save\"\n        }\n      ]\n    },\n    \"ui/widgets/category_selection_widget.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__init__\",\n            \"get_selected_categories\",\n            \"set_selected_categories\"\n          ],\n          \"name\": \"CategorySelectionWidget\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_selected_categories\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"categories\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"set_selected_categories\"\n        }\n      ]\n    },\n    \"ui/widgets/channel_selection_widget.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__init__\",\n            \"populate_timezones\",\n            \"get_selected_channel\",\n            \"get_all_contact_info\",\n            \"get_timezone\",\n            \"set_selected_channel\",\n            \"set_timezone\",\n            \"set_contact_info\"\n          ],\n          \"name\": \"ChannelSelectionWidget\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\"\n          ],\n          \"docstring\": \"Initialize the ChannelSelectionWidget.\\n        \\n        Sets up the UI for channel selection with Discord and Email options,\\n        along with timezone selection. Populates timezone options and sets default\\n        timezone to America/Regina.\\n        \\n        Args:\\n            parent: Parent widget (optional)\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Populate the timezone combo box with options.\",\n          \"name\": \"populate_timezones\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_selected_channel\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get all contact info fields from the widget.\",\n          \"name\": \"get_all_contact_info\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the selected timezone.\",\n          \"name\": \"get_timezone\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"channel\",\n            \"value\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"set_selected_channel\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"timezone\"\n          ],\n          \"docstring\": \"Set the timezone.\",\n          \"name\": \"set_timezone\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"email\",\n            \"discord_id\",\n            \"timezone\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"set_contact_info\"\n        }\n      ]\n    },\n    \"ui/widgets/checkin_settings_widget.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Widget for check-in settings configuration.\",\n          \"methods\": [\n            \"__init__\",\n            \"showEvent\",\n            \"setup_connections\",\n            \"connect_question_checkboxes\",\n            \"on_question_toggled\",\n            \"load_existing_data\",\n            \"set_question_checkboxes\",\n            \"get_default_question_state\",\n            \"find_lowest_available_period_number\",\n            \"add_new_period\",\n            \"remove_period_row\",\n            \"undo_last_time_period_delete\",\n            \"add_new_question\",\n            \"undo_last_question_delete\",\n            \"get_checkin_settings\",\n            \"set_checkin_settings\"\n          ],\n          \"name\": \"CheckinSettingsWidget\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"event\"\n          ],\n          \"docstring\": \"Handle widget show event.\\n        \\n        Called when the widget becomes visible. Currently just calls the parent\\n        implementation but can be extended for initialization that needs to happen\\n        when the widget is shown.\\n        \\n        Args:\\n            event: The show event object\",\n          \"name\": \"showEvent\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup signal connections.\",\n          \"name\": \"setup_connections\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Connect all question checkboxes to track changes.\",\n          \"name\": \"connect_question_checkboxes\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"checked\"\n          ],\n          \"docstring\": \"Handle question checkbox toggle.\",\n          \"name\": \"on_question_toggled\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load existing check-in data.\",\n          \"name\": \"load_existing_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"questions\"\n          ],\n          \"docstring\": \"Set question checkboxes based on saved preferences.\",\n          \"name\": \"set_question_checkboxes\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"question_key\"\n          ],\n          \"docstring\": \"Get default enabled state for a question.\",\n          \"name\": \"get_default_question_state\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Find the lowest available integer (2+) that's not currently used in period names.\",\n          \"name\": \"find_lowest_available_period_number\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"checked\",\n            \"period_name\",\n            \"period_data\"\n          ],\n          \"docstring\": \"Add a new time period using the PeriodRowWidget.\",\n          \"name\": \"add_new_period\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"row_widget\"\n          ],\n          \"docstring\": \"Remove a period row and store it for undo.\",\n          \"name\": \"remove_period_row\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Undo the last time period deletion.\",\n          \"name\": \"undo_last_time_period_delete\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Add a new check-in question.\",\n          \"name\": \"add_new_question\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Undo the last question deletion.\",\n          \"name\": \"undo_last_question_delete\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the current check-in settings.\",\n          \"name\": \"get_checkin_settings\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"settings\"\n          ],\n          \"docstring\": \"Set the check-in settings.\",\n          \"name\": \"set_checkin_settings\"\n        }\n      ]\n    },\n    \"ui/widgets/dynamic_list_container.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Manages a vertical list of DynamicListField rows.\",\n          \"methods\": [\n            \"__init__\",\n            \"_add_blank_row\",\n            \"_on_row_edited\",\n            \"_on_row_deleted\",\n            \"_ensure_single_blank_row\",\n            \"_deduplicate_values\",\n            \"get_values\",\n            \"set_values\",\n            \"_first_blank_index\",\n            \"_on_preset_toggled\",\n            \"__post_init__\"\n          ],\n          \"name\": \"DynamicListContainer\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"field_key\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_add_blank_row\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"row\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_on_row_edited\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"row\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_on_row_deleted\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"current_blank\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_ensure_single_blank_row\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"trigger_row\",\n            \"skip_warning\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_deduplicate_values\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_values\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"selected\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"set_values\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_first_blank_index\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"row\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_on_preset_toggled\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Post-initialization setup.\",\n          \"name\": \"__post_init__\"\n        }\n      ]\n    },\n    \"ui/widgets/dynamic_list_field.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Single row consisting of checkbox + editable text + delete button.\",\n          \"methods\": [\n            \"__init__\",\n            \"on_text_changed\",\n            \"on_checkbox_toggled\",\n            \"on_editing_finished\",\n            \"_on_delete\",\n            \"is_checked\",\n            \"get_text\",\n            \"is_blank\",\n            \"set_checked\",\n            \"set_text\"\n          ],\n          \"name\": \"DynamicListField\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"preset_label\",\n            \"editable\",\n            \"checked\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Called when user types in the text field.\",\n          \"name\": \"on_text_changed\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Called when user clicks the checkbox.\",\n          \"name\": \"on_checkbox_toggled\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Notify parent container that text editing has finished (for duplicate validation).\",\n          \"name\": \"on_editing_finished\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"_on_delete\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"is_checked\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"get_text\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"is_blank\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"state\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"set_checked\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"text\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"set_text\"\n        }\n      ]\n    },\n    \"ui/widgets/period_row_widget.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Reusable widget for editing time periods with days selection.\",\n          \"methods\": [\n            \"__init__\",\n            \"setup_functionality\",\n            \"load_period_data\",\n            \"load_days\",\n            \"on_select_all_days_toggled\",\n            \"on_individual_day_toggled\",\n            \"get_period_data\",\n            \"get_selected_days\",\n            \"request_delete\",\n            \"set_period_name\",\n            \"get_period_name\",\n            \"is_valid\",\n            \"set_read_only\",\n            \"_set_read_only__time_inputs\",\n            \"_set_read_only__checkbox_states\",\n            \"_set_read_only__all_period_read_only\",\n            \"_set_read_only__normal_checkbox_states\",\n            \"_get_day_checkboxes\",\n            \"_set_read_only__delete_button_visibility\",\n            \"_set_read_only__visual_styling\",\n            \"_set_read_only__apply_read_only_styling\",\n            \"_set_read_only__clear_read_only_styling\",\n            \"_set_read_only__force_style_updates\"\n          ],\n          \"name\": \"PeriodRowWidget\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"period_name\",\n            \"period_data\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup the widget functionality and connect signals.\",\n          \"name\": \"setup_functionality\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load period data into the widget.\",\n          \"name\": \"load_period_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"days\"\n          ],\n          \"docstring\": \"Load day selections.\",\n          \"name\": \"load_days\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"checked\"\n          ],\n          \"docstring\": \"Handle 'Select All Days' checkbox toggle.\",\n          \"name\": \"on_select_all_days_toggled\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"checked\"\n          ],\n          \"docstring\": \"Handle individual day checkbox toggle.\",\n          \"name\": \"on_individual_day_toggled\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the current period data from the widget.\",\n          \"name\": \"get_period_data\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the currently selected days.\",\n          \"name\": \"get_selected_days\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Request deletion of this period row.\",\n          \"name\": \"request_delete\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"name\"\n          ],\n          \"docstring\": \"Set the period name.\",\n          \"name\": \"set_period_name\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the current period name.\",\n          \"name\": \"get_period_name\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Check if the period data is valid.\",\n          \"name\": \"is_valid\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"read_only\"\n          ],\n          \"docstring\": \"Set the widget to read-only mode.\",\n          \"name\": \"set_read_only\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"read_only\"\n          ],\n          \"docstring\": \"Set time input widgets to read-only mode.\",\n          \"name\": \"_set_read_only__time_inputs\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"read_only\"\n          ],\n          \"docstring\": \"Set checkbox states based on read-only mode and period type.\",\n          \"name\": \"_set_read_only__checkbox_states\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Set ALL period to read-only with all days selected.\",\n          \"name\": \"_set_read_only__all_period_read_only\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"read_only\"\n          ],\n          \"docstring\": \"Set normal checkbox states for non-ALL periods.\",\n          \"name\": \"_set_read_only__normal_checkbox_states\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get list of day checkboxes.\",\n          \"name\": \"_get_day_checkboxes\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"read_only\"\n          ],\n          \"docstring\": \"Set delete button visibility based on read-only state.\",\n          \"name\": \"_set_read_only__delete_button_visibility\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"read_only\"\n          ],\n          \"docstring\": \"Apply visual styling for read-only state.\",\n          \"name\": \"_set_read_only__visual_styling\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Apply read-only visual styling.\",\n          \"name\": \"_set_read_only__apply_read_only_styling\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Clear read-only visual styling.\",\n          \"name\": \"_set_read_only__clear_read_only_styling\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Force style updates for all checkboxes.\",\n          \"name\": \"_set_read_only__force_style_updates\"\n        }\n      ]\n    },\n    \"ui/widgets/tag_widget.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Flexible tag widget that can work in management or selection mode.\",\n          \"methods\": [\n            \"__init__\",\n            \"setup_ui\",\n            \"setup_connections\",\n            \"load_tags\",\n            \"refresh_tag_list\",\n            \"update_button_states\",\n            \"on_tag_selection_changed\",\n            \"add_tag\",\n            \"edit_tag\",\n            \"delete_tag\",\n            \"get_available_tags\",\n            \"get_selected_tags\",\n            \"set_selected_tags\",\n            \"refresh_tags\",\n            \"undo_last_tag_delete\"\n          ],\n          \"name\": \"TagWidget\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"user_id\",\n            \"mode\",\n            \"selected_tags\",\n            \"title\"\n          ],\n          \"docstring\": \"Initialize the tag widget.\\n        \\n        Args:\\n            parent: Parent widget\\n            user_id: User ID for loading/saving tags\\n            mode: \\\"management\\\" for full CRUD operations, \\\"selection\\\" for checkbox selection\\n            selected_tags: List of currently selected tags (for selection mode)\\n            title: Title for the group box\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup the UI components based on mode.\",\n          \"name\": \"setup_ui\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup signal connections.\",\n          \"name\": \"setup_connections\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load the user's tags.\",\n          \"name\": \"load_tags\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Refresh the tag list display.\",\n          \"name\": \"refresh_tag_list\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Update button enabled states based on selection (management mode only).\",\n          \"name\": \"update_button_states\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"item\"\n          ],\n          \"docstring\": \"Handle when a tag checkbox is changed (selection mode only).\",\n          \"name\": \"on_tag_selection_changed\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Add a new tag.\",\n          \"name\": \"add_tag\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Edit the selected tag (management mode only).\",\n          \"name\": \"edit_tag\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Delete the selected tag (management mode only).\",\n          \"name\": \"delete_tag\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the current list of available tags.\",\n          \"name\": \"get_available_tags\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the currently selected tags (selection mode only).\",\n          \"name\": \"get_selected_tags\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"tags\"\n          ],\n          \"docstring\": \"Set the selected tags (selection mode only).\",\n          \"name\": \"set_selected_tags\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Refresh the tags in the tag widget.\",\n          \"name\": \"refresh_tags\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Undo the last tag deletion (account creation mode only).\",\n          \"name\": \"undo_last_tag_delete\"\n        }\n      ]\n    },\n    \"ui/widgets/task_settings_widget.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__init__\",\n            \"setup_connections\",\n            \"load_existing_data\",\n            \"showEvent\",\n            \"find_lowest_available_period_number\",\n            \"add_new_period\",\n            \"remove_period_row\",\n            \"undo_last_period_delete\",\n            \"get_task_settings\",\n            \"set_task_settings\",\n            \"get_statistics\",\n            \"get_available_tags\",\n            \"refresh_tags\",\n            \"undo_last_tag_delete\",\n            \"get_recurring_task_settings\",\n            \"set_recurring_task_settings\",\n            \"load_recurring_task_settings\",\n            \"save_recurring_task_settings\"\n          ],\n          \"name\": \"TaskSettingsWidget\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Setup signal connections.\",\n          \"name\": \"setup_connections\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"\",\n          \"name\": \"load_existing_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"event\"\n          ],\n          \"docstring\": \"Handle widget show event.\\n        \\n        Called when the widget becomes visible. Currently just calls the parent\\n        implementation but can be extended for initialization that needs to happen\\n        when the widget is shown.\\n        \\n        Args:\\n            event: The show event object\",\n          \"name\": \"showEvent\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Find the lowest available integer (2+) that's not currently used in period names.\",\n          \"name\": \"find_lowest_available_period_number\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"checked\",\n            \"period_name\",\n            \"period_data\"\n          ],\n          \"docstring\": \"Add a new time period using the PeriodRowWidget.\",\n          \"name\": \"add_new_period\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"row_widget\"\n          ],\n          \"docstring\": \"Remove a period row and store it for undo.\",\n          \"name\": \"remove_period_row\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Undo the last time period deletion.\",\n          \"name\": \"undo_last_period_delete\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the current task settings.\",\n          \"name\": \"get_task_settings\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"settings\"\n          ],\n          \"docstring\": \"Set the task settings.\",\n          \"name\": \"set_task_settings\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get real task statistics for the user.\",\n          \"name\": \"get_statistics\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the current list of available tags from the tag widget.\",\n          \"name\": \"get_available_tags\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Refresh the tags in the tag widget.\",\n          \"name\": \"refresh_tags\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Undo the last tag deletion (account creation mode only).\",\n          \"name\": \"undo_last_tag_delete\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the current recurring task settings.\",\n          \"name\": \"get_recurring_task_settings\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"settings\"\n          ],\n          \"docstring\": \"Set the recurring task settings.\",\n          \"name\": \"set_recurring_task_settings\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load recurring task settings from user preferences.\",\n          \"name\": \"load_recurring_task_settings\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Save recurring task settings to user preferences.\",\n          \"name\": \"save_recurring_task_settings\"\n        }\n      ]\n    },\n    \"ui/widgets/user_profile_settings_widget.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Widget for user profile settings configuration.\",\n          \"methods\": [\n            \"__init__\",\n            \"populate_timezones\",\n            \"load_existing_data\",\n            \"set_checkbox_group\",\n            \"get_personalization_data\",\n            \"_get_personalization_data__extract_basic_fields\",\n            \"_get_personalization_data__extract_gender_identity\",\n            \"_get_personalization_data__extract_date_of_birth\",\n            \"_get_personalization_data__extract_dynamic_containers\",\n            \"_get_personalization_data__extract_loved_ones\",\n            \"_get_personalization_data__extract_notes\",\n            \"_get_personalization_data__ensure_required_fields\",\n            \"get_settings\",\n            \"set_settings\"\n          ],\n          \"name\": \"UserProfileSettingsWidget\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"parent\",\n            \"user_id\",\n            \"existing_data\"\n          ],\n          \"docstring\": \"Initialize the object.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Populate the timezone combo box with options and enable selection.\",\n          \"name\": \"populate_timezones\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load existing personalization data into the form.\",\n          \"name\": \"load_existing_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"group_name\",\n            \"values\"\n          ],\n          \"docstring\": \"Set checkboxes for a specific group based on values.\",\n          \"name\": \"set_checkbox_group\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get all personalization data from the form, preserving existing data structure.\",\n          \"name\": \"get_personalization_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"data\"\n          ],\n          \"docstring\": \"Extract basic text fields from the UI.\",\n          \"name\": \"_get_personalization_data__extract_basic_fields\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"data\"\n          ],\n          \"docstring\": \"Extract gender identity from checkboxes and custom input.\",\n          \"name\": \"_get_personalization_data__extract_gender_identity\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"data\"\n          ],\n          \"docstring\": \"Extract date of birth from calendar widget with proper validation.\",\n          \"name\": \"_get_personalization_data__extract_date_of_birth\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"data\"\n          ],\n          \"docstring\": \"Extract data from all dynamic list containers.\",\n          \"name\": \"_get_personalization_data__extract_dynamic_containers\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"data\"\n          ],\n          \"docstring\": \"Extract loved ones data from text field with structured parsing.\",\n          \"name\": \"_get_personalization_data__extract_loved_ones\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"data\"\n          ],\n          \"docstring\": \"Extract notes for AI from text field.\",\n          \"name\": \"_get_personalization_data__extract_notes\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"data\"\n          ],\n          \"docstring\": \"Ensure all required fields exist in the data structure.\",\n          \"name\": \"_get_personalization_data__ensure_required_fields\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get the current user profile settings.\",\n          \"name\": \"get_settings\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"settings\"\n          ],\n          \"docstring\": \"Set the user profile settings.\",\n          \"name\": \"set_settings\"\n        }\n      ]\n    },\n    \"user/context_manager.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Manages rich user context for AI conversations.\",\n          \"methods\": [\n            \"__init__\",\n            \"get_current_user_context\",\n            \"get_ai_context\",\n            \"_get_user_profile\",\n            \"_get_recent_activity\",\n            \"_get_conversation_insights\",\n            \"_get_user_preferences\",\n            \"_get_mood_trends\",\n            \"_get_conversation_history\",\n            \"add_conversation_exchange\",\n            \"_get_minimal_context\",\n            \"format_context_for_ai\"\n          ],\n          \"name\": \"UserContextManager\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Initialize the UserContextManager.\\n        \\n        Sets up conversation history storage for tracking user interactions.\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"include_conversation_history\"\n          ],\n          \"docstring\": \"Get context for the currently logged-in user using the existing UserContext singleton.\\n        \\n        Args:\\n            include_conversation_history: Whether to include recent conversation history\\n            \\n        Returns:\\n            Dict containing all relevant user context for current user\",\n          \"name\": \"get_current_user_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"include_conversation_history\"\n          ],\n          \"docstring\": \"Get comprehensive user context for AI conversation.\\n        \\n        Args:\\n            user_id: The user's ID\\n            include_conversation_history: Whether to include recent conversation history\\n            \\n        Returns:\\n            Dict containing all relevant user context for AI processing\",\n          \"name\": \"get_ai_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Get basic user profile information using existing user infrastructure.\",\n          \"name\": \"_get_user_profile\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Get recent user activity and responses.\",\n          \"name\": \"_get_recent_activity\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Get insights from recent chat interactions.\",\n          \"name\": \"_get_conversation_insights\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Get user preferences using new structure.\",\n          \"name\": \"_get_user_preferences\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Analyze recent mood and energy trends.\",\n          \"name\": \"_get_mood_trends\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Get recent conversation history with this user.\",\n          \"name\": \"_get_conversation_history\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\",\n            \"user_message\",\n            \"ai_response\"\n          ],\n          \"docstring\": \"Add a conversation exchange to history.\\n        \\n        Args:\\n            user_id: The user's ID\\n            user_message: The user's message\\n            ai_response: The AI's response\",\n          \"name\": \"add_conversation_exchange\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Fallback minimal context if full context generation fails.\\n        \\n        Args:\\n            user_id: The user's ID (can be None for anonymous context)\\n            \\n        Returns:\\n            dict: Minimal context with basic information\",\n          \"name\": \"_get_minimal_context\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"context\"\n          ],\n          \"docstring\": \"Format user context into a concise string for AI prompt.\\n        \\n        Args:\\n            context: User context dictionary\\n            \\n        Returns:\\n            str: Formatted context string for AI consumption\",\n          \"name\": \"format_context_for_ai\"\n        }\n      ]\n    },\n    \"user/user_context.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"\",\n          \"methods\": [\n            \"__new__\",\n            \"load_user_data\",\n            \"save_user_data\",\n            \"set_user_id\",\n            \"get_user_id\",\n            \"set_internal_username\",\n            \"get_internal_username\",\n            \"set_preferred_name\",\n            \"get_preferred_name\",\n            \"set_preference\",\n            \"get_preference\",\n            \"update_preference\",\n            \"get_instance_context\"\n          ],\n          \"name\": \"UserContext\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"cls\"\n          ],\n          \"docstring\": \"Create a new instance.\",\n          \"name\": \"__new__\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Loads user data using the new user management functions.\\n        \\n        Args:\\n            user_id (str): The user ID whose data needs to be loaded.\",\n          \"name\": \"load_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Saves user data using the new user management functions.\\n        \\n        Args:\\n            user_id (str): The user ID whose data needs to be saved.\",\n          \"name\": \"save_user_data\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Sets the user_id in the user_data dictionary.\\n        \\n        Args:\\n            user_id (str): The user ID to be set.\",\n          \"name\": \"set_user_id\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Retrieves the user_id from the user_data dictionary.\\n        \\n        Returns:\\n            str: The current user ID, or None if not set.\",\n          \"name\": \"get_user_id\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"internal_username\"\n          ],\n          \"docstring\": \"Sets the internal_username in the user_data dictionary.\\n        \\n        Args:\\n            internal_username (str): The internal username to be set.\",\n          \"name\": \"set_internal_username\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Retrieves the internal_username from the user_data dictionary.\\n        \\n        Returns:\\n            str: The current internal username, or None if not set.\",\n          \"name\": \"get_internal_username\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"preferred_name\"\n          ],\n          \"docstring\": \"Sets the preferred_name in the user_data dictionary.\\n        \\n        Args:\\n            preferred_name (str): The preferred name to be set.\",\n          \"name\": \"set_preferred_name\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Retrieves the preferred_name from the user_data dictionary.\\n        \\n        Returns:\\n            str: The current preferred name, or None if not set.\",\n          \"name\": \"get_preferred_name\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"key\",\n            \"value\"\n          ],\n          \"docstring\": \"Sets a user preference using UserPreferences.\\n        \\n        Args:\\n            key (str): The preference key to be set.\\n            value (any): The preference value to be set.\",\n          \"name\": \"set_preference\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"key\"\n          ],\n          \"docstring\": \"Retrieves a user preference using UserPreferences.\\n        \\n        Args:\\n            key (str): The preference key to retrieve.\\n        \\n        Returns:\\n            any: The current preference value, or None if not set.\",\n          \"name\": \"get_preference\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"key\",\n            \"value\"\n          ],\n          \"docstring\": \"Updates a user preference using UserPreferences.\\n        \\n        Args:\\n            key (str): The preference key to be updated.\\n            value (any): The preference value to be set.\",\n          \"name\": \"update_preference\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get basic user context from the current UserContext instance.\\n        \\n        Returns:\\n            dict: Dictionary containing basic user context information\",\n          \"name\": \"get_instance_context\"\n        }\n      ]\n    },\n    \"user/user_preferences.py\": {\n      \"classes\": [\n        {\n          \"docstring\": \"Manages user preferences and settings.\\n    \\n    Provides methods for loading, saving, and managing user preferences\\n    including schedule period settings and general user preferences.\",\n          \"methods\": [\n            \"__init__\",\n            \"load_preferences\",\n            \"save_preferences\",\n            \"set_preference\",\n            \"get_preference\",\n            \"update_preference\",\n            \"remove_preference\",\n            \"get_all_preferences\",\n            \"set_schedule_period_active\",\n            \"is_schedule_period_active\"\n          ],\n          \"name\": \"UserPreferences\"\n        }\n      ],\n      \"functions\": [\n        {\n          \"args\": [\n            \"self\",\n            \"user_id\"\n          ],\n          \"docstring\": \"Initialize UserPreferences for a specific user.\\n        \\n        Args:\\n            user_id: The user's unique identifier\",\n          \"name\": \"__init__\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Load user preferences using the new user management functions.\",\n          \"name\": \"load_preferences\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Save user preferences using the new user management functions.\",\n          \"name\": \"save_preferences\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"key\",\n            \"value\"\n          ],\n          \"docstring\": \"Set a preference and save it.\",\n          \"name\": \"set_preference\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"key\"\n          ],\n          \"docstring\": \"Get a preference value.\",\n          \"name\": \"get_preference\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"key\",\n            \"value\"\n          ],\n          \"docstring\": \"Update a preference (alias for set_preference for consistency).\",\n          \"name\": \"update_preference\"\n        },\n        {\n          \"args\": [\n            \"self\",\n            \"key\"\n          ],\n          \"docstring\": \"Remove a preference.\",\n          \"name\": \"remove_preference\"\n        },\n        {\n          \"args\": [\n            \"self\"\n          ],\n          \"docstring\": \"Get all preferences.\",\n          \"name\": \"get_all_preferences\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\",\n            \"period_name\",\n            \"is_active\"\n          ],\n          \"docstring\": \"Wrapper for :func:`core.schedule_management.set_schedule_period_active`.\",\n          \"name\": \"set_schedule_period_active\"\n        },\n        {\n          \"args\": [\n            \"user_id\",\n            \"category\",\n            \"period_name\"\n          ],\n          \"docstring\": \"Wrapper for :func:`core.schedule_management.is_schedule_period_active`.\",\n          \"name\": \"is_schedule_period_active\"\n        }\n      ]\n    }\n  },\n  \"totals\": {\n    \"classes_found\": 340,\n    \"files_scanned\": 171,\n    \"functions_documented\": 2976,\n    \"functions_found\": 3178\n  }\n}\n",
      "error": "",
      "returncode": 1,
      "data": {
        "analysis": {
          "duplicate_count": 154,
          "duplicate_sample": [
            {
              "files": [
                "core/error_handling.py",
                "tests/test_isolation.py"
              ],
              "name": "__enter__"
            },
            {
              "files": [
                "core/error_handling.py",
                "tests/test_isolation.py"
              ],
              "name": "__exit__"
            },
            {
              "files": [
                "ai/cache_manager.py",
                "ai/chatbot.py",
                "ai/context_builder.py",
                "ai/conversation_history.py",
                "ai/prompt_manager.py",
                "communication/communication_channels/base/base_channel.py",
                "communication/communication_channels/base/command_registry.py",
                "communication/communication_channels/base/rich_formatter.py",
                "communication/communication_channels/discord/api_client.py",
                "communication/communication_channels/discord/bot.py",
                "communication/communication_channels/discord/event_handler.py",
                "communication/communication_channels/email/bot.py",
                "communication/core/channel_monitor.py",
                "communication/core/channel_orchestrator.py",
                "communication/core/retry_manager.py",
                "communication/message_processing/command_parser.py",
                "communication/message_processing/conversation_flow_manager.py",
                "communication/message_processing/interaction_manager.py",
                "communication/message_processing/message_router.py",
                "core/backup_manager.py",
                "core/checkin_analytics.py",
                "core/checkin_dynamic_manager.py",
                "core/config.py",
                "core/error_handling.py",
                "core/file_auditor.py",
                "core/logger.py",
                "core/scheduler.py",
                "core/service.py",
                "core/service_utilities.py",
                "core/user_data_manager.py",
                "tests/behavior/test_communication_factory_coverage_expansion.py",
                "tests/conftest.py",
                "tests/test_isolation.py",
                "tests/unit/test_cleanup.py",
                "ui/dialogs/account_creator_dialog.py",
                "ui/dialogs/admin_panel.py",
                "ui/dialogs/category_management_dialog.py",
                "ui/dialogs/channel_management_dialog.py",
                "ui/dialogs/checkin_management_dialog.py",
                "ui/dialogs/schedule_editor_dialog.py",
                "ui/dialogs/task_completion_dialog.py",
                "ui/dialogs/task_crud_dialog.py",
                "ui/dialogs/task_edit_dialog.py",
                "ui/dialogs/task_management_dialog.py",
                "ui/dialogs/user_profile_dialog.py",
                "ui/ui_app_qt.py",
                "ui/widgets/category_selection_widget.py",
                "ui/widgets/channel_selection_widget.py",
                "ui/widgets/checkin_settings_widget.py",
                "ui/widgets/dynamic_list_container.py",
                "ui/widgets/dynamic_list_field.py",
                "ui/widgets/period_row_widget.py",
                "ui/widgets/tag_widget.py",
                "ui/widgets/task_settings_widget.py",
                "ui/widgets/user_profile_settings_widget.py",
                "user/context_manager.py",
                "user/user_preferences.py"
              ],
              "name": "__init__"
            },
            {
              "files": [
                "ai/chatbot.py",
                "communication/core/channel_orchestrator.py",
                "user/user_context.py"
              ],
              "name": "__new__"
            },
            {
              "files": [
                "ai/context_builder.py",
                "ai/conversation_history.py",
                "communication/communication_channels/base/base_channel.py",
                "communication/communication_channels/base/command_registry.py",
                "communication/communication_channels/discord/event_handler.py",
                "ui/widgets/dynamic_list_container.py"
              ],
              "name": "__post_init__"
            }
          ],
          "duplicates": {
            "__enter__": [
              "core/error_handling.py",
              "tests/test_isolation.py"
            ],
            "__exit__": [
              "core/error_handling.py",
              "tests/test_isolation.py"
            ],
            "__init__": [
              "ai/cache_manager.py",
              "ai/chatbot.py",
              "ai/context_builder.py",
              "ai/conversation_history.py",
              "ai/prompt_manager.py",
              "communication/communication_channels/base/base_channel.py",
              "communication/communication_channels/base/command_registry.py",
              "communication/communication_channels/base/rich_formatter.py",
              "communication/communication_channels/discord/api_client.py",
              "communication/communication_channels/discord/bot.py",
              "communication/communication_channels/discord/event_handler.py",
              "communication/communication_channels/email/bot.py",
              "communication/core/channel_monitor.py",
              "communication/core/channel_orchestrator.py",
              "communication/core/retry_manager.py",
              "communication/message_processing/command_parser.py",
              "communication/message_processing/conversation_flow_manager.py",
              "communication/message_processing/interaction_manager.py",
              "communication/message_processing/message_router.py",
              "core/backup_manager.py",
              "core/checkin_analytics.py",
              "core/checkin_dynamic_manager.py",
              "core/config.py",
              "core/error_handling.py",
              "core/file_auditor.py",
              "core/logger.py",
              "core/scheduler.py",
              "core/service.py",
              "core/service_utilities.py",
              "core/user_data_manager.py",
              "tests/behavior/test_communication_factory_coverage_expansion.py",
              "tests/conftest.py",
              "tests/test_isolation.py",
              "tests/unit/test_cleanup.py",
              "ui/dialogs/account_creator_dialog.py",
              "ui/dialogs/admin_panel.py",
              "ui/dialogs/category_management_dialog.py",
              "ui/dialogs/channel_management_dialog.py",
              "ui/dialogs/checkin_management_dialog.py",
              "ui/dialogs/schedule_editor_dialog.py",
              "ui/dialogs/task_completion_dialog.py",
              "ui/dialogs/task_crud_dialog.py",
              "ui/dialogs/task_edit_dialog.py",
              "ui/dialogs/task_management_dialog.py",
              "ui/dialogs/user_profile_dialog.py",
              "ui/ui_app_qt.py",
              "ui/widgets/category_selection_widget.py",
              "ui/widgets/channel_selection_widget.py",
              "ui/widgets/checkin_settings_widget.py",
              "ui/widgets/dynamic_list_container.py",
              "ui/widgets/dynamic_list_field.py",
              "ui/widgets/period_row_widget.py",
              "ui/widgets/tag_widget.py",
              "ui/widgets/task_settings_widget.py",
              "ui/widgets/user_profile_settings_widget.py",
              "user/context_manager.py",
              "user/user_preferences.py"
            ],
            "__new__": [
              "ai/chatbot.py",
              "communication/core/channel_orchestrator.py",
              "user/user_context.py"
            ],
            "__post_init__": [
              "ai/context_builder.py",
              "ai/conversation_history.py",
              "communication/communication_channels/base/base_channel.py",
              "communication/communication_channels/base/command_registry.py",
              "communication/communication_channels/discord/event_handler.py",
              "ui/widgets/dynamic_list_container.py"
            ],
            "_handle_add_schedule_period": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/schedule_handler.py"
            ],
            "_handle_add_schedule_period__parse_time_format": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/schedule_handler.py"
            ],
            "_handle_checkin_history": [
              "communication/command_handlers/analytics_handler.py",
              "communication/command_handlers/interaction_handlers.py"
            ],
            "_handle_checkin_status": [
              "communication/command_handlers/checkin_handler.py",
              "communication/command_handlers/interaction_handlers.py"
            ],
            "_handle_complete_task": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_complete_task__find_task_by_identifier": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_completion_rate": [
              "communication/command_handlers/analytics_handler.py",
              "communication/command_handlers/interaction_handlers.py"
            ],
            "_handle_continue_checkin": [
              "communication/command_handlers/checkin_handler.py",
              "communication/command_handlers/interaction_handlers.py"
            ],
            "_handle_create_task": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_create_task__parse_relative_date": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_delete_task": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_delete_task__find_task_by_identifier": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_edit_schedule_period": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/schedule_handler.py"
            ],
            "_handle_edit_schedule_period__parse_time_format": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/schedule_handler.py"
            ],
            "_handle_habit_analysis": [
              "communication/command_handlers/analytics_handler.py",
              "communication/command_handlers/interaction_handlers.py"
            ],
            "_handle_list_tasks": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_list_tasks__apply_filters": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_list_tasks__build_filter_info": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_list_tasks__build_response": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_list_tasks__create_rich_data": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_list_tasks__format_due_date": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_list_tasks__format_list": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_list_tasks__generate_suggestions": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_list_tasks__get_suggestion": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_list_tasks__no_tasks_response": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_list_tasks__sort_tasks": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_mood_trends": [
              "communication/command_handlers/analytics_handler.py",
              "communication/command_handlers/interaction_handlers.py"
            ],
            "_handle_profile_stats": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/profile_handler.py"
            ],
            "_handle_quant_summary": [
              "communication/command_handlers/analytics_handler.py",
              "communication/command_handlers/interaction_handlers.py"
            ],
            "_handle_schedule_status": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/schedule_handler.py"
            ],
            "_handle_show_analytics": [
              "communication/command_handlers/analytics_handler.py",
              "communication/command_handlers/interaction_handlers.py"
            ],
            "_handle_show_profile": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/profile_handler.py"
            ],
            "_handle_show_schedule": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/schedule_handler.py"
            ],
            "_handle_sleep_analysis": [
              "communication/command_handlers/analytics_handler.py",
              "communication/command_handlers/interaction_handlers.py"
            ],
            "_handle_start_checkin": [
              "communication/command_handlers/checkin_handler.py",
              "communication/command_handlers/interaction_handlers.py"
            ],
            "_handle_task_stats": [
              "communication/command_handlers/analytics_handler.py",
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_update_profile": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/profile_handler.py"
            ],
            "_handle_update_schedule": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/schedule_handler.py"
            ],
            "_handle_update_task": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_update_task__find_task_by_identifier": [
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/task_handler.py"
            ],
            "_handle_wellness_score": [
              "communication/command_handlers/analytics_handler.py",
              "communication/command_handlers/interaction_handlers.py"
            ],
            "_is_valid_intent": [
              "communication/message_processing/command_parser.py",
              "communication/message_processing/interaction_manager.py"
            ],
            "_setup": [
              "tests/behavior/test_logger_coverage_expansion.py",
              "tests/behavior/test_user_management_coverage_expansion.py"
            ],
            "add_message": [
              "ai/conversation_history.py",
              "core/message_management.py",
              "tests/behavior/test_ai_conversation_history_behavior.py"
            ],
            "add_new_period": [
              "ui/dialogs/schedule_editor_dialog.py",
              "ui/widgets/checkin_settings_widget.py",
              "ui/widgets/task_settings_widget.py"
            ],
            "can_handle": [
              "communication/command_handlers/analytics_handler.py",
              "communication/command_handlers/base_handler.py",
              "communication/command_handlers/checkin_handler.py",
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/profile_handler.py",
              "communication/command_handlers/schedule_handler.py",
              "communication/command_handlers/task_handler.py",
              "core/error_handling.py"
            ],
            "cancel": [
              "ui/dialogs/schedule_editor_dialog.py",
              "ui/dialogs/user_profile_dialog.py"
            ],
            "center_dialog": [
              "ui/dialogs/account_creator_dialog.py",
              "ui/dialogs/schedule_editor_dialog.py",
              "ui/dialogs/user_profile_dialog.py"
            ],
            "channel_type": [
              "communication/communication_channels/base/base_channel.py",
              "communication/communication_channels/discord/bot.py",
              "communication/communication_channels/email/bot.py",
              "tests/behavior/test_communication_factory_coverage_expansion.py"
            ],
            "cleanup_old_archives": [
              "core/logger.py",
              "tests/conftest.py"
            ],
            "cleanup_test_environment": [
              "tests/behavior/test_account_management_real_behavior.py",
              "tests/test_utilities.py"
            ],
            "comm_manager": [
              "tests/behavior/test_communication_behavior.py",
              "tests/behavior/test_communication_manager_coverage_expansion.py"
            ],
            "create_new_user": [
              "core/user_management.py",
              "ui/ui_app_qt.py"
            ],
            "critical": [
              "core/file_auditor.py",
              "core/logger.py",
              "tests/conftest.py"
            ],
            "debug": [
              "core/file_auditor.py",
              "core/logger.py"
            ],
            "dialog": [
              "tests/ui/test_account_creation_ui.py",
              "tests/ui/test_dialog_behavior.py",
              "tests/ui/test_dialog_coverage_expansion.py",
              "tests/ui/test_user_profile_dialog_coverage_expansion.py"
            ],
            "error": [
              "core/file_auditor.py",
              "core/logger.py"
            ],
            "find_lowest_available_period_number": [
              "ui/dialogs/schedule_editor_dialog.py",
              "ui/widgets/checkin_settings_widget.py",
              "ui/widgets/task_settings_widget.py"
            ],
            "format": [
              "core/logger.py",
              "tests/conftest.py"
            ],
            "generate_response": [
              "ai/chatbot.py",
              "tests/behavior/test_ai_chatbot_behavior.py"
            ],
            "get_all_user_ids": [
              "core/user_data_handlers.py",
              "core/user_management.py"
            ],
            "get_available_tags": [
              "ui/widgets/tag_widget.py",
              "ui/widgets/task_settings_widget.py"
            ],
            "get_checkin_history": [
              "core/checkin_analytics.py",
              "tests/behavior/test_interaction_handlers_coverage_expansion.py"
            ],
            "get_checkin_settings": [
              "ui/dialogs/checkin_management_dialog.py",
              "ui/widgets/checkin_settings_widget.py"
            ],
            "get_command_definitions": [
              "communication/message_processing/interaction_manager.py",
              "communication/message_processing/message_router.py"
            ],
            "get_examples": [
              "communication/command_handlers/analytics_handler.py",
              "communication/command_handlers/base_handler.py",
              "communication/command_handlers/checkin_handler.py",
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/profile_handler.py",
              "communication/command_handlers/schedule_handler.py",
              "communication/command_handlers/task_handler.py"
            ],
            "get_help": [
              "communication/command_handlers/analytics_handler.py",
              "communication/command_handlers/base_handler.py",
              "communication/command_handlers/checkin_handler.py",
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/profile_handler.py",
              "communication/command_handlers/schedule_handler.py",
              "communication/command_handlers/task_handler.py"
            ],
            "get_mood_trends": [
              "core/checkin_analytics.py",
              "tests/behavior/test_interaction_handlers_coverage_expansion.py"
            ],
            "get_preference": [
              "user/user_context.py",
              "user/user_preferences.py"
            ],
            "get_recent_messages": [
              "ai/conversation_history.py",
              "core/message_management.py"
            ],
            "get_registered_channels": [
              "communication/core/channel_orchestrator.py",
              "communication/core/factory.py"
            ],
            "get_selected_categories": [
              "ui/dialogs/category_management_dialog.py",
              "ui/widgets/category_selection_widget.py"
            ],
            "get_selected_channel": [
              "ui/dialogs/channel_management_dialog.py",
              "ui/widgets/channel_selection_widget.py"
            ],
            "get_slash_command_map": [
              "communication/message_processing/interaction_manager.py",
              "communication/message_processing/message_router.py"
            ],
            "get_statistics": [
              "ai/conversation_history.py",
              "ui/dialogs/task_management_dialog.py",
              "ui/widgets/task_settings_widget.py"
            ],
            "get_timestamp_for_sorting": [
              "core/message_management.py",
              "core/response_tracking.py"
            ],
            "handle": [
              "communication/command_handlers/analytics_handler.py",
              "communication/command_handlers/base_handler.py",
              "communication/command_handlers/checkin_handler.py",
              "communication/command_handlers/interaction_handlers.py",
              "communication/command_handlers/profile_handler.py",
              "communication/command_handlers/schedule_handler.py",
              "communication/command_handlers/task_handler.py"
            ],
            "handle_task_reminder": [
              "communication/core/channel_orchestrator.py",
              "core/scheduler.py"
            ],
            "info": [
              "core/file_auditor.py",
              "core/logger.py"
            ],
            "inner_function": [
              "tests/behavior/test_error_handling_coverage_expansion_phase3_final.py",
              "tests/unit/test_error_handling.py"
            ],
            "is_schedule_period_active": [
              "core/schedule_management.py",
              "user/user_preferences.py"
            ],
            "is_service_running": [
              "core/service_utilities.py",
              "ui/ui_app_qt.py"
            ],
            "keyPressEvent": [
              "ui/dialogs/account_creator_dialog.py",
              "ui/dialogs/user_profile_dialog.py"
            ],
            "load_existing_data": [
              "ui/dialogs/schedule_editor_dialog.py",
              "ui/widgets/checkin_settings_widget.py",
              "ui/widgets/task_settings_widget.py",
              "ui/widgets/user_profile_settings_widget.py"
            ],
            "main": [
              "core/service.py",
              "run_mhm.py",
              "run_tests.py",
              "tests/behavior/test_account_management_real_behavior.py",
              "tests/unit/test_cleanup.py",
              "ui/generate_ui_files.py",
              "ui/ui_app_qt.py"
            ],
            "mock_channel_config": [
              "tests/behavior/test_communication_behavior.py",
              "tests/behavior/test_communication_manager_coverage_expansion.py"
            ],
            "mock_communication_manager": [
              "tests/behavior/test_core_service_coverage_expansion.py",
              "tests/behavior/test_interaction_handlers_coverage_expansion.py",
              "tests/behavior/test_scheduler_behavior.py",
              "tests/behavior/test_scheduler_coverage_expansion.py"
            ],
            "mock_config": [
              "tests/behavior/test_core_service_coverage_expansion.py",
              "tests/conftest.py"
            ],
            "mock_user_data": [
              "tests/conftest.py",
              "tests/ui/test_channel_management_dialog_coverage_expansion.py"
            ],
            "mock_user_data_dir": [
              "tests/behavior/test_task_management_coverage_expansion.py",
              "tests/ui/test_ui_widgets_coverage_expansion.py"
            ],
            "open_personalization_dialog": [
              "ui/dialogs/account_creator_dialog.py",
              "ui/dialogs/user_profile_dialog.py"
            ],
            "open_schedule_editor": [
              "ui/dialogs/schedule_editor_dialog.py",
              "ui/ui_app_qt.py"
            ],
            "outer_function": [
              "tests/behavior/test_error_handling_coverage_expansion_phase3_final.py",
              "tests/unit/test_error_handling.py"
            ],
            "parse_command": [
              "communication/message_processing/command_parser.py",
              "tests/behavior/test_enhanced_command_parser_behavior.py"
            ],
            "populate_timezones": [
              "ui/widgets/channel_selection_widget.py",
              "ui/widgets/user_profile_settings_widget.py"
            ],
            "qapp": [
              "tests/ui/test_account_creation_ui.py",
              "tests/ui/test_dialog_behavior.py",
              "tests/ui/test_dialog_coverage_expansion.py",
              "tests/ui/test_user_profile_dialog_coverage_expansion.py",
              "tests/ui/test_widget_behavior.py",
              "tests/ui/test_widget_behavior_simple.py"
            ],
            "realistic_mock_channel": [
              "tests/behavior/test_communication_behavior.py",
              "tests/behavior/test_communication_manager_coverage_expansion.py"
            ],
            "refresh_tags": [
              "ui/widgets/tag_widget.py",
              "ui/widgets/task_settings_widget.py"
            ],
            "register_data_loader": [
              "core/user_data_handlers.py",
              "core/user_management.py"
            ],
            "remove_period_row": [
              "ui/dialogs/schedule_editor_dialog.py",
              "ui/widgets/checkin_settings_widget.py",
              "ui/widgets/task_settings_widget.py"
            ],
            "retranslateUi": [
              "ui/generated/account_creator_dialog_pyqt.py",
              "ui/generated/admin_panel_pyqt.py",
              "ui/generated/category_management_dialog_pyqt.py",
              "ui/generated/category_selection_widget_pyqt.py",
              "ui/generated/channel_management_dialog_pyqt.py",
              "ui/generated/channel_selection_widget_pyqt.py",
              "ui/generated/checkin_element_template_pyqt.py",
              "ui/generated/checkin_management_dialog_pyqt.py",
              "ui/generated/checkin_settings_widget_pyqt.py",
              "ui/generated/dynamic_list_field_template_pyqt.py",
              "ui/generated/period_row_template_pyqt.py",
              "ui/generated/schedule_editor_dialog_pyqt.py",
              "ui/generated/tag_widget_pyqt.py",
              "ui/generated/task_completion_dialog_pyqt.py",
              "ui/generated/task_crud_dialog_pyqt.py",
              "ui/generated/task_edit_dialog_pyqt.py",
              "ui/generated/task_management_dialog_pyqt.py",
              "ui/generated/task_settings_widget_pyqt.py",
              "ui/generated/user_profile_management_dialog_pyqt.py",
              "ui/generated/user_profile_settings_widget_pyqt.py"
            ],
            "save_user_data": [
              "core/user_data_handlers.py",
              "user/user_context.py"
            ],
            "scheduler_manager": [
              "tests/behavior/test_scheduler_behavior.py",
              "tests/behavior/test_scheduler_coverage_expansion.py"
            ],
            "service": [
              "tests/behavior/test_core_service_coverage_expansion.py",
              "tests/behavior/test_service_behavior.py"
            ],
            "set_checkin_settings": [
              "ui/dialogs/checkin_management_dialog.py",
              "ui/widgets/checkin_settings_widget.py"
            ],
            "set_preference": [
              "user/user_context.py",
              "user/user_preferences.py"
            ],
            "set_schedule_period_active": [
              "core/schedule_management.py",
              "user/user_preferences.py"
            ],
            "set_selected_categories": [
              "ui/dialogs/category_management_dialog.py",
              "ui/widgets/category_selection_widget.py"
            ],
            "set_selected_channel": [
              "ui/dialogs/channel_management_dialog.py",
              "ui/widgets/channel_selection_widget.py"
            ],
            "setupUi": [
              "ui/generated/account_creator_dialog_pyqt.py",
              "ui/generated/admin_panel_pyqt.py",
              "ui/generated/category_management_dialog_pyqt.py",
              "ui/generated/category_selection_widget_pyqt.py",
              "ui/generated/channel_management_dialog_pyqt.py",
              "ui/generated/channel_selection_widget_pyqt.py",
              "ui/generated/checkin_element_template_pyqt.py",
              "ui/generated/checkin_management_dialog_pyqt.py",
              "ui/generated/checkin_settings_widget_pyqt.py",
              "ui/generated/dynamic_list_field_template_pyqt.py",
              "ui/generated/period_row_template_pyqt.py",
              "ui/generated/schedule_editor_dialog_pyqt.py",
              "ui/generated/tag_widget_pyqt.py",
              "ui/generated/task_completion_dialog_pyqt.py",
              "ui/generated/task_crud_dialog_pyqt.py",
              "ui/generated/task_edit_dialog_pyqt.py",
              "ui/generated/task_management_dialog_pyqt.py",
              "ui/generated/task_settings_widget_pyqt.py",
              "ui/generated/user_profile_management_dialog_pyqt.py",
              "ui/generated/user_profile_settings_widget_pyqt.py"
            ],
            "setup_connections": [
              "ui/dialogs/account_creator_dialog.py",
              "ui/dialogs/task_completion_dialog.py",
              "ui/dialogs/task_crud_dialog.py",
              "ui/dialogs/task_edit_dialog.py",
              "ui/widgets/checkin_settings_widget.py",
              "ui/widgets/tag_widget.py",
              "ui/widgets/task_settings_widget.py"
            ],
            "setup_functionality": [
              "ui/dialogs/schedule_editor_dialog.py",
              "ui/widgets/period_row_widget.py"
            ],
            "setup_method": [
              "tests/behavior/test_command_parser_coverage_expansion_phase3_simple.py",
              "tests/behavior/test_email_bot_behavior.py",
              "tests/behavior/test_enhanced_command_parser_behavior.py"
            ],
            "setup_test_environment": [
              "tests/behavior/test_account_management_real_behavior.py",
              "tests/integration/test_account_lifecycle.py",
              "tests/test_utilities.py"
            ],
            "setup_ui": [
              "ui/dialogs/admin_panel.py",
              "ui/dialogs/task_completion_dialog.py",
              "ui/dialogs/task_crud_dialog.py",
              "ui/dialogs/task_edit_dialog.py",
              "ui/dialogs/user_profile_dialog.py",
              "ui/widgets/tag_widget.py"
            ],
            "showEvent": [
              "ui/widgets/checkin_settings_widget.py",
              "ui/widgets/task_settings_widget.py"
            ],
            "sort_key": [
              "core/schedule_management.py",
              "ui/dialogs/schedule_editor_dialog.py"
            ],
            "start": [
              "core/file_auditor.py",
              "core/service.py"
            ],
            "teardown_method": [
              "tests/behavior/test_logger_coverage_expansion.py",
              "tests/behavior/test_user_management_coverage_expansion.py"
            ],
            "temp_dir": [
              "tests/behavior/test_communication_behavior.py",
              "tests/behavior/test_service_behavior.py",
              "tests/behavior/test_task_behavior.py",
              "tests/behavior/test_task_management_coverage_expansion.py",
              "tests/ui/test_ui_widgets_coverage_expansion.py"
            ],
            "test_checkin_enablement_real_behavior": [
              "tests/ui/test_dialog_behavior.py",
              "tests/ui/test_widget_behavior.py"
            ],
            "test_cleanup_old_logs_real_behavior": [
              "tests/behavior/test_logger_behavior.py",
              "tests/behavior/test_logger_coverage_expansion.py"
            ],
            "test_data_dir": [
              "tests/behavior/test_communication_manager_coverage_expansion.py",
              "tests/behavior/test_interaction_handlers_coverage_expansion.py",
              "tests/conftest.py"
            ],
            "test_data_saving_real_behavior": [
              "tests/ui/test_dialog_behavior.py",
              "tests/ui/test_dialog_coverage_expansion.py"
            ],
            "test_delete_task_real_behavior": [
              "tests/behavior/test_task_management_coverage_expansion.py",
              "tests/ui/test_dialog_coverage_expansion.py"
            ],
            "test_dialog_initialization_real_behavior": [
              "tests/ui/test_account_creation_ui.py",
              "tests/ui/test_dialog_behavior.py",
              "tests/ui/test_dialog_coverage_expansion.py"
            ],
            "test_discord_user_creation": [
              "tests/behavior/test_utilities_demo.py",
              "tests/integration/test_user_creation.py"
            ],
            "test_dynamic_list_fields_real_behavior": [
              "tests/ui/test_dialog_behavior.py",
              "tests/ui/test_dialog_coverage_expansion.py"
            ],
            "test_ensure_user_directory_success": [
              "tests/behavior/test_config_coverage_expansion_phase3_simple.py",
              "tests/unit/test_file_operations.py"
            ],
            "test_feature_enablement_real_behavior": [
              "tests/behavior/test_account_management_real_behavior.py",
              "tests/ui/test_account_creation_ui.py"
            ],
            "test_function": [
              "tests/behavior/test_error_handling_coverage_expansion_phase3_final.py",
              "tests/unit/test_error_handling.py"
            ],
            "test_get_log_file_info_real_behavior": [
              "tests/behavior/test_logger_behavior.py",
              "tests/behavior/test_logger_coverage_expansion.py"
            ],
            "test_initialize_paths_real_behavior": [
              "tests/behavior/test_core_service_coverage_expansion.py",
              "tests/behavior/test_service_behavior.py"
            ],
            "test_main_function_real_behavior": [
              "tests/behavior/test_core_service_coverage_expansion.py",
              "tests/behavior/test_service_behavior.py"
            ],
            "test_set_verbose_mode_real_behavior": [
              "tests/behavior/test_logger_behavior.py",
              "tests/behavior/test_logger_coverage_expansion.py"
            ],
            "test_signal_handler_real_behavior": [
              "tests/behavior/test_core_service_coverage_expansion.py",
              "tests/behavior/test_service_behavior.py"
            ],
            "test_suppress_noisy_logging_real_behavior": [
              "tests/behavior/test_logger_behavior.py",
              "tests/behavior/test_logger_coverage_expansion.py"
            ],
            "test_user_data": [
              "tests/ui/test_dialog_coverage_expansion.py",
              "tests/ui/test_user_profile_dialog_coverage_expansion.py"
            ],
            "test_validate_ai_configuration_missing_url": [
              "tests/behavior/test_config_coverage_expansion_phase3_simple.py",
              "tests/unit/test_config.py"
            ],
            "test_validate_core_paths_success": [
              "tests/behavior/test_config_coverage_expansion_phase3_simple.py",
              "tests/unit/test_config.py"
            ],
            "undo_last_tag_delete": [
              "ui/widgets/tag_widget.py",
              "ui/widgets/task_settings_widget.py"
            ],
            "update_channel_preferences": [
              "core/user_data_handlers.py",
              "core/user_management.py"
            ],
            "update_preference": [
              "user/user_context.py",
              "user/user_preferences.py"
            ],
            "update_user_account": [
              "core/user_data_handlers.py",
              "core/user_management.py"
            ],
            "update_user_context": [
              "core/user_data_handlers.py",
              "core/user_management.py"
            ],
            "update_user_schedules": [
              "core/user_data_handlers.py",
              "core/user_management.py"
            ],
            "user_id": [
              "tests/behavior/test_task_behavior.py",
              "tests/behavior/test_task_management_coverage_expansion.py",
              "tests/ui/test_ui_widgets_coverage_expansion.py"
            ],
            "validate_configuration": [
              "core/service.py",
              "ui/ui_app_qt.py"
            ],
            "warning": [
              "core/file_auditor.py",
              "core/logger.py",
              "tests/conftest.py"
            ]
          },
          "high_complexity": [
            {
              "complexity": 1962,
              "file": "core/user_data_handlers.py",
              "has_docstring": true,
              "name": "get_user_data"
            },
            {
              "complexity": 1102,
              "file": "communication/command_handlers/profile_handler.py",
              "has_docstring": true,
              "name": "_handle_show_profile"
            },
            {
              "complexity": 992,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_show_profile"
            },
            {
              "complexity": 986,
              "file": "ai/chatbot.py",
              "has_docstring": true,
              "name": "_get_contextual_fallback"
            },
            {
              "complexity": 929,
              "file": "communication/message_processing/interaction_manager.py",
              "has_docstring": true,
              "name": "handle_message"
            },
            {
              "complexity": 888,
              "file": "ai/chatbot.py",
              "has_docstring": true,
              "name": "_create_comprehensive_context_prompt"
            },
            {
              "complexity": 872,
              "file": "tests/conftest.py",
              "has_docstring": true,
              "name": "shim_get_user_data_to_invoke_loaders"
            },
            {
              "complexity": 815,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_update_profile"
            },
            {
              "complexity": 815,
              "file": "communication/command_handlers/profile_handler.py",
              "has_docstring": true,
              "name": "_handle_update_profile"
            },
            {
              "complexity": 810,
              "file": "communication/message_processing/command_parser.py",
              "has_docstring": true,
              "name": "_extract_entities_rule_based"
            },
            {
              "complexity": 808,
              "file": "communication/communication_channels/discord/bot.py",
              "has_docstring": true,
              "name": "initialize__register_events"
            },
            {
              "complexity": 742,
              "file": "core/user_data_handlers.py",
              "has_docstring": true,
              "name": "_save_user_data__save_single_type"
            },
            {
              "complexity": 721,
              "file": "communication/command_handlers/profile_handler.py",
              "has_docstring": true,
              "name": "_format_profile_text"
            },
            {
              "complexity": 698,
              "file": "ai/chatbot.py",
              "has_docstring": true,
              "name": "generate_contextual_response"
            },
            {
              "complexity": 692,
              "file": "ui/ui_app_qt.py",
              "has_docstring": true,
              "name": "validate_configuration"
            },
            {
              "complexity": 683,
              "file": "tests/conftest.py",
              "has_docstring": true,
              "name": "setup_component_log_rotation"
            },
            {
              "complexity": 671,
              "file": "ui/widgets/user_profile_settings_widget.py",
              "has_docstring": true,
              "name": "load_existing_data"
            },
            {
              "complexity": 669,
              "file": "ui/widgets/user_profile_settings_widget.py",
              "has_docstring": true,
              "name": "__init__"
            },
            {
              "complexity": 668,
              "file": "communication/core/channel_orchestrator.py",
              "has_docstring": true,
              "name": "_send_predefined_message"
            },
            {
              "complexity": 651,
              "file": "ui/dialogs/account_creator_dialog.py",
              "has_docstring": true,
              "name": "validate_input"
            },
            {
              "complexity": 614,
              "file": "ui/dialogs/task_edit_dialog.py",
              "has_docstring": true,
              "name": "render_reminder_period_row"
            },
            {
              "complexity": 609,
              "file": "tests/conftest.py",
              "has_docstring": true,
              "name": "mock_user_data"
            },
            {
              "complexity": 605,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_show_schedule"
            },
            {
              "complexity": 605,
              "file": "communication/command_handlers/schedule_handler.py",
              "has_docstring": true,
              "name": "_handle_show_schedule"
            },
            {
              "complexity": 593,
              "file": "ai/chatbot.py",
              "has_docstring": true,
              "name": "generate_response"
            },
            {
              "complexity": 591,
              "file": "core/user_data_validation.py",
              "has_docstring": true,
              "name": "validate_user_update"
            },
            {
              "complexity": 584,
              "file": "ui/ui_app_qt.py",
              "has_docstring": true,
              "name": "system_health_check"
            },
            {
              "complexity": 577,
              "file": "tests/conftest.py",
              "has_docstring": false,
              "name": "_apply_get_user_data_shim_early"
            },
            {
              "complexity": 573,
              "file": "ui/ui_app_qt.py",
              "has_docstring": true,
              "name": "stop_service"
            },
            {
              "complexity": 567,
              "file": "ui/ui_app_qt.py",
              "has_docstring": true,
              "name": "refresh_user_list"
            },
            {
              "complexity": 565,
              "file": "run_tests.py",
              "has_docstring": false,
              "name": "main"
            },
            {
              "complexity": 557,
              "file": "core/schedule_management.py",
              "has_docstring": true,
              "name": "get_schedule_time_periods"
            },
            {
              "complexity": 553,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_edit_schedule_period"
            },
            {
              "complexity": 553,
              "file": "communication/command_handlers/schedule_handler.py",
              "has_docstring": true,
              "name": "_handle_edit_schedule_period"
            },
            {
              "complexity": 529,
              "file": "ai/context_builder.py",
              "has_docstring": true,
              "name": "create_context_prompt"
            },
            {
              "complexity": 528,
              "file": "core/user_data_manager.py",
              "has_docstring": true,
              "name": "update_user_index"
            },
            {
              "complexity": 522,
              "file": "tests/conftest.py",
              "has_docstring": true,
              "name": "mock_user_data_with_messages"
            },
            {
              "complexity": 517,
              "file": "core/user_management.py",
              "has_docstring": true,
              "name": "create_new_user"
            },
            {
              "complexity": 509,
              "file": "communication/communication_channels/discord/bot.py",
              "has_docstring": true,
              "name": "initialize__register_commands"
            },
            {
              "complexity": 489,
              "file": "core/user_data_manager.py",
              "has_docstring": true,
              "name": "rebuild_full_index"
            },
            {
              "complexity": 489,
              "file": "communication/command_handlers/analytics_handler.py",
              "has_docstring": true,
              "name": "_handle_checkin_analysis"
            },
            {
              "complexity": 486,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_create_task"
            },
            {
              "complexity": 476,
              "file": "core/service.py",
              "has_docstring": true,
              "name": "run_service_loop"
            },
            {
              "complexity": 463,
              "file": "core/scheduler.py",
              "has_docstring": true,
              "name": "schedule_all_users_immediately"
            },
            {
              "complexity": 454,
              "file": "core/service.py",
              "has_docstring": true,
              "name": "start"
            },
            {
              "complexity": 446,
              "file": "core/user_data_validation.py",
              "has_docstring": true,
              "name": "validate_schedule_periods"
            },
            {
              "complexity": 445,
              "file": "ui/dialogs/channel_management_dialog.py",
              "has_docstring": false,
              "name": "save_channel_settings"
            },
            {
              "complexity": 438,
              "file": "core/logger.py",
              "has_docstring": false,
              "name": "__init__"
            },
            {
              "complexity": 429,
              "file": "communication/command_handlers/analytics_handler.py",
              "has_docstring": true,
              "name": "_handle_task_analytics"
            },
            {
              "complexity": 422,
              "file": "core/scheduler.py",
              "has_docstring": true,
              "name": "schedule_message_at_random_time"
            },
            {
              "complexity": 421,
              "file": "ui/ui_app_qt.py",
              "has_docstring": true,
              "name": "connect_signals"
            },
            {
              "complexity": 419,
              "file": "core/logger.py",
              "has_docstring": true,
              "name": "get_component_logger"
            },
            {
              "complexity": 419,
              "file": "core/scheduler.py",
              "has_docstring": true,
              "name": "clear_all_accumulated_jobs"
            },
            {
              "complexity": 419,
              "file": "ui/dialogs/task_edit_dialog.py",
              "has_docstring": true,
              "name": "load_task_data"
            },
            {
              "complexity": 405,
              "file": "tests/conftest.py",
              "has_docstring": false,
              "name": "wrapped_get_user_data"
            },
            {
              "complexity": 397,
              "file": "core/message_management.py",
              "has_docstring": true,
              "name": "archive_old_messages"
            },
            {
              "complexity": 395,
              "file": "tasks/task_management.py",
              "has_docstring": true,
              "name": "complete_task"
            },
            {
              "complexity": 394,
              "file": "ui/dialogs/category_management_dialog.py",
              "has_docstring": true,
              "name": "save_category_settings"
            },
            {
              "complexity": 394,
              "file": "tasks/task_management.py",
              "has_docstring": true,
              "name": "_create_next_recurring_task_instance"
            },
            {
              "complexity": 386,
              "file": "communication/message_processing/conversation_flow_manager.py",
              "has_docstring": true,
              "name": "_select_checkin_questions_with_weighting"
            },
            {
              "complexity": 381,
              "file": "core/checkin_analytics.py",
              "has_docstring": true,
              "name": "get_mood_trends"
            },
            {
              "complexity": 380,
              "file": "core/scheduler.py",
              "has_docstring": true,
              "name": "get_random_time_within_period"
            },
            {
              "complexity": 380,
              "file": "core/user_data_validation.py",
              "has_docstring": true,
              "name": "validate_new_user_data"
            },
            {
              "complexity": 380,
              "file": "ui/ui_app_qt.py",
              "has_docstring": true,
              "name": "view_all_users_summary"
            },
            {
              "complexity": 378,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_add_schedule_period"
            },
            {
              "complexity": 378,
              "file": "communication/command_handlers/schedule_handler.py",
              "has_docstring": true,
              "name": "_handle_add_schedule_period"
            },
            {
              "complexity": 376,
              "file": "ui/dialogs/task_edit_dialog.py",
              "has_docstring": true,
              "name": "save_task"
            },
            {
              "complexity": 375,
              "file": "core/scheduler.py",
              "has_docstring": true,
              "name": "run_daily_scheduler"
            },
            {
              "complexity": 368,
              "file": "core/user_data_handlers.py",
              "has_docstring": true,
              "name": "update_user_preferences"
            },
            {
              "complexity": 368,
              "file": "ui/ui_app_qt.py",
              "has_docstring": true,
              "name": "start_service"
            },
            {
              "complexity": 366,
              "file": "ui/dialogs/channel_management_dialog.py",
              "has_docstring": true,
              "name": "__init__"
            },
            {
              "complexity": 365,
              "file": "core/logger.py",
              "has_docstring": true,
              "name": "_get_log_paths_for_environment"
            },
            {
              "complexity": 361,
              "file": "ui/dialogs/task_management_dialog.py",
              "has_docstring": true,
              "name": "save_task_settings"
            },
            {
              "complexity": 360,
              "file": "communication/core/channel_orchestrator.py",
              "has_docstring": true,
              "name": "_initialize_channel_with_retry_sync"
            },
            {
              "complexity": 360,
              "file": "ai/context_builder.py",
              "has_docstring": true,
              "name": "analyze_context"
            },
            {
              "complexity": 359,
              "file": "core/scheduler.py",
              "has_docstring": true,
              "name": "schedule_message_for_period"
            },
            {
              "complexity": 358,
              "file": "communication/command_handlers/analytics_handler.py",
              "has_docstring": true,
              "name": "_handle_task_stats"
            },
            {
              "complexity": 357,
              "file": "communication/message_processing/command_parser.py",
              "has_docstring": true,
              "name": "_ai_enhanced_parse"
            },
            {
              "complexity": 350,
              "file": "communication/command_handlers/task_handler.py",
              "has_docstring": true,
              "name": "_handle_create_task"
            },
            {
              "complexity": 350,
              "file": "communication/core/channel_orchestrator.py",
              "has_docstring": true,
              "name": "send_message_sync"
            },
            {
              "complexity": 347,
              "file": "ui/dialogs/checkin_management_dialog.py",
              "has_docstring": true,
              "name": "save_checkin_settings"
            },
            {
              "complexity": 347,
              "file": "ui/widgets/dynamic_list_field.py",
              "has_docstring": true,
              "name": "__init__"
            },
            {
              "complexity": 346,
              "file": "communication/message_processing/command_parser.py",
              "has_docstring": false,
              "name": "__init__"
            },
            {
              "complexity": 345,
              "file": "core/scheduler.py",
              "has_docstring": true,
              "name": "schedule_all_task_reminders"
            },
            {
              "complexity": 345,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_complete_task__find_task_by_identifier"
            },
            {
              "complexity": 341,
              "file": "core/logger.py",
              "has_docstring": true,
              "name": "doRollover"
            },
            {
              "complexity": 340,
              "file": "core/user_management.py",
              "has_docstring": true,
              "name": "get_user_id_by_identifier"
            },
            {
              "complexity": 338,
              "file": "core/user_data_handlers.py",
              "has_docstring": true,
              "name": "_save_user_data__validate_data"
            },
            {
              "complexity": 335,
              "file": "ui/ui_app_qt.py",
              "has_docstring": true,
              "name": "edit_user_messages"
            },
            {
              "complexity": 334,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_task_stats"
            },
            {
              "complexity": 334,
              "file": "communication/command_handlers/task_handler.py",
              "has_docstring": true,
              "name": "_handle_task_stats"
            },
            {
              "complexity": 328,
              "file": "ui/dialogs/task_edit_dialog.py",
              "has_docstring": true,
              "name": "collect_reminder_periods"
            },
            {
              "complexity": 327,
              "file": "core/file_operations.py",
              "has_docstring": true,
              "name": "load_json_data"
            },
            {
              "complexity": 327,
              "file": "core/scheduler.py",
              "has_docstring": true,
              "name": "schedule_daily_message_job"
            },
            {
              "complexity": 326,
              "file": "ui/dialogs/account_creator_dialog.py",
              "has_docstring": true,
              "name": "setup_connections"
            },
            {
              "complexity": 325,
              "file": "core/user_data_validation.py",
              "has_docstring": true,
              "name": "validate_personalization_data"
            },
            {
              "complexity": 324,
              "file": "ui/widgets/tag_widget.py",
              "has_docstring": true,
              "name": "edit_tag"
            },
            {
              "complexity": 320,
              "file": "communication/communication_channels/discord/bot.py",
              "has_docstring": true,
              "name": "_create_discord_embed"
            },
            {
              "complexity": 318,
              "file": "core/user_management.py",
              "has_docstring": true,
              "name": "_get_user_data__load_context"
            },
            {
              "complexity": 313,
              "file": "core/user_management.py",
              "has_docstring": true,
              "name": "_get_user_data__load_account"
            },
            {
              "complexity": 312,
              "file": "core/message_management.py",
              "has_docstring": true,
              "name": "create_message_file_from_defaults"
            },
            {
              "complexity": 312,
              "file": "core/scheduler.py",
              "has_docstring": false,
              "name": "scheduler_loop"
            },
            {
              "complexity": 311,
              "file": "tests/unit/test_cleanup.py",
              "has_docstring": true,
              "name": "main"
            },
            {
              "complexity": 309,
              "file": "ui/widgets/dynamic_list_container.py",
              "has_docstring": true,
              "name": "__init__"
            },
            {
              "complexity": 307,
              "file": "core/message_management.py",
              "has_docstring": true,
              "name": "get_recent_messages"
            },
            {
              "complexity": 306,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_delete_task__find_task_by_identifier"
            },
            {
              "complexity": 306,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_update_task__find_task_by_identifier"
            },
            {
              "complexity": 306,
              "file": "communication/command_handlers/task_handler.py",
              "has_docstring": true,
              "name": "_handle_complete_task__find_task_by_identifier"
            },
            {
              "complexity": 306,
              "file": "communication/command_handlers/task_handler.py",
              "has_docstring": true,
              "name": "_handle_delete_task__find_task_by_identifier"
            },
            {
              "complexity": 306,
              "file": "communication/command_handlers/task_handler.py",
              "has_docstring": true,
              "name": "_handle_update_task__find_task_by_identifier"
            },
            {
              "complexity": 306,
              "file": "ui/dialogs/user_profile_dialog.py",
              "has_docstring": true,
              "name": "add_loved_one_widget"
            },
            {
              "complexity": 304,
              "file": "core/config.py",
              "has_docstring": true,
              "name": "validate_logging_configuration"
            },
            {
              "complexity": 304,
              "file": "core/logger.py",
              "has_docstring": true,
              "name": "compress_old_logs"
            },
            {
              "complexity": 304,
              "file": "core/message_management.py",
              "has_docstring": true,
              "name": "ensure_user_message_files"
            },
            {
              "complexity": 304,
              "file": "ui/widgets/period_row_widget.py",
              "has_docstring": true,
              "name": "__init__"
            },
            {
              "complexity": 304,
              "file": "tests/conftest.py",
              "has_docstring": true,
              "name": "enforce_user_dir_locations"
            },
            {
              "complexity": 303,
              "file": "core/logger.py",
              "has_docstring": true,
              "name": "get_log_file_info"
            },
            {
              "complexity": 303,
              "file": "ui/dialogs/user_profile_dialog.py",
              "has_docstring": true,
              "name": "create_custom_field_list"
            },
            {
              "complexity": 303,
              "file": "tasks/task_management.py",
              "has_docstring": true,
              "name": "update_task"
            },
            {
              "complexity": 302,
              "file": "core/scheduler.py",
              "has_docstring": true,
              "name": "schedule_checkin_at_exact_time"
            },
            {
              "complexity": 301,
              "file": "core/checkin_analytics.py",
              "has_docstring": true,
              "name": "get_sleep_analysis"
            },
            {
              "complexity": 301,
              "file": "communication/message_processing/conversation_flow_manager.py",
              "has_docstring": true,
              "name": "_handle_command_during_checkin"
            },
            {
              "complexity": 300,
              "file": "tasks/task_management.py",
              "has_docstring": true,
              "name": "create_task"
            },
            {
              "complexity": 298,
              "file": "ui/widgets/tag_widget.py",
              "has_docstring": true,
              "name": "delete_tag"
            },
            {
              "complexity": 297,
              "file": "core/scheduler.py",
              "has_docstring": true,
              "name": "schedule_task_reminder_at_time"
            },
            {
              "complexity": 297,
              "file": "core/user_management.py",
              "has_docstring": true,
              "name": "ensure_category_has_default_schedule"
            },
            {
              "complexity": 297,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_status"
            },
            {
              "complexity": 297,
              "file": "ui/ui_app_qt.py",
              "has_docstring": true,
              "name": "view_cache_status"
            },
            {
              "complexity": 295,
              "file": "communication/message_processing/interaction_manager.py",
              "has_docstring": true,
              "name": "_enhance_response_with_ai"
            },
            {
              "complexity": 294,
              "file": "core/user_data_manager.py",
              "has_docstring": true,
              "name": "remove_from_index"
            },
            {
              "complexity": 294,
              "file": "ui/dialogs/task_management_dialog.py",
              "has_docstring": true,
              "name": "__init__"
            },
            {
              "complexity": 292,
              "file": "core/logger.py",
              "has_docstring": true,
              "name": "cleanup_old_logs"
            },
            {
              "complexity": 291,
              "file": "core/backup_manager.py",
              "has_docstring": true,
              "name": "_cleanup_old_backups"
            },
            {
              "complexity": 290,
              "file": "communication/core/channel_orchestrator.py",
              "has_docstring": true,
              "name": "handle_task_reminder"
            },
            {
              "complexity": 289,
              "file": "core/checkin_analytics.py",
              "has_docstring": true,
              "name": "get_quantitative_summaries"
            },
            {
              "complexity": 289,
              "file": "ui/widgets/tag_widget.py",
              "has_docstring": true,
              "name": "add_tag"
            },
            {
              "complexity": 288,
              "file": "ui/widgets/user_profile_settings_widget.py",
              "has_docstring": true,
              "name": "set_checkbox_group"
            },
            {
              "complexity": 287,
              "file": "core/user_data_manager.py",
              "has_docstring": true,
              "name": "export_user_data"
            },
            {
              "complexity": 286,
              "file": "tests/behavior/test_account_management_real_behavior.py",
              "has_docstring": true,
              "name": "main"
            },
            {
              "complexity": 285,
              "file": "core/file_operations.py",
              "has_docstring": true,
              "name": "determine_file_path"
            },
            {
              "complexity": 285,
              "file": "communication/command_handlers/analytics_handler.py",
              "has_docstring": true,
              "name": "_handle_show_analytics"
            },
            {
              "complexity": 285,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_show_analytics"
            },
            {
              "complexity": 285,
              "file": "tests/conftest.py",
              "has_docstring": false,
              "name": "wrapped_get_user_data"
            },
            {
              "complexity": 284,
              "file": "tests/conftest.py",
              "has_docstring": true,
              "name": "materialize_user_minimal_via_public_apis"
            },
            {
              "complexity": 281,
              "file": "core/scheduler.py",
              "has_docstring": true,
              "name": "schedule_new_user"
            },
            {
              "complexity": 280,
              "file": "communication/communication_channels/discord/bot.py",
              "has_docstring": true,
              "name": "_check_dns_resolution"
            },
            {
              "complexity": 279,
              "file": "core/message_management.py",
              "has_docstring": true,
              "name": "store_sent_message"
            },
            {
              "complexity": 279,
              "file": "core/user_management.py",
              "has_docstring": true,
              "name": "_get_user_data__load_preferences"
            },
            {
              "complexity": 278,
              "file": "core/checkin_dynamic_manager.py",
              "has_docstring": true,
              "name": "validate_answer"
            },
            {
              "complexity": 276,
              "file": "core/error_handling.py",
              "has_docstring": true,
              "name": "handle_error"
            },
            {
              "complexity": 276,
              "file": "tests/integration/test_account_lifecycle.py",
              "has_docstring": true,
              "name": "_materialize_and_verify"
            },
            {
              "complexity": 273,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_complete_task"
            },
            {
              "complexity": 271,
              "file": "ai/conversation_history.py",
              "has_docstring": true,
              "name": "get_conversation_summary"
            },
            {
              "complexity": 270,
              "file": "core/config.py",
              "has_docstring": true,
              "name": "validate_core_paths"
            },
            {
              "complexity": 270,
              "file": "core/schedule_management.py",
              "has_docstring": true,
              "name": "set_schedule_periods"
            },
            {
              "complexity": 267,
              "file": "communication/command_handlers/analytics_handler.py",
              "has_docstring": true,
              "name": "_handle_checkin_history"
            },
            {
              "complexity": 265,
              "file": "ui/widgets/dynamic_list_container.py",
              "has_docstring": false,
              "name": "_deduplicate_values"
            },
            {
              "complexity": 265,
              "file": "ui/widgets/period_row_widget.py",
              "has_docstring": true,
              "name": "load_period_data"
            },
            {
              "complexity": 264,
              "file": "core/user_data_manager.py",
              "has_docstring": true,
              "name": "get_user_analytics_summary"
            },
            {
              "complexity": 264,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_list_tasks__format_list"
            },
            {
              "complexity": 263,
              "file": "core/config.py",
              "has_docstring": true,
              "name": "print_configuration_report"
            },
            {
              "complexity": 261,
              "file": "user/context_manager.py",
              "has_docstring": true,
              "name": "_get_conversation_insights"
            },
            {
              "complexity": 260,
              "file": "ui/dialogs/task_crud_dialog.py",
              "has_docstring": true,
              "name": "refresh_active_tasks"
            },
            {
              "complexity": 258,
              "file": "tests/test_utilities.py",
              "has_docstring": true,
              "name": "create_corrupted_user_data"
            },
            {
              "complexity": 258,
              "file": "run_tests.py",
              "has_docstring": true,
              "name": "run_command"
            },
            {
              "complexity": 255,
              "file": "communication/command_handlers/analytics_handler.py",
              "has_docstring": true,
              "name": "_handle_habit_analysis"
            },
            {
              "complexity": 255,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_habit_analysis"
            },
            {
              "complexity": 254,
              "file": "core/user_data_manager.py",
              "has_docstring": true,
              "name": "backup_user_data"
            },
            {
              "complexity": 253,
              "file": "core/user_data_manager.py",
              "has_docstring": true,
              "name": "get_user_summary"
            },
            {
              "complexity": 252,
              "file": "communication/communication_channels/base/rich_formatter.py",
              "has_docstring": true,
              "name": "create_embed"
            },
            {
              "complexity": 251,
              "file": "core/user_data_manager.py",
              "has_docstring": true,
              "name": "_get_last_interaction"
            },
            {
              "complexity": 248,
              "file": "core/schedule_utilities.py",
              "has_docstring": true,
              "name": "is_schedule_active"
            },
            {
              "complexity": 248,
              "file": "core/user_data_manager.py",
              "has_docstring": true,
              "name": "update_message_references"
            },
            {
              "complexity": 247,
              "file": "core/file_operations.py",
              "has_docstring": true,
              "name": "_create_user_files__schedules_file"
            },
            {
              "complexity": 247,
              "file": "core/user_data_handlers.py",
              "has_docstring": true,
              "name": "save_user_data"
            },
            {
              "complexity": 247,
              "file": "tasks/task_management.py",
              "has_docstring": true,
              "name": "schedule_task_reminders"
            },
            {
              "complexity": 246,
              "file": "communication/command_handlers/analytics_handler.py",
              "has_docstring": true,
              "name": "_handle_quant_summary"
            },
            {
              "complexity": 246,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_quant_summary"
            },
            {
              "complexity": 246,
              "file": "ui/widgets/dynamic_list_container.py",
              "has_docstring": false,
              "name": "set_values"
            },
            {
              "complexity": 244,
              "file": "core/message_management.py",
              "has_docstring": true,
              "name": "load_default_messages"
            },
            {
              "complexity": 244,
              "file": "ui/dialogs/task_completion_dialog.py",
              "has_docstring": true,
              "name": "setup_completion_time_components"
            },
            {
              "complexity": 243,
              "file": "communication/core/channel_orchestrator.py",
              "has_docstring": true,
              "name": "handle_message_sending"
            },
            {
              "complexity": 241,
              "file": "ui/dialogs/checkin_management_dialog.py",
              "has_docstring": true,
              "name": "__init__"
            },
            {
              "complexity": 240,
              "file": "core/config.py",
              "has_docstring": true,
              "name": "validate_all_configuration"
            },
            {
              "complexity": 240,
              "file": "communication/command_handlers/analytics_handler.py",
              "has_docstring": true,
              "name": "_handle_mood_trends"
            },
            {
              "complexity": 240,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_mood_trends"
            },
            {
              "complexity": 240,
              "file": "user/context_manager.py",
              "has_docstring": true,
              "name": "_get_recent_activity"
            },
            {
              "complexity": 238,
              "file": "ui/widgets/period_row_widget.py",
              "has_docstring": true,
              "name": "setup_functionality"
            },
            {
              "complexity": 237,
              "file": "core/file_operations.py",
              "has_docstring": true,
              "name": "save_json_data"
            },
            {
              "complexity": 237,
              "file": "ui/dialogs/task_crud_dialog.py",
              "has_docstring": true,
              "name": "refresh_completed_tasks"
            },
            {
              "complexity": 235,
              "file": "core/schedule_management.py",
              "has_docstring": true,
              "name": "get_current_time_periods_with_validation"
            },
            {
              "complexity": 235,
              "file": "communication/command_handlers/analytics_handler.py",
              "has_docstring": true,
              "name": "_handle_wellness_score"
            },
            {
              "complexity": 235,
              "file": "communication/command_handlers/interaction_handlers.py",
              "has_docstring": true,
              "name": "_handle_wellness_score"
            },
            {
              "complexity": 234,
              "file": "communication/command_handlers/task_handler.py",
              "has_docstring": true,
              "name": "_handle_list_tasks__format_list"
            },
            {
              "complexity": 231,
              "file": "core/service_utilities.py",
              "has_docstring": true,
              "name": "create_reschedule_request"
            },
            {
              "complexity": 231,
              "file": "run_mhm.py",
              "has_docstring": true,
              "name": "main"
            },
            {
              "complexity": 230,
              "file": "communication/message_processing/conversation_flow_manager.py",
              "has_docstring": true,
              "name": "_handle_checkin"
            },
            {
              "complexity": 230,
              "file": "ui/dialogs/task_crud_dialog.py",
              "has_docstring": true,
              "name": "setup_ui"
            },
            {
              "complexity": 229,
              "file": "core/user_data_validation.py",
              "has_docstring": true,
              "name": "_shared__title_case"
            },
            {
              "complexity": 229,
              "file": "tasks/task_management.py",
              "has_docstring": true,
              "name": "restore_task"
            }
          ],
          "high_complexity_total": 1008,
          "undocumented_handlers": [
            {
              "file": "communication/command_handlers/analytics_handler.py",
              "name": "can_handle"
            },
            {
              "file": "communication/command_handlers/analytics_handler.py",
              "name": "get_examples"
            },
            {
              "file": "communication/command_handlers/analytics_handler.py",
              "name": "get_help"
            },
            {
              "file": "communication/command_handlers/analytics_handler.py",
              "name": "handle"
            },
            {
              "file": "communication/command_handlers/checkin_handler.py",
              "name": "can_handle"
            },
            {
              "file": "communication/command_handlers/checkin_handler.py",
              "name": "get_examples"
            },
            {
              "file": "communication/command_handlers/checkin_handler.py",
              "name": "get_help"
            },
            {
              "file": "communication/command_handlers/checkin_handler.py",
              "name": "handle"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "can_handle"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "can_handle"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "can_handle"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "can_handle"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "can_handle"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "can_handle"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "get_examples"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "get_examples"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "get_examples"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "get_examples"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "get_examples"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "get_examples"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "get_help"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "get_help"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "get_help"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "get_help"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "get_help"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "get_help"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "handle"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "handle"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "handle"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "handle"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "handle"
            },
            {
              "file": "communication/command_handlers/interaction_handlers.py",
              "name": "handle"
            },
            {
              "file": "communication/command_handlers/profile_handler.py",
              "name": "can_handle"
            },
            {
              "file": "communication/command_handlers/profile_handler.py",
              "name": "get_examples"
            },
            {
              "file": "communication/command_handlers/profile_handler.py",
              "name": "get_help"
            },
            {
              "file": "communication/command_handlers/profile_handler.py",
              "name": "handle"
            },
            {
              "file": "communication/command_handlers/schedule_handler.py",
              "name": "can_handle"
            },
            {
              "file": "communication/command_handlers/schedule_handler.py",
              "name": "get_examples"
            },
            {
              "file": "communication/command_handlers/schedule_handler.py",
              "name": "get_help"
            },
            {
              "file": "communication/command_handlers/schedule_handler.py",
              "name": "handle"
            },
            {
              "file": "communication/command_handlers/task_handler.py",
              "name": "can_handle"
            },
            {
              "file": "communication/command_handlers/task_handler.py",
              "name": "get_examples"
            },
            {
              "file": "communication/command_handlers/task_handler.py",
              "name": "get_help"
            },
            {
              "file": "communication/command_handlers/task_handler.py",
              "name": "handle"
            },
            {
              "file": "core/schemas.py",
              "name": "_validate_discord_id"
            },
            {
              "file": "core/schemas.py",
              "name": "_validate_email"
            },
            {
              "file": "core/schemas.py",
              "name": "_validate_timezone"
            },
            {
              "file": "core/schemas.py",
              "name": "validate_account_dict"
            },
            {
              "file": "core/schemas.py",
              "name": "validate_messages_file_dict"
            },
            {
              "file": "core/schemas.py",
              "name": "validate_preferences_dict"
            },
            {
              "file": "core/schemas.py",
              "name": "validate_schedules_dict"
            },
            {
              "file": "core/user_data_validation.py",
              "name": "validate_schedule_periods__validate_time_format"
            },
            {
              "file": "core/user_management.py",
              "name": "_ensure_default_loaders_once"
            },
            {
              "file": "tests/behavior/test_interaction_handlers_coverage_expansion.py",
              "name": "_mock_get_user_data"
            },
            {
              "file": "tests/behavior/test_interaction_handlers_coverage_expansion.py",
              "name": "get_checkin_history"
            },
            {
              "file": "tests/behavior/test_interaction_handlers_coverage_expansion.py",
              "name": "get_mood_trends"
            },
            {
              "file": "tests/behavior/test_logger_coverage_expansion.py",
              "name": "create_record"
            },
            {
              "file": "tests/behavior/test_service_behavior.py",
              "name": "mock_get_user_data_side_effect"
            },
            {
              "file": "tests/conftest.py",
              "name": "_apply_get_user_data_shim_early"
            },
            {
              "file": "tests/conftest.py",
              "name": "_load_single_type"
            },
            {
              "file": "tests/conftest.py",
              "name": "_load_single_type"
            },
            {
              "file": "tests/conftest.py",
              "name": "_update_index"
            },
            {
              "file": "tests/conftest.py",
              "name": "verify_user_data_loader_registry"
            },
            {
              "file": "tests/conftest.py",
              "name": "wrapped_get_user_data"
            },
            {
              "file": "tests/conftest.py",
              "name": "wrapped_get_user_data"
            },
            {
              "file": "tests/ui/test_dialogs.py",
              "name": "mock_save"
            },
            {
              "file": "tests/ui/test_ui_widgets_coverage_expansion.py",
              "name": "on_delete_requested"
            },
            {
              "file": "tests/unit/test_user_data_loader_order_insensitivity.py",
              "name": "_reload_in_order"
            },
            {
              "file": "ui/dialogs/account_creator_dialog.py",
              "name": "on_personalization_save"
            },
            {
              "file": "ui/dialogs/category_management_dialog.py",
              "name": "get_selected_categories"
            },
            {
              "file": "ui/dialogs/category_management_dialog.py",
              "name": "set_selected_categories"
            },
            {
              "file": "ui/dialogs/channel_management_dialog.py",
              "name": "get_selected_channel"
            },
            {
              "file": "ui/dialogs/channel_management_dialog.py",
              "name": "save_channel_settings"
            },
            {
              "file": "ui/dialogs/channel_management_dialog.py",
              "name": "set_selected_channel"
            },
            {
              "file": "ui/dialogs/checkin_management_dialog.py",
              "name": "on_enable_checkins_toggled"
            },
            {
              "file": "ui/dialogs/task_management_dialog.py",
              "name": "get_statistics"
            },
            {
              "file": "ui/dialogs/task_management_dialog.py",
              "name": "on_enable_task_management_toggled"
            },
            {
              "file": "ui/generated/account_creator_dialog_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/admin_panel_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/category_management_dialog_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/category_selection_widget_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/channel_management_dialog_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/channel_selection_widget_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/checkin_element_template_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/checkin_management_dialog_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/checkin_settings_widget_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/dynamic_list_field_template_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/period_row_template_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/schedule_editor_dialog_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/tag_widget_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/task_completion_dialog_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/task_crud_dialog_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/task_edit_dialog_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/task_management_dialog_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/task_settings_widget_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/user_profile_management_dialog_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/generated/user_profile_settings_widget_pyqt.py",
              "name": "setupUi"
            },
            {
              "file": "ui/ui_app_qt.py",
              "name": "manage_categories"
            },
            {
              "file": "ui/ui_app_qt.py",
              "name": "manage_checkins"
            },
            {
              "file": "ui/ui_app_qt.py",
              "name": "manage_communication_settings"
            },
            {
              "file": "ui/ui_app_qt.py",
              "name": "manage_personalization"
            },
            {
              "file": "ui/ui_app_qt.py",
              "name": "manage_task_crud"
            },
            {
              "file": "ui/ui_app_qt.py",
              "name": "manage_tasks"
            },
            {
              "file": "ui/ui_app_qt.py",
              "name": "on_save"
            },
            {
              "file": "ui/widgets/category_selection_widget.py",
              "name": "get_selected_categories"
            },
            {
              "file": "ui/widgets/category_selection_widget.py",
              "name": "set_selected_categories"
            },
            {
              "file": "ui/widgets/channel_selection_widget.py",
              "name": "get_selected_channel"
            },
            {
              "file": "ui/widgets/channel_selection_widget.py",
              "name": "set_contact_info"
            },
            {
              "file": "ui/widgets/channel_selection_widget.py",
              "name": "set_selected_channel"
            },
            {
              "file": "ui/widgets/dynamic_list_container.py",
              "name": "_on_preset_toggled"
            },
            {
              "file": "ui/widgets/dynamic_list_container.py",
              "name": "_on_row_deleted"
            },
            {
              "file": "ui/widgets/dynamic_list_container.py",
              "name": "get_values"
            },
            {
              "file": "ui/widgets/dynamic_list_container.py",
              "name": "set_values"
            },
            {
              "file": "ui/widgets/dynamic_list_field.py",
              "name": "_on_delete"
            },
            {
              "file": "ui/widgets/dynamic_list_field.py",
              "name": "get_text"
            },
            {
              "file": "ui/widgets/dynamic_list_field.py",
              "name": "is_checked"
            },
            {
              "file": "ui/widgets/dynamic_list_field.py",
              "name": "set_checked"
            },
            {
              "file": "ui/widgets/dynamic_list_field.py",
              "name": "set_text"
            },
            {
              "file": "ui/widgets/task_settings_widget.py",
              "name": "load_existing_data"
            }
          ],
          "undocumented_handlers_total": 119,
          "undocumented_other": [
            {
              "file": "communication/message_processing/command_parser.py",
              "name": "__init__"
            },
            {
              "file": "communication/message_processing/conversation_flow_manager.py",
              "name": "start_analytics_flow"
            },
            {
              "file": "communication/message_processing/conversation_flow_manager.py",
              "name": "start_messages_flow"
            },
            {
              "file": "communication/message_processing/conversation_flow_manager.py",
              "name": "start_profile_flow"
            },
            {
              "file": "communication/message_processing/conversation_flow_manager.py",
              "name": "start_schedule_flow"
            },
            {
              "file": "communication/message_processing/interaction_manager.py",
              "name": "__init__"
            },
            {
              "file": "core/error_handling.py",
              "name": "decorator"
            },
            {
              "file": "core/error_handling.py",
              "name": "wrapper"
            },
            {
              "file": "core/file_auditor.py",
              "name": "__init__"
            },
            {
              "file": "core/file_auditor.py",
              "name": "_classify_path"
            },
            {
              "file": "core/file_auditor.py",
              "name": "_split_env_list"
            },
            {
              "file": "core/file_auditor.py",
              "name": "critical"
            },
            {
              "file": "core/file_auditor.py",
              "name": "debug"
            },
            {
              "file": "core/file_auditor.py",
              "name": "error"
            },
            {
              "file": "core/file_auditor.py",
              "name": "info"
            },
            {
              "file": "core/file_auditor.py",
              "name": "start_auditor"
            },
            {
              "file": "core/file_auditor.py",
              "name": "stop_auditor"
            },
            {
              "file": "core/file_auditor.py",
              "name": "warning"
            },
            {
              "file": "core/logger.py",
              "name": "__init__"
            },
            {
              "file": "core/logger.py",
              "name": "__init__"
            },
            {
              "file": "core/logger.py",
              "name": "__init__"
            },
            {
              "file": "core/logger.py",
              "name": "__init__"
            },
            {
              "file": "core/logger.py",
              "name": "__init__"
            },
            {
              "file": "core/logger.py",
              "name": "__init__"
            },
            {
              "file": "core/logger.py",
              "name": "critical"
            },
            {
              "file": "core/logger.py",
              "name": "debug"
            },
            {
              "file": "core/logger.py",
              "name": "error"
            },
            {
              "file": "core/logger.py",
              "name": "filter"
            },
            {
              "file": "core/logger.py",
              "name": "filter"
            },
            {
              "file": "core/logger.py",
              "name": "format"
            },
            {
              "file": "core/logger.py",
              "name": "info"
            },
            {
              "file": "core/logger.py",
              "name": "warning"
            },
            {
              "file": "core/schedule_management.py",
              "name": "add_schedule_period"
            },
            {
              "file": "core/schedule_management.py",
              "name": "edit_schedule_period"
            },
            {
              "file": "core/schedule_management.py",
              "name": "sort_key"
            },
            {
              "file": "core/scheduler.py",
              "name": "scheduler_loop"
            },
            {
              "file": "core/schemas.py",
              "name": "_accept_legacy_shape"
            },
            {
              "file": "core/schemas.py",
              "name": "_coerce_bool"
            },
            {
              "file": "core/schemas.py",
              "name": "_normalize_contact"
            },
            {
              "file": "core/schemas.py",
              "name": "_normalize_days"
            },
            {
              "file": "core/schemas.py",
              "name": "_normalize_flags"
            },
            {
              "file": "core/schemas.py",
              "name": "_normalize_periods"
            },
            {
              "file": "core/schemas.py",
              "name": "_valid_days"
            },
            {
              "file": "core/schemas.py",
              "name": "_valid_time"
            },
            {
              "file": "core/schemas.py",
              "name": "to_dict"
            },
            {
              "file": "core/user_data_validation.py",
              "name": "is_valid_email"
            },
            {
              "file": "core/user_data_validation.py",
              "name": "is_valid_phone"
            },
            {
              "file": "tests/behavior/test_ai_chatbot_behavior.py",
              "name": "generate_response"
            },
            {
              "file": "tests/behavior/test_ai_context_builder_behavior.py",
              "name": "build_context"
            },
            {
              "file": "tests/behavior/test_ai_conversation_history_behavior.py",
              "name": "add_message"
            },
            {
              "file": "tests/behavior/test_auto_cleanup_behavior.py",
              "name": "mock_exists_with_changes"
            },
            {
              "file": "tests/behavior/test_auto_cleanup_behavior.py",
              "name": "mock_walk_with_error"
            },
            {
              "file": "tests/behavior/test_backup_manager_behavior.py",
              "name": "failing_operation"
            },
            {
              "file": "tests/behavior/test_communication_factory_coverage_expansion.py",
              "name": "__init__"
            },
            {
              "file": "tests/behavior/test_communication_factory_coverage_expansion.py",
              "name": "__init__"
            },
            {
              "file": "tests/behavior/test_communication_factory_coverage_expansion.py",
              "name": "channel_type"
            },
            {
              "file": "tests/behavior/test_communication_factory_coverage_expansion.py",
              "name": "channel_type"
            },
            {
              "file": "tests/behavior/test_core_service_coverage_expansion.py",
              "name": "mock_remove_with_disappearing_files"
            },
            {
              "file": "tests/behavior/test_core_service_coverage_expansion.py",
              "name": "mock_remove_with_partial_failure"
            },
            {
              "file": "tests/behavior/test_email_bot_behavior.py",
              "name": "send_email"
            },
            {
              "file": "tests/behavior/test_enhanced_command_parser_behavior.py",
              "name": "parse_command"
            },
            {
              "file": "tests/behavior/test_error_handling_coverage_expansion_phase3_final.py",
              "name": "inner_function"
            },
            {
              "file": "tests/behavior/test_error_handling_coverage_expansion_phase3_final.py",
              "name": "outer_function"
            },
            {
              "file": "tests/behavior/test_logger_coverage_expansion.py",
              "name": "log_messages"
            },
            {
              "file": "tests/behavior/test_logger_coverage_expansion.py",
              "name": "log_messages"
            },
            {
              "file": "tests/behavior/test_logger_coverage_expansion.py",
              "name": "log_messages"
            },
            {
              "file": "tests/behavior/test_logger_coverage_expansion.py",
              "name": "write_logs"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "mock_path"
            },
            {
              "file": "tests/behavior/test_user_management_coverage_expansion.py",
              "name": "user_operation"
            },
            {
              "file": "tests/conftest.py",
              "name": "__init__"
            },
            {
              "file": "tests/conftest.py",
              "name": "__init__"
            },
            {
              "file": "tests/conftest.py",
              "name": "_helper"
            },
            {
              "file": "tests/conftest.py",
              "name": "_missing_keys"
            },
            {
              "file": "tests/conftest.py",
              "name": "about"
            },
            {
              "file": "tests/conftest.py",
              "name": "critical"
            },
            {
              "file": "tests/conftest.py",
              "name": "format"
            },
            {
              "file": "tests/conftest.py",
              "name": "information"
            },
            {
              "file": "tests/conftest.py",
              "name": "question"
            },
            {
              "file": "tests/conftest.py",
              "name": "toggle_data_shim_per_marker"
            },
            {
              "file": "tests/conftest.py",
              "name": "warning"
            },
            {
              "file": "tests/integration/test_account_lifecycle.py",
              "name": "_ensure_minimal_structure"
            },
            {
              "file": "tests/test_isolation.py",
              "name": "__enter__"
            },
            {
              "file": "tests/test_isolation.py",
              "name": "__exit__"
            },
            {
              "file": "tests/test_isolation.py",
              "name": "__init__"
            },
            {
              "file": "tests/ui/test_account_creation_ui.py",
              "name": "mock_accept_impl"
            },
            {
              "file": "tests/ui/test_ui_widgets_coverage_expansion.py",
              "name": "on_tags_changed"
            },
            {
              "file": "tests/ui/test_ui_widgets_coverage_expansion.py",
              "name": "on_values_changed"
            },
            {
              "file": "tests/unit/test_error_handling.py",
              "name": "backup_function"
            },
            {
              "file": "tests/unit/test_error_handling.py",
              "name": "cleanup_function"
            },
            {
              "file": "tests/unit/test_error_handling.py",
              "name": "corrupt_data_function"
            },
            {
              "file": "tests/unit/test_error_handling.py",
              "name": "inner_function"
            },
            {
              "file": "tests/unit/test_error_handling.py",
              "name": "inner_function"
            },
            {
              "file": "tests/unit/test_error_handling.py",
              "name": "outer_function"
            },
            {
              "file": "tests/unit/test_error_handling.py",
              "name": "outer_function"
            },
            {
              "file": "tests/unit/test_error_handling.py",
              "name": "recover_data_function"
            },
            {
              "file": "tests/unit/test_error_handling.py",
              "name": "state_validation_function"
            },
            {
              "file": "ui/dialogs/schedule_editor_dialog.py",
              "name": "sort_key"
            },
            {
              "file": "ui/generated/account_creator_dialog_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/admin_panel_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/category_management_dialog_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/category_selection_widget_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/channel_management_dialog_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/channel_selection_widget_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/checkin_element_template_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/checkin_management_dialog_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/checkin_settings_widget_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/dynamic_list_field_template_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/period_row_template_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/schedule_editor_dialog_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/tag_widget_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/task_completion_dialog_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/task_crud_dialog_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/task_edit_dialog_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/task_management_dialog_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/task_settings_widget_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/user_profile_management_dialog_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/generated/user_profile_settings_widget_pyqt.py",
              "name": "retranslateUi"
            },
            {
              "file": "ui/ui_app_qt.py",
              "name": "cleanup_old_requests"
            },
            {
              "file": "ui/widgets/dynamic_list_container.py",
              "name": "_add_blank_row"
            },
            {
              "file": "ui/widgets/dynamic_list_container.py",
              "name": "_deduplicate_values"
            },
            {
              "file": "ui/widgets/dynamic_list_container.py",
              "name": "_ensure_single_blank_row"
            },
            {
              "file": "ui/widgets/dynamic_list_container.py",
              "name": "_first_blank_index"
            },
            {
              "file": "ui/widgets/dynamic_list_container.py",
              "name": "_on_row_edited"
            },
            {
              "file": "ui/widgets/dynamic_list_field.py",
              "name": "is_blank"
            }
          ],
          "undocumented_other_total": 141
        },
        "coverage": 93.64,
        "errors": [
          "Syntax error C:\\Users\\Julie\\projects\\MHM\\MHM\\tmp_rebuild_archive_norm.py: line 1: invalid non-printable character U+FEFF"
        ],
        "extra": {
          "count": 2976,
          "files": {
            "`ai/cache_manager.py": [
              "__init__",
              "_cleanup_lru",
              "_generate_key",
              "_remove_entry",
              "clear",
              "clear_expired",
              "get",
              "get_context_cache",
              "get_entries_by_type",
              "get_response_cache",
              "get_stats",
              "remove_entries_by_type",
              "remove_user_entries",
              "set"
            ],
            "`ai/chatbot.py": [
              "__init__",
              "__new__",
              "_call_lm_studio_api",
              "_create_command_parsing_prompt",
              "_create_command_parsing_with_clarification_prompt",
              "_create_comprehensive_context_prompt",
              "_detect_mode",
              "_detect_resource_constraints",
              "_enhance_conversational_engagement",
              "_get_adaptive_timeout",
              "_get_contextual_fallback",
              "_get_fallback_personalized_message",
              "_get_fallback_response",
              "_make_cache_key_inputs",
              "_optimize_prompt",
              "_smart_truncate_response",
              "_test_lm_studio_connection",
              "generate_contextual_response",
              "generate_personalized_message",
              "generate_quick_response",
              "generate_response",
              "get_ai_chatbot",
              "get_ai_status",
              "is_ai_available",
              "reload_system_prompt",
              "test_system_prompt_integration"
            ],
            "`ai/context_builder.py": [
              "__init__",
              "__post_init__",
              "_calculate_wellness_score",
              "_determine_trend",
              "_generate_insights",
              "analyze_context",
              "build_user_context",
              "create_checkin_context",
              "create_context_prompt",
              "create_task_context",
              "get_context_builder"
            ],
            "`ai/conversation_history.py": [
              "__init__",
              "__post_init__",
              "_cleanup_old_sessions",
              "add_message",
              "clear_history",
              "delete_session",
              "end_session",
              "get_active_session",
              "get_conversation_history",
              "get_conversation_summary",
              "get_history",
              "get_recent_messages",
              "get_session_messages",
              "get_statistics",
              "start_session"
            ],
            "`ai/prompt_manager.py": [
              "__init__",
              "_load_custom_prompt",
              "add_prompt_template",
              "create_checkin_prompt",
              "create_contextual_prompt",
              "create_task_prompt",
              "custom_prompt_length",
              "fallback_prompt_keys",
              "get_available_prompts",
              "get_prompt",
              "get_prompt_manager",
              "get_prompt_template",
              "has_custom_prompt",
              "reload_custom_prompt",
              "remove_prompt_template"
            ],
            "`communication/command_handlers/analytics_handler.py": [
              "_handle_checkin_analysis",
              "_handle_checkin_history",
              "_handle_completion_rate",
              "_handle_habit_analysis",
              "_handle_mood_trends",
              "_handle_quant_summary",
              "_handle_show_analytics",
              "_handle_sleep_analysis",
              "_handle_task_analytics",
              "_handle_task_stats",
              "_handle_wellness_score",
              "_truncate_response",
              "can_handle",
              "get_examples",
              "get_help",
              "handle"
            ],
            "`communication/command_handlers/base_handler.py": [
              "can_handle",
              "get_examples",
              "get_help",
              "handle"
            ],
            "`communication/command_handlers/checkin_handler.py": [
              "_handle_checkin_status",
              "_handle_continue_checkin",
              "_handle_start_checkin",
              "can_handle",
              "get_examples",
              "get_help",
              "handle"
            ],
            "`communication/command_handlers/interaction_handlers.py": [
              "_handle_add_schedule_period",
              "_handle_add_schedule_period__parse_time_format",
              "_handle_checkin_history",
              "_handle_checkin_status",
              "_handle_commands_list",
              "_handle_complete_task",
              "_handle_complete_task__find_most_urgent_task",
              "_handle_complete_task__find_task_by_identifier",
              "_handle_completion_rate",
              "_handle_continue_checkin",
              "_handle_create_task",
              "_handle_create_task__parse_relative_date",
              "_handle_delete_task",
              "_handle_delete_task__find_task_by_identifier",
              "_handle_edit_schedule_period",
              "_handle_edit_schedule_period__parse_time_format",
              "_handle_examples",
              "_handle_general_help",
              "_handle_habit_analysis",
              "_handle_list_tasks",
              "_handle_list_tasks__apply_filters",
              "_handle_list_tasks__build_filter_info",
              "_handle_list_tasks__build_response",
              "_handle_list_tasks__create_rich_data",
              "_handle_list_tasks__format_due_date",
              "_handle_list_tasks__format_list",
              "_handle_list_tasks__generate_suggestions",
              "_handle_list_tasks__get_suggestion",
              "_handle_list_tasks__no_tasks_response",
              "_handle_list_tasks__sort_tasks",
              "_handle_messages",
              "_handle_mood_trends",
              "_handle_profile_stats",
              "_handle_quant_summary",
              "_handle_schedule_status",
              "_handle_show_analytics",
              "_handle_show_profile",
              "_handle_show_schedule",
              "_handle_sleep_analysis",
              "_handle_start_checkin",
              "_handle_status",
              "_handle_task_stats",
              "_handle_update_profile",
              "_handle_update_schedule",
              "_handle_update_task",
              "_handle_update_task__find_task_by_identifier",
              "_handle_wellness_score",
              "can_handle",
              "get_all_handlers",
              "get_examples",
              "get_help",
              "get_interaction_handler",
              "handle"
            ],
            "`communication/command_handlers/profile_handler.py": [
              "_format_profile_text",
              "_handle_profile_stats",
              "_handle_show_profile",
              "_handle_update_profile",
              "can_handle",
              "get_examples",
              "get_help",
              "handle"
            ],
            "`communication/command_handlers/schedule_handler.py": [
              "_handle_add_schedule_period",
              "_handle_add_schedule_period__parse_time_format",
              "_handle_edit_schedule_period",
              "_handle_edit_schedule_period__parse_time_format",
              "_handle_schedule_status",
              "_handle_show_schedule",
              "_handle_update_schedule",
              "can_handle",
              "get_examples",
              "get_help",
              "handle"
            ],
            "`communication/command_handlers/task_handler.py": [
              "_handle_complete_task",
              "_handle_complete_task__find_task_by_identifier",
              "_handle_create_task",
              "_handle_create_task__parse_relative_date",
              "_handle_delete_task",
              "_handle_delete_task__find_task_by_identifier",
              "_handle_list_tasks",
              "_handle_list_tasks__apply_filters",
              "_handle_list_tasks__build_filter_info",
              "_handle_list_tasks__build_response",
              "_handle_list_tasks__create_rich_data",
              "_handle_list_tasks__format_due_date",
              "_handle_list_tasks__format_list",
              "_handle_list_tasks__generate_suggestions",
              "_handle_list_tasks__get_suggestion",
              "_handle_list_tasks__no_tasks_response",
              "_handle_list_tasks__sort_tasks",
              "_handle_task_stats",
              "_handle_update_task",
              "_handle_update_task__find_task_by_identifier",
              "can_handle",
              "get_examples",
              "get_help",
              "handle"
            ],
            "`communication/communication_channels/base/base_channel.py": [
              "__init__",
              "__post_init__",
              "_set_status",
              "channel_type",
              "get_error",
              "get_status",
              "is_ready"
            ],
            "`communication/communication_channels/base/command_registry.py": [
              "__init__",
              "__post_init__",
              "get_all_commands",
              "get_command",
              "get_command_registry",
              "get_enabled_commands",
              "is_command_registered",
              "register_command",
              "register_with_platform",
              "unregister_command",
              "unregister_from_platform"
            ],
            "`communication/communication_channels/base/message_formatter.py": [
              "create_interactive_elements",
              "create_rich_content",
              "format_message",
              "get_message_formatter"
            ],
            "`communication/communication_channels/base/rich_formatter.py": [
              "__init__",
              "create_embed",
              "create_interactive_view",
              "get_color_for_type",
              "get_rich_formatter"
            ],
            "`communication/communication_channels/discord/api_client.py": [
              "__init__",
              "get_connection_latency",
              "get_discord_api_client",
              "is_connected"
            ],
            "`communication/communication_channels/discord/bot.py": [
              "__init__",
              "_check_dns_resolution",
              "_check_network_connectivity",
              "_check_network_health",
              "_create_action_row",
              "_create_discord_embed",
              "_get_detailed_connection_status",
              "_shared__update_connection_status",
              "_should_attempt_reconnection",
              "_wait_for_network_recovery",
              "can_send_messages",
              "channel_type",
              "get_connection_status_summary",
              "get_health_status",
              "initialize__register_commands",
              "initialize__register_events",
              "initialize__run_bot_in_thread",
              "is_actually_connected"
            ],
            "`communication/communication_channels/discord/event_handler.py": [
              "__init__",
              "__post_init__",
              "_register_default_handlers",
              "add_disconnect_handler",
              "add_error_handler",
              "add_message_handler",
              "add_ready_handler",
              "get_discord_event_handler",
              "register_events"
            ],
            "`communication/communication_channels/email/bot.py": [
              "__init__",
              "_receive_emails_sync",
              "channel_type",
              "initialize__test_imap_connection",
              "initialize__test_smtp_connection",
              "send_message__send_email_sync"
            ],
            "`communication/core/channel_monitor.py": [
              "__init__",
              "_attempt_channel_restart",
              "_check_and_restart_stuck_channels",
              "_restart_monitor_loop",
              "get_channel_health_status",
              "record_channel_failure",
              "record_channel_success",
              "reset_channel_failures",
              "set_channels",
              "start_restart_monitor",
              "stop_restart_monitor"
            ],
            "`communication/core/channel_orchestrator.py": [
              "__init__",
              "__init____setup_event_loop",
              "__new__",
              "_check_logging_health",
              "_create_task_reminder_message",
              "_get_default_channel_configs",
              "_get_recipient_for_service",
              "_handle_scheduled_checkin",
              "_initialize_channel_with_retry_sync",
              "_select_weighted_message",
              "_send_ai_generated_message",
              "_send_checkin_prompt",
              "_send_predefined_message",
              "_should_send_checkin_prompt",
              "_shutdown_sync",
              "_start_sync",
              "get_active_channels",
              "get_configured_channels",
              "get_discord_connectivity_status",
              "get_last_task_reminder",
              "get_registered_channels",
              "handle_message_sending",
              "handle_task_reminder",
              "initialize_channels_from_config",
              "run_event_loop",
              "send_message_sync",
              "send_message_sync__queue_failed_message",
              "send_message_sync__run_async_sync",
              "set_scheduler_manager",
              "start_all",
              "start_all__start_restart_monitor",
              "start_all__start_retry_thread",
              "stop_all",
              "stop_all__stop_restart_monitor",
              "stop_all__stop_retry_thread"
            ],
            "`communication/core/factory.py": [
              "_initialize_registry",
              "create_channel",
              "get_registered_channels"
            ],
            "`communication/core/retry_manager.py": [
              "__init__",
              "_process_retry_queue",
              "_retry_loop",
              "clear_queue",
              "get_queue_size",
              "queue_failed_message",
              "start_retry_thread",
              "stop_retry_thread"
            ],
            "`communication/message_processing/command_parser.py": [
              "__init__",
              "_ai_enhanced_parse",
              "_calculate_confidence",
              "_extract_entities_from_ai_response",
              "_extract_entities_rule_based",
              "_extract_intent_from_ai_response",
              "_extract_task_entities",
              "_extract_task_name_from_context",
              "_extract_update_entities",
              "_is_valid_intent",
              "_rule_based_parse",
              "get_enhanced_command_parser",
              "get_suggestions",
              "parse",
              "parse_command"
            ],
            "`communication/message_processing/conversation_flow_manager.py": [
              "__init__",
              "_complete_checkin",
              "_generate_completion_message",
              "_get_next_question",
              "_get_personalized_welcome",
              "_get_question_text",
              "_handle_checkin",
              "_handle_command_during_checkin",
              "_load_user_states",
              "_save_user_states",
              "_select_checkin_questions_with_weighting",
              "_start_dynamic_checkin",
              "_validate_response",
              "clear_all_states",
              "clear_stuck_flows",
              "expire_checkin_flow_due_to_unrelated_outbound",
              "handle_contextual_question",
              "handle_inbound_message",
              "restart_checkin",
              "start_analytics_flow",
              "start_checkin",
              "start_messages_flow",
              "start_profile_flow",
              "start_schedule_flow",
              "start_tasks_flow"
            ],
            "`communication/message_processing/interaction_manager.py": [
              "__init__",
              "_enhance_response_with_ai",
              "_extract_intent_from_text",
              "_get_commands_response",
              "_get_help_response",
              "_handle_contextual_chat",
              "_handle_structured_command",
              "_is_ai_command_response",
              "_is_clarification_request",
              "_is_valid_intent",
              "_parse_ai_command_response",
              "_try_ai_command_parsing",
              "get_available_commands",
              "get_command_definitions",
              "get_interaction_manager",
              "get_slash_command_map",
              "get_user_suggestions",
              "handle_message",
              "handle_user_message"
            ],
            "`communication/message_processing/message_router.py": [
              "__init__",
              "_route_bang_command",
              "_route_slash_command",
              "get_bang_command_map",
              "get_command_definitions",
              "get_command_mapping",
              "get_message_router",
              "get_slash_command_map",
              "is_flow_command",
              "route_message"
            ],
            "`core/auto_cleanup.py": [
              "_calculate_cache_size__calculate_pyc_files_size",
              "_calculate_cache_size__calculate_pycache_directories_size",
              "_get_cleanup_status__build_status_response",
              "_get_cleanup_status__calculate_days_since_cleanup",
              "_get_cleanup_status__format_next_cleanup_date",
              "_get_cleanup_status__get_never_cleaned_status",
              "_perform_cleanup__discover_cache_files",
              "_perform_cleanup__log_completion_results",
              "_perform_cleanup__log_discovery_results",
              "_perform_cleanup__remove_cache_directories",
              "_perform_cleanup__remove_cache_files",
              "_perform_cleanup__remove_cache_files_list",
              "archive_old_messages_for_all_users",
              "auto_cleanup_if_needed",
              "calculate_cache_size",
              "find_pyc_files",
              "find_pycache_dirs",
              "get_cleanup_status",
              "get_last_cleanup_timestamp",
              "perform_cleanup",
              "should_run_cleanup",
              "update_cleanup_timestamp"
            ],
            "`core/backup_manager.py": [
              "__init__",
              "_add_directory_to_zip",
              "_backup_config_files",
              "_backup_log_files",
              "_backup_user_data",
              "_cleanup_old_backups",
              "_create_backup__cleanup_old_backups",
              "_create_backup__create_zip_file",
              "_create_backup__setup_backup",
              "_create_backup_manifest",
              "_get_backup_info",
              "_restore_config_files",
              "_restore_user_data",
              "_validate_backup__check_file_exists",
              "_validate_backup__check_file_integrity",
              "_validate_backup__validate_content_requirements",
              "_validate_backup__validate_manifest",
              "_validate_backup__validate_zip_file",
              "_validate_system_state__ensure_user_data_directory",
              "_validate_system_state__validate_user_index",
              "create_automatic_backup",
              "create_backup",
              "ensure_backup_directory",
              "list_backups",
              "perform_safe_operation",
              "restore_backup",
              "validate_backup",
              "validate_system_state"
            ],
            "`core/checkin_analytics.py": [
              "__init__",
              "_calculate_habit_score",
              "_calculate_mood_score",
              "_calculate_overall_completion",
              "_calculate_sleep_consistency",
              "_calculate_sleep_score",
              "_calculate_streak",
              "_get_habit_status",
              "_get_mood_distribution",
              "_get_score_level",
              "_get_sleep_recommendations",
              "_get_wellness_recommendations",
              "get_checkin_history",
              "get_completion_rate",
              "get_habit_analysis",
              "get_mood_trends",
              "get_quantitative_summaries",
              "get_sleep_analysis",
              "get_task_weekly_stats",
              "get_wellness_score"
            ],
            "`core/checkin_dynamic_manager.py": [
              "__init__",
              "_load_data",
              "build_next_question_with_response",
              "get_all_questions",
              "get_categories",
              "get_enabled_questions_for_ui",
              "get_question_definition",
              "get_question_text",
              "get_question_type",
              "get_question_validation",
              "get_response_statement",
              "get_transition_phrase",
              "validate_answer"
            ],
            "`core/config.py": [
              "__init__",
              "_normalize_path",
              "ensure_user_directory",
              "get_available_channels",
              "get_backups_dir",
              "get_channel_class_mapping",
              "get_user_data_dir",
              "get_user_file_path",
              "print_configuration_report",
              "validate_ai_configuration",
              "validate_all_configuration",
              "validate_and_raise_if_invalid",
              "validate_communication_channels",
              "validate_core_paths",
              "validate_discord_config",
              "validate_email_config",
              "validate_environment_variables",
              "validate_file_organization_settings",
              "validate_logging_configuration",
              "validate_minimum_config",
              "validate_scheduler_configuration"
            ],
            "`core/error_handling.py": [
              "__enter__",
              "__exit__",
              "__init__",
              "_get_default_data",
              "_get_user_friendly_message",
              "_log_error",
              "_show_user_error",
              "can_handle",
              "decorator",
              "handle_ai_error",
              "handle_communication_error",
              "handle_configuration_error",
              "handle_error",
              "handle_errors",
              "handle_file_error",
              "handle_network_error",
              "handle_validation_error",
              "recover",
              "safe_file_operation",
              "wrapper"
            ],
            "`core/file_auditor.py": [
              "__init__",
              "_classify_path",
              "_get_audit_directories",
              "_split_env_list",
              "critical",
              "debug",
              "error",
              "info",
              "record_created",
              "start",
              "start_auditor",
              "stop",
              "stop_auditor",
              "warning"
            ],
            "`core/file_operations.py": [
              "_create_user_files__account_file",
              "_create_user_files__checkins_file",
              "_create_user_files__context_file",
              "_create_user_files__determine_feature_enablement",
              "_create_user_files__log_files",
              "_create_user_files__message_files",
              "_create_user_files__preferences_file",
              "_create_user_files__schedules_file",
              "_create_user_files__sent_messages_file",
              "_create_user_files__task_files",
              "_create_user_files__update_user_references",
              "create_user_files",
              "determine_file_path",
              "load_json_data",
              "save_json_data",
              "verify_file_access"
            ],
            "`core/logger.py": [
              "__init__",
              "_get_log_paths_for_environment",
              "_is_testing_environment",
              "_log",
              "apply_test_context_formatter_to_all_loggers",
              "cleanup_old_archives",
              "cleanup_old_logs",
              "clear_log_file_locks",
              "compress_old_logs",
              "critical",
              "debug",
              "disable_module_logging",
              "doRollover",
              "ensure_logs_directory",
              "error",
              "filter",
              "force_restart_logging",
              "format",
              "get_component_logger",
              "get_log_file_info",
              "get_log_level_from_env",
              "get_logger",
              "get_verbose_mode",
              "info",
              "set_console_log_level",
              "set_verbose_mode",
              "setup_logging",
              "setup_third_party_error_logging",
              "shouldRollover",
              "suppress_noisy_logging",
              "toggle_verbose_logging",
              "warning"
            ],
            "`core/message_management.py": [
              "_parse_timestamp",
              "add_message",
              "archive_old_messages",
              "create_message_file_from_defaults",
              "delete_message",
              "edit_message",
              "ensure_user_message_files",
              "get_message_categories",
              "get_recent_messages",
              "get_timestamp_for_sorting",
              "load_default_messages",
              "store_sent_message",
              "update_message"
            ],
            "`core/response_tracking.py": [
              "_get_response_log_filename",
              "get_recent_chat_interactions",
              "get_recent_checkins",
              "get_recent_responses",
              "get_timestamp_for_sorting",
              "get_user_info_for_tracking",
              "is_user_checkins_enabled",
              "store_chat_interaction",
              "store_user_response",
              "track_user_response"
            ],
            "`core/schedule_management.py": [
              "add_schedule_period",
              "clear_schedule_periods_cache",
              "delete_schedule_period",
              "edit_schedule_period",
              "get_current_day_names",
              "get_current_time_periods_with_validation",
              "get_period_data__time_12h_display_to_24h",
              "get_period_data__time_24h_to_12h_display",
              "get_period_data__validate_and_format_time",
              "get_schedule_days",
              "get_schedule_time_periods",
              "get_user_info_for_schedule_management",
              "is_schedule_period_active",
              "set_schedule_days",
              "set_schedule_period_active",
              "set_schedule_periods",
              "sort_key"
            ],
            "`core/schedule_utilities.py": [
              "get_active_schedules",
              "get_current_active_schedules",
              "is_schedule_active"
            ],
            "`core/scheduler.py": [
              "__init__",
              "_remove_user_message_job",
              "_select_task_for_reminder__calculate_due_date_weight",
              "_select_task_for_reminder__calculate_priority_weight",
              "_select_task_for_reminder__calculate_task_weights",
              "_select_task_for_reminder__handle_edge_cases",
              "_select_task_for_reminder__select_task_by_weight",
              "cleanup_old_tasks",
              "clear_all_accumulated_jobs",
              "clear_all_accumulated_jobs_standalone",
              "get_random_time_within_period",
              "get_random_time_within_task_period",
              "handle_sending_scheduled_message",
              "handle_task_reminder",
              "is_job_for_category",
              "is_time_conflict",
              "log_scheduled_tasks",
              "perform_daily_log_archival",
              "process_category_schedule",
              "process_user_schedules",
              "reset_and_reschedule_daily_messages",
              "run_category_scheduler_standalone",
              "run_daily_scheduler",
              "run_full_daily_scheduler",
              "run_full_scheduler_standalone",
              "run_user_scheduler_standalone",
              "schedule_all_task_reminders",
              "schedule_all_users_immediately",
              "schedule_checkin_at_exact_time",
              "schedule_daily_message_job",
              "schedule_message_at_random_time",
              "schedule_message_for_period",
              "schedule_new_user",
              "schedule_task_reminder",
              "schedule_task_reminder_at_datetime",
              "schedule_task_reminder_at_time",
              "scheduler_loop",
              "select_task_for_reminder",
              "set_wake_timer",
              "stop_scheduler"
            ],
            "`core/schemas.py": [
              "_accept_legacy_shape",
              "_coerce_bool",
              "_normalize_contact",
              "_normalize_days",
              "_normalize_flags",
              "_normalize_periods",
              "_valid_days",
              "_valid_time",
              "_validate_categories",
              "_validate_discord_id",
              "_validate_email",
              "_validate_timezone",
              "to_dict",
              "validate_account_dict",
              "validate_messages_file_dict",
              "validate_preferences_dict",
              "validate_schedules_dict"
            ],
            "`core/service.py": [
              "__init__",
              "_check_and_fix_logging__check_recent_activity_timestamps",
              "_check_and_fix_logging__ensure_log_file_exists",
              "_check_and_fix_logging__force_restart_logging_system",
              "_check_and_fix_logging__read_recent_log_content",
              "_check_and_fix_logging__test_logging_functionality",
              "_check_and_fix_logging__verify_test_message_present",
              "_check_reschedule_requests__cleanup_request_file",
              "_check_reschedule_requests__discover_request_files",
              "_check_reschedule_requests__get_base_directory",
              "_check_reschedule_requests__handle_processing_error",
              "_check_reschedule_requests__parse_request_file",
              "_check_reschedule_requests__process_valid_request",
              "_check_reschedule_requests__validate_request_data",
              "_check_test_message_requests__cleanup_request_file",
              "_check_test_message_requests__discover_request_files",
              "_check_test_message_requests__get_base_directory",
              "_check_test_message_requests__handle_processing_error",
              "_check_test_message_requests__parse_request_file",
              "_check_test_message_requests__process_valid_request",
              "_check_test_message_requests__validate_request_data",
              "_cleanup_test_message_requests__get_base_directory",
              "_cleanup_test_message_requests__is_test_message_request_file",
              "_cleanup_test_message_requests__remove_request_file",
              "check_and_fix_logging",
              "check_reschedule_requests",
              "check_test_message_requests",
              "cleanup_reschedule_requests",
              "cleanup_test_message_requests",
              "emergency_shutdown",
              "get_scheduler_manager",
              "initialize_paths",
              "main",
              "run_service_loop",
              "shutdown",
              "signal_handler",
              "start",
              "validate_configuration"
            ],
            "`core/service_utilities.py": [
              "__init__",
              "create_reschedule_request",
              "is_service_running",
              "load_and_localize_datetime",
              "should_run",
              "wait_for_network"
            ],
            "`core/ui_management.py": [
              "add_period_widget_to_layout",
              "clear_period_widgets_from_layout",
              "collect_period_data_from_widgets",
              "load_period_widgets_for_category",
              "period_name_for_display",
              "period_name_for_storage"
            ],
            "`core/user_data_handlers.py": [
              "_save_user_data__create_backup",
              "_save_user_data__legacy_preferences",
              "_save_user_data__normalize_data",
              "_save_user_data__save_single_type",
              "_save_user_data__update_index",
              "_save_user_data__validate_data",
              "_save_user_data__validate_input",
              "get_all_user_ids",
              "get_user_data",
              "register_data_loader",
              "save_user_data",
              "save_user_data_transaction",
              "update_channel_preferences",
              "update_user_account",
              "update_user_context",
              "update_user_preferences",
              "update_user_schedules"
            ],
            "`core/user_data_manager.py": [
              "__init__",
              "_get_last_interaction",
              "_get_user_data_summary__add_file_info",
              "_get_user_data_summary__add_log_file_info",
              "_get_user_data_summary__add_message_file_info",
              "_get_user_data_summary__add_missing_message_file_info",
              "_get_user_data_summary__add_schedule_details",
              "_get_user_data_summary__add_sent_messages_details",
              "_get_user_data_summary__add_special_file_details",
              "_get_user_data_summary__ensure_message_files",
              "_get_user_data_summary__initialize_summary",
              "_get_user_data_summary__process_core_files",
              "_get_user_data_summary__process_enabled_message_files",
              "_get_user_data_summary__process_log_files",
              "_get_user_data_summary__process_message_files",
              "_get_user_data_summary__process_orphaned_message_files",
              "backup_user_data",
              "build_user_index",
              "delete_user_completely",
              "export_user_data",
              "get_all_user_summaries",
              "get_user_analytics_summary",
              "get_user_data_summary",
              "get_user_info_for_data_manager",
              "get_user_message_files",
              "get_user_summary",
              "rebuild_full_index",
              "rebuild_user_index",
              "remove_from_index",
              "search_users",
              "update_message_references",
              "update_user_index"
            ],
            "`core/user_data_validation.py": [
              "_shared__title_case",
              "is_valid_email",
              "is_valid_phone",
              "validate_new_user_data",
              "validate_personalization_data",
              "validate_schedule_periods",
              "validate_schedule_periods__validate_time_format",
              "validate_user_update"
            ],
            "`core/user_management.py": [
              "_ensure_default_loaders_once",
              "_get_user_data__load_account",
              "_get_user_data__load_context",
              "_get_user_data__load_preferences",
              "_get_user_data__load_schedules",
              "_get_user_id_by_identifier__by_chat_id",
              "_get_user_id_by_identifier__by_discord_user_id",
              "_get_user_id_by_identifier__by_email",
              "_get_user_id_by_identifier__by_internal_username",
              "_get_user_id_by_identifier__by_phone",
              "_load_presets_json",
              "_save_user_data__save_account",
              "_save_user_data__save_context",
              "_save_user_data__save_preferences",
              "_save_user_data__save_schedules",
              "add_personalization_item",
              "clear_personalization_cache",
              "clear_user_caches",
              "create_default_personalization_data",
              "create_default_schedule_periods",
              "create_new_user",
              "ensure_all_categories_have_schedules",
              "ensure_category_has_default_schedule",
              "ensure_unique_ids",
              "get_all_user_ids",
              "get_available_data_types",
              "get_data_type_info",
              "get_personalization_field",
              "get_predefined_options",
              "get_timezone_options",
              "get_user_categories",
              "get_user_data_with_metadata",
              "get_user_id_by_identifier",
              "load_and_ensure_ids",
              "migrate_legacy_schedules_structure",
              "register_data_loader",
              "register_default_loaders",
              "remove_personalization_item",
              "update_channel_preferences",
              "update_personalization_field",
              "update_user_account",
              "update_user_context",
              "update_user_schedules"
            ],
            "`run_mhm.py": [
              "main"
            ],
            "`run_tests.py": [
              "main",
              "print_test_mode_info",
              "run_command"
            ],
            "`tasks/task_management.py": [
              "_calculate_next_due_date",
              "_create_next_recurring_task_instance",
              "add_user_task_tag",
              "are_tasks_enabled",
              "cleanup_task_reminders",
              "complete_task",
              "create_task",
              "delete_task",
              "ensure_task_directory",
              "get_task_by_id",
              "get_tasks_due_soon",
              "get_user_task_stats",
              "load_active_tasks",
              "load_completed_tasks",
              "remove_user_task_tag",
              "restore_task",
              "save_active_tasks",
              "save_completed_tasks",
              "schedule_task_reminders",
              "setup_default_task_tags",
              "update_task"
            ],
            "`tests/behavior/test_account_management_real_behavior.py": [
              "cleanup_test_environment",
              "create_test_user_data",
              "main",
              "setup_test_environment",
              "test_category_management_real_behavior",
              "test_data_consistency_real_behavior",
              "test_feature_enablement_real_behavior",
              "test_integration_scenarios_real_behavior",
              "test_schedule_period_management_real_behavior",
              "test_user_data_loading_real_behavior"
            ],
            "`tests/behavior/test_ai_chatbot_behavior.py": [
              "generate_response",
              "test_ai_chatbot_adaptive_timeout_responds_to_system_resources",
              "test_ai_chatbot_cache_performance_improvement",
              "test_ai_chatbot_cleanup_and_resource_management",
              "test_ai_chatbot_command_parsing_creates_structured_output",
              "test_ai_chatbot_concurrent_access_safety",
              "test_ai_chatbot_conversation_manager_integration",
              "test_ai_chatbot_error_handling_preserves_system_stability",
              "test_ai_chatbot_error_recovery_with_real_files",
              "test_ai_chatbot_generates_actual_responses",
              "test_ai_chatbot_handles_api_failures_gracefully",
              "test_ai_chatbot_performance_under_load",
              "test_ai_chatbot_prompt_optimization_improves_performance",
              "test_ai_chatbot_response_tracking_integration",
              "test_ai_chatbot_status_reporting_actual_system_state",
              "test_ai_chatbot_system_prompt_integration_test_actual_functionality",
              "test_ai_chatbot_tracks_conversation_history",
              "test_ai_chatbot_user_context_manager_integration",
              "test_ai_chatbot_uses_user_context_for_personalization",
              "test_ai_chatbot_with_real_user_data",
              "test_prompt_manager_creates_actual_file",
              "test_response_cache_actually_stores_and_retrieves_data",
              "test_response_cache_cleanup_actually_removes_entries",
              "test_singleton_behavior_creates_single_instance"
            ],
            "`tests/behavior/test_ai_context_builder_behavior.py": [
              "build_context",
              "test_build_user_context_creates_fresh_timestamp",
              "test_build_user_context_creates_structured_context_data",
              "test_build_user_context_handles_concurrent_access",
              "test_build_user_context_handles_corrupted_user_data",
              "test_build_user_context_handles_empty_files",
              "test_build_user_context_handles_empty_user_data",
              "test_build_user_context_handles_error_conditions",
              "test_build_user_context_handles_large_user_data",
              "test_build_user_context_handles_long_user_id",
              "test_build_user_context_handles_missing_files",
              "test_build_user_context_handles_missing_user_data_gracefully",
              "test_build_user_context_handles_rapid_calls",
              "test_build_user_context_handles_special_characters_in_user_id",
              "test_build_user_context_handles_unicode_user_id",
              "test_build_user_context_includes_conversation_history",
              "test_build_user_context_includes_current_time",
              "test_build_user_context_includes_recent_checkins",
              "test_build_user_context_includes_user_data_from_files",
              "test_build_user_context_without_conversation_history",
              "test_context_builder_initialization_creates_components"
            ],
            "`tests/behavior/test_ai_context_builder_coverage_expansion.py": [
              "test_analyze_context_error_handling",
              "test_analyze_context_with_checkin_data",
              "test_analyze_context_with_empty_checkins",
              "test_analyze_context_with_missing_data",
              "test_calculate_wellness_score_all_factors",
              "test_calculate_wellness_score_no_factors",
              "test_create_checkin_context",
              "test_create_checkin_context_error_handling",
              "test_create_context_prompt_error_handling",
              "test_create_context_prompt_with_analysis",
              "test_create_context_prompt_with_profile",
              "test_create_context_prompt_with_user_context",
              "test_create_task_context",
              "test_create_task_context_error_handling",
              "test_determine_trend_declining",
              "test_determine_trend_improving",
              "test_determine_trend_insufficient_data",
              "test_determine_trend_stable",
              "test_generate_insights_dental_hygiene",
              "test_generate_insights_energy_patterns",
              "test_generate_insights_excellent_breakfast",
              "test_generate_insights_low_mood",
              "test_generate_insights_poor_breakfast",
              "test_generate_insights_positive_mood",
              "test_get_context_builder_singleton"
            ],
            "`tests/behavior/test_ai_conversation_history_behavior.py": [
              "add_message",
              "test_add_message_appends_to_existing_session",
              "test_add_message_includes_timestamp",
              "test_add_message_persists_to_session",
              "test_add_message_validates_content",
              "test_add_message_validates_role",
              "test_clear_history_removes_session_data",
              "test_conversation_history_handles_concurrent_access",
              "test_conversation_history_handles_large_messages",
              "test_conversation_history_handles_rapid_access",
              "test_conversation_history_handles_special_characters",
              "test_conversation_history_handles_unicode_messages",
              "test_conversation_history_initialization_creates_components",
              "test_delete_session_removes_specific_session",
              "test_end_session_terminates_active_session",
              "test_get_conversation_summary_handles_empty_history",
              "test_get_conversation_summary_returns_actual_summary",
              "test_get_history_returns_all_sessions",
              "test_get_recent_messages_handles_empty_history",
              "test_get_recent_messages_handles_negative_limit",
              "test_get_recent_messages_handles_zero_limit",
              "test_get_recent_messages_respects_limit",
              "test_get_recent_messages_returns_actual_data",
              "test_get_statistics_returns_actual_data",
              "test_start_session_creates_actual_session"
            ],
            "`tests/behavior/test_auto_cleanup_behavior.py": [
              "mock_exists_with_changes",
              "mock_walk_with_error",
              "temp_test_dir",
              "temp_test_environment",
              "temp_tracker_file",
              "test_auto_cleanup_if_needed_not_needed_real_behavior",
              "test_auto_cleanup_if_needed_real_behavior",
              "test_calculate_cache_size_concurrent_file_changes_real_behavior",
              "test_calculate_cache_size_empty_inputs_real_behavior",
              "test_calculate_cache_size_file_corruption_handling_real_behavior",
              "test_calculate_cache_size_large_cache_scenario_real_behavior",
              "test_calculate_cache_size_nested_directory_structure_real_behavior",
              "test_calculate_cache_size_nonexistent_files_real_behavior",
              "test_calculate_cache_size_permission_error_simulation_real_behavior",
              "test_calculate_cache_size_real_behavior",
              "test_find_pyc_files_real_behavior",
              "test_find_pycache_dirs_real_behavior",
              "test_get_cleanup_status_29_days_real_behavior",
              "test_get_cleanup_status_31_days_real_behavior",
              "test_get_cleanup_status_corrupted_tracker_file_real_behavior",
              "test_get_cleanup_status_empty_tracker_file_real_behavior",
              "test_get_cleanup_status_exactly_30_days_real_behavior",
              "test_get_cleanup_status_invalid_timestamp_real_behavior",
              "test_get_cleanup_status_missing_timestamp_field_real_behavior",
              "test_get_cleanup_status_never_cleaned_real_behavior",
              "test_get_cleanup_status_overdue_cleanup_real_behavior",
              "test_get_cleanup_status_recent_cleanup_real_behavior",
              "test_get_cleanup_status_very_old_cleanup_real_behavior",
              "test_get_cleanup_status_very_recent_cleanup_real_behavior",
              "test_get_last_cleanup_timestamp_no_file_real_behavior",
              "test_get_last_cleanup_timestamp_with_file_real_behavior",
              "test_perform_cleanup_real_behavior",
              "test_should_run_cleanup_custom_interval_real_behavior",
              "test_should_run_cleanup_never_cleaned_real_behavior",
              "test_should_run_cleanup_old_cleanup_real_behavior",
              "test_should_run_cleanup_recent_cleanup_real_behavior",
              "test_update_cleanup_timestamp_real_behavior"
            ],
            "`tests/behavior/test_backup_manager_behavior.py": [
              "_cleanup_test_files",
              "_create_test_config_files",
              "failing_operation",
              "setup_backup_manager",
              "test_backup_creation_and_validation_real_behavior",
              "test_backup_manager_error_handling_real_behavior",
              "test_backup_manager_initialization_real_behavior",
              "test_backup_manager_with_empty_user_directory_real_behavior",
              "test_backup_manager_with_large_user_data_real_behavior",
              "test_backup_rotation_by_age_real_behavior",
              "test_backup_rotation_by_count_real_behavior",
              "test_create_automatic_backup_real_behavior",
              "test_create_backup_with_all_components_real_behavior",
              "test_create_backup_with_config_files_real_behavior",
              "test_create_backup_with_user_data_real_behavior",
              "test_ensure_backup_directory_real_behavior",
              "test_list_backups_real_behavior",
              "test_operation",
              "test_perform_safe_operation_real_behavior",
              "test_perform_safe_operation_with_failure_real_behavior",
              "test_restore_backup_with_config_files_real_behavior",
              "test_restore_backup_with_nonexistent_file_real_behavior",
              "test_validate_backup_real_behavior",
              "test_validate_backup_with_corrupted_file_real_behavior",
              "test_validate_backup_with_missing_file_real_behavior",
              "test_validate_system_state_real_behavior",
              "test_validate_system_state_with_missing_user_dir_real_behavior"
            ],
            "`tests/behavior/test_checkin_analytics_behavior.py": [
              "analytics",
              "mock_checkins_for_completion",
              "mock_checkins_for_history",
              "mock_checkins_for_tasks",
              "mock_checkins_for_wellness",
              "mock_checkins_with_habits",
              "mock_checkins_with_mood",
              "mock_checkins_with_sleep",
              "test_analytics_initialization_real_behavior",
              "test_checkin_history_no_data_real_behavior",
              "test_checkin_history_with_data_real_behavior",
              "test_completion_rate_no_data_real_behavior",
              "test_completion_rate_with_data_real_behavior",
              "test_habit_analysis_no_data_real_behavior",
              "test_habit_analysis_with_data_real_behavior",
              "test_mood_trends_invalid_mood_data_real_behavior",
              "test_mood_trends_no_data_real_behavior",
              "test_mood_trends_with_data_real_behavior",
              "test_sleep_analysis_no_data_real_behavior",
              "test_sleep_analysis_with_data_real_behavior",
              "test_task_weekly_stats_no_data_real_behavior",
              "test_task_weekly_stats_with_data_real_behavior",
              "test_wellness_score_no_data_real_behavior",
              "test_wellness_score_with_data_real_behavior"
            ],
            "`tests/behavior/test_command_parser_coverage_expansion_phase3_simple.py": [
              "setup_method",
              "test_error_handling_in_parsing",
              "test_extract_intent_from_ai_response_case_insensitive",
              "test_extract_intent_from_ai_response_complete_task",
              "test_extract_intent_from_ai_response_create_task",
              "test_extract_intent_from_ai_response_list_tasks",
              "test_extract_intent_from_ai_response_no_match",
              "test_extract_intent_from_ai_response_start_checkin",
              "test_extract_task_entities_basic",
              "test_extract_task_entities_complex",
              "test_extract_task_entities_no_match",
              "test_extract_task_entities_with_due_date",
              "test_extract_task_entities_with_priority",
              "test_extract_task_name_from_context_basic",
              "test_extract_task_name_from_context_complex",
              "test_extract_task_name_from_context_no_match",
              "test_extract_update_entities_complex",
              "test_extract_update_entities_due_date",
              "test_extract_update_entities_due_short",
              "test_extract_update_entities_no_match",
              "test_extract_update_entities_priority",
              "test_get_enhanced_command_parser_singleton",
              "test_get_suggestions_analytics_keywords",
              "test_get_suggestions_checkin_keywords",
              "test_get_suggestions_empty_input",
              "test_get_suggestions_profile_keywords",
              "test_get_suggestions_schedule_keywords",
              "test_get_suggestions_task_keywords",
              "test_get_suggestions_unknown_keywords",
              "test_parse_command_function",
              "test_parse_command_function_empty",
              "test_parse_command_function_none",
              "test_parser_ai_response_processing",
              "test_parser_entity_extraction_integration",
              "test_parser_initialization",
              "test_parser_initialization_components",
              "test_parser_integration_with_real_inputs",
              "test_parser_method_signatures",
              "test_parser_parse_method",
              "test_parser_parse_method_empty",
              "test_parser_parse_method_none",
              "test_parser_parse_method_whitespace",
              "test_parser_robustness",
              "test_parser_suggestions_integration",
              "test_parser_with_mock_ai_chatbot",
              "test_parser_with_mock_interaction_handlers",
              "test_parsing_result_initialization",
              "test_pattern_matching_edge_cases"
            ],
            "`tests/behavior/test_communication_behavior.py": [
              "comm_manager",
              "mock_channel_config",
              "realistic_mock_channel",
              "temp_dir",
              "test_communication_manager_initialization",
              "test_communication_manager_singleton",
              "test_get_active_channels",
              "test_initialize_channels_from_config",
              "test_send_message_sync_channel_not_found",
              "test_send_message_sync_channel_not_ready",
              "test_send_message_sync_with_realistic_channel"
            ],
            "`tests/behavior/test_communication_command_parser_behavior.py": [
              "test_command_parser_initialization_creates_components"
            ],
            "`tests/behavior/test_communication_factory_coverage_expansion.py": [
              "__init__",
              "channel_type",
              "test_create_channel_successful_creation",
              "test_create_channel_unknown_type",
              "test_factory_config_integration",
              "test_factory_dynamic_import_handling",
              "test_factory_error_handling_create_channel",
              "test_factory_error_handling_get_channels",
              "test_factory_error_handling_initialization",
              "test_factory_logging_behavior",
              "test_factory_registry_persistence",
              "test_factory_singleton_behavior",
              "test_get_registered_channels_empty_registry",
              "test_get_registered_channels_with_channels",
              "test_initialize_registry_already_initialized",
              "test_initialize_registry_successful_registration",
              "test_initialize_registry_with_attribute_error",
              "test_initialize_registry_with_import_error"
            ],
            "`tests/behavior/test_communication_interaction_manager_behavior.py": [
              "test_interaction_manager_initialization_creates_components",
              "test_process_message_creates_interaction_record",
              "test_process_message_handles_ai_chat",
              "test_process_message_handles_checkin_commands",
              "test_process_message_handles_command_parsing",
              "test_process_message_handles_concurrent_access",
              "test_process_message_handles_conversation_context",
              "test_process_message_handles_conversation_flow",
              "test_process_message_handles_empty_message",
              "test_process_message_handles_error_conditions",
              "test_process_message_handles_feature_flags",
              "test_process_message_handles_help_commands",
              "test_process_message_handles_long_messages",
              "test_process_message_handles_mixed_content",
              "test_process_message_handles_profile_commands",
              "test_process_message_handles_rate_limiting",
              "test_process_message_handles_schedule_commands",
              "test_process_message_handles_special_characters",
              "test_process_message_handles_task_commands",
              "test_process_message_handles_unicode_characters",
              "test_process_message_handles_unknown_commands",
              "test_process_message_handles_user_preferences",
              "test_process_message_handles_whitespace_only_message",
              "test_process_message_includes_interaction_type",
              "test_process_message_includes_timestamp",
              "test_process_message_includes_user_context"
            ],
            "`tests/behavior/test_communication_manager_coverage_expansion.py": [
              "comm_manager",
              "mock_channel_config",
              "realistic_mock_channel",
              "test_async_channel_initialization_real_behavior",
              "test_async_message_sending_channel_not_ready_real_behavior",
              "test_async_message_sending_real_behavior",
              "test_async_shutdown_real_behavior",
              "test_async_startup_real_behavior",
              "test_broadcast_message_real_behavior",
              "test_channel_initialization_with_retry_real_behavior",
              "test_channel_restart_attempt_real_behavior",
              "test_channel_restart_monitoring_real_behavior",
              "test_create_task_reminder_message_real_behavior",
              "test_data_dir",
              "test_default_channel_configs_real_behavior",
              "test_discord_connectivity_status_real_behavior",
              "test_event_loop_setup_real_behavior",
              "test_get_all_statuses_real_behavior",
              "test_get_channel_status_real_behavior",
              "test_get_recipient_for_service_real_behavior",
              "test_handle_message_sending_real_behavior",
              "test_handle_scheduled_checkin_real_behavior",
              "test_handle_task_reminder_real_behavior",
              "test_health_check_all_real_behavior",
              "test_logging_health_check_real_behavior",
              "test_message_queuing_real_behavior",
              "test_receive_messages_real_behavior",
              "test_restart_monitor_management_real_behavior",
              "test_retry_queue_processing_real_behavior",
              "test_retry_queue_processing_with_failure_real_behavior",
              "test_retry_thread_management_real_behavior",
              "test_run_async_sync_real_behavior",
              "test_send_ai_generated_message_real_behavior",
              "test_send_checkin_prompt_real_behavior",
              "test_send_predefined_message_real_behavior",
              "test_set_scheduler_manager_real_behavior",
              "test_should_send_checkin_prompt_real_behavior",
              "test_start_all_real_behavior",
              "test_stop_all_real_behavior",
              "test_sync_channel_initialization_real_behavior",
              "test_sync_shutdown_real_behavior",
              "test_sync_startup_real_behavior"
            ],
            "`tests/behavior/test_config_coverage_expansion_phase3_simple.py": [
              "test_config_validation_error_initialization",
              "test_config_validation_error_with_none_values",
              "test_configuration_constants_exist",
              "test_configuration_error_handling",
              "test_configuration_validation_integration",
              "test_directory_creation_functions",
              "test_ensure_user_directory_failure",
              "test_ensure_user_directory_success",
              "test_environment_variable_loading",
              "test_get_available_channels",
              "test_get_backups_dir_production_mode",
              "test_get_backups_dir_testing_mode",
              "test_get_channel_class_mapping",
              "test_get_user_data_dir",
              "test_get_user_file_path",
              "test_normalize_path_edge_cases",
              "test_normalize_path_function",
              "test_path_handling_functions",
              "test_print_configuration_report",
              "test_print_configuration_report_no_channels",
              "test_validate_ai_configuration_invalid_url",
              "test_validate_ai_configuration_missing_url",
              "test_validate_ai_configuration_valid_config",
              "test_validate_all_configuration_integration",
              "test_validate_and_raise_if_invalid",
              "test_validate_communication_channels",
              "test_validate_core_paths_success",
              "test_validate_discord_config",
              "test_validate_email_config",
              "test_validate_environment_variables",
              "test_validate_file_organization_settings",
              "test_validate_logging_configuration",
              "test_validate_minimum_config",
              "test_validate_scheduler_configuration",
              "test_validation_functions_return_correct_types"
            ],
            "`tests/behavior/test_conversation_behavior.py": [
              "test_checkin_flow_completion",
              "test_checkin_flow_progression",
              "test_conversation_manager_cancel_handling",
              "test_conversation_manager_cleanup_and_resource_management",
              "test_conversation_manager_command_handling",
              "test_conversation_manager_concurrent_access_safety",
              "test_conversation_manager_error_handling_preserves_system_stability",
              "test_conversation_manager_error_recovery_with_real_files",
              "test_conversation_manager_initialization_creates_structure",
              "test_conversation_manager_integration_with_response_tracking",
              "test_conversation_manager_performance_under_load",
              "test_conversation_manager_with_real_user_data",
              "test_get_question_text_returns_personalized_questions",
              "test_handle_contextual_question_integrates_with_ai",
              "test_handle_inbound_message_creates_user_state",
              "test_handle_inbound_message_preserves_existing_state",
              "test_start_checkin_creates_checkin_state",
              "test_start_checkin_handles_disabled_user",
              "test_validate_response_handles_edge_cases",
              "test_validate_response_handles_various_inputs"
            ],
            "`tests/behavior/test_core_message_management_coverage_expansion.py": [
              "test_get_message_categories_from_env_real_behavior",
              "test_get_message_categories_from_json_real_behavior",
              "test_get_message_categories_no_env_real_behavior",
              "test_get_timestamp_for_sorting_invalid_item_real_behavior",
              "test_get_timestamp_for_sorting_real_behavior",
              "test_get_timestamp_for_sorting_string_real_behavior",
              "test_load_default_messages_file_not_found_real_behavior",
              "test_load_default_messages_real_behavior",
              "test_parse_timestamp_real_behavior"
            ],
            "`tests/behavior/test_core_service_coverage_expansion.py": [
              "mock_communication_manager",
              "mock_config",
              "mock_remove_with_disappearing_files",
              "mock_remove_with_partial_failure",
              "mock_scheduler_manager",
              "service",
              "test_check_and_fix_logging_basic_success",
              "test_check_and_fix_logging_check_recent_activity_timestamps_invalid_timestamp",
              "test_check_and_fix_logging_check_recent_activity_timestamps_old_activity",
              "test_check_and_fix_logging_check_recent_activity_timestamps_recent_activity",
              "test_check_and_fix_logging_failure_real_behavior",
              "test_check_and_fix_logging_file_creation_failure",
              "test_check_and_fix_logging_file_missing",
              "test_check_and_fix_logging_old_activity_restart",
              "test_check_and_fix_logging_read_recent_log_content_large_file",
              "test_check_and_fix_logging_read_recent_log_content_small_file",
              "test_check_and_fix_logging_recent_activity_detected",
              "test_check_and_fix_logging_success_real_behavior",
              "test_check_and_fix_logging_verify_test_message_present_found",
              "test_check_and_fix_logging_verify_test_message_present_not_found",
              "test_check_reschedule_requests_handle_processing_error_cleanup_failure",
              "test_check_reschedule_requests_handle_processing_error_successful_cleanup",
              "test_check_reschedule_requests_invalid_file",
              "test_check_reschedule_requests_json_error",
              "test_check_reschedule_requests_no_files",
              "test_check_reschedule_requests_old_file_processed",
              "test_check_reschedule_requests_valid_file",
              "test_check_reschedule_requests_validate_request_data_missing_fields",
              "test_check_reschedule_requests_validate_request_data_old_timestamp",
              "test_check_test_message_requests_communication_error",
              "test_check_test_message_requests_handle_processing_error_cleanup_failure",
              "test_check_test_message_requests_handle_processing_error_successful_cleanup",
              "test_check_test_message_requests_invalid_file",
              "test_check_test_message_requests_json_error",
              "test_check_test_message_requests_no_communication_manager",
              "test_check_test_message_requests_no_files",
              "test_check_test_message_requests_valid_file",
              "test_cleanup_test_message_requests_concurrent_access_simulation_real_behavior",
              "test_cleanup_test_message_requests_directory_access_error_real_behavior",
              "test_cleanup_test_message_requests_empty_directory_real_behavior",
              "test_cleanup_test_message_requests_file_in_use_error_real_behavior",
              "test_cleanup_test_message_requests_file_permission_error_real_behavior",
              "test_cleanup_test_message_requests_large_number_of_files_real_behavior",
              "test_cleanup_test_message_requests_mixed_file_types_real_behavior",
              "test_cleanup_test_message_requests_partial_failure_real_behavior",
              "test_cleanup_test_message_requests_remove_request_file_generic_error_real_behavior",
              "test_cleanup_test_message_requests_remove_request_file_not_found_error_real_behavior",
              "test_cleanup_test_message_requests_remove_request_file_permission_error_real_behavior",
              "test_cleanup_test_message_requests_remove_request_file_success_real_behavior",
              "test_get_scheduler_manager_real_behavior",
              "test_initialize_paths_real_behavior",
              "test_initialize_paths_with_empty_categories_real_behavior",
              "test_initialize_paths_with_invalid_categories_real_behavior",
              "test_initialize_paths_with_none_user_id_real_behavior",
              "test_initialize_paths_with_path_generation_error_real_behavior",
              "test_main_function_real_behavior",
              "test_main_function_with_service_failure_real_behavior",
              "test_service_atexit_handler_real_behavior",
              "test_service_atexit_handler_with_manager_stop_failure_real_behavior",
              "test_service_atexit_handler_with_none_managers_real_behavior",
              "test_service_cleanup_reschedule_requests_real_behavior",
              "test_service_cleanup_test_message_requests_real_behavior",
              "test_service_initialization_error_real_behavior",
              "test_service_initialization_real_behavior",
              "test_service_retry_mechanism_real_behavior",
              "test_service_signal_handlers_real_behavior",
              "test_service_startup_time_tracking_real_behavior",
              "test_signal_handler_real_behavior",
              "test_start_service_communication_manager_failure_real_behavior",
              "test_start_service_configuration_failure_real_behavior",
              "test_start_service_path_initialization_failure_real_behavior",
              "test_start_service_scheduler_manager_failure_real_behavior",
              "test_start_service_success_real_behavior",
              "test_stop_service_real_behavior",
              "test_stop_service_with_manager_stop_failure_real_behavior",
              "test_stop_service_with_none_managers_real_behavior",
              "test_validate_configuration_failure_real_behavior",
              "test_validate_configuration_success_real_behavior"
            ],
            "`tests/behavior/test_discord_bot_behavior.py": [
              "discord_bot",
              "mock_discord_bot",
              "test_connection_status_update_actually_changes_state",
              "test_detailed_connection_status_returns_actual_state",
              "test_discord_bot_channel_type_is_async",
              "test_discord_bot_cleanup_and_resource_management",
              "test_discord_bot_concurrent_access_safety",
              "test_discord_bot_connection_status_summary_returns_readable_string",
              "test_discord_bot_error_handling_preserves_system_stability",
              "test_discord_bot_error_recovery_with_real_files",
              "test_discord_bot_health_check_verifies_actual_status",
              "test_discord_bot_health_status_returns_actual_metrics",
              "test_discord_bot_initialization_creates_proper_structure",
              "test_discord_bot_initialization_with_dns_failure",
              "test_discord_bot_initialization_with_valid_token",
              "test_discord_bot_initialization_without_token",
              "test_discord_bot_initialize_creates_thread",
              "test_discord_bot_integration_with_conversation_manager",
              "test_discord_bot_integration_with_user_management",
              "test_discord_bot_is_actually_connected_checks_real_state",
              "test_discord_bot_is_initialized_checks_actual_state",
              "test_discord_bot_manual_reconnect_actually_reconnects",
              "test_discord_bot_performance_under_load",
              "test_discord_bot_receive_messages_returns_actual_data",
              "test_discord_bot_send_dm_actually_sends_direct_message",
              "test_discord_bot_send_message_actually_sends",
              "test_discord_bot_send_message_handles_errors",
              "test_discord_bot_shutdown_actually_cleans_up",
              "test_discord_bot_shutdown_actually_stops_thread",
              "test_discord_bot_with_real_user_data",
              "test_discord_checkin_flow_end_to_end",
              "test_discord_complete_task_by_name_variation",
              "test_discord_message_to_interaction_manager_complete_task_prompt",
              "test_discord_response_after_task_reminder",
              "test_discord_task_create_update_complete",
              "test_dns_resolution_check_actually_tests_connectivity",
              "test_dns_resolution_fallback_uses_alternative_servers",
              "test_interaction_manager_single_response",
              "test_network_connectivity_check_tests_multiple_endpoints",
              "test_network_connectivity_fallback_tries_alternative_endpoints",
              "test_user_setup"
            ],
            "`tests/behavior/test_dynamic_checkin_behavior.py": [
              "test_build_next_question_with_response",
              "test_complete_question_flow_variety",
              "test_conversation_manager_uses_dynamic_questions",
              "test_dynamic_checkin_manager_initialization",
              "test_question_definitions",
              "test_question_text_uses_dynamic_manager",
              "test_response_statements",
              "test_response_variety",
              "test_transition_phrase_variety",
              "test_ui_questions_format",
              "test_validation",
              "test_validation_uses_dynamic_manager"
            ],
            "`tests/behavior/test_email_bot_behavior.py": [
              "send_email",
              "setup_method",
              "test_email_bot_async_shutdown_method_behavior",
              "test_email_bot_data_integrity",
              "test_email_bot_error_handling_preserves_system_stability",
              "test_email_bot_initialization_creates_proper_structure",
              "test_email_bot_initialization_with_custom_config",
              "test_email_bot_legacy_start_method_behavior",
              "test_email_bot_legacy_start_method_failure_behavior",
              "test_email_bot_performance_under_load",
              "test_email_bot_status_checking_behavior"
            ],
            "`tests/behavior/test_enhanced_command_parser_behavior.py": [
              "parse_command",
              "setup_method",
              "test_enhanced_command_parser_ai_enhanced_parsing_behavior",
              "test_enhanced_command_parser_case_insensitivity_behavior",
              "test_enhanced_command_parser_checkin_patterns_behavior",
              "test_enhanced_command_parser_confidence_calculation_behavior",
              "test_enhanced_command_parser_consistency_behavior",
              "test_enhanced_command_parser_empty_message_behavior",
              "test_enhanced_command_parser_end_to_end_behavior",
              "test_enhanced_command_parser_entity_extraction_behavior",
              "test_enhanced_command_parser_error_handling_behavior",
              "test_enhanced_command_parser_fallback_behavior",
              "test_enhanced_command_parser_help_patterns_behavior",
              "test_enhanced_command_parser_initialization_behavior",
              "test_enhanced_command_parser_memory_behavior",
              "test_enhanced_command_parser_pattern_compilation_behavior",
              "test_enhanced_command_parser_performance_behavior",
              "test_enhanced_command_parser_task_completion_patterns_behavior",
              "test_enhanced_command_parser_task_creation_patterns_behavior",
              "test_enhanced_command_parser_task_listing_patterns_behavior",
              "test_enhanced_command_parser_thread_safety_behavior",
              "test_enhanced_command_parser_unknown_patterns_behavior",
              "test_enhanced_command_parser_with_real_ai_chatbot_behavior",
              "test_enhanced_command_parser_with_real_handlers_behavior"
            ],
            "`tests/behavior/test_error_handling_coverage_expansion_phase3_final.py": [
              "inner_function",
              "outer_function",
              "test_configuration_error_initialization",
              "test_data_error_initialization",
              "test_error_handler_global_instance",
              "test_error_handler_global_instance_functionality",
              "test_error_handler_initialization",
              "test_error_handler_retry_limits",
              "test_error_handler_with_attribute_error",
              "test_error_handler_with_bytes_warning",
              "test_error_handler_with_complex_context",
              "test_error_handler_with_configuration_error",
              "test_error_handler_with_connection_error",
              "test_error_handler_with_context",
              "test_error_handler_with_custom_operation",
              "test_error_handler_with_data_error",
              "test_error_handler_with_default_operation",
              "test_error_handler_with_deprecation_warning",
              "test_error_handler_with_empty_context",
              "test_error_handler_with_file_operation_error",
              "test_error_handler_with_future_warning",
              "test_error_handler_with_generic_exception",
              "test_error_handler_with_import_error",
              "test_error_handler_with_import_warning",
              "test_error_handler_with_index_error",
              "test_error_handler_with_io_error",
              "test_error_handler_with_key_error",
              "test_error_handler_with_long_operation_name",
              "test_error_handler_with_mhm_error",
              "test_error_handler_with_module_not_found_error",
              "test_error_handler_with_multiple_strategies",
              "test_error_handler_with_no_context",
              "test_error_handler_with_none_context_and_error",
              "test_error_handler_with_none_error",
              "test_error_handler_with_os_error",
              "test_error_handler_with_pending_deprecation_warning",
              "test_error_handler_with_permission_error",
              "test_error_handler_with_recovery_strategy",
              "test_error_handler_with_resource_warning",
              "test_error_handler_with_runtime_error",
              "test_error_handler_with_runtime_warning",
              "test_error_handler_with_special_characters_in_context",
              "test_error_handler_with_syntax_warning",
              "test_error_handler_with_timeout_error",
              "test_error_handler_with_type_error",
              "test_error_handler_with_unicode_decode_error",
              "test_error_handler_with_unicode_encode_error",
              "test_error_handler_with_unicode_error",
              "test_error_handler_with_unicode_translate_error",
              "test_error_handler_with_unicode_warning",
              "test_error_handler_with_unrecoverable_error",
              "test_error_handler_with_user_friendly_false",
              "test_error_handler_with_user_friendly_true",
              "test_error_handler_with_user_warning",
              "test_error_handler_with_warning",
              "test_error_recovery_strategy_base_class",
              "test_file_not_found_recovery_strategy",
              "test_file_not_found_recovery_strategy_with_empty_file_path",
              "test_file_not_found_recovery_strategy_with_invalid_file_path",
              "test_file_not_found_recovery_strategy_without_file_path",
              "test_file_operation_error_initialization",
              "test_function",
              "test_handle_errors_decorator_custom_return",
              "test_handle_errors_decorator_double_failure",
              "test_handle_errors_decorator_exception",
              "test_handle_errors_decorator_nested_exceptions",
              "test_handle_errors_decorator_operation_name",
              "test_handle_errors_decorator_recovery_failure",
              "test_handle_errors_decorator_recovery_success",
              "test_handle_errors_decorator_specific_exception",
              "test_handle_errors_decorator_success",
              "test_handle_errors_decorator_user_friendly_false",
              "test_handle_errors_decorator_with_all_parameters",
              "test_handle_errors_decorator_with_args_kwargs",
              "test_handle_errors_decorator_with_complex_context",
              "test_handle_errors_decorator_with_context",
              "test_handle_errors_decorator_with_exception_in_args",
              "test_handle_errors_decorator_with_operation_and_context",
              "test_json_decode_recovery_strategy",
              "test_json_decode_recovery_strategy_recover",
              "test_mhm_error_initialization"
            ],
            "`tests/behavior/test_interaction_handlers_behavior.py": [
              "_create_test_user",
              "test_all_handlers_return_proper_examples",
              "test_all_handlers_return_proper_help",
              "test_analytics_handler_can_handle_intents",
              "test_checkin_handler_can_handle_intents",
              "test_checkin_handler_starts_checkin_flow",
              "test_get_interaction_handler_returns_correct_handler",
              "test_handler_error_handling",
              "test_handler_registry_creates_all_handlers",
              "test_handler_response_structure",
              "test_help_handler_can_handle_intents",
              "test_help_handler_provides_help",
              "test_profile_handler_can_handle_intents",
              "test_profile_handler_shows_actual_profile",
              "test_schedule_management_handler_can_handle_intents",
              "test_task_management_handler_can_handle_intents",
              "test_task_management_handler_completes_actual_task",
              "test_task_management_handler_creates_actual_task",
              "test_task_management_handler_lists_actual_tasks"
            ],
            "`tests/behavior/test_interaction_handlers_coverage_expansion.py": [
              "_mock_get_user_data",
              "get_checkin_history",
              "get_mood_trends",
              "mock_communication_manager",
              "test_checkin_history_displays_scale_out_of_5",
              "test_checkin_status_displays_scale_out_of_5",
              "test_data_dir",
              "test_get_examples",
              "test_get_help",
              "test_handle_checkin_response_with_invalid_response",
              "test_handle_checkin_status",
              "test_handle_commands",
              "test_handle_complete_task_no_identifier",
              "test_handle_complete_task_not_found",
              "test_handle_complete_task_suggestion_logic",
              "test_handle_complete_task_with_identifier",
              "test_handle_complete_task_with_no_tasks",
              "test_handle_continue_checkin",
              "test_handle_create_task_invalid_priority",
              "test_handle_create_task_with_all_properties",
              "test_handle_create_task_with_invalid_priority",
              "test_handle_create_task_with_invalid_recurrence_pattern",
              "test_handle_create_task_with_recurrence_settings",
              "test_handle_create_task_with_title_only",
              "test_handle_delete_task_no_identifier",
              "test_handle_delete_task_with_identifier",
              "test_handle_delete_task_with_invalid_task_id",
              "test_handle_edit_task_with_invalid_task_id",
              "test_handle_examples",
              "test_handle_help",
              "test_handle_help_with_invalid_handler",
              "test_handle_help_with_specific_handler",
              "test_handle_list_tasks_due_soon_filter",
              "test_handle_list_tasks_no_tasks",
              "test_handle_list_tasks_overdue_filter",
              "test_handle_list_tasks_with_filters",
              "test_handle_list_tasks_with_priority_filter",
              "test_handle_list_tasks_with_tag_filter",
              "test_handle_list_tasks_with_tasks",
              "test_handle_mood_trends",
              "test_handle_profile_stats",
              "test_handle_show_analytics",
              "test_handle_show_analytics_with_no_data",
              "test_handle_show_analytics_with_specific_metric",
              "test_handle_show_profile",
              "test_handle_show_profile_with_missing_data",
              "test_handle_show_schedule",
              "test_handle_show_schedule_with_no_schedules",
              "test_handle_start_checkin_new_user",
              "test_handle_start_checkin_with_disabled_checkins",
              "test_handle_start_checkin_with_no_questions",
              "test_handle_task_stats_no_data",
              "test_handle_task_stats_with_analytics",
              "test_handle_unknown_intent",
              "test_handle_update_profile",
              "test_handle_update_profile_with_invalid_data",
              "test_handle_update_schedule",
              "test_handle_update_schedule_with_invalid_period",
              "test_handle_update_task_no_updates",
              "test_handle_update_task_with_updates",
              "test_handler_with_missing_user_data",
              "test_mood_trends_displays_scale_out_of_5",
              "test_parse_relative_date_existing_date",
              "test_parse_relative_date_next_month",
              "test_parse_relative_date_next_week",
              "test_parse_relative_date_today",
              "test_parse_relative_date_tomorrow",
              "test_profile_get_help_is_text",
              "test_quantitative_summary_respects_enabled_fields",
              "test_show_profile_not_raw_json",
              "test_task_management_handler_error_handling"
            ],
            "`tests/behavior/test_logger_behavior.py": [
              "temp_log_dir",
              "test_backup_directory_rotating_handler_creation_real_behavior",
              "test_cleanup_old_logs_real_behavior",
              "test_disable_module_logging_real_behavior",
              "test_force_restart_logging_real_behavior",
              "test_get_log_file_info_real_behavior",
              "test_get_log_level_from_env_real_behavior",
              "test_get_logger_creation_real_behavior",
              "test_get_logger_same_name_real_behavior",
              "test_logger_environment_integration_real_behavior",
              "test_logger_full_workflow_real_behavior",
              "test_set_console_log_level_real_behavior",
              "test_set_verbose_mode_real_behavior",
              "test_setup_logging_idempotent_real_behavior",
              "test_suppress_noisy_logging_real_behavior",
              "test_verbose_mode_toggle_real_behavior"
            ],
            "`tests/behavior/test_logger_coverage_expansion.py": [
              "_setup",
              "create_record",
              "log_messages",
              "teardown_method",
              "test_backup_directory_rotating_file_handler_initialization_real_behavior",
              "test_backup_directory_rotating_file_handler_rollover_disabled_real_behavior",
              "test_backup_directory_rotating_file_handler_rollover_real_behavior",
              "test_cleanup_old_archives_real_behavior",
              "test_cleanup_old_logs_real_behavior",
              "test_component_logger_custom_level_real_behavior",
              "test_component_logger_initialization_real_behavior",
              "test_component_logger_logging_methods_real_behavior",
              "test_component_logger_structured_data_real_behavior",
              "test_compress_old_logs_no_files_real_behavior",
              "test_compress_old_logs_real_behavior",
              "test_get_component_logger_real_behavior",
              "test_get_log_file_info_real_behavior",
              "test_get_logger_real_behavior",
              "test_get_verbose_mode_real_behavior",
              "test_heartbeat_warning_filter_real_behavior",
              "test_heartbeat_warning_filter_summary_logging_real_behavior",
              "test_logger_backup_directory_creation_real_behavior",
              "test_logger_concurrent_access_safety",
              "test_logger_concurrent_file_access",
              "test_logger_encoding_handling_real_behavior",
              "test_logger_error_handling_real_behavior",
              "test_logger_error_recovery_with_real_operations",
              "test_logger_file_rotation_edge_cases",
              "test_logger_formatter_real_behavior",
              "test_logger_integration_with_multiple_components",
              "test_logger_level_filtering_real_behavior",
              "test_logger_memory_behavior",
              "test_logger_performance_under_load",
              "test_logger_thread_safety_behavior",
              "test_set_verbose_mode_real_behavior",
              "test_setup_logging_real_behavior",
              "test_suppress_noisy_logging_real_behavior",
              "test_toggle_verbose_logging_real_behavior",
              "write_logs"
            ],
            "`tests/behavior/test_logger_coverage_expansion_phase3_simple.py": [
              "test_backup_directory_rotating_file_handler_initialization_simple",
              "test_backup_directory_rotating_file_handler_rollover_simple",
              "test_cleanup_old_archives_simple",
              "test_cleanup_old_logs_simple",
              "test_component_logger_channels_alias_simple",
              "test_component_logger_error_handling_during_creation_simple",
              "test_component_logger_unknown_component_fallback_simple",
              "test_compress_old_logs_simple",
              "test_environment_detection_functions_simple",
              "test_get_log_file_info_function",
              "test_get_log_file_info_with_nonexistent_files",
              "test_heartbeat_warning_filter_simple",
              "test_logger_integration_with_multiple_components_simple",
              "test_logger_performance_under_high_load_simple",
              "test_setup_logging_environment_detection_simple",
              "test_suppress_noisy_logging_simple",
              "test_verbose_mode_functions_simple"
            ],
            "`tests/behavior/test_message_behavior.py": [
              "test_add_message_file_error",
              "test_add_message_success",
              "test_create_message_file_from_defaults_success",
              "test_delete_message_file_error",
              "test_delete_message_not_found",
              "test_delete_message_success",
              "test_edit_message_file_error",
              "test_edit_message_not_found",
              "test_edit_message_success",
              "test_ensure_user_message_files_success",
              "test_full_message_lifecycle",
              "test_get_message_categories_custom",
              "test_get_message_categories_default",
              "test_get_message_categories_empty",
              "test_get_message_categories_success",
              "test_get_recent_messages_empty",
              "test_get_recent_messages_success",
              "test_load_default_messages_file_not_found",
              "test_load_default_messages_invalid_json",
              "test_load_default_messages_success",
              "test_store_sent_message_file_error",
              "test_store_sent_message_success",
              "test_update_message_success"
            ],
            "`tests/behavior/test_observability_logging.py": [
              "test_component_logs_isolation_and_errors_capture"
            ],
            "`tests/behavior/test_response_tracking_behavior.py": [
              "test_get_recent_chat_interactions_returns_chat_data",
              "test_get_recent_checkins_returns_checkin_data",
              "test_get_recent_responses_returns_actual_data",
              "test_get_user_checkin_preferences_returns_actual_preferences",
              "test_get_user_checkin_questions_returns_actual_questions",
              "test_get_user_info_for_tracking_returns_complete_user_info",
              "test_is_user_checkins_enabled_checks_actual_account_data",
              "test_response_tracking_concurrent_access_safety",
              "test_response_tracking_data_integrity",
              "test_response_tracking_error_handling_preserves_system_stability",
              "test_response_tracking_error_recovery_with_real_files",
              "test_response_tracking_integration_with_user_data",
              "test_response_tracking_performance_under_load",
              "test_store_chat_interaction_creates_chat_log",
              "test_store_user_response_creates_actual_file",
              "test_store_user_response_persists_multiple_entries",
              "test_track_user_response_stores_chat_interaction",
              "test_track_user_response_stores_checkin",
              "test_track_user_response_stores_generic_response"
            ],
            "`tests/behavior/test_schedule_management_behavior.py": [
              "test_clear_schedule_periods_cache_removes_entries",
              "test_get_current_day_names_returns_actual_days",
              "test_get_schedule_time_periods_creates_cache",
              "test_schedule_cache_invalidation",
              "test_schedule_period_activation_integration",
              "test_schedule_period_crud_with_usercontext_mocking",
              "test_schedule_period_edge_cases",
              "test_schedule_period_operations_with_error_handling",
              "test_schedule_period_operations_with_real_user_data",
              "test_schedule_period_operations_with_scheduler_manager",
              "test_schedule_period_validation_errors",
              "test_set_schedule_days_persists_day_changes",
              "test_set_schedule_period_active_persists_changes",
              "test_set_schedule_periods_persists_complete_data",
              "test_time_conversion_functions_work_correctly",
              "test_validate_and_format_time_enforces_rules"
            ],
            "`tests/behavior/test_scheduler_behavior.py": [
              "mock_communication_manager",
              "scheduler_manager",
              "test_cleanup_old_tasks",
              "test_get_random_time_within_period_invalid_times",
              "test_get_random_time_within_period_valid_times",
              "test_get_user_categories_no_user",
              "test_get_user_categories_success",
              "test_get_user_checkin_preferences_no_user",
              "test_get_user_checkin_preferences_success",
              "test_get_user_task_preferences_no_user",
              "test_get_user_task_preferences_success",
              "test_is_job_for_category_no_jobs",
              "test_is_job_for_category_with_matching_job",
              "test_is_job_for_category_with_non_matching_job",
              "test_is_time_conflict_no_conflicts",
              "test_log_scheduled_tasks",
              "test_random_time_generation_consistency",
              "test_schedule_all_task_reminders_disabled",
              "test_schedule_all_task_reminders_success",
              "test_scheduler_lifecycle",
              "test_scheduler_manager_initialization",
              "test_scheduler_with_empty_user_list",
              "test_scheduler_with_invalid_user_data",
              "test_scheduler_with_mock_users",
              "test_stop_scheduler_no_thread"
            ],
            "`tests/behavior/test_scheduler_coverage_expansion.py": [
              "mock_communication_manager",
              "scheduler_manager",
              "test_cleanup_old_tasks_real_behavior",
              "test_get_random_time_within_period_future_scheduling",
              "test_get_random_time_within_period_invalid_period",
              "test_get_random_time_within_period_missing_times",
              "test_get_random_time_within_task_period_real_behavior",
              "test_get_user_checkin_preferences_real_behavior",
              "test_handle_sending_scheduled_message_no_communication_manager",
              "test_handle_sending_scheduled_message_success",
              "test_handle_sending_scheduled_message_with_retries",
              "test_handle_task_reminder_completed_task",
              "test_handle_task_reminder_no_communication_manager",
              "test_handle_task_reminder_success",
              "test_is_time_conflict_no_conflict_different_user",
              "test_is_time_conflict_with_conflict_real_behavior",
              "test_process_category_schedule_real_behavior",
              "test_process_user_schedules_real_behavior",
              "test_run_daily_scheduler_thread_creation_real_behavior",
              "test_schedule_all_task_reminders_missing_times_real_behavior",
              "test_schedule_all_task_reminders_no_tasks_real_behavior",
              "test_schedule_all_task_reminders_real_behavior",
              "test_schedule_all_task_reminders_standalone_real_behavior",
              "test_schedule_all_task_reminders_tasks_disabled",
              "test_schedule_all_task_reminders_with_tasks_real_behavior",
              "test_schedule_all_users_immediately_real_behavior",
              "test_schedule_checkin_at_exact_time_real_behavior",
              "test_schedule_checkin_missing_period_real_behavior",
              "test_schedule_checkin_missing_start_time_real_behavior",
              "test_schedule_daily_message_job_no_periods",
              "test_schedule_daily_message_job_real_behavior",
              "test_schedule_message_for_period_max_retries_exceeded",
              "test_schedule_message_for_period_real_behavior",
              "test_schedule_message_for_period_time_conflict_retry",
              "test_schedule_new_user_real_behavior",
              "test_schedule_task_reminder_at_time_completed_task",
              "test_schedule_task_reminder_at_time_real_behavior",
              "test_scheduler_loop_daily_job_scheduling_real_behavior",
              "test_scheduler_loop_error_handling_real_behavior",
              "test_scheduler_loop_stop_event_handling_real_behavior",
              "test_scheduler_manager_initialization_real_behavior",
              "test_scheduler_manager_no_communication_manager",
              "test_select_task_for_reminder_due_today_weighting_real_behavior",
              "test_select_task_for_reminder_empty_list_real_behavior",
              "test_select_task_for_reminder_exception_handling_real_behavior",
              "test_select_task_for_reminder_invalid_date_format_real_behavior",
              "test_select_task_for_reminder_large_task_list_real_behavior",
              "test_select_task_for_reminder_month_proximity_weighting_real_behavior",
              "test_select_task_for_reminder_no_due_date_weighting_real_behavior",
              "test_select_task_for_reminder_overdue_weighting_real_behavior",
              "test_select_task_for_reminder_priority_weighting_real_behavior",
              "test_select_task_for_reminder_single_task_real_behavior",
              "test_select_task_for_reminder_week_proximity_weighting_real_behavior",
              "test_select_task_for_reminder_zero_weights_fallback_real_behavior",
              "test_set_wake_timer_failure_handling",
              "test_set_wake_timer_process_failure_real_behavior",
              "test_set_wake_timer_real_behavior",
              "test_set_wake_timer_success_real_behavior",
              "test_stop_scheduler_no_thread_graceful_handling",
              "test_stop_scheduler_thread_cleanup_real_behavior"
            ],
            "`tests/behavior/test_service_behavior.py": [
              "mock_get_user_data_side_effect",
              "mock_join_side_effect",
              "mock_shutdown_side_effect",
              "mock_sleep_side_effect",
              "mock_start_side_effect",
              "service",
              "temp_base_dir",
              "temp_dir",
              "test_check_and_fix_logging_real_behavior",
              "test_check_reschedule_requests_real_behavior",
              "test_check_test_message_requests_real_behavior",
              "test_cleanup_reschedule_requests_real_behavior",
              "test_cleanup_test_message_requests_real_behavior",
              "test_emergency_shutdown_real_behavior",
              "test_get_user_categories_real_behavior",
              "test_initialize_paths_real_behavior",
              "test_main_function_real_behavior",
              "test_real_cleanup_removes_actual_files",
              "test_real_emergency_shutdown_changes_service_state",
              "test_real_file_based_communication_creates_and_removes_files",
              "test_real_get_user_categories_returns_actual_data",
              "test_real_service_error_recovery_stops_service",
              "test_real_service_initialization_creates_actual_service",
              "test_real_signal_handler_changes_service_state",
              "test_run_service_loop_shutdown_file_detection_real_behavior",
              "test_service_error_recovery_real_behavior",
              "test_service_file_based_communication_integration_real_behavior",
              "test_service_initialization",
              "test_service_integration_with_managers_real_behavior",
              "test_service_loop_heartbeat_logging_real_behavior",
              "test_shutdown_real_behavior",
              "test_signal_handler_real_behavior",
              "test_start_service_real_behavior",
              "test_validate_configuration_real_behavior"
            ],
            "`tests/behavior/test_service_utilities_behavior.py": [
              "test_create_reschedule_request_creates_actual_file",
              "test_create_reschedule_request_skips_when_service_not_running",
              "test_is_service_running_checks_actual_processes",
              "test_is_service_running_handles_process_errors_gracefully",
              "test_load_and_localize_datetime_creates_timezone_aware_datetime",
              "test_load_and_localize_datetime_raises_error_for_invalid_format",
              "test_load_and_localize_datetime_raises_error_for_invalid_timezone",
              "test_service_utilities_concurrent_access_safety",
              "test_service_utilities_data_integrity",
              "test_service_utilities_error_handling_preserves_system_stability",
              "test_service_utilities_error_recovery_with_real_operations",
              "test_service_utilities_integration_with_reschedule_workflow",
              "test_service_utilities_performance_under_load",
              "test_throttler_handles_invalid_timestamp_format",
              "test_throttler_initialization_creates_proper_structure",
              "test_throttler_should_run_respects_interval",
              "test_throttler_should_run_returns_true_on_first_call",
              "test_title_case_converts_text_properly",
              "test_title_case_handles_special_words_correctly",
              "test_title_case_preserves_mixed_case_words",
              "test_wait_for_network_returns_false_when_network_unavailable",
              "test_wait_for_network_returns_true_when_network_available"
            ],
            "`tests/behavior/test_static_logging_check.py": [
              "test_repo_static_logging_check_passes"
            ],
            "`tests/behavior/test_task_behavior.py": [
              "temp_dir",
              "test_are_tasks_enabled",
              "test_complete_task",
              "test_create_task",
              "test_delete_task",
              "test_ensure_task_directory",
              "test_get_task_by_id",
              "test_get_tasks_due_soon",
              "test_get_user_task_stats",
              "test_load_active_tasks",
              "test_save_active_tasks",
              "test_update_task",
              "user_id"
            ],
            "`tests/behavior/test_task_management_coverage_expansion.py": [
              "mock_user_data_dir",
              "temp_dir",
              "test_add_user_task_tag_empty_tag_real_behavior",
              "test_add_user_task_tag_empty_user_id_real_behavior",
              "test_add_user_task_tag_existing_tag_real_behavior",
              "test_add_user_task_tag_new_tag_real_behavior",
              "test_are_tasks_enabled_empty_user_id_real_behavior",
              "test_are_tasks_enabled_real_behavior",
              "test_complete_task_not_found_real_behavior",
              "test_complete_task_with_completion_data_real_behavior",
              "test_complete_task_with_default_completion_real_behavior",
              "test_create_task_with_all_parameters_real_behavior",
              "test_create_task_with_empty_title_real_behavior",
              "test_create_task_with_empty_user_id_real_behavior",
              "test_create_task_with_minimal_parameters_real_behavior",
              "test_delete_task_not_found_real_behavior",
              "test_delete_task_real_behavior",
              "test_ensure_task_directory_existing_structure_real_behavior",
              "test_ensure_task_directory_real_behavior",
              "test_ensure_task_directory_with_empty_user_id_real_behavior",
              "test_ensure_task_directory_with_none_user_id_real_behavior",
              "test_get_task_by_id_active_task_real_behavior",
              "test_get_task_by_id_completed_task_real_behavior",
              "test_get_task_by_id_not_found_real_behavior",
              "test_get_tasks_due_soon_empty_user_id_real_behavior",
              "test_get_tasks_due_soon_real_behavior",
              "test_get_tasks_due_soon_with_invalid_date_real_behavior",
              "test_get_user_task_stats_empty_user_id_real_behavior",
              "test_get_user_task_stats_error_handling_real_behavior",
              "test_get_user_task_stats_real_behavior",
              "test_get_user_task_tags_empty_user_id_real_behavior",
              "test_get_user_task_tags_real_behavior",
              "test_load_active_tasks_empty_file_real_behavior",
              "test_load_active_tasks_missing_file_real_behavior",
              "test_load_active_tasks_real_behavior",
              "test_load_completed_tasks_real_behavior",
              "test_remove_user_task_tag_not_found_real_behavior",
              "test_remove_user_task_tag_real_behavior",
              "test_restore_task_not_found_real_behavior",
              "test_restore_task_real_behavior",
              "test_restore_task_with_reminders_real_behavior",
              "test_save_active_tasks_real_behavior",
              "test_save_active_tasks_with_empty_user_id_real_behavior",
              "test_save_completed_tasks_real_behavior",
              "test_schedule_task_reminders_empty_periods_real_behavior",
              "test_schedule_task_reminders_no_scheduler_real_behavior",
              "test_schedule_task_reminders_real_behavior",
              "test_setup_default_task_tags_empty_user_id_real_behavior",
              "test_setup_default_task_tags_existing_user_real_behavior",
              "test_setup_default_task_tags_new_user_real_behavior",
              "test_update_task_not_found_real_behavior",
              "test_update_task_real_behavior",
              "test_update_task_with_reminder_periods_real_behavior",
              "user_id"
            ],
            "`tests/behavior/test_ui_app_behavior.py": [
              "qt_app",
              "test_confirm_test_message_user_cancels_real_behavior",
              "test_confirm_test_message_user_confirms_real_behavior",
              "test_send_actual_test_message_creates_request_file_real_behavior",
              "test_send_test_message_edge_case_negative_index_real_behavior",
              "test_send_test_message_invalid_category_real_behavior",
              "test_send_test_message_no_category_selected_real_behavior",
              "test_send_test_message_no_user_selected_real_behavior",
              "test_send_test_message_service_manager_error_real_behavior",
              "test_send_test_message_service_not_running_real_behavior",
              "test_send_test_message_successful_flow_real_behavior",
              "test_service_manager_configuration_validation_checks_actual_config",
              "test_service_manager_configuration_validation_handles_invalid_config",
              "test_service_manager_initialization_creates_proper_structure",
              "test_service_manager_service_status_check_checks_actual_processes",
              "test_service_manager_service_status_check_handles_no_service",
              "test_ui_app_category_management_opens_category_dialog",
              "test_ui_app_category_selection_enables_content_management",
              "test_ui_app_checkin_management_opens_checkin_dialog",
              "test_ui_app_communication_settings_opens_channel_management",
              "test_ui_app_concurrent_access_safety",
              "test_ui_app_data_integrity",
              "test_ui_app_error_handling_preserves_system_stability",
              "test_ui_app_error_recovery_with_real_operations",
              "test_ui_app_initialization_creates_proper_structure",
              "test_ui_app_integration_with_service_manager",
              "test_ui_app_new_user_creation_opens_account_creator",
              "test_ui_app_performance_under_load",
              "test_ui_app_personalization_opens_user_profile_dialog",
              "test_ui_app_task_management_opens_task_dialog",
              "test_ui_app_user_list_refresh_loads_actual_user_data",
              "test_ui_app_user_selection_loads_user_categories"
            ],
            "`tests/behavior/test_user_context_behavior.py": [
              "test_add_conversation_exchange_actually_stores_data",
              "test_add_conversation_exchange_maintains_history_limit",
              "test_format_context_for_ai_creates_readable_string",
              "test_format_context_for_ai_handles_empty_context",
              "test_get_active_schedules_identifies_active_periods",
              "test_get_conversation_history_handles_empty_history",
              "test_get_conversation_history_returns_actual_data",
              "test_get_conversation_insights_analyzes_actual_data",
              "test_get_current_user_context_handles_no_user_gracefully",
              "test_get_current_user_context_uses_usercontext_singleton",
              "test_get_mood_trends_analyzes_checkin_data",
              "test_get_recent_activity_integrates_multiple_sources",
              "test_get_user_context_creates_complete_structure",
              "test_get_user_context_without_conversation_history",
              "test_get_user_profile_uses_existing_infrastructure",
              "test_user_context_manager_cleanup_and_resource_management",
              "test_user_context_manager_concurrent_access_safety",
              "test_user_context_manager_error_handling_preserves_system_stability",
              "test_user_context_manager_error_recovery_with_real_files",
              "test_user_context_manager_initialization_creates_structure",
              "test_user_context_manager_integration_with_ai_chatbot",
              "test_user_context_manager_performance_under_load",
              "test_user_context_manager_with_real_user_data"
            ],
            "`tests/behavior/test_user_management_coverage_expansion.py": [
              "_setup",
              "mock_path",
              "teardown_method",
              "test_cache_management_real_behavior",
              "test_cache_timeout_real_behavior",
              "test_create_default_schedule_periods_checkin_real_behavior",
              "test_create_default_schedule_periods_no_category_real_behavior",
              "test_create_default_schedule_periods_other_category_real_behavior",
              "test_create_default_schedule_periods_tasks_real_behavior",
              "test_data_validation_real_behavior",
              "test_error_handling_load_account_real_behavior",
              "test_error_handling_save_account_real_behavior",
              "test_file_persistence_real_behavior",
              "test_get_all_user_ids_no_directory_real_behavior",
              "test_get_all_user_ids_real_behavior",
              "test_get_available_data_types_real_behavior",
              "test_get_data_type_info_real_behavior",
              "test_load_account_data_auto_create_real_behavior",
              "test_load_account_data_no_auto_create_real_behavior",
              "test_load_account_data_real_behavior",
              "test_load_context_data_auto_create_real_behavior",
              "test_load_context_data_real_behavior",
              "test_load_preferences_data_auto_create_real_behavior",
              "test_load_preferences_data_real_behavior",
              "test_load_schedules_data_auto_create_real_behavior",
              "test_load_schedules_data_real_behavior",
              "test_loader",
              "test_register_data_loader_real_behavior",
              "test_save_account_data_invalid_user_id_real_behavior",
              "test_save_account_data_real_behavior",
              "test_save_context_data_real_behavior",
              "test_save_preferences_data_real_behavior",
              "test_save_schedules_data_invalid_user_id_real_behavior",
              "test_save_schedules_data_real_behavior",
              "test_update_user_schedules_invalid_user_id_real_behavior",
              "test_update_user_schedules_real_behavior",
              "test_user_data_concurrent_access_real_behavior",
              "test_user_data_consistency_real_behavior",
              "test_user_data_error_recovery_real_behavior",
              "test_user_data_lifecycle_real_behavior",
              "test_user_data_performance_real_behavior",
              "user_operation"
            ],
            "`tests/behavior/test_utilities_demo.py": [
              "test_basic_user_creation",
              "test_comprehensive_user_types",
              "test_consistent_user_data",
              "test_custom_fields_user_creation",
              "test_discord_user_creation",
              "test_easy_maintenance",
              "test_edge_case_users",
              "test_email_user_creation",
              "test_environment_management",
              "test_flexible_configuration",
              "test_full_featured_user_creation",
              "test_minimal_user_creation",
              "test_multiple_user_types_in_single_test",
              "test_real_user_scenarios",
              "test_reduced_code_duplication",
              "test_scheduled_user_creation",
              "test_user_data_consistency",
              "test_user_data_factory_usage"
            ],
            "`tests/conftest.py": [
              "__init__",
              "_apply_get_user_data_shim_early",
              "_fallback_read_from_files",
              "_helper",
              "_load_single_type",
              "_missing_keys",
              "_prune_old_files",
              "_update_index",
              "about",
              "archive_old_backups",
              "check_rotation_needed",
              "cleanup_communication_manager",
              "cleanup_conversation_manager",
              "cleanup_old_archives",
              "cleanup_test_users_after_session",
              "cleanup_tmp_at_session_end",
              "clear_user_caches_between_tests",
              "critical",
              "enforce_user_dir_locations",
              "ensure_mock_config_applied",
              "ensure_user_materialized",
              "env_guard_and_restore",
              "fix_user_data_loaders",
              "force_test_data_directory",
              "format",
              "information",
              "initialize_loader_import_order",
              "isolate_logging",
              "log_lifecycle_maintenance",
              "materialize_user_minimal_via_public_apis",
              "mock_ai_response",
              "mock_communication_data",
              "mock_config",
              "mock_logger",
              "mock_message_data",
              "mock_schedule_data",
              "mock_service_data",
              "mock_task_data",
              "mock_user_data",
              "mock_user_data_with_messages",
              "path_sanitizer",
              "perform_lifecycle_maintenance",
              "prune_test_artifacts_before_and_after_session",
              "pytest_collection_modifyitems",
              "pytest_configure",
              "pytest_runtest_logreport",
              "pytest_sessionfinish",
              "pytest_sessionstart",
              "question",
              "register_log_file",
              "register_user_data_loaders_session",
              "rotate_all_logs",
              "session_log_rotation_check",
              "setup_component_log_rotation",
              "setup_logging_isolation",
              "setup_qmessagebox_patches",
              "setup_test_logging",
              "shim_get_user_data_to_invoke_loaders",
              "temp_file",
              "test_data_dir",
              "test_path_factory",
              "toggle_data_shim_per_marker",
              "update_user_index_for_test",
              "verify_required_loaders_present",
              "verify_user_data_loader_registry",
              "wait_until",
              "warning",
              "wrapped_get_user_data"
            ],
            "`tests/debug_file_paths.py": [
              "test_debug_file_paths"
            ],
            "`tests/integration/test_account_lifecycle.py": [
              "_ensure_minimal_structure",
              "_materialize_and_verify",
              "save_user_data_simple",
              "setup_test_environment",
              "test_add_message_category",
              "test_add_schedule_period",
              "test_complete_account_lifecycle",
              "test_create_basic_account",
              "test_create_full_account",
              "test_disable_tasks_for_full_user",
              "test_enable_checkins_for_basic_user",
              "test_modify_schedule_period",
              "test_reenable_tasks_for_user",
              "test_remove_message_category",
              "test_remove_schedule_period"
            ],
            "`tests/integration/test_account_management.py": [
              "test_account_management_data_structures",
              "test_account_management_functions",
              "test_account_management_imports",
              "test_account_management_integration",
              "test_account_management_safe_operations",
              "test_account_management_validation"
            ],
            "`tests/integration/test_user_creation.py": [
              "test_basic_email_user_creation",
              "test_corrupted_data_handling",
              "test_discord_user_creation",
              "test_duplicate_user_creation",
              "test_email_validation",
              "test_full_user_lifecycle",
              "test_invalid_user_id",
              "test_multiple_users_same_channel",
              "test_required_fields_validation",
              "test_timezone_validation",
              "test_user_creation_with_schedules",
              "test_user_with_all_features",
              "test_user_with_custom_fields",
              "test_username_validation"
            ],
            "`tests/test_isolation.py": [
              "__enter__",
              "__exit__",
              "__init__",
              "create_safe_scheduler_manager",
              "ensure_test_isolation",
              "mock_schtasks_call",
              "mock_system_calls",
              "verify_no_real_tasks_created"
            ],
            "`tests/test_utilities.py": [
              "_create_user_files_directly",
              "_create_user_files_directly__account_data",
              "_create_user_files_directly__context_data",
              "_create_user_files_directly__directory_structure",
              "_create_user_files_directly__message_files",
              "_create_user_files_directly__preferences_data",
              "_create_user_files_directly__save_json",
              "_create_user_files_directly__schedules_data",
              "cleanup_test_data_environment",
              "cleanup_test_environment",
              "create_account_data",
              "create_basic_user",
              "create_basic_user__update_index",
              "create_basic_user__verify_creation",
              "create_basic_user__with_test_dir",
              "create_context_data",
              "create_corrupted_user_data",
              "create_discord_user",
              "create_discord_user__with_test_dir",
              "create_email_user",
              "create_email_user__impl",
              "create_email_user__with_test_dir",
              "create_full_featured_user",
              "create_full_featured_user__impl",
              "create_full_featured_user__with_test_dir",
              "create_minimal_user",
              "create_minimal_user__impl",
              "create_minimal_user__with_test_dir",
              "create_minimal_user__with_test_dir_and_get_id",
              "create_minimal_user_and_get_id",
              "create_preferences_data",
              "create_schedules_data",
              "create_test_message_data",
              "create_test_schedule_data",
              "create_test_task_data",
              "create_test_user",
              "create_user_with_complex_checkins",
              "create_user_with_complex_checkins__impl",
              "create_user_with_complex_checkins__with_test_dir",
              "create_user_with_custom_fields",
              "create_user_with_custom_fields__impl",
              "create_user_with_disabilities",
              "create_user_with_disabilities__impl",
              "create_user_with_disabilities__with_test_dir",
              "create_user_with_health_focus",
              "create_user_with_health_focus__impl",
              "create_user_with_health_focus__with_test_dir",
              "create_user_with_inconsistent_data",
              "create_user_with_inconsistent_data__impl",
              "create_user_with_inconsistent_data__with_test_dir",
              "create_user_with_limited_data",
              "create_user_with_limited_data__impl",
              "create_user_with_limited_data__with_test_dir",
              "create_user_with_schedules",
              "create_user_with_schedules__impl",
              "create_user_with_task_focus",
              "create_user_with_task_focus__impl",
              "create_user_with_task_focus__with_test_dir",
              "get_test_user_data",
              "get_test_user_id_by_internal_username",
              "setup_test_data_environment",
              "setup_test_environment",
              "verify_email_user_creation__with_test_dir"
            ],
            "`tests/ui/test_account_creation_ui.py": [
              "dialog",
              "mock_accept_impl",
              "qapp",
              "test_account_creation_real_behavior",
              "test_dialog_initialization_real_behavior",
              "test_duplicate_username_handling_real_behavior",
              "test_feature_enablement_persistence_real_behavior",
              "test_feature_enablement_real_behavior",
              "test_feature_validation_real_behavior",
              "test_file_system_error_handling_real_behavior",
              "test_full_account_lifecycle_real_behavior",
              "test_invalid_data_handling_real_behavior",
              "test_messages_validation_real_behavior",
              "test_multiple_users_same_features_real_behavior",
              "test_timezone_validation_real_behavior",
              "test_user_index_integration_real_behavior",
              "test_user_profile_dialog_integration",
              "test_username_validation_real_behavior",
              "test_widget_data_collection_real_behavior",
              "test_widget_error_handling_real_behavior"
            ],
            "`tests/ui/test_channel_management_dialog_coverage_expansion.py": [
              "mock_user_data",
              "test_get_selected_channel",
              "test_save_channel_settings_exception_handling",
              "test_save_channel_settings_removes_old_settings",
              "test_save_channel_settings_success_discord",
              "test_save_channel_settings_success_email",
              "test_save_channel_settings_validation_error_discord_required",
              "test_save_channel_settings_validation_error_email_required",
              "test_save_channel_settings_validation_error_invalid_discord_id",
              "test_save_channel_settings_validation_error_invalid_email",
              "test_save_channel_settings_without_user",
              "test_set_selected_channel"
            ],
            "`tests/ui/test_dialog_behavior.py": [
              "dialog",
              "qapp",
              "test_category_selection_real_behavior",
              "test_channel_configuration_real_behavior",
              "test_checkin_enablement_real_behavior",
              "test_data_loading_real_behavior",
              "test_data_saving_real_behavior",
              "test_dialog_initialization_real_behavior",
              "test_dynamic_list_fields_real_behavior",
              "test_task_statistics_real_behavior"
            ],
            "`tests/ui/test_dialog_coverage_expansion.py": [
              "dialog",
              "qapp",
              "test_add_new_period_real_behavior",
              "test_add_task_real_behavior",
              "test_data_saving_real_behavior",
              "test_delete_period_real_behavior",
              "test_delete_task_real_behavior",
              "test_dialog_initialization_real_behavior",
              "test_dynamic_list_fields_real_behavior",
              "test_edit_task_real_behavior",
              "test_existing_data_loading_real_behavior",
              "test_open_schedule_editor_function_real_behavior",
              "test_profile_data_editing_real_behavior",
              "test_task_completion_real_behavior",
              "test_task_data_editing_real_behavior",
              "test_task_saving_real_behavior",
              "test_undo_delete_real_behavior",
              "test_user_data",
              "test_validation_error_handling_real_behavior"
            ],
            "`tests/ui/test_dialogs.py": [
              "mock_save",
              "test_dialog_imports",
              "test_dialog_instantiation",
              "test_generated_files_exist",
              "test_ui_files_exist",
              "test_user_data_access",
              "test_widget_imports"
            ],
            "`tests/ui/test_ui_widgets_coverage_expansion.py": [
              "app",
              "cleanup_widgets",
              "mock_message_boxes",
              "mock_user_data_dir",
              "on_delete_requested",
              "on_tags_changed",
              "on_values_changed",
              "temp_dir",
              "test_dynamic_list_container_add_blank_row_real_behavior",
              "test_dynamic_list_container_duplicate_detection_real_behavior",
              "test_dynamic_list_container_error_handling_real_behavior",
              "test_dynamic_list_container_get_values_real_behavior",
              "test_dynamic_list_container_initialization_real_behavior",
              "test_dynamic_list_container_row_deleted_real_behavior",
              "test_dynamic_list_container_row_edited_real_behavior",
              "test_dynamic_list_container_set_values_real_behavior",
              "test_dynamic_list_container_signal_emission_real_behavior",
              "test_period_row_widget_all_period_initialization_real_behavior",
              "test_period_row_widget_day_selection_real_behavior",
              "test_period_row_widget_default_initialization_real_behavior",
              "test_period_row_widget_delete_requested_signal_real_behavior",
              "test_period_row_widget_error_handling_real_behavior",
              "test_period_row_widget_get_period_data_real_behavior",
              "test_period_row_widget_initialization_real_behavior",
              "test_period_row_widget_load_period_data_real_behavior",
              "test_period_row_widget_read_only_mode_real_behavior",
              "test_period_row_widget_validation_real_behavior",
              "test_tag_widget_account_creation_mode_real_behavior",
              "test_tag_widget_add_duplicate_tag_real_behavior",
              "test_tag_widget_add_empty_tag_real_behavior",
              "test_tag_widget_add_tag_account_creation_mode_real_behavior",
              "test_tag_widget_add_tag_management_mode_real_behavior",
              "test_tag_widget_delete_tag_account_creation_mode_real_behavior",
              "test_tag_widget_delete_tag_real_behavior",
              "test_tag_widget_edit_tag_account_creation_mode_real_behavior",
              "test_tag_widget_edit_tag_real_behavior",
              "test_tag_widget_error_handling_real_behavior",
              "test_tag_widget_get_selected_tags_real_behavior",
              "test_tag_widget_management_mode_initialization_real_behavior",
              "test_tag_widget_refresh_tags_real_behavior",
              "test_tag_widget_selection_changed_signal_real_behavior",
              "test_tag_widget_selection_mode_checkbox_behavior_real_behavior",
              "test_tag_widget_selection_mode_initialization_real_behavior",
              "test_tag_widget_set_selected_tags_real_behavior",
              "test_tag_widget_undo_delete_real_behavior",
              "test_widget_integration_real_behavior",
              "test_widget_lifecycle_real_behavior",
              "test_widget_memory_usage_real_behavior",
              "test_widget_performance_real_behavior",
              "user_id"
            ],
            "`tests/ui/test_user_profile_dialog_coverage_expansion.py": [
              "dialog",
              "empty_dialog",
              "qapp",
              "test_add_custom_field_real_behavior",
              "test_add_loved_one_widget_real_behavior",
              "test_add_loved_one_widget_without_data_real_behavior",
              "test_cancel_real_behavior",
              "test_center_dialog_real_behavior",
              "test_close_event_declined_real_behavior",
              "test_close_event_real_behavior",
              "test_create_custom_field_list_real_behavior",
              "test_create_health_section_real_behavior",
              "test_create_loved_ones_section_real_behavior",
              "test_custom_field_interaction_real_behavior",
              "test_dialog_cleanup_real_behavior",
              "test_dialog_initialization_with_existing_data_real_behavior",
              "test_dialog_initialization_without_data_real_behavior",
              "test_dialog_modal_behavior_real_behavior",
              "test_dialog_size_constraints_real_behavior",
              "test_dialog_window_flags_real_behavior",
              "test_dialog_with_parent_real_behavior",
              "test_error_handling_real_behavior",
              "test_key_press_event_enter_real_behavior",
              "test_key_press_event_escape_real_behavior",
              "test_loved_one_widget_interaction_real_behavior",
              "test_multi_column_layout_real_behavior",
              "test_profile_widget_integration_real_behavior",
              "test_remove_custom_field_real_behavior",
              "test_remove_loved_one_widget_real_behavior",
              "test_save_personalization_real_behavior",
              "test_save_personalization_validation_error_real_behavior",
              "test_save_personalization_without_callback_real_behavior",
              "test_title_case_conversion_real_behavior",
              "test_user_data"
            ],
            "`tests/ui/test_widget_behavior.py": [
              "qapp",
              "test_checkin_enablement_real_behavior",
              "test_item_management_real_behavior",
              "test_tag_management_real_behavior",
              "test_tag_selection_mode_real_behavior",
              "test_task_enablement_real_behavior",
              "test_widget_initialization_real_behavior",
              "widget"
            ],
            "`tests/ui/test_widget_behavior_simple.py": [
              "qapp",
              "test_category_selection_widget_import_and_creation",
              "test_channel_selection_widget_import_and_creation",
              "test_checkin_settings_widget_import_and_creation",
              "test_dynamic_list_container_import_and_creation",
              "test_dynamic_list_field_import_and_creation",
              "test_tag_widget_import_and_creation",
              "test_tag_widget_selection_mode",
              "test_task_settings_widget_import_and_creation",
              "test_user_profile_settings_widget_import_and_creation"
            ],
            "`tests/unit/test_cleanup.py": [
              "__init__",
              "_cleanup_old_test_logs",
              "_cleanup_single_user",
              "_cleanup_temp_files",
              "_create_user_backup",
              "_find_orphaned_files",
              "_find_test_users",
              "_validate_user_data",
              "cleanup_test_users",
              "main",
              "reset_test_environment",
              "validate_test_data_integrity"
            ],
            "`tests/unit/test_config.py": [
              "test_base_data_dir_default",
              "test_default_messages_dir_path_default",
              "test_environment_override",
              "test_user_info_dir_path_default",
              "test_validate_ai_configuration_missing_url",
              "test_validate_ai_configuration_success",
              "test_validate_all_configuration_success",
              "test_validate_and_raise_if_invalid_failure",
              "test_validate_and_raise_if_invalid_success",
              "test_validate_communication_channels_no_tokens",
              "test_validate_communication_channels_success",
              "test_validate_core_paths_missing_directory",
              "test_validate_core_paths_success",
              "test_validate_environment_variables_success",
              "test_validate_file_organization_settings_success",
              "test_validate_logging_configuration_success",
              "test_validate_scheduler_configuration_success"
            ],
            "`tests/unit/test_error_handling.py": [
              "backup_function",
              "cleanup_function",
              "corrupt_data_function",
              "inner_function",
              "outer_function",
              "recover_data_function",
              "state_validation_function",
              "test_config_error",
              "test_data_error",
              "test_error_handler_custom_return",
              "test_error_handler_exception",
              "test_error_handler_logs_error",
              "test_error_handler_nested_exceptions",
              "test_error_handler_success",
              "test_error_handler_with_args_kwargs",
              "test_error_handling_different_exception_types",
              "test_error_handling_in_function_chain",
              "test_error_handling_with_recovery",
              "test_file_operation_error",
              "test_function",
              "test_handle_configuration_error",
              "test_handle_errors_custom_return",
              "test_handle_errors_exception",
              "test_handle_errors_logs_error",
              "test_handle_errors_specific_exception",
              "test_handle_errors_success",
              "test_handle_errors_with_args_kwargs",
              "test_handle_errors_with_logging_disabled",
              "test_handle_file_error",
              "test_mhm_error_basic",
              "test_mhm_error_with_details",
              "test_validation_error"
            ],
            "`tests/unit/test_file_operations.py": [
              "test_determine_file_path_default_messages",
              "test_determine_file_path_invalid_file_type",
              "test_determine_file_path_invalid_user_id",
              "test_determine_file_path_user_file",
              "test_ensure_user_directory_already_exists",
              "test_ensure_user_directory_success",
              "test_file_operations_lifecycle",
              "test_get_user_file_path_success",
              "test_load_json_data_corrupted_json",
              "test_load_json_data_empty_file",
              "test_load_json_data_file_not_found",
              "test_load_json_data_success",
              "test_load_json_data_unicode_content",
              "test_load_large_json_data",
              "test_save_json_data_complex_objects",
              "test_save_json_data_create_directory",
              "test_save_json_data_permission_error",
              "test_save_json_data_success",
              "test_save_large_json_data",
              "test_verify_file_access_missing_file",
              "test_verify_file_access_permission_error",
              "test_verify_file_access_success"
            ],
            "`tests/unit/test_logging_components.py": [
              "test_component_logger_propagate_and_handlers",
              "test_errors_routed_to_tests_logs_in_verbose_mode"
            ],
            "`tests/unit/test_no_direct_env_mutation_policy.py": [
              "test_no_direct_os_environ_mutations_in_tests"
            ],
            "`tests/unit/test_no_prints_policy.py": [
              "test_no_print_calls_in_tests_except_debug_marked"
            ],
            "`tests/unit/test_recurring_tasks.py": [
              "temp_user_dir",
              "test_calculate_next_due_date_daily",
              "test_calculate_next_due_date_invalid_pattern",
              "test_calculate_next_due_date_monthly",
              "test_calculate_next_due_date_weekly",
              "test_calculate_next_due_date_yearly",
              "test_complete_recurring_task_creates_next_instance",
              "test_create_recurring_task",
              "test_non_recurring_task_completion"
            ],
            "`tests/unit/test_schedule_management.py": [
              "test_schedule_period_lifecycle",
              "test_time_conversion_helpers",
              "test_validate_and_format_time"
            ],
            "`tests/unit/test_user_data_loader_idempotency.py": [
              "test_loader_registry_identity_and_idempotency"
            ],
            "`tests/unit/test_user_data_loader_order_insensitivity.py": [
              "_reload_in_order",
              "test_loader_registry_shared_and_complete_regardless_of_import_order"
            ],
            "`tests/unit/test_user_management.py": [
              "test_create_user_files_success",
              "test_get_all_user_ids_empty",
              "test_get_all_user_ids_with_users",
              "test_get_user_context_nonexistent_user",
              "test_get_user_context_success",
              "test_get_user_data_account_nonexistent_chat_id",
              "test_get_user_data_account_nonexistent_discord_id",
              "test_get_user_data_account_nonexistent_email",
              "test_get_user_data_account_with_chat_id",
              "test_get_user_data_account_with_discord_id",
              "test_get_user_data_account_with_email",
              "test_get_user_data_invalid_type",
              "test_get_user_data_multiple_types",
              "test_get_user_data_nonexistent_user",
              "test_get_user_data_single_type",
              "test_get_user_preferences_corrupted_file",
              "test_get_user_preferences_nonexistent_user",
              "test_get_user_preferences_success",
              "test_hybrid_get_user_data_nonexistent_user",
              "test_hybrid_get_user_data_success",
              "test_save_user_data_success",
              "test_save_user_preferences_invalid_user_id",
              "test_update_user_preferences_nonexistent_user",
              "test_update_user_preferences_success",
              "test_user_lifecycle"
            ],
            "`tests/unit/test_validation.py": [
              "test_is_valid_email_with_invalid_emails",
              "test_is_valid_email_with_valid_emails",
              "test_is_valid_phone_with_invalid_phones",
              "test_is_valid_phone_with_valid_phones",
              "test_title_case_with_various_inputs",
              "test_validate_new_user_data_empty_updates",
              "test_validate_new_user_data_invalid_account_status",
              "test_validate_new_user_data_invalid_channel_type",
              "test_validate_new_user_data_invalid_email",
              "test_validate_new_user_data_missing_account",
              "test_validate_new_user_data_missing_channel",
              "test_validate_new_user_data_missing_user_id",
              "test_validate_new_user_data_missing_username",
              "test_validate_new_user_data_success",
              "test_validate_new_user_data_user_already_exists",
              "test_validate_personalization_data_empty",
              "test_validate_personalization_data_invalid_custom_field_lists",
              "test_validate_personalization_data_invalid_custom_fields_type",
              "test_validate_personalization_data_invalid_date_format",
              "test_validate_personalization_data_invalid_list_fields",
              "test_validate_personalization_data_invalid_loved_one_item",
              "test_validate_personalization_data_invalid_loved_ones_type",
              "test_validate_personalization_data_invalid_string_fields",
              "test_validate_personalization_data_success",
              "test_validate_schedule_periods_all_period_excluded",
              "test_validate_schedule_periods_empty",
              "test_validate_schedule_periods_empty_days",
              "test_validate_schedule_periods_invalid_days",
              "test_validate_schedule_periods_invalid_days_type",
              "test_validate_schedule_periods_invalid_time_format",
              "test_validate_schedule_periods_invalid_time_order",
              "test_validate_schedule_periods_missing_times",
              "test_validate_schedule_periods_no_active_periods",
              "test_validate_schedule_periods_success",
              "test_validate_time_format_with_invalid_times",
              "test_validate_time_format_with_valid_times",
              "test_validate_user_update_account_invalid_email",
              "test_validate_user_update_account_invalid_status",
              "test_validate_user_update_account_missing_username",
              "test_validate_user_update_account_success",
              "test_validate_user_update_context_invalid_custom_fields",
              "test_validate_user_update_context_invalid_date",
              "test_validate_user_update_context_success",
              "test_validate_user_update_preferences_invalid_categories",
              "test_validate_user_update_preferences_invalid_channel_type",
              "test_validate_user_update_preferences_success",
              "test_validate_user_update_schedules_invalid_days",
              "test_validate_user_update_schedules_invalid_time_format",
              "test_validate_user_update_schedules_invalid_time_order",
              "test_validate_user_update_schedules_success",
              "test_validation_error_propagation",
              "test_validation_functions_work_together",
              "test_validation_with_real_file_operations"
            ],
            "`ui/dialogs/account_creator_dialog.py": [
              "__init__",
              "_build_features_dict",
              "_determine_chat_id",
              "_validate_and_accept__add_feature_settings",
              "_validate_and_accept__build_account_data",
              "_validate_and_accept__build_user_preferences",
              "_validate_and_accept__collect_basic_user_info",
              "_validate_and_accept__collect_channel_data",
              "_validate_and_accept__collect_data",
              "_validate_and_accept__collect_feature_settings",
              "_validate_and_accept__collect_widget_data",
              "_validate_and_accept__create_account",
              "_validate_and_accept__handle_success",
              "_validate_and_accept__input_errors",
              "_validate_and_accept__schedule_new_user",
              "_validate_and_accept__setup_task_tags",
              "_validate_and_accept__show_error_dialog",
              "_validate_and_accept__show_success_dialog",
              "_validate_and_accept__update_user_index",
              "accept",
              "center_dialog",
              "close_dialog",
              "create_account",
              "create_account_dialog",
              "get_account_data",
              "keyPressEvent",
              "load_category_widget",
              "load_checkin_settings_widget",
              "load_message_service_widget",
              "load_task_management_widget",
              "load_widgets",
              "on_feature_toggled",
              "on_personalization_save",
              "on_preferred_name_changed",
              "on_username_changed",
              "open_personalization_dialog",
              "setup_connections",
              "setup_dialog",
              "setup_feature_group_boxes",
              "setup_profile_button",
              "update_profile_button_state",
              "update_tab_visibility",
              "validate_account_data",
              "validate_and_accept",
              "validate_input"
            ],
            "`ui/dialogs/admin_panel.py": [
              "__init__",
              "get_admin_data",
              "set_admin_data",
              "setup_ui"
            ],
            "`ui/dialogs/category_management_dialog.py": [
              "__init__",
              "get_selected_categories",
              "load_user_category_data",
              "on_enable_messages_toggled",
              "save_category_settings",
              "set_selected_categories"
            ],
            "`ui/dialogs/channel_management_dialog.py": [
              "__init__",
              "get_selected_channel",
              "save_channel_settings",
              "set_selected_channel"
            ],
            "`ui/dialogs/checkin_management_dialog.py": [
              "__init__",
              "get_checkin_settings",
              "load_user_checkin_data",
              "on_enable_checkins_toggled",
              "save_checkin_settings",
              "set_checkin_settings"
            ],
            "`ui/dialogs/schedule_editor_dialog.py": [
              "__init__",
              "_trigger_rescheduling",
              "add_new_period",
              "cancel",
              "center_dialog",
              "collect_period_data",
              "find_lowest_available_period_number",
              "get_schedule_data",
              "handle_save",
              "load_existing_data",
              "open_schedule_editor",
              "remove_period_row",
              "resort_period_widgets",
              "save_schedule",
              "set_schedule_data",
              "setup_functionality",
              "sort_key",
              "undo_last_delete"
            ],
            "`ui/dialogs/task_completion_dialog.py": [
              "__init__",
              "get_completion_data",
              "get_completion_date",
              "get_completion_notes",
              "get_completion_time",
              "setup_completion_time_components",
              "setup_connections",
              "setup_ui"
            ],
            "`ui/dialogs/task_crud_dialog.py": [
              "__init__",
              "add_new_task",
              "complete_selected_task",
              "delete_completed_task",
              "delete_selected_task",
              "edit_selected_task",
              "get_selected_task_id",
              "load_data",
              "refresh_active_tasks",
              "refresh_completed_tasks",
              "restore_selected_task",
              "setup_connections",
              "setup_ui",
              "update_statistics"
            ],
            "`ui/dialogs/task_edit_dialog.py": [
              "__init__",
              "add_reminder_period",
              "collect_quick_reminders",
              "collect_recurring_task_data",
              "collect_reminder_periods",
              "collect_selected_tags",
              "delete_reminder_period",
              "get_due_time_as_24h",
              "load_recurring_task_data",
              "load_task_data",
              "on_hour_changed",
              "on_minute_changed",
              "on_no_due_date_toggled",
              "on_recurring_pattern_changed",
              "render_reminder_period_row",
              "render_reminder_periods",
              "save_task",
              "set_due_time_from_24h",
              "setup_connections",
              "setup_due_time_components",
              "setup_recurring_task_components",
              "setup_ui",
              "validate_form"
            ],
            "`ui/dialogs/task_management_dialog.py": [
              "__init__",
              "get_statistics",
              "on_enable_task_management_toggled",
              "save_task_settings"
            ],
            "`ui/dialogs/user_profile_dialog.py": [
              "__init__",
              "add_custom_field",
              "add_loved_one_widget",
              "cancel",
              "center_dialog",
              "collect_custom_field_data",
              "collect_loved_ones_data",
              "create_custom_field_list",
              "create_goals_section",
              "create_health_section",
              "create_interests_section",
              "create_loved_ones_section",
              "create_notes_section",
              "keyPressEvent",
              "open_personalization_dialog",
              "remove_custom_field",
              "remove_loved_one_widget",
              "save_personalization",
              "setup_ui",
              "title_case"
            ],
            "`ui/generate_ui_files.py": [
              "generate_all_ui_files",
              "generate_ui_file",
              "main"
            ],
            "`ui/generated/account_creator_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/admin_panel_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/category_management_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/category_selection_widget_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/channel_management_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/channel_selection_widget_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/checkin_element_template_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/checkin_management_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/checkin_settings_widget_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/dynamic_list_field_template_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/period_row_template_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/schedule_editor_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/tag_widget_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/task_completion_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/task_crud_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/task_edit_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/task_management_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/task_settings_widget_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/user_profile_management_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/generated/user_profile_settings_widget_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "`ui/ui_app_qt.py": [
              "__init__",
              "_send_test_message__get_selected_category",
              "_send_test_message__validate_service_running",
              "_send_test_message__validate_user_selection",
              "cleanup_old_requests",
              "closeEvent",
              "confirm_test_message",
              "connect_signals",
              "create_new_user",
              "disable_content_management",
              "edit_user_messages",
              "edit_user_schedules",
              "enable_content_management",
              "force_clean_cache",
              "initialize_ui",
              "is_service_running",
              "load_theme",
              "load_ui",
              "load_user_categories",
              "main",
              "manage_categories",
              "manage_checkins",
              "manage_communication_settings",
              "manage_personalization",
              "manage_task_crud",
              "manage_tasks",
              "manage_user_analytics",
              "on_category_selected",
              "on_save",
              "on_schedule_save",
              "on_user_selected",
              "open_message_editor",
              "open_schedule_editor",
              "refresh_user_list",
              "restart_service",
              "run_category_scheduler",
              "run_full_scheduler",
              "run_user_scheduler",
              "send_actual_test_message",
              "send_test_message",
              "show_configuration_help",
              "shutdown_ui_components",
              "start_service",
              "stop_service",
              "system_health_check",
              "toggle_logging_verbosity",
              "update_service_status",
              "update_user_index_on_startup",
              "validate_configuration",
              "validate_configuration_before_start",
              "view_all_users_summary",
              "view_cache_status",
              "view_log_file"
            ],
            "`ui/widgets/category_selection_widget.py": [
              "__init__",
              "get_selected_categories",
              "set_selected_categories"
            ],
            "`ui/widgets/channel_selection_widget.py": [
              "__init__",
              "get_all_contact_info",
              "get_selected_channel",
              "get_timezone",
              "populate_timezones",
              "set_contact_info",
              "set_selected_channel",
              "set_timezone"
            ],
            "`ui/widgets/checkin_settings_widget.py": [
              "__init__",
              "add_new_period",
              "add_new_question",
              "connect_question_checkboxes",
              "find_lowest_available_period_number",
              "get_checkin_settings",
              "get_default_question_state",
              "load_existing_data",
              "on_question_toggled",
              "remove_period_row",
              "set_checkin_settings",
              "set_question_checkboxes",
              "setup_connections",
              "showEvent",
              "undo_last_question_delete",
              "undo_last_time_period_delete"
            ],
            "`ui/widgets/dynamic_list_container.py": [
              "__init__",
              "__post_init__",
              "_add_blank_row",
              "_deduplicate_values",
              "_ensure_single_blank_row",
              "_first_blank_index",
              "_on_preset_toggled",
              "_on_row_deleted",
              "_on_row_edited",
              "get_values",
              "set_values"
            ],
            "`ui/widgets/dynamic_list_field.py": [
              "__init__",
              "_on_delete",
              "get_text",
              "is_blank",
              "is_checked",
              "on_checkbox_toggled",
              "on_editing_finished",
              "on_text_changed",
              "set_checked",
              "set_text"
            ],
            "`ui/widgets/period_row_widget.py": [
              "__init__",
              "_get_day_checkboxes",
              "_set_read_only__all_period_read_only",
              "_set_read_only__apply_read_only_styling",
              "_set_read_only__checkbox_states",
              "_set_read_only__clear_read_only_styling",
              "_set_read_only__delete_button_visibility",
              "_set_read_only__force_style_updates",
              "_set_read_only__normal_checkbox_states",
              "_set_read_only__time_inputs",
              "_set_read_only__visual_styling",
              "get_period_data",
              "get_period_name",
              "get_selected_days",
              "is_valid",
              "load_days",
              "load_period_data",
              "on_individual_day_toggled",
              "on_select_all_days_toggled",
              "request_delete",
              "set_period_name",
              "set_read_only",
              "setup_functionality"
            ],
            "`ui/widgets/tag_widget.py": [
              "__init__",
              "add_tag",
              "delete_tag",
              "edit_tag",
              "get_available_tags",
              "get_selected_tags",
              "load_tags",
              "on_tag_selection_changed",
              "refresh_tag_list",
              "refresh_tags",
              "set_selected_tags",
              "setup_connections",
              "setup_ui",
              "undo_last_tag_delete",
              "update_button_states"
            ],
            "`ui/widgets/task_settings_widget.py": [
              "__init__",
              "add_new_period",
              "find_lowest_available_period_number",
              "get_available_tags",
              "get_recurring_task_settings",
              "get_statistics",
              "get_task_settings",
              "load_existing_data",
              "load_recurring_task_settings",
              "refresh_tags",
              "remove_period_row",
              "save_recurring_task_settings",
              "set_recurring_task_settings",
              "set_task_settings",
              "setup_connections",
              "showEvent",
              "undo_last_period_delete",
              "undo_last_tag_delete"
            ],
            "`ui/widgets/user_profile_settings_widget.py": [
              "__init__",
              "_get_personalization_data__ensure_required_fields",
              "_get_personalization_data__extract_basic_fields",
              "_get_personalization_data__extract_date_of_birth",
              "_get_personalization_data__extract_dynamic_containers",
              "_get_personalization_data__extract_gender_identity",
              "_get_personalization_data__extract_loved_ones",
              "_get_personalization_data__extract_notes",
              "get_personalization_data",
              "get_settings",
              "load_existing_data",
              "populate_timezones",
              "set_checkbox_group",
              "set_settings"
            ],
            "`user/context_manager.py": [
              "__init__",
              "_get_conversation_history",
              "_get_conversation_insights",
              "_get_minimal_context",
              "_get_mood_trends",
              "_get_recent_activity",
              "_get_user_preferences",
              "_get_user_profile",
              "add_conversation_exchange",
              "format_context_for_ai",
              "get_ai_context",
              "get_current_user_context"
            ],
            "`user/user_context.py": [
              "__new__",
              "get_instance_context",
              "get_internal_username",
              "get_preference",
              "get_preferred_name",
              "get_user_id",
              "load_user_data",
              "save_user_data",
              "set_internal_username",
              "set_preference",
              "set_preferred_name",
              "set_user_id",
              "update_preference"
            ],
            "`user/user_preferences.py": [
              "__init__",
              "get_all_preferences",
              "get_preference",
              "is_schedule_period_active",
              "load_preferences",
              "remove_preference",
              "save_preferences",
              "set_preference",
              "set_schedule_period_active",
              "update_preference"
            ]
          }
        },
        "missing": {
          "count": 2975,
          "files": {
            "ai/cache_manager.py": [
              "__init__",
              "_cleanup_lru",
              "_generate_key",
              "_remove_entry",
              "clear",
              "clear_expired",
              "get",
              "get_context_cache",
              "get_entries_by_type",
              "get_response_cache",
              "get_stats",
              "remove_entries_by_type",
              "remove_user_entries",
              "set"
            ],
            "ai/chatbot.py": [
              "__init__",
              "__new__",
              "_call_lm_studio_api",
              "_create_command_parsing_prompt",
              "_create_command_parsing_with_clarification_prompt",
              "_create_comprehensive_context_prompt",
              "_detect_mode",
              "_detect_resource_constraints",
              "_enhance_conversational_engagement",
              "_get_adaptive_timeout",
              "_get_contextual_fallback",
              "_get_fallback_personalized_message",
              "_get_fallback_response",
              "_make_cache_key_inputs",
              "_optimize_prompt",
              "_smart_truncate_response",
              "_test_lm_studio_connection",
              "generate_contextual_response",
              "generate_personalized_message",
              "generate_quick_response",
              "generate_response",
              "get_ai_chatbot",
              "get_ai_status",
              "is_ai_available",
              "reload_system_prompt",
              "test_system_prompt_integration"
            ],
            "ai/context_builder.py": [
              "__init__",
              "__post_init__",
              "_calculate_wellness_score",
              "_determine_trend",
              "_generate_insights",
              "analyze_context",
              "build_user_context",
              "create_checkin_context",
              "create_context_prompt",
              "create_task_context",
              "get_context_builder"
            ],
            "ai/conversation_history.py": [
              "__init__",
              "__post_init__",
              "_cleanup_old_sessions",
              "add_message",
              "clear_history",
              "delete_session",
              "end_session",
              "get_active_session",
              "get_conversation_history",
              "get_conversation_summary",
              "get_history",
              "get_recent_messages",
              "get_session_messages",
              "get_statistics",
              "start_session"
            ],
            "ai/prompt_manager.py": [
              "__init__",
              "_load_custom_prompt",
              "add_prompt_template",
              "create_checkin_prompt",
              "create_contextual_prompt",
              "create_task_prompt",
              "custom_prompt_length",
              "fallback_prompt_keys",
              "get_available_prompts",
              "get_prompt",
              "get_prompt_manager",
              "get_prompt_template",
              "has_custom_prompt",
              "reload_custom_prompt",
              "remove_prompt_template"
            ],
            "communication/command_handlers/analytics_handler.py": [
              "_handle_checkin_analysis",
              "_handle_checkin_history",
              "_handle_completion_rate",
              "_handle_habit_analysis",
              "_handle_mood_trends",
              "_handle_quant_summary",
              "_handle_show_analytics",
              "_handle_sleep_analysis",
              "_handle_task_analytics",
              "_handle_task_stats",
              "_handle_wellness_score",
              "_truncate_response",
              "can_handle",
              "get_examples",
              "get_help",
              "handle"
            ],
            "communication/command_handlers/base_handler.py": [
              "can_handle",
              "get_examples",
              "get_help",
              "handle"
            ],
            "communication/command_handlers/checkin_handler.py": [
              "_handle_checkin_status",
              "_handle_continue_checkin",
              "_handle_start_checkin",
              "can_handle",
              "get_examples",
              "get_help",
              "handle"
            ],
            "communication/command_handlers/interaction_handlers.py": [
              "_handle_add_schedule_period",
              "_handle_add_schedule_period__parse_time_format",
              "_handle_checkin_history",
              "_handle_checkin_status",
              "_handle_commands_list",
              "_handle_complete_task",
              "_handle_complete_task__find_most_urgent_task",
              "_handle_complete_task__find_task_by_identifier",
              "_handle_completion_rate",
              "_handle_continue_checkin",
              "_handle_create_task",
              "_handle_create_task__parse_relative_date",
              "_handle_delete_task",
              "_handle_delete_task__find_task_by_identifier",
              "_handle_edit_schedule_period",
              "_handle_edit_schedule_period__parse_time_format",
              "_handle_examples",
              "_handle_general_help",
              "_handle_habit_analysis",
              "_handle_list_tasks",
              "_handle_list_tasks__apply_filters",
              "_handle_list_tasks__build_filter_info",
              "_handle_list_tasks__build_response",
              "_handle_list_tasks__create_rich_data",
              "_handle_list_tasks__format_due_date",
              "_handle_list_tasks__format_list",
              "_handle_list_tasks__generate_suggestions",
              "_handle_list_tasks__get_suggestion",
              "_handle_list_tasks__no_tasks_response",
              "_handle_list_tasks__sort_tasks",
              "_handle_messages",
              "_handle_mood_trends",
              "_handle_profile_stats",
              "_handle_quant_summary",
              "_handle_schedule_status",
              "_handle_show_analytics",
              "_handle_show_profile",
              "_handle_show_schedule",
              "_handle_sleep_analysis",
              "_handle_start_checkin",
              "_handle_status",
              "_handle_task_stats",
              "_handle_update_profile",
              "_handle_update_schedule",
              "_handle_update_task",
              "_handle_update_task__find_task_by_identifier",
              "_handle_wellness_score",
              "can_handle",
              "get_all_handlers",
              "get_examples",
              "get_help",
              "get_interaction_handler",
              "handle"
            ],
            "communication/command_handlers/profile_handler.py": [
              "_format_profile_text",
              "_handle_profile_stats",
              "_handle_show_profile",
              "_handle_update_profile",
              "can_handle",
              "get_examples",
              "get_help",
              "handle"
            ],
            "communication/command_handlers/schedule_handler.py": [
              "_handle_add_schedule_period",
              "_handle_add_schedule_period__parse_time_format",
              "_handle_edit_schedule_period",
              "_handle_edit_schedule_period__parse_time_format",
              "_handle_schedule_status",
              "_handle_show_schedule",
              "_handle_update_schedule",
              "can_handle",
              "get_examples",
              "get_help",
              "handle"
            ],
            "communication/command_handlers/task_handler.py": [
              "_handle_complete_task",
              "_handle_complete_task__find_task_by_identifier",
              "_handle_create_task",
              "_handle_create_task__parse_relative_date",
              "_handle_delete_task",
              "_handle_delete_task__find_task_by_identifier",
              "_handle_list_tasks",
              "_handle_list_tasks__apply_filters",
              "_handle_list_tasks__build_filter_info",
              "_handle_list_tasks__build_response",
              "_handle_list_tasks__create_rich_data",
              "_handle_list_tasks__format_due_date",
              "_handle_list_tasks__format_list",
              "_handle_list_tasks__generate_suggestions",
              "_handle_list_tasks__get_suggestion",
              "_handle_list_tasks__no_tasks_response",
              "_handle_list_tasks__sort_tasks",
              "_handle_task_stats",
              "_handle_update_task",
              "_handle_update_task__find_task_by_identifier",
              "can_handle",
              "get_examples",
              "get_help",
              "handle"
            ],
            "communication/communication_channels/base/base_channel.py": [
              "__init__",
              "__post_init__",
              "_set_status",
              "channel_type",
              "get_error",
              "get_status",
              "is_ready"
            ],
            "communication/communication_channels/base/command_registry.py": [
              "__init__",
              "__post_init__",
              "get_all_commands",
              "get_command",
              "get_command_registry",
              "get_enabled_commands",
              "is_command_registered",
              "register_command",
              "register_with_platform",
              "unregister_command",
              "unregister_from_platform"
            ],
            "communication/communication_channels/base/message_formatter.py": [
              "create_interactive_elements",
              "create_rich_content",
              "format_message",
              "get_message_formatter"
            ],
            "communication/communication_channels/base/rich_formatter.py": [
              "__init__",
              "create_embed",
              "create_interactive_view",
              "get_color_for_type",
              "get_rich_formatter"
            ],
            "communication/communication_channels/discord/api_client.py": [
              "__init__",
              "get_connection_latency",
              "get_discord_api_client",
              "is_connected"
            ],
            "communication/communication_channels/discord/bot.py": [
              "__init__",
              "_check_dns_resolution",
              "_check_network_connectivity",
              "_check_network_health",
              "_create_action_row",
              "_create_discord_embed",
              "_get_detailed_connection_status",
              "_shared__update_connection_status",
              "_should_attempt_reconnection",
              "_wait_for_network_recovery",
              "can_send_messages",
              "channel_type",
              "get_connection_status_summary",
              "get_health_status",
              "initialize__register_commands",
              "initialize__register_events",
              "initialize__run_bot_in_thread",
              "is_actually_connected"
            ],
            "communication/communication_channels/discord/event_handler.py": [
              "__init__",
              "__post_init__",
              "_register_default_handlers",
              "add_disconnect_handler",
              "add_error_handler",
              "add_message_handler",
              "add_ready_handler",
              "get_discord_event_handler",
              "register_events"
            ],
            "communication/communication_channels/email/bot.py": [
              "__init__",
              "_receive_emails_sync",
              "channel_type",
              "initialize__test_imap_connection",
              "initialize__test_smtp_connection",
              "send_message__send_email_sync"
            ],
            "communication/core/channel_monitor.py": [
              "__init__",
              "_attempt_channel_restart",
              "_check_and_restart_stuck_channels",
              "_restart_monitor_loop",
              "get_channel_health_status",
              "record_channel_failure",
              "record_channel_success",
              "reset_channel_failures",
              "set_channels",
              "start_restart_monitor",
              "stop_restart_monitor"
            ],
            "communication/core/channel_orchestrator.py": [
              "__init__",
              "__init____setup_event_loop",
              "__new__",
              "_check_logging_health",
              "_create_task_reminder_message",
              "_get_default_channel_configs",
              "_get_recipient_for_service",
              "_handle_scheduled_checkin",
              "_initialize_channel_with_retry_sync",
              "_select_weighted_message",
              "_send_ai_generated_message",
              "_send_checkin_prompt",
              "_send_predefined_message",
              "_should_send_checkin_prompt",
              "_shutdown_sync",
              "_start_sync",
              "get_active_channels",
              "get_configured_channels",
              "get_discord_connectivity_status",
              "get_last_task_reminder",
              "get_registered_channels",
              "handle_message_sending",
              "handle_task_reminder",
              "initialize_channels_from_config",
              "run_event_loop",
              "send_message_sync",
              "send_message_sync__queue_failed_message",
              "send_message_sync__run_async_sync",
              "set_scheduler_manager",
              "start_all",
              "start_all__start_restart_monitor",
              "start_all__start_retry_thread",
              "stop_all",
              "stop_all__stop_restart_monitor",
              "stop_all__stop_retry_thread"
            ],
            "communication/core/factory.py": [
              "_initialize_registry",
              "create_channel",
              "get_registered_channels"
            ],
            "communication/core/retry_manager.py": [
              "__init__",
              "_process_retry_queue",
              "_retry_loop",
              "clear_queue",
              "get_queue_size",
              "queue_failed_message",
              "start_retry_thread",
              "stop_retry_thread"
            ],
            "communication/message_processing/command_parser.py": [
              "__init__",
              "_ai_enhanced_parse",
              "_calculate_confidence",
              "_extract_entities_from_ai_response",
              "_extract_entities_rule_based",
              "_extract_intent_from_ai_response",
              "_extract_task_entities",
              "_extract_task_name_from_context",
              "_extract_update_entities",
              "_is_valid_intent",
              "_rule_based_parse",
              "get_enhanced_command_parser",
              "get_suggestions",
              "parse",
              "parse_command"
            ],
            "communication/message_processing/conversation_flow_manager.py": [
              "__init__",
              "_complete_checkin",
              "_generate_completion_message",
              "_get_next_question",
              "_get_personalized_welcome",
              "_get_question_text",
              "_handle_checkin",
              "_handle_command_during_checkin",
              "_load_user_states",
              "_save_user_states",
              "_select_checkin_questions_with_weighting",
              "_start_dynamic_checkin",
              "_validate_response",
              "clear_all_states",
              "clear_stuck_flows",
              "expire_checkin_flow_due_to_unrelated_outbound",
              "handle_contextual_question",
              "handle_inbound_message",
              "restart_checkin",
              "start_analytics_flow",
              "start_checkin",
              "start_messages_flow",
              "start_profile_flow",
              "start_schedule_flow",
              "start_tasks_flow"
            ],
            "communication/message_processing/interaction_manager.py": [
              "__init__",
              "_enhance_response_with_ai",
              "_extract_intent_from_text",
              "_get_commands_response",
              "_get_help_response",
              "_handle_contextual_chat",
              "_handle_structured_command",
              "_is_ai_command_response",
              "_is_clarification_request",
              "_is_valid_intent",
              "_parse_ai_command_response",
              "_try_ai_command_parsing",
              "get_available_commands",
              "get_command_definitions",
              "get_interaction_manager",
              "get_slash_command_map",
              "get_user_suggestions",
              "handle_message",
              "handle_user_message"
            ],
            "communication/message_processing/message_router.py": [
              "__init__",
              "_route_bang_command",
              "_route_slash_command",
              "get_bang_command_map",
              "get_command_definitions",
              "get_command_mapping",
              "get_message_router",
              "get_slash_command_map",
              "is_flow_command",
              "route_message"
            ],
            "core/auto_cleanup.py": [
              "_calculate_cache_size__calculate_pyc_files_size",
              "_calculate_cache_size__calculate_pycache_directories_size",
              "_get_cleanup_status__build_status_response",
              "_get_cleanup_status__calculate_days_since_cleanup",
              "_get_cleanup_status__format_next_cleanup_date",
              "_get_cleanup_status__get_never_cleaned_status",
              "_perform_cleanup__discover_cache_files",
              "_perform_cleanup__log_completion_results",
              "_perform_cleanup__log_discovery_results",
              "_perform_cleanup__remove_cache_directories",
              "_perform_cleanup__remove_cache_files",
              "_perform_cleanup__remove_cache_files_list",
              "archive_old_messages_for_all_users",
              "auto_cleanup_if_needed",
              "calculate_cache_size",
              "find_pyc_files",
              "find_pycache_dirs",
              "get_cleanup_status",
              "get_last_cleanup_timestamp",
              "perform_cleanup",
              "should_run_cleanup",
              "update_cleanup_timestamp"
            ],
            "core/backup_manager.py": [
              "__init__",
              "_add_directory_to_zip",
              "_backup_config_files",
              "_backup_log_files",
              "_backup_user_data",
              "_cleanup_old_backups",
              "_create_backup__cleanup_old_backups",
              "_create_backup__create_zip_file",
              "_create_backup__setup_backup",
              "_create_backup_manifest",
              "_get_backup_info",
              "_restore_config_files",
              "_restore_user_data",
              "_validate_backup__check_file_exists",
              "_validate_backup__check_file_integrity",
              "_validate_backup__validate_content_requirements",
              "_validate_backup__validate_manifest",
              "_validate_backup__validate_zip_file",
              "_validate_system_state__ensure_user_data_directory",
              "_validate_system_state__validate_user_index",
              "create_automatic_backup",
              "create_backup",
              "ensure_backup_directory",
              "list_backups",
              "perform_safe_operation",
              "restore_backup",
              "validate_backup",
              "validate_system_state"
            ],
            "core/checkin_analytics.py": [
              "__init__",
              "_calculate_habit_score",
              "_calculate_mood_score",
              "_calculate_overall_completion",
              "_calculate_sleep_consistency",
              "_calculate_sleep_score",
              "_calculate_streak",
              "_get_habit_status",
              "_get_mood_distribution",
              "_get_score_level",
              "_get_sleep_recommendations",
              "_get_wellness_recommendations",
              "get_checkin_history",
              "get_completion_rate",
              "get_habit_analysis",
              "get_mood_trends",
              "get_quantitative_summaries",
              "get_sleep_analysis",
              "get_task_weekly_stats",
              "get_wellness_score"
            ],
            "core/checkin_dynamic_manager.py": [
              "__init__",
              "_load_data",
              "build_next_question_with_response",
              "get_all_questions",
              "get_categories",
              "get_enabled_questions_for_ui",
              "get_question_definition",
              "get_question_text",
              "get_question_type",
              "get_question_validation",
              "get_response_statement",
              "get_transition_phrase",
              "validate_answer"
            ],
            "core/config.py": [
              "__init__",
              "_normalize_path",
              "ensure_user_directory",
              "get_available_channels",
              "get_backups_dir",
              "get_channel_class_mapping",
              "get_user_data_dir",
              "get_user_file_path",
              "print_configuration_report",
              "validate_ai_configuration",
              "validate_all_configuration",
              "validate_and_raise_if_invalid",
              "validate_communication_channels",
              "validate_core_paths",
              "validate_discord_config",
              "validate_email_config",
              "validate_environment_variables",
              "validate_file_organization_settings",
              "validate_logging_configuration",
              "validate_minimum_config",
              "validate_scheduler_configuration"
            ],
            "core/error_handling.py": [
              "__enter__",
              "__exit__",
              "__init__",
              "_get_default_data",
              "_get_user_friendly_message",
              "_log_error",
              "_show_user_error",
              "can_handle",
              "decorator",
              "handle_ai_error",
              "handle_communication_error",
              "handle_configuration_error",
              "handle_error",
              "handle_errors",
              "handle_file_error",
              "handle_network_error",
              "handle_validation_error",
              "recover",
              "safe_file_operation",
              "wrapper"
            ],
            "core/file_auditor.py": [
              "__init__",
              "_classify_path",
              "_get_audit_directories",
              "_split_env_list",
              "critical",
              "debug",
              "error",
              "info",
              "record_created",
              "start",
              "start_auditor",
              "stop",
              "stop_auditor",
              "warning"
            ],
            "core/file_operations.py": [
              "_create_user_files__account_file",
              "_create_user_files__checkins_file",
              "_create_user_files__context_file",
              "_create_user_files__determine_feature_enablement",
              "_create_user_files__log_files",
              "_create_user_files__message_files",
              "_create_user_files__preferences_file",
              "_create_user_files__schedules_file",
              "_create_user_files__sent_messages_file",
              "_create_user_files__task_files",
              "_create_user_files__update_user_references",
              "create_user_files",
              "determine_file_path",
              "load_json_data",
              "save_json_data",
              "verify_file_access"
            ],
            "core/logger.py": [
              "__init__",
              "_get_log_paths_for_environment",
              "_is_testing_environment",
              "_log",
              "apply_test_context_formatter_to_all_loggers",
              "cleanup_old_archives",
              "cleanup_old_logs",
              "clear_log_file_locks",
              "compress_old_logs",
              "critical",
              "debug",
              "disable_module_logging",
              "doRollover",
              "ensure_logs_directory",
              "error",
              "filter",
              "force_restart_logging",
              "format",
              "get_component_logger",
              "get_log_file_info",
              "get_log_level_from_env",
              "get_logger",
              "get_verbose_mode",
              "info",
              "set_console_log_level",
              "set_verbose_mode",
              "setup_logging",
              "setup_third_party_error_logging",
              "shouldRollover",
              "suppress_noisy_logging",
              "toggle_verbose_logging",
              "warning"
            ],
            "core/message_management.py": [
              "_parse_timestamp",
              "add_message",
              "archive_old_messages",
              "create_message_file_from_defaults",
              "delete_message",
              "edit_message",
              "ensure_user_message_files",
              "get_message_categories",
              "get_recent_messages",
              "get_timestamp_for_sorting",
              "load_default_messages",
              "store_sent_message",
              "update_message"
            ],
            "core/response_tracking.py": [
              "_get_response_log_filename",
              "get_recent_chat_interactions",
              "get_recent_checkins",
              "get_recent_responses",
              "get_timestamp_for_sorting",
              "get_user_info_for_tracking",
              "is_user_checkins_enabled",
              "store_chat_interaction",
              "store_user_response",
              "track_user_response"
            ],
            "core/schedule_management.py": [
              "add_schedule_period",
              "clear_schedule_periods_cache",
              "delete_schedule_period",
              "edit_schedule_period",
              "get_current_day_names",
              "get_current_time_periods_with_validation",
              "get_period_data__time_12h_display_to_24h",
              "get_period_data__time_24h_to_12h_display",
              "get_period_data__validate_and_format_time",
              "get_schedule_days",
              "get_schedule_time_periods",
              "get_user_info_for_schedule_management",
              "is_schedule_period_active",
              "set_schedule_days",
              "set_schedule_period_active",
              "set_schedule_periods",
              "sort_key"
            ],
            "core/schedule_utilities.py": [
              "get_active_schedules",
              "get_current_active_schedules",
              "is_schedule_active"
            ],
            "core/scheduler.py": [
              "__init__",
              "_remove_user_message_job",
              "_select_task_for_reminder__calculate_due_date_weight",
              "_select_task_for_reminder__calculate_priority_weight",
              "_select_task_for_reminder__calculate_task_weights",
              "_select_task_for_reminder__handle_edge_cases",
              "_select_task_for_reminder__select_task_by_weight",
              "cleanup_old_tasks",
              "clear_all_accumulated_jobs",
              "clear_all_accumulated_jobs_standalone",
              "get_random_time_within_period",
              "get_random_time_within_task_period",
              "handle_sending_scheduled_message",
              "handle_task_reminder",
              "is_job_for_category",
              "is_time_conflict",
              "log_scheduled_tasks",
              "perform_daily_log_archival",
              "process_category_schedule",
              "process_user_schedules",
              "reset_and_reschedule_daily_messages",
              "run_category_scheduler_standalone",
              "run_daily_scheduler",
              "run_full_daily_scheduler",
              "run_full_scheduler_standalone",
              "run_user_scheduler_standalone",
              "schedule_all_task_reminders",
              "schedule_all_users_immediately",
              "schedule_checkin_at_exact_time",
              "schedule_daily_message_job",
              "schedule_message_at_random_time",
              "schedule_message_for_period",
              "schedule_new_user",
              "schedule_task_reminder",
              "schedule_task_reminder_at_datetime",
              "schedule_task_reminder_at_time",
              "scheduler_loop",
              "select_task_for_reminder",
              "set_wake_timer",
              "stop_scheduler"
            ],
            "core/schemas.py": [
              "_accept_legacy_shape",
              "_coerce_bool",
              "_normalize_contact",
              "_normalize_days",
              "_normalize_flags",
              "_normalize_periods",
              "_valid_days",
              "_valid_time",
              "_validate_categories",
              "_validate_discord_id",
              "_validate_email",
              "_validate_timezone",
              "to_dict",
              "validate_account_dict",
              "validate_messages_file_dict",
              "validate_preferences_dict",
              "validate_schedules_dict"
            ],
            "core/service.py": [
              "__init__",
              "_check_and_fix_logging__check_recent_activity_timestamps",
              "_check_and_fix_logging__ensure_log_file_exists",
              "_check_and_fix_logging__force_restart_logging_system",
              "_check_and_fix_logging__read_recent_log_content",
              "_check_and_fix_logging__test_logging_functionality",
              "_check_and_fix_logging__verify_test_message_present",
              "_check_reschedule_requests__cleanup_request_file",
              "_check_reschedule_requests__discover_request_files",
              "_check_reschedule_requests__get_base_directory",
              "_check_reschedule_requests__handle_processing_error",
              "_check_reschedule_requests__parse_request_file",
              "_check_reschedule_requests__process_valid_request",
              "_check_reschedule_requests__validate_request_data",
              "_check_test_message_requests__cleanup_request_file",
              "_check_test_message_requests__discover_request_files",
              "_check_test_message_requests__get_base_directory",
              "_check_test_message_requests__handle_processing_error",
              "_check_test_message_requests__parse_request_file",
              "_check_test_message_requests__process_valid_request",
              "_check_test_message_requests__validate_request_data",
              "_cleanup_test_message_requests__get_base_directory",
              "_cleanup_test_message_requests__is_test_message_request_file",
              "_cleanup_test_message_requests__remove_request_file",
              "check_and_fix_logging",
              "check_reschedule_requests",
              "check_test_message_requests",
              "cleanup_reschedule_requests",
              "cleanup_test_message_requests",
              "emergency_shutdown",
              "get_scheduler_manager",
              "initialize_paths",
              "main",
              "run_service_loop",
              "shutdown",
              "signal_handler",
              "start",
              "validate_configuration"
            ],
            "core/service_utilities.py": [
              "__init__",
              "create_reschedule_request",
              "is_service_running",
              "load_and_localize_datetime",
              "should_run",
              "wait_for_network"
            ],
            "core/ui_management.py": [
              "add_period_widget_to_layout",
              "clear_period_widgets_from_layout",
              "collect_period_data_from_widgets",
              "load_period_widgets_for_category",
              "period_name_for_display",
              "period_name_for_storage"
            ],
            "core/user_data_handlers.py": [
              "_save_user_data__create_backup",
              "_save_user_data__legacy_preferences",
              "_save_user_data__normalize_data",
              "_save_user_data__save_single_type",
              "_save_user_data__update_index",
              "_save_user_data__validate_data",
              "_save_user_data__validate_input",
              "get_all_user_ids",
              "get_user_data",
              "register_data_loader",
              "save_user_data",
              "save_user_data_transaction",
              "update_channel_preferences",
              "update_user_account",
              "update_user_context",
              "update_user_preferences",
              "update_user_schedules"
            ],
            "core/user_data_manager.py": [
              "__init__",
              "_get_last_interaction",
              "_get_user_data_summary__add_file_info",
              "_get_user_data_summary__add_log_file_info",
              "_get_user_data_summary__add_message_file_info",
              "_get_user_data_summary__add_missing_message_file_info",
              "_get_user_data_summary__add_schedule_details",
              "_get_user_data_summary__add_sent_messages_details",
              "_get_user_data_summary__add_special_file_details",
              "_get_user_data_summary__ensure_message_files",
              "_get_user_data_summary__initialize_summary",
              "_get_user_data_summary__process_core_files",
              "_get_user_data_summary__process_enabled_message_files",
              "_get_user_data_summary__process_log_files",
              "_get_user_data_summary__process_message_files",
              "_get_user_data_summary__process_orphaned_message_files",
              "backup_user_data",
              "build_user_index",
              "delete_user_completely",
              "export_user_data",
              "get_all_user_summaries",
              "get_user_analytics_summary",
              "get_user_data_summary",
              "get_user_info_for_data_manager",
              "get_user_message_files",
              "get_user_summary",
              "rebuild_full_index",
              "rebuild_user_index",
              "remove_from_index",
              "search_users",
              "update_message_references",
              "update_user_index"
            ],
            "core/user_data_validation.py": [
              "_shared__title_case",
              "is_valid_email",
              "is_valid_phone",
              "validate_new_user_data",
              "validate_personalization_data",
              "validate_schedule_periods",
              "validate_schedule_periods__validate_time_format",
              "validate_user_update"
            ],
            "core/user_management.py": [
              "_ensure_default_loaders_once",
              "_get_user_data__load_account",
              "_get_user_data__load_context",
              "_get_user_data__load_preferences",
              "_get_user_data__load_schedules",
              "_get_user_id_by_identifier__by_chat_id",
              "_get_user_id_by_identifier__by_discord_user_id",
              "_get_user_id_by_identifier__by_email",
              "_get_user_id_by_identifier__by_internal_username",
              "_get_user_id_by_identifier__by_phone",
              "_load_presets_json",
              "_save_user_data__save_account",
              "_save_user_data__save_context",
              "_save_user_data__save_preferences",
              "_save_user_data__save_schedules",
              "add_personalization_item",
              "clear_personalization_cache",
              "clear_user_caches",
              "create_default_personalization_data",
              "create_default_schedule_periods",
              "create_new_user",
              "ensure_all_categories_have_schedules",
              "ensure_category_has_default_schedule",
              "ensure_unique_ids",
              "get_all_user_ids",
              "get_available_data_types",
              "get_data_type_info",
              "get_personalization_field",
              "get_predefined_options",
              "get_timezone_options",
              "get_user_categories",
              "get_user_data_with_metadata",
              "get_user_id_by_identifier",
              "load_and_ensure_ids",
              "migrate_legacy_schedules_structure",
              "register_data_loader",
              "register_default_loaders",
              "remove_personalization_item",
              "update_channel_preferences",
              "update_personalization_field",
              "update_user_account",
              "update_user_context",
              "update_user_schedules"
            ],
            "run_mhm.py": [
              "main"
            ],
            "run_tests.py": [
              "main",
              "print_test_mode_info",
              "run_command"
            ],
            "tasks/task_management.py": [
              "_calculate_next_due_date",
              "_create_next_recurring_task_instance",
              "add_user_task_tag",
              "are_tasks_enabled",
              "cleanup_task_reminders",
              "complete_task",
              "create_task",
              "delete_task",
              "ensure_task_directory",
              "get_task_by_id",
              "get_tasks_due_soon",
              "get_user_task_stats",
              "load_active_tasks",
              "load_completed_tasks",
              "remove_user_task_tag",
              "restore_task",
              "save_active_tasks",
              "save_completed_tasks",
              "schedule_task_reminders",
              "setup_default_task_tags",
              "update_task"
            ],
            "tests/behavior/test_account_management_real_behavior.py": [
              "cleanup_test_environment",
              "create_test_user_data",
              "main",
              "setup_test_environment",
              "test_category_management_real_behavior",
              "test_data_consistency_real_behavior",
              "test_feature_enablement_real_behavior",
              "test_integration_scenarios_real_behavior",
              "test_schedule_period_management_real_behavior",
              "test_user_data_loading_real_behavior"
            ],
            "tests/behavior/test_ai_chatbot_behavior.py": [
              "generate_response",
              "test_ai_chatbot_adaptive_timeout_responds_to_system_resources",
              "test_ai_chatbot_cache_performance_improvement",
              "test_ai_chatbot_cleanup_and_resource_management",
              "test_ai_chatbot_command_parsing_creates_structured_output",
              "test_ai_chatbot_concurrent_access_safety",
              "test_ai_chatbot_conversation_manager_integration",
              "test_ai_chatbot_error_handling_preserves_system_stability",
              "test_ai_chatbot_error_recovery_with_real_files",
              "test_ai_chatbot_generates_actual_responses",
              "test_ai_chatbot_handles_api_failures_gracefully",
              "test_ai_chatbot_performance_under_load",
              "test_ai_chatbot_prompt_optimization_improves_performance",
              "test_ai_chatbot_response_tracking_integration",
              "test_ai_chatbot_status_reporting_actual_system_state",
              "test_ai_chatbot_system_prompt_integration_test_actual_functionality",
              "test_ai_chatbot_tracks_conversation_history",
              "test_ai_chatbot_user_context_manager_integration",
              "test_ai_chatbot_uses_user_context_for_personalization",
              "test_ai_chatbot_with_real_user_data",
              "test_prompt_manager_creates_actual_file",
              "test_response_cache_actually_stores_and_retrieves_data",
              "test_response_cache_cleanup_actually_removes_entries",
              "test_singleton_behavior_creates_single_instance"
            ],
            "tests/behavior/test_ai_context_builder_behavior.py": [
              "build_context",
              "test_build_user_context_creates_fresh_timestamp",
              "test_build_user_context_creates_structured_context_data",
              "test_build_user_context_handles_concurrent_access",
              "test_build_user_context_handles_corrupted_user_data",
              "test_build_user_context_handles_empty_files",
              "test_build_user_context_handles_empty_user_data",
              "test_build_user_context_handles_error_conditions",
              "test_build_user_context_handles_large_user_data",
              "test_build_user_context_handles_long_user_id",
              "test_build_user_context_handles_missing_files",
              "test_build_user_context_handles_missing_user_data_gracefully",
              "test_build_user_context_handles_rapid_calls",
              "test_build_user_context_handles_special_characters_in_user_id",
              "test_build_user_context_handles_unicode_user_id",
              "test_build_user_context_includes_conversation_history",
              "test_build_user_context_includes_current_time",
              "test_build_user_context_includes_recent_checkins",
              "test_build_user_context_includes_user_data_from_files",
              "test_build_user_context_without_conversation_history",
              "test_context_builder_initialization_creates_components"
            ],
            "tests/behavior/test_ai_context_builder_coverage_expansion.py": [
              "test_analyze_context_error_handling",
              "test_analyze_context_with_checkin_data",
              "test_analyze_context_with_empty_checkins",
              "test_analyze_context_with_missing_data",
              "test_calculate_wellness_score_all_factors",
              "test_calculate_wellness_score_no_factors",
              "test_create_checkin_context",
              "test_create_checkin_context_error_handling",
              "test_create_context_prompt_error_handling",
              "test_create_context_prompt_with_analysis",
              "test_create_context_prompt_with_profile",
              "test_create_context_prompt_with_user_context",
              "test_create_task_context",
              "test_create_task_context_error_handling",
              "test_determine_trend_declining",
              "test_determine_trend_improving",
              "test_determine_trend_insufficient_data",
              "test_determine_trend_stable",
              "test_generate_insights_dental_hygiene",
              "test_generate_insights_energy_patterns",
              "test_generate_insights_excellent_breakfast",
              "test_generate_insights_low_mood",
              "test_generate_insights_poor_breakfast",
              "test_generate_insights_positive_mood",
              "test_get_context_builder_singleton"
            ],
            "tests/behavior/test_ai_conversation_history_behavior.py": [
              "add_message",
              "test_add_message_appends_to_existing_session",
              "test_add_message_includes_timestamp",
              "test_add_message_persists_to_session",
              "test_add_message_validates_content",
              "test_add_message_validates_role",
              "test_clear_history_removes_session_data",
              "test_conversation_history_handles_concurrent_access",
              "test_conversation_history_handles_large_messages",
              "test_conversation_history_handles_rapid_access",
              "test_conversation_history_handles_special_characters",
              "test_conversation_history_handles_unicode_messages",
              "test_conversation_history_initialization_creates_components",
              "test_delete_session_removes_specific_session",
              "test_end_session_terminates_active_session",
              "test_get_conversation_summary_handles_empty_history",
              "test_get_conversation_summary_returns_actual_summary",
              "test_get_history_returns_all_sessions",
              "test_get_recent_messages_handles_empty_history",
              "test_get_recent_messages_handles_negative_limit",
              "test_get_recent_messages_handles_zero_limit",
              "test_get_recent_messages_respects_limit",
              "test_get_recent_messages_returns_actual_data",
              "test_get_statistics_returns_actual_data",
              "test_start_session_creates_actual_session"
            ],
            "tests/behavior/test_auto_cleanup_behavior.py": [
              "mock_exists_with_changes",
              "mock_walk_with_error",
              "temp_test_dir",
              "temp_test_environment",
              "temp_tracker_file",
              "test_auto_cleanup_if_needed_not_needed_real_behavior",
              "test_auto_cleanup_if_needed_real_behavior",
              "test_calculate_cache_size_concurrent_file_changes_real_behavior",
              "test_calculate_cache_size_empty_inputs_real_behavior",
              "test_calculate_cache_size_file_corruption_handling_real_behavior",
              "test_calculate_cache_size_large_cache_scenario_real_behavior",
              "test_calculate_cache_size_nested_directory_structure_real_behavior",
              "test_calculate_cache_size_nonexistent_files_real_behavior",
              "test_calculate_cache_size_permission_error_simulation_real_behavior",
              "test_calculate_cache_size_real_behavior",
              "test_find_pyc_files_real_behavior",
              "test_find_pycache_dirs_real_behavior",
              "test_get_cleanup_status_29_days_real_behavior",
              "test_get_cleanup_status_31_days_real_behavior",
              "test_get_cleanup_status_corrupted_tracker_file_real_behavior",
              "test_get_cleanup_status_empty_tracker_file_real_behavior",
              "test_get_cleanup_status_exactly_30_days_real_behavior",
              "test_get_cleanup_status_invalid_timestamp_real_behavior",
              "test_get_cleanup_status_missing_timestamp_field_real_behavior",
              "test_get_cleanup_status_never_cleaned_real_behavior",
              "test_get_cleanup_status_overdue_cleanup_real_behavior",
              "test_get_cleanup_status_recent_cleanup_real_behavior",
              "test_get_cleanup_status_very_old_cleanup_real_behavior",
              "test_get_cleanup_status_very_recent_cleanup_real_behavior",
              "test_get_last_cleanup_timestamp_no_file_real_behavior",
              "test_get_last_cleanup_timestamp_with_file_real_behavior",
              "test_perform_cleanup_real_behavior",
              "test_should_run_cleanup_custom_interval_real_behavior",
              "test_should_run_cleanup_never_cleaned_real_behavior",
              "test_should_run_cleanup_old_cleanup_real_behavior",
              "test_should_run_cleanup_recent_cleanup_real_behavior",
              "test_update_cleanup_timestamp_real_behavior"
            ],
            "tests/behavior/test_backup_manager_behavior.py": [
              "_cleanup_test_files",
              "_create_test_config_files",
              "failing_operation",
              "setup_backup_manager",
              "test_backup_creation_and_validation_real_behavior",
              "test_backup_manager_error_handling_real_behavior",
              "test_backup_manager_initialization_real_behavior",
              "test_backup_manager_with_empty_user_directory_real_behavior",
              "test_backup_manager_with_large_user_data_real_behavior",
              "test_backup_rotation_by_age_real_behavior",
              "test_backup_rotation_by_count_real_behavior",
              "test_create_automatic_backup_real_behavior",
              "test_create_backup_with_all_components_real_behavior",
              "test_create_backup_with_config_files_real_behavior",
              "test_create_backup_with_user_data_real_behavior",
              "test_ensure_backup_directory_real_behavior",
              "test_list_backups_real_behavior",
              "test_operation",
              "test_perform_safe_operation_real_behavior",
              "test_perform_safe_operation_with_failure_real_behavior",
              "test_restore_backup_with_config_files_real_behavior",
              "test_restore_backup_with_nonexistent_file_real_behavior",
              "test_validate_backup_real_behavior",
              "test_validate_backup_with_corrupted_file_real_behavior",
              "test_validate_backup_with_missing_file_real_behavior",
              "test_validate_system_state_real_behavior",
              "test_validate_system_state_with_missing_user_dir_real_behavior"
            ],
            "tests/behavior/test_checkin_analytics_behavior.py": [
              "analytics",
              "mock_checkins_for_completion",
              "mock_checkins_for_history",
              "mock_checkins_for_tasks",
              "mock_checkins_for_wellness",
              "mock_checkins_with_habits",
              "mock_checkins_with_mood",
              "mock_checkins_with_sleep",
              "test_analytics_initialization_real_behavior",
              "test_checkin_history_no_data_real_behavior",
              "test_checkin_history_with_data_real_behavior",
              "test_completion_rate_no_data_real_behavior",
              "test_completion_rate_with_data_real_behavior",
              "test_habit_analysis_no_data_real_behavior",
              "test_habit_analysis_with_data_real_behavior",
              "test_mood_trends_invalid_mood_data_real_behavior",
              "test_mood_trends_no_data_real_behavior",
              "test_mood_trends_with_data_real_behavior",
              "test_sleep_analysis_no_data_real_behavior",
              "test_sleep_analysis_with_data_real_behavior",
              "test_task_weekly_stats_no_data_real_behavior",
              "test_task_weekly_stats_with_data_real_behavior",
              "test_wellness_score_no_data_real_behavior",
              "test_wellness_score_with_data_real_behavior"
            ],
            "tests/behavior/test_command_parser_coverage_expansion_phase3_simple.py": [
              "setup_method",
              "test_error_handling_in_parsing",
              "test_extract_intent_from_ai_response_case_insensitive",
              "test_extract_intent_from_ai_response_complete_task",
              "test_extract_intent_from_ai_response_create_task",
              "test_extract_intent_from_ai_response_list_tasks",
              "test_extract_intent_from_ai_response_no_match",
              "test_extract_intent_from_ai_response_start_checkin",
              "test_extract_task_entities_basic",
              "test_extract_task_entities_complex",
              "test_extract_task_entities_no_match",
              "test_extract_task_entities_with_due_date",
              "test_extract_task_entities_with_priority",
              "test_extract_task_name_from_context_basic",
              "test_extract_task_name_from_context_complex",
              "test_extract_task_name_from_context_no_match",
              "test_extract_update_entities_complex",
              "test_extract_update_entities_due_date",
              "test_extract_update_entities_due_short",
              "test_extract_update_entities_no_match",
              "test_extract_update_entities_priority",
              "test_get_enhanced_command_parser_singleton",
              "test_get_suggestions_analytics_keywords",
              "test_get_suggestions_checkin_keywords",
              "test_get_suggestions_empty_input",
              "test_get_suggestions_profile_keywords",
              "test_get_suggestions_schedule_keywords",
              "test_get_suggestions_task_keywords",
              "test_get_suggestions_unknown_keywords",
              "test_parse_command_function",
              "test_parse_command_function_empty",
              "test_parse_command_function_none",
              "test_parser_ai_response_processing",
              "test_parser_entity_extraction_integration",
              "test_parser_initialization",
              "test_parser_initialization_components",
              "test_parser_integration_with_real_inputs",
              "test_parser_method_signatures",
              "test_parser_parse_method",
              "test_parser_parse_method_empty",
              "test_parser_parse_method_none",
              "test_parser_parse_method_whitespace",
              "test_parser_robustness",
              "test_parser_suggestions_integration",
              "test_parser_with_mock_ai_chatbot",
              "test_parser_with_mock_interaction_handlers",
              "test_parsing_result_initialization",
              "test_pattern_matching_edge_cases"
            ],
            "tests/behavior/test_communication_behavior.py": [
              "comm_manager",
              "mock_channel_config",
              "realistic_mock_channel",
              "temp_dir",
              "test_communication_manager_initialization",
              "test_communication_manager_singleton",
              "test_get_active_channels",
              "test_initialize_channels_from_config",
              "test_send_message_sync_channel_not_found",
              "test_send_message_sync_channel_not_ready",
              "test_send_message_sync_with_realistic_channel"
            ],
            "tests/behavior/test_communication_command_parser_behavior.py": [
              "test_command_parser_initialization_creates_components"
            ],
            "tests/behavior/test_communication_factory_coverage_expansion.py": [
              "__init__",
              "channel_type",
              "test_create_channel_successful_creation",
              "test_create_channel_unknown_type",
              "test_factory_config_integration",
              "test_factory_dynamic_import_handling",
              "test_factory_error_handling_create_channel",
              "test_factory_error_handling_get_channels",
              "test_factory_error_handling_initialization",
              "test_factory_logging_behavior",
              "test_factory_registry_persistence",
              "test_factory_singleton_behavior",
              "test_get_registered_channels_empty_registry",
              "test_get_registered_channels_with_channels",
              "test_initialize_registry_already_initialized",
              "test_initialize_registry_successful_registration",
              "test_initialize_registry_with_attribute_error",
              "test_initialize_registry_with_import_error"
            ],
            "tests/behavior/test_communication_interaction_manager_behavior.py": [
              "test_interaction_manager_initialization_creates_components",
              "test_process_message_creates_interaction_record",
              "test_process_message_handles_ai_chat",
              "test_process_message_handles_checkin_commands",
              "test_process_message_handles_command_parsing",
              "test_process_message_handles_concurrent_access",
              "test_process_message_handles_conversation_context",
              "test_process_message_handles_conversation_flow",
              "test_process_message_handles_empty_message",
              "test_process_message_handles_error_conditions",
              "test_process_message_handles_feature_flags",
              "test_process_message_handles_help_commands",
              "test_process_message_handles_long_messages",
              "test_process_message_handles_mixed_content",
              "test_process_message_handles_profile_commands",
              "test_process_message_handles_rate_limiting",
              "test_process_message_handles_schedule_commands",
              "test_process_message_handles_special_characters",
              "test_process_message_handles_task_commands",
              "test_process_message_handles_unicode_characters",
              "test_process_message_handles_unknown_commands",
              "test_process_message_handles_user_preferences",
              "test_process_message_handles_whitespace_only_message",
              "test_process_message_includes_interaction_type",
              "test_process_message_includes_timestamp",
              "test_process_message_includes_user_context"
            ],
            "tests/behavior/test_communication_manager_coverage_expansion.py": [
              "comm_manager",
              "mock_channel_config",
              "realistic_mock_channel",
              "test_async_channel_initialization_real_behavior",
              "test_async_message_sending_channel_not_ready_real_behavior",
              "test_async_message_sending_real_behavior",
              "test_async_shutdown_real_behavior",
              "test_async_startup_real_behavior",
              "test_broadcast_message_real_behavior",
              "test_channel_initialization_with_retry_real_behavior",
              "test_channel_restart_attempt_real_behavior",
              "test_channel_restart_monitoring_real_behavior",
              "test_create_task_reminder_message_real_behavior",
              "test_data_dir",
              "test_default_channel_configs_real_behavior",
              "test_discord_connectivity_status_real_behavior",
              "test_event_loop_setup_real_behavior",
              "test_get_all_statuses_real_behavior",
              "test_get_channel_status_real_behavior",
              "test_get_recipient_for_service_real_behavior",
              "test_handle_message_sending_real_behavior",
              "test_handle_scheduled_checkin_real_behavior",
              "test_handle_task_reminder_real_behavior",
              "test_health_check_all_real_behavior",
              "test_logging_health_check_real_behavior",
              "test_message_queuing_real_behavior",
              "test_receive_messages_real_behavior",
              "test_restart_monitor_management_real_behavior",
              "test_retry_queue_processing_real_behavior",
              "test_retry_queue_processing_with_failure_real_behavior",
              "test_retry_thread_management_real_behavior",
              "test_run_async_sync_real_behavior",
              "test_send_ai_generated_message_real_behavior",
              "test_send_checkin_prompt_real_behavior",
              "test_send_predefined_message_real_behavior",
              "test_set_scheduler_manager_real_behavior",
              "test_should_send_checkin_prompt_real_behavior",
              "test_start_all_real_behavior",
              "test_stop_all_real_behavior",
              "test_sync_channel_initialization_real_behavior",
              "test_sync_shutdown_real_behavior",
              "test_sync_startup_real_behavior"
            ],
            "tests/behavior/test_config_coverage_expansion_phase3_simple.py": [
              "test_config_validation_error_initialization",
              "test_config_validation_error_with_none_values",
              "test_configuration_constants_exist",
              "test_configuration_error_handling",
              "test_configuration_validation_integration",
              "test_directory_creation_functions",
              "test_ensure_user_directory_failure",
              "test_ensure_user_directory_success",
              "test_environment_variable_loading",
              "test_get_available_channels",
              "test_get_backups_dir_production_mode",
              "test_get_backups_dir_testing_mode",
              "test_get_channel_class_mapping",
              "test_get_user_data_dir",
              "test_get_user_file_path",
              "test_normalize_path_edge_cases",
              "test_normalize_path_function",
              "test_path_handling_functions",
              "test_print_configuration_report",
              "test_print_configuration_report_no_channels",
              "test_validate_ai_configuration_invalid_url",
              "test_validate_ai_configuration_missing_url",
              "test_validate_ai_configuration_valid_config",
              "test_validate_all_configuration_integration",
              "test_validate_and_raise_if_invalid",
              "test_validate_communication_channels",
              "test_validate_core_paths_success",
              "test_validate_discord_config",
              "test_validate_email_config",
              "test_validate_environment_variables",
              "test_validate_file_organization_settings",
              "test_validate_logging_configuration",
              "test_validate_minimum_config",
              "test_validate_scheduler_configuration",
              "test_validation_functions_return_correct_types"
            ],
            "tests/behavior/test_conversation_behavior.py": [
              "test_checkin_flow_completion",
              "test_checkin_flow_progression",
              "test_conversation_manager_cancel_handling",
              "test_conversation_manager_cleanup_and_resource_management",
              "test_conversation_manager_command_handling",
              "test_conversation_manager_concurrent_access_safety",
              "test_conversation_manager_error_handling_preserves_system_stability",
              "test_conversation_manager_error_recovery_with_real_files",
              "test_conversation_manager_initialization_creates_structure",
              "test_conversation_manager_integration_with_response_tracking",
              "test_conversation_manager_performance_under_load",
              "test_conversation_manager_with_real_user_data",
              "test_get_question_text_returns_personalized_questions",
              "test_handle_contextual_question_integrates_with_ai",
              "test_handle_inbound_message_creates_user_state",
              "test_handle_inbound_message_preserves_existing_state",
              "test_start_checkin_creates_checkin_state",
              "test_start_checkin_handles_disabled_user",
              "test_validate_response_handles_edge_cases",
              "test_validate_response_handles_various_inputs"
            ],
            "tests/behavior/test_core_message_management_coverage_expansion.py": [
              "test_get_message_categories_from_env_real_behavior",
              "test_get_message_categories_from_json_real_behavior",
              "test_get_message_categories_no_env_real_behavior",
              "test_get_timestamp_for_sorting_invalid_item_real_behavior",
              "test_get_timestamp_for_sorting_real_behavior",
              "test_get_timestamp_for_sorting_string_real_behavior",
              "test_load_default_messages_file_not_found_real_behavior",
              "test_load_default_messages_real_behavior",
              "test_parse_timestamp_real_behavior"
            ],
            "tests/behavior/test_core_service_coverage_expansion.py": [
              "mock_communication_manager",
              "mock_config",
              "mock_remove_with_disappearing_files",
              "mock_remove_with_partial_failure",
              "mock_scheduler_manager",
              "service",
              "test_check_and_fix_logging_basic_success",
              "test_check_and_fix_logging_check_recent_activity_timestamps_invalid_timestamp",
              "test_check_and_fix_logging_check_recent_activity_timestamps_old_activity",
              "test_check_and_fix_logging_check_recent_activity_timestamps_recent_activity",
              "test_check_and_fix_logging_failure_real_behavior",
              "test_check_and_fix_logging_file_creation_failure",
              "test_check_and_fix_logging_file_missing",
              "test_check_and_fix_logging_old_activity_restart",
              "test_check_and_fix_logging_read_recent_log_content_large_file",
              "test_check_and_fix_logging_read_recent_log_content_small_file",
              "test_check_and_fix_logging_recent_activity_detected",
              "test_check_and_fix_logging_success_real_behavior",
              "test_check_and_fix_logging_verify_test_message_present_found",
              "test_check_and_fix_logging_verify_test_message_present_not_found",
              "test_check_reschedule_requests_handle_processing_error_cleanup_failure",
              "test_check_reschedule_requests_handle_processing_error_successful_cleanup",
              "test_check_reschedule_requests_invalid_file",
              "test_check_reschedule_requests_json_error",
              "test_check_reschedule_requests_no_files",
              "test_check_reschedule_requests_old_file_processed",
              "test_check_reschedule_requests_valid_file",
              "test_check_reschedule_requests_validate_request_data_missing_fields",
              "test_check_reschedule_requests_validate_request_data_old_timestamp",
              "test_check_test_message_requests_communication_error",
              "test_check_test_message_requests_handle_processing_error_cleanup_failure",
              "test_check_test_message_requests_handle_processing_error_successful_cleanup",
              "test_check_test_message_requests_invalid_file",
              "test_check_test_message_requests_json_error",
              "test_check_test_message_requests_no_communication_manager",
              "test_check_test_message_requests_no_files",
              "test_check_test_message_requests_valid_file",
              "test_cleanup_test_message_requests_concurrent_access_simulation_real_behavior",
              "test_cleanup_test_message_requests_directory_access_error_real_behavior",
              "test_cleanup_test_message_requests_empty_directory_real_behavior",
              "test_cleanup_test_message_requests_file_in_use_error_real_behavior",
              "test_cleanup_test_message_requests_file_permission_error_real_behavior",
              "test_cleanup_test_message_requests_large_number_of_files_real_behavior",
              "test_cleanup_test_message_requests_mixed_file_types_real_behavior",
              "test_cleanup_test_message_requests_partial_failure_real_behavior",
              "test_cleanup_test_message_requests_remove_request_file_generic_error_real_behavior",
              "test_cleanup_test_message_requests_remove_request_file_not_found_error_real_behavior",
              "test_cleanup_test_message_requests_remove_request_file_permission_error_real_behavior",
              "test_cleanup_test_message_requests_remove_request_file_success_real_behavior",
              "test_get_scheduler_manager_real_behavior",
              "test_initialize_paths_real_behavior",
              "test_initialize_paths_with_empty_categories_real_behavior",
              "test_initialize_paths_with_invalid_categories_real_behavior",
              "test_initialize_paths_with_none_user_id_real_behavior",
              "test_initialize_paths_with_path_generation_error_real_behavior",
              "test_main_function_real_behavior",
              "test_main_function_with_service_failure_real_behavior",
              "test_service_atexit_handler_real_behavior",
              "test_service_atexit_handler_with_manager_stop_failure_real_behavior",
              "test_service_atexit_handler_with_none_managers_real_behavior",
              "test_service_cleanup_reschedule_requests_real_behavior",
              "test_service_cleanup_test_message_requests_real_behavior",
              "test_service_initialization_error_real_behavior",
              "test_service_initialization_real_behavior",
              "test_service_retry_mechanism_real_behavior",
              "test_service_signal_handlers_real_behavior",
              "test_service_startup_time_tracking_real_behavior",
              "test_signal_handler_real_behavior",
              "test_start_service_communication_manager_failure_real_behavior",
              "test_start_service_configuration_failure_real_behavior",
              "test_start_service_path_initialization_failure_real_behavior",
              "test_start_service_scheduler_manager_failure_real_behavior",
              "test_start_service_success_real_behavior",
              "test_stop_service_real_behavior",
              "test_stop_service_with_manager_stop_failure_real_behavior",
              "test_stop_service_with_none_managers_real_behavior",
              "test_validate_configuration_failure_real_behavior",
              "test_validate_configuration_success_real_behavior"
            ],
            "tests/behavior/test_discord_bot_behavior.py": [
              "discord_bot",
              "mock_discord_bot",
              "test_connection_status_update_actually_changes_state",
              "test_detailed_connection_status_returns_actual_state",
              "test_discord_bot_channel_type_is_async",
              "test_discord_bot_cleanup_and_resource_management",
              "test_discord_bot_concurrent_access_safety",
              "test_discord_bot_connection_status_summary_returns_readable_string",
              "test_discord_bot_error_handling_preserves_system_stability",
              "test_discord_bot_error_recovery_with_real_files",
              "test_discord_bot_health_check_verifies_actual_status",
              "test_discord_bot_health_status_returns_actual_metrics",
              "test_discord_bot_initialization_creates_proper_structure",
              "test_discord_bot_initialization_with_dns_failure",
              "test_discord_bot_initialization_with_valid_token",
              "test_discord_bot_initialization_without_token",
              "test_discord_bot_initialize_creates_thread",
              "test_discord_bot_integration_with_conversation_manager",
              "test_discord_bot_integration_with_user_management",
              "test_discord_bot_is_actually_connected_checks_real_state",
              "test_discord_bot_is_initialized_checks_actual_state",
              "test_discord_bot_manual_reconnect_actually_reconnects",
              "test_discord_bot_performance_under_load",
              "test_discord_bot_receive_messages_returns_actual_data",
              "test_discord_bot_send_dm_actually_sends_direct_message",
              "test_discord_bot_send_message_actually_sends",
              "test_discord_bot_send_message_handles_errors",
              "test_discord_bot_shutdown_actually_cleans_up",
              "test_discord_bot_shutdown_actually_stops_thread",
              "test_discord_bot_with_real_user_data",
              "test_discord_checkin_flow_end_to_end",
              "test_discord_complete_task_by_name_variation",
              "test_discord_message_to_interaction_manager_complete_task_prompt",
              "test_discord_response_after_task_reminder",
              "test_discord_task_create_update_complete",
              "test_dns_resolution_check_actually_tests_connectivity",
              "test_dns_resolution_fallback_uses_alternative_servers",
              "test_interaction_manager_single_response",
              "test_network_connectivity_check_tests_multiple_endpoints",
              "test_network_connectivity_fallback_tries_alternative_endpoints",
              "test_user_setup"
            ],
            "tests/behavior/test_dynamic_checkin_behavior.py": [
              "test_build_next_question_with_response",
              "test_complete_question_flow_variety",
              "test_conversation_manager_uses_dynamic_questions",
              "test_dynamic_checkin_manager_initialization",
              "test_question_definitions",
              "test_question_text_uses_dynamic_manager",
              "test_response_statements",
              "test_response_variety",
              "test_transition_phrase_variety",
              "test_ui_questions_format",
              "test_validation",
              "test_validation_uses_dynamic_manager"
            ],
            "tests/behavior/test_email_bot_behavior.py": [
              "send_email",
              "setup_method",
              "test_email_bot_async_shutdown_method_behavior",
              "test_email_bot_data_integrity",
              "test_email_bot_error_handling_preserves_system_stability",
              "test_email_bot_initialization_creates_proper_structure",
              "test_email_bot_initialization_with_custom_config",
              "test_email_bot_legacy_start_method_behavior",
              "test_email_bot_legacy_start_method_failure_behavior",
              "test_email_bot_performance_under_load",
              "test_email_bot_status_checking_behavior"
            ],
            "tests/behavior/test_enhanced_command_parser_behavior.py": [
              "parse_command",
              "setup_method",
              "test_enhanced_command_parser_ai_enhanced_parsing_behavior",
              "test_enhanced_command_parser_case_insensitivity_behavior",
              "test_enhanced_command_parser_checkin_patterns_behavior",
              "test_enhanced_command_parser_confidence_calculation_behavior",
              "test_enhanced_command_parser_consistency_behavior",
              "test_enhanced_command_parser_empty_message_behavior",
              "test_enhanced_command_parser_end_to_end_behavior",
              "test_enhanced_command_parser_entity_extraction_behavior",
              "test_enhanced_command_parser_error_handling_behavior",
              "test_enhanced_command_parser_fallback_behavior",
              "test_enhanced_command_parser_help_patterns_behavior",
              "test_enhanced_command_parser_initialization_behavior",
              "test_enhanced_command_parser_memory_behavior",
              "test_enhanced_command_parser_pattern_compilation_behavior",
              "test_enhanced_command_parser_performance_behavior",
              "test_enhanced_command_parser_task_completion_patterns_behavior",
              "test_enhanced_command_parser_task_creation_patterns_behavior",
              "test_enhanced_command_parser_task_listing_patterns_behavior",
              "test_enhanced_command_parser_thread_safety_behavior",
              "test_enhanced_command_parser_unknown_patterns_behavior",
              "test_enhanced_command_parser_with_real_ai_chatbot_behavior",
              "test_enhanced_command_parser_with_real_handlers_behavior"
            ],
            "tests/behavior/test_error_handling_coverage_expansion_phase3_final.py": [
              "inner_function",
              "outer_function",
              "test_configuration_error_initialization",
              "test_data_error_initialization",
              "test_error_handler_global_instance",
              "test_error_handler_global_instance_functionality",
              "test_error_handler_initialization",
              "test_error_handler_retry_limits",
              "test_error_handler_with_attribute_error",
              "test_error_handler_with_bytes_warning",
              "test_error_handler_with_complex_context",
              "test_error_handler_with_configuration_error",
              "test_error_handler_with_connection_error",
              "test_error_handler_with_context",
              "test_error_handler_with_custom_operation",
              "test_error_handler_with_data_error",
              "test_error_handler_with_default_operation",
              "test_error_handler_with_deprecation_warning",
              "test_error_handler_with_empty_context",
              "test_error_handler_with_file_operation_error",
              "test_error_handler_with_future_warning",
              "test_error_handler_with_generic_exception",
              "test_error_handler_with_import_error",
              "test_error_handler_with_import_warning",
              "test_error_handler_with_index_error",
              "test_error_handler_with_io_error",
              "test_error_handler_with_key_error",
              "test_error_handler_with_long_operation_name",
              "test_error_handler_with_mhm_error",
              "test_error_handler_with_module_not_found_error",
              "test_error_handler_with_multiple_strategies",
              "test_error_handler_with_no_context",
              "test_error_handler_with_none_context_and_error",
              "test_error_handler_with_none_error",
              "test_error_handler_with_os_error",
              "test_error_handler_with_pending_deprecation_warning",
              "test_error_handler_with_permission_error",
              "test_error_handler_with_recovery_strategy",
              "test_error_handler_with_resource_warning",
              "test_error_handler_with_runtime_error",
              "test_error_handler_with_runtime_warning",
              "test_error_handler_with_special_characters_in_context",
              "test_error_handler_with_syntax_warning",
              "test_error_handler_with_timeout_error",
              "test_error_handler_with_type_error",
              "test_error_handler_with_unicode_decode_error",
              "test_error_handler_with_unicode_encode_error",
              "test_error_handler_with_unicode_error",
              "test_error_handler_with_unicode_translate_error",
              "test_error_handler_with_unicode_warning",
              "test_error_handler_with_unrecoverable_error",
              "test_error_handler_with_user_friendly_false",
              "test_error_handler_with_user_friendly_true",
              "test_error_handler_with_user_warning",
              "test_error_handler_with_warning",
              "test_error_recovery_strategy_base_class",
              "test_file_not_found_recovery_strategy",
              "test_file_not_found_recovery_strategy_with_empty_file_path",
              "test_file_not_found_recovery_strategy_with_invalid_file_path",
              "test_file_not_found_recovery_strategy_without_file_path",
              "test_file_operation_error_initialization",
              "test_function",
              "test_handle_errors_decorator_custom_return",
              "test_handle_errors_decorator_double_failure",
              "test_handle_errors_decorator_exception",
              "test_handle_errors_decorator_nested_exceptions",
              "test_handle_errors_decorator_operation_name",
              "test_handle_errors_decorator_recovery_failure",
              "test_handle_errors_decorator_recovery_success",
              "test_handle_errors_decorator_specific_exception",
              "test_handle_errors_decorator_success",
              "test_handle_errors_decorator_user_friendly_false",
              "test_handle_errors_decorator_with_all_parameters",
              "test_handle_errors_decorator_with_args_kwargs",
              "test_handle_errors_decorator_with_complex_context",
              "test_handle_errors_decorator_with_context",
              "test_handle_errors_decorator_with_exception_in_args",
              "test_handle_errors_decorator_with_operation_and_context",
              "test_json_decode_recovery_strategy",
              "test_json_decode_recovery_strategy_recover",
              "test_mhm_error_initialization"
            ],
            "tests/behavior/test_interaction_handlers_behavior.py": [
              "_create_test_user",
              "test_all_handlers_return_proper_examples",
              "test_all_handlers_return_proper_help",
              "test_analytics_handler_can_handle_intents",
              "test_checkin_handler_can_handle_intents",
              "test_checkin_handler_starts_checkin_flow",
              "test_get_interaction_handler_returns_correct_handler",
              "test_handler_error_handling",
              "test_handler_registry_creates_all_handlers",
              "test_handler_response_structure",
              "test_help_handler_can_handle_intents",
              "test_help_handler_provides_help",
              "test_profile_handler_can_handle_intents",
              "test_profile_handler_shows_actual_profile",
              "test_schedule_management_handler_can_handle_intents",
              "test_task_management_handler_can_handle_intents",
              "test_task_management_handler_completes_actual_task",
              "test_task_management_handler_creates_actual_task",
              "test_task_management_handler_lists_actual_tasks"
            ],
            "tests/behavior/test_interaction_handlers_coverage_expansion.py": [
              "_mock_get_user_data",
              "get_checkin_history",
              "get_mood_trends",
              "mock_communication_manager",
              "test_checkin_history_displays_scale_out_of_5",
              "test_checkin_status_displays_scale_out_of_5",
              "test_data_dir",
              "test_get_examples",
              "test_get_help",
              "test_handle_checkin_response_with_invalid_response",
              "test_handle_checkin_status",
              "test_handle_commands",
              "test_handle_complete_task_no_identifier",
              "test_handle_complete_task_not_found",
              "test_handle_complete_task_suggestion_logic",
              "test_handle_complete_task_with_identifier",
              "test_handle_complete_task_with_no_tasks",
              "test_handle_continue_checkin",
              "test_handle_create_task_invalid_priority",
              "test_handle_create_task_with_all_properties",
              "test_handle_create_task_with_invalid_priority",
              "test_handle_create_task_with_invalid_recurrence_pattern",
              "test_handle_create_task_with_recurrence_settings",
              "test_handle_create_task_with_title_only",
              "test_handle_delete_task_no_identifier",
              "test_handle_delete_task_with_identifier",
              "test_handle_delete_task_with_invalid_task_id",
              "test_handle_edit_task_with_invalid_task_id",
              "test_handle_examples",
              "test_handle_help",
              "test_handle_help_with_invalid_handler",
              "test_handle_help_with_specific_handler",
              "test_handle_list_tasks_due_soon_filter",
              "test_handle_list_tasks_no_tasks",
              "test_handle_list_tasks_overdue_filter",
              "test_handle_list_tasks_with_filters",
              "test_handle_list_tasks_with_priority_filter",
              "test_handle_list_tasks_with_tag_filter",
              "test_handle_list_tasks_with_tasks",
              "test_handle_mood_trends",
              "test_handle_profile_stats",
              "test_handle_show_analytics",
              "test_handle_show_analytics_with_no_data",
              "test_handle_show_analytics_with_specific_metric",
              "test_handle_show_profile",
              "test_handle_show_profile_with_missing_data",
              "test_handle_show_schedule",
              "test_handle_show_schedule_with_no_schedules",
              "test_handle_start_checkin_new_user",
              "test_handle_start_checkin_with_disabled_checkins",
              "test_handle_start_checkin_with_no_questions",
              "test_handle_task_stats_no_data",
              "test_handle_task_stats_with_analytics",
              "test_handle_unknown_intent",
              "test_handle_update_profile",
              "test_handle_update_profile_with_invalid_data",
              "test_handle_update_schedule",
              "test_handle_update_schedule_with_invalid_period",
              "test_handle_update_task_no_updates",
              "test_handle_update_task_with_updates",
              "test_handler_with_missing_user_data",
              "test_mood_trends_displays_scale_out_of_5",
              "test_parse_relative_date_existing_date",
              "test_parse_relative_date_next_month",
              "test_parse_relative_date_next_week",
              "test_parse_relative_date_today",
              "test_parse_relative_date_tomorrow",
              "test_profile_get_help_is_text",
              "test_quantitative_summary_respects_enabled_fields",
              "test_show_profile_not_raw_json",
              "test_task_management_handler_error_handling"
            ],
            "tests/behavior/test_logger_behavior.py": [
              "temp_log_dir",
              "test_backup_directory_rotating_handler_creation_real_behavior",
              "test_cleanup_old_logs_real_behavior",
              "test_disable_module_logging_real_behavior",
              "test_force_restart_logging_real_behavior",
              "test_get_log_file_info_real_behavior",
              "test_get_log_level_from_env_real_behavior",
              "test_get_logger_creation_real_behavior",
              "test_get_logger_same_name_real_behavior",
              "test_logger_environment_integration_real_behavior",
              "test_logger_full_workflow_real_behavior",
              "test_set_console_log_level_real_behavior",
              "test_set_verbose_mode_real_behavior",
              "test_setup_logging_idempotent_real_behavior",
              "test_suppress_noisy_logging_real_behavior",
              "test_verbose_mode_toggle_real_behavior"
            ],
            "tests/behavior/test_logger_coverage_expansion.py": [
              "_setup",
              "create_record",
              "log_messages",
              "teardown_method",
              "test_backup_directory_rotating_file_handler_initialization_real_behavior",
              "test_backup_directory_rotating_file_handler_rollover_disabled_real_behavior",
              "test_backup_directory_rotating_file_handler_rollover_real_behavior",
              "test_cleanup_old_archives_real_behavior",
              "test_cleanup_old_logs_real_behavior",
              "test_component_logger_custom_level_real_behavior",
              "test_component_logger_initialization_real_behavior",
              "test_component_logger_logging_methods_real_behavior",
              "test_component_logger_structured_data_real_behavior",
              "test_compress_old_logs_no_files_real_behavior",
              "test_compress_old_logs_real_behavior",
              "test_get_component_logger_real_behavior",
              "test_get_log_file_info_real_behavior",
              "test_get_logger_real_behavior",
              "test_get_verbose_mode_real_behavior",
              "test_heartbeat_warning_filter_real_behavior",
              "test_heartbeat_warning_filter_summary_logging_real_behavior",
              "test_logger_backup_directory_creation_real_behavior",
              "test_logger_concurrent_access_safety",
              "test_logger_concurrent_file_access",
              "test_logger_encoding_handling_real_behavior",
              "test_logger_error_handling_real_behavior",
              "test_logger_error_recovery_with_real_operations",
              "test_logger_file_rotation_edge_cases",
              "test_logger_formatter_real_behavior",
              "test_logger_integration_with_multiple_components",
              "test_logger_level_filtering_real_behavior",
              "test_logger_memory_behavior",
              "test_logger_performance_under_load",
              "test_logger_thread_safety_behavior",
              "test_set_verbose_mode_real_behavior",
              "test_setup_logging_real_behavior",
              "test_suppress_noisy_logging_real_behavior",
              "test_toggle_verbose_logging_real_behavior",
              "write_logs"
            ],
            "tests/behavior/test_logger_coverage_expansion_phase3_simple.py": [
              "test_backup_directory_rotating_file_handler_initialization_simple",
              "test_backup_directory_rotating_file_handler_rollover_simple",
              "test_cleanup_old_archives_simple",
              "test_cleanup_old_logs_simple",
              "test_component_logger_channels_alias_simple",
              "test_component_logger_error_handling_during_creation_simple",
              "test_component_logger_unknown_component_fallback_simple",
              "test_compress_old_logs_simple",
              "test_environment_detection_functions_simple",
              "test_get_log_file_info_function",
              "test_get_log_file_info_with_nonexistent_files",
              "test_heartbeat_warning_filter_simple",
              "test_logger_integration_with_multiple_components_simple",
              "test_logger_performance_under_high_load_simple",
              "test_setup_logging_environment_detection_simple",
              "test_suppress_noisy_logging_simple",
              "test_verbose_mode_functions_simple"
            ],
            "tests/behavior/test_message_behavior.py": [
              "test_add_message_file_error",
              "test_add_message_success",
              "test_create_message_file_from_defaults_success",
              "test_delete_message_file_error",
              "test_delete_message_not_found",
              "test_delete_message_success",
              "test_edit_message_file_error",
              "test_edit_message_not_found",
              "test_edit_message_success",
              "test_ensure_user_message_files_success",
              "test_full_message_lifecycle",
              "test_get_message_categories_custom",
              "test_get_message_categories_default",
              "test_get_message_categories_empty",
              "test_get_message_categories_success",
              "test_get_recent_messages_empty",
              "test_get_recent_messages_success",
              "test_load_default_messages_file_not_found",
              "test_load_default_messages_invalid_json",
              "test_load_default_messages_success",
              "test_store_sent_message_file_error",
              "test_store_sent_message_success",
              "test_update_message_success"
            ],
            "tests/behavior/test_observability_logging.py": [
              "test_component_logs_isolation_and_errors_capture"
            ],
            "tests/behavior/test_response_tracking_behavior.py": [
              "test_get_recent_chat_interactions_returns_chat_data",
              "test_get_recent_checkins_returns_checkin_data",
              "test_get_recent_responses_returns_actual_data",
              "test_get_user_checkin_preferences_returns_actual_preferences",
              "test_get_user_checkin_questions_returns_actual_questions",
              "test_get_user_info_for_tracking_returns_complete_user_info",
              "test_is_user_checkins_enabled_checks_actual_account_data",
              "test_response_tracking_concurrent_access_safety",
              "test_response_tracking_data_integrity",
              "test_response_tracking_error_handling_preserves_system_stability",
              "test_response_tracking_error_recovery_with_real_files",
              "test_response_tracking_integration_with_user_data",
              "test_response_tracking_performance_under_load",
              "test_store_chat_interaction_creates_chat_log",
              "test_store_user_response_creates_actual_file",
              "test_store_user_response_persists_multiple_entries",
              "test_track_user_response_stores_chat_interaction",
              "test_track_user_response_stores_checkin",
              "test_track_user_response_stores_generic_response"
            ],
            "tests/behavior/test_schedule_management_behavior.py": [
              "test_clear_schedule_periods_cache_removes_entries",
              "test_get_current_day_names_returns_actual_days",
              "test_get_schedule_time_periods_creates_cache",
              "test_schedule_cache_invalidation",
              "test_schedule_period_activation_integration",
              "test_schedule_period_crud_with_usercontext_mocking",
              "test_schedule_period_edge_cases",
              "test_schedule_period_operations_with_error_handling",
              "test_schedule_period_operations_with_real_user_data",
              "test_schedule_period_operations_with_scheduler_manager",
              "test_schedule_period_validation_errors",
              "test_set_schedule_days_persists_day_changes",
              "test_set_schedule_period_active_persists_changes",
              "test_set_schedule_periods_persists_complete_data",
              "test_time_conversion_functions_work_correctly",
              "test_validate_and_format_time_enforces_rules"
            ],
            "tests/behavior/test_scheduler_behavior.py": [
              "mock_communication_manager",
              "scheduler_manager",
              "test_cleanup_old_tasks",
              "test_get_random_time_within_period_invalid_times",
              "test_get_random_time_within_period_valid_times",
              "test_get_user_categories_no_user",
              "test_get_user_categories_success",
              "test_get_user_checkin_preferences_no_user",
              "test_get_user_checkin_preferences_success",
              "test_get_user_task_preferences_no_user",
              "test_get_user_task_preferences_success",
              "test_is_job_for_category_no_jobs",
              "test_is_job_for_category_with_matching_job",
              "test_is_job_for_category_with_non_matching_job",
              "test_is_time_conflict_no_conflicts",
              "test_log_scheduled_tasks",
              "test_random_time_generation_consistency",
              "test_schedule_all_task_reminders_disabled",
              "test_schedule_all_task_reminders_success",
              "test_scheduler_lifecycle",
              "test_scheduler_manager_initialization",
              "test_scheduler_with_empty_user_list",
              "test_scheduler_with_invalid_user_data",
              "test_scheduler_with_mock_users",
              "test_stop_scheduler_no_thread"
            ],
            "tests/behavior/test_scheduler_coverage_expansion.py": [
              "mock_communication_manager",
              "scheduler_manager",
              "test_cleanup_old_tasks_real_behavior",
              "test_get_random_time_within_period_future_scheduling",
              "test_get_random_time_within_period_invalid_period",
              "test_get_random_time_within_period_missing_times",
              "test_get_random_time_within_task_period_real_behavior",
              "test_get_user_checkin_preferences_real_behavior",
              "test_handle_sending_scheduled_message_no_communication_manager",
              "test_handle_sending_scheduled_message_success",
              "test_handle_sending_scheduled_message_with_retries",
              "test_handle_task_reminder_completed_task",
              "test_handle_task_reminder_no_communication_manager",
              "test_handle_task_reminder_success",
              "test_is_time_conflict_no_conflict_different_user",
              "test_is_time_conflict_with_conflict_real_behavior",
              "test_process_category_schedule_real_behavior",
              "test_process_user_schedules_real_behavior",
              "test_run_daily_scheduler_thread_creation_real_behavior",
              "test_schedule_all_task_reminders_missing_times_real_behavior",
              "test_schedule_all_task_reminders_no_tasks_real_behavior",
              "test_schedule_all_task_reminders_real_behavior",
              "test_schedule_all_task_reminders_standalone_real_behavior",
              "test_schedule_all_task_reminders_tasks_disabled",
              "test_schedule_all_task_reminders_with_tasks_real_behavior",
              "test_schedule_all_users_immediately_real_behavior",
              "test_schedule_checkin_at_exact_time_real_behavior",
              "test_schedule_checkin_missing_period_real_behavior",
              "test_schedule_checkin_missing_start_time_real_behavior",
              "test_schedule_daily_message_job_no_periods",
              "test_schedule_daily_message_job_real_behavior",
              "test_schedule_message_for_period_max_retries_exceeded",
              "test_schedule_message_for_period_real_behavior",
              "test_schedule_message_for_period_time_conflict_retry",
              "test_schedule_new_user_real_behavior",
              "test_schedule_task_reminder_at_time_completed_task",
              "test_schedule_task_reminder_at_time_real_behavior",
              "test_scheduler_loop_daily_job_scheduling_real_behavior",
              "test_scheduler_loop_error_handling_real_behavior",
              "test_scheduler_loop_stop_event_handling_real_behavior",
              "test_scheduler_manager_initialization_real_behavior",
              "test_scheduler_manager_no_communication_manager",
              "test_select_task_for_reminder_due_today_weighting_real_behavior",
              "test_select_task_for_reminder_empty_list_real_behavior",
              "test_select_task_for_reminder_exception_handling_real_behavior",
              "test_select_task_for_reminder_invalid_date_format_real_behavior",
              "test_select_task_for_reminder_large_task_list_real_behavior",
              "test_select_task_for_reminder_month_proximity_weighting_real_behavior",
              "test_select_task_for_reminder_no_due_date_weighting_real_behavior",
              "test_select_task_for_reminder_overdue_weighting_real_behavior",
              "test_select_task_for_reminder_priority_weighting_real_behavior",
              "test_select_task_for_reminder_single_task_real_behavior",
              "test_select_task_for_reminder_week_proximity_weighting_real_behavior",
              "test_select_task_for_reminder_zero_weights_fallback_real_behavior",
              "test_set_wake_timer_failure_handling",
              "test_set_wake_timer_process_failure_real_behavior",
              "test_set_wake_timer_real_behavior",
              "test_set_wake_timer_success_real_behavior",
              "test_stop_scheduler_no_thread_graceful_handling",
              "test_stop_scheduler_thread_cleanup_real_behavior"
            ],
            "tests/behavior/test_service_behavior.py": [
              "mock_get_user_data_side_effect",
              "mock_join_side_effect",
              "mock_shutdown_side_effect",
              "mock_sleep_side_effect",
              "mock_start_side_effect",
              "service",
              "temp_base_dir",
              "temp_dir",
              "test_check_and_fix_logging_real_behavior",
              "test_check_reschedule_requests_real_behavior",
              "test_check_test_message_requests_real_behavior",
              "test_cleanup_reschedule_requests_real_behavior",
              "test_cleanup_test_message_requests_real_behavior",
              "test_emergency_shutdown_real_behavior",
              "test_get_user_categories_real_behavior",
              "test_initialize_paths_real_behavior",
              "test_main_function_real_behavior",
              "test_real_cleanup_removes_actual_files",
              "test_real_emergency_shutdown_changes_service_state",
              "test_real_file_based_communication_creates_and_removes_files",
              "test_real_get_user_categories_returns_actual_data",
              "test_real_service_error_recovery_stops_service",
              "test_real_service_initialization_creates_actual_service",
              "test_real_signal_handler_changes_service_state",
              "test_run_service_loop_shutdown_file_detection_real_behavior",
              "test_service_error_recovery_real_behavior",
              "test_service_file_based_communication_integration_real_behavior",
              "test_service_initialization",
              "test_service_integration_with_managers_real_behavior",
              "test_service_loop_heartbeat_logging_real_behavior",
              "test_shutdown_real_behavior",
              "test_signal_handler_real_behavior",
              "test_start_service_real_behavior",
              "test_validate_configuration_real_behavior"
            ],
            "tests/behavior/test_service_utilities_behavior.py": [
              "test_create_reschedule_request_creates_actual_file",
              "test_create_reschedule_request_skips_when_service_not_running",
              "test_is_service_running_checks_actual_processes",
              "test_is_service_running_handles_process_errors_gracefully",
              "test_load_and_localize_datetime_creates_timezone_aware_datetime",
              "test_load_and_localize_datetime_raises_error_for_invalid_format",
              "test_load_and_localize_datetime_raises_error_for_invalid_timezone",
              "test_service_utilities_concurrent_access_safety",
              "test_service_utilities_data_integrity",
              "test_service_utilities_error_handling_preserves_system_stability",
              "test_service_utilities_error_recovery_with_real_operations",
              "test_service_utilities_integration_with_reschedule_workflow",
              "test_service_utilities_performance_under_load",
              "test_throttler_handles_invalid_timestamp_format",
              "test_throttler_initialization_creates_proper_structure",
              "test_throttler_should_run_respects_interval",
              "test_throttler_should_run_returns_true_on_first_call",
              "test_title_case_converts_text_properly",
              "test_title_case_handles_special_words_correctly",
              "test_title_case_preserves_mixed_case_words",
              "test_wait_for_network_returns_false_when_network_unavailable",
              "test_wait_for_network_returns_true_when_network_available"
            ],
            "tests/behavior/test_static_logging_check.py": [
              "test_repo_static_logging_check_passes"
            ],
            "tests/behavior/test_task_behavior.py": [
              "temp_dir",
              "test_are_tasks_enabled",
              "test_complete_task",
              "test_create_task",
              "test_delete_task",
              "test_ensure_task_directory",
              "test_get_task_by_id",
              "test_get_tasks_due_soon",
              "test_get_user_task_stats",
              "test_load_active_tasks",
              "test_save_active_tasks",
              "test_update_task",
              "user_id"
            ],
            "tests/behavior/test_task_management_coverage_expansion.py": [
              "mock_user_data_dir",
              "temp_dir",
              "test_add_user_task_tag_empty_tag_real_behavior",
              "test_add_user_task_tag_empty_user_id_real_behavior",
              "test_add_user_task_tag_existing_tag_real_behavior",
              "test_add_user_task_tag_new_tag_real_behavior",
              "test_are_tasks_enabled_empty_user_id_real_behavior",
              "test_are_tasks_enabled_real_behavior",
              "test_complete_task_not_found_real_behavior",
              "test_complete_task_with_completion_data_real_behavior",
              "test_complete_task_with_default_completion_real_behavior",
              "test_create_task_with_all_parameters_real_behavior",
              "test_create_task_with_empty_title_real_behavior",
              "test_create_task_with_empty_user_id_real_behavior",
              "test_create_task_with_minimal_parameters_real_behavior",
              "test_delete_task_not_found_real_behavior",
              "test_delete_task_real_behavior",
              "test_ensure_task_directory_existing_structure_real_behavior",
              "test_ensure_task_directory_real_behavior",
              "test_ensure_task_directory_with_empty_user_id_real_behavior",
              "test_ensure_task_directory_with_none_user_id_real_behavior",
              "test_get_task_by_id_active_task_real_behavior",
              "test_get_task_by_id_completed_task_real_behavior",
              "test_get_task_by_id_not_found_real_behavior",
              "test_get_tasks_due_soon_empty_user_id_real_behavior",
              "test_get_tasks_due_soon_real_behavior",
              "test_get_tasks_due_soon_with_invalid_date_real_behavior",
              "test_get_user_task_stats_empty_user_id_real_behavior",
              "test_get_user_task_stats_error_handling_real_behavior",
              "test_get_user_task_stats_real_behavior",
              "test_get_user_task_tags_empty_user_id_real_behavior",
              "test_get_user_task_tags_real_behavior",
              "test_load_active_tasks_empty_file_real_behavior",
              "test_load_active_tasks_missing_file_real_behavior",
              "test_load_active_tasks_real_behavior",
              "test_load_completed_tasks_real_behavior",
              "test_remove_user_task_tag_not_found_real_behavior",
              "test_remove_user_task_tag_real_behavior",
              "test_restore_task_not_found_real_behavior",
              "test_restore_task_real_behavior",
              "test_restore_task_with_reminders_real_behavior",
              "test_save_active_tasks_real_behavior",
              "test_save_active_tasks_with_empty_user_id_real_behavior",
              "test_save_completed_tasks_real_behavior",
              "test_schedule_task_reminders_empty_periods_real_behavior",
              "test_schedule_task_reminders_no_scheduler_real_behavior",
              "test_schedule_task_reminders_real_behavior",
              "test_setup_default_task_tags_empty_user_id_real_behavior",
              "test_setup_default_task_tags_existing_user_real_behavior",
              "test_setup_default_task_tags_new_user_real_behavior",
              "test_update_task_not_found_real_behavior",
              "test_update_task_real_behavior",
              "test_update_task_with_reminder_periods_real_behavior",
              "user_id"
            ],
            "tests/behavior/test_ui_app_behavior.py": [
              "qt_app",
              "test_confirm_test_message_user_cancels_real_behavior",
              "test_confirm_test_message_user_confirms_real_behavior",
              "test_send_actual_test_message_creates_request_file_real_behavior",
              "test_send_test_message_edge_case_negative_index_real_behavior",
              "test_send_test_message_invalid_category_real_behavior",
              "test_send_test_message_no_category_selected_real_behavior",
              "test_send_test_message_no_user_selected_real_behavior",
              "test_send_test_message_service_manager_error_real_behavior",
              "test_send_test_message_service_not_running_real_behavior",
              "test_send_test_message_successful_flow_real_behavior",
              "test_service_manager_configuration_validation_checks_actual_config",
              "test_service_manager_configuration_validation_handles_invalid_config",
              "test_service_manager_initialization_creates_proper_structure",
              "test_service_manager_service_status_check_checks_actual_processes",
              "test_service_manager_service_status_check_handles_no_service",
              "test_ui_app_category_management_opens_category_dialog",
              "test_ui_app_category_selection_enables_content_management",
              "test_ui_app_checkin_management_opens_checkin_dialog",
              "test_ui_app_communication_settings_opens_channel_management",
              "test_ui_app_concurrent_access_safety",
              "test_ui_app_data_integrity",
              "test_ui_app_error_handling_preserves_system_stability",
              "test_ui_app_error_recovery_with_real_operations",
              "test_ui_app_initialization_creates_proper_structure",
              "test_ui_app_integration_with_service_manager",
              "test_ui_app_new_user_creation_opens_account_creator",
              "test_ui_app_performance_under_load",
              "test_ui_app_personalization_opens_user_profile_dialog",
              "test_ui_app_task_management_opens_task_dialog",
              "test_ui_app_user_list_refresh_loads_actual_user_data",
              "test_ui_app_user_selection_loads_user_categories"
            ],
            "tests/behavior/test_user_context_behavior.py": [
              "test_add_conversation_exchange_actually_stores_data",
              "test_add_conversation_exchange_maintains_history_limit",
              "test_format_context_for_ai_creates_readable_string",
              "test_format_context_for_ai_handles_empty_context",
              "test_get_active_schedules_identifies_active_periods",
              "test_get_conversation_history_handles_empty_history",
              "test_get_conversation_history_returns_actual_data",
              "test_get_conversation_insights_analyzes_actual_data",
              "test_get_current_user_context_handles_no_user_gracefully",
              "test_get_current_user_context_uses_usercontext_singleton",
              "test_get_mood_trends_analyzes_checkin_data",
              "test_get_recent_activity_integrates_multiple_sources",
              "test_get_user_context_creates_complete_structure",
              "test_get_user_context_without_conversation_history",
              "test_get_user_profile_uses_existing_infrastructure",
              "test_user_context_manager_cleanup_and_resource_management",
              "test_user_context_manager_concurrent_access_safety",
              "test_user_context_manager_error_handling_preserves_system_stability",
              "test_user_context_manager_error_recovery_with_real_files",
              "test_user_context_manager_initialization_creates_structure",
              "test_user_context_manager_integration_with_ai_chatbot",
              "test_user_context_manager_performance_under_load",
              "test_user_context_manager_with_real_user_data"
            ],
            "tests/behavior/test_user_management_coverage_expansion.py": [
              "_setup",
              "mock_path",
              "teardown_method",
              "test_cache_management_real_behavior",
              "test_cache_timeout_real_behavior",
              "test_create_default_schedule_periods_checkin_real_behavior",
              "test_create_default_schedule_periods_no_category_real_behavior",
              "test_create_default_schedule_periods_other_category_real_behavior",
              "test_create_default_schedule_periods_tasks_real_behavior",
              "test_data_validation_real_behavior",
              "test_error_handling_load_account_real_behavior",
              "test_error_handling_save_account_real_behavior",
              "test_file_persistence_real_behavior",
              "test_get_all_user_ids_no_directory_real_behavior",
              "test_get_all_user_ids_real_behavior",
              "test_get_available_data_types_real_behavior",
              "test_get_data_type_info_real_behavior",
              "test_load_account_data_auto_create_real_behavior",
              "test_load_account_data_no_auto_create_real_behavior",
              "test_load_account_data_real_behavior",
              "test_load_context_data_auto_create_real_behavior",
              "test_load_context_data_real_behavior",
              "test_load_preferences_data_auto_create_real_behavior",
              "test_load_preferences_data_real_behavior",
              "test_load_schedules_data_auto_create_real_behavior",
              "test_load_schedules_data_real_behavior",
              "test_loader",
              "test_register_data_loader_real_behavior",
              "test_save_account_data_invalid_user_id_real_behavior",
              "test_save_account_data_real_behavior",
              "test_save_context_data_real_behavior",
              "test_save_preferences_data_real_behavior",
              "test_save_schedules_data_invalid_user_id_real_behavior",
              "test_save_schedules_data_real_behavior",
              "test_update_user_schedules_invalid_user_id_real_behavior",
              "test_update_user_schedules_real_behavior",
              "test_user_data_concurrent_access_real_behavior",
              "test_user_data_consistency_real_behavior",
              "test_user_data_error_recovery_real_behavior",
              "test_user_data_lifecycle_real_behavior",
              "test_user_data_performance_real_behavior",
              "user_operation"
            ],
            "tests/behavior/test_utilities_demo.py": [
              "test_basic_user_creation",
              "test_comprehensive_user_types",
              "test_consistent_user_data",
              "test_custom_fields_user_creation",
              "test_discord_user_creation",
              "test_easy_maintenance",
              "test_edge_case_users",
              "test_email_user_creation",
              "test_environment_management",
              "test_flexible_configuration",
              "test_full_featured_user_creation",
              "test_minimal_user_creation",
              "test_multiple_user_types_in_single_test",
              "test_real_user_scenarios",
              "test_reduced_code_duplication",
              "test_scheduled_user_creation",
              "test_user_data_consistency",
              "test_user_data_factory_usage"
            ],
            "tests/conftest.py": [
              "__init__",
              "_apply_get_user_data_shim_early",
              "_fallback_read_from_files",
              "_helper",
              "_load_single_type",
              "_missing_keys",
              "_prune_old_files",
              "_update_index",
              "about",
              "archive_old_backups",
              "check_rotation_needed",
              "cleanup_communication_manager",
              "cleanup_conversation_manager",
              "cleanup_old_archives",
              "cleanup_test_users_after_session",
              "cleanup_tmp_at_session_end",
              "clear_user_caches_between_tests",
              "critical",
              "enforce_user_dir_locations",
              "ensure_mock_config_applied",
              "ensure_user_materialized",
              "env_guard_and_restore",
              "fix_user_data_loaders",
              "force_test_data_directory",
              "format",
              "information",
              "initialize_loader_import_order",
              "isolate_logging",
              "log_lifecycle_maintenance",
              "materialize_user_minimal_via_public_apis",
              "mock_ai_response",
              "mock_communication_data",
              "mock_config",
              "mock_logger",
              "mock_message_data",
              "mock_schedule_data",
              "mock_service_data",
              "mock_task_data",
              "mock_user_data",
              "mock_user_data_with_messages",
              "path_sanitizer",
              "perform_lifecycle_maintenance",
              "prune_test_artifacts_before_and_after_session",
              "pytest_collection_modifyitems",
              "pytest_configure",
              "pytest_runtest_logreport",
              "pytest_sessionfinish",
              "pytest_sessionstart",
              "question",
              "register_log_file",
              "register_user_data_loaders_session",
              "rotate_all_logs",
              "session_log_rotation_check",
              "setup_component_log_rotation",
              "setup_logging_isolation",
              "setup_qmessagebox_patches",
              "setup_test_logging",
              "shim_get_user_data_to_invoke_loaders",
              "temp_file",
              "test_data_dir",
              "test_path_factory",
              "toggle_data_shim_per_marker",
              "update_user_index_for_test",
              "verify_required_loaders_present",
              "verify_user_data_loader_registry",
              "wait_until",
              "warning",
              "wrapped_get_user_data"
            ],
            "tests/debug_file_paths.py": [
              "test_debug_file_paths"
            ],
            "tests/integration/test_account_lifecycle.py": [
              "_ensure_minimal_structure",
              "_materialize_and_verify",
              "save_user_data_simple",
              "setup_test_environment",
              "test_add_message_category",
              "test_add_schedule_period",
              "test_complete_account_lifecycle",
              "test_create_basic_account",
              "test_create_full_account",
              "test_disable_tasks_for_full_user",
              "test_enable_checkins_for_basic_user",
              "test_modify_schedule_period",
              "test_reenable_tasks_for_user",
              "test_remove_message_category",
              "test_remove_schedule_period"
            ],
            "tests/integration/test_account_management.py": [
              "test_account_management_data_structures",
              "test_account_management_functions",
              "test_account_management_imports",
              "test_account_management_integration",
              "test_account_management_safe_operations",
              "test_account_management_validation"
            ],
            "tests/integration/test_user_creation.py": [
              "test_basic_email_user_creation",
              "test_corrupted_data_handling",
              "test_discord_user_creation",
              "test_duplicate_user_creation",
              "test_email_validation",
              "test_full_user_lifecycle",
              "test_invalid_user_id",
              "test_multiple_users_same_channel",
              "test_required_fields_validation",
              "test_timezone_validation",
              "test_user_creation_with_schedules",
              "test_user_with_all_features",
              "test_user_with_custom_fields",
              "test_username_validation"
            ],
            "tests/test_isolation.py": [
              "__enter__",
              "__exit__",
              "__init__",
              "create_safe_scheduler_manager",
              "ensure_test_isolation",
              "mock_schtasks_call",
              "mock_system_calls",
              "verify_no_real_tasks_created"
            ],
            "tests/test_utilities.py": [
              "_create_user_files_directly",
              "_create_user_files_directly__account_data",
              "_create_user_files_directly__context_data",
              "_create_user_files_directly__directory_structure",
              "_create_user_files_directly__message_files",
              "_create_user_files_directly__preferences_data",
              "_create_user_files_directly__save_json",
              "_create_user_files_directly__schedules_data",
              "cleanup_test_data_environment",
              "cleanup_test_environment",
              "create_account_data",
              "create_basic_user",
              "create_basic_user__update_index",
              "create_basic_user__verify_creation",
              "create_basic_user__with_test_dir",
              "create_context_data",
              "create_corrupted_user_data",
              "create_discord_user",
              "create_discord_user__with_test_dir",
              "create_email_user",
              "create_email_user__impl",
              "create_email_user__with_test_dir",
              "create_full_featured_user",
              "create_full_featured_user__impl",
              "create_full_featured_user__with_test_dir",
              "create_minimal_user",
              "create_minimal_user__impl",
              "create_minimal_user__with_test_dir",
              "create_minimal_user__with_test_dir_and_get_id",
              "create_minimal_user_and_get_id",
              "create_preferences_data",
              "create_schedules_data",
              "create_test_message_data",
              "create_test_schedule_data",
              "create_test_task_data",
              "create_test_user",
              "create_user_with_complex_checkins",
              "create_user_with_complex_checkins__impl",
              "create_user_with_complex_checkins__with_test_dir",
              "create_user_with_custom_fields",
              "create_user_with_custom_fields__impl",
              "create_user_with_disabilities",
              "create_user_with_disabilities__impl",
              "create_user_with_disabilities__with_test_dir",
              "create_user_with_health_focus",
              "create_user_with_health_focus__impl",
              "create_user_with_health_focus__with_test_dir",
              "create_user_with_inconsistent_data",
              "create_user_with_inconsistent_data__impl",
              "create_user_with_inconsistent_data__with_test_dir",
              "create_user_with_limited_data",
              "create_user_with_limited_data__impl",
              "create_user_with_limited_data__with_test_dir",
              "create_user_with_schedules",
              "create_user_with_schedules__impl",
              "create_user_with_task_focus",
              "create_user_with_task_focus__impl",
              "create_user_with_task_focus__with_test_dir",
              "get_test_user_data",
              "get_test_user_id_by_internal_username",
              "setup_test_data_environment",
              "setup_test_environment",
              "verify_email_user_creation__with_test_dir"
            ],
            "tests/ui/test_account_creation_ui.py": [
              "dialog",
              "mock_accept_impl",
              "qapp",
              "test_account_creation_real_behavior",
              "test_dialog_initialization_real_behavior",
              "test_duplicate_username_handling_real_behavior",
              "test_feature_enablement_persistence_real_behavior",
              "test_feature_enablement_real_behavior",
              "test_feature_validation_real_behavior",
              "test_file_system_error_handling_real_behavior",
              "test_full_account_lifecycle_real_behavior",
              "test_invalid_data_handling_real_behavior",
              "test_messages_validation_real_behavior",
              "test_multiple_users_same_features_real_behavior",
              "test_timezone_validation_real_behavior",
              "test_user_index_integration_real_behavior",
              "test_user_profile_dialog_integration",
              "test_username_validation_real_behavior",
              "test_widget_data_collection_real_behavior",
              "test_widget_error_handling_real_behavior"
            ],
            "tests/ui/test_channel_management_dialog_coverage_expansion.py": [
              "mock_user_data",
              "test_get_selected_channel",
              "test_save_channel_settings_exception_handling",
              "test_save_channel_settings_removes_old_settings",
              "test_save_channel_settings_success_discord",
              "test_save_channel_settings_success_email",
              "test_save_channel_settings_validation_error_discord_required",
              "test_save_channel_settings_validation_error_email_required",
              "test_save_channel_settings_validation_error_invalid_discord_id",
              "test_save_channel_settings_validation_error_invalid_email",
              "test_save_channel_settings_without_user",
              "test_set_selected_channel"
            ],
            "tests/ui/test_dialog_behavior.py": [
              "dialog",
              "qapp",
              "test_category_selection_real_behavior",
              "test_channel_configuration_real_behavior",
              "test_checkin_enablement_real_behavior",
              "test_data_loading_real_behavior",
              "test_data_saving_real_behavior",
              "test_dialog_initialization_real_behavior",
              "test_dynamic_list_fields_real_behavior",
              "test_task_statistics_real_behavior"
            ],
            "tests/ui/test_dialog_coverage_expansion.py": [
              "dialog",
              "qapp",
              "test_add_new_period_real_behavior",
              "test_add_task_real_behavior",
              "test_data_saving_real_behavior",
              "test_delete_period_real_behavior",
              "test_delete_task_real_behavior",
              "test_dialog_initialization_real_behavior",
              "test_dynamic_list_fields_real_behavior",
              "test_edit_task_real_behavior",
              "test_existing_data_loading_real_behavior",
              "test_open_schedule_editor_function_real_behavior",
              "test_profile_data_editing_real_behavior",
              "test_task_completion_real_behavior",
              "test_task_data_editing_real_behavior",
              "test_task_saving_real_behavior",
              "test_undo_delete_real_behavior",
              "test_user_data",
              "test_validation_error_handling_real_behavior"
            ],
            "tests/ui/test_dialogs.py": [
              "mock_save",
              "test_dialog_imports",
              "test_dialog_instantiation",
              "test_generated_files_exist",
              "test_ui_files_exist",
              "test_user_data_access",
              "test_widget_imports"
            ],
            "tests/ui/test_ui_widgets_coverage_expansion.py": [
              "app",
              "cleanup_widgets",
              "mock_message_boxes",
              "mock_user_data_dir",
              "on_delete_requested",
              "on_tags_changed",
              "on_values_changed",
              "temp_dir",
              "test_dynamic_list_container_add_blank_row_real_behavior",
              "test_dynamic_list_container_duplicate_detection_real_behavior",
              "test_dynamic_list_container_error_handling_real_behavior",
              "test_dynamic_list_container_get_values_real_behavior",
              "test_dynamic_list_container_initialization_real_behavior",
              "test_dynamic_list_container_row_deleted_real_behavior",
              "test_dynamic_list_container_row_edited_real_behavior",
              "test_dynamic_list_container_set_values_real_behavior",
              "test_dynamic_list_container_signal_emission_real_behavior",
              "test_period_row_widget_all_period_initialization_real_behavior",
              "test_period_row_widget_day_selection_real_behavior",
              "test_period_row_widget_default_initialization_real_behavior",
              "test_period_row_widget_delete_requested_signal_real_behavior",
              "test_period_row_widget_error_handling_real_behavior",
              "test_period_row_widget_get_period_data_real_behavior",
              "test_period_row_widget_initialization_real_behavior",
              "test_period_row_widget_load_period_data_real_behavior",
              "test_period_row_widget_read_only_mode_real_behavior",
              "test_period_row_widget_validation_real_behavior",
              "test_tag_widget_account_creation_mode_real_behavior",
              "test_tag_widget_add_duplicate_tag_real_behavior",
              "test_tag_widget_add_empty_tag_real_behavior",
              "test_tag_widget_add_tag_account_creation_mode_real_behavior",
              "test_tag_widget_add_tag_management_mode_real_behavior",
              "test_tag_widget_delete_tag_account_creation_mode_real_behavior",
              "test_tag_widget_delete_tag_real_behavior",
              "test_tag_widget_edit_tag_account_creation_mode_real_behavior",
              "test_tag_widget_edit_tag_real_behavior",
              "test_tag_widget_error_handling_real_behavior",
              "test_tag_widget_get_selected_tags_real_behavior",
              "test_tag_widget_management_mode_initialization_real_behavior",
              "test_tag_widget_refresh_tags_real_behavior",
              "test_tag_widget_selection_changed_signal_real_behavior",
              "test_tag_widget_selection_mode_checkbox_behavior_real_behavior",
              "test_tag_widget_selection_mode_initialization_real_behavior",
              "test_tag_widget_set_selected_tags_real_behavior",
              "test_tag_widget_undo_delete_real_behavior",
              "test_widget_integration_real_behavior",
              "test_widget_lifecycle_real_behavior",
              "test_widget_memory_usage_real_behavior",
              "test_widget_performance_real_behavior",
              "user_id"
            ],
            "tests/ui/test_user_profile_dialog_coverage_expansion.py": [
              "dialog",
              "empty_dialog",
              "qapp",
              "test_add_custom_field_real_behavior",
              "test_add_loved_one_widget_real_behavior",
              "test_add_loved_one_widget_without_data_real_behavior",
              "test_cancel_real_behavior",
              "test_center_dialog_real_behavior",
              "test_close_event_declined_real_behavior",
              "test_close_event_real_behavior",
              "test_create_custom_field_list_real_behavior",
              "test_create_health_section_real_behavior",
              "test_create_loved_ones_section_real_behavior",
              "test_custom_field_interaction_real_behavior",
              "test_dialog_cleanup_real_behavior",
              "test_dialog_initialization_with_existing_data_real_behavior",
              "test_dialog_initialization_without_data_real_behavior",
              "test_dialog_modal_behavior_real_behavior",
              "test_dialog_size_constraints_real_behavior",
              "test_dialog_window_flags_real_behavior",
              "test_dialog_with_parent_real_behavior",
              "test_error_handling_real_behavior",
              "test_key_press_event_enter_real_behavior",
              "test_key_press_event_escape_real_behavior",
              "test_loved_one_widget_interaction_real_behavior",
              "test_multi_column_layout_real_behavior",
              "test_profile_widget_integration_real_behavior",
              "test_remove_custom_field_real_behavior",
              "test_remove_loved_one_widget_real_behavior",
              "test_save_personalization_real_behavior",
              "test_save_personalization_validation_error_real_behavior",
              "test_save_personalization_without_callback_real_behavior",
              "test_title_case_conversion_real_behavior",
              "test_user_data"
            ],
            "tests/ui/test_widget_behavior.py": [
              "qapp",
              "test_checkin_enablement_real_behavior",
              "test_item_management_real_behavior",
              "test_tag_management_real_behavior",
              "test_tag_selection_mode_real_behavior",
              "test_task_enablement_real_behavior",
              "test_widget_initialization_real_behavior",
              "widget"
            ],
            "tests/ui/test_widget_behavior_simple.py": [
              "qapp",
              "test_category_selection_widget_import_and_creation",
              "test_channel_selection_widget_import_and_creation",
              "test_checkin_settings_widget_import_and_creation",
              "test_dynamic_list_container_import_and_creation",
              "test_dynamic_list_field_import_and_creation",
              "test_tag_widget_import_and_creation",
              "test_tag_widget_selection_mode",
              "test_task_settings_widget_import_and_creation",
              "test_user_profile_settings_widget_import_and_creation"
            ],
            "tests/unit/test_cleanup.py": [
              "__init__",
              "_cleanup_old_test_logs",
              "_cleanup_single_user",
              "_cleanup_temp_files",
              "_create_user_backup",
              "_find_orphaned_files",
              "_find_test_users",
              "_validate_user_data",
              "cleanup_test_users",
              "main",
              "reset_test_environment",
              "validate_test_data_integrity"
            ],
            "tests/unit/test_config.py": [
              "test_base_data_dir_default",
              "test_default_messages_dir_path_default",
              "test_environment_override",
              "test_user_info_dir_path_default",
              "test_validate_ai_configuration_missing_url",
              "test_validate_ai_configuration_success",
              "test_validate_all_configuration_success",
              "test_validate_and_raise_if_invalid_failure",
              "test_validate_and_raise_if_invalid_success",
              "test_validate_communication_channels_no_tokens",
              "test_validate_communication_channels_success",
              "test_validate_core_paths_missing_directory",
              "test_validate_core_paths_success",
              "test_validate_environment_variables_success",
              "test_validate_file_organization_settings_success",
              "test_validate_logging_configuration_success",
              "test_validate_scheduler_configuration_success"
            ],
            "tests/unit/test_error_handling.py": [
              "backup_function",
              "cleanup_function",
              "corrupt_data_function",
              "inner_function",
              "outer_function",
              "recover_data_function",
              "state_validation_function",
              "test_config_error",
              "test_data_error",
              "test_error_handler_custom_return",
              "test_error_handler_exception",
              "test_error_handler_logs_error",
              "test_error_handler_nested_exceptions",
              "test_error_handler_success",
              "test_error_handler_with_args_kwargs",
              "test_error_handling_different_exception_types",
              "test_error_handling_in_function_chain",
              "test_error_handling_with_recovery",
              "test_file_operation_error",
              "test_function",
              "test_handle_configuration_error",
              "test_handle_errors_custom_return",
              "test_handle_errors_exception",
              "test_handle_errors_logs_error",
              "test_handle_errors_specific_exception",
              "test_handle_errors_success",
              "test_handle_errors_with_args_kwargs",
              "test_handle_errors_with_logging_disabled",
              "test_handle_file_error",
              "test_mhm_error_basic",
              "test_mhm_error_with_details",
              "test_validation_error"
            ],
            "tests/unit/test_file_operations.py": [
              "test_determine_file_path_default_messages",
              "test_determine_file_path_invalid_file_type",
              "test_determine_file_path_invalid_user_id",
              "test_determine_file_path_user_file",
              "test_ensure_user_directory_already_exists",
              "test_ensure_user_directory_success",
              "test_file_operations_lifecycle",
              "test_get_user_file_path_success",
              "test_load_json_data_corrupted_json",
              "test_load_json_data_empty_file",
              "test_load_json_data_file_not_found",
              "test_load_json_data_success",
              "test_load_json_data_unicode_content",
              "test_load_large_json_data",
              "test_save_json_data_complex_objects",
              "test_save_json_data_create_directory",
              "test_save_json_data_permission_error",
              "test_save_json_data_success",
              "test_save_large_json_data",
              "test_verify_file_access_missing_file",
              "test_verify_file_access_permission_error",
              "test_verify_file_access_success"
            ],
            "tests/unit/test_logging_components.py": [
              "test_component_logger_propagate_and_handlers",
              "test_errors_routed_to_tests_logs_in_verbose_mode"
            ],
            "tests/unit/test_no_prints_policy.py": [
              "test_no_print_calls_in_tests_except_debug_marked"
            ],
            "tests/unit/test_recurring_tasks.py": [
              "temp_user_dir",
              "test_calculate_next_due_date_daily",
              "test_calculate_next_due_date_invalid_pattern",
              "test_calculate_next_due_date_monthly",
              "test_calculate_next_due_date_weekly",
              "test_calculate_next_due_date_yearly",
              "test_complete_recurring_task_creates_next_instance",
              "test_create_recurring_task",
              "test_non_recurring_task_completion"
            ],
            "tests/unit/test_schedule_management.py": [
              "test_schedule_period_lifecycle",
              "test_time_conversion_helpers",
              "test_validate_and_format_time"
            ],
            "tests/unit/test_user_data_loader_idempotency.py": [
              "test_loader_registry_identity_and_idempotency"
            ],
            "tests/unit/test_user_data_loader_order_insensitivity.py": [
              "_reload_in_order",
              "test_loader_registry_shared_and_complete_regardless_of_import_order"
            ],
            "tests/unit/test_user_management.py": [
              "test_create_user_files_success",
              "test_get_all_user_ids_empty",
              "test_get_all_user_ids_with_users",
              "test_get_user_context_nonexistent_user",
              "test_get_user_context_success",
              "test_get_user_data_account_nonexistent_chat_id",
              "test_get_user_data_account_nonexistent_discord_id",
              "test_get_user_data_account_nonexistent_email",
              "test_get_user_data_account_with_chat_id",
              "test_get_user_data_account_with_discord_id",
              "test_get_user_data_account_with_email",
              "test_get_user_data_invalid_type",
              "test_get_user_data_multiple_types",
              "test_get_user_data_nonexistent_user",
              "test_get_user_data_single_type",
              "test_get_user_preferences_corrupted_file",
              "test_get_user_preferences_nonexistent_user",
              "test_get_user_preferences_success",
              "test_hybrid_get_user_data_nonexistent_user",
              "test_hybrid_get_user_data_success",
              "test_save_user_data_success",
              "test_save_user_preferences_invalid_user_id",
              "test_update_user_preferences_nonexistent_user",
              "test_update_user_preferences_success",
              "test_user_lifecycle"
            ],
            "tests/unit/test_validation.py": [
              "test_is_valid_email_with_invalid_emails",
              "test_is_valid_email_with_valid_emails",
              "test_is_valid_phone_with_invalid_phones",
              "test_is_valid_phone_with_valid_phones",
              "test_title_case_with_various_inputs",
              "test_validate_new_user_data_empty_updates",
              "test_validate_new_user_data_invalid_account_status",
              "test_validate_new_user_data_invalid_channel_type",
              "test_validate_new_user_data_invalid_email",
              "test_validate_new_user_data_missing_account",
              "test_validate_new_user_data_missing_channel",
              "test_validate_new_user_data_missing_user_id",
              "test_validate_new_user_data_missing_username",
              "test_validate_new_user_data_success",
              "test_validate_new_user_data_user_already_exists",
              "test_validate_personalization_data_empty",
              "test_validate_personalization_data_invalid_custom_field_lists",
              "test_validate_personalization_data_invalid_custom_fields_type",
              "test_validate_personalization_data_invalid_date_format",
              "test_validate_personalization_data_invalid_list_fields",
              "test_validate_personalization_data_invalid_loved_one_item",
              "test_validate_personalization_data_invalid_loved_ones_type",
              "test_validate_personalization_data_invalid_string_fields",
              "test_validate_personalization_data_success",
              "test_validate_schedule_periods_all_period_excluded",
              "test_validate_schedule_periods_empty",
              "test_validate_schedule_periods_empty_days",
              "test_validate_schedule_periods_invalid_days",
              "test_validate_schedule_periods_invalid_days_type",
              "test_validate_schedule_periods_invalid_time_format",
              "test_validate_schedule_periods_invalid_time_order",
              "test_validate_schedule_periods_missing_times",
              "test_validate_schedule_periods_no_active_periods",
              "test_validate_schedule_periods_success",
              "test_validate_time_format_with_invalid_times",
              "test_validate_time_format_with_valid_times",
              "test_validate_user_update_account_invalid_email",
              "test_validate_user_update_account_invalid_status",
              "test_validate_user_update_account_missing_username",
              "test_validate_user_update_account_success",
              "test_validate_user_update_context_invalid_custom_fields",
              "test_validate_user_update_context_invalid_date",
              "test_validate_user_update_context_success",
              "test_validate_user_update_preferences_invalid_categories",
              "test_validate_user_update_preferences_invalid_channel_type",
              "test_validate_user_update_preferences_success",
              "test_validate_user_update_schedules_invalid_days",
              "test_validate_user_update_schedules_invalid_time_format",
              "test_validate_user_update_schedules_invalid_time_order",
              "test_validate_user_update_schedules_success",
              "test_validation_error_propagation",
              "test_validation_functions_work_together",
              "test_validation_with_real_file_operations"
            ],
            "ui/dialogs/account_creator_dialog.py": [
              "__init__",
              "_build_features_dict",
              "_determine_chat_id",
              "_validate_and_accept__add_feature_settings",
              "_validate_and_accept__build_account_data",
              "_validate_and_accept__build_user_preferences",
              "_validate_and_accept__collect_basic_user_info",
              "_validate_and_accept__collect_channel_data",
              "_validate_and_accept__collect_data",
              "_validate_and_accept__collect_feature_settings",
              "_validate_and_accept__collect_widget_data",
              "_validate_and_accept__create_account",
              "_validate_and_accept__handle_success",
              "_validate_and_accept__input_errors",
              "_validate_and_accept__schedule_new_user",
              "_validate_and_accept__setup_task_tags",
              "_validate_and_accept__show_error_dialog",
              "_validate_and_accept__show_success_dialog",
              "_validate_and_accept__update_user_index",
              "accept",
              "center_dialog",
              "close_dialog",
              "create_account",
              "create_account_dialog",
              "get_account_data",
              "keyPressEvent",
              "load_category_widget",
              "load_checkin_settings_widget",
              "load_message_service_widget",
              "load_task_management_widget",
              "load_widgets",
              "on_feature_toggled",
              "on_personalization_save",
              "on_preferred_name_changed",
              "on_username_changed",
              "open_personalization_dialog",
              "setup_connections",
              "setup_dialog",
              "setup_feature_group_boxes",
              "setup_profile_button",
              "update_profile_button_state",
              "update_tab_visibility",
              "validate_account_data",
              "validate_and_accept",
              "validate_input"
            ],
            "ui/dialogs/admin_panel.py": [
              "__init__",
              "get_admin_data",
              "set_admin_data",
              "setup_ui"
            ],
            "ui/dialogs/category_management_dialog.py": [
              "__init__",
              "get_selected_categories",
              "load_user_category_data",
              "on_enable_messages_toggled",
              "save_category_settings",
              "set_selected_categories"
            ],
            "ui/dialogs/channel_management_dialog.py": [
              "__init__",
              "get_selected_channel",
              "save_channel_settings",
              "set_selected_channel"
            ],
            "ui/dialogs/checkin_management_dialog.py": [
              "__init__",
              "get_checkin_settings",
              "load_user_checkin_data",
              "on_enable_checkins_toggled",
              "save_checkin_settings",
              "set_checkin_settings"
            ],
            "ui/dialogs/schedule_editor_dialog.py": [
              "__init__",
              "_trigger_rescheduling",
              "add_new_period",
              "cancel",
              "center_dialog",
              "collect_period_data",
              "find_lowest_available_period_number",
              "get_schedule_data",
              "handle_save",
              "load_existing_data",
              "open_schedule_editor",
              "remove_period_row",
              "resort_period_widgets",
              "save_schedule",
              "set_schedule_data",
              "setup_functionality",
              "sort_key",
              "undo_last_delete"
            ],
            "ui/dialogs/task_completion_dialog.py": [
              "__init__",
              "get_completion_data",
              "get_completion_date",
              "get_completion_notes",
              "get_completion_time",
              "setup_completion_time_components",
              "setup_connections",
              "setup_ui"
            ],
            "ui/dialogs/task_crud_dialog.py": [
              "__init__",
              "add_new_task",
              "complete_selected_task",
              "delete_completed_task",
              "delete_selected_task",
              "edit_selected_task",
              "get_selected_task_id",
              "load_data",
              "refresh_active_tasks",
              "refresh_completed_tasks",
              "restore_selected_task",
              "setup_connections",
              "setup_ui",
              "update_statistics"
            ],
            "ui/dialogs/task_edit_dialog.py": [
              "__init__",
              "add_reminder_period",
              "collect_quick_reminders",
              "collect_recurring_task_data",
              "collect_reminder_periods",
              "collect_selected_tags",
              "delete_reminder_period",
              "get_due_time_as_24h",
              "load_recurring_task_data",
              "load_task_data",
              "on_hour_changed",
              "on_minute_changed",
              "on_no_due_date_toggled",
              "on_recurring_pattern_changed",
              "render_reminder_period_row",
              "render_reminder_periods",
              "save_task",
              "set_due_time_from_24h",
              "setup_connections",
              "setup_due_time_components",
              "setup_recurring_task_components",
              "setup_ui",
              "validate_form"
            ],
            "ui/dialogs/task_management_dialog.py": [
              "__init__",
              "get_statistics",
              "on_enable_task_management_toggled",
              "save_task_settings"
            ],
            "ui/dialogs/user_profile_dialog.py": [
              "__init__",
              "add_custom_field",
              "add_loved_one_widget",
              "cancel",
              "center_dialog",
              "collect_custom_field_data",
              "collect_loved_ones_data",
              "create_custom_field_list",
              "create_goals_section",
              "create_health_section",
              "create_interests_section",
              "create_loved_ones_section",
              "create_notes_section",
              "keyPressEvent",
              "open_personalization_dialog",
              "remove_custom_field",
              "remove_loved_one_widget",
              "save_personalization",
              "setup_ui",
              "title_case"
            ],
            "ui/generate_ui_files.py": [
              "generate_all_ui_files",
              "generate_ui_file",
              "main"
            ],
            "ui/generated/account_creator_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/admin_panel_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/category_management_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/category_selection_widget_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/channel_management_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/channel_selection_widget_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/checkin_element_template_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/checkin_management_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/checkin_settings_widget_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/dynamic_list_field_template_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/period_row_template_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/schedule_editor_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/tag_widget_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/task_completion_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/task_crud_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/task_edit_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/task_management_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/task_settings_widget_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/user_profile_management_dialog_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/generated/user_profile_settings_widget_pyqt.py": [
              "retranslateUi",
              "setupUi"
            ],
            "ui/ui_app_qt.py": [
              "__init__",
              "_send_test_message__get_selected_category",
              "_send_test_message__validate_service_running",
              "_send_test_message__validate_user_selection",
              "cleanup_old_requests",
              "closeEvent",
              "confirm_test_message",
              "connect_signals",
              "create_new_user",
              "disable_content_management",
              "edit_user_messages",
              "edit_user_schedules",
              "enable_content_management",
              "force_clean_cache",
              "initialize_ui",
              "is_service_running",
              "load_theme",
              "load_ui",
              "load_user_categories",
              "main",
              "manage_categories",
              "manage_checkins",
              "manage_communication_settings",
              "manage_personalization",
              "manage_task_crud",
              "manage_tasks",
              "manage_user_analytics",
              "on_category_selected",
              "on_save",
              "on_schedule_save",
              "on_user_selected",
              "open_message_editor",
              "open_schedule_editor",
              "refresh_user_list",
              "restart_service",
              "run_category_scheduler",
              "run_full_scheduler",
              "run_user_scheduler",
              "send_actual_test_message",
              "send_test_message",
              "show_configuration_help",
              "shutdown_ui_components",
              "start_service",
              "stop_service",
              "system_health_check",
              "toggle_logging_verbosity",
              "update_service_status",
              "update_user_index_on_startup",
              "validate_configuration",
              "validate_configuration_before_start",
              "view_all_users_summary",
              "view_cache_status",
              "view_log_file"
            ],
            "ui/widgets/category_selection_widget.py": [
              "__init__",
              "get_selected_categories",
              "set_selected_categories"
            ],
            "ui/widgets/channel_selection_widget.py": [
              "__init__",
              "get_all_contact_info",
              "get_selected_channel",
              "get_timezone",
              "populate_timezones",
              "set_contact_info",
              "set_selected_channel",
              "set_timezone"
            ],
            "ui/widgets/checkin_settings_widget.py": [
              "__init__",
              "add_new_period",
              "add_new_question",
              "connect_question_checkboxes",
              "find_lowest_available_period_number",
              "get_checkin_settings",
              "get_default_question_state",
              "load_existing_data",
              "on_question_toggled",
              "remove_period_row",
              "set_checkin_settings",
              "set_question_checkboxes",
              "setup_connections",
              "showEvent",
              "undo_last_question_delete",
              "undo_last_time_period_delete"
            ],
            "ui/widgets/dynamic_list_container.py": [
              "__init__",
              "__post_init__",
              "_add_blank_row",
              "_deduplicate_values",
              "_ensure_single_blank_row",
              "_first_blank_index",
              "_on_preset_toggled",
              "_on_row_deleted",
              "_on_row_edited",
              "get_values",
              "set_values"
            ],
            "ui/widgets/dynamic_list_field.py": [
              "__init__",
              "_on_delete",
              "get_text",
              "is_blank",
              "is_checked",
              "on_checkbox_toggled",
              "on_editing_finished",
              "on_text_changed",
              "set_checked",
              "set_text"
            ],
            "ui/widgets/period_row_widget.py": [
              "__init__",
              "_get_day_checkboxes",
              "_set_read_only__all_period_read_only",
              "_set_read_only__apply_read_only_styling",
              "_set_read_only__checkbox_states",
              "_set_read_only__clear_read_only_styling",
              "_set_read_only__delete_button_visibility",
              "_set_read_only__force_style_updates",
              "_set_read_only__normal_checkbox_states",
              "_set_read_only__time_inputs",
              "_set_read_only__visual_styling",
              "get_period_data",
              "get_period_name",
              "get_selected_days",
              "is_valid",
              "load_days",
              "load_period_data",
              "on_individual_day_toggled",
              "on_select_all_days_toggled",
              "request_delete",
              "set_period_name",
              "set_read_only",
              "setup_functionality"
            ],
            "ui/widgets/tag_widget.py": [
              "__init__",
              "add_tag",
              "delete_tag",
              "edit_tag",
              "get_available_tags",
              "get_selected_tags",
              "load_tags",
              "on_tag_selection_changed",
              "refresh_tag_list",
              "refresh_tags",
              "set_selected_tags",
              "setup_connections",
              "setup_ui",
              "undo_last_tag_delete",
              "update_button_states"
            ],
            "ui/widgets/task_settings_widget.py": [
              "__init__",
              "add_new_period",
              "find_lowest_available_period_number",
              "get_available_tags",
              "get_recurring_task_settings",
              "get_statistics",
              "get_task_settings",
              "load_existing_data",
              "load_recurring_task_settings",
              "refresh_tags",
              "remove_period_row",
              "save_recurring_task_settings",
              "set_recurring_task_settings",
              "set_task_settings",
              "setup_connections",
              "showEvent",
              "undo_last_period_delete",
              "undo_last_tag_delete"
            ],
            "ui/widgets/user_profile_settings_widget.py": [
              "__init__",
              "_get_personalization_data__ensure_required_fields",
              "_get_personalization_data__extract_basic_fields",
              "_get_personalization_data__extract_date_of_birth",
              "_get_personalization_data__extract_dynamic_containers",
              "_get_personalization_data__extract_gender_identity",
              "_get_personalization_data__extract_loved_ones",
              "_get_personalization_data__extract_notes",
              "get_personalization_data",
              "get_settings",
              "load_existing_data",
              "populate_timezones",
              "set_checkbox_group",
              "set_settings"
            ],
            "user/context_manager.py": [
              "__init__",
              "_get_conversation_history",
              "_get_conversation_insights",
              "_get_minimal_context",
              "_get_mood_trends",
              "_get_recent_activity",
              "_get_user_preferences",
              "_get_user_profile",
              "add_conversation_exchange",
              "format_context_for_ai",
              "get_ai_context",
              "get_current_user_context"
            ],
            "user/user_context.py": [
              "__new__",
              "get_instance_context",
              "get_internal_username",
              "get_preference",
              "get_preferred_name",
              "get_user_id",
              "load_user_data",
              "save_user_data",
              "set_internal_username",
              "set_preference",
              "set_preferred_name",
              "set_user_id",
              "update_preference"
            ],
            "user/user_preferences.py": [
              "__init__",
              "get_all_preferences",
              "get_preference",
              "is_schedule_period_active",
              "load_preferences",
              "remove_preference",
              "save_preferences",
              "set_preference",
              "set_schedule_period_active",
              "update_preference"
            ]
          },
          "missing_files": [
            "ai/cache_manager.py",
            "ai/chatbot.py",
            "ai/context_builder.py",
            "ai/conversation_history.py",
            "ai/prompt_manager.py",
            "communication/command_handlers/analytics_handler.py",
            "communication/command_handlers/base_handler.py",
            "communication/command_handlers/checkin_handler.py",
            "communication/command_handlers/interaction_handlers.py",
            "communication/command_handlers/profile_handler.py",
            "communication/command_handlers/schedule_handler.py",
            "communication/command_handlers/task_handler.py",
            "communication/communication_channels/base/base_channel.py",
            "communication/communication_channels/base/command_registry.py",
            "communication/communication_channels/base/message_formatter.py",
            "communication/communication_channels/base/rich_formatter.py",
            "communication/communication_channels/discord/api_client.py",
            "communication/communication_channels/discord/bot.py",
            "communication/communication_channels/discord/event_handler.py",
            "communication/communication_channels/email/bot.py",
            "communication/core/channel_monitor.py",
            "communication/core/channel_orchestrator.py",
            "communication/core/factory.py",
            "communication/core/retry_manager.py",
            "communication/message_processing/command_parser.py",
            "communication/message_processing/conversation_flow_manager.py",
            "communication/message_processing/interaction_manager.py",
            "communication/message_processing/message_router.py",
            "core/auto_cleanup.py",
            "core/backup_manager.py",
            "core/checkin_analytics.py",
            "core/checkin_dynamic_manager.py",
            "core/config.py",
            "core/error_handling.py",
            "core/file_auditor.py",
            "core/file_operations.py",
            "core/logger.py",
            "core/message_management.py",
            "core/response_tracking.py",
            "core/schedule_management.py",
            "core/schedule_utilities.py",
            "core/scheduler.py",
            "core/schemas.py",
            "core/service.py",
            "core/service_utilities.py",
            "core/ui_management.py",
            "core/user_data_handlers.py",
            "core/user_data_manager.py",
            "core/user_data_validation.py",
            "core/user_management.py",
            "run_mhm.py",
            "run_tests.py",
            "tasks/task_management.py",
            "tests/behavior/test_account_management_real_behavior.py",
            "tests/behavior/test_ai_chatbot_behavior.py",
            "tests/behavior/test_ai_context_builder_behavior.py",
            "tests/behavior/test_ai_context_builder_coverage_expansion.py",
            "tests/behavior/test_ai_conversation_history_behavior.py",
            "tests/behavior/test_auto_cleanup_behavior.py",
            "tests/behavior/test_backup_manager_behavior.py",
            "tests/behavior/test_checkin_analytics_behavior.py",
            "tests/behavior/test_command_parser_coverage_expansion_phase3_simple.py",
            "tests/behavior/test_communication_behavior.py",
            "tests/behavior/test_communication_command_parser_behavior.py",
            "tests/behavior/test_communication_factory_coverage_expansion.py",
            "tests/behavior/test_communication_interaction_manager_behavior.py",
            "tests/behavior/test_communication_manager_coverage_expansion.py",
            "tests/behavior/test_config_coverage_expansion_phase3_simple.py",
            "tests/behavior/test_conversation_behavior.py",
            "tests/behavior/test_core_message_management_coverage_expansion.py",
            "tests/behavior/test_core_service_coverage_expansion.py",
            "tests/behavior/test_discord_bot_behavior.py",
            "tests/behavior/test_dynamic_checkin_behavior.py",
            "tests/behavior/test_email_bot_behavior.py",
            "tests/behavior/test_enhanced_command_parser_behavior.py",
            "tests/behavior/test_error_handling_coverage_expansion_phase3_final.py",
            "tests/behavior/test_interaction_handlers_behavior.py",
            "tests/behavior/test_interaction_handlers_coverage_expansion.py",
            "tests/behavior/test_logger_behavior.py",
            "tests/behavior/test_logger_coverage_expansion.py",
            "tests/behavior/test_logger_coverage_expansion_phase3_simple.py",
            "tests/behavior/test_message_behavior.py",
            "tests/behavior/test_observability_logging.py",
            "tests/behavior/test_response_tracking_behavior.py",
            "tests/behavior/test_schedule_management_behavior.py",
            "tests/behavior/test_scheduler_behavior.py",
            "tests/behavior/test_scheduler_coverage_expansion.py",
            "tests/behavior/test_service_behavior.py",
            "tests/behavior/test_service_utilities_behavior.py",
            "tests/behavior/test_static_logging_check.py",
            "tests/behavior/test_task_behavior.py",
            "tests/behavior/test_task_management_coverage_expansion.py",
            "tests/behavior/test_ui_app_behavior.py",
            "tests/behavior/test_user_context_behavior.py",
            "tests/behavior/test_user_management_coverage_expansion.py",
            "tests/behavior/test_utilities_demo.py",
            "tests/conftest.py",
            "tests/debug_file_paths.py",
            "tests/integration/test_account_lifecycle.py",
            "tests/integration/test_account_management.py",
            "tests/integration/test_user_creation.py",
            "tests/test_isolation.py",
            "tests/test_utilities.py",
            "tests/ui/test_account_creation_ui.py",
            "tests/ui/test_channel_management_dialog_coverage_expansion.py",
            "tests/ui/test_dialog_behavior.py",
            "tests/ui/test_dialog_coverage_expansion.py",
            "tests/ui/test_dialogs.py",
            "tests/ui/test_ui_widgets_coverage_expansion.py",
            "tests/ui/test_user_profile_dialog_coverage_expansion.py",
            "tests/ui/test_widget_behavior.py",
            "tests/ui/test_widget_behavior_simple.py",
            "tests/unit/test_cleanup.py",
            "tests/unit/test_config.py",
            "tests/unit/test_error_handling.py",
            "tests/unit/test_file_operations.py",
            "tests/unit/test_logging_components.py",
            "tests/unit/test_no_prints_policy.py",
            "tests/unit/test_recurring_tasks.py",
            "tests/unit/test_schedule_management.py",
            "tests/unit/test_user_data_loader_idempotency.py",
            "tests/unit/test_user_data_loader_order_insensitivity.py",
            "tests/unit/test_user_management.py",
            "tests/unit/test_validation.py",
            "ui/dialogs/account_creator_dialog.py",
            "ui/dialogs/admin_panel.py",
            "ui/dialogs/category_management_dialog.py",
            "ui/dialogs/channel_management_dialog.py",
            "ui/dialogs/checkin_management_dialog.py",
            "ui/dialogs/schedule_editor_dialog.py",
            "ui/dialogs/task_completion_dialog.py",
            "ui/dialogs/task_crud_dialog.py",
            "ui/dialogs/task_edit_dialog.py",
            "ui/dialogs/task_management_dialog.py",
            "ui/dialogs/user_profile_dialog.py",
            "ui/generate_ui_files.py",
            "ui/generated/account_creator_dialog_pyqt.py",
            "ui/generated/admin_panel_pyqt.py",
            "ui/generated/category_management_dialog_pyqt.py",
            "ui/generated/category_selection_widget_pyqt.py",
            "ui/generated/channel_management_dialog_pyqt.py",
            "ui/generated/channel_selection_widget_pyqt.py",
            "ui/generated/checkin_element_template_pyqt.py",
            "ui/generated/checkin_management_dialog_pyqt.py",
            "ui/generated/checkin_settings_widget_pyqt.py",
            "ui/generated/dynamic_list_field_template_pyqt.py",
            "ui/generated/period_row_template_pyqt.py",
            "ui/generated/schedule_editor_dialog_pyqt.py",
            "ui/generated/tag_widget_pyqt.py",
            "ui/generated/task_completion_dialog_pyqt.py",
            "ui/generated/task_crud_dialog_pyqt.py",
            "ui/generated/task_edit_dialog_pyqt.py",
            "ui/generated/task_management_dialog_pyqt.py",
            "ui/generated/task_settings_widget_pyqt.py",
            "ui/generated/user_profile_management_dialog_pyqt.py",
            "ui/generated/user_profile_settings_widget_pyqt.py",
            "ui/ui_app_qt.py",
            "ui/widgets/category_selection_widget.py",
            "ui/widgets/channel_selection_widget.py",
            "ui/widgets/checkin_settings_widget.py",
            "ui/widgets/dynamic_list_container.py",
            "ui/widgets/dynamic_list_field.py",
            "ui/widgets/period_row_widget.py",
            "ui/widgets/tag_widget.py",
            "ui/widgets/task_settings_widget.py",
            "ui/widgets/user_profile_settings_widget.py",
            "user/context_manager.py",
            "user/user_context.py",
            "user/user_preferences.py"
          ]
        },
        "registry_sections": {
          "ai/cache_manager.py": {
            "classes": [
              {
                "docstring": "Entry in the response cache",
                "methods": [],
                "name": "CacheEntry"
              },
              {
                "docstring": "Simple in-memory cache for AI responses to avoid repeated calculations",
                "methods": [
                  "__init__",
                  "_generate_key",
                  "get",
                  "set",
                  "_remove_entry",
                  "_cleanup_lru",
                  "clear",
                  "clear_expired",
                  "get_stats",
                  "get_entries_by_type",
                  "remove_entries_by_type",
                  "remove_user_entries"
                ],
                "name": "ResponseCache"
              },
              {
                "docstring": "Cache for user context information",
                "methods": [
                  "__init__",
                  "get",
                  "set",
                  "clear",
                  "clear_expired"
                ],
                "name": "ContextCache"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Get the global response cache instance",
                "name": "get_response_cache"
              },
              {
                "args": [],
                "docstring": "Get the global context cache instance",
                "name": "get_context_cache"
              },
              {
                "args": [
                  "self",
                  "max_size",
                  "ttl"
                ],
                "docstring": "Initialize the response cache",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "prompt",
                  "user_id",
                  "prompt_type"
                ],
                "docstring": "Generate cache key from prompt, user context, and prompt type",
                "name": "_generate_key"
              },
              {
                "args": [
                  "self",
                  "prompt",
                  "user_id",
                  "prompt_type"
                ],
                "docstring": "Get cached response if available and not expired",
                "name": "get"
              },
              {
                "args": [
                  "self",
                  "prompt",
                  "response",
                  "user_id",
                  "prompt_type",
                  "metadata"
                ],
                "docstring": "Cache a response",
                "name": "set"
              },
              {
                "args": [
                  "self",
                  "key"
                ],
                "docstring": "Remove an entry from the cache",
                "name": "_remove_entry"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Remove least recently used items",
                "name": "_cleanup_lru"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Clear all cached responses",
                "name": "clear"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Remove all expired entries from the cache",
                "name": "clear_expired"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get cache statistics",
                "name": "get_stats"
              },
              {
                "args": [
                  "self",
                  "prompt_type"
                ],
                "docstring": "Get all cache entries for a specific prompt type",
                "name": "get_entries_by_type"
              },
              {
                "args": [
                  "self",
                  "prompt_type"
                ],
                "docstring": "Remove all cache entries for a specific prompt type",
                "name": "remove_entries_by_type"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Remove all cache entries for a specific user",
                "name": "remove_user_entries"
              },
              {
                "args": [
                  "self",
                  "ttl"
                ],
                "docstring": "Initialize the context cache",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Get cached context for a user",
                "name": "get"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "context"
                ],
                "docstring": "Cache context for a user",
                "name": "set"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Clear all cached contexts",
                "name": "clear"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Remove all expired contexts",
                "name": "clear_expired"
              }
            ]
          },
          "ai/chatbot.py": {
            "classes": [
              {
                "docstring": "A Singleton container for LM Studio API client.",
                "methods": [
                  "__new__",
                  "__init__",
                  "_make_cache_key_inputs",
                  "_test_lm_studio_connection",
                  "_call_lm_studio_api",
                  "_get_contextual_fallback",
                  "_get_fallback_response",
                  "_get_fallback_personalized_message",
                  "_optimize_prompt",
                  "_create_comprehensive_context_prompt",
                  "_detect_mode",
                  "_create_command_parsing_prompt",
                  "_create_command_parsing_with_clarification_prompt",
                  "generate_response",
                  "is_ai_available",
                  "reload_system_prompt",
                  "test_system_prompt_integration",
                  "get_ai_status",
                  "generate_personalized_message",
                  "generate_quick_response",
                  "generate_contextual_response",
                  "_detect_resource_constraints",
                  "_smart_truncate_response",
                  "_enhance_conversational_engagement",
                  "_get_adaptive_timeout"
                ],
                "name": "AIChatBotSingleton"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Return the shared AIChatBot instance.",
                "name": "get_ai_chatbot"
              },
              {
                "args": [
                  "cls"
                ],
                "docstring": "Create a new instance.",
                "name": "__new__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "mode",
                  "user_prompt",
                  "user_id"
                ],
                "docstring": "Create consistent cache key inputs using prompt_type parameter.",
                "name": "_make_cache_key_inputs"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test connection to LM Studio server.",
                "name": "_test_lm_studio_connection"
              },
              {
                "args": [
                  "self",
                  "messages",
                  "max_tokens",
                  "temperature",
                  "timeout"
                ],
                "docstring": "Make an API call to LM Studio using OpenAI-compatible format.",
                "name": "_call_lm_studio_api"
              },
              {
                "args": [
                  "self",
                  "user_prompt",
                  "user_id"
                ],
                "docstring": "Provide contextually aware fallback responses based on user data and prompt analysis.\n        Now actually analyzes user's check-in data for meaningful responses.",
                "name": "_get_contextual_fallback"
              },
              {
                "args": [
                  "self",
                  "user_prompt"
                ],
                "docstring": "Legacy fallback method for backwards compatibility.",
                "name": "_get_fallback_response"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Provide fallback personalized messages when AI model is not available.",
                "name": "_get_fallback_personalized_message"
              },
              {
                "args": [
                  "self",
                  "user_prompt",
                  "context"
                ],
                "docstring": "Create optimized messages array for LM Studio API.",
                "name": "_optimize_prompt"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "user_prompt"
                ],
                "docstring": "Create a comprehensive context prompt with all user data for LM Studio.",
                "name": "_create_comprehensive_context_prompt"
              },
              {
                "args": [
                  "self",
                  "user_prompt"
                ],
                "docstring": "Detect whether the prompt is a command or a chat query.",
                "name": "_detect_mode"
              },
              {
                "args": [
                  "self",
                  "user_prompt"
                ],
                "docstring": "Create a prompt instructing the model to return strict JSON.",
                "name": "_create_command_parsing_prompt"
              },
              {
                "args": [
                  "self",
                  "user_prompt"
                ],
                "docstring": "Create a prompt instructing the model to return strict JSON and ask for clarification if ambiguous.",
                "name": "_create_command_parsing_with_clarification_prompt"
              },
              {
                "args": [
                  "self",
                  "user_prompt",
                  "timeout",
                  "user_id",
                  "mode"
                ],
                "docstring": "Generate a basic AI response from user_prompt, using LM Studio API.\n        Uses adaptive timeout to prevent blocking for too long with improved performance optimizations.",
                "name": "generate_response"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Check if the AI model is available and functional.",
                "name": "is_ai_available"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Reload the system prompt from file (useful for development and testing).",
                "name": "reload_system_prompt"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test the system prompt integration and return status information.",
                "name": "test_system_prompt_integration"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get detailed status information about the AI system.",
                "name": "get_ai_status"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "timeout"
                ],
                "docstring": "Generate a personalized message by examining the user's recent responses\n        (check-in data). Uses longer timeout since this is not real-time.",
                "name": "generate_personalized_message"
              },
              {
                "args": [
                  "self",
                  "user_prompt",
                  "user_id"
                ],
                "docstring": "Generate a quick response for real-time chat (Discord, etc.).\n        Uses shorter timeout optimized for responsiveness.",
                "name": "generate_quick_response"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "user_prompt",
                  "timeout"
                ],
                "docstring": "Generate a context-aware response using comprehensive user data.\n        Integrates with existing UserContext and UserPreferences systems.",
                "name": "generate_contextual_response"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Detect if system is resource-constrained.",
                "name": "_detect_resource_constraints"
              },
              {
                "args": [
                  "self",
                  "text",
                  "max_chars",
                  "max_words"
                ],
                "docstring": "Smartly truncate response to avoid mid-sentence cuts.\n        Supports both character and word limits.",
                "name": "_smart_truncate_response"
              },
              {
                "args": [
                  "self",
                  "response"
                ],
                "docstring": "Enhance response to ensure good conversational engagement.\n        Adds engagement prompts if the response doesn't already have them.",
                "name": "_enhance_conversational_engagement"
              },
              {
                "args": [
                  "self",
                  "base_timeout"
                ],
                "docstring": "Get adaptive timeout based on system resources.",
                "name": "_get_adaptive_timeout"
              }
            ]
          },
          "ai/context_builder.py": {
            "classes": [
              {
                "docstring": "Structured context data for AI interactions",
                "methods": [
                  "__post_init__"
                ],
                "name": "ContextData"
              },
              {
                "docstring": "Analysis results from context data",
                "methods": [
                  "__post_init__"
                ],
                "name": "ContextAnalysis"
              },
              {
                "docstring": "Builds comprehensive context for AI interactions",
                "methods": [
                  "__init__",
                  "build_user_context",
                  "analyze_context",
                  "_determine_trend",
                  "_calculate_wellness_score",
                  "_generate_insights",
                  "create_context_prompt",
                  "create_task_context",
                  "create_checkin_context"
                ],
                "name": "ContextBuilder"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Get the global context builder instance",
                "name": "get_context_builder"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Post-initialization setup",
                "name": "__post_init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Post-initialization setup",
                "name": "__post_init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the context builder",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "include_conversation_history"
                ],
                "docstring": "Build comprehensive context for a user\n        \n        Args:\n            user_id: User ID to build context for\n            include_conversation_history: Whether to include conversation history\n            \n        Returns:\n            ContextData object with all available context",
                "name": "build_user_context"
              },
              {
                "args": [
                  "self",
                  "context_data"
                ],
                "docstring": "Analyze context data to extract insights\n        \n        Args:\n            context_data: Context data to analyze\n            \n        Returns:\n            ContextAnalysis with insights and trends",
                "name": "analyze_context"
              },
              {
                "args": [
                  "self",
                  "values"
                ],
                "docstring": "Determine trend from a list of values",
                "name": "_determine_trend"
              },
              {
                "args": [
                  "self",
                  "breakfast_rate",
                  "avg_mood",
                  "avg_energy",
                  "teeth_brushing_rate"
                ],
                "docstring": "Calculate overall wellness score (0-100)",
                "name": "_calculate_wellness_score"
              },
              {
                "args": [
                  "self",
                  "breakfast_rate",
                  "avg_mood",
                  "avg_energy",
                  "teeth_brushing_rate",
                  "mood_trend",
                  "energy_trend"
                ],
                "docstring": "Generate insights from analyzed data",
                "name": "_generate_insights"
              },
              {
                "args": [
                  "self",
                  "context_data",
                  "analysis"
                ],
                "docstring": "Create a context prompt string for AI interactions\n        \n        Args:\n            context_data: User context data\n            analysis: Optional pre-computed analysis\n            \n        Returns:\n            Formatted context prompt string",
                "name": "create_context_prompt"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "task_description"
                ],
                "docstring": "Create context specifically for task-related interactions\n        \n        Args:\n            user_id: User ID\n            task_description: Description of the task\n            \n        Returns:\n            Task-specific context string",
                "name": "create_task_context"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "checkin_type"
                ],
                "docstring": "Create context specifically for check-in interactions\n        \n        Args:\n            user_id: User ID\n            checkin_type: Type of check-in (daily, weekly, etc.)\n            \n        Returns:\n            Check-in specific context string",
                "name": "create_checkin_context"
              }
            ]
          },
          "ai/conversation_history.py": {
            "classes": [
              {
                "docstring": "A single message in a conversation",
                "methods": [
                  "__post_init__"
                ],
                "name": "ConversationMessage"
              },
              {
                "docstring": "A conversation session with multiple messages",
                "methods": [
                  "__post_init__"
                ],
                "name": "ConversationSession"
              },
              {
                "docstring": "Manages conversation history for AI interactions",
                "methods": [
                  "__init__",
                  "start_session",
                  "end_session",
                  "add_message",
                  "get_history",
                  "get_recent_messages",
                  "get_active_session",
                  "get_session_messages",
                  "clear_history",
                  "delete_session",
                  "get_conversation_summary",
                  "_cleanup_old_sessions",
                  "get_statistics"
                ],
                "name": "ConversationHistory"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Get the global conversation history instance",
                "name": "get_conversation_history"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Post-initialization setup",
                "name": "__post_init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Post-initialization setup",
                "name": "__post_init__"
              },
              {
                "args": [
                  "self",
                  "max_sessions_per_user",
                  "max_messages_per_session"
                ],
                "docstring": "Initialize the conversation history manager",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "session_id"
                ],
                "docstring": "Start a new conversation session\n        \n        Args:\n            user_id: User ID\n            session_id: Optional custom session ID\n            \n        Returns:\n            Session ID",
                "name": "start_session"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "End the active conversation session for a user\n        \n        Args:\n            user_id: User ID\n            \n        Returns:\n            True if session was ended successfully",
                "name": "end_session"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "role",
                  "content",
                  "metadata"
                ],
                "docstring": "Add a message to the active conversation session\n        \n        Args:\n            user_id: User ID\n            role: Message role (\"user\" or \"assistant\")\n            content: Message content\n            metadata: Optional message metadata\n            \n        Returns:\n            True if message was added successfully",
                "name": "add_message"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "limit",
                  "include_metadata"
                ],
                "docstring": "Get conversation history for a user\n        \n        Args:\n            user_id: User ID\n            limit: Maximum number of messages to return\n            include_metadata: Whether to include message metadata\n            \n        Returns:\n            List of conversation messages",
                "name": "get_history"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "count"
                ],
                "docstring": "Get recent conversation messages for a user\n        \n        Args:\n            user_id: User ID\n            count: Number of recent messages to return\n            \n        Returns:\n            List of recent conversation messages",
                "name": "get_recent_messages"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Get the active conversation session for a user\n        \n        Args:\n            user_id: User ID\n            \n        Returns:\n            Active conversation session or None",
                "name": "get_active_session"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "session_id"
                ],
                "docstring": "Get all messages from a specific session\n        \n        Args:\n            user_id: User ID\n            session_id: Session ID\n            \n        Returns:\n            List of messages in the session",
                "name": "get_session_messages"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Clear all conversation history for a user\n        \n        Args:\n            user_id: User ID\n            \n        Returns:\n            True if history was cleared successfully",
                "name": "clear_history"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "session_id"
                ],
                "docstring": "Delete a specific conversation session\n        \n        Args:\n            user_id: User ID\n            session_id: Session ID to delete\n            \n        Returns:\n            True if session was deleted successfully",
                "name": "delete_session"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "session_id"
                ],
                "docstring": "Get a summary of conversation history\n        \n        Args:\n            user_id: User ID\n            session_id: Optional specific session ID\n            \n        Returns:\n            Conversation summary string",
                "name": "get_conversation_summary"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Clean up old sessions for a user",
                "name": "_cleanup_old_sessions"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Get conversation statistics for a user\n        \n        Args:\n            user_id: User ID\n            \n        Returns:\n            Dictionary with conversation statistics",
                "name": "get_statistics"
              }
            ]
          },
          "ai/prompt_manager.py": {
            "classes": [
              {
                "docstring": "Template for AI prompts",
                "methods": [],
                "name": "PromptTemplate"
              },
              {
                "docstring": "Manages AI prompts and templates",
                "methods": [
                  "__init__",
                  "_load_custom_prompt",
                  "get_prompt",
                  "get_prompt_template",
                  "add_prompt_template",
                  "remove_prompt_template",
                  "reload_custom_prompt",
                  "has_custom_prompt",
                  "custom_prompt_length",
                  "fallback_prompt_keys",
                  "get_available_prompts",
                  "create_contextual_prompt",
                  "create_task_prompt",
                  "create_checkin_prompt"
                ],
                "name": "PromptManager"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Get the global prompt manager instance",
                "name": "get_prompt_manager"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the prompt manager",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load the custom system prompt from file",
                "name": "_load_custom_prompt"
              },
              {
                "args": [
                  "self",
                  "prompt_type"
                ],
                "docstring": "Get the appropriate prompt for the given type\n        \n        Args:\n            prompt_type: Type of prompt ('wellness', 'command', 'neurodivergent_support', etc.)\n            \n        Returns:\n            The prompt string",
                "name": "get_prompt"
              },
              {
                "args": [
                  "self",
                  "prompt_type"
                ],
                "docstring": "Get the full prompt template for the given type\n        \n        Args:\n            prompt_type: Type of prompt\n            \n        Returns:\n            PromptTemplate object or None if not found",
                "name": "get_prompt_template"
              },
              {
                "args": [
                  "self",
                  "template"
                ],
                "docstring": "Add a custom prompt template\n        \n        Args:\n            template: PromptTemplate to add",
                "name": "add_prompt_template"
              },
              {
                "args": [
                  "self",
                  "prompt_type"
                ],
                "docstring": "Remove a custom prompt template\n        \n        Args:\n            prompt_type: Name of the template to remove\n            \n        Returns:\n            True if template was removed, False if not found",
                "name": "remove_prompt_template"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Reload the custom prompt from file (useful for development)",
                "name": "reload_custom_prompt"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Check if a custom prompt is loaded.",
                "name": "has_custom_prompt"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the length of the custom prompt.",
                "name": "custom_prompt_length"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the keys of available fallback prompts.",
                "name": "fallback_prompt_keys"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get all available prompt types and their descriptions\n        \n        Returns:\n            Dictionary mapping prompt types to descriptions",
                "name": "get_available_prompts"
              },
              {
                "args": [
                  "self",
                  "base_prompt",
                  "context",
                  "user_input"
                ],
                "docstring": "Create a contextual prompt by combining base prompt, context, and user input\n        \n        Args:\n            base_prompt: Base system prompt\n            context: Contextual information\n            user_input: User's input\n            \n        Returns:\n            Combined contextual prompt",
                "name": "create_contextual_prompt"
              },
              {
                "args": [
                  "self",
                  "task_description",
                  "user_context"
                ],
                "docstring": "Create a task-specific prompt\n        \n        Args:\n            task_description: Description of the task\n            user_context: User context information\n            \n        Returns:\n            Task-specific prompt",
                "name": "create_task_prompt"
              },
              {
                "args": [
                  "self",
                  "checkin_type",
                  "user_context"
                ],
                "docstring": "Create a check-in specific prompt\n        \n        Args:\n            checkin_type: Type of check-in (daily, weekly, etc.)\n            user_context: User context information\n            \n        Returns:\n            Check-in specific prompt",
                "name": "create_checkin_prompt"
              }
            ]
          },
          "communication/command_handlers/analytics_handler.py": {
            "classes": [
              {
                "docstring": "Handler for analytics and insights interactions",
                "methods": [
                  "can_handle",
                  "handle",
                  "_handle_show_analytics",
                  "_handle_mood_trends",
                  "_handle_quant_summary",
                  "_handle_habit_analysis",
                  "_handle_sleep_analysis",
                  "_handle_wellness_score",
                  "_handle_checkin_history",
                  "_handle_checkin_analysis",
                  "_handle_completion_rate",
                  "_handle_task_analytics",
                  "_handle_task_stats",
                  "get_help",
                  "get_examples",
                  "_truncate_response"
                ],
                "name": "AnalyticsHandler"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "intent"
                ],
                "docstring": "",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "parsed_command"
                ],
                "docstring": "",
                "name": "handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show comprehensive analytics overview",
                "name": "_handle_show_analytics"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show mood trends analysis",
                "name": "_handle_mood_trends"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show per-field quantitative summaries for opted-in fields.",
                "name": "_handle_quant_summary"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show habit analysis",
                "name": "_handle_habit_analysis"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show sleep analysis",
                "name": "_handle_sleep_analysis"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show wellness score",
                "name": "_handle_wellness_score"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show check-in history",
                "name": "_handle_checkin_history"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show comprehensive check-in response analysis",
                "name": "_handle_checkin_analysis"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show completion rate",
                "name": "_handle_completion_rate"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show comprehensive task analytics and insights",
                "name": "_handle_task_analytics"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show detailed task statistics",
                "name": "_handle_task_stats"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_examples"
              },
              {
                "args": [
                  "self",
                  "response",
                  "max_length"
                ],
                "docstring": "Truncate response to fit Discord message limits",
                "name": "_truncate_response"
              }
            ]
          },
          "communication/command_handlers/base_handler.py": {
            "classes": [
              {
                "docstring": "Abstract base class for interaction handlers",
                "methods": [
                  "can_handle",
                  "handle",
                  "get_help",
                  "get_examples"
                ],
                "name": "InteractionHandler"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "intent"
                ],
                "docstring": "Check if this handler can handle the given intent",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "parsed_command"
                ],
                "docstring": "Handle the interaction and return a response",
                "name": "handle"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get help text for this handler",
                "name": "get_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get example commands for this handler",
                "name": "get_examples"
              }
            ]
          },
          "communication/command_handlers/checkin_handler.py": {
            "classes": [
              {
                "docstring": "Handler for check-in interactions",
                "methods": [
                  "can_handle",
                  "handle",
                  "_handle_start_checkin",
                  "_handle_continue_checkin",
                  "_handle_checkin_status",
                  "get_help",
                  "get_examples"
                ],
                "name": "CheckinHandler"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "intent"
                ],
                "docstring": "",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "parsed_command"
                ],
                "docstring": "",
                "name": "handle"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Handle starting a check-in by delegating to conversation manager",
                "name": "_handle_start_checkin"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle continuing a check-in",
                "name": "_handle_continue_checkin"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Handle check-in status request",
                "name": "_handle_checkin_status"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_examples"
              }
            ]
          },
          "communication/command_handlers/interaction_handlers.py": {
            "classes": [
              {
                "docstring": "Abstract base class for interaction handlers",
                "methods": [
                  "can_handle",
                  "handle",
                  "get_help",
                  "get_examples"
                ],
                "name": "InteractionHandler"
              },
              {
                "docstring": "Handler for task management interactions",
                "methods": [
                  "can_handle",
                  "handle",
                  "_handle_create_task",
                  "_handle_create_task__parse_relative_date",
                  "_handle_list_tasks",
                  "_handle_list_tasks__apply_filters",
                  "_handle_list_tasks__no_tasks_response",
                  "_handle_list_tasks__sort_tasks",
                  "_handle_list_tasks__format_list",
                  "_handle_list_tasks__format_due_date",
                  "_handle_list_tasks__build_filter_info",
                  "_handle_list_tasks__build_response",
                  "_handle_list_tasks__generate_suggestions",
                  "_handle_list_tasks__get_suggestion",
                  "_handle_list_tasks__create_rich_data",
                  "_handle_complete_task",
                  "_handle_delete_task",
                  "_handle_update_task",
                  "_handle_task_stats",
                  "_handle_complete_task__find_task_by_identifier",
                  "_handle_complete_task__find_most_urgent_task",
                  "_handle_delete_task__find_task_by_identifier",
                  "_handle_update_task__find_task_by_identifier",
                  "get_help",
                  "get_examples"
                ],
                "name": "TaskManagementHandler"
              },
              {
                "docstring": "Handler for check-in interactions",
                "methods": [
                  "can_handle",
                  "handle",
                  "_handle_start_checkin",
                  "_handle_continue_checkin",
                  "_handle_checkin_status",
                  "get_help",
                  "get_examples"
                ],
                "name": "CheckinHandler"
              },
              {
                "docstring": "Handler for profile management interactions",
                "methods": [
                  "can_handle",
                  "handle",
                  "_handle_show_profile",
                  "_handle_update_profile",
                  "_handle_profile_stats",
                  "get_help",
                  "get_examples"
                ],
                "name": "ProfileHandler"
              },
              {
                "docstring": "Handler for help and command information",
                "methods": [
                  "can_handle",
                  "handle",
                  "_handle_general_help",
                  "_handle_commands_list",
                  "_handle_examples",
                  "_handle_status",
                  "_handle_messages",
                  "get_help",
                  "get_examples"
                ],
                "name": "HelpHandler"
              },
              {
                "docstring": "Handler for schedule management interactions",
                "methods": [
                  "can_handle",
                  "handle",
                  "_handle_show_schedule",
                  "_handle_update_schedule",
                  "_handle_schedule_status",
                  "_handle_add_schedule_period",
                  "_handle_add_schedule_period__parse_time_format",
                  "_handle_edit_schedule_period__parse_time_format",
                  "_handle_edit_schedule_period",
                  "get_help",
                  "get_examples"
                ],
                "name": "ScheduleManagementHandler"
              },
              {
                "docstring": "Handler for analytics and insights interactions",
                "methods": [
                  "can_handle",
                  "handle",
                  "_handle_show_analytics",
                  "_handle_quant_summary",
                  "_handle_mood_trends",
                  "_handle_habit_analysis",
                  "_handle_sleep_analysis",
                  "_handle_wellness_score",
                  "_handle_checkin_history",
                  "_handle_completion_rate",
                  "get_help",
                  "get_examples"
                ],
                "name": "AnalyticsHandler"
              }
            ],
            "functions": [
              {
                "args": [
                  "intent"
                ],
                "docstring": "Get the appropriate handler for an intent",
                "name": "get_interaction_handler"
              },
              {
                "args": [],
                "docstring": "Get all registered handlers",
                "name": "get_all_handlers"
              },
              {
                "args": [
                  "self",
                  "intent"
                ],
                "docstring": "Check if this handler can handle the given intent",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "parsed_command"
                ],
                "docstring": "Handle the interaction and return a response",
                "name": "handle"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get help text for this handler",
                "name": "get_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get example commands for this handler",
                "name": "get_examples"
              },
              {
                "args": [
                  "self",
                  "intent"
                ],
                "docstring": "",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "parsed_command"
                ],
                "docstring": "",
                "name": "handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle task creation",
                "name": "_handle_create_task"
              },
              {
                "args": [
                  "self",
                  "date_str"
                ],
                "docstring": "Convert relative date strings to proper dates",
                "name": "_handle_create_task__parse_relative_date"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle task listing with enhanced filtering and details",
                "name": "_handle_list_tasks"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "tasks",
                  "filter_type",
                  "priority_filter",
                  "tag_filter"
                ],
                "docstring": "Apply filters to tasks and return filtered list.",
                "name": "_handle_list_tasks__apply_filters"
              },
              {
                "args": [
                  "self",
                  "filter_type",
                  "priority_filter",
                  "tag_filter"
                ],
                "docstring": "Get appropriate response when no tasks match filters.",
                "name": "_handle_list_tasks__no_tasks_response"
              },
              {
                "args": [
                  "self",
                  "tasks"
                ],
                "docstring": "Sort tasks by priority and due date.",
                "name": "_handle_list_tasks__sort_tasks"
              },
              {
                "args": [
                  "self",
                  "tasks"
                ],
                "docstring": "Format task list with enhanced details.",
                "name": "_handle_list_tasks__format_list"
              },
              {
                "args": [
                  "self",
                  "due_date"
                ],
                "docstring": "Format due date with urgency indicator.",
                "name": "_handle_list_tasks__format_due_date"
              },
              {
                "args": [
                  "self",
                  "filter_type",
                  "priority_filter",
                  "tag_filter"
                ],
                "docstring": "Build filter information list.",
                "name": "_handle_list_tasks__build_filter_info"
              },
              {
                "args": [
                  "self",
                  "task_list",
                  "filter_info",
                  "total_tasks"
                ],
                "docstring": "Build the main task list response.",
                "name": "_handle_list_tasks__build_response"
              },
              {
                "args": [
                  "self",
                  "tasks",
                  "filter_info"
                ],
                "docstring": "Generate contextual suggestions based on current state.",
                "name": "_handle_list_tasks__generate_suggestions"
              },
              {
                "args": [
                  "self",
                  "tasks"
                ],
                "docstring": "Get contextual show suggestion based on task analysis.",
                "name": "_handle_list_tasks__get_suggestion"
              },
              {
                "args": [
                  "self",
                  "filter_info",
                  "tasks"
                ],
                "docstring": "Create rich data for Discord embeds.",
                "name": "_handle_list_tasks__create_rich_data"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle task completion",
                "name": "_handle_complete_task"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle task deletion",
                "name": "_handle_delete_task"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle task updates",
                "name": "_handle_update_task"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle task statistics with dynamic time periods",
                "name": "_handle_task_stats"
              },
              {
                "args": [
                  "self",
                  "tasks",
                  "identifier"
                ],
                "docstring": "Find a task by number, name, or task_id",
                "name": "_handle_complete_task__find_task_by_identifier"
              },
              {
                "args": [
                  "self",
                  "tasks"
                ],
                "docstring": "Find the most urgent task based on priority and due date",
                "name": "_handle_complete_task__find_most_urgent_task"
              },
              {
                "args": [
                  "self",
                  "tasks",
                  "identifier"
                ],
                "docstring": "Find a task by number, name, or task_id",
                "name": "_handle_delete_task__find_task_by_identifier"
              },
              {
                "args": [
                  "self",
                  "tasks",
                  "identifier"
                ],
                "docstring": "Find a task by number, name, or task_id",
                "name": "_handle_update_task__find_task_by_identifier"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_examples"
              },
              {
                "args": [
                  "self",
                  "intent"
                ],
                "docstring": "",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "parsed_command"
                ],
                "docstring": "",
                "name": "handle"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Handle starting a check-in by delegating to conversation manager",
                "name": "_handle_start_checkin"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle continuing a check-in",
                "name": "_handle_continue_checkin"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Handle check-in status request",
                "name": "_handle_checkin_status"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_examples"
              },
              {
                "args": [
                  "self",
                  "intent"
                ],
                "docstring": "",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "parsed_command"
                ],
                "docstring": "",
                "name": "handle"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Handle showing user profile with comprehensive personalization data",
                "name": "_handle_show_profile"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle comprehensive profile updates",
                "name": "_handle_update_profile"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Handle profile statistics",
                "name": "_handle_profile_stats"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_examples"
              },
              {
                "args": [
                  "self",
                  "intent"
                ],
                "docstring": "",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "parsed_command"
                ],
                "docstring": "",
                "name": "handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle general help request",
                "name": "_handle_general_help"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Handle commands list request",
                "name": "_handle_commands_list"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle examples request",
                "name": "_handle_examples"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Handle status request with detailed system information",
                "name": "_handle_status"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Handle messages request with message history and settings",
                "name": "_handle_messages"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_examples"
              },
              {
                "args": [
                  "self",
                  "intent"
                ],
                "docstring": "",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "parsed_command"
                ],
                "docstring": "",
                "name": "handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show schedule for a specific category or all categories",
                "name": "_handle_show_schedule"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Update schedule settings",
                "name": "_handle_update_schedule"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show status of schedules",
                "name": "_handle_schedule_status"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Add a new schedule period with enhanced options",
                "name": "_handle_add_schedule_period"
              },
              {
                "args": [
                  "self",
                  "time_str"
                ],
                "docstring": "Parse various time formats and convert to standard format",
                "name": "_handle_add_schedule_period__parse_time_format"
              },
              {
                "args": [
                  "self",
                  "time_str"
                ],
                "docstring": "Parse various time formats and convert to standard format",
                "name": "_handle_edit_schedule_period__parse_time_format"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Edit an existing schedule period with enhanced options",
                "name": "_handle_edit_schedule_period"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_examples"
              },
              {
                "args": [
                  "self",
                  "intent"
                ],
                "docstring": "",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "parsed_command"
                ],
                "docstring": "",
                "name": "handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show comprehensive analytics overview",
                "name": "_handle_show_analytics"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show per-field quantitative summaries for opted-in fields.",
                "name": "_handle_quant_summary"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show mood trends analysis",
                "name": "_handle_mood_trends"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show habit analysis",
                "name": "_handle_habit_analysis"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show sleep analysis",
                "name": "_handle_sleep_analysis"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show wellness score",
                "name": "_handle_wellness_score"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show check-in history",
                "name": "_handle_checkin_history"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show completion rate",
                "name": "_handle_completion_rate"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_examples"
              }
            ]
          },
          "communication/command_handlers/profile_handler.py": {
            "classes": [
              {
                "docstring": "Handler for profile management interactions",
                "methods": [
                  "can_handle",
                  "handle",
                  "_handle_show_profile",
                  "_handle_update_profile",
                  "_handle_profile_stats",
                  "_format_profile_text",
                  "get_help",
                  "get_examples"
                ],
                "name": "ProfileHandler"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "intent"
                ],
                "docstring": "",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "parsed_command"
                ],
                "docstring": "",
                "name": "handle"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Handle showing user profile with comprehensive personalization data",
                "name": "_handle_show_profile"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle comprehensive profile updates",
                "name": "_handle_update_profile"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Handle profile statistics",
                "name": "_handle_profile_stats"
              },
              {
                "args": [
                  "self",
                  "account_data",
                  "context_data",
                  "preferences_data"
                ],
                "docstring": "Create a clean, readable profile string for channels like Discord.",
                "name": "_format_profile_text"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_examples"
              }
            ]
          },
          "communication/command_handlers/schedule_handler.py": {
            "classes": [
              {
                "docstring": "Handler for schedule management interactions",
                "methods": [
                  "can_handle",
                  "handle",
                  "_handle_show_schedule",
                  "_handle_update_schedule",
                  "_handle_schedule_status",
                  "_handle_add_schedule_period",
                  "_handle_add_schedule_period__parse_time_format",
                  "_handle_edit_schedule_period__parse_time_format",
                  "_handle_edit_schedule_period",
                  "get_help",
                  "get_examples"
                ],
                "name": "ScheduleManagementHandler"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "intent"
                ],
                "docstring": "",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "parsed_command"
                ],
                "docstring": "",
                "name": "handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show schedule for a specific category or all categories",
                "name": "_handle_show_schedule"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Update schedule settings",
                "name": "_handle_update_schedule"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Show status of schedules",
                "name": "_handle_schedule_status"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Add a new schedule period with enhanced options",
                "name": "_handle_add_schedule_period"
              },
              {
                "args": [
                  "self",
                  "time_str"
                ],
                "docstring": "Parse various time formats and convert to standard format",
                "name": "_handle_add_schedule_period__parse_time_format"
              },
              {
                "args": [
                  "self",
                  "time_str"
                ],
                "docstring": "Parse various time formats and convert to standard format",
                "name": "_handle_edit_schedule_period__parse_time_format"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Edit an existing schedule period with enhanced options",
                "name": "_handle_edit_schedule_period"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_examples"
              }
            ]
          },
          "communication/command_handlers/task_handler.py": {
            "classes": [
              {
                "docstring": "Handler for task management interactions",
                "methods": [
                  "can_handle",
                  "handle",
                  "_handle_create_task",
                  "_handle_create_task__parse_relative_date",
                  "_handle_list_tasks",
                  "_handle_list_tasks__apply_filters",
                  "_handle_list_tasks__no_tasks_response",
                  "_handle_list_tasks__sort_tasks",
                  "_handle_list_tasks__format_list",
                  "_handle_list_tasks__format_due_date",
                  "_handle_list_tasks__build_filter_info",
                  "_handle_list_tasks__build_response",
                  "_handle_list_tasks__generate_suggestions",
                  "_handle_list_tasks__get_suggestion",
                  "_handle_list_tasks__create_rich_data",
                  "_handle_complete_task",
                  "_handle_delete_task",
                  "_handle_update_task",
                  "_handle_task_stats",
                  "_handle_complete_task__find_task_by_identifier",
                  "_handle_delete_task__find_task_by_identifier",
                  "_handle_update_task__find_task_by_identifier",
                  "get_help",
                  "get_examples"
                ],
                "name": "TaskManagementHandler"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "intent"
                ],
                "docstring": "",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "parsed_command"
                ],
                "docstring": "",
                "name": "handle"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle task creation",
                "name": "_handle_create_task"
              },
              {
                "args": [
                  "self",
                  "date_str"
                ],
                "docstring": "Convert relative date strings to proper dates",
                "name": "_handle_create_task__parse_relative_date"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle task listing with enhanced filtering and details",
                "name": "_handle_list_tasks"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "tasks",
                  "filter_type",
                  "priority_filter",
                  "tag_filter"
                ],
                "docstring": "Apply filters to tasks and return filtered list.",
                "name": "_handle_list_tasks__apply_filters"
              },
              {
                "args": [
                  "self",
                  "filter_type",
                  "priority_filter",
                  "tag_filter"
                ],
                "docstring": "Get appropriate response when no tasks match filters.",
                "name": "_handle_list_tasks__no_tasks_response"
              },
              {
                "args": [
                  "self",
                  "tasks"
                ],
                "docstring": "Sort tasks by priority and due date.",
                "name": "_handle_list_tasks__sort_tasks"
              },
              {
                "args": [
                  "self",
                  "tasks"
                ],
                "docstring": "Format task list with enhanced details.",
                "name": "_handle_list_tasks__format_list"
              },
              {
                "args": [
                  "self",
                  "due_date"
                ],
                "docstring": "Format due date with urgency indicator.",
                "name": "_handle_list_tasks__format_due_date"
              },
              {
                "args": [
                  "self",
                  "filter_type",
                  "priority_filter",
                  "tag_filter"
                ],
                "docstring": "Build filter information list.",
                "name": "_handle_list_tasks__build_filter_info"
              },
              {
                "args": [
                  "self",
                  "task_list",
                  "filter_info",
                  "total_tasks"
                ],
                "docstring": "Build the main task list response.",
                "name": "_handle_list_tasks__build_response"
              },
              {
                "args": [
                  "self",
                  "tasks",
                  "filter_info"
                ],
                "docstring": "Generate contextual suggestions based on current state.",
                "name": "_handle_list_tasks__generate_suggestions"
              },
              {
                "args": [
                  "self",
                  "tasks"
                ],
                "docstring": "Get contextual show suggestion based on task analysis.",
                "name": "_handle_list_tasks__get_suggestion"
              },
              {
                "args": [
                  "self",
                  "filter_info",
                  "tasks"
                ],
                "docstring": "Create rich data for Discord embeds.",
                "name": "_handle_list_tasks__create_rich_data"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle task completion",
                "name": "_handle_complete_task"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle task deletion",
                "name": "_handle_delete_task"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle task updates",
                "name": "_handle_update_task"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "entities"
                ],
                "docstring": "Handle task statistics with dynamic time periods",
                "name": "_handle_task_stats"
              },
              {
                "args": [
                  "self",
                  "tasks",
                  "identifier"
                ],
                "docstring": "Find a task by number, name, or task_id",
                "name": "_handle_complete_task__find_task_by_identifier"
              },
              {
                "args": [
                  "self",
                  "tasks",
                  "identifier"
                ],
                "docstring": "Find a task by number, name, or task_id",
                "name": "_handle_delete_task__find_task_by_identifier"
              },
              {
                "args": [
                  "self",
                  "tasks",
                  "identifier"
                ],
                "docstring": "Find a task by number, name, or task_id",
                "name": "_handle_update_task__find_task_by_identifier"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_examples"
              }
            ]
          },
          "communication/communication_channels/base/base_channel.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [],
                "name": "ChannelStatus"
              },
              {
                "docstring": "",
                "methods": [],
                "name": "ChannelType"
              },
              {
                "docstring": "Configuration for communication channels",
                "methods": [
                  "__post_init__"
                ],
                "name": "ChannelConfig"
              },
              {
                "docstring": "Abstract base class for all communication channels",
                "methods": [
                  "__init__",
                  "channel_type",
                  "is_ready",
                  "get_status",
                  "get_error",
                  "_set_status"
                ],
                "name": "BaseChannel"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Post-initialization setup.",
                "name": "__post_init__"
              },
              {
                "args": [
                  "self",
                  "config"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Return whether this channel is sync or async",
                "name": "channel_type"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Check if channel is ready to send/receive messages",
                "name": "is_ready"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get current channel status",
                "name": "get_status"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get last error message",
                "name": "get_error"
              },
              {
                "args": [
                  "self",
                  "status",
                  "error_message"
                ],
                "docstring": "Internal method to update status",
                "name": "_set_status"
              }
            ]
          },
          "communication/communication_channels/base/command_registry.py": {
            "classes": [
              {
                "docstring": "Definition of a command that can be registered",
                "methods": [
                  "__post_init__"
                ],
                "name": "CommandDefinition"
              },
              {
                "docstring": "Abstract base class for command registration utilities",
                "methods": [
                  "__init__",
                  "register_command",
                  "unregister_command",
                  "get_command",
                  "get_all_commands",
                  "get_enabled_commands",
                  "is_command_registered",
                  "register_with_platform",
                  "unregister_from_platform"
                ],
                "name": "CommandRegistry"
              },
              {
                "docstring": "Discord-specific command registry",
                "methods": [
                  "__init__",
                  "register_with_platform",
                  "unregister_from_platform"
                ],
                "name": "DiscordCommandRegistry"
              },
              {
                "docstring": "Email-specific command registry",
                "methods": [
                  "register_with_platform",
                  "unregister_from_platform"
                ],
                "name": "EmailCommandRegistry"
              }
            ],
            "functions": [
              {
                "args": [
                  "channel_type",
                  "platform_instance"
                ],
                "docstring": "Get the appropriate command registry for a channel type",
                "name": "get_command_registry"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Post-initialization setup",
                "name": "__post_init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the command registry",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "command_def"
                ],
                "docstring": "Register a command definition",
                "name": "register_command"
              },
              {
                "args": [
                  "self",
                  "command_name"
                ],
                "docstring": "Unregister a command",
                "name": "unregister_command"
              },
              {
                "args": [
                  "self",
                  "command_name"
                ],
                "docstring": "Get a command by name or alias",
                "name": "get_command"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get all registered commands",
                "name": "get_all_commands"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get all enabled commands",
                "name": "get_enabled_commands"
              },
              {
                "args": [
                  "self",
                  "command_name"
                ],
                "docstring": "Check if a command is registered",
                "name": "is_command_registered"
              },
              {
                "args": [
                  "self",
                  "command_def"
                ],
                "docstring": "Register command with the specific platform (Discord, etc.)",
                "name": "register_with_platform"
              },
              {
                "args": [
                  "self",
                  "command_name"
                ],
                "docstring": "Unregister command from the specific platform",
                "name": "unregister_from_platform"
              },
              {
                "args": [
                  "self",
                  "bot"
                ],
                "docstring": "Initialize Discord command registry",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "command_def"
                ],
                "docstring": "Register command with Discord",
                "name": "register_with_platform"
              },
              {
                "args": [
                  "self",
                  "command_name"
                ],
                "docstring": "Unregister command from Discord",
                "name": "unregister_from_platform"
              },
              {
                "args": [
                  "self",
                  "command_def"
                ],
                "docstring": "Register command with email system",
                "name": "register_with_platform"
              },
              {
                "args": [
                  "self",
                  "command_name"
                ],
                "docstring": "Unregister command from email system",
                "name": "unregister_from_platform"
              }
            ]
          },
          "communication/communication_channels/base/message_formatter.py": {
            "classes": [
              {
                "docstring": "Abstract base class for message formatting utilities",
                "methods": [
                  "format_message",
                  "create_rich_content",
                  "create_interactive_elements"
                ],
                "name": "MessageFormatter"
              },
              {
                "docstring": "Simple text-based message formatter for plain text channels",
                "methods": [
                  "format_message",
                  "create_rich_content",
                  "create_interactive_elements"
                ],
                "name": "TextMessageFormatter"
              },
              {
                "docstring": "Email-specific message formatter",
                "methods": [
                  "format_message",
                  "create_rich_content",
                  "create_interactive_elements"
                ],
                "name": "EmailMessageFormatter"
              }
            ],
            "functions": [
              {
                "args": [
                  "channel_type"
                ],
                "docstring": "Get the appropriate message formatter for a channel type",
                "name": "get_message_formatter"
              },
              {
                "args": [
                  "self",
                  "message",
                  "rich_data"
                ],
                "docstring": "Format a message with optional rich data",
                "name": "format_message"
              },
              {
                "args": [
                  "self",
                  "message",
                  "rich_data"
                ],
                "docstring": "Create rich content (embed, card, etc.) from rich data",
                "name": "create_rich_content"
              },
              {
                "args": [
                  "self",
                  "suggestions"
                ],
                "docstring": "Create interactive elements (buttons, menus, etc.) from suggestions",
                "name": "create_interactive_elements"
              },
              {
                "args": [
                  "self",
                  "message",
                  "rich_data"
                ],
                "docstring": "Format a message as plain text",
                "name": "format_message"
              },
              {
                "args": [
                  "self",
                  "message",
                  "rich_data"
                ],
                "docstring": "Create rich text content",
                "name": "create_rich_content"
              },
              {
                "args": [
                  "self",
                  "suggestions"
                ],
                "docstring": "Create text-based interactive elements",
                "name": "create_interactive_elements"
              },
              {
                "args": [
                  "self",
                  "message",
                  "rich_data"
                ],
                "docstring": "Format a message for email",
                "name": "format_message"
              },
              {
                "args": [
                  "self",
                  "message",
                  "rich_data"
                ],
                "docstring": "Create rich email content",
                "name": "create_rich_content"
              },
              {
                "args": [
                  "self",
                  "suggestions"
                ],
                "docstring": "Create email-friendly interactive elements",
                "name": "create_interactive_elements"
              }
            ]
          },
          "communication/communication_channels/base/rich_formatter.py": {
            "classes": [
              {
                "docstring": "Abstract base class for rich formatting utilities",
                "methods": [
                  "create_embed",
                  "create_interactive_view",
                  "get_color_for_type"
                ],
                "name": "RichFormatter"
              },
              {
                "docstring": "Discord-specific rich formatting utilities",
                "methods": [
                  "__init__",
                  "create_embed",
                  "create_interactive_view",
                  "get_color_for_type"
                ],
                "name": "DiscordRichFormatter"
              },
              {
                "docstring": "Email-specific rich formatting utilities",
                "methods": [
                  "create_embed",
                  "create_interactive_view",
                  "get_color_for_type"
                ],
                "name": "EmailRichFormatter"
              }
            ],
            "functions": [
              {
                "args": [
                  "channel_type"
                ],
                "docstring": "Get the appropriate rich formatter for a channel type",
                "name": "get_rich_formatter"
              },
              {
                "args": [
                  "self",
                  "message",
                  "rich_data"
                ],
                "docstring": "Create a rich embed/card from rich data",
                "name": "create_embed"
              },
              {
                "args": [
                  "self",
                  "suggestions"
                ],
                "docstring": "Create interactive view with buttons/menus from suggestions",
                "name": "create_interactive_view"
              },
              {
                "args": [
                  "self",
                  "content_type"
                ],
                "docstring": "Get appropriate color for content type",
                "name": "get_color_for_type"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize Discord formatter",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "message",
                  "rich_data"
                ],
                "docstring": "Create a Discord embed from rich data",
                "name": "create_embed"
              },
              {
                "args": [
                  "self",
                  "suggestions"
                ],
                "docstring": "Create a Discord view with buttons from suggestions",
                "name": "create_interactive_view"
              },
              {
                "args": [
                  "self",
                  "content_type"
                ],
                "docstring": "Get Discord color for content type",
                "name": "get_color_for_type"
              },
              {
                "args": [
                  "self",
                  "message",
                  "rich_data"
                ],
                "docstring": "Create rich HTML content for email",
                "name": "create_embed"
              },
              {
                "args": [
                  "self",
                  "suggestions"
                ],
                "docstring": "Create HTML buttons for email",
                "name": "create_interactive_view"
              },
              {
                "args": [
                  "self",
                  "content_type"
                ],
                "docstring": "Get HTML color for content type",
                "name": "get_color_for_type"
              }
            ]
          },
          "communication/communication_channels/discord/api_client.py": {
            "classes": [
              {
                "docstring": "Data structure for Discord messages",
                "methods": [],
                "name": "MessageData"
              },
              {
                "docstring": "Options for sending messages",
                "methods": [],
                "name": "SendMessageOptions"
              },
              {
                "docstring": "Discord API client for handling Discord-specific operations",
                "methods": [
                  "__init__",
                  "is_connected",
                  "get_connection_latency"
                ],
                "name": "DiscordAPIClient"
              }
            ],
            "functions": [
              {
                "args": [
                  "bot"
                ],
                "docstring": "Get a Discord API client instance",
                "name": "get_discord_api_client"
              },
              {
                "args": [
                  "self",
                  "bot"
                ],
                "docstring": "Initialize the Discord API client",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Check if the bot is connected to Discord",
                "name": "is_connected"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the bot's connection latency",
                "name": "get_connection_latency"
              }
            ]
          },
          "communication/communication_channels/discord/bot.py": {
            "classes": [
              {
                "docstring": "Detailed Discord connection status for better error reporting",
                "methods": [],
                "name": "DiscordConnectionStatus"
              },
              {
                "docstring": "",
                "methods": [
                  "__init__",
                  "channel_type",
                  "_check_dns_resolution",
                  "_check_network_connectivity",
                  "_wait_for_network_recovery",
                  "_get_detailed_connection_status",
                  "_shared__update_connection_status",
                  "_check_network_health",
                  "_should_attempt_reconnection",
                  "initialize__run_bot_in_thread",
                  "initialize__register_events",
                  "initialize__register_commands",
                  "_create_discord_embed",
                  "_create_action_row",
                  "get_health_status",
                  "get_connection_status_summary",
                  "is_actually_connected",
                  "can_send_messages"
                ],
                "name": "DiscordBot"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "config"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the channel type for Discord bot.\n        \n        Returns:\n            ChannelType.ASYNC: Discord bot operates asynchronously",
                "name": "channel_type"
              },
              {
                "args": [
                  "self",
                  "hostname"
                ],
                "docstring": "Check DNS resolution for a hostname with enhanced fallback and error reporting",
                "name": "_check_dns_resolution"
              },
              {
                "args": [
                  "self",
                  "hostname",
                  "port"
                ],
                "docstring": "Check if network connectivity is available to Discord servers with enhanced fallback and timeout handling",
                "name": "_check_network_connectivity"
              },
              {
                "args": [
                  "self",
                  "max_wait"
                ],
                "docstring": "Wait for network connectivity to recover with enhanced monitoring and early exit",
                "name": "_wait_for_network_recovery"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get detailed connection status information",
                "name": "_get_detailed_connection_status"
              },
              {
                "args": [
                  "self",
                  "status",
                  "error_info"
                ],
                "docstring": "Update connection status with detailed error information",
                "name": "_shared__update_connection_status"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Comprehensive network health check with detailed reporting",
                "name": "_check_network_health"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Determine if reconnection should be attempted based on various factors",
                "name": "_should_attempt_reconnection"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Run Discord bot in completely isolated thread with its own event loop",
                "name": "initialize__run_bot_in_thread"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Register Discord event handlers",
                "name": "initialize__register_events"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Register Discord commands",
                "name": "initialize__register_commands"
              },
              {
                "args": [
                  "self",
                  "message",
                  "rich_data"
                ],
                "docstring": "Create a Discord embed from rich data",
                "name": "_create_discord_embed"
              },
              {
                "args": [
                  "self",
                  "suggestions"
                ],
                "docstring": "Create a Discord view with buttons from suggestions",
                "name": "_create_action_row"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get comprehensive health status information",
                "name": "get_health_status"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get a human-readable connection status summary",
                "name": "get_connection_status_summary"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Check if the Discord bot is actually connected, regardless of initialization status",
                "name": "is_actually_connected"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Check if the Discord bot can actually send messages",
                "name": "can_send_messages"
              }
            ]
          },
          "communication/communication_channels/discord/event_handler.py": {
            "classes": [
              {
                "docstring": "Types of Discord events",
                "methods": [],
                "name": "EventType"
              },
              {
                "docstring": "Context for Discord events",
                "methods": [
                  "__post_init__"
                ],
                "name": "EventContext"
              },
              {
                "docstring": "Handles Discord events and routes them to appropriate handlers",
                "methods": [
                  "__init__",
                  "_register_default_handlers",
                  "add_message_handler",
                  "add_ready_handler",
                  "add_disconnect_handler",
                  "add_error_handler",
                  "register_events"
                ],
                "name": "DiscordEventHandler"
              }
            ],
            "functions": [
              {
                "args": [
                  "bot"
                ],
                "docstring": "Get a Discord event handler instance",
                "name": "get_discord_event_handler"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Post-initialization setup",
                "name": "__post_init__"
              },
              {
                "args": [
                  "self",
                  "bot"
                ],
                "docstring": "Initialize the Discord event handler",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Register default event handlers",
                "name": "_register_default_handlers"
              },
              {
                "args": [
                  "self",
                  "handler"
                ],
                "docstring": "Add a custom message handler",
                "name": "add_message_handler"
              },
              {
                "args": [
                  "self",
                  "handler"
                ],
                "docstring": "Add a custom ready handler",
                "name": "add_ready_handler"
              },
              {
                "args": [
                  "self",
                  "handler"
                ],
                "docstring": "Add a custom disconnect handler",
                "name": "add_disconnect_handler"
              },
              {
                "args": [
                  "self",
                  "handler"
                ],
                "docstring": "Add a custom error handler",
                "name": "add_error_handler"
              },
              {
                "args": [
                  "self",
                  "bot"
                ],
                "docstring": "Register all event handlers with a Discord bot",
                "name": "register_events"
              }
            ]
          },
          "communication/communication_channels/email/bot.py": {
            "classes": [
              {
                "docstring": "Custom exception for email bot-related errors.",
                "methods": [],
                "name": "EmailBotError"
              },
              {
                "docstring": "",
                "methods": [
                  "__init__",
                  "channel_type",
                  "initialize__test_smtp_connection",
                  "initialize__test_imap_connection",
                  "send_message__send_email_sync",
                  "_receive_emails_sync"
                ],
                "name": "EmailBot"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "config"
                ],
                "docstring": "Initialize the EmailBot with configuration.\n        \n        Args:\n            config: Channel configuration object. If None, creates default config\n                   with email-specific settings (max_retries=3, retry_delay=1.0,\n                   backoff_multiplier=2.0)",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the channel type for email bot.\n        \n        Returns:\n            ChannelType.SYNC: Email operations are synchronous",
                "name": "channel_type"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test SMTP connection synchronously",
                "name": "initialize__test_smtp_connection"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test IMAP connection synchronously",
                "name": "initialize__test_imap_connection"
              },
              {
                "args": [
                  "self",
                  "recipient",
                  "message",
                  "kwargs"
                ],
                "docstring": "Send email synchronously",
                "name": "send_message__send_email_sync"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Receive emails synchronously",
                "name": "_receive_emails_sync"
              }
            ]
          },
          "communication/core/channel_monitor.py": {
            "classes": [
              {
                "docstring": "Monitors channel health and manages automatic restart logic",
                "methods": [
                  "__init__",
                  "set_channels",
                  "start_restart_monitor",
                  "stop_restart_monitor",
                  "_restart_monitor_loop",
                  "_check_and_restart_stuck_channels",
                  "_attempt_channel_restart",
                  "record_channel_failure",
                  "record_channel_success",
                  "get_channel_health_status",
                  "reset_channel_failures"
                ],
                "name": "ChannelMonitor"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the channel monitor",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "channels_dict"
                ],
                "docstring": "Set the channels dictionary for monitoring",
                "name": "set_channels"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Start the automatic restart monitor thread",
                "name": "start_restart_monitor"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Stop the automatic restart monitor thread",
                "name": "stop_restart_monitor"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Main restart monitor loop that checks channel health",
                "name": "_restart_monitor_loop"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Check for stuck channels and attempt restarts",
                "name": "_check_and_restart_stuck_channels"
              },
              {
                "args": [
                  "self",
                  "channel_name"
                ],
                "docstring": "Attempt to restart a specific channel",
                "name": "_attempt_channel_restart"
              },
              {
                "args": [
                  "self",
                  "channel_name"
                ],
                "docstring": "Record a failure for a specific channel",
                "name": "record_channel_failure"
              },
              {
                "args": [
                  "self",
                  "channel_name"
                ],
                "docstring": "Record a success for a specific channel (resets failure count)",
                "name": "record_channel_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get health status for all monitored channels",
                "name": "get_channel_health_status"
              },
              {
                "args": [
                  "self",
                  "channel_name"
                ],
                "docstring": "Reset failure counts for a specific channel or all channels",
                "name": "reset_channel_failures"
              }
            ]
          },
          "communication/core/channel_orchestrator.py": {
            "classes": [
              {
                "docstring": "Custom exception for bot initialization failures.",
                "methods": [],
                "name": "BotInitializationError"
              },
              {
                "docstring": "Custom exception for message sending failures.",
                "methods": [],
                "name": "MessageSendError"
              },
              {
                "docstring": "Manages all communication channels with improved modularity",
                "methods": [
                  "__new__",
                  "__init__",
                  "__init____setup_event_loop",
                  "send_message_sync__run_async_sync",
                  "set_scheduler_manager",
                  "send_message_sync__queue_failed_message",
                  "start_all__start_retry_thread",
                  "stop_all__stop_retry_thread",
                  "start_all__start_restart_monitor",
                  "stop_all__stop_restart_monitor",
                  "initialize_channels_from_config",
                  "_get_default_channel_configs",
                  "start_all",
                  "_start_sync",
                  "_initialize_channel_with_retry_sync",
                  "_check_logging_health",
                  "send_message_sync",
                  "get_discord_connectivity_status",
                  "stop_all",
                  "_shutdown_sync",
                  "handle_message_sending",
                  "_get_recipient_for_service",
                  "_should_send_checkin_prompt",
                  "_handle_scheduled_checkin",
                  "_send_checkin_prompt",
                  "_send_ai_generated_message",
                  "_send_predefined_message",
                  "get_active_channels",
                  "get_configured_channels",
                  "get_registered_channels",
                  "handle_task_reminder",
                  "get_last_task_reminder",
                  "_create_task_reminder_message",
                  "_select_weighted_message"
                ],
                "name": "CommunicationManager"
              }
            ],
            "functions": [
              {
                "args": [
                  "cls",
                  "*args",
                  "**kwargs"
                ],
                "docstring": "Ensure that only one instance of the CommunicationManager exists (Singleton pattern).",
                "name": "__new__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the CommunicationManager singleton",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Set up a dedicated event loop for async operations",
                "name": "__init____setup_event_loop"
              },
              {
                "args": [
                  "self",
                  "coro"
                ],
                "docstring": "Run async function synchronously using our managed loop",
                "name": "send_message_sync__run_async_sync"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Set the scheduler manager for the communication manager.",
                "name": "set_scheduler_manager"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "category",
                  "message",
                  "recipient",
                  "channel_name"
                ],
                "docstring": "Queue a failed message for retry",
                "name": "send_message_sync__queue_failed_message"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Start the retry thread for failed messages",
                "name": "start_all__start_retry_thread"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Stop the retry thread",
                "name": "stop_all__stop_retry_thread"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Start the automatic restart monitor thread",
                "name": "start_all__start_restart_monitor"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Stop the automatic restart monitor thread",
                "name": "stop_all__stop_restart_monitor"
              },
              {
                "args": [
                  "self",
                  "channel_configs"
                ],
                "docstring": "Initialize channels from configuration",
                "name": "initialize_channels_from_config"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get default channel configurations",
                "name": "_get_default_channel_configs"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Start all communication channels",
                "name": "start_all"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Synchronous method to start all configured channels",
                "name": "_start_sync"
              },
              {
                "args": [
                  "self",
                  "channel",
                  "config"
                ],
                "docstring": "Synchronous version of channel initialization with retry logic",
                "name": "_initialize_channel_with_retry_sync"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Check if logging is still working and recover if needed.\n        \n        Verifies that the logging system is functional and attempts to restart it if issues are detected.",
                "name": "_check_logging_health"
              },
              {
                "args": [
                  "self",
                  "channel_name",
                  "recipient",
                  "message",
                  "**kwargs"
                ],
                "docstring": "Synchronous wrapper with logging health check",
                "name": "send_message_sync"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get detailed Discord connectivity status if available",
                "name": "get_discord_connectivity_status"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Stop all communication channels",
                "name": "stop_all"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Synchronous shutdown method for all channels.\n        \n        Stops all communication channels and cleans up resources.",
                "name": "_shutdown_sync"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "category"
                ],
                "docstring": "Handle sending messages for a user and category with improved recipient resolution.\n        Now uses scheduled check-ins instead of random replacement.",
                "name": "handle_message_sending"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "messaging_service",
                  "preferences"
                ],
                "docstring": "Get the appropriate recipient ID for the messaging service",
                "name": "_get_recipient_for_service"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "checkin_prefs"
                ],
                "docstring": "Determine if it's time to send a check-in prompt based on user preferences.\n        For check-ins, we respect the schedule-based approach - if the scheduler\n        triggered this function, it means it's time for a check-in during the\n        scheduled period.",
                "name": "_should_send_checkin_prompt"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "messaging_service",
                  "recipient"
                ],
                "docstring": "Handle scheduled check-in messages based on user preferences and frequency.",
                "name": "_handle_scheduled_checkin"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "messaging_service",
                  "recipient"
                ],
                "docstring": "Send a check-in prompt message to start the check-in flow.",
                "name": "_send_checkin_prompt"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "category",
                  "messaging_service",
                  "recipient"
                ],
                "docstring": "Send an AI-generated personalized message using contextual AI",
                "name": "_send_ai_generated_message"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "category",
                  "messaging_service",
                  "recipient"
                ],
                "docstring": "Send a pre-defined message from the user's message library with deduplication",
                "name": "_send_predefined_message"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get list of currently active/running channels",
                "name": "get_active_channels"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get list of channels that are configured (from config)",
                "name": "get_configured_channels"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get list of channels that are registered in the factory",
                "name": "get_registered_channels"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "task_id"
                ],
                "docstring": "Handle sending task reminders for a user.",
                "name": "handle_task_reminder"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Get the task ID of the last task reminder sent to a user.\n        \n        Args:\n            user_id: The user's ID\n            \n        Returns:\n            The task ID of the last reminder, or None if no reminder was sent",
                "name": "get_last_task_reminder"
              },
              {
                "args": [
                  "self",
                  "task"
                ],
                "docstring": "Create a formatted task reminder message.",
                "name": "_create_task_reminder_message"
              },
              {
                "args": [
                  "self",
                  "available_messages",
                  "matching_periods"
                ],
                "docstring": "Select a message using a weighting system that prioritizes\n        messages with specific time periods over 'ALL' time periods.\n        \n        Args:\n            available_messages: List of available messages\n            matching_periods: List of current matching time periods\n            \n        Returns:\n            Selected message",
                "name": "_select_weighted_message"
              },
              {
                "args": [],
                "docstring": "Run the event loop in a separate thread for async operations.\n                    \n                    This nested function is used to manage the event loop for async channel operations.",
                "name": "run_event_loop"
              }
            ]
          },
          "communication/core/factory.py": {
            "classes": [
              {
                "docstring": "Factory for creating communication channels using config-based discovery",
                "methods": [
                  "_initialize_registry",
                  "create_channel",
                  "get_registered_channels"
                ],
                "name": "ChannelFactory"
              }
            ],
            "functions": [
              {
                "args": [
                  "cls"
                ],
                "docstring": "Initialize the channel registry from configuration",
                "name": "_initialize_registry"
              },
              {
                "args": [
                  "cls",
                  "name",
                  "config"
                ],
                "docstring": "Create a channel instance",
                "name": "create_channel"
              },
              {
                "args": [
                  "cls"
                ],
                "docstring": "Get list of registered channel types",
                "name": "get_registered_channels"
              }
            ]
          },
          "communication/core/retry_manager.py": {
            "classes": [
              {
                "docstring": "Represents a message that failed to send and is queued for retry",
                "methods": [],
                "name": "QueuedMessage"
              },
              {
                "docstring": "Manages message retry logic and failed message queuing",
                "methods": [
                  "__init__",
                  "queue_failed_message",
                  "start_retry_thread",
                  "stop_retry_thread",
                  "_retry_loop",
                  "_process_retry_queue",
                  "get_queue_size",
                  "clear_queue"
                ],
                "name": "RetryManager"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the retry manager",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "category",
                  "message",
                  "recipient",
                  "channel_name"
                ],
                "docstring": "Queue a failed message for retry",
                "name": "queue_failed_message"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Start the retry thread for failed messages",
                "name": "start_retry_thread"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Stop the retry thread",
                "name": "stop_retry_thread"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Main retry loop that processes failed messages",
                "name": "_retry_loop"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Process the retry queue and attempt to resend failed messages",
                "name": "_process_retry_queue"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the current size of the retry queue",
                "name": "get_queue_size"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Clear all queued messages (use with caution)",
                "name": "clear_queue"
              }
            ]
          },
          "communication/message_processing/command_parser.py": {
            "classes": [
              {
                "docstring": "Result of command parsing with confidence and method used",
                "methods": [],
                "name": "ParsingResult"
              },
              {
                "docstring": "Enhanced command parser that combines rule-based and AI parsing",
                "methods": [
                  "__init__",
                  "parse",
                  "_rule_based_parse",
                  "_ai_enhanced_parse",
                  "_extract_entities_rule_based",
                  "_extract_task_entities",
                  "_extract_task_name_from_context",
                  "_extract_update_entities",
                  "_extract_intent_from_ai_response",
                  "_extract_entities_from_ai_response",
                  "_calculate_confidence",
                  "_is_valid_intent",
                  "get_suggestions"
                ],
                "name": "EnhancedCommandParser"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Get the global enhanced command parser instance",
                "name": "get_enhanced_command_parser"
              },
              {
                "args": [
                  "message"
                ],
                "docstring": "Convenience function to parse a command",
                "name": "parse_command"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "message",
                  "user_id"
                ],
                "docstring": "Parse a user message into a structured command.\n        \n        Returns:\n            ParsingResult with parsed command, confidence, and method used",
                "name": "parse"
              },
              {
                "args": [
                  "self",
                  "message"
                ],
                "docstring": "Parse using rule-based patterns",
                "name": "_rule_based_parse"
              },
              {
                "args": [
                  "self",
                  "message",
                  "user_id"
                ],
                "docstring": "Parse using AI chatbot capabilities",
                "name": "_ai_enhanced_parse"
              },
              {
                "args": [
                  "self",
                  "intent",
                  "match",
                  "message"
                ],
                "docstring": "Extract entities using rule-based patterns",
                "name": "_extract_entities_rule_based"
              },
              {
                "args": [
                  "self",
                  "title"
                ],
                "docstring": "Extract task-related entities from title",
                "name": "_extract_task_entities"
              },
              {
                "args": [
                  "self",
                  "message"
                ],
                "docstring": "Extract task name from natural language context",
                "name": "_extract_task_name_from_context"
              },
              {
                "args": [
                  "self",
                  "update_text"
                ],
                "docstring": "Extract update entities from update text",
                "name": "_extract_update_entities"
              },
              {
                "args": [
                  "self",
                  "ai_response"
                ],
                "docstring": "Extract intent from AI response text",
                "name": "_extract_intent_from_ai_response"
              },
              {
                "args": [
                  "self",
                  "ai_response"
                ],
                "docstring": "Extract entities from AI response text",
                "name": "_extract_entities_from_ai_response"
              },
              {
                "args": [
                  "self",
                  "intent",
                  "match",
                  "message"
                ],
                "docstring": "Calculate confidence score for a parsed command",
                "name": "_calculate_confidence"
              },
              {
                "args": [
                  "self",
                  "intent"
                ],
                "docstring": "Check if intent is supported by any handler",
                "name": "_is_valid_intent"
              },
              {
                "args": [
                  "self",
                  "partial_message"
                ],
                "docstring": "Get command suggestions based on partial input",
                "name": "get_suggestions"
              }
            ]
          },
          "communication/message_processing/conversation_flow_manager.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "__init__",
                  "_load_user_states",
                  "_save_user_states",
                  "expire_checkin_flow_due_to_unrelated_outbound",
                  "handle_inbound_message",
                  "start_checkin",
                  "clear_stuck_flows",
                  "clear_all_states",
                  "restart_checkin",
                  "start_tasks_flow",
                  "start_profile_flow",
                  "start_schedule_flow",
                  "start_messages_flow",
                  "start_analytics_flow",
                  "_start_dynamic_checkin",
                  "_get_personalized_welcome",
                  "_get_next_question",
                  "_get_question_text",
                  "_handle_checkin",
                  "_validate_response",
                  "_complete_checkin",
                  "_handle_command_during_checkin",
                  "_generate_completion_message",
                  "handle_contextual_question",
                  "_select_checkin_questions_with_weighting"
                ],
                "name": "ConversationManager"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load user states from disk",
                "name": "_load_user_states"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Save user states to disk",
                "name": "_save_user_states"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Expire an active check-in flow when an unrelated outbound message is sent.\n        Safe no-op if no flow or different flow is active.",
                "name": "expire_checkin_flow_due_to_unrelated_outbound"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "message_text"
                ],
                "docstring": "Primary entry point. Takes user's message and returns a (reply_text, completed).\n        \n        Now defaults to contextual chat for all messages unless user is in a specific flow\n        or uses a special command.",
                "name": "handle_inbound_message"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Public method to start a check-in flow for a user.\n        This is the proper way to initiate check-ins from external modules.",
                "name": "start_checkin"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Clear any stuck conversation flows for a user.\n        This is a safety mechanism to reset flow state when it gets stuck.",
                "name": "clear_stuck_flows"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Clear all user states - primarily for testing.",
                "name": "clear_all_states"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Force restart a check-in flow, clearing any existing checkin state.\n        This should be used when user explicitly wants to start over.",
                "name": "restart_checkin"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Starter for a future tasks multi-step flow (placeholder).",
                "name": "start_tasks_flow"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "",
                "name": "start_profile_flow"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "",
                "name": "start_schedule_flow"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "",
                "name": "start_messages_flow"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "",
                "name": "start_analytics_flow"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Start a dynamic check-in flow based on user preferences with weighted question selection",
                "name": "_start_dynamic_checkin"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "question_count"
                ],
                "docstring": "Generate a personalized welcome message based on user history",
                "name": "_get_personalized_welcome"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "user_state"
                ],
                "docstring": "Get the next question in the check-in flow",
                "name": "_get_next_question"
              },
              {
                "args": [
                  "self",
                  "question_key",
                  "previous_data"
                ],
                "docstring": "Get appropriate question text based on question type and previous responses",
                "name": "_get_question_text"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "user_state",
                  "message_text"
                ],
                "docstring": "Enhanced check-in flow with dynamic questions and better validation",
                "name": "_handle_checkin"
              },
              {
                "args": [
                  "self",
                  "question_key",
                  "response"
                ],
                "docstring": "Validate user response based on question type using dynamic manager",
                "name": "_validate_response"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "user_state"
                ],
                "docstring": "Complete the check-in and provide personalized feedback",
                "name": "_complete_checkin"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "message_text"
                ],
                "docstring": "Handle common commands while user is in a checkin flow",
                "name": "_handle_command_during_checkin"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "data"
                ],
                "docstring": "Generate a personalized completion message based on responses",
                "name": "_generate_completion_message"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "message_text"
                ],
                "docstring": "Handle a single contextual question without entering a conversation flow.\n        Perfect for one-off questions that benefit from user context.",
                "name": "handle_contextual_question"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "enabled_questions"
                ],
                "docstring": "Select check-in questions using weighted randomization to ensure variety.\n        \n        Args:\n            user_id: User ID\n            enabled_questions: Dictionary of enabled questions from user preferences\n            \n        Returns:\n            List of question keys in selected order",
                "name": "_select_checkin_questions_with_weighting"
              }
            ]
          },
          "communication/message_processing/interaction_manager.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [],
                "name": "CommandDefinition"
              },
              {
                "docstring": "Main manager for handling user interactions across all channels",
                "methods": [
                  "__init__",
                  "handle_message",
                  "get_slash_command_map",
                  "get_command_definitions",
                  "_handle_structured_command",
                  "_handle_contextual_chat",
                  "_enhance_response_with_ai",
                  "_get_help_response",
                  "_get_commands_response",
                  "get_available_commands",
                  "get_user_suggestions",
                  "_is_ai_command_response",
                  "_parse_ai_command_response",
                  "_is_clarification_request",
                  "_extract_intent_from_text",
                  "_is_valid_intent",
                  "_try_ai_command_parsing"
                ],
                "name": "InteractionManager"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Get the global interaction manager instance",
                "name": "get_interaction_manager"
              },
              {
                "args": [
                  "user_id",
                  "message",
                  "channel_type"
                ],
                "docstring": "Convenience function to handle a user message",
                "name": "handle_user_message"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "message",
                  "channel_type"
                ],
                "docstring": "Main entry point for handling user messages.\n        \n        Args:\n            user_id: The user's ID\n            message: The user's message\n            channel_type: Type of channel (discord, email)\n            \n        Returns:\n            InteractionResponse with appropriate response",
                "name": "handle_message"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Expose slash command mappings without coupling callers to internals.\n        Returns a dict like {'tasks': 'show my tasks', ...} suitable for Discord registration.",
                "name": "get_slash_command_map"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Return canonical command definitions: name, mapped_message, description.",
                "name": "get_command_definitions"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "parsing_result",
                  "channel_type"
                ],
                "docstring": "Handle a structured command using interaction handlers",
                "name": "_handle_structured_command"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "message",
                  "channel_type"
                ],
                "docstring": "Handle contextual chat using AI chatbot with mixed intent support",
                "name": "_handle_contextual_chat"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "response",
                  "parsed_command"
                ],
                "docstring": "Enhance a structured response with AI contextual information",
                "name": "_enhance_response_with_ai"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "message"
                ],
                "docstring": "Get a help response when command parsing fails",
                "name": "_get_help_response"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Return a concise, channel-agnostic commands list for quick discovery.",
                "name": "_get_commands_response"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Get list of available commands for the user",
                "name": "get_available_commands"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "context"
                ],
                "docstring": "Get personalized suggestions for the user",
                "name": "get_user_suggestions"
              },
              {
                "args": [
                  "self",
                  "ai_response"
                ],
                "docstring": "Check if AI response indicates this was a command",
                "name": "_is_ai_command_response"
              },
              {
                "args": [
                  "self",
                  "ai_response",
                  "original_message"
                ],
                "docstring": "Parse AI command response into ParsedCommand",
                "name": "_parse_ai_command_response"
              },
              {
                "args": [
                  "self",
                  "ai_response"
                ],
                "docstring": "Check if AI response is asking for clarification",
                "name": "_is_clarification_request"
              },
              {
                "args": [
                  "self",
                  "text"
                ],
                "docstring": "Extract intent from AI text response",
                "name": "_extract_intent_from_text"
              },
              {
                "args": [
                  "self",
                  "intent"
                ],
                "docstring": "Check if intent is supported by any handler",
                "name": "_is_valid_intent"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "message",
                  "channel_type"
                ],
                "docstring": "Attempt to parse ambiguous messages using AI command parsing.",
                "name": "_try_ai_command_parsing"
              }
            ]
          },
          "communication/message_processing/message_router.py": {
            "classes": [
              {
                "docstring": "Types of messages that can be routed",
                "methods": [],
                "name": "MessageType"
              },
              {
                "docstring": "Result of message routing",
                "methods": [],
                "name": "RoutingResult"
              },
              {
                "docstring": "Routes messages to appropriate handlers based on message type and content",
                "methods": [
                  "__init__",
                  "route_message",
                  "_route_slash_command",
                  "_route_bang_command",
                  "get_command_definitions",
                  "get_slash_command_map",
                  "get_bang_command_map",
                  "is_flow_command",
                  "get_command_mapping"
                ],
                "name": "MessageRouter"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Get the global message router instance",
                "name": "get_message_router"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the message router",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "message"
                ],
                "docstring": "Route a message to determine its type and appropriate handling.\n        \n        Args:\n            message: The user's message\n            \n        Returns:\n            RoutingResult with message type and routing information",
                "name": "route_message"
              },
              {
                "args": [
                  "self",
                  "message"
                ],
                "docstring": "Route a slash command",
                "name": "_route_slash_command"
              },
              {
                "args": [
                  "self",
                  "message"
                ],
                "docstring": "Route a bang command",
                "name": "_route_bang_command"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Return canonical command definitions",
                "name": "get_command_definitions"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get slash command mappings",
                "name": "get_slash_command_map"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get bang command mappings",
                "name": "get_bang_command_map"
              },
              {
                "args": [
                  "self",
                  "command_name"
                ],
                "docstring": "Check if a command is a flow command",
                "name": "is_flow_command"
              },
              {
                "args": [
                  "self",
                  "command_name"
                ],
                "docstring": "Get the mapped message for a command",
                "name": "get_command_mapping"
              }
            ]
          },
          "core/auto_cleanup.py": {
            "classes": [],
            "functions": [
              {
                "args": [],
                "docstring": "Get the timestamp of the last cleanup from tracker file.",
                "name": "get_last_cleanup_timestamp"
              },
              {
                "args": [],
                "docstring": "Update the cleanup tracker file with current timestamp.",
                "name": "update_cleanup_timestamp"
              },
              {
                "args": [
                  "interval_days"
                ],
                "docstring": "Check if cleanup should run based on last cleanup time.",
                "name": "should_run_cleanup"
              },
              {
                "args": [
                  "root_path"
                ],
                "docstring": "Find all __pycache__ directories recursively.",
                "name": "find_pycache_dirs"
              },
              {
                "args": [
                  "root_path"
                ],
                "docstring": "Find all .pyc files recursively.",
                "name": "find_pyc_files"
              },
              {
                "args": [
                  "pycache_dirs"
                ],
                "docstring": "Calculate total size of __pycache__ directories.",
                "name": "_calculate_cache_size__calculate_pycache_directories_size"
              },
              {
                "args": [
                  "pyc_files"
                ],
                "docstring": "Calculate total size of standalone .pyc files.",
                "name": "_calculate_cache_size__calculate_pyc_files_size"
              },
              {
                "args": [
                  "pycache_dirs",
                  "pyc_files"
                ],
                "docstring": "Calculate total size of cache files.",
                "name": "calculate_cache_size"
              },
              {
                "args": [
                  "root_path"
                ],
                "docstring": "Discover all cache files and directories in the given root path.",
                "name": "_perform_cleanup__discover_cache_files"
              },
              {
                "args": [
                  "pycache_dirs",
                  "pyc_files"
                ],
                "docstring": "Calculate total size and log discovery results.",
                "name": "_perform_cleanup__log_discovery_results"
              },
              {
                "args": [
                  "pycache_dirs",
                  "pyc_files"
                ],
                "docstring": "Remove all discovered cache directories and files.",
                "name": "_perform_cleanup__remove_cache_files"
              },
              {
                "args": [
                  "pycache_dirs"
                ],
                "docstring": "Remove all __pycache__ directories.",
                "name": "_perform_cleanup__remove_cache_directories"
              },
              {
                "args": [
                  "pyc_files"
                ],
                "docstring": "Remove all standalone .pyc files.",
                "name": "_perform_cleanup__remove_cache_files_list"
              },
              {
                "args": [
                  "removed_dirs",
                  "removed_files",
                  "total_size"
                ],
                "docstring": "Log the final cleanup results and statistics.",
                "name": "_perform_cleanup__log_completion_results"
              },
              {
                "args": [
                  "root_path"
                ],
                "docstring": "Perform the actual cleanup of cache files.",
                "name": "perform_cleanup"
              },
              {
                "args": [
                  "root_path",
                  "interval_days"
                ],
                "docstring": "Main function to check if cleanup is needed and perform it if so.\n    Returns True if cleanup was performed, False if not needed.",
                "name": "auto_cleanup_if_needed"
              },
              {
                "args": [],
                "docstring": "Archive old messages for all users during monthly cleanup.\n    This runs alongside the cache cleanup to maintain message file sizes.",
                "name": "archive_old_messages_for_all_users"
              },
              {
                "args": [],
                "docstring": "Get status when cleanup has never been performed.",
                "name": "_get_cleanup_status__get_never_cleaned_status"
              },
              {
                "args": [
                  "last_cleanup_timestamp"
                ],
                "docstring": "Calculate days since last cleanup.",
                "name": "_get_cleanup_status__calculate_days_since_cleanup"
              },
              {
                "args": [
                  "last_date"
                ],
                "docstring": "Format the next cleanup date or return 'Overdue'.",
                "name": "_get_cleanup_status__format_next_cleanup_date"
              },
              {
                "args": [
                  "last_date",
                  "days_since",
                  "next_cleanup"
                ],
                "docstring": "Build the final status response dictionary.",
                "name": "_get_cleanup_status__build_status_response"
              },
              {
                "args": [],
                "docstring": "Get information about the cleanup status.",
                "name": "get_cleanup_status"
              }
            ]
          },
          "core/backup_manager.py": {
            "classes": [
              {
                "docstring": "Manages automatic backups and rollback operations.",
                "methods": [
                  "__init__",
                  "ensure_backup_directory",
                  "_create_backup__setup_backup",
                  "_create_backup__create_zip_file",
                  "_create_backup__cleanup_old_backups",
                  "create_backup",
                  "_backup_user_data",
                  "_backup_config_files",
                  "_backup_log_files",
                  "_create_backup_manifest",
                  "_add_directory_to_zip",
                  "_cleanup_old_backups",
                  "list_backups",
                  "_get_backup_info",
                  "restore_backup",
                  "_restore_user_data",
                  "_restore_config_files",
                  "_validate_backup__check_file_exists",
                  "_validate_backup__validate_zip_file",
                  "_validate_backup__check_file_integrity",
                  "_validate_backup__validate_manifest",
                  "_validate_backup__validate_content_requirements",
                  "validate_backup"
                ],
                "name": "BackupManager"
              }
            ],
            "functions": [
              {
                "args": [
                  "operation_name"
                ],
                "docstring": "Create an automatic backup before major operations.\n    \n    Args:\n        operation_name: Name of the operation being performed\n    \n    Returns:\n        Path to the backup file, or None if failed",
                "name": "create_automatic_backup"
              },
              {
                "args": [],
                "docstring": "Validate the user index file and corresponding user directories.",
                "name": "_validate_system_state__validate_user_index"
              },
              {
                "args": [],
                "docstring": "Ensure the user data directory exists, creating it if necessary.",
                "name": "_validate_system_state__ensure_user_data_directory"
              },
              {
                "args": [],
                "docstring": "Validate the current system state for consistency.\n    \n    Returns:\n        True if system is in a valid state, False otherwise",
                "name": "validate_system_state"
              },
              {
                "args": [
                  "operation_func",
                  "*args",
                  "**kwargs"
                ],
                "docstring": "Perform an operation with automatic backup and rollback capability.\n    \n    Args:\n        operation_func: Function to perform\n        *args: Arguments for the operation function\n        **kwargs: Keyword arguments for the operation function\n    \n    Returns:\n        True if operation succeeded, False if it failed and was rolled back",
                "name": "perform_safe_operation"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the BackupManager with default settings.\n        \n        Sets up backup directory, maximum backup count, and ensures backup directory exists.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Ensure backup directory exists.",
                "name": "ensure_backup_directory"
              },
              {
                "args": [
                  "self",
                  "backup_name"
                ],
                "docstring": "Setup backup name and path parameters.",
                "name": "_create_backup__setup_backup"
              },
              {
                "args": [
                  "self",
                  "backup_path",
                  "backup_name",
                  "include_users",
                  "include_config",
                  "include_logs"
                ],
                "docstring": "Create the backup zip file with all specified components.",
                "name": "_create_backup__create_zip_file"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Clean up old backups by count and age.",
                "name": "_create_backup__cleanup_old_backups"
              },
              {
                "args": [
                  "self",
                  "backup_name",
                  "include_users",
                  "include_config",
                  "include_logs"
                ],
                "docstring": "Create a comprehensive backup of the system.\n        \n        Args:\n            backup_name: Custom name for the backup (auto-generated if None)\n            include_users: Whether to include user data\n            include_config: Whether to include configuration files\n            include_logs: Whether to include log files\n        \n        Returns:\n            Path to the backup file, or None if failed",
                "name": "create_backup"
              },
              {
                "args": [
                  "self",
                  "zipf"
                ],
                "docstring": "Backup all user data directories.",
                "name": "_backup_user_data"
              },
              {
                "args": [
                  "self",
                  "zipf"
                ],
                "docstring": "Backup configuration files.",
                "name": "_backup_config_files"
              },
              {
                "args": [
                  "self",
                  "zipf"
                ],
                "docstring": "Backup log files.",
                "name": "_backup_log_files"
              },
              {
                "args": [
                  "self",
                  "zipf",
                  "backup_name",
                  "include_users",
                  "include_config",
                  "include_logs"
                ],
                "docstring": "Create a manifest file describing the backup contents.",
                "name": "_create_backup_manifest"
              },
              {
                "args": [
                  "self",
                  "zipf",
                  "directory",
                  "zip_path"
                ],
                "docstring": "Recursively add a directory to the zip file.",
                "name": "_add_directory_to_zip"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Remove old backups by count and age retention policy.",
                "name": "_cleanup_old_backups"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "List all available backups with metadata.",
                "name": "list_backups"
              },
              {
                "args": [
                  "self",
                  "backup_path"
                ],
                "docstring": "Get information about a specific backup.",
                "name": "_get_backup_info"
              },
              {
                "args": [
                  "self",
                  "backup_path",
                  "restore_users",
                  "restore_config"
                ],
                "docstring": "Restore from a backup file.\n        \n        Args:\n            backup_path: Path to the backup file\n            restore_users: Whether to restore user data\n            restore_config: Whether to restore configuration files\n        \n        Returns:\n            True if restoration was successful, False otherwise",
                "name": "restore_backup"
              },
              {
                "args": [
                  "self",
                  "zipf"
                ],
                "docstring": "Restore user data from backup.",
                "name": "_restore_user_data"
              },
              {
                "args": [
                  "self",
                  "zipf"
                ],
                "docstring": "Restore configuration files from backup.",
                "name": "_restore_config_files"
              },
              {
                "args": [
                  "self",
                  "backup_path",
                  "errors"
                ],
                "docstring": "Check if the backup file exists and add error if not.",
                "name": "_validate_backup__check_file_exists"
              },
              {
                "args": [
                  "self",
                  "backup_path"
                ],
                "docstring": "Validate zip file integrity and contents.",
                "name": "_validate_backup__validate_zip_file"
              },
              {
                "args": [
                  "self",
                  "zipf",
                  "errors"
                ],
                "docstring": "Check if the zip file is not corrupted.",
                "name": "_validate_backup__check_file_integrity"
              },
              {
                "args": [
                  "self",
                  "zipf",
                  "errors"
                ],
                "docstring": "Validate the backup manifest file.",
                "name": "_validate_backup__validate_manifest"
              },
              {
                "args": [
                  "self",
                  "zipf",
                  "errors"
                ],
                "docstring": "Validate that backup contains required content.",
                "name": "_validate_backup__validate_content_requirements"
              },
              {
                "args": [
                  "self",
                  "backup_path"
                ],
                "docstring": "Validate a backup file for integrity and completeness.\n        \n        Args:\n            backup_path: Path to the backup file\n        \n        Returns:\n            Tuple of (is_valid, list_of_errors)",
                "name": "validate_backup"
              }
            ]
          },
          "core/checkin_analytics.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "__init__",
                  "get_mood_trends",
                  "get_habit_analysis",
                  "get_sleep_analysis",
                  "get_wellness_score",
                  "get_checkin_history",
                  "get_quantitative_summaries",
                  "get_completion_rate",
                  "get_task_weekly_stats",
                  "_get_mood_distribution",
                  "_calculate_streak",
                  "_get_habit_status",
                  "_calculate_overall_completion",
                  "_calculate_sleep_consistency",
                  "_get_sleep_recommendations",
                  "_calculate_mood_score",
                  "_calculate_habit_score",
                  "_calculate_sleep_score",
                  "_get_score_level",
                  "_get_wellness_recommendations"
                ],
                "name": "CheckinAnalytics"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the CheckinAnalytics instance.\n        \n        This class provides analytics and insights from check-in data.",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "days"
                ],
                "docstring": "Analyze mood trends over the specified period",
                "name": "get_mood_trends"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "days"
                ],
                "docstring": "Analyze habit patterns from check-in data",
                "name": "get_habit_analysis"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "days"
                ],
                "docstring": "Analyze sleep patterns from check-in data",
                "name": "get_sleep_analysis"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "days"
                ],
                "docstring": "Calculate overall wellness score from check-in data",
                "name": "get_wellness_score"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "days"
                ],
                "docstring": "Get check-in history with proper date formatting",
                "name": "get_checkin_history"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "days",
                  "enabled_fields"
                ],
                "docstring": "Compute per-field averages and ranges for opted-in quantitative fields.\n\n        Parameters:\n            user_id: target user\n            days: number of recent check-ins to analyze\n            enabled_fields: list of fields to include (e.g., ['mood','energy','stress','sleep_quality','anxiety'])\n\n        Returns mapping: { field: { 'average': float, 'min': float, 'max': float, 'count': int } }\n        Only includes fields that appear in the data and are in enabled_fields if provided.",
                "name": "get_quantitative_summaries"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "days"
                ],
                "docstring": "Calculate overall completion rate for check-ins",
                "name": "get_completion_rate"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "days"
                ],
                "docstring": "Calculate weekly statistics for tasks",
                "name": "get_task_weekly_stats"
              },
              {
                "args": [
                  "self",
                  "moods"
                ],
                "docstring": "Calculate distribution of mood scores",
                "name": "_get_mood_distribution"
              },
              {
                "args": [
                  "self",
                  "checkins",
                  "habit_key"
                ],
                "docstring": "Calculate current and best streaks for a habit",
                "name": "_calculate_streak"
              },
              {
                "args": [
                  "self",
                  "completion_rate"
                ],
                "docstring": "Get status description for habit completion rate",
                "name": "_get_habit_status"
              },
              {
                "args": [
                  "self",
                  "habit_stats"
                ],
                "docstring": "Calculate overall habit completion rate",
                "name": "_calculate_overall_completion"
              },
              {
                "args": [
                  "self",
                  "hours"
                ],
                "docstring": "Calculate sleep consistency (lower variance = more consistent)",
                "name": "_calculate_sleep_consistency"
              },
              {
                "args": [
                  "self",
                  "avg_hours",
                  "avg_quality",
                  "poor_days"
                ],
                "docstring": "Generate sleep recommendations",
                "name": "_get_sleep_recommendations"
              },
              {
                "args": [
                  "self",
                  "checkins"
                ],
                "docstring": "Calculate mood score (0-100)",
                "name": "_calculate_mood_score"
              },
              {
                "args": [
                  "self",
                  "checkins"
                ],
                "docstring": "Calculate habit score (0-100)",
                "name": "_calculate_habit_score"
              },
              {
                "args": [
                  "self",
                  "checkins"
                ],
                "docstring": "Calculate sleep score (0-100)",
                "name": "_calculate_sleep_score"
              },
              {
                "args": [
                  "self",
                  "score"
                ],
                "docstring": "Get wellness score level description",
                "name": "_get_score_level"
              },
              {
                "args": [
                  "self",
                  "mood_score",
                  "habit_score",
                  "sleep_score"
                ],
                "docstring": "Generate wellness recommendations based on component scores",
                "name": "_get_wellness_recommendations"
              }
            ]
          },
          "core/checkin_dynamic_manager.py": {
            "classes": [
              {
                "docstring": "Manages dynamic check-in questions and responses loaded from JSON files.",
                "methods": [
                  "__init__",
                  "_load_data",
                  "get_question_definition",
                  "get_all_questions",
                  "get_question_text",
                  "get_question_type",
                  "get_question_validation",
                  "get_response_statement",
                  "get_transition_phrase",
                  "build_next_question_with_response",
                  "validate_answer",
                  "get_enabled_questions_for_ui",
                  "get_categories"
                ],
                "name": "DynamicCheckinManager"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the dynamic check-in manager.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load questions and responses data from JSON files.",
                "name": "_load_data"
              },
              {
                "args": [
                  "self",
                  "question_key"
                ],
                "docstring": "Get the definition for a specific question.",
                "name": "get_question_definition"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get all question definitions.",
                "name": "get_all_questions"
              },
              {
                "args": [
                  "self",
                  "question_key"
                ],
                "docstring": "Get the question text for a specific question.",
                "name": "get_question_text"
              },
              {
                "args": [
                  "self",
                  "question_key"
                ],
                "docstring": "Get the type of a specific question.",
                "name": "get_question_type"
              },
              {
                "args": [
                  "self",
                  "question_key"
                ],
                "docstring": "Get validation rules for a specific question.",
                "name": "get_question_validation"
              },
              {
                "args": [
                  "self",
                  "question_key",
                  "answer_value"
                ],
                "docstring": "Get a random response statement for a question answer.",
                "name": "get_response_statement"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get a random transition phrase.",
                "name": "get_transition_phrase"
              },
              {
                "args": [
                  "self",
                  "question_key",
                  "previous_question_key",
                  "previous_answer"
                ],
                "docstring": "Build the next question text with a response statement from the previous answer.",
                "name": "build_next_question_with_response"
              },
              {
                "args": [
                  "self",
                  "question_key",
                  "answer"
                ],
                "docstring": "Validate an answer for a specific question.",
                "name": "validate_answer"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get questions formatted for UI display with enabled_by_default status.",
                "name": "get_enabled_questions_for_ui"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get all question categories.",
                "name": "get_categories"
              }
            ]
          },
          "core/config.py": {
            "classes": [
              {
                "docstring": "Custom exception for configuration validation errors with detailed information.",
                "methods": [
                  "__init__"
                ],
                "name": "ConfigValidationError"
              }
            ],
            "functions": [
              {
                "args": [
                  "value"
                ],
                "docstring": "Normalize path strings from environment to avoid Windows escape issues.\n    - Removes CR/LF control chars\n    - Strips surrounding quotes\n    - Normalizes separators to OS-specific",
                "name": "_normalize_path"
              },
              {
                "args": [],
                "docstring": "Get list of available communication channels based on configuration.\n    \n    Returns:\n        List[str]: List of available channel names that can be used with ChannelFactory",
                "name": "get_available_channels"
              },
              {
                "args": [],
                "docstring": "Get mapping of channel names to their class names for dynamic imports.\n    \n    Returns:\n        Dict[str, str]: Mapping of channel name to fully qualified class name",
                "name": "get_channel_class_mapping"
              },
              {
                "args": [],
                "docstring": "Validate that all core paths are accessible and can be created if needed.",
                "name": "validate_core_paths"
              },
              {
                "args": [],
                "docstring": "Validate AI-related configuration settings.",
                "name": "validate_ai_configuration"
              },
              {
                "args": [],
                "docstring": "Validate communication channel configurations.",
                "name": "validate_communication_channels"
              },
              {
                "args": [],
                "docstring": "Validate logging configuration.",
                "name": "validate_logging_configuration"
              },
              {
                "args": [],
                "docstring": "Validate scheduler configuration.",
                "name": "validate_scheduler_configuration"
              },
              {
                "args": [],
                "docstring": "Validate file organization settings.",
                "name": "validate_file_organization_settings"
              },
              {
                "args": [],
                "docstring": "Check for common environment variable issues.",
                "name": "validate_environment_variables"
              },
              {
                "args": [],
                "docstring": "Comprehensive configuration validation that checks all aspects of the configuration.\n    \n    Returns:\n        Dict containing validation results with the following structure:\n        {\n            'valid': bool,\n            'errors': List[str],\n            'warnings': List[str],\n            'available_channels': List[str],\n            'summary': str\n        }",
                "name": "validate_all_configuration"
              },
              {
                "args": [],
                "docstring": "Validate configuration and raise ConfigValidationError if invalid.\n    \n    Returns:\n        List of available communication channels if validation passes.\n    \n    Raises:\n        ConfigValidationError: If configuration is invalid with detailed error information.",
                "name": "validate_and_raise_if_invalid"
              },
              {
                "args": [],
                "docstring": "Print a detailed configuration report to the console.",
                "name": "print_configuration_report"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Get the data directory for a specific user.",
                "name": "get_user_data_dir"
              },
              {
                "args": [],
                "docstring": "Get the backups directory, redirected under tests when MHM_TESTING=1.\n    Returns tests/data/backups if testing, otherwise BASE_DATA_DIR/backups.",
                "name": "get_backups_dir"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "Get the file path for a specific user file type.",
                "name": "get_user_file_path"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Ensure user directory exists if using subdirectories.",
                "name": "ensure_user_directory"
              },
              {
                "args": [],
                "docstring": "Validate email configuration settings.\n    \n    Returns:\n        bool: True if email configuration is valid\n        \n    Raises:\n        ConfigurationError: If required email configuration variables are missing",
                "name": "validate_email_config"
              },
              {
                "args": [],
                "docstring": "Validate Discord configuration settings.\n    \n    Returns:\n        bool: True if Discord configuration is valid\n        \n    Raises:\n        ConfigurationError: If DISCORD_BOT_TOKEN is missing",
                "name": "validate_discord_config"
              },
              {
                "args": [],
                "docstring": "Ensure at least one communication channel is configured",
                "name": "validate_minimum_config"
              },
              {
                "args": [
                  "self",
                  "message",
                  "missing_configs",
                  "warnings"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              }
            ]
          },
          "core/error_handling.py": {
            "classes": [
              {
                "docstring": "Base exception for all MHM-specific errors.",
                "methods": [
                  "__init__"
                ],
                "name": "MHMError"
              },
              {
                "docstring": "Raised when there are issues with data files or data integrity.",
                "methods": [],
                "name": "DataError"
              },
              {
                "docstring": "Raised when file operations fail.",
                "methods": [],
                "name": "FileOperationError"
              },
              {
                "docstring": "Raised when configuration is invalid or missing.",
                "methods": [],
                "name": "ConfigurationError"
              },
              {
                "docstring": "Raised when communication channels fail.",
                "methods": [],
                "name": "CommunicationError"
              },
              {
                "docstring": "Raised when scheduler operations fail.",
                "methods": [],
                "name": "SchedulerError"
              },
              {
                "docstring": "Raised when UI operations fail.",
                "methods": [],
                "name": "UserInterfaceError"
              },
              {
                "docstring": "Raised when AI operations fail.",
                "methods": [],
                "name": "AIError"
              },
              {
                "docstring": "Raised when data validation fails.",
                "methods": [],
                "name": "ValidationError"
              },
              {
                "docstring": "Raised when error recovery fails.",
                "methods": [],
                "name": "RecoveryError"
              },
              {
                "docstring": "Base class for error recovery strategies.",
                "methods": [
                  "__init__",
                  "can_handle",
                  "recover"
                ],
                "name": "ErrorRecoveryStrategy"
              },
              {
                "docstring": "Recovery strategy for missing files.",
                "methods": [
                  "__init__",
                  "can_handle",
                  "recover",
                  "_get_default_data"
                ],
                "name": "FileNotFoundRecovery"
              },
              {
                "docstring": "Recovery strategy for corrupted JSON files.",
                "methods": [
                  "__init__",
                  "can_handle",
                  "recover",
                  "_get_default_data"
                ],
                "name": "JSONDecodeRecovery"
              },
              {
                "docstring": "Recovery strategy for network-related errors.",
                "methods": [
                  "__init__",
                  "can_handle",
                  "recover"
                ],
                "name": "NetworkRecovery"
              },
              {
                "docstring": "Recovery strategy for configuration-related errors.",
                "methods": [
                  "__init__",
                  "can_handle",
                  "recover"
                ],
                "name": "ConfigurationRecovery"
              },
              {
                "docstring": "Centralized error handler for MHM.",
                "methods": [
                  "__init__",
                  "handle_error",
                  "_log_error",
                  "_show_user_error",
                  "_get_user_friendly_message"
                ],
                "name": "ErrorHandler"
              },
              {
                "docstring": "Context manager for safe file operations.",
                "methods": [
                  "__init__",
                  "__enter__",
                  "__exit__"
                ],
                "name": "SafeFileContext"
              }
            ],
            "functions": [
              {
                "args": [
                  "operation",
                  "context",
                  "user_friendly",
                  "default_return"
                ],
                "docstring": "Decorator to automatically handle errors in functions.\n    \n    Args:\n        operation: Description of the operation (defaults to function name)\n        context: Additional context to pass to error handler\n        user_friendly: Whether to show user-friendly error messages\n        default_return: Value to return if error occurs and can't be recovered",
                "name": "handle_errors"
              },
              {
                "args": [
                  "file_path",
                  "operation",
                  "user_id",
                  "category"
                ],
                "docstring": "Context manager for safe file operations with automatic error handling.\n    \n    Usage:\n        with safe_file_operation(\"path/to/file.json\", \"loading user data\", user_id=\"123\"):\n            # file operations here",
                "name": "safe_file_operation"
              },
              {
                "args": [
                  "error",
                  "file_path",
                  "operation",
                  "user_id",
                  "category"
                ],
                "docstring": "Convenience function for handling file-related errors.",
                "name": "handle_file_error"
              },
              {
                "args": [
                  "error",
                  "channel",
                  "operation",
                  "user_id"
                ],
                "docstring": "Convenience function for handling communication errors.",
                "name": "handle_communication_error"
              },
              {
                "args": [
                  "error",
                  "setting",
                  "operation"
                ],
                "docstring": "Convenience function for handling configuration errors.",
                "name": "handle_configuration_error"
              },
              {
                "args": [
                  "error",
                  "operation",
                  "user_id"
                ],
                "docstring": "Convenience function for handling network errors.",
                "name": "handle_network_error"
              },
              {
                "args": [
                  "error",
                  "field",
                  "operation",
                  "user_id"
                ],
                "docstring": "Convenience function for handling validation errors.",
                "name": "handle_validation_error"
              },
              {
                "args": [
                  "error",
                  "operation",
                  "user_id"
                ],
                "docstring": "Convenience function for handling AI-related errors.",
                "name": "handle_ai_error"
              },
              {
                "args": [
                  "self",
                  "message",
                  "details",
                  "recoverable"
                ],
                "docstring": "Initialize a new MHM error.\n        \n        Args:\n            message: Human-readable error message\n            details: Optional dictionary with additional error details\n            recoverable: Whether this error can be recovered from",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "name",
                  "description"
                ],
                "docstring": "Initialize an error recovery strategy.\n        \n        Args:\n            name: The name of the recovery strategy\n            description: A description of what this strategy does",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "error"
                ],
                "docstring": "Check if this strategy can handle the given error.",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "error",
                  "context"
                ],
                "docstring": "Attempt to recover from the error. Returns True if successful.",
                "name": "recover"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the FileNotFoundRecovery strategy.",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "error"
                ],
                "docstring": "Check if this strategy can handle the given error.\n        \n        Args:\n            error: The exception to check\n            \n        Returns:\n            True if this strategy can handle FileNotFoundError or file operation errors containing \"not found\"",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "error",
                  "context"
                ],
                "docstring": "Attempt to recover from the error by creating missing files with default data.\n        \n        Args:\n            error: The exception that occurred\n            context: Additional context containing file_path and other relevant information\n            \n        Returns:\n            True if recovery was successful, False otherwise",
                "name": "recover"
              },
              {
                "args": [
                  "self",
                  "file_path",
                  "context"
                ],
                "docstring": "Get appropriate default data based on file type.",
                "name": "_get_default_data"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the JSONDecodeRecovery strategy.",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "error"
                ],
                "docstring": "Check if this strategy can handle the given error.\n        \n        Args:\n            error: The exception to check\n            \n        Returns:\n            True if this strategy can handle JSON decode errors or JSON-related file operation errors",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "error",
                  "context"
                ],
                "docstring": "Attempt to recover from the error by recreating corrupted JSON files.\n        \n        Args:\n            error: The exception that occurred\n            context: Additional context containing file_path and other relevant information\n            \n        Returns:\n            True if recovery was successful, False otherwise",
                "name": "recover"
              },
              {
                "args": [
                  "self",
                  "file_path",
                  "context"
                ],
                "docstring": "Get appropriate default data based on file type.",
                "name": "_get_default_data"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the NetworkRecovery strategy.",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "error"
                ],
                "docstring": "Check if this strategy can handle the given error.\n        \n        Args:\n            error: The exception to check\n            \n        Returns:\n            True if this strategy can handle network-related errors",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "error",
                  "context"
                ],
                "docstring": "Attempt to recover from network errors by waiting and retrying.\n        \n        Args:\n            error: The exception that occurred\n            context: Additional context containing operation details\n            \n        Returns:\n            True if recovery was successful, False otherwise",
                "name": "recover"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the ConfigurationRecovery strategy.",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "error"
                ],
                "docstring": "Check if this strategy can handle the given error.\n        \n        Args:\n            error: The exception to check\n            \n        Returns:\n            True if this strategy can handle configuration-related errors",
                "name": "can_handle"
              },
              {
                "args": [
                  "self",
                  "error",
                  "context"
                ],
                "docstring": "Attempt to recover from configuration errors by using default values.\n        \n        Args:\n            error: The exception that occurred\n            context: Additional context containing configuration details\n            \n        Returns:\n            True if recovery was successful, False otherwise",
                "name": "recover"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the ErrorHandler with default recovery strategies.\n        \n        Sets up recovery strategies for common error types like missing files and corrupted JSON.",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "error",
                  "context",
                  "operation",
                  "user_friendly"
                ],
                "docstring": "Handle an error with recovery strategies and logging.\n        \n        Args:\n            error: The exception that occurred\n            context: Additional context about the error\n            operation: Description of the operation that failed\n            user_friendly: Whether to show user-friendly error messages\n            \n        Returns:\n            True if error was recovered from, False otherwise",
                "name": "handle_error"
              },
              {
                "args": [
                  "self",
                  "error",
                  "context"
                ],
                "docstring": "Log error with context.",
                "name": "_log_error"
              },
              {
                "args": [
                  "self",
                  "error",
                  "context",
                  "custom_message"
                ],
                "docstring": "Show user-friendly error message.",
                "name": "_show_user_error"
              },
              {
                "args": [
                  "self",
                  "error",
                  "context"
                ],
                "docstring": "Convert technical error to user-friendly message.",
                "name": "_get_user_friendly_message"
              },
              {
                "args": [
                  "func"
                ],
                "docstring": "",
                "name": "decorator"
              },
              {
                "args": [
                  "*args",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "wrapper"
              },
              {
                "args": [
                  "self",
                  "file_path",
                  "operation",
                  "user_id",
                  "category"
                ],
                "docstring": "Initialize the safe file context.\n            \n            Args:\n                file_path: Path to the file being operated on\n                operation: Description of the operation being performed\n                user_id: ID of the user performing the operation\n                category: Category of the operation",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Enter the context manager for safe file operations.\n            \n            Returns:\n                self: The SafeFileContext instance",
                "name": "__enter__"
              },
              {
                "args": [
                  "self",
                  "exc_type",
                  "exc_val",
                  "exc_tb"
                ],
                "docstring": "Exit the context manager and handle any exceptions.\n            \n            Args:\n                exc_type: Type of exception if any occurred\n                exc_val: Exception value if any occurred\n                exc_tb: Exception traceback if any occurred",
                "name": "__exit__"
              }
            ]
          },
          "core/file_auditor.py": {
            "classes": [
              {
                "docstring": "Auditor for tracking file creation and modification patterns.",
                "methods": [
                  "__init__",
                  "_get_audit_directories",
                  "start",
                  "stop"
                ],
                "name": "FileAuditor"
              },
              {
                "docstring": "",
                "methods": [
                  "info",
                  "warning",
                  "debug",
                  "error",
                  "critical"
                ],
                "name": "_DummyLogger"
              }
            ],
            "functions": [
              {
                "args": [
                  "value"
                ],
                "docstring": "",
                "name": "_split_env_list"
              },
              {
                "args": [
                  "path"
                ],
                "docstring": "",
                "name": "_classify_path"
              },
              {
                "args": [],
                "docstring": "",
                "name": "start_auditor"
              },
              {
                "args": [],
                "docstring": "",
                "name": "stop_auditor"
              },
              {
                "args": [
                  "path",
                  "reason",
                  "extra"
                ],
                "docstring": "Programmatically record a file creation event.\n\n    Safe to call even if auditor disabled. Includes optional stack if FILE_AUDIT_STACK=1.",
                "name": "record_created"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get configurable audit directories from environment or use defaults.",
                "name": "_get_audit_directories"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Start the file auditor (no-op for now).",
                "name": "start"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Stop the file auditor (no-op for now).",
                "name": "stop"
              },
              {
                "args": [
                  "self",
                  "*args",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "info"
              },
              {
                "args": [
                  "self",
                  "*args",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "warning"
              },
              {
                "args": [
                  "self",
                  "*args",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "debug"
              },
              {
                "args": [
                  "self",
                  "*args",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "error"
              },
              {
                "args": [
                  "self",
                  "*args",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "critical"
              }
            ]
          },
          "core/file_operations.py": {
            "classes": [],
            "functions": [
              {
                "args": [
                  "paths"
                ],
                "docstring": "Verify that files exist and are accessible.\n    \n    Args:\n        paths: List of file paths to verify\n        \n    Raises:\n        FileOperationError: If any file is not found or inaccessible",
                "name": "verify_file_access"
              },
              {
                "args": [
                  "file_type",
                  "identifier"
                ],
                "docstring": "Determine file path based on file type and identifier.\n    Updated to support new organized structure.\n    \n    Args:\n        file_type: Type of file ('users', 'messages', 'schedules', 'sent_messages', 'default_messages', 'tasks')\n        identifier: Identifier for the file (format depends on file_type)\n        \n    Returns:\n        str: Full file path\n        \n    Raises:\n        FileOperationError: If file_type is unknown or identifier format is invalid",
                "name": "determine_file_path"
              },
              {
                "args": [
                  "file_path"
                ],
                "docstring": "Load data from a JSON file with comprehensive error handling and auto-create user files if missing.\n    \n    Args:\n        file_path: Path to the JSON file to load\n        \n    Returns:\n        dict/list: Loaded JSON data, or None if loading failed",
                "name": "load_json_data"
              },
              {
                "args": [
                  "data",
                  "file_path"
                ],
                "docstring": "Save data to a JSON file with comprehensive error handling.\n    \n    Args:\n        data: Data to save (must be JSON serializable)\n        file_path: Path where to save the file\n        \n    Returns:\n        bool: True if successful, False if failed\n        \n    Raises:\n        FileOperationError: If saving fails",
                "name": "save_json_data"
              },
              {
                "args": [
                  "user_id",
                  "categories",
                  "user_preferences"
                ],
                "docstring": "Creates files for a new user in the appropriate structure.\n    Ensures schedules.json contains a block for each category, plus checkin and task reminder blocks.\n    \n    Args:\n        user_id: The user ID\n        categories: List of message categories the user is opted into\n        user_preferences: Optional user preferences dict to determine which files to create",
                "name": "create_user_files"
              },
              {
                "args": [
                  "user_prefs"
                ],
                "docstring": "Determine which features are enabled based on user preferences.\n    \n    Args:\n        user_prefs: User preferences dictionary\n        \n    Returns:\n        tuple: (tasks_enabled, checkins_enabled)",
                "name": "_create_user_files__determine_feature_enablement"
              },
              {
                "args": [
                  "user_id",
                  "user_prefs",
                  "categories",
                  "tasks_enabled",
                  "checkins_enabled"
                ],
                "docstring": "Create account.json with actual user data.",
                "name": "_create_user_files__account_file"
              },
              {
                "args": [
                  "user_id",
                  "user_prefs",
                  "categories",
                  "tasks_enabled",
                  "checkins_enabled"
                ],
                "docstring": "Create preferences.json with actual user data.",
                "name": "_create_user_files__preferences_file"
              },
              {
                "args": [
                  "user_id",
                  "user_prefs"
                ],
                "docstring": "Create user_context.json with actual personalization data.",
                "name": "_create_user_files__context_file"
              },
              {
                "args": [
                  "user_id",
                  "categories",
                  "user_prefs",
                  "tasks_enabled",
                  "checkins_enabled"
                ],
                "docstring": "Create schedules file with appropriate structure.",
                "name": "_create_user_files__schedules_file"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Initialize empty log files if they don't exist.",
                "name": "_create_user_files__log_files"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Create sent_messages.json in messages/ subdirectory.",
                "name": "_create_user_files__sent_messages_file"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Create task files if tasks are enabled.",
                "name": "_create_user_files__task_files"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Create checkins.json only if checkins are enabled.",
                "name": "_create_user_files__checkins_file"
              },
              {
                "args": [
                  "user_id",
                  "categories"
                ],
                "docstring": "Create message files for each enabled category directly.",
                "name": "_create_user_files__message_files"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Auto-update message references and user index.",
                "name": "_create_user_files__update_user_references"
              }
            ]
          },
          "core/logger.py": {
            "classes": [
              {
                "docstring": "Custom formatter that automatically prepends test names to log messages.",
                "methods": [
                  "format"
                ],
                "name": "TestContextFormatter"
              },
              {
                "docstring": "Component-specific logger that writes to dedicated log files.\n    \n    Each component gets its own log file with appropriate rotation and formatting.",
                "methods": [
                  "__init__",
                  "debug",
                  "info",
                  "warning",
                  "error",
                  "critical",
                  "_log"
                ],
                "name": "ComponentLogger"
              },
              {
                "docstring": "Custom rotating file handler that moves rotated files to a backup directory.\n    Supports both time-based and size-based rotation.",
                "methods": [
                  "__init__",
                  "shouldRollover",
                  "doRollover"
                ],
                "name": "BackupDirectoryRotatingFileHandler"
              },
              {
                "docstring": "Filter to suppress excessive Discord heartbeat warnings while keeping track of them.\n    \n    - Allows first 3 heartbeat warnings to pass through\n    - Suppresses subsequent warnings for 10 minutes\n    - Logs a summary every hour with total count",
                "methods": [
                  "__init__",
                  "filter"
                ],
                "name": "HeartbeatWarningFilter"
              },
              {
                "docstring": "Filter to exclude records for specific logger name prefixes.\n    Example use: prevent Discord-related logs from going to app.log.",
                "methods": [
                  "__init__",
                  "filter"
                ],
                "name": "ExcludeLoggerNamesFilter"
              },
              {
                "docstring": "",
                "methods": [
                  "__init__"
                ],
                "name": "_DummyLogger"
              },
              {
                "docstring": "",
                "methods": [
                  "__init__",
                  "debug",
                  "info",
                  "warning",
                  "error",
                  "critical"
                ],
                "name": "DummyComponentLogger"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Check if we're running in a testing environment.",
                "name": "_is_testing_environment"
              },
              {
                "args": [],
                "docstring": "Apply TestContextFormatter to all existing loggers when in test mode.",
                "name": "apply_test_context_formatter_to_all_loggers"
              },
              {
                "args": [],
                "docstring": "Get appropriate log paths based on the current environment.",
                "name": "_get_log_paths_for_environment"
              },
              {
                "args": [],
                "docstring": "Get log level from environment variable, default to WARNING for quiet mode.\n    \n    Returns:\n        int: Logging level constant (e.g., logging.WARNING, logging.DEBUG)",
                "name": "get_log_level_from_env"
              },
              {
                "args": [],
                "docstring": "Ensure the logs directory structure exists.",
                "name": "ensure_logs_directory"
              },
              {
                "args": [
                  "component_name"
                ],
                "docstring": "Get or create a component-specific logger.\n    \n    Args:\n        component_name: Name of the component (e.g., 'discord', 'ai', 'user_activity')\n    \n    Returns:\n        ComponentLogger: Logger for the specified component",
                "name": "get_component_logger"
              },
              {
                "args": [],
                "docstring": "Set up logging with file and console handlers. Ensure it is called only once.\n    \n    Creates a dual-handler logging system:\n    - File handler: Always logs at DEBUG level with rotation\n    - Console handler: Respects verbosity settings (WARNING by default)\n    \n    Automatically suppresses noisy third-party library logging.",
                "name": "setup_logging"
              },
              {
                "args": [],
                "docstring": "Set up dedicated error logging for third-party libraries.\n    \n    Routes ERROR and CRITICAL messages from asyncio, discord, and aiohttp\n    to the errors.log file instead of app.log.",
                "name": "setup_third_party_error_logging"
              },
              {
                "args": [
                  "name"
                ],
                "docstring": "Get a logger with the specified name.\n    \n    Args:\n        name: Logger name (usually __name__)\n    \n    Returns:\n        logging.Logger: Configured logger",
                "name": "get_logger"
              },
              {
                "args": [],
                "docstring": "Suppress excessive logging from third-party libraries.\n    \n    Sets logging level to WARNING for common noisy libraries to reduce log spam\n    while keeping important warnings and errors visible.",
                "name": "suppress_noisy_logging"
              },
              {
                "args": [
                  "level"
                ],
                "docstring": "Set the console logging level while keeping file logging at DEBUG.\n    \n    Args:\n        level: logging level (e.g., logging.DEBUG, logging.INFO, logging.WARNING)",
                "name": "set_console_log_level"
              },
              {
                "args": [],
                "docstring": "Toggle between verbose (DEBUG/INFO) and quiet (WARNING+) logging for console output.\n    File logging always remains at DEBUG level.\n    \n    Returns:\n        bool: True if verbose mode is now enabled, False if quiet mode",
                "name": "toggle_verbose_logging"
              },
              {
                "args": [],
                "docstring": "Get current verbose mode status.\n    \n    Returns:\n        bool: True if verbose mode is enabled",
                "name": "get_verbose_mode"
              },
              {
                "args": [
                  "enabled"
                ],
                "docstring": "Explicitly set verbose mode.\n    \n    Args:\n        enabled (bool): True to enable verbose mode, False for quiet mode",
                "name": "set_verbose_mode"
              },
              {
                "args": [
                  "module_name"
                ],
                "docstring": "Disable debug logging for a specific module.\n    \n    Args:\n        module_name: Name of the module to disable debug logging for",
                "name": "disable_module_logging"
              },
              {
                "args": [],
                "docstring": "Get information about current log files and their sizes.\n    \n    Returns:\n        dict: Information about log files including total size and file count",
                "name": "get_log_file_info"
              },
              {
                "args": [
                  "max_total_size_mb"
                ],
                "docstring": "Clean up old log files if total size exceeds the limit.\n    \n    Args:\n        max_total_size_mb (int): Maximum total size in MB before cleanup (default 50MB)\n    \n    Returns:\n        bool: True if cleanup was performed, False otherwise",
                "name": "cleanup_old_logs"
              },
              {
                "args": [],
                "docstring": "Compress log files older than 7 days and move them to archive directory.\n    \n    Returns:\n        int: Number of files compressed and archived",
                "name": "compress_old_logs"
              },
              {
                "args": [
                  "max_days"
                ],
                "docstring": "Remove archived log files older than specified days.\n    \n    Args:\n        max_days (int): Maximum age in days for archived files (default 30)\n    \n    Returns:\n        int: Number of files removed",
                "name": "cleanup_old_archives"
              },
              {
                "args": [],
                "docstring": "Force restart the logging system by clearing all handlers and reinitializing.\n    \n    Useful when logging configuration becomes corrupted or needs to be reset.\n    \n    Returns:\n        bool: True if restart was successful, False otherwise",
                "name": "force_restart_logging"
              },
              {
                "args": [],
                "docstring": "Clear any file locks that might be preventing log rotation.\n    \n    This function attempts to handle Windows file locking issues by:\n    1. Temporarily disabling log rotation\n    2. Closing all log file handlers\n    3. Reopening them with fresh file handles\n    \n    Returns:\n        bool: True if locks were cleared successfully, False otherwise",
                "name": "clear_log_file_locks"
              },
              {
                "args": [
                  "self",
                  "record"
                ],
                "docstring": "",
                "name": "format"
              },
              {
                "args": [
                  "self",
                  "component_name",
                  "log_file_path",
                  "level"
                ],
                "docstring": "",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "message",
                  "**kwargs"
                ],
                "docstring": "Log debug message with optional structured data.",
                "name": "debug"
              },
              {
                "args": [
                  "self",
                  "message",
                  "**kwargs"
                ],
                "docstring": "Log info message with optional structured data.",
                "name": "info"
              },
              {
                "args": [
                  "self",
                  "message",
                  "**kwargs"
                ],
                "docstring": "Log warning message with optional structured data.",
                "name": "warning"
              },
              {
                "args": [
                  "self",
                  "message",
                  "**kwargs"
                ],
                "docstring": "Log error message with optional structured data.",
                "name": "error"
              },
              {
                "args": [
                  "self",
                  "message",
                  "**kwargs"
                ],
                "docstring": "Log critical message with optional structured data.",
                "name": "critical"
              },
              {
                "args": [
                  "self",
                  "level",
                  "message",
                  "**kwargs"
                ],
                "docstring": "Internal logging method with structured data support.",
                "name": "_log"
              },
              {
                "args": [
                  "self",
                  "filename",
                  "backup_dir",
                  "maxBytes",
                  "backupCount",
                  "encoding",
                  "delay",
                  "when",
                  "interval"
                ],
                "docstring": "",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "record"
                ],
                "docstring": "Determine if rollover should occur based on both time and size.",
                "name": "shouldRollover"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Do a rollover, as described in __init__().",
                "name": "doRollover"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "record"
                ],
                "docstring": "",
                "name": "filter"
              },
              {
                "args": [
                  "self",
                  "excluded_prefixes"
                ],
                "docstring": "",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "record"
                ],
                "docstring": "",
                "name": "filter"
              },
              {
                "args": [
                  "self",
                  "name"
                ],
                "docstring": "",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "name"
                ],
                "docstring": "",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "message",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "debug"
              },
              {
                "args": [
                  "self",
                  "message",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "info"
              },
              {
                "args": [
                  "self",
                  "message",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "warning"
              },
              {
                "args": [
                  "self",
                  "message",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "error"
              },
              {
                "args": [
                  "self",
                  "message",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "critical"
              }
            ]
          },
          "core/message_management.py": {
            "classes": [],
            "functions": [
              {
                "args": [],
                "docstring": "Retrieves message categories from the environment variable CATEGORIES.\n    Allows for either a comma-separated string or a JSON array.\n    \n    Returns:\n        List[str]: List of message categories",
                "name": "get_message_categories"
              },
              {
                "args": [
                  "category"
                ],
                "docstring": "Load default messages for a specific category.",
                "name": "load_default_messages"
              },
              {
                "args": [
                  "user_id",
                  "category",
                  "message_data",
                  "index"
                ],
                "docstring": "Add a new message to a user's category.\n    \n    Args:\n        user_id: The user ID\n        category: The message category\n        message_data: Dictionary containing message data\n        index: Optional position to insert the message (None for append)",
                "name": "add_message"
              },
              {
                "args": [
                  "user_id",
                  "category",
                  "message_id",
                  "updated_data"
                ],
                "docstring": "Edit an existing message in a user's category.\n    \n    Args:\n        user_id: The user ID\n        category: The message category\n        message_id: The ID of the message to edit\n        updated_data: Dictionary containing updated message data\n        \n    Raises:\n        ValidationError: If message ID is not found or category is invalid",
                "name": "edit_message"
              },
              {
                "args": [
                  "user_id",
                  "category",
                  "message_id",
                  "new_message_data"
                ],
                "docstring": "Update a message by its message_id.\n    \n    Args:\n        user_id: The user ID\n        category: The message category\n        message_id: The ID of the message to update\n        new_message_data: Complete new message data to replace the existing message\n        \n    Raises:\n        ValidationError: If message ID is not found or category is invalid",
                "name": "update_message"
              },
              {
                "args": [
                  "user_id",
                  "category",
                  "message_id"
                ],
                "docstring": "Delete a specific message from a user's category.\n    \n    Args:\n        user_id: The user ID\n        category: The message category\n        message_id: The ID of the message to delete\n        \n    Raises:\n        ValidationError: If the message ID is not found or the category is invalid",
                "name": "delete_message"
              },
              {
                "args": [
                  "user_id",
                  "category",
                  "limit",
                  "days_back"
                ],
                "docstring": "Get recent messages with flexible filtering.\n    \n    This function replaces get_last_10_messages() with enhanced functionality\n    that supports both category-specific and cross-category queries.\n    \n    Args:\n        user_id: The user ID\n        category: Optional category filter (None = all categories)\n        limit: Maximum number of messages to return\n        days_back: Only include messages from last N days\n        \n    Returns:\n        List[dict]: List of recent messages, sorted by timestamp descending",
                "name": "get_recent_messages"
              },
              {
                "args": [
                  "user_id",
                  "category",
                  "message_id",
                  "message",
                  "delivery_status",
                  "time_period"
                ],
                "docstring": "Store sent message in chronological order.\n    \n    This function maintains the chronological structure by inserting new messages\n    in the correct position based on timestamp.\n    \n    Args:\n        user_id: The user ID\n        category: The message category\n        message_id: The message ID\n        message: The message content\n        delivery_status: Delivery status (default: \"sent\")\n        time_period: The time period when the message was sent (e.g., \"morning\", \"evening\")\n        \n    Returns:\n        bool: True if message stored successfully",
                "name": "store_sent_message"
              },
              {
                "args": [
                  "user_id",
                  "days_to_keep"
                ],
                "docstring": "Archive messages older than specified days.\n    \n    This function implements file rotation by moving old messages to archive files,\n    keeping the active sent_messages.json file manageable in size.\n    \n    Args:\n        user_id: The user ID\n        days_to_keep: Number of days to keep in active file\n        \n    Returns:\n        bool: True if archiving successful",
                "name": "archive_old_messages"
              },
              {
                "args": [
                  "timestamp_str"
                ],
                "docstring": "Parse timestamp string to datetime object.\n    \n    Handles multiple timestamp formats for backward compatibility.\n    \n    Args:\n        timestamp_str: Timestamp string to parse\n        \n    Returns:\n        datetime: Parsed datetime object",
                "name": "_parse_timestamp"
              },
              {
                "args": [
                  "user_id",
                  "category"
                ],
                "docstring": "Create a user's message file for a specific category from default messages.\n    This is the actual worker function that creates the file.\n    \n    Args:\n        user_id: The user ID\n        category: The specific category to create a message file for\n        \n    Returns:\n        bool: True if file was created successfully",
                "name": "create_message_file_from_defaults"
              },
              {
                "args": [
                  "user_id",
                  "categories"
                ],
                "docstring": "Ensure user has message files for specified categories.\n    Creates messages directory if missing, checks which files are missing, and creates them.\n    \n    Args:\n        user_id: The user ID\n        categories: List of categories to check/create message files for (can be subset of user's categories)\n        \n    Returns:\n        dict: Summary of the operation with keys:\n            - success: bool - True if all files were created/validated successfully\n            - directory_created: bool - True if messages directory was created\n            - files_checked: int - Number of categories checked\n            - files_created: int - Number of new files created\n            - files_existing: int - Number of files that already existed",
                "name": "ensure_user_message_files"
              },
              {
                "args": [
                  "item"
                ],
                "docstring": "Convert timestamp to float for consistent sorting.\n    \n    Args:\n        item: Dictionary containing a timestamp field or other data type\n        \n    Returns:\n        float: Timestamp as float for sorting, or 0.0 for invalid items",
                "name": "get_timestamp_for_sorting"
              }
            ]
          },
          "core/response_tracking.py": {
            "classes": [],
            "functions": [
              {
                "args": [
                  "response_type"
                ],
                "docstring": "Get the filename for a response log type.",
                "name": "_get_response_log_filename"
              },
              {
                "args": [
                  "user_id",
                  "response_data",
                  "response_type"
                ],
                "docstring": "Store user response data in appropriate file structure.",
                "name": "store_user_response"
              },
              {
                "args": [
                  "user_id",
                  "user_message",
                  "ai_response",
                  "context_used"
                ],
                "docstring": "Store a chat interaction between user and AI.",
                "name": "store_chat_interaction"
              },
              {
                "args": [
                  "user_id",
                  "response_type",
                  "limit"
                ],
                "docstring": "Get recent responses for a user from appropriate file structure.",
                "name": "get_recent_responses"
              },
              {
                "args": [
                  "user_id",
                  "limit"
                ],
                "docstring": "Get recent check-in responses for a user.",
                "name": "get_recent_checkins"
              },
              {
                "args": [
                  "user_id",
                  "limit"
                ],
                "docstring": "Get recent chat interactions for a user.",
                "name": "get_recent_chat_interactions"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Check if check-ins are enabled for a user.",
                "name": "is_user_checkins_enabled"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Get user information for response tracking.",
                "name": "get_user_info_for_tracking"
              },
              {
                "args": [
                  "user_id",
                  "category",
                  "response_data"
                ],
                "docstring": "Track a user's response to a message.",
                "name": "track_user_response"
              },
              {
                "args": [
                  "item"
                ],
                "docstring": "Convert timestamp to float for consistent sorting",
                "name": "get_timestamp_for_sorting"
              }
            ]
          },
          "core/schedule_management.py": {
            "classes": [],
            "functions": [
              {
                "args": [
                  "user_id",
                  "category"
                ],
                "docstring": "Get schedule time periods for a specific user and category (new format).",
                "name": "get_schedule_time_periods"
              },
              {
                "args": [
                  "user_id",
                  "category",
                  "period_name",
                  "active"
                ],
                "docstring": "Set whether a schedule period is active or inactive.\n    \n    Args:\n        user_id: The user ID\n        category: The schedule category\n        period_name: The name of the period to modify\n        active: Whether the period should be active (default: True)\n        \n    Returns:\n        bool: True if the period was found and updated, False otherwise",
                "name": "set_schedule_period_active"
              },
              {
                "args": [
                  "user_id",
                  "category",
                  "period_name"
                ],
                "docstring": "Check if a schedule period is currently active.\n    \n    Args:\n        user_id: The user ID\n        category: The schedule category\n        period_name: The name of the period to check\n        \n    Returns:\n        bool: True if the period is active, False otherwise (defaults to True if field is missing)",
                "name": "is_schedule_period_active"
              },
              {
                "args": [
                  "user_id",
                  "category"
                ],
                "docstring": "Returns the current active time periods for a user and category.\n    If no active period is found, defaults to the first available period.",
                "name": "get_current_time_periods_with_validation"
              },
              {
                "args": [
                  "category",
                  "period_name",
                  "start_time",
                  "end_time",
                  "scheduler_manager"
                ],
                "docstring": "",
                "name": "add_schedule_period"
              },
              {
                "args": [
                  "category",
                  "period_name",
                  "new_start_time",
                  "new_end_time",
                  "scheduler_manager"
                ],
                "docstring": "",
                "name": "edit_schedule_period"
              },
              {
                "args": [
                  "category",
                  "period_name",
                  "scheduler_manager"
                ],
                "docstring": "Delete a schedule period from a category.\n    \n    Args:\n        category: The schedule category\n        period_name: The name of the period to delete\n        scheduler_manager: Optional scheduler manager for rescheduling (default: None)",
                "name": "delete_schedule_period"
              },
              {
                "args": [
                  "user_id",
                  "category"
                ],
                "docstring": "Clear the schedule periods cache for a specific user/category or all.",
                "name": "clear_schedule_periods_cache"
              },
              {
                "args": [
                  "time_str"
                ],
                "docstring": "Validate and format a time string to HH:MM format.\n    \n    Args:\n        time_str: Time string to validate and format\n        \n    Returns:\n        str: Formatted time string in HH:MM format\n        \n    Raises:\n        ValueError: If the time format is invalid",
                "name": "get_period_data__validate_and_format_time"
              },
              {
                "args": [
                  "time_24h"
                ],
                "docstring": "Convert 24-hour time string (HH:MM) to 12-hour display format.\n    \n    Args:\n        time_24h (str): Time in 24-hour format (e.g., \"14:30\")\n        \n    Returns:\n        tuple: (hour_12, minute, is_pm) where:\n            - hour_12 (int): Hour in 12-hour format (1-12)\n            - minute (int): Minute (0-59)\n            - is_pm (bool): True if PM, False if AM",
                "name": "get_period_data__time_24h_to_12h_display"
              },
              {
                "args": [
                  "hour_12",
                  "minute",
                  "is_pm"
                ],
                "docstring": "Convert 12-hour display format to 24-hour time string.\n    \n    Args:\n        hour_12 (int): Hour in 12-hour format (1-12)\n        minute (int): Minute (0-59)\n        is_pm (bool): True if PM, False if AM\n        \n    Returns:\n        str: Time in 24-hour format (HH:MM)",
                "name": "get_period_data__time_12h_display_to_24h"
              },
              {
                "args": [],
                "docstring": "Returns the name of the current day plus 'ALL' for universal day messages.",
                "name": "get_current_day_names"
              },
              {
                "args": [
                  "user_id",
                  "category",
                  "periods_dict"
                ],
                "docstring": "Replace all schedule periods for a category with the given dict (period_name: {active, days, start_time, end_time}).",
                "name": "set_schedule_periods"
              },
              {
                "args": [
                  "user_id",
                  "category"
                ],
                "docstring": "Get the schedule days for a user and category.\n    \n    Args:\n        user_id: The user ID\n        category: The schedule category\n        \n    Returns:\n        list: List of days for the schedule, defaults to all days of the week",
                "name": "get_schedule_days"
              },
              {
                "args": [
                  "user_id",
                  "category",
                  "days"
                ],
                "docstring": "Set the schedule days for a user and category.\n    \n    Args:\n        user_id: The user ID\n        category: The schedule category\n        days: List of days to set for the schedule",
                "name": "set_schedule_days"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Get user info for schedule management operations.",
                "name": "get_user_info_for_schedule_management"
              },
              {
                "args": [
                  "item"
                ],
                "docstring": "",
                "name": "sort_key"
              }
            ]
          },
          "core/schedule_utilities.py": {
            "classes": [],
            "functions": [
              {
                "args": [
                  "schedules"
                ],
                "docstring": "Get list of currently active schedule periods.\n    \n    Args:\n        schedules: Dictionary containing schedule periods\n        \n    Returns:\n        list: List of active schedule period names",
                "name": "get_active_schedules"
              },
              {
                "args": [
                  "schedule_data",
                  "current_time"
                ],
                "docstring": "Check if a schedule period is currently active based on time and day.\n    \n    Args:\n        schedule_data: Dictionary containing schedule period data\n        current_time: Current time to check against (defaults to now)\n        \n    Returns:\n        bool: True if the schedule is active, False otherwise",
                "name": "is_schedule_active"
              },
              {
                "args": [
                  "schedules",
                  "current_time"
                ],
                "docstring": "Get list of schedule periods that are currently active based on time and day.\n    \n    Args:\n        schedules: Dictionary containing all schedule periods\n        current_time: Current time to check against (defaults to now)\n        \n    Returns:\n        list: List of currently active schedule period names",
                "name": "get_current_active_schedules"
              }
            ]
          },
          "core/scheduler.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "__init__",
                  "run_daily_scheduler",
                  "stop_scheduler",
                  "reset_and_reschedule_daily_messages",
                  "is_job_for_category",
                  "schedule_all_users_immediately",
                  "schedule_new_user",
                  "run_full_daily_scheduler",
                  "schedule_daily_message_job",
                  "schedule_message_for_period",
                  "schedule_checkin_at_exact_time",
                  "schedule_message_at_random_time",
                  "is_time_conflict",
                  "get_random_time_within_period",
                  "log_scheduled_tasks",
                  "handle_sending_scheduled_message",
                  "_remove_user_message_job",
                  "handle_task_reminder",
                  "set_wake_timer",
                  "cleanup_old_tasks",
                  "clear_all_accumulated_jobs",
                  "schedule_all_task_reminders",
                  "_select_task_for_reminder__handle_edge_cases",
                  "_select_task_for_reminder__calculate_priority_weight",
                  "_select_task_for_reminder__calculate_due_date_weight",
                  "_select_task_for_reminder__calculate_task_weights",
                  "_select_task_for_reminder__select_task_by_weight",
                  "select_task_for_reminder",
                  "get_random_time_within_task_period",
                  "schedule_task_reminder_at_time",
                  "schedule_task_reminder",
                  "schedule_task_reminder_at_datetime",
                  "perform_daily_log_archival"
                ],
                "name": "SchedulerManager"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Standalone function to run the full scheduler for all users.\n    This can be called from the admin UI without needing a scheduler instance.",
                "name": "run_full_scheduler_standalone"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Standalone function to run scheduler for a specific user.\n    This can be called from the admin UI without needing a scheduler instance.",
                "name": "run_user_scheduler_standalone"
              },
              {
                "args": [
                  "user_id",
                  "category"
                ],
                "docstring": "Standalone function to run scheduler for a specific user and category.\n    This can be called from the admin UI without needing a scheduler instance.",
                "name": "run_category_scheduler_standalone"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Standalone function to schedule all task reminders for a user.\n    This can be called from the admin UI without needing a scheduler instance.",
                "name": "schedule_all_task_reminders"
              },
              {
                "args": [],
                "docstring": "Standalone function to clear all accumulated scheduler jobs.\n    This can be called from the admin UI or service to fix job accumulation issues.",
                "name": "clear_all_accumulated_jobs_standalone"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Process schedules for a specific user.",
                "name": "process_user_schedules"
              },
              {
                "args": [
                  "user_id",
                  "category"
                ],
                "docstring": "Process schedule for a specific user and category.",
                "name": "process_category_schedule"
              },
              {
                "args": [
                  "self",
                  "communication_manager"
                ],
                "docstring": "Initialize the SchedulerManager with communication manager.\n        \n        Args:\n            communication_manager: The communication manager for sending messages",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Starts the daily scheduler in a separate thread that handles all users.",
                "name": "run_daily_scheduler"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Stops the scheduler thread.",
                "name": "stop_scheduler"
              },
              {
                "args": [
                  "self",
                  "category",
                  "user_id"
                ],
                "docstring": "Resets scheduled tasks for a specific category and reschedules daily messages for that category.",
                "name": "reset_and_reschedule_daily_messages"
              },
              {
                "args": [
                  "self",
                  "job",
                  "user_id",
                  "category"
                ],
                "docstring": "Determines if a job is scheduled for a specific user and category.",
                "name": "is_job_for_category"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Schedule daily messages immediately for all users",
                "name": "schedule_all_users_immediately"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Schedule a newly created user immediately.\n        This method should be called after a new user is created to add them to the scheduler.\n        \n        Args:\n            user_id: The ID of the newly created user",
                "name": "schedule_new_user"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Runs the full daily scheduler process - same as system startup.\n        This includes clearing accumulated jobs, scheduling all users, checkins, and task reminders.",
                "name": "run_full_daily_scheduler"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "category"
                ],
                "docstring": "Schedules daily messages immediately for the specified user and category.\n        Schedules one message per active period in the category.",
                "name": "schedule_daily_message_job"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "category",
                  "period_name"
                ],
                "docstring": "Schedules a message at a random time within a specific period for a user and category.",
                "name": "schedule_message_for_period"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "period_name"
                ],
                "docstring": "Schedule a check-in at the exact time specified in the period.",
                "name": "schedule_checkin_at_exact_time"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "category"
                ],
                "docstring": "Schedules a message at a random time within the user's preferred time periods.",
                "name": "schedule_message_at_random_time"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "schedule_datetime"
                ],
                "docstring": "Checks if there is a time conflict with any existing scheduled jobs for the user.",
                "name": "is_time_conflict"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "category",
                  "period",
                  "timezone_str"
                ],
                "docstring": "Get a random time within a specified period for a given category.",
                "name": "get_random_time_within_period"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Logs all current and upcoming scheduled tasks in a user-friendly manner.",
                "name": "log_scheduled_tasks"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "category",
                  "retry_attempts",
                  "retry_delay"
                ],
                "docstring": "Handles the sending of scheduled messages with retries.\n        This is a one-time job that removes itself after execution.",
                "name": "handle_sending_scheduled_message"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "category"
                ],
                "docstring": "Removes user message jobs from the scheduler after execution.\n        This makes user message jobs effectively one-time jobs.",
                "name": "_remove_user_message_job"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "task_id",
                  "retry_attempts",
                  "retry_delay"
                ],
                "docstring": "Handles sending task reminders with retries.",
                "name": "handle_task_reminder"
              },
              {
                "args": [
                  "self",
                  "schedule_time",
                  "user_id",
                  "category",
                  "period",
                  "wake_ahead_minutes"
                ],
                "docstring": "Set a Windows scheduled task to wake the computer before a scheduled message.\n        \n        Args:\n            schedule_time: The datetime when the message is scheduled\n            user_id: The user ID\n            category: The message category\n            period: The time period name\n            wake_ahead_minutes: Minutes before schedule_time to wake the computer (default: 4)",
                "name": "set_wake_timer"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "category"
                ],
                "docstring": "Cleans up all tasks (scheduled jobs and system tasks) associated with a given user and category.",
                "name": "cleanup_old_tasks"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Clears all accumulated scheduler jobs and reschedules only the necessary ones.",
                "name": "clear_all_accumulated_jobs"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Schedule reminders for all active tasks for a user.\n        For each reminder period, pick one random task and schedule it at a random time within the period.",
                "name": "schedule_all_task_reminders"
              },
              {
                "args": [
                  "self",
                  "incomplete_tasks"
                ],
                "docstring": "Handle edge cases for task selection.",
                "name": "_select_task_for_reminder__handle_edge_cases"
              },
              {
                "args": [
                  "self",
                  "task"
                ],
                "docstring": "Calculate priority-based weight for a task.",
                "name": "_select_task_for_reminder__calculate_priority_weight"
              },
              {
                "args": [
                  "self",
                  "task",
                  "today"
                ],
                "docstring": "Calculate due date proximity weight for a task.",
                "name": "_select_task_for_reminder__calculate_due_date_weight"
              },
              {
                "args": [
                  "self",
                  "incomplete_tasks",
                  "today"
                ],
                "docstring": "Calculate weights for all tasks.",
                "name": "_select_task_for_reminder__calculate_task_weights"
              },
              {
                "args": [
                  "self",
                  "task_weights",
                  "incomplete_tasks"
                ],
                "docstring": "Select a task based on calculated weights.",
                "name": "_select_task_for_reminder__select_task_by_weight"
              },
              {
                "args": [
                  "self",
                  "incomplete_tasks"
                ],
                "docstring": "Select a task for reminder using priority-based and due date proximity weighting.\n        \n        Args:\n            incomplete_tasks: List of incomplete tasks to choose from\n            \n        Returns:\n            Selected task dictionary",
                "name": "select_task_for_reminder"
              },
              {
                "args": [
                  "self",
                  "start_time",
                  "end_time"
                ],
                "docstring": "Generate a random time within a task reminder period.\n        Args:\n            start_time: Start time in HH:MM format (e.g., \"17:00\")\n            end_time: End time in HH:MM format (e.g., \"18:00\")\n        Returns:\n            Random time in HH:MM format",
                "name": "get_random_time_within_task_period"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "task_id",
                  "reminder_time"
                ],
                "docstring": "Schedule a reminder for a specific task at the specified time (daily).",
                "name": "schedule_task_reminder_at_time"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "task_id",
                  "reminder_time"
                ],
                "docstring": "Legacy function for backward compatibility.\n        Schedule a reminder for a specific task at the specified time.",
                "name": "schedule_task_reminder"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "task_id",
                  "date_str",
                  "time_str"
                ],
                "docstring": "Schedule a reminder for a specific task at a specific date and time.",
                "name": "schedule_task_reminder_at_datetime"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Perform daily log archival to compress old logs and clean up archives.\n        This runs automatically at 02:00 daily via the scheduler.",
                "name": "perform_daily_log_archival"
              },
              {
                "args": [],
                "docstring": "",
                "name": "scheduler_loop"
              }
            ]
          },
          "core/schemas.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "_coerce_bool",
                  "_normalize_flags"
                ],
                "name": "FeaturesModel"
              },
              {
                "docstring": "",
                "methods": [
                  "_validate_email",
                  "_validate_discord_id",
                  "_validate_timezone"
                ],
                "name": "AccountModel"
              },
              {
                "docstring": "",
                "methods": [
                  "_normalize_contact"
                ],
                "name": "ChannelModel"
              },
              {
                "docstring": "",
                "methods": [
                  "_validate_categories"
                ],
                "name": "PreferencesModel"
              },
              {
                "docstring": "",
                "methods": [
                  "_valid_time",
                  "_valid_days"
                ],
                "name": "PeriodModel"
              },
              {
                "docstring": "",
                "methods": [
                  "_accept_legacy_shape"
                ],
                "name": "CategoryScheduleModel"
              },
              {
                "docstring": "",
                "methods": [
                  "to_dict"
                ],
                "name": "SchedulesModel"
              },
              {
                "docstring": "",
                "methods": [
                  "_normalize_days",
                  "_normalize_periods"
                ],
                "name": "MessageModel"
              },
              {
                "docstring": "",
                "methods": [],
                "name": "MessagesFileModel"
              }
            ],
            "functions": [
              {
                "args": [
                  "data"
                ],
                "docstring": "",
                "name": "validate_account_dict"
              },
              {
                "args": [
                  "data"
                ],
                "docstring": "",
                "name": "validate_preferences_dict"
              },
              {
                "args": [
                  "data"
                ],
                "docstring": "",
                "name": "validate_schedules_dict"
              },
              {
                "args": [
                  "data"
                ],
                "docstring": "",
                "name": "validate_messages_file_dict"
              },
              {
                "args": [
                  "cls",
                  "v"
                ],
                "docstring": "",
                "name": "_coerce_bool"
              },
              {
                "args": [
                  "cls",
                  "v"
                ],
                "docstring": "",
                "name": "_normalize_flags"
              },
              {
                "args": [
                  "cls",
                  "v"
                ],
                "docstring": "",
                "name": "_validate_email"
              },
              {
                "args": [
                  "cls",
                  "v"
                ],
                "docstring": "",
                "name": "_validate_discord_id"
              },
              {
                "args": [
                  "cls",
                  "v"
                ],
                "docstring": "",
                "name": "_validate_timezone"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "_normalize_contact"
              },
              {
                "args": [
                  "cls",
                  "v"
                ],
                "docstring": "Validate that all categories are in the allowed list.",
                "name": "_validate_categories"
              },
              {
                "args": [
                  "cls",
                  "v"
                ],
                "docstring": "",
                "name": "_valid_time"
              },
              {
                "args": [
                  "cls",
                  "v"
                ],
                "docstring": "",
                "name": "_valid_days"
              },
              {
                "args": [
                  "cls",
                  "data"
                ],
                "docstring": "",
                "name": "_accept_legacy_shape"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "to_dict"
              },
              {
                "args": [
                  "cls",
                  "v"
                ],
                "docstring": "",
                "name": "_normalize_days"
              },
              {
                "args": [
                  "cls",
                  "v"
                ],
                "docstring": "",
                "name": "_normalize_periods"
              }
            ]
          },
          "core/service.py": {
            "classes": [
              {
                "docstring": "Custom exception for initialization errors.",
                "methods": [],
                "name": "InitializationError"
              },
              {
                "docstring": "",
                "methods": [
                  "__init__",
                  "validate_configuration",
                  "initialize_paths",
                  "_check_and_fix_logging__test_logging_functionality",
                  "_check_and_fix_logging__ensure_log_file_exists",
                  "_check_and_fix_logging__read_recent_log_content",
                  "_check_and_fix_logging__verify_test_message_present",
                  "_check_and_fix_logging__check_recent_activity_timestamps",
                  "_check_and_fix_logging__force_restart_logging_system",
                  "check_and_fix_logging",
                  "start",
                  "run_service_loop",
                  "_check_test_message_requests__get_base_directory",
                  "_check_test_message_requests__discover_request_files",
                  "_check_test_message_requests__parse_request_file",
                  "_check_test_message_requests__validate_request_data",
                  "_check_test_message_requests__process_valid_request",
                  "_check_test_message_requests__cleanup_request_file",
                  "_check_test_message_requests__handle_processing_error",
                  "check_test_message_requests",
                  "_cleanup_test_message_requests__get_base_directory",
                  "_cleanup_test_message_requests__is_test_message_request_file",
                  "_cleanup_test_message_requests__remove_request_file",
                  "cleanup_test_message_requests",
                  "_check_reschedule_requests__get_base_directory",
                  "_check_reschedule_requests__discover_request_files",
                  "_check_reschedule_requests__parse_request_file",
                  "_check_reschedule_requests__validate_request_data",
                  "_check_reschedule_requests__process_valid_request",
                  "_check_reschedule_requests__cleanup_request_file",
                  "_check_reschedule_requests__handle_processing_error",
                  "check_reschedule_requests",
                  "cleanup_reschedule_requests",
                  "shutdown",
                  "signal_handler",
                  "emergency_shutdown"
                ],
                "name": "MHMService"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Get the scheduler manager instance from the global service.\n    Safely handle cases where the global 'service' symbol may not be defined yet.",
                "name": "get_scheduler_manager"
              },
              {
                "args": [],
                "docstring": "Main entry point for the MHM backend service.\n    \n    Creates and starts the service, handling initialization errors and graceful shutdown.",
                "name": "main"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the MHM backend service.\n        \n        Sets up communication manager, scheduler manager, and registers emergency shutdown handler.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Validate all configuration settings before starting the service.",
                "name": "validate_configuration"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize and verify all required file paths for the service.\n        \n        Creates paths for log files, user data directories, and message files for all users.\n        \n        Returns:\n            List[str]: List of all initialized file paths",
                "name": "initialize_paths"
              },
              {
                "args": [
                  "self",
                  "test_message"
                ],
                "docstring": "Test if logging functionality works by writing a test message and flushing handlers.",
                "name": "_check_and_fix_logging__test_logging_functionality"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Ensure the log file exists, creating it if necessary.",
                "name": "_check_and_fix_logging__ensure_log_file_exists"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Read the last 1000 characters from the log file to check for recent activity.",
                "name": "_check_and_fix_logging__read_recent_log_content"
              },
              {
                "args": [
                  "self",
                  "recent_content",
                  "test_message",
                  "test_timestamp"
                ],
                "docstring": "Check if our test message or recent timestamp patterns are present in log content.",
                "name": "_check_and_fix_logging__verify_test_message_present"
              },
              {
                "args": [
                  "self",
                  "recent_content"
                ],
                "docstring": "Check if there's any recent activity within the last 5 minutes using timestamp patterns.",
                "name": "_check_and_fix_logging__check_recent_activity_timestamps"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Force restart the logging system and update the global logger.",
                "name": "_check_and_fix_logging__force_restart_logging_system"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Check if logging is working and restart if needed",
                "name": "check_and_fix_logging"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Start the MHM backend service.\n        \n        Initializes communication channels, scheduler, and begins the main service loop.\n        Sets up signal handlers for graceful shutdown.",
                "name": "start"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Keep the service running until shutdown is requested",
                "name": "run_service_loop"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the base directory for test message request files.",
                "name": "_check_test_message_requests__get_base_directory"
              },
              {
                "args": [
                  "self",
                  "base_dir"
                ],
                "docstring": "Discover all test message request files in the base directory.",
                "name": "_check_test_message_requests__discover_request_files"
              },
              {
                "args": [
                  "self",
                  "request_file"
                ],
                "docstring": "Parse and validate a test message request file.",
                "name": "_check_test_message_requests__parse_request_file"
              },
              {
                "args": [
                  "self",
                  "request_data",
                  "filename"
                ],
                "docstring": "Validate request data and check if it should be processed.",
                "name": "_check_test_message_requests__validate_request_data"
              },
              {
                "args": [
                  "self",
                  "request_data"
                ],
                "docstring": "Process a valid test message request.",
                "name": "_check_test_message_requests__process_valid_request"
              },
              {
                "args": [
                  "self",
                  "request_file",
                  "filename"
                ],
                "docstring": "Clean up a processed request file.",
                "name": "_check_test_message_requests__cleanup_request_file"
              },
              {
                "args": [
                  "self",
                  "request_file",
                  "filename",
                  "error"
                ],
                "docstring": "Handle errors during request processing.",
                "name": "_check_test_message_requests__handle_processing_error"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Check for and process test message request files from admin panel",
                "name": "check_test_message_requests"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the base directory for test message request files.",
                "name": "_cleanup_test_message_requests__get_base_directory"
              },
              {
                "args": [
                  "self",
                  "filename"
                ],
                "docstring": "Check if a filename matches the test message request file pattern.",
                "name": "_cleanup_test_message_requests__is_test_message_request_file"
              },
              {
                "args": [
                  "self",
                  "request_file",
                  "filename"
                ],
                "docstring": "Remove a single test message request file with proper error handling.",
                "name": "_cleanup_test_message_requests__remove_request_file"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Clean up any remaining test message request files",
                "name": "cleanup_test_message_requests"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the base directory for reschedule request files.",
                "name": "_check_reschedule_requests__get_base_directory"
              },
              {
                "args": [
                  "self",
                  "base_dir"
                ],
                "docstring": "Discover all reschedule request files in the base directory.",
                "name": "_check_reschedule_requests__discover_request_files"
              },
              {
                "args": [
                  "self",
                  "request_file"
                ],
                "docstring": "Parse and validate a reschedule request file.",
                "name": "_check_reschedule_requests__parse_request_file"
              },
              {
                "args": [
                  "self",
                  "request_data",
                  "filename"
                ],
                "docstring": "Validate request data and check if it should be processed.",
                "name": "_check_reschedule_requests__validate_request_data"
              },
              {
                "args": [
                  "self",
                  "request_data"
                ],
                "docstring": "Process a valid reschedule request.",
                "name": "_check_reschedule_requests__process_valid_request"
              },
              {
                "args": [
                  "self",
                  "request_file",
                  "filename"
                ],
                "docstring": "Clean up a processed request file.",
                "name": "_check_reschedule_requests__cleanup_request_file"
              },
              {
                "args": [
                  "self",
                  "request_file",
                  "filename",
                  "error"
                ],
                "docstring": "Handle errors during request processing.",
                "name": "_check_reschedule_requests__handle_processing_error"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Check for and process reschedule request files from UI",
                "name": "check_reschedule_requests"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Clean up any remaining reschedule request files",
                "name": "cleanup_reschedule_requests"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Gracefully shutdown the service",
                "name": "shutdown"
              },
              {
                "args": [
                  "self",
                  "signum",
                  "frame"
                ],
                "docstring": "Handle shutdown signals for graceful service termination.\n        \n        Args:\n            signum: Signal number\n            frame: Current stack frame",
                "name": "signal_handler"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Emergency shutdown handler registered with atexit",
                "name": "emergency_shutdown"
              }
            ]
          },
          "core/service_utilities.py": {
            "classes": [
              {
                "docstring": "A utility class for throttling operations based on time intervals.\n    \n    Prevents operations from running too frequently by tracking the last execution time.",
                "methods": [
                  "__init__",
                  "should_run"
                ],
                "name": "Throttler"
              },
              {
                "docstring": "Exception raised when time format is invalid.\n    \n    Used for time parsing and validation operations.",
                "methods": [],
                "name": "InvalidTimeFormatError"
              }
            ],
            "functions": [
              {
                "args": [
                  "user_id",
                  "category"
                ],
                "docstring": "Create a reschedule request file that the service will pick up.\n    \n    Args:\n        user_id: The user ID\n        category: The category to reschedule\n        \n    Returns:\n        bool: True if request was created successfully",
                "name": "create_reschedule_request"
              },
              {
                "args": [],
                "docstring": "Check if the MHM service is currently running",
                "name": "is_service_running"
              },
              {
                "args": [
                  "timeout"
                ],
                "docstring": "Wait for the network to be available, retrying every 5 seconds up to a timeout.",
                "name": "wait_for_network"
              },
              {
                "args": [
                  "datetime_str",
                  "timezone_str"
                ],
                "docstring": "Load and localize a datetime string to a specific timezone.\n    \n    Args:\n        datetime_str: Datetime string in format \"YYYY-MM-DD HH:MM\"\n        timezone_str: Timezone string (default: 'America/Regina')\n        \n    Returns:\n        datetime: Timezone-aware datetime object\n        \n    Raises:\n        InvalidTimeFormatError: If datetime_str format is invalid",
                "name": "load_and_localize_datetime"
              },
              {
                "args": [
                  "self",
                  "interval"
                ],
                "docstring": "Initialize the throttler with a specified interval.\n        \n        Args:\n            interval: Time interval in seconds between allowed operations",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Check if enough time has passed since the last run to allow another execution.",
                "name": "should_run"
              }
            ]
          },
          "core/ui_management.py": {
            "classes": [],
            "functions": [
              {
                "args": [
                  "layout",
                  "widget_list"
                ],
                "docstring": "Clear all period widgets from a layout.\n    \n    Args:\n        layout: The QVBoxLayout to clear\n        widget_list: Optional list to track widgets (will be cleared if provided)\n    \n    Returns:\n        None",
                "name": "clear_period_widgets_from_layout"
              },
              {
                "args": [
                  "layout",
                  "period_name",
                  "period_data",
                  "category",
                  "parent_widget",
                  "widget_list",
                  "delete_callback"
                ],
                "docstring": "Add a period widget to a layout with proper display formatting.\n    \n    Args:\n        layout: The QVBoxLayout to add the widget to\n        period_name: The period name\n        period_data: The period data dictionary\n        category: The category (tasks, checkin, or schedule category)\n        parent_widget: The parent widget for the period widget\n        widget_list: Optional list to track widgets\n        delete_callback: Optional callback for delete signal\n    \n    Returns:\n        The created PeriodRowWidget or None if failed",
                "name": "add_period_widget_to_layout"
              },
              {
                "args": [
                  "layout",
                  "user_id",
                  "category",
                  "parent_widget",
                  "widget_list",
                  "delete_callback"
                ],
                "docstring": "Load and display period widgets for a specific category.\n    \n    Args:\n        layout: The QVBoxLayout to add widgets to\n        user_id: The user ID\n        category: The category (tasks, checkin, or schedule category)\n        parent_widget: The parent widget for period widgets\n        widget_list: Optional list to track widgets\n        delete_callback: Optional callback for delete signal\n    \n    Returns:\n        List of created widgets",
                "name": "load_period_widgets_for_category"
              },
              {
                "args": [
                  "widget_list",
                  "category"
                ],
                "docstring": "Collect period data from a list of period widgets.\n    \n    Args:\n        widget_list: List of PeriodRowWidget instances\n        category: The category (tasks, checkin, or schedule category)\n    \n    Returns:\n        Dictionary of period data with storage-formatted names, each with only 'active', 'days', 'start_time', 'end_time'.",
                "name": "collect_period_data_from_widgets"
              },
              {
                "args": [
                  "period_name",
                  "category"
                ],
                "docstring": "Convert period name to display format using existing logic.\n    \n    Args:\n        period_name: The period name to convert\n        category: The category (tasks, checkin, or schedule category)\n    \n    Returns:\n        Display-formatted period name",
                "name": "period_name_for_display"
              },
              {
                "args": [
                  "display_name",
                  "category"
                ],
                "docstring": "Convert display period name to storage format.\n    \n    Args:\n        display_name: The display-formatted period name\n        category: The category (tasks, checkin, or schedule category)\n    \n    Returns:\n        Storage-formatted period name (preserve original case)",
                "name": "period_name_for_storage"
              }
            ]
          },
          "core/user_data_handlers.py": {
            "classes": [],
            "functions": [
              {
                "args": [
                  "data_type",
                  "loader_func",
                  "file_type",
                  "default_fields",
                  "metadata_fields",
                  "description"
                ],
                "docstring": "Proxy to the original *register_data_loader*.\n\n    Imported here so callers can simply do::\n\n        from core.user_data_handlers import register_data_loader\n\n    \u2026and forget about *core.user_management*.",
                "name": "register_data_loader"
              },
              {
                "args": [
                  "user_id",
                  "data_types",
                  "fields",
                  "auto_create",
                  "include_metadata",
                  "normalize_on_read"
                ],
                "docstring": "Migrated implementation of get_user_data.",
                "name": "get_user_data"
              },
              {
                "args": [
                  "user_id",
                  "data_updates"
                ],
                "docstring": "Validate input parameters and initialize result structure.",
                "name": "_save_user_data__validate_input"
              },
              {
                "args": [
                  "user_id",
                  "valid_types",
                  "create_backup"
                ],
                "docstring": "Create backup if needed for major data updates.",
                "name": "_save_user_data__create_backup"
              },
              {
                "args": [
                  "user_id",
                  "data_updates",
                  "valid_types",
                  "validate_data",
                  "is_new_user"
                ],
                "docstring": "Validate data for new and existing users.",
                "name": "_save_user_data__validate_data"
              },
              {
                "args": [
                  "updated",
                  "updates",
                  "user_id"
                ],
                "docstring": "Handle legacy preferences compatibility and cleanup.",
                "name": "_save_user_data__legacy_preferences"
              },
              {
                "args": [
                  "dt",
                  "updated"
                ],
                "docstring": "Apply Pydantic normalization to data.",
                "name": "_save_user_data__normalize_data"
              },
              {
                "args": [
                  "user_id",
                  "dt",
                  "updates",
                  "auto_create"
                ],
                "docstring": "Save a single data type for a user.",
                "name": "_save_user_data__save_single_type"
              },
              {
                "args": [
                  "user_id",
                  "result",
                  "update_index"
                ],
                "docstring": "Update user index and clear cache if needed.",
                "name": "_save_user_data__update_index"
              },
              {
                "args": [
                  "user_id",
                  "data_updates",
                  "auto_create",
                  "update_index",
                  "create_backup",
                  "validate_data"
                ],
                "docstring": "Migrated implementation of save_user_data.",
                "name": "save_user_data"
              },
              {
                "args": [
                  "user_id",
                  "data_updates",
                  "auto_create"
                ],
                "docstring": "Atomic wrapper copied from user_management.",
                "name": "save_user_data_transaction"
              },
              {
                "args": [],
                "docstring": "Return a list of *all* user IDs known to the system.",
                "name": "get_all_user_ids"
              },
              {
                "args": [
                  "user_id",
                  "schedules_data"
                ],
                "docstring": "Persist a complete schedules dict for *user_id*.\n\n    Wrapper around the original helper in **core.user_management** \u2013 keeps\n    outside modules decoupled from the legacy path.",
                "name": "update_user_schedules"
              },
              {
                "args": [
                  "user_id",
                  "updates",
                  "auto_create"
                ],
                "docstring": "Update (part of) a user\u2019s *account.json* file.\n\n    This is a thin convenience wrapper around :pyfunc:`save_user_data` that\n    scopes *updates* to the ``account`` data-type.",
                "name": "update_user_account"
              },
              {
                "args": [
                  "user_id",
                  "updates",
                  "auto_create"
                ],
                "docstring": "Update *preferences.json*.\n\n    Includes the extra bookkeeping originally implemented in\n    ``core.user_management.update_user_preferences`` (default schedule creation\n    for new categories, message-file creation, etc.) so behaviour remains\n    unchanged.",
                "name": "update_user_preferences"
              },
              {
                "args": [
                  "user_id",
                  "updates",
                  "auto_create"
                ],
                "docstring": "Update *user_context.json* for the given user.",
                "name": "update_user_context"
              },
              {
                "args": [
                  "user_id",
                  "updates",
                  "auto_create"
                ],
                "docstring": "Specialised helper \u2013 update only the *preferences.channel* subtree.",
                "name": "update_channel_preferences"
              }
            ]
          },
          "core/user_data_manager.py": {
            "classes": [
              {
                "docstring": "Enhanced user data management with references, backup, and indexing capabilities",
                "methods": [
                  "__init__",
                  "update_message_references",
                  "get_user_message_files",
                  "backup_user_data",
                  "export_user_data",
                  "delete_user_completely",
                  "get_user_data_summary",
                  "_get_user_data_summary__initialize_summary",
                  "_get_user_data_summary__process_core_files",
                  "_get_user_data_summary__add_file_info",
                  "_get_user_data_summary__add_special_file_details",
                  "_get_user_data_summary__add_schedule_details",
                  "_get_user_data_summary__add_sent_messages_details",
                  "_get_user_data_summary__process_message_files",
                  "_get_user_data_summary__ensure_message_files",
                  "_get_user_data_summary__process_enabled_message_files",
                  "_get_user_data_summary__process_orphaned_message_files",
                  "_get_user_data_summary__add_message_file_info",
                  "_get_user_data_summary__add_missing_message_file_info",
                  "_get_user_data_summary__process_log_files",
                  "_get_user_data_summary__add_log_file_info",
                  "_get_last_interaction",
                  "update_user_index",
                  "remove_from_index",
                  "rebuild_full_index",
                  "search_users"
                ],
                "name": "UserDataManager"
              }
            ],
            "functions": [
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Update message file references for a user.\n    \n    Args:\n        user_id: The user's ID\n        \n    Returns:\n        bool: True if references were updated successfully",
                "name": "update_message_references"
              },
              {
                "args": [
                  "user_id",
                  "include_messages"
                ],
                "docstring": "Create a backup of user data.\n    \n    Args:\n        user_id: The user's ID\n        include_messages: Whether to include message files in backup\n        \n    Returns:\n        str: Path to the created backup file",
                "name": "backup_user_data"
              },
              {
                "args": [
                  "user_id",
                  "export_format"
                ],
                "docstring": "Export user data to a structured format.\n    \n    Args:\n        user_id: The user's ID\n        export_format: Format for export (currently only \"json\" supported)\n        \n    Returns:\n        Dict containing all user data in structured format",
                "name": "export_user_data"
              },
              {
                "args": [
                  "user_id",
                  "create_backup"
                ],
                "docstring": "Completely delete a user and all their data.\n    \n    Args:\n        user_id: The user's ID\n        create_backup: Whether to create a backup before deletion\n        \n    Returns:\n        bool: True if user was deleted successfully",
                "name": "delete_user_completely"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Get a summary of user data.\n    \n    Args:\n        user_id: The user's ID\n        \n    Returns:\n        Dict containing user data summary",
                "name": "get_user_data_summary"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Update the user index for a specific user.\n    \n    Args:\n        user_id: The user's ID\n        \n    Returns:\n        bool: True if index was updated successfully",
                "name": "update_user_index"
              },
              {
                "args": [],
                "docstring": "Rebuild the complete user index.\n    \n    Returns:\n        bool: True if index was rebuilt successfully",
                "name": "rebuild_user_index"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Get user info using the new centralized data structure.",
                "name": "get_user_info_for_data_manager"
              },
              {
                "args": [],
                "docstring": "Build an index of all users and their message data.",
                "name": "build_user_index"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Get a summary of user data and message statistics.",
                "name": "get_user_summary"
              },
              {
                "args": [],
                "docstring": "Get summaries for all users.",
                "name": "get_all_user_summaries"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Get an analytics summary for a user including interaction patterns and data usage.\n    \n    Args:\n        user_id: The user's ID\n        \n    Returns:\n        Dict containing analytics summary information",
                "name": "get_user_analytics_summary"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the UserDataManager.\n        \n        Sets up backup directory and index file path for user data management operations.",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Add/update message file references in user profile",
                "name": "update_message_references"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Get all message file paths for a user",
                "name": "get_user_message_files"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "include_messages"
                ],
                "docstring": "Create a complete backup of user's data",
                "name": "backup_user_data"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "export_format"
                ],
                "docstring": "Export all user data to a structured format",
                "name": "export_user_data"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "create_backup"
                ],
                "docstring": "Completely remove all traces of a user from the system",
                "name": "delete_user_completely"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Get a comprehensive summary of user data including file counts and sizes.\n        \n        Args:\n            user_id: The user's ID\n            \n        Returns:\n            Dict containing summary information about the user's data",
                "name": "get_user_data_summary"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Initialize the summary structure with default values.",
                "name": "_get_user_data_summary__initialize_summary"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "summary"
                ],
                "docstring": "Process core user data files (profile, preferences, schedules, etc.).",
                "name": "_get_user_data_summary__process_core_files"
              },
              {
                "args": [
                  "self",
                  "file_path",
                  "file_type",
                  "summary"
                ],
                "docstring": "Add basic file information to the summary.",
                "name": "_get_user_data_summary__add_file_info"
              },
              {
                "args": [
                  "self",
                  "file_path",
                  "file_type",
                  "summary"
                ],
                "docstring": "Add special details for specific file types (schedules, sent_messages).",
                "name": "_get_user_data_summary__add_special_file_details"
              },
              {
                "args": [
                  "self",
                  "file_path",
                  "summary"
                ],
                "docstring": "Add schedule-specific details to the summary.",
                "name": "_get_user_data_summary__add_schedule_details"
              },
              {
                "args": [
                  "self",
                  "file_path",
                  "summary"
                ],
                "docstring": "Add sent messages count to the summary.",
                "name": "_get_user_data_summary__add_sent_messages_details"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "summary"
                ],
                "docstring": "Process message files for all user categories.",
                "name": "_get_user_data_summary__process_message_files"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "categories"
                ],
                "docstring": "Ensure message files exist for all user categories.",
                "name": "_get_user_data_summary__ensure_message_files"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "categories",
                  "summary"
                ],
                "docstring": "Process message files for enabled categories.",
                "name": "_get_user_data_summary__process_enabled_message_files"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "categories",
                  "message_files",
                  "summary"
                ],
                "docstring": "Process orphaned message files (categories not enabled but files exist).",
                "name": "_get_user_data_summary__process_orphaned_message_files"
              },
              {
                "args": [
                  "self",
                  "file_path",
                  "category",
                  "summary",
                  "orphaned"
                ],
                "docstring": "Add message file information to the summary.",
                "name": "_get_user_data_summary__add_message_file_info"
              },
              {
                "args": [
                  "self",
                  "file_path",
                  "category",
                  "summary",
                  "user_id"
                ],
                "docstring": "Add information for missing message files.",
                "name": "_get_user_data_summary__add_missing_message_file_info"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "summary"
                ],
                "docstring": "Process log files (checkins, chat_interactions).",
                "name": "_get_user_data_summary__process_log_files"
              },
              {
                "args": [
                  "self",
                  "log_file",
                  "log_type",
                  "summary"
                ],
                "docstring": "Add log file information to the summary.",
                "name": "_get_user_data_summary__add_log_file_info"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Get the timestamp of the user's last interaction with the system.\n        \n        Args:\n            user_id: The user's ID\n            \n        Returns:\n            str: ISO format timestamp of last interaction, or default if none found",
                "name": "_get_last_interaction"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Update the user index with current information for a specific user.\n        \n        Creates a comprehensive multi-identifier structure:\n        - Fast lookups: {\"internal_username\": \"UUID\", \"email\": \"UUID\", \"discord_user_id\": \"UUID\", \"phone\": \"UUID\"}\n        - Detailed mapping: {\"users\": {\"UUID\": {\"internal_username\": \"...\", \"active\": true, ...}}} for rich info\n        \n        Args:\n            user_id: The user's ID (UUID)\n            \n        Returns:\n            bool: True if index was updated successfully",
                "name": "update_user_index"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Remove a user from the index.\n        \n        Removes all identifier mappings (internal_username, email, discord_user_id, phone) and detailed mapping.\n        \n        Args:\n            user_id: The user's ID (UUID)\n            \n        Returns:\n            bool: True if user was removed from index successfully",
                "name": "remove_from_index"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Rebuild the complete user index from scratch.\n        \n        Creates a comprehensive multi-identifier structure:\n        - Fast lookups: {\"internal_username\": \"UUID\", \"email:email\": \"UUID\", \"discord:discord_id\": \"UUID\", \"phone:phone\": \"UUID\"}\n        - Detailed mapping: {\"users\": {\"UUID\": {\"internal_username\": \"...\", \"active\": true, ...}}} for rich info\n        \n        Returns:\n            bool: True if index was rebuilt successfully",
                "name": "rebuild_full_index"
              },
              {
                "args": [
                  "self",
                  "query",
                  "search_fields"
                ],
                "docstring": "Search for users based on query string and specified fields.\n        \n        Args:\n            query: Search query string\n            search_fields: List of fields to search in (default: all fields)\n            \n        Returns:\n            List of user summaries matching the search criteria",
                "name": "search_users"
              }
            ]
          },
          "core/user_data_validation.py": {
            "classes": [],
            "functions": [
              {
                "args": [
                  "email"
                ],
                "docstring": "",
                "name": "is_valid_email"
              },
              {
                "args": [
                  "phone"
                ],
                "docstring": "",
                "name": "is_valid_phone"
              },
              {
                "args": [
                  "time_str"
                ],
                "docstring": "",
                "name": "validate_schedule_periods__validate_time_format"
              },
              {
                "args": [
                  "text"
                ],
                "docstring": "Convert text to title case with special handling for technical terms.",
                "name": "_shared__title_case"
              },
              {
                "args": [
                  "user_id",
                  "data_type",
                  "updates"
                ],
                "docstring": "Validate partial updates to an existing user's data.",
                "name": "validate_user_update"
              },
              {
                "args": [
                  "periods",
                  "category"
                ],
                "docstring": "Validate schedule periods and return (is_valid, error_messages).\n    \n    Args:\n        periods: Dictionary of period_name -> period_data\n        category: Category name for error messages (e.g., \"tasks\", \"check-ins\")\n    \n    Returns:\n        Tuple of (is_valid, list_of_error_messages)",
                "name": "validate_schedule_periods"
              },
              {
                "args": [
                  "user_id",
                  "data_updates"
                ],
                "docstring": "Validate complete dataset required for a brand-new user.",
                "name": "validate_new_user_data"
              },
              {
                "args": [
                  "data"
                ],
                "docstring": "Validate *context/personalization* structure.\n\n    No field is required; we only type-check fields that are present.\n    This logic previously lived in ``core.user_management``.",
                "name": "validate_personalization_data"
              }
            ]
          },
          "core/user_management.py": {
            "classes": [],
            "functions": [
              {
                "args": [
                  "data_type",
                  "loader_func",
                  "file_type",
                  "default_fields",
                  "metadata_fields",
                  "description",
                  "force"
                ],
                "docstring": "Register a new data loader for the centralized system.\n    \n    Args:\n        data_type: Unique identifier for the data type\n        loader_func: Function that loads the data\n        file_type: File type identifier\n        default_fields: Commonly accessed fields\n        metadata_fields: Fields that contain metadata\n        description: Human-readable description",
                "name": "register_data_loader"
              },
              {
                "args": [],
                "docstring": "Ensure required loaders are registered (idempotent).\n\n    Mutates the shared USER_DATA_LOADERS in-place, setting any missing/None\n    loader entries for: account, preferences, context, schedules.",
                "name": "register_default_loaders"
              },
              {
                "args": [],
                "docstring": "",
                "name": "_ensure_default_loaders_once"
              },
              {
                "args": [],
                "docstring": "Get list of available data types.",
                "name": "get_available_data_types"
              },
              {
                "args": [
                  "data_type"
                ],
                "docstring": "Get information about a specific data type.",
                "name": "get_data_type_info"
              },
              {
                "args": [],
                "docstring": "Get all user IDs from the system.",
                "name": "get_all_user_ids"
              },
              {
                "args": [
                  "user_id",
                  "auto_create"
                ],
                "docstring": "Load user account data from account.json.",
                "name": "_get_user_data__load_account"
              },
              {
                "args": [
                  "user_id",
                  "account_data"
                ],
                "docstring": "Save user account data to account.json.",
                "name": "_save_user_data__save_account"
              },
              {
                "args": [
                  "user_id",
                  "auto_create"
                ],
                "docstring": "Load user preferences data from preferences.json.",
                "name": "_get_user_data__load_preferences"
              },
              {
                "args": [
                  "user_id",
                  "preferences_data"
                ],
                "docstring": "Save user preferences data to preferences.json.",
                "name": "_save_user_data__save_preferences"
              },
              {
                "args": [
                  "user_id",
                  "auto_create"
                ],
                "docstring": "Load user context data from user_context.json.",
                "name": "_get_user_data__load_context"
              },
              {
                "args": [
                  "user_id",
                  "context_data"
                ],
                "docstring": "Save user context data to user_context.json.",
                "name": "_save_user_data__save_context"
              },
              {
                "args": [
                  "user_id",
                  "auto_create"
                ],
                "docstring": "Load user schedules data from schedules.json.",
                "name": "_get_user_data__load_schedules"
              },
              {
                "args": [
                  "user_id",
                  "schedules_data"
                ],
                "docstring": "Save user schedules data to schedules.json.",
                "name": "_save_user_data__save_schedules"
              },
              {
                "args": [
                  "user_id",
                  "schedules_data"
                ],
                "docstring": "Update user schedules data.",
                "name": "update_user_schedules"
              },
              {
                "args": [
                  "category"
                ],
                "docstring": "Create default schedule periods for a new category.",
                "name": "create_default_schedule_periods"
              },
              {
                "args": [
                  "schedules_data"
                ],
                "docstring": "Migrate legacy schedules structure to new format.",
                "name": "migrate_legacy_schedules_structure"
              },
              {
                "args": [
                  "user_id",
                  "category"
                ],
                "docstring": "Ensure a category has default schedule periods if it doesn't exist.",
                "name": "ensure_category_has_default_schedule"
              },
              {
                "args": [
                  "user_id",
                  "updates",
                  "auto_create"
                ],
                "docstring": "Update user account information.",
                "name": "update_user_account"
              },
              {
                "args": [
                  "user_id",
                  "updates",
                  "auto_create"
                ],
                "docstring": "Update user context information.",
                "name": "update_user_context"
              },
              {
                "args": [
                  "user_id",
                  "updates",
                  "auto_create"
                ],
                "docstring": "Update channel preferences without triggering category schedule creation.",
                "name": "update_channel_preferences"
              },
              {
                "args": [
                  "user_data"
                ],
                "docstring": "Create a new user with the new data structure.",
                "name": "create_new_user"
              },
              {
                "args": [
                  "internal_username"
                ],
                "docstring": "Helper function: Get user ID by internal username using the user index for fast lookup.",
                "name": "_get_user_id_by_identifier__by_internal_username"
              },
              {
                "args": [
                  "email"
                ],
                "docstring": "Helper function: Get user ID by email using the user index for fast lookup.",
                "name": "_get_user_id_by_identifier__by_email"
              },
              {
                "args": [
                  "phone"
                ],
                "docstring": "Helper function: Get user ID by phone using the user index for fast lookup.",
                "name": "_get_user_id_by_identifier__by_phone"
              },
              {
                "args": [
                  "chat_id"
                ],
                "docstring": "Helper function: Get user ID by chat ID.",
                "name": "_get_user_id_by_identifier__by_chat_id"
              },
              {
                "args": [
                  "discord_user_id"
                ],
                "docstring": "Helper function: Get user ID by Discord user ID using the user index for fast lookup.",
                "name": "_get_user_id_by_identifier__by_discord_user_id"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Clear user data caches.",
                "name": "clear_user_caches"
              },
              {
                "args": [
                  "data"
                ],
                "docstring": "Ensure all messages have unique IDs.",
                "name": "ensure_unique_ids"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Load messages for all categories and ensure IDs are unique for a user.",
                "name": "load_and_ensure_ids"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Ensure all categories in user preferences have corresponding schedules.",
                "name": "ensure_all_categories_have_schedules"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Get user's message categories using centralized system.",
                "name": "get_user_categories"
              },
              {
                "args": [
                  "user_id",
                  "data_types"
                ],
                "docstring": "Get user data with file metadata using centralized system.",
                "name": "get_user_data_with_metadata"
              },
              {
                "args": [],
                "docstring": "Load presets from resources/presets.json (cached).",
                "name": "_load_presets_json"
              },
              {
                "args": [
                  "field"
                ],
                "docstring": "Return predefined options for a personalization field.",
                "name": "get_predefined_options"
              },
              {
                "args": [],
                "docstring": "Get timezone options.",
                "name": "get_timezone_options"
              },
              {
                "args": [],
                "docstring": "Create default personalization data structure.",
                "name": "create_default_personalization_data"
              },
              {
                "args": [
                  "user_id",
                  "field"
                ],
                "docstring": "Get a specific field from personalization data using centralized system.",
                "name": "get_personalization_field"
              },
              {
                "args": [
                  "user_id",
                  "field",
                  "value"
                ],
                "docstring": "Update a specific field in personalization data using centralized system.",
                "name": "update_personalization_field"
              },
              {
                "args": [
                  "user_id",
                  "field",
                  "item"
                ],
                "docstring": "Add an item to a list field in personalization data using centralized system.",
                "name": "add_personalization_item"
              },
              {
                "args": [
                  "user_id",
                  "field",
                  "item"
                ],
                "docstring": "Remove an item from a list field in personalization data using centralized system.",
                "name": "remove_personalization_item"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Clear the personalization cache for a specific user or all users.",
                "name": "clear_personalization_cache"
              },
              {
                "args": [
                  "identifier"
                ],
                "docstring": "Get user ID by any identifier (internal_username, email, discord_user_id, phone).\n    \n    Automatically detects the identifier type and uses the appropriate lookup method.\n    \n    Args:\n        identifier: The identifier to look up (can be any supported type)\n        \n    Returns:\n        Optional[str]: User ID if found, None otherwise",
                "name": "get_user_id_by_identifier"
              }
            ]
          },
          "run_mhm.py": {
            "classes": [],
            "functions": [
              {
                "args": [],
                "docstring": "Launch the MHM Manager UI",
                "name": "main"
              }
            ]
          },
          "run_tests.py": {
            "classes": [],
            "functions": [
              {
                "args": [
                  "cmd",
                  "description",
                  "progress_interval"
                ],
                "docstring": "Run a command and return success status with periodic progress logs.",
                "name": "run_command"
              },
              {
                "args": [],
                "docstring": "Print helpful information about test modes.",
                "name": "print_test_mode_info"
              },
              {
                "args": [],
                "docstring": "",
                "name": "main"
              }
            ]
          },
          "tasks/task_management.py": {
            "classes": [
              {
                "docstring": "Custom exception for task management errors.",
                "methods": [],
                "name": "TaskManagementError"
              }
            ],
            "functions": [
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Ensure the task directory structure exists for a user.",
                "name": "ensure_task_directory"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Load active tasks for a user.",
                "name": "load_active_tasks"
              },
              {
                "args": [
                  "user_id",
                  "tasks"
                ],
                "docstring": "Save active tasks for a user.",
                "name": "save_active_tasks"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Load completed tasks for a user.",
                "name": "load_completed_tasks"
              },
              {
                "args": [
                  "user_id",
                  "tasks"
                ],
                "docstring": "Save completed tasks for a user.",
                "name": "save_completed_tasks"
              },
              {
                "args": [
                  "user_id",
                  "title",
                  "description",
                  "due_date",
                  "due_time",
                  "priority",
                  "reminder_periods",
                  "tags",
                  "quick_reminders",
                  "recurrence_pattern",
                  "recurrence_interval",
                  "repeat_after_completion"
                ],
                "docstring": "Create a new task for a user.",
                "name": "create_task"
              },
              {
                "args": [
                  "user_id",
                  "task_id",
                  "updates"
                ],
                "docstring": "Update an existing task.",
                "name": "update_task"
              },
              {
                "args": [
                  "user_id",
                  "task_id",
                  "completion_data"
                ],
                "docstring": "Mark a task as completed.",
                "name": "complete_task"
              },
              {
                "args": [
                  "user_id",
                  "task_id"
                ],
                "docstring": "Restore a completed task to active status.",
                "name": "restore_task"
              },
              {
                "args": [
                  "user_id",
                  "task_id"
                ],
                "docstring": "Delete a task (permanently remove it).",
                "name": "delete_task"
              },
              {
                "args": [
                  "user_id",
                  "task_id"
                ],
                "docstring": "Get a specific task by ID.",
                "name": "get_task_by_id"
              },
              {
                "args": [
                  "user_id",
                  "days_ahead"
                ],
                "docstring": "Get tasks due within the specified number of days.",
                "name": "get_tasks_due_soon"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Check if task management is enabled for a user.",
                "name": "are_tasks_enabled"
              },
              {
                "args": [
                  "user_id",
                  "task_id",
                  "reminder_periods"
                ],
                "docstring": "Schedule reminders for a specific task based on its reminder periods.",
                "name": "schedule_task_reminders"
              },
              {
                "args": [
                  "user_id",
                  "task_id"
                ],
                "docstring": "Clean up all reminders for a specific task.",
                "name": "cleanup_task_reminders"
              },
              {
                "args": [
                  "user_id",
                  "tag"
                ],
                "docstring": "Add a new tag to the user's task settings.",
                "name": "add_user_task_tag"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Set up default task tags for a user when task management is first enabled.",
                "name": "setup_default_task_tags"
              },
              {
                "args": [
                  "user_id",
                  "tag"
                ],
                "docstring": "Remove a tag from the user's task settings.",
                "name": "remove_user_task_tag"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Get task statistics for a user.",
                "name": "get_user_task_stats"
              },
              {
                "args": [
                  "user_id",
                  "completed_task"
                ],
                "docstring": "Create the next instance of a recurring task when the current one is completed.",
                "name": "_create_next_recurring_task_instance"
              },
              {
                "args": [
                  "completion_date",
                  "recurrence_pattern",
                  "recurrence_interval",
                  "repeat_after_completion"
                ],
                "docstring": "Calculate the next due date for a recurring task.",
                "name": "_calculate_next_due_date"
              }
            ]
          },
          "tests/behavior/test_account_management_real_behavior.py": {
            "classes": [],
            "functions": [
              {
                "args": [
                  "test_data_dir"
                ],
                "docstring": "Create isolated test environment with temporary directories",
                "name": "setup_test_environment"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir",
                  "base_state"
                ],
                "docstring": "Create test user data with specific base state using centralized utilities",
                "name": "create_test_user_data"
              },
              {
                "args": [
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test actual user data loading with file verification",
                "name": "test_user_data_loading_real_behavior"
              },
              {
                "args": [
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test actual feature enablement with file creation/deletion",
                "name": "test_feature_enablement_real_behavior"
              },
              {
                "args": [
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test actual category management with file persistence",
                "name": "test_category_management_real_behavior"
              },
              {
                "args": [
                  "test_data_dir"
                ],
                "docstring": "Test actual schedule period management with file persistence",
                "name": "test_schedule_period_management_real_behavior"
              },
              {
                "args": [
                  "test_data_dir"
                ],
                "docstring": "Test complex integration scenarios with multiple operations",
                "name": "test_integration_scenarios_real_behavior"
              },
              {
                "args": [
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test data consistency across multiple operations",
                "name": "test_data_consistency_real_behavior"
              },
              {
                "args": [
                  "test_dir"
                ],
                "docstring": "Clean up test environment",
                "name": "cleanup_test_environment"
              },
              {
                "args": [],
                "docstring": "Run all real behavior tests",
                "name": "main"
              }
            ]
          },
          "tests/behavior/test_ai_chatbot_behavior.py": {
            "classes": [
              {
                "docstring": "Test AI chatbot real behavior and side effects.",
                "methods": [
                  "test_singleton_behavior_creates_single_instance",
                  "test_prompt_manager_creates_actual_file",
                  "test_response_cache_actually_stores_and_retrieves_data",
                  "test_response_cache_cleanup_actually_removes_entries",
                  "test_ai_chatbot_generates_actual_responses",
                  "test_ai_chatbot_handles_api_failures_gracefully",
                  "test_ai_chatbot_tracks_conversation_history",
                  "test_ai_chatbot_uses_user_context_for_personalization",
                  "test_ai_chatbot_adaptive_timeout_responds_to_system_resources",
                  "test_ai_chatbot_command_parsing_creates_structured_output",
                  "test_ai_chatbot_prompt_optimization_improves_performance",
                  "test_ai_chatbot_status_reporting_actual_system_state",
                  "test_ai_chatbot_system_prompt_integration_test_actual_functionality",
                  "test_ai_chatbot_error_handling_preserves_system_stability",
                  "test_ai_chatbot_conversation_manager_integration",
                  "test_ai_chatbot_user_context_manager_integration",
                  "test_ai_chatbot_response_tracking_integration",
                  "test_ai_chatbot_performance_under_load",
                  "test_ai_chatbot_cache_performance_improvement",
                  "test_ai_chatbot_cleanup_and_resource_management"
                ],
                "name": "TestAIChatBotBehavior"
              },
              {
                "docstring": "Test AI chatbot integration with other system components.",
                "methods": [
                  "test_ai_chatbot_with_real_user_data",
                  "test_ai_chatbot_error_recovery_with_real_files",
                  "test_ai_chatbot_concurrent_access_safety"
                ],
                "name": "TestAIChatBotIntegration"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot singleton actually creates only one instance.",
                "name": "test_singleton_behavior_creates_single_instance"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that prompt manager actually creates and manages prompt files.",
                "name": "test_prompt_manager_creates_actual_file"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that response cache actually stores and retrieves data.",
                "name": "test_response_cache_actually_stores_and_retrieves_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that response cache cleanup actually removes old entries.",
                "name": "test_response_cache_cleanup_actually_removes_entries"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot actually generates responses with real behavior.",
                "name": "test_ai_chatbot_generates_actual_responses"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot handles API failures and provides fallbacks.",
                "name": "test_ai_chatbot_handles_api_failures_gracefully"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot actually tracks conversation history.",
                "name": "test_ai_chatbot_tracks_conversation_history"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot actually uses user context for personalized responses.",
                "name": "test_ai_chatbot_uses_user_context_for_personalization"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot adaptive timeout actually responds to system resources.",
                "name": "test_ai_chatbot_adaptive_timeout_responds_to_system_resources"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot command parsing actually creates structured output.",
                "name": "test_ai_chatbot_command_parsing_creates_structured_output"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot prompt optimization actually improves performance.",
                "name": "test_ai_chatbot_prompt_optimization_improves_performance"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot status reporting reflects actual system state.",
                "name": "test_ai_chatbot_status_reporting_actual_system_state"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot system prompt integration test actually verifies functionality.",
                "name": "test_ai_chatbot_system_prompt_integration_test_actual_functionality"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot error handling actually preserves system stability.",
                "name": "test_ai_chatbot_error_handling_preserves_system_stability"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot integrates properly with conversation manager.",
                "name": "test_ai_chatbot_conversation_manager_integration"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot integrates properly with user context manager.",
                "name": "test_ai_chatbot_user_context_manager_integration"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot integrates properly with response tracking.",
                "name": "test_ai_chatbot_response_tracking_integration"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot performs well under load.",
                "name": "test_ai_chatbot_performance_under_load"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot cache actually improves performance.",
                "name": "test_ai_chatbot_cache_performance_improvement"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot properly manages resources and cleanup.",
                "name": "test_ai_chatbot_cleanup_and_resource_management"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test AI chatbot with real user data files.",
                "name": "test_ai_chatbot_with_real_user_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test AI chatbot error recovery with real file operations.",
                "name": "test_ai_chatbot_error_recovery_with_real_files"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that AI chatbot handles concurrent access safely.",
                "name": "test_ai_chatbot_concurrent_access_safety"
              },
              {
                "args": [
                  "thread_id"
                ],
                "docstring": "",
                "name": "generate_response"
              }
            ]
          },
          "tests/behavior/test_ai_context_builder_behavior.py": {
            "classes": [
              {
                "docstring": "Test real behavior of context builder functionality.",
                "methods": [
                  "test_context_builder_initialization_creates_components",
                  "test_build_user_context_creates_structured_context_data",
                  "test_build_user_context_includes_user_data_from_files",
                  "test_build_user_context_includes_conversation_history",
                  "test_build_user_context_handles_missing_user_data_gracefully",
                  "test_build_user_context_includes_current_time",
                  "test_build_user_context_includes_recent_checkins",
                  "test_build_user_context_without_conversation_history",
                  "test_build_user_context_handles_error_conditions",
                  "test_build_user_context_creates_fresh_timestamp",
                  "test_build_user_context_handles_empty_user_data",
                  "test_build_user_context_handles_corrupted_user_data",
                  "test_build_user_context_handles_missing_files",
                  "test_build_user_context_handles_empty_files",
                  "test_build_user_context_handles_long_user_id",
                  "test_build_user_context_handles_special_characters_in_user_id",
                  "test_build_user_context_handles_unicode_user_id",
                  "test_build_user_context_handles_concurrent_access",
                  "test_build_user_context_handles_rapid_calls",
                  "test_build_user_context_handles_large_user_data"
                ],
                "name": "TestContextBuilderBehavior"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that context builder initialization creates required components.",
                "name": "test_context_builder_initialization_creates_components"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context creates actual structured context data.",
                "name": "test_build_user_context_creates_structured_context_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context actually reads and includes user data from files.",
                "name": "test_build_user_context_includes_user_data_from_files"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context includes actual conversation history.",
                "name": "test_build_user_context_includes_conversation_history"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context handles missing user data gracefully.",
                "name": "test_build_user_context_handles_missing_user_data_gracefully"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context includes current time information.",
                "name": "test_build_user_context_includes_current_time"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context includes recent checkins information.",
                "name": "test_build_user_context_includes_recent_checkins"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context can exclude conversation history.",
                "name": "test_build_user_context_without_conversation_history"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context handles error conditions gracefully.",
                "name": "test_build_user_context_handles_error_conditions"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context creates fresh timestamp for each call.",
                "name": "test_build_user_context_creates_fresh_timestamp"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context handles empty user data gracefully.",
                "name": "test_build_user_context_handles_empty_user_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context handles corrupted user data gracefully.",
                "name": "test_build_user_context_handles_corrupted_user_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context handles missing user files gracefully.",
                "name": "test_build_user_context_handles_missing_files"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context handles empty user files gracefully.",
                "name": "test_build_user_context_handles_empty_files"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context handles long user IDs correctly.",
                "name": "test_build_user_context_handles_long_user_id"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context handles special characters in user IDs.",
                "name": "test_build_user_context_handles_special_characters_in_user_id"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context handles unicode characters in user IDs.",
                "name": "test_build_user_context_handles_unicode_user_id"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context handles concurrent access safely.",
                "name": "test_build_user_context_handles_concurrent_access"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context handles rapid successive calls.",
                "name": "test_build_user_context_handles_rapid_calls"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that build_user_context handles large user data efficiently.",
                "name": "test_build_user_context_handles_large_user_data"
              },
              {
                "args": [],
                "docstring": "",
                "name": "build_context"
              }
            ]
          },
          "tests/behavior/test_ai_context_builder_coverage_expansion.py": {
            "classes": [
              {
                "docstring": "Test coverage expansion for ContextBuilder module.",
                "methods": [
                  "test_analyze_context_with_empty_checkins",
                  "test_analyze_context_with_checkin_data",
                  "test_analyze_context_with_missing_data",
                  "test_determine_trend_improving",
                  "test_determine_trend_declining",
                  "test_determine_trend_stable",
                  "test_determine_trend_insufficient_data",
                  "test_calculate_wellness_score_all_factors",
                  "test_calculate_wellness_score_no_factors",
                  "test_generate_insights_excellent_breakfast",
                  "test_generate_insights_poor_breakfast",
                  "test_generate_insights_positive_mood",
                  "test_generate_insights_low_mood",
                  "test_generate_insights_energy_patterns",
                  "test_generate_insights_dental_hygiene",
                  "test_create_context_prompt_with_profile",
                  "test_create_context_prompt_with_user_context",
                  "test_create_context_prompt_with_analysis",
                  "test_create_task_context",
                  "test_create_checkin_context",
                  "test_get_context_builder_singleton",
                  "test_analyze_context_error_handling",
                  "test_create_context_prompt_error_handling",
                  "test_create_task_context_error_handling",
                  "test_create_checkin_context_error_handling"
                ],
                "name": "TestContextBuilderCoverageExpansion"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test analyze_context with empty recent checkins.",
                "name": "test_analyze_context_with_empty_checkins"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test analyze_context with actual checkin data.",
                "name": "test_analyze_context_with_checkin_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test analyze_context with missing data fields.",
                "name": "test_analyze_context_with_missing_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test _determine_trend with improving values.",
                "name": "test_determine_trend_improving"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test _determine_trend with declining values.",
                "name": "test_determine_trend_declining"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test _determine_trend with stable values.",
                "name": "test_determine_trend_stable"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test _determine_trend with insufficient data.",
                "name": "test_determine_trend_insufficient_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test _calculate_wellness_score with all factors present.",
                "name": "test_calculate_wellness_score_all_factors"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test _calculate_wellness_score with no factors present.",
                "name": "test_calculate_wellness_score_no_factors"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test _generate_insights with excellent breakfast rate.",
                "name": "test_generate_insights_excellent_breakfast"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test _generate_insights with poor breakfast rate.",
                "name": "test_generate_insights_poor_breakfast"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test _generate_insights with positive mood.",
                "name": "test_generate_insights_positive_mood"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test _generate_insights with low mood.",
                "name": "test_generate_insights_low_mood"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test _generate_insights with energy patterns.",
                "name": "test_generate_insights_energy_patterns"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test _generate_insights with dental hygiene patterns.",
                "name": "test_generate_insights_dental_hygiene"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test create_context_prompt with user profile data.",
                "name": "test_create_context_prompt_with_profile"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test create_context_prompt with user context data.",
                "name": "test_create_context_prompt_with_user_context"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test create_context_prompt with pre-computed analysis.",
                "name": "test_create_context_prompt_with_analysis"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test create_task_context method.",
                "name": "test_create_task_context"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test create_checkin_context method.",
                "name": "test_create_checkin_context"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test get_context_builder singleton behavior.",
                "name": "test_get_context_builder_singleton"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test analyze_context error handling.",
                "name": "test_analyze_context_error_handling"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test create_context_prompt error handling.",
                "name": "test_create_context_prompt_error_handling"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test create_task_context error handling.",
                "name": "test_create_task_context_error_handling"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test create_checkin_context error handling.",
                "name": "test_create_checkin_context_error_handling"
              }
            ]
          },
          "tests/behavior/test_ai_conversation_history_behavior.py": {
            "classes": [
              {
                "docstring": "Test real behavior of conversation history functionality.",
                "methods": [
                  "test_conversation_history_initialization_creates_components",
                  "test_start_session_creates_actual_session",
                  "test_add_message_persists_to_session",
                  "test_add_message_appends_to_existing_session",
                  "test_get_recent_messages_returns_actual_data",
                  "test_get_recent_messages_handles_empty_history",
                  "test_clear_history_removes_session_data",
                  "test_get_conversation_summary_returns_actual_summary",
                  "test_get_conversation_summary_handles_empty_history",
                  "test_add_message_includes_timestamp",
                  "test_add_message_validates_role",
                  "test_add_message_validates_content",
                  "test_get_recent_messages_respects_limit",
                  "test_get_recent_messages_handles_zero_limit",
                  "test_get_recent_messages_handles_negative_limit",
                  "test_conversation_history_handles_concurrent_access",
                  "test_conversation_history_handles_rapid_access",
                  "test_conversation_history_handles_large_messages",
                  "test_conversation_history_handles_special_characters",
                  "test_conversation_history_handles_unicode_messages",
                  "test_end_session_terminates_active_session",
                  "test_get_statistics_returns_actual_data",
                  "test_delete_session_removes_specific_session",
                  "test_get_history_returns_all_sessions"
                ],
                "name": "TestConversationHistoryBehavior"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that conversation history initialization creates required components.",
                "name": "test_conversation_history_initialization_creates_components"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that start_session creates actual session data.",
                "name": "test_start_session_creates_actual_session"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that add_message actually persists messages to session.",
                "name": "test_add_message_persists_to_session"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that add_message appends to existing session.",
                "name": "test_add_message_appends_to_existing_session"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that get_recent_messages returns actual session data.",
                "name": "test_get_recent_messages_returns_actual_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that get_recent_messages handles empty conversation history.",
                "name": "test_get_recent_messages_handles_empty_history"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that clear_history removes actual session data.",
                "name": "test_clear_history_removes_session_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that get_conversation_summary returns actual conversation summary.",
                "name": "test_get_conversation_summary_returns_actual_summary"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that get_conversation_summary handles empty conversation history.",
                "name": "test_get_conversation_summary_handles_empty_history"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that add_message includes timestamp in message data.",
                "name": "test_add_message_includes_timestamp"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that add_message validates role parameter.",
                "name": "test_add_message_validates_role"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that add_message validates content parameter.",
                "name": "test_add_message_validates_content"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that get_recent_messages respects the count limit.",
                "name": "test_get_recent_messages_respects_limit"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that get_recent_messages handles zero count gracefully.",
                "name": "test_get_recent_messages_handles_zero_limit"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that get_recent_messages handles negative limit.",
                "name": "test_get_recent_messages_handles_negative_limit"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that conversation history handles concurrent access safely.",
                "name": "test_conversation_history_handles_concurrent_access"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that conversation history handles rapid successive access.",
                "name": "test_conversation_history_handles_rapid_access"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that conversation history handles large message content.",
                "name": "test_conversation_history_handles_large_messages"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that conversation history handles special characters in messages.",
                "name": "test_conversation_history_handles_special_characters"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that conversation history handles unicode messages.",
                "name": "test_conversation_history_handles_unicode_messages"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that end_session terminates the active session.",
                "name": "test_end_session_terminates_active_session"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that get_statistics returns actual conversation statistics.",
                "name": "test_get_statistics_returns_actual_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that delete_session removes a specific session.",
                "name": "test_delete_session_removes_specific_session"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that get_history returns all sessions for a user.",
                "name": "test_get_history_returns_all_sessions"
              },
              {
                "args": [],
                "docstring": "",
                "name": "add_message"
              }
            ]
          },
          "tests/behavior/test_auto_cleanup_behavior.py": {
            "classes": [
              {
                "docstring": "Test timestamp tracking functionality with real behavior verification.",
                "methods": [
                  "temp_tracker_file",
                  "test_get_last_cleanup_timestamp_no_file_real_behavior",
                  "test_get_last_cleanup_timestamp_with_file_real_behavior",
                  "test_update_cleanup_timestamp_real_behavior"
                ],
                "name": "TestAutoCleanupTimestampBehavior"
              },
              {
                "docstring": "Test cleanup logic and decision making with real behavior verification.",
                "methods": [
                  "temp_tracker_file",
                  "test_should_run_cleanup_never_cleaned_real_behavior",
                  "test_should_run_cleanup_recent_cleanup_real_behavior",
                  "test_should_run_cleanup_old_cleanup_real_behavior",
                  "test_should_run_cleanup_custom_interval_real_behavior"
                ],
                "name": "TestAutoCleanupLogicBehavior"
              },
              {
                "docstring": "Test file discovery functionality with real behavior verification.",
                "methods": [
                  "temp_test_dir",
                  "test_find_pycache_dirs_real_behavior",
                  "test_find_pyc_files_real_behavior",
                  "test_calculate_cache_size_real_behavior",
                  "test_calculate_cache_size_large_cache_scenario_real_behavior",
                  "test_calculate_cache_size_file_corruption_handling_real_behavior",
                  "test_calculate_cache_size_nonexistent_files_real_behavior",
                  "test_calculate_cache_size_empty_inputs_real_behavior",
                  "test_calculate_cache_size_permission_error_simulation_real_behavior",
                  "test_calculate_cache_size_nested_directory_structure_real_behavior",
                  "test_calculate_cache_size_concurrent_file_changes_real_behavior"
                ],
                "name": "TestAutoCleanupFileDiscoveryBehavior"
              },
              {
                "docstring": "Test cleanup status functionality with real behavior verification.",
                "methods": [
                  "temp_tracker_file",
                  "test_get_cleanup_status_never_cleaned_real_behavior",
                  "test_get_cleanup_status_recent_cleanup_real_behavior",
                  "test_get_cleanup_status_overdue_cleanup_real_behavior",
                  "test_get_cleanup_status_exactly_30_days_real_behavior",
                  "test_get_cleanup_status_29_days_real_behavior",
                  "test_get_cleanup_status_31_days_real_behavior",
                  "test_get_cleanup_status_very_recent_cleanup_real_behavior",
                  "test_get_cleanup_status_very_old_cleanup_real_behavior",
                  "test_get_cleanup_status_corrupted_tracker_file_real_behavior",
                  "test_get_cleanup_status_empty_tracker_file_real_behavior",
                  "test_get_cleanup_status_missing_timestamp_field_real_behavior",
                  "test_get_cleanup_status_invalid_timestamp_real_behavior"
                ],
                "name": "TestAutoCleanupStatusBehavior"
              },
              {
                "docstring": "Test integrated cleanup functionality with real behavior verification.",
                "methods": [
                  "temp_test_environment",
                  "test_perform_cleanup_real_behavior",
                  "test_auto_cleanup_if_needed_real_behavior",
                  "test_auto_cleanup_if_needed_not_needed_real_behavior"
                ],
                "name": "TestAutoCleanupIntegrationBehavior"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Create temporary tracker file for testing.",
                "name": "temp_tracker_file"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test getting timestamp when no tracker file exists.",
                "name": "test_get_last_cleanup_timestamp_no_file_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test getting timestamp from existing tracker file.",
                "name": "test_get_last_cleanup_timestamp_with_file_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test updating cleanup timestamp creates file with correct data.",
                "name": "test_update_cleanup_timestamp_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Create temporary tracker file for testing.",
                "name": "temp_tracker_file"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cleanup decision when never cleaned before.",
                "name": "test_should_run_cleanup_never_cleaned_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cleanup decision when recently cleaned.",
                "name": "test_should_run_cleanup_recent_cleanup_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cleanup decision when last cleanup was old.",
                "name": "test_should_run_cleanup_old_cleanup_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cleanup decision with custom interval.",
                "name": "test_should_run_cleanup_custom_interval_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Create temporary test directory with cache files.",
                "name": "temp_test_dir"
              },
              {
                "args": [
                  "self",
                  "temp_test_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test finding __pycache__ directories.",
                "name": "test_find_pycache_dirs_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_test_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test finding .pyc files.",
                "name": "test_find_pyc_files_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_test_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test calculating cache size.",
                "name": "test_calculate_cache_size_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_test_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test calculating cache size with large number of files.",
                "name": "test_calculate_cache_size_large_cache_scenario_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_test_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cache size calculation when files are corrupted or inaccessible.",
                "name": "test_calculate_cache_size_file_corruption_handling_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_test_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cache size calculation with non-existent files.",
                "name": "test_calculate_cache_size_nonexistent_files_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_test_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cache size calculation with empty inputs.",
                "name": "test_calculate_cache_size_empty_inputs_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_test_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cache size calculation when file access fails.",
                "name": "test_calculate_cache_size_permission_error_simulation_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_test_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cache size calculation with deeply nested directories.",
                "name": "test_calculate_cache_size_nested_directory_structure_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_test_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cache size calculation when files change during calculation.",
                "name": "test_calculate_cache_size_concurrent_file_changes_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Create temporary tracker file for testing.",
                "name": "temp_tracker_file"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test status when never cleaned before.",
                "name": "test_get_cleanup_status_never_cleaned_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test status when recently cleaned.",
                "name": "test_get_cleanup_status_recent_cleanup_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test status when cleanup is overdue.",
                "name": "test_get_cleanup_status_overdue_cleanup_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test status when cleanup was exactly 30 days ago (boundary condition).",
                "name": "test_get_cleanup_status_exactly_30_days_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test status when cleanup was 29 days ago (just under threshold).",
                "name": "test_get_cleanup_status_29_days_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test status when cleanup was 31 days ago (just over threshold).",
                "name": "test_get_cleanup_status_31_days_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test status when cleanup was very recent (1 day ago).",
                "name": "test_get_cleanup_status_very_recent_cleanup_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test status when cleanup was very old (100+ days ago).",
                "name": "test_get_cleanup_status_very_old_cleanup_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test status when tracker file contains invalid JSON.",
                "name": "test_get_cleanup_status_corrupted_tracker_file_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test status when tracker file is empty.",
                "name": "test_get_cleanup_status_empty_tracker_file_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test status when tracker file is missing timestamp field.",
                "name": "test_get_cleanup_status_missing_timestamp_field_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_tracker_file"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test status when tracker file contains invalid timestamp.",
                "name": "test_get_cleanup_status_invalid_timestamp_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Create temporary test environment with cache files and tracker.",
                "name": "temp_test_environment"
              },
              {
                "args": [
                  "self",
                  "temp_test_environment"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test performing actual cleanup.",
                "name": "test_perform_cleanup_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_test_environment"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test automatic cleanup decision and execution.",
                "name": "test_auto_cleanup_if_needed_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_test_environment"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test auto cleanup when not needed.",
                "name": "test_auto_cleanup_if_needed_not_needed_real_behavior"
              },
              {
                "args": [
                  "path"
                ],
                "docstring": "",
                "name": "mock_walk_with_error"
              },
              {
                "args": [
                  "path"
                ],
                "docstring": "",
                "name": "mock_exists_with_changes"
              }
            ]
          },
          "tests/behavior/test_backup_manager_behavior.py": {
            "classes": [
              {
                "docstring": "Test BackupManager behavior with real file system operations.",
                "methods": [
                  "setup_backup_manager",
                  "_create_test_config_files",
                  "_cleanup_test_files",
                  "test_backup_manager_initialization_real_behavior",
                  "test_create_backup_with_user_data_real_behavior",
                  "test_create_backup_with_config_files_real_behavior",
                  "test_create_backup_with_all_components_real_behavior",
                  "test_backup_rotation_by_count_real_behavior",
                  "test_backup_rotation_by_age_real_behavior",
                  "test_list_backups_real_behavior",
                  "test_validate_backup_real_behavior",
                  "test_validate_backup_with_corrupted_file_real_behavior",
                  "test_validate_backup_with_missing_file_real_behavior",
                  "test_backup_creation_and_validation_real_behavior",
                  "test_restore_backup_with_config_files_real_behavior",
                  "test_restore_backup_with_nonexistent_file_real_behavior",
                  "test_ensure_backup_directory_real_behavior",
                  "test_create_automatic_backup_real_behavior",
                  "test_validate_system_state_real_behavior",
                  "test_validate_system_state_with_missing_user_dir_real_behavior",
                  "test_perform_safe_operation_real_behavior",
                  "test_perform_safe_operation_with_failure_real_behavior",
                  "test_backup_manager_with_large_user_data_real_behavior",
                  "test_backup_manager_error_handling_real_behavior",
                  "test_backup_manager_with_empty_user_directory_real_behavior"
                ],
                "name": "TestBackupManagerBehavior"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Set up backup manager with test data directory.",
                "name": "setup_backup_manager"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create test configuration files.",
                "name": "_create_test_config_files"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Clean up test files and directories.",
                "name": "_cleanup_test_files"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test BackupManager initialization creates backup directory.",
                "name": "test_backup_manager_initialization_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup creation includes user data.",
                "name": "test_create_backup_with_user_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup creation includes configuration files.",
                "name": "test_create_backup_with_config_files_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup creation with all components.",
                "name": "test_create_backup_with_all_components_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup rotation removes old backups by count.",
                "name": "test_backup_rotation_by_count_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup rotation removes old backups by age.",
                "name": "test_backup_rotation_by_age_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test listing backups returns correct metadata.",
                "name": "test_list_backups_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup validation with valid backup.",
                "name": "test_validate_backup_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup validation with corrupted file.",
                "name": "test_validate_backup_with_corrupted_file_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup validation with missing file.",
                "name": "test_validate_backup_with_missing_file_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup creation and validation functionality.",
                "name": "test_backup_creation_and_validation_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup restoration with configuration files.",
                "name": "test_restore_backup_with_config_files_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup restoration with non-existent file.",
                "name": "test_restore_backup_with_nonexistent_file_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup directory creation.",
                "name": "test_ensure_backup_directory_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test automatic backup creation.",
                "name": "test_create_automatic_backup_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test system state validation.",
                "name": "test_validate_system_state_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test system state validation with missing user directory.",
                "name": "test_validate_system_state_with_missing_user_dir_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test safe operation with backup and rollback.",
                "name": "test_perform_safe_operation_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test safe operation with failure and rollback.",
                "name": "test_perform_safe_operation_with_failure_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup manager with large user data.",
                "name": "test_backup_manager_with_large_user_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup manager error handling.",
                "name": "test_backup_manager_error_handling_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup manager with empty user directory.",
                "name": "test_backup_manager_with_empty_user_directory_real_behavior"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_operation"
              },
              {
                "args": [],
                "docstring": "",
                "name": "failing_operation"
              }
            ]
          },
          "tests/behavior/test_checkin_analytics_behavior.py": {
            "classes": [
              {
                "docstring": "Test CheckinAnalytics initialization with real behavior verification.",
                "methods": [
                  "test_analytics_initialization_real_behavior"
                ],
                "name": "TestCheckinAnalyticsInitializationBehavior"
              },
              {
                "docstring": "Test mood trends analysis with real behavior verification.",
                "methods": [
                  "analytics",
                  "mock_checkins_with_mood",
                  "test_mood_trends_no_data_real_behavior",
                  "test_mood_trends_with_data_real_behavior",
                  "test_mood_trends_invalid_mood_data_real_behavior"
                ],
                "name": "TestCheckinAnalyticsMoodTrendsBehavior"
              },
              {
                "docstring": "Test habit analysis with real behavior verification.",
                "methods": [
                  "analytics",
                  "mock_checkins_with_habits",
                  "test_habit_analysis_no_data_real_behavior",
                  "test_habit_analysis_with_data_real_behavior"
                ],
                "name": "TestCheckinAnalyticsHabitAnalysisBehavior"
              },
              {
                "docstring": "Test sleep analysis with real behavior verification.",
                "methods": [
                  "analytics",
                  "mock_checkins_with_sleep",
                  "test_sleep_analysis_no_data_real_behavior",
                  "test_sleep_analysis_with_data_real_behavior"
                ],
                "name": "TestCheckinAnalyticsSleepAnalysisBehavior"
              },
              {
                "docstring": "Test wellness score calculation with real behavior verification.",
                "methods": [
                  "analytics",
                  "mock_checkins_for_wellness",
                  "test_wellness_score_no_data_real_behavior",
                  "test_wellness_score_with_data_real_behavior"
                ],
                "name": "TestCheckinAnalyticsWellnessScoreBehavior"
              },
              {
                "docstring": "Test check-in history functionality with real behavior verification.",
                "methods": [
                  "analytics",
                  "mock_checkins_for_history",
                  "test_checkin_history_no_data_real_behavior",
                  "test_checkin_history_with_data_real_behavior"
                ],
                "name": "TestCheckinAnalyticsHistoryBehavior"
              },
              {
                "docstring": "Test completion rate calculation with real behavior verification.",
                "methods": [
                  "analytics",
                  "mock_checkins_for_completion",
                  "test_completion_rate_no_data_real_behavior",
                  "test_completion_rate_with_data_real_behavior"
                ],
                "name": "TestCheckinAnalyticsCompletionRateBehavior"
              },
              {
                "docstring": "Test task weekly stats with real behavior verification.",
                "methods": [
                  "analytics",
                  "mock_checkins_for_tasks",
                  "test_task_weekly_stats_no_data_real_behavior",
                  "test_task_weekly_stats_with_data_real_behavior"
                ],
                "name": "TestCheckinAnalyticsTaskStatsBehavior"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test CheckinAnalytics can be initialized.",
                "name": "test_analytics_initialization_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create CheckinAnalytics instance for testing.",
                "name": "analytics"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create mock check-in data with mood information.",
                "name": "mock_checkins_with_mood"
              },
              {
                "args": [
                  "self",
                  "analytics"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test mood trends with no check-in data.",
                "name": "test_mood_trends_no_data_real_behavior"
              },
              {
                "args": [
                  "self",
                  "analytics",
                  "mock_checkins_with_mood"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test mood trends analysis with valid data.",
                "name": "test_mood_trends_with_data_real_behavior"
              },
              {
                "args": [
                  "self",
                  "analytics"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test mood trends with invalid mood data.",
                "name": "test_mood_trends_invalid_mood_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create CheckinAnalytics instance for testing.",
                "name": "analytics"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create mock check-in data with habit information.",
                "name": "mock_checkins_with_habits"
              },
              {
                "args": [
                  "self",
                  "analytics"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test habit analysis with no check-in data.",
                "name": "test_habit_analysis_no_data_real_behavior"
              },
              {
                "args": [
                  "self",
                  "analytics",
                  "mock_checkins_with_habits"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test habit analysis with valid data.",
                "name": "test_habit_analysis_with_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create CheckinAnalytics instance for testing.",
                "name": "analytics"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create mock check-in data with sleep information.",
                "name": "mock_checkins_with_sleep"
              },
              {
                "args": [
                  "self",
                  "analytics"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test sleep analysis with no check-in data.",
                "name": "test_sleep_analysis_no_data_real_behavior"
              },
              {
                "args": [
                  "self",
                  "analytics",
                  "mock_checkins_with_sleep"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test sleep analysis with valid data.",
                "name": "test_sleep_analysis_with_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create CheckinAnalytics instance for testing.",
                "name": "analytics"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create mock check-in data for wellness scoring.",
                "name": "mock_checkins_for_wellness"
              },
              {
                "args": [
                  "self",
                  "analytics"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test wellness score with no check-in data.",
                "name": "test_wellness_score_no_data_real_behavior"
              },
              {
                "args": [
                  "self",
                  "analytics",
                  "mock_checkins_for_wellness"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test wellness score calculation with valid data.",
                "name": "test_wellness_score_with_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create CheckinAnalytics instance for testing.",
                "name": "analytics"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create mock check-in data for history testing.",
                "name": "mock_checkins_for_history"
              },
              {
                "args": [
                  "self",
                  "analytics"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test check-in history with no data.",
                "name": "test_checkin_history_no_data_real_behavior"
              },
              {
                "args": [
                  "self",
                  "analytics",
                  "mock_checkins_for_history"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test check-in history with valid data.",
                "name": "test_checkin_history_with_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create CheckinAnalytics instance for testing.",
                "name": "analytics"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create mock check-in data for completion rate testing.",
                "name": "mock_checkins_for_completion"
              },
              {
                "args": [
                  "self",
                  "analytics"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test completion rate with no data.",
                "name": "test_completion_rate_no_data_real_behavior"
              },
              {
                "args": [
                  "self",
                  "analytics",
                  "mock_checkins_for_completion"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test completion rate calculation with valid data.",
                "name": "test_completion_rate_with_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create CheckinAnalytics instance for testing.",
                "name": "analytics"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create mock check-in data for task stats testing.",
                "name": "mock_checkins_for_tasks"
              },
              {
                "args": [
                  "self",
                  "analytics"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test task weekly stats with no data.",
                "name": "test_task_weekly_stats_no_data_real_behavior"
              },
              {
                "args": [
                  "self",
                  "analytics",
                  "mock_checkins_for_tasks"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test task weekly stats calculation with valid data.",
                "name": "test_task_weekly_stats_with_data_real_behavior"
              }
            ]
          },
          "tests/behavior/test_command_parser_coverage_expansion_phase3_simple.py": {
            "classes": [
              {
                "docstring": "Test coverage expansion for command_parser.py - Phase 3 Simple",
                "methods": [
                  "setup_method",
                  "test_parsing_result_initialization",
                  "test_parser_initialization",
                  "test_get_suggestions_empty_input",
                  "test_get_suggestions_task_keywords",
                  "test_get_suggestions_checkin_keywords",
                  "test_get_suggestions_profile_keywords",
                  "test_get_suggestions_schedule_keywords",
                  "test_get_suggestions_analytics_keywords",
                  "test_get_suggestions_unknown_keywords",
                  "test_extract_task_entities_basic",
                  "test_extract_task_entities_with_priority",
                  "test_extract_task_entities_with_due_date",
                  "test_extract_task_entities_complex",
                  "test_extract_task_entities_no_match",
                  "test_extract_task_name_from_context_basic",
                  "test_extract_task_name_from_context_complex",
                  "test_extract_task_name_from_context_no_match",
                  "test_extract_update_entities_priority",
                  "test_extract_update_entities_due_date",
                  "test_extract_update_entities_due_short",
                  "test_extract_update_entities_complex",
                  "test_extract_update_entities_no_match",
                  "test_extract_intent_from_ai_response_create_task",
                  "test_extract_intent_from_ai_response_list_tasks",
                  "test_extract_intent_from_ai_response_complete_task",
                  "test_extract_intent_from_ai_response_start_checkin",
                  "test_extract_intent_from_ai_response_no_match",
                  "test_extract_intent_from_ai_response_case_insensitive",
                  "test_parse_command_function",
                  "test_parse_command_function_empty",
                  "test_parse_command_function_none",
                  "test_get_enhanced_command_parser_singleton",
                  "test_parser_parse_method",
                  "test_parser_parse_method_empty",
                  "test_parser_parse_method_none",
                  "test_parser_parse_method_whitespace",
                  "test_parser_with_mock_ai_chatbot",
                  "test_parser_with_mock_interaction_handlers",
                  "test_error_handling_in_parsing",
                  "test_pattern_matching_edge_cases",
                  "test_parser_integration_with_real_inputs",
                  "test_parser_suggestions_integration",
                  "test_parser_entity_extraction_integration",
                  "test_parser_ai_response_processing",
                  "test_parser_initialization_components",
                  "test_parser_method_signatures",
                  "test_parser_robustness"
                ],
                "name": "TestCommandParserCoverageExpansionPhase3Simple"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Set up test fixtures",
                "name": "setup_method"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test ParsingResult initialization",
                "name": "test_parsing_result_initialization"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test EnhancedCommandParser initialization",
                "name": "test_parser_initialization"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test get_suggestions with empty input",
                "name": "test_get_suggestions_empty_input"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test get_suggestions with task-related keywords",
                "name": "test_get_suggestions_task_keywords"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test get_suggestions with check-in related keywords",
                "name": "test_get_suggestions_checkin_keywords"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test get_suggestions with profile-related keywords",
                "name": "test_get_suggestions_profile_keywords"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test get_suggestions with schedule-related keywords",
                "name": "test_get_suggestions_schedule_keywords"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test get_suggestions with analytics-related keywords",
                "name": "test_get_suggestions_analytics_keywords"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test get_suggestions with unknown keywords",
                "name": "test_get_suggestions_unknown_keywords"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_task_entities with basic input",
                "name": "test_extract_task_entities_basic"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_task_entities with priority keywords",
                "name": "test_extract_task_entities_with_priority"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_task_entities with due date",
                "name": "test_extract_task_entities_with_due_date"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_task_entities with complex input",
                "name": "test_extract_task_entities_complex"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_task_entities with no matching patterns",
                "name": "test_extract_task_entities_no_match"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_task_name_from_context with basic input",
                "name": "test_extract_task_name_from_context_basic"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_task_name_from_context with complex input",
                "name": "test_extract_task_name_from_context_complex"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_task_name_from_context with no matching patterns",
                "name": "test_extract_task_name_from_context_no_match"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_update_entities with priority",
                "name": "test_extract_update_entities_priority"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_update_entities with due date",
                "name": "test_extract_update_entities_due_date"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_update_entities with short due format",
                "name": "test_extract_update_entities_due_short"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_update_entities with multiple entities",
                "name": "test_extract_update_entities_complex"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_update_entities with no matching patterns",
                "name": "test_extract_update_entities_no_match"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_intent_from_ai_response with create task",
                "name": "test_extract_intent_from_ai_response_create_task"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_intent_from_ai_response with list tasks",
                "name": "test_extract_intent_from_ai_response_list_tasks"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_intent_from_ai_response with complete task",
                "name": "test_extract_intent_from_ai_response_complete_task"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_intent_from_ai_response with start checkin",
                "name": "test_extract_intent_from_ai_response_start_checkin"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_intent_from_ai_response with no matching patterns",
                "name": "test_extract_intent_from_ai_response_no_match"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test _extract_intent_from_ai_response with case insensitive matching",
                "name": "test_extract_intent_from_ai_response_case_insensitive"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test the parse_command convenience function",
                "name": "test_parse_command_function"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test the parse_command convenience function with empty input",
                "name": "test_parse_command_function_empty"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test the parse_command convenience function with None input",
                "name": "test_parse_command_function_none"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test get_enhanced_command_parser returns singleton",
                "name": "test_get_enhanced_command_parser_singleton"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test the parser's parse method",
                "name": "test_parser_parse_method"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test the parser's parse method with empty input",
                "name": "test_parser_parse_method_empty"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test the parser's parse method with None input",
                "name": "test_parser_parse_method_none"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test the parser's parse method with whitespace-only input",
                "name": "test_parser_parse_method_whitespace"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test parser with mocked AI chatbot",
                "name": "test_parser_with_mock_ai_chatbot"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test parser with mocked interaction handlers",
                "name": "test_parser_with_mock_interaction_handlers"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test error handling in parsing methods",
                "name": "test_error_handling_in_parsing"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test pattern matching with edge cases",
                "name": "test_pattern_matching_edge_cases"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test parser integration with real input patterns",
                "name": "test_parser_integration_with_real_inputs"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test parser suggestions integration",
                "name": "test_parser_suggestions_integration"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test parser entity extraction integration",
                "name": "test_parser_entity_extraction_integration"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test parser AI response processing",
                "name": "test_parser_ai_response_processing"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test parser initialization components",
                "name": "test_parser_initialization_components"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test parser method signatures",
                "name": "test_parser_method_signatures"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test parser robustness with various inputs",
                "name": "test_parser_robustness"
              }
            ]
          },
          "tests/behavior/test_communication_behavior.py": {
            "classes": [
              {
                "docstring": "Test cases for the CommunicationManager class.",
                "methods": [
                  "temp_dir",
                  "comm_manager",
                  "mock_channel_config",
                  "realistic_mock_channel",
                  "test_communication_manager_singleton",
                  "test_communication_manager_initialization",
                  "test_initialize_channels_from_config",
                  "test_get_active_channels",
                  "test_send_message_sync_with_realistic_channel",
                  "test_send_message_sync_channel_not_ready",
                  "test_send_message_sync_channel_not_found"
                ],
                "name": "TestCommunicationManager"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_path_factory"
                ],
                "docstring": "Provide a per-test directory under tests/data/tmp.",
                "name": "temp_dir"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create a CommunicationManager instance for testing.",
                "name": "comm_manager"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create a mock channel configuration.",
                "name": "mock_channel_config"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create a realistic mock channel with proper async methods.",
                "name": "realistic_mock_channel"
              },
              {
                "args": [
                  "self",
                  "comm_manager"
                ],
                "docstring": "Test that CommunicationManager follows singleton pattern.",
                "name": "test_communication_manager_singleton"
              },
              {
                "args": [
                  "self",
                  "comm_manager"
                ],
                "docstring": "Test CommunicationManager initialization.",
                "name": "test_communication_manager_initialization"
              },
              {
                "args": [
                  "self",
                  "mock_factory",
                  "comm_manager",
                  "mock_channel_config",
                  "realistic_mock_channel"
                ],
                "docstring": "Test channel initialization from configuration with realistic channel behavior.",
                "name": "test_initialize_channels_from_config"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test getting active channels with realistic channel setup.",
                "name": "test_get_active_channels"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test synchronous message sending with realistic channel behavior.",
                "name": "test_send_message_sync_with_realistic_channel"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test synchronous message sending when channel is not ready.",
                "name": "test_send_message_sync_channel_not_ready"
              },
              {
                "args": [
                  "self",
                  "comm_manager"
                ],
                "docstring": "Test synchronous message sending when channel doesn't exist.",
                "name": "test_send_message_sync_channel_not_found"
              }
            ]
          },
          "tests/behavior/test_communication_command_parser_behavior.py": {
            "classes": [
              {
                "docstring": "Test real behavior of command parser functionality.",
                "methods": [
                  "test_command_parser_initialization_creates_components"
                ],
                "name": "TestCommandParserBehavior"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that command parser initialization creates required components.",
                "name": "test_command_parser_initialization_creates_components"
              }
            ]
          },
          "tests/behavior/test_communication_factory_coverage_expansion.py": {
            "classes": [
              {
                "docstring": "Test coverage expansion for Communication Factory module.",
                "methods": [
                  "test_initialize_registry_already_initialized",
                  "test_initialize_registry_with_import_error",
                  "test_initialize_registry_with_attribute_error",
                  "test_initialize_registry_successful_registration",
                  "test_create_channel_unknown_type",
                  "test_create_channel_successful_creation",
                  "test_get_registered_channels_empty_registry",
                  "test_get_registered_channels_with_channels",
                  "test_factory_error_handling_initialization",
                  "test_factory_error_handling_create_channel",
                  "test_factory_error_handling_get_channels",
                  "test_factory_registry_persistence",
                  "test_factory_dynamic_import_handling",
                  "test_factory_config_integration",
                  "test_factory_logging_behavior",
                  "test_factory_singleton_behavior"
                ],
                "name": "TestCommunicationFactoryCoverageExpansion"
              },
              {
                "docstring": "",
                "methods": [
                  "__init__",
                  "channel_type"
                ],
                "name": "MockChannel"
              },
              {
                "docstring": "",
                "methods": [
                  "__init__",
                  "channel_type"
                ],
                "name": "ErrorChannel"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test _initialize_registry when already initialized.",
                "name": "test_initialize_registry_already_initialized"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test _initialize_registry with import error.",
                "name": "test_initialize_registry_with_import_error"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test _initialize_registry with attribute error.",
                "name": "test_initialize_registry_with_attribute_error"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test _initialize_registry with successful channel registration.",
                "name": "test_initialize_registry_successful_registration"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test create_channel with unknown channel type.",
                "name": "test_create_channel_unknown_type"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test create_channel with successful channel creation.",
                "name": "test_create_channel_successful_creation"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test get_registered_channels with empty registry.",
                "name": "test_get_registered_channels_empty_registry"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test get_registered_channels with registered channels.",
                "name": "test_get_registered_channels_with_channels"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test factory error handling during initialization.",
                "name": "test_factory_error_handling_initialization"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test factory error handling during channel creation.",
                "name": "test_factory_error_handling_create_channel"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test factory error handling during get_registered_channels.",
                "name": "test_factory_error_handling_get_channels"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that registry persists between calls.",
                "name": "test_factory_registry_persistence"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test factory handling of dynamic imports.",
                "name": "test_factory_dynamic_import_handling"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test factory integration with configuration system.",
                "name": "test_factory_config_integration"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test factory logging behavior.",
                "name": "test_factory_logging_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test factory singleton-like behavior.",
                "name": "test_factory_singleton_behavior"
              },
              {
                "args": [
                  "self",
                  "config"
                ],
                "docstring": "",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "channel_type"
              },
              {
                "args": [
                  "self",
                  "config"
                ],
                "docstring": "",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "channel_type"
              }
            ]
          },
          "tests/behavior/test_communication_interaction_manager_behavior.py": {
            "classes": [
              {
                "docstring": "Test real behavior of interaction manager functionality.",
                "methods": [
                  "test_interaction_manager_initialization_creates_components",
                  "test_process_message_creates_interaction_record",
                  "test_process_message_handles_command_parsing",
                  "test_process_message_handles_conversation_flow",
                  "test_process_message_handles_ai_chat",
                  "test_process_message_includes_user_context",
                  "test_process_message_handles_task_commands",
                  "test_process_message_handles_schedule_commands",
                  "test_process_message_handles_checkin_commands",
                  "test_process_message_handles_profile_commands",
                  "test_process_message_handles_help_commands",
                  "test_process_message_handles_unknown_commands",
                  "test_process_message_handles_empty_message",
                  "test_process_message_handles_whitespace_only_message",
                  "test_process_message_includes_timestamp",
                  "test_process_message_includes_interaction_type",
                  "test_process_message_handles_long_messages",
                  "test_process_message_handles_special_characters",
                  "test_process_message_handles_unicode_characters",
                  "test_process_message_handles_mixed_content",
                  "test_process_message_handles_conversation_context",
                  "test_process_message_handles_error_conditions",
                  "test_process_message_handles_concurrent_access",
                  "test_process_message_handles_rate_limiting",
                  "test_process_message_handles_user_preferences",
                  "test_process_message_handles_feature_flags"
                ],
                "name": "TestInteractionManagerBehavior"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that interaction manager initialization creates required components.",
                "name": "test_interaction_manager_initialization_creates_components"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message creates actual interaction record.",
                "name": "test_process_message_creates_interaction_record"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles command parsing correctly.",
                "name": "test_process_message_handles_command_parsing"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles conversation flow correctly.",
                "name": "test_process_message_handles_conversation_flow"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles AI chat correctly.",
                "name": "test_process_message_handles_ai_chat"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message includes user context in processing.",
                "name": "test_process_message_includes_user_context"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles task-related commands.",
                "name": "test_process_message_handles_task_commands"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles schedule-related commands.",
                "name": "test_process_message_handles_schedule_commands"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles checkin-related commands.",
                "name": "test_process_message_handles_checkin_commands"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles profile-related commands.",
                "name": "test_process_message_handles_profile_commands"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles help commands.",
                "name": "test_process_message_handles_help_commands"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles unknown commands gracefully.",
                "name": "test_process_message_handles_unknown_commands"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles empty messages.",
                "name": "test_process_message_handles_empty_message"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles whitespace-only messages.",
                "name": "test_process_message_handles_whitespace_only_message"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message includes timestamp in result.",
                "name": "test_process_message_includes_timestamp"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message includes interaction type in result.",
                "name": "test_process_message_includes_interaction_type"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles long messages correctly.",
                "name": "test_process_message_handles_long_messages"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles special characters correctly.",
                "name": "test_process_message_handles_special_characters"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles unicode characters correctly.",
                "name": "test_process_message_handles_unicode_characters"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles mixed content types.",
                "name": "test_process_message_handles_mixed_content"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message maintains conversation context.",
                "name": "test_process_message_handles_conversation_context"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles error conditions gracefully.",
                "name": "test_process_message_handles_error_conditions"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles concurrent access safely.",
                "name": "test_process_message_handles_concurrent_access"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message handles rate limiting correctly.",
                "name": "test_process_message_handles_rate_limiting"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message respects user preferences.",
                "name": "test_process_message_handles_user_preferences"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that process_message respects feature flags.",
                "name": "test_process_message_handles_feature_flags"
              }
            ]
          },
          "tests/behavior/test_communication_manager_coverage_expansion.py": {
            "classes": [
              {
                "docstring": "Comprehensive tests for CommunicationManager uncovered functionality.",
                "methods": [
                  "test_data_dir",
                  "comm_manager",
                  "mock_channel_config",
                  "realistic_mock_channel",
                  "test_message_queuing_real_behavior",
                  "test_retry_thread_management_real_behavior",
                  "test_restart_monitor_management_real_behavior",
                  "test_channel_restart_monitoring_real_behavior",
                  "test_channel_restart_attempt_real_behavior",
                  "test_retry_queue_processing_real_behavior",
                  "test_retry_queue_processing_with_failure_real_behavior",
                  "test_async_channel_initialization_real_behavior",
                  "test_channel_initialization_with_retry_real_behavior",
                  "test_sync_channel_initialization_real_behavior",
                  "test_default_channel_configs_real_behavior",
                  "test_async_startup_real_behavior",
                  "test_sync_startup_real_behavior",
                  "test_async_message_sending_real_behavior",
                  "test_async_message_sending_channel_not_ready_real_behavior",
                  "test_logging_health_check_real_behavior",
                  "test_broadcast_message_real_behavior",
                  "test_get_channel_status_real_behavior",
                  "test_get_all_statuses_real_behavior",
                  "test_health_check_all_real_behavior",
                  "test_discord_connectivity_status_real_behavior",
                  "test_async_shutdown_real_behavior",
                  "test_sync_shutdown_real_behavior",
                  "test_receive_messages_real_behavior",
                  "test_handle_message_sending_real_behavior",
                  "test_get_recipient_for_service_real_behavior",
                  "test_should_send_checkin_prompt_real_behavior",
                  "test_handle_scheduled_checkin_real_behavior",
                  "test_send_checkin_prompt_real_behavior",
                  "test_send_ai_generated_message_real_behavior",
                  "test_send_predefined_message_real_behavior",
                  "test_handle_task_reminder_real_behavior",
                  "test_create_task_reminder_message_real_behavior",
                  "test_event_loop_setup_real_behavior",
                  "test_run_async_sync_real_behavior",
                  "test_set_scheduler_manager_real_behavior",
                  "test_start_all_real_behavior",
                  "test_stop_all_real_behavior"
                ],
                "name": "TestCommunicationManagerCoverageExpansion"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_path_factory"
                ],
                "docstring": "Provide per-test directory under tests/data/tmp.",
                "name": "test_data_dir"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create a CommunicationManager instance for testing.",
                "name": "comm_manager"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create a mock channel configuration.",
                "name": "mock_channel_config"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create a realistic mock channel with proper async methods.",
                "name": "realistic_mock_channel"
              },
              {
                "args": [
                  "self",
                  "comm_manager"
                ],
                "docstring": "Test message queuing functionality for failed messages.",
                "name": "test_message_queuing_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager"
                ],
                "docstring": "Test retry thread start/stop functionality.",
                "name": "test_retry_thread_management_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager"
                ],
                "docstring": "Test restart monitor thread start/stop functionality.",
                "name": "test_restart_monitor_management_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test channel restart monitoring functionality.",
                "name": "test_channel_restart_monitoring_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel",
                  "mock_channel_config"
                ],
                "docstring": "Test channel restart attempt functionality.",
                "name": "test_channel_restart_attempt_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test retry queue processing functionality.",
                "name": "test_retry_queue_processing_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test retry queue processing when message sending fails.",
                "name": "test_retry_queue_processing_with_failure_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel",
                  "mock_channel_config"
                ],
                "docstring": "Test async channel initialization functionality.",
                "name": "test_async_channel_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel",
                  "mock_channel_config"
                ],
                "docstring": "Test channel initialization with retry logic.",
                "name": "test_channel_initialization_with_retry_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel",
                  "mock_channel_config"
                ],
                "docstring": "Test synchronous channel initialization functionality.",
                "name": "test_sync_channel_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager"
                ],
                "docstring": "Test default channel configuration generation.",
                "name": "test_default_channel_configs_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel",
                  "mock_channel_config"
                ],
                "docstring": "Test async startup functionality.",
                "name": "test_async_startup_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel",
                  "mock_channel_config"
                ],
                "docstring": "Test synchronous startup functionality.",
                "name": "test_sync_startup_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test async message sending functionality.",
                "name": "test_async_message_sending_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test async message sending when channel is not ready.",
                "name": "test_async_message_sending_channel_not_ready_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager"
                ],
                "docstring": "Test logging health check functionality.",
                "name": "test_logging_health_check_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test broadcast message functionality.",
                "name": "test_broadcast_message_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test getting channel status functionality.",
                "name": "test_get_channel_status_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test getting all channel statuses functionality.",
                "name": "test_get_all_statuses_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test health check all channels functionality.",
                "name": "test_health_check_all_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test Discord connectivity status functionality.",
                "name": "test_discord_connectivity_status_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test async shutdown functionality.",
                "name": "test_async_shutdown_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test synchronous shutdown functionality.",
                "name": "test_sync_shutdown_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test receive messages functionality.",
                "name": "test_receive_messages_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "test_data_dir"
                ],
                "docstring": "Test handle message sending functionality.",
                "name": "test_handle_message_sending_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "test_data_dir"
                ],
                "docstring": "Test getting recipient for service functionality.",
                "name": "test_get_recipient_for_service_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "test_data_dir"
                ],
                "docstring": "Test checkin prompt sending logic.",
                "name": "test_should_send_checkin_prompt_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "test_data_dir"
                ],
                "docstring": "Test scheduled checkin handling functionality.",
                "name": "test_handle_scheduled_checkin_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "test_data_dir"
                ],
                "docstring": "Test sending checkin prompt functionality.",
                "name": "test_send_checkin_prompt_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "test_data_dir"
                ],
                "docstring": "Test sending AI generated message functionality.",
                "name": "test_send_ai_generated_message_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "test_data_dir"
                ],
                "docstring": "Test sending predefined message functionality.",
                "name": "test_send_predefined_message_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "test_data_dir"
                ],
                "docstring": "Test task reminder handling functionality.",
                "name": "test_handle_task_reminder_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager"
                ],
                "docstring": "Test creating task reminder message functionality.",
                "name": "test_create_task_reminder_message_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager"
                ],
                "docstring": "Test event loop setup functionality.",
                "name": "test_event_loop_setup_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager"
                ],
                "docstring": "Test running async functions synchronously.",
                "name": "test_run_async_sync_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager"
                ],
                "docstring": "Test setting scheduler manager functionality.",
                "name": "test_set_scheduler_manager_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel",
                  "mock_channel_config"
                ],
                "docstring": "Test start all functionality.",
                "name": "test_start_all_real_behavior"
              },
              {
                "args": [
                  "self",
                  "comm_manager",
                  "realistic_mock_channel"
                ],
                "docstring": "Test stop all functionality.",
                "name": "test_stop_all_real_behavior"
              }
            ]
          },
          "tests/behavior/test_config_coverage_expansion_phase3_simple.py": {
            "classes": [
              {
                "docstring": "Test coverage expansion for core/config.py - Phase 3 Simple",
                "methods": [
                  "test_config_validation_error_initialization",
                  "test_config_validation_error_with_none_values",
                  "test_normalize_path_function",
                  "test_normalize_path_edge_cases",
                  "test_get_available_channels",
                  "test_get_channel_class_mapping",
                  "test_validate_core_paths_success",
                  "test_validate_ai_configuration_missing_url",
                  "test_validate_ai_configuration_invalid_url",
                  "test_validate_ai_configuration_valid_config",
                  "test_validate_communication_channels",
                  "test_validate_logging_configuration",
                  "test_validate_scheduler_configuration",
                  "test_validate_file_organization_settings",
                  "test_validate_environment_variables",
                  "test_validate_all_configuration_integration",
                  "test_validate_and_raise_if_invalid",
                  "test_print_configuration_report",
                  "test_print_configuration_report_no_channels",
                  "test_get_user_data_dir",
                  "test_get_backups_dir_testing_mode",
                  "test_get_backups_dir_production_mode",
                  "test_get_user_file_path",
                  "test_ensure_user_directory_success",
                  "test_ensure_user_directory_failure",
                  "test_validate_email_config",
                  "test_validate_discord_config",
                  "test_validate_minimum_config",
                  "test_environment_variable_loading",
                  "test_configuration_constants_exist",
                  "test_configuration_error_handling",
                  "test_validation_functions_return_correct_types",
                  "test_path_handling_functions",
                  "test_directory_creation_functions",
                  "test_configuration_validation_integration"
                ],
                "name": "TestConfigCoverageExpansionPhase3Simple"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test ConfigValidationError initialization",
                "name": "test_config_validation_error_initialization"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test ConfigValidationError with None values",
                "name": "test_config_validation_error_with_none_values"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test _normalize_path function",
                "name": "test_normalize_path_function"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test path normalization with edge cases",
                "name": "test_normalize_path_edge_cases"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test get_available_channels function",
                "name": "test_get_available_channels"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test get_channel_class_mapping function",
                "name": "test_get_channel_class_mapping"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test validate_core_paths function with successful validation",
                "name": "test_validate_core_paths_success"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test validate_ai_configuration with missing LM Studio URL",
                "name": "test_validate_ai_configuration_missing_url"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test validate_ai_configuration with invalid URL",
                "name": "test_validate_ai_configuration_invalid_url"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test validate_ai_configuration with valid configuration",
                "name": "test_validate_ai_configuration_valid_config"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test validate_communication_channels function",
                "name": "test_validate_communication_channels"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test validate_logging_configuration function",
                "name": "test_validate_logging_configuration"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test validate_scheduler_configuration function",
                "name": "test_validate_scheduler_configuration"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test validate_file_organization_settings function",
                "name": "test_validate_file_organization_settings"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test validate_environment_variables function",
                "name": "test_validate_environment_variables"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test validate_all_configuration function integration",
                "name": "test_validate_all_configuration_integration"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test validate_and_raise_if_invalid function",
                "name": "test_validate_and_raise_if_invalid"
              },
              {
                "args": [
                  "self",
                  "tmp_path",
                  "capsys"
                ],
                "docstring": "Test print_configuration_report function",
                "name": "test_print_configuration_report"
              },
              {
                "args": [
                  "self",
                  "tmp_path",
                  "capsys"
                ],
                "docstring": "Test print_configuration_report function with no available channels",
                "name": "test_print_configuration_report_no_channels"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test get_user_data_dir function",
                "name": "test_get_user_data_dir"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test get_backups_dir function in testing mode",
                "name": "test_get_backups_dir_testing_mode"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test get_backups_dir function in production mode",
                "name": "test_get_backups_dir_production_mode"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test get_user_file_path function",
                "name": "test_get_user_file_path"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test ensure_user_directory function with success",
                "name": "test_ensure_user_directory_success"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test ensure_user_directory function with failure",
                "name": "test_ensure_user_directory_failure"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test validate_email_config function",
                "name": "test_validate_email_config"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test validate_discord_config function",
                "name": "test_validate_discord_config"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test validate_minimum_config function",
                "name": "test_validate_minimum_config"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test environment variable loading and parsing",
                "name": "test_environment_variable_loading"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test that all expected configuration constants exist",
                "name": "test_configuration_constants_exist"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test configuration error handling",
                "name": "test_configuration_error_handling"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test that all validation functions return correct types",
                "name": "test_validation_functions_return_correct_types"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test path handling functions",
                "name": "test_path_handling_functions"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test directory creation functions",
                "name": "test_directory_creation_functions"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test configuration validation integration",
                "name": "test_configuration_validation_integration"
              }
            ]
          },
          "tests/behavior/test_conversation_behavior.py": {
            "classes": [
              {
                "docstring": "Test ConversationManager real behavior and side effects.",
                "methods": [
                  "test_conversation_manager_initialization_creates_structure",
                  "test_handle_inbound_message_creates_user_state",
                  "test_handle_inbound_message_preserves_existing_state",
                  "test_start_checkin_creates_checkin_state",
                  "test_start_checkin_handles_disabled_user",
                  "test_checkin_flow_progression",
                  "test_checkin_flow_completion",
                  "test_validate_response_handles_various_inputs",
                  "test_validate_response_handles_edge_cases",
                  "test_get_question_text_returns_personalized_questions",
                  "test_handle_contextual_question_integrates_with_ai",
                  "test_conversation_manager_error_handling_preserves_system_stability",
                  "test_conversation_manager_performance_under_load",
                  "test_conversation_manager_cleanup_and_resource_management",
                  "test_conversation_manager_integration_with_response_tracking",
                  "test_conversation_manager_command_handling",
                  "test_conversation_manager_cancel_handling"
                ],
                "name": "TestConversationManagerBehavior"
              },
              {
                "docstring": "Integration tests for ConversationManager with real user data.",
                "methods": [
                  "test_conversation_manager_with_real_user_data",
                  "test_conversation_manager_error_recovery_with_real_files",
                  "test_conversation_manager_concurrent_access_safety"
                ],
                "name": "TestConversationManagerIntegration"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that ConversationManager initialization creates proper internal structure.",
                "name": "test_conversation_manager_initialization_creates_structure"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that handle_inbound_message actually creates user state when needed.",
                "name": "test_handle_inbound_message_creates_user_state"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that handle_inbound_message preserves existing user state.",
                "name": "test_handle_inbound_message_preserves_existing_state"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that start_checkin actually creates check-in state.",
                "name": "test_start_checkin_creates_checkin_state"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that start_checkin handles users with disabled check-ins.",
                "name": "test_start_checkin_handles_disabled_user"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that check-in flow actually progresses through states.",
                "name": "test_checkin_flow_progression"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that check-in flow actually completes and cleans up state.",
                "name": "test_checkin_flow_completion"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that _validate_response actually validates different types of responses.",
                "name": "test_validate_response_handles_various_inputs"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that _validate_response handles edge cases gracefully.",
                "name": "test_validate_response_handles_edge_cases"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that _get_question_text returns personalized questions based on context.",
                "name": "test_get_question_text_returns_personalized_questions"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that handle_contextual_question integrates with AI chatbot.",
                "name": "test_handle_contextual_question_integrates_with_ai"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that ConversationManager error handling preserves system stability.",
                "name": "test_conversation_manager_error_handling_preserves_system_stability"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that ConversationManager performs well under load.",
                "name": "test_conversation_manager_performance_under_load"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that ConversationManager properly manages resources and cleanup.",
                "name": "test_conversation_manager_cleanup_and_resource_management"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that ConversationManager integrates properly with response tracking.",
                "name": "test_conversation_manager_integration_with_response_tracking"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that ConversationManager properly handles special commands.",
                "name": "test_conversation_manager_command_handling"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that ConversationManager properly handles cancel commands.",
                "name": "test_conversation_manager_cancel_handling"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test ConversationManager with real user data files.",
                "name": "test_conversation_manager_with_real_user_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test ConversationManager error recovery with corrupted real files.",
                "name": "test_conversation_manager_error_recovery_with_real_files"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test ConversationManager safety under concurrent access.",
                "name": "test_conversation_manager_concurrent_access_safety"
              }
            ]
          },
          "tests/behavior/test_core_message_management_coverage_expansion.py": {
            "classes": [
              {
                "docstring": "Test class for Core Message Management coverage expansion.",
                "methods": [
                  "test_get_message_categories_from_env_real_behavior",
                  "test_get_message_categories_from_json_real_behavior",
                  "test_get_message_categories_no_env_real_behavior",
                  "test_load_default_messages_real_behavior",
                  "test_load_default_messages_file_not_found_real_behavior",
                  "test_parse_timestamp_real_behavior",
                  "test_get_timestamp_for_sorting_real_behavior",
                  "test_get_timestamp_for_sorting_string_real_behavior",
                  "test_get_timestamp_for_sorting_invalid_item_real_behavior"
                ],
                "name": "TestCoreMessageManagementCoverageExpansion"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting message categories from environment variable.",
                "name": "test_get_message_categories_from_env_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting message categories from JSON format.",
                "name": "test_get_message_categories_from_json_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting message categories when no environment variable.",
                "name": "test_get_message_categories_no_env_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test loading default messages for a category.",
                "name": "test_load_default_messages_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test loading default messages when file doesn't exist.",
                "name": "test_load_default_messages_file_not_found_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test parsing timestamp strings.",
                "name": "test_parse_timestamp_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting timestamp for sorting.",
                "name": "test_get_timestamp_for_sorting_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting timestamp for sorting with string timestamp.",
                "name": "test_get_timestamp_for_sorting_string_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting timestamp for sorting with invalid item type.",
                "name": "test_get_timestamp_for_sorting_invalid_item_real_behavior"
              }
            ]
          },
          "tests/behavior/test_core_service_coverage_expansion.py": {
            "classes": [
              {
                "docstring": "Test class for expanding Core Service test coverage.",
                "methods": [
                  "service",
                  "mock_config",
                  "mock_communication_manager",
                  "mock_scheduler_manager",
                  "test_service_initialization_real_behavior",
                  "test_validate_configuration_success_real_behavior",
                  "test_validate_configuration_failure_real_behavior",
                  "test_initialize_paths_real_behavior",
                  "test_initialize_paths_with_none_user_id_real_behavior",
                  "test_initialize_paths_with_invalid_categories_real_behavior",
                  "test_initialize_paths_with_empty_categories_real_behavior",
                  "test_initialize_paths_with_path_generation_error_real_behavior",
                  "test_check_and_fix_logging_success_real_behavior",
                  "test_check_and_fix_logging_failure_real_behavior",
                  "test_signal_handler_real_behavior",
                  "test_start_service_success_real_behavior",
                  "test_start_service_configuration_failure_real_behavior",
                  "test_start_service_path_initialization_failure_real_behavior",
                  "test_start_service_communication_manager_failure_real_behavior",
                  "test_start_service_scheduler_manager_failure_real_behavior",
                  "test_stop_service_real_behavior",
                  "test_stop_service_with_none_managers_real_behavior",
                  "test_stop_service_with_manager_stop_failure_real_behavior",
                  "test_get_scheduler_manager_real_behavior",
                  "test_main_function_real_behavior",
                  "test_main_function_with_service_failure_real_behavior",
                  "test_service_atexit_handler_real_behavior",
                  "test_service_atexit_handler_with_none_managers_real_behavior",
                  "test_service_atexit_handler_with_manager_stop_failure_real_behavior",
                  "test_service_initialization_error_real_behavior",
                  "test_service_startup_time_tracking_real_behavior",
                  "test_service_signal_handlers_real_behavior",
                  "test_service_retry_mechanism_real_behavior",
                  "test_service_cleanup_test_message_requests_real_behavior",
                  "test_cleanup_test_message_requests_empty_directory_real_behavior",
                  "test_cleanup_test_message_requests_large_number_of_files_real_behavior",
                  "test_cleanup_test_message_requests_file_permission_error_real_behavior",
                  "test_cleanup_test_message_requests_partial_failure_real_behavior",
                  "test_cleanup_test_message_requests_directory_access_error_real_behavior",
                  "test_cleanup_test_message_requests_mixed_file_types_real_behavior",
                  "test_cleanup_test_message_requests_concurrent_access_simulation_real_behavior",
                  "test_cleanup_test_message_requests_file_in_use_error_real_behavior",
                  "test_cleanup_test_message_requests_remove_request_file_success_real_behavior",
                  "test_cleanup_test_message_requests_remove_request_file_permission_error_real_behavior",
                  "test_cleanup_test_message_requests_remove_request_file_not_found_error_real_behavior",
                  "test_cleanup_test_message_requests_remove_request_file_generic_error_real_behavior",
                  "test_service_cleanup_reschedule_requests_real_behavior",
                  "test_check_and_fix_logging_basic_success",
                  "test_check_and_fix_logging_file_missing",
                  "test_check_and_fix_logging_file_creation_failure",
                  "test_check_and_fix_logging_old_activity_restart",
                  "test_check_and_fix_logging_recent_activity_detected",
                  "test_check_reschedule_requests_no_files",
                  "test_check_reschedule_requests_valid_file",
                  "test_check_reschedule_requests_invalid_file",
                  "test_check_reschedule_requests_old_file_processed",
                  "test_check_reschedule_requests_json_error",
                  "test_check_test_message_requests_no_files",
                  "test_check_test_message_requests_valid_file",
                  "test_check_test_message_requests_invalid_file",
                  "test_check_test_message_requests_json_error",
                  "test_check_test_message_requests_no_communication_manager",
                  "test_check_test_message_requests_communication_error",
                  "test_check_and_fix_logging_check_recent_activity_timestamps_recent_activity",
                  "test_check_and_fix_logging_check_recent_activity_timestamps_old_activity",
                  "test_check_and_fix_logging_check_recent_activity_timestamps_invalid_timestamp",
                  "test_check_and_fix_logging_read_recent_log_content_large_file",
                  "test_check_and_fix_logging_read_recent_log_content_small_file",
                  "test_check_and_fix_logging_verify_test_message_present_found",
                  "test_check_and_fix_logging_verify_test_message_present_not_found",
                  "test_check_reschedule_requests_handle_processing_error_successful_cleanup",
                  "test_check_reschedule_requests_handle_processing_error_cleanup_failure",
                  "test_check_test_message_requests_handle_processing_error_successful_cleanup",
                  "test_check_test_message_requests_handle_processing_error_cleanup_failure",
                  "test_check_reschedule_requests_validate_request_data_old_timestamp",
                  "test_check_reschedule_requests_validate_request_data_missing_fields"
                ],
                "name": "TestCoreServiceCoverageExpansion"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Create a fresh MHMService instance for each test.",
                "name": "service"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Mock configuration to avoid real config dependencies.",
                "name": "mock_config"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Mock communication manager.",
                "name": "mock_communication_manager"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Mock scheduler manager.",
                "name": "mock_scheduler_manager"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test service initialization with real behavior verification.",
                "name": "test_service_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service",
                  "mock_config"
                ],
                "docstring": "Test successful configuration validation.",
                "name": "test_validate_configuration_success_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test configuration validation failure.",
                "name": "test_validate_configuration_failure_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test path initialization with real behavior verification.",
                "name": "test_initialize_paths_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test path initialization with None user ID handling.",
                "name": "test_initialize_paths_with_none_user_id_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test path initialization with invalid categories data.",
                "name": "test_initialize_paths_with_invalid_categories_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test path initialization with empty categories list.",
                "name": "test_initialize_paths_with_empty_categories_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test path initialization with path generation error.",
                "name": "test_initialize_paths_with_path_generation_error_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test successful logging check and fix.",
                "name": "test_check_and_fix_logging_success_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test logging check and fix failure.",
                "name": "test_check_and_fix_logging_failure_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test signal handler behavior.",
                "name": "test_signal_handler_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service",
                  "mock_config",
                  "mock_communication_manager",
                  "mock_scheduler_manager"
                ],
                "docstring": "Test successful service startup.",
                "name": "test_start_service_success_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test service startup with configuration failure.",
                "name": "test_start_service_configuration_failure_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service",
                  "mock_config"
                ],
                "docstring": "Test service startup with path initialization failure.",
                "name": "test_start_service_path_initialization_failure_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service",
                  "mock_config"
                ],
                "docstring": "Test service startup with communication manager failure.",
                "name": "test_start_service_communication_manager_failure_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service",
                  "mock_config",
                  "mock_communication_manager"
                ],
                "docstring": "Test service startup with scheduler manager failure.",
                "name": "test_start_service_scheduler_manager_failure_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service",
                  "mock_communication_manager",
                  "mock_scheduler_manager"
                ],
                "docstring": "Test service shutdown.",
                "name": "test_stop_service_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test service shutdown with None managers.",
                "name": "test_stop_service_with_none_managers_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service",
                  "mock_communication_manager",
                  "mock_scheduler_manager"
                ],
                "docstring": "Test service shutdown with manager stop failure.",
                "name": "test_stop_service_with_manager_stop_failure_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting scheduler manager.",
                "name": "test_get_scheduler_manager_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test main function behavior.",
                "name": "test_main_function_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test main function with service failure.",
                "name": "test_main_function_with_service_failure_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test service atexit handler behavior.",
                "name": "test_service_atexit_handler_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test service atexit handler with None managers.",
                "name": "test_service_atexit_handler_with_none_managers_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test service atexit handler with manager stop failure.",
                "name": "test_service_atexit_handler_with_manager_stop_failure_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test InitializationError exception.",
                "name": "test_service_initialization_error_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test service startup time tracking.",
                "name": "test_service_startup_time_tracking_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test service signal handlers setup.",
                "name": "test_service_signal_handlers_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service",
                  "mock_config"
                ],
                "docstring": "Test service retry mechanism for startup failures.",
                "name": "test_service_retry_mechanism_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test service cleanup test message requests.",
                "name": "test_service_cleanup_test_message_requests_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cleanup when no request files exist.",
                "name": "test_cleanup_test_message_requests_empty_directory_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cleanup with many request files.",
                "name": "test_cleanup_test_message_requests_large_number_of_files_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cleanup when file removal fails due to permission errors.",
                "name": "test_cleanup_test_message_requests_file_permission_error_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cleanup when some files succeed and others fail.",
                "name": "test_cleanup_test_message_requests_partial_failure_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cleanup when directory listing fails.",
                "name": "test_cleanup_test_message_requests_directory_access_error_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cleanup with mixed file types in directory.",
                "name": "test_cleanup_test_message_requests_mixed_file_types_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cleanup when files disappear during processing.",
                "name": "test_cleanup_test_message_requests_concurrent_access_simulation_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cleanup when files are in use by another process.",
                "name": "test_cleanup_test_message_requests_file_in_use_error_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test successful file removal by helper function.",
                "name": "test_cleanup_test_message_requests_remove_request_file_success_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test file removal with permission error by helper function.",
                "name": "test_cleanup_test_message_requests_remove_request_file_permission_error_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test file removal with file not found error by helper function.",
                "name": "test_cleanup_test_message_requests_remove_request_file_not_found_error_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test file removal with generic error by helper function.",
                "name": "test_cleanup_test_message_requests_remove_request_file_generic_error_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test service cleanup reschedule requests.",
                "name": "test_service_cleanup_reschedule_requests_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test basic successful logging verification.",
                "name": "test_check_and_fix_logging_basic_success"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test logging verification when log file doesn't exist.",
                "name": "test_check_and_fix_logging_file_missing"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test logging verification when log file creation fails.",
                "name": "test_check_and_fix_logging_file_creation_failure"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test logging restart when activity is too old.",
                "name": "test_check_and_fix_logging_old_activity_restart"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test detection of recent logging activity.",
                "name": "test_check_and_fix_logging_recent_activity_detected"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test reschedule requests when no files exist.",
                "name": "test_check_reschedule_requests_no_files"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test reschedule requests with valid file.",
                "name": "test_check_reschedule_requests_valid_file"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test reschedule requests with invalid file data.",
                "name": "test_check_reschedule_requests_invalid_file"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test reschedule requests with old timestamp still processed.",
                "name": "test_check_reschedule_requests_old_file_processed"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test reschedule requests with JSON parsing error.",
                "name": "test_check_reschedule_requests_json_error"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test test message requests when no files exist.",
                "name": "test_check_test_message_requests_no_files"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test test message requests with valid file.",
                "name": "test_check_test_message_requests_valid_file"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test test message requests with invalid file data.",
                "name": "test_check_test_message_requests_invalid_file"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test test message requests with JSON parsing error.",
                "name": "test_check_test_message_requests_json_error"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test test message requests when communication manager is None.",
                "name": "test_check_test_message_requests_no_communication_manager"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test test message requests when communication manager raises error.",
                "name": "test_check_test_message_requests_communication_error"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test the most complex helper function - recent activity timestamp checking with recent activity.",
                "name": "test_check_and_fix_logging_check_recent_activity_timestamps_recent_activity"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test the most complex helper function - recent activity timestamp checking with old activity.",
                "name": "test_check_and_fix_logging_check_recent_activity_timestamps_old_activity"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test the most complex helper function - recent activity timestamp checking with invalid timestamp.",
                "name": "test_check_and_fix_logging_check_recent_activity_timestamps_invalid_timestamp"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test reading recent log content from a large log file.",
                "name": "test_check_and_fix_logging_read_recent_log_content_large_file"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test reading recent log content from a small log file.",
                "name": "test_check_and_fix_logging_read_recent_log_content_small_file"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test verifying test message presence when message is found.",
                "name": "test_check_and_fix_logging_verify_test_message_present_found"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test verifying test message presence when message is not found.",
                "name": "test_check_and_fix_logging_verify_test_message_present_not_found"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test error handling helper with successful file cleanup.",
                "name": "test_check_reschedule_requests_handle_processing_error_successful_cleanup"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test error handling helper when file cleanup fails.",
                "name": "test_check_reschedule_requests_handle_processing_error_cleanup_failure"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test test message error handling helper with successful file cleanup.",
                "name": "test_check_test_message_requests_handle_processing_error_successful_cleanup"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test test message error handling helper when file cleanup fails.",
                "name": "test_check_test_message_requests_handle_processing_error_cleanup_failure"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test request data validation with old timestamp.",
                "name": "test_check_reschedule_requests_validate_request_data_old_timestamp"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test request data validation with missing required fields.",
                "name": "test_check_reschedule_requests_validate_request_data_missing_fields"
              },
              {
                "args": [
                  "file_path"
                ],
                "docstring": "",
                "name": "mock_remove_with_partial_failure"
              },
              {
                "args": [
                  "file_path"
                ],
                "docstring": "",
                "name": "mock_remove_with_disappearing_files"
              }
            ]
          },
          "tests/behavior/test_discord_bot_behavior.py": {
            "classes": [
              {
                "docstring": "Test Discord bot real behavior and side effects",
                "methods": [
                  "discord_bot",
                  "mock_discord_bot",
                  "test_discord_bot_initialization_creates_proper_structure",
                  "test_discord_bot_channel_type_is_async",
                  "test_dns_resolution_check_actually_tests_connectivity",
                  "test_dns_resolution_fallback_uses_alternative_servers",
                  "test_network_connectivity_check_tests_multiple_endpoints",
                  "test_network_connectivity_fallback_tries_alternative_endpoints",
                  "test_connection_status_update_actually_changes_state",
                  "test_detailed_connection_status_returns_actual_state",
                  "test_discord_bot_initialization_with_valid_token",
                  "test_discord_bot_initialization_without_token",
                  "test_discord_bot_initialization_with_dns_failure",
                  "test_discord_bot_shutdown_actually_cleans_up",
                  "test_discord_bot_send_message_actually_sends",
                  "test_discord_bot_send_message_handles_errors",
                  "test_discord_bot_receive_messages_returns_actual_data",
                  "test_discord_bot_health_check_verifies_actual_status",
                  "test_discord_bot_health_status_returns_actual_metrics",
                  "test_discord_bot_connection_status_summary_returns_readable_string",
                  "test_discord_bot_is_actually_connected_checks_real_state",
                  "test_discord_bot_manual_reconnect_actually_reconnects",
                  "test_discord_bot_initialize_creates_thread",
                  "test_interaction_manager_single_response",
                  "test_discord_checkin_flow_end_to_end",
                  "test_discord_task_create_update_complete",
                  "test_discord_complete_task_by_name_variation",
                  "test_discord_response_after_task_reminder",
                  "test_discord_bot_shutdown_actually_stops_thread",
                  "test_discord_bot_is_initialized_checks_actual_state",
                  "test_discord_bot_send_dm_actually_sends_direct_message"
                ],
                "name": "TestDiscordBotBehavior"
              },
              {
                "docstring": "Test Discord bot integration with other system components",
                "methods": [
                  "test_user_setup",
                  "mock_discord_bot",
                  "test_discord_bot_integration_with_conversation_manager",
                  "test_discord_message_to_interaction_manager_complete_task_prompt",
                  "test_discord_bot_integration_with_user_management",
                  "test_discord_bot_error_handling_preserves_system_stability",
                  "test_discord_bot_performance_under_load",
                  "test_discord_bot_cleanup_and_resource_management",
                  "test_discord_bot_with_real_user_data",
                  "test_discord_bot_error_recovery_with_real_files",
                  "test_discord_bot_concurrent_access_safety"
                ],
                "name": "TestDiscordBotIntegration"
              },
              {
                "docstring": "",
                "methods": [],
                "name": "FakeAuthor"
              },
              {
                "docstring": "",
                "methods": [],
                "name": "FakeMessage"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Create a Discord bot instance for testing",
                "name": "discord_bot"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create a mock Discord bot instance",
                "name": "mock_discord_bot"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that Discord bot initialization creates proper internal structure",
                "name": "test_discord_bot_initialization_creates_proper_structure"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that Discord bot channel type is correctly set to ASYNC",
                "name": "test_discord_bot_channel_type_is_async"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that DNS resolution check actually tests network connectivity",
                "name": "test_dns_resolution_check_actually_tests_connectivity"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that DNS resolution fallback actually tries alternative DNS servers",
                "name": "test_dns_resolution_fallback_uses_alternative_servers"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that network connectivity check actually tests multiple Discord endpoints",
                "name": "test_network_connectivity_check_tests_multiple_endpoints"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that network connectivity fallback actually tries alternative endpoints",
                "name": "test_network_connectivity_fallback_tries_alternative_endpoints"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that connection status update actually changes internal state",
                "name": "test_connection_status_update_actually_changes_state"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that detailed connection status returns actual system state",
                "name": "test_detailed_connection_status_returns_actual_state"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_discord_bot"
                ],
                "docstring": "Test that Discord bot initialization actually creates bot instance with valid token",
                "name": "test_discord_bot_initialization_with_valid_token"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that Discord bot initialization fails gracefully without token",
                "name": "test_discord_bot_initialization_without_token"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that Discord bot initialization handles DNS failures gracefully",
                "name": "test_discord_bot_initialization_with_dns_failure"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_discord_bot"
                ],
                "docstring": "Test that Discord bot shutdown actually cleans up resources",
                "name": "test_discord_bot_shutdown_actually_cleans_up"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_discord_bot"
                ],
                "docstring": "Test that Discord bot send_message actually sends messages",
                "name": "test_discord_bot_send_message_actually_sends"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_discord_bot"
                ],
                "docstring": "Test that Discord bot send_message handles errors gracefully",
                "name": "test_discord_bot_send_message_handles_errors"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_discord_bot"
                ],
                "docstring": "Test that Discord bot receive_messages returns actual message data",
                "name": "test_discord_bot_receive_messages_returns_actual_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_discord_bot"
                ],
                "docstring": "Test that Discord bot health check actually verifies system status",
                "name": "test_discord_bot_health_check_verifies_actual_status"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_discord_bot"
                ],
                "docstring": "Test that Discord bot health status returns actual system metrics",
                "name": "test_discord_bot_health_status_returns_actual_metrics"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that Discord bot connection status summary returns readable string",
                "name": "test_discord_bot_connection_status_summary_returns_readable_string"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_discord_bot"
                ],
                "docstring": "Test that Discord bot is_actually_connected checks real connection state",
                "name": "test_discord_bot_is_actually_connected_checks_real_state"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_discord_bot"
                ],
                "docstring": "Test that Discord bot manual reconnect actually attempts reconnection",
                "name": "test_discord_bot_manual_reconnect_actually_reconnects"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that Discord bot initialize actually creates a thread",
                "name": "test_discord_bot_initialize_creates_thread"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Ensure a single inbound message yields one main response (no duplicates).",
                "name": "test_interaction_manager_single_response"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Simulate a Discord user going through a check-in flow via /checkin and responding to prompts.",
                "name": "test_discord_checkin_flow_end_to_end"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Create a task, update it, then complete it through InteractionManager natural language.",
                "name": "test_discord_task_create_update_complete"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Complete a task by a fuzzy name match like 'complete per davey' -> 'Pet Davey'.",
                "name": "test_discord_complete_task_by_name_variation"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Simulate a user replying to a reminder by completing the first task.",
                "name": "test_discord_response_after_task_reminder"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that Discord bot shutdown actually stops the thread",
                "name": "test_discord_bot_shutdown_actually_stops_thread"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_discord_bot"
                ],
                "docstring": "Test that Discord bot is_initialized checks actual initialization state",
                "name": "test_discord_bot_is_initialized_checks_actual_state"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_discord_bot"
                ],
                "docstring": "Test that Discord bot send_dm actually sends direct messages",
                "name": "test_discord_bot_send_dm_actually_sends_direct_message"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Set up test user data for integration tests",
                "name": "test_user_setup"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create a mock Discord bot instance for integration tests",
                "name": "mock_discord_bot"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "test_user_setup"
                ],
                "docstring": "Test that Discord bot integrates properly with conversation manager",
                "name": "test_discord_bot_integration_with_conversation_manager"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "End-to-end-ish: ensure plain 'complete task' routes to InteractionManager and returns a helpful prompt, not a generic error.",
                "name": "test_discord_message_to_interaction_manager_complete_task_prompt"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "test_user_setup"
                ],
                "docstring": "Test that Discord bot integrates properly with user management",
                "name": "test_discord_bot_integration_with_user_management"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that Discord bot error handling preserves system stability",
                "name": "test_discord_bot_error_handling_preserves_system_stability"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that Discord bot performs well under load",
                "name": "test_discord_bot_performance_under_load"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_discord_bot"
                ],
                "docstring": "Test that Discord bot properly manages resources and cleanup",
                "name": "test_discord_bot_cleanup_and_resource_management"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "test_user_setup"
                ],
                "docstring": "Test Discord bot with real user data",
                "name": "test_discord_bot_with_real_user_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test Discord bot error recovery with real files",
                "name": "test_discord_bot_error_recovery_with_real_files"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that Discord bot handles concurrent access safely",
                "name": "test_discord_bot_concurrent_access_safety"
              }
            ]
          },
          "tests/behavior/test_dynamic_checkin_behavior.py": {
            "classes": [
              {
                "docstring": "Test the dynamic check-in manager functionality.",
                "methods": [
                  "test_dynamic_checkin_manager_initialization",
                  "test_question_definitions",
                  "test_response_statements",
                  "test_validation",
                  "test_build_next_question_with_response",
                  "test_ui_questions_format"
                ],
                "name": "TestDynamicCheckinManager"
              },
              {
                "docstring": "Test integration with the conversation flow manager.",
                "methods": [
                  "test_conversation_manager_uses_dynamic_questions",
                  "test_question_text_uses_dynamic_manager",
                  "test_validation_uses_dynamic_manager"
                ],
                "name": "TestDynamicCheckinIntegration"
              },
              {
                "docstring": "Test that the system provides variety in responses.",
                "methods": [
                  "test_response_variety",
                  "test_transition_phrase_variety",
                  "test_complete_question_flow_variety"
                ],
                "name": "TestDynamicCheckinVariety"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that the dynamic check-in manager initializes correctly.",
                "name": "test_dynamic_checkin_manager_initialization"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that question definitions are loaded correctly.",
                "name": "test_question_definitions"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that response statements are loaded and varied.",
                "name": "test_response_statements"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that validation works correctly for different question types.",
                "name": "test_validation"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test building questions with response statements.",
                "name": "test_build_next_question_with_response"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that questions are formatted correctly for UI.",
                "name": "test_ui_questions_format"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that the conversation manager uses the dynamic question system.",
                "name": "test_conversation_manager_uses_dynamic_questions"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that question text is retrieved from the dynamic manager.",
                "name": "test_question_text_uses_dynamic_manager"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that validation uses the dynamic manager.",
                "name": "test_validation_uses_dynamic_manager"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that we get varied responses for the same answer.",
                "name": "test_response_variety"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that transition phrases provide variety.",
                "name": "test_transition_phrase_variety"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that complete question flows provide variety.",
                "name": "test_complete_question_flow_variety"
              }
            ]
          },
          "tests/behavior/test_email_bot_behavior.py": {
            "classes": [
              {
                "docstring": "Test real behavior of Email Bot.",
                "methods": [
                  "setup_method",
                  "test_email_bot_initialization_creates_proper_structure",
                  "test_email_bot_initialization_with_custom_config",
                  "test_email_bot_legacy_start_method_behavior",
                  "test_email_bot_legacy_start_method_failure_behavior",
                  "test_email_bot_async_shutdown_method_behavior",
                  "test_email_bot_status_checking_behavior",
                  "test_email_bot_error_handling_preserves_system_stability",
                  "test_email_bot_performance_under_load",
                  "test_email_bot_data_integrity"
                ],
                "name": "TestEmailBotBehavior"
              },
              {
                "docstring": "Test integration behavior of Email Bot.",
                "methods": [
                  "setup_method"
                ],
                "name": "TestEmailBotIntegration"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Set up test environment.",
                "name": "setup_method"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that EmailBot initialization creates proper internal structure.",
                "name": "test_email_bot_initialization_creates_proper_structure"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that EmailBot initialization with custom config works properly.",
                "name": "test_email_bot_initialization_with_custom_config"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test legacy start method behavior.",
                "name": "test_email_bot_legacy_start_method_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test legacy start method failure behavior.",
                "name": "test_email_bot_legacy_start_method_failure_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test async shutdown method behavior.",
                "name": "test_email_bot_async_shutdown_method_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test email bot status checking behavior.",
                "name": "test_email_bot_status_checking_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that email bot error handling preserves system stability.",
                "name": "test_email_bot_error_handling_preserves_system_stability"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that email bot performs well under load.",
                "name": "test_email_bot_performance_under_load"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that email bot maintains data integrity.",
                "name": "test_email_bot_data_integrity"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Set up test environment.",
                "name": "setup_method"
              },
              {
                "args": [
                  "recipient",
                  "message"
                ],
                "docstring": "",
                "name": "send_email"
              }
            ]
          },
          "tests/behavior/test_enhanced_command_parser_behavior.py": {
            "classes": [
              {
                "docstring": "Test real behavior of Enhanced Command Parser.",
                "methods": [
                  "setup_method",
                  "test_enhanced_command_parser_initialization_behavior",
                  "test_enhanced_command_parser_empty_message_behavior",
                  "test_enhanced_command_parser_task_creation_patterns_behavior",
                  "test_enhanced_command_parser_task_listing_patterns_behavior",
                  "test_enhanced_command_parser_task_completion_patterns_behavior",
                  "test_enhanced_command_parser_checkin_patterns_behavior",
                  "test_enhanced_command_parser_help_patterns_behavior",
                  "test_enhanced_command_parser_entity_extraction_behavior",
                  "test_enhanced_command_parser_confidence_calculation_behavior",
                  "test_enhanced_command_parser_case_insensitivity_behavior",
                  "test_enhanced_command_parser_unknown_patterns_behavior",
                  "test_enhanced_command_parser_ai_enhanced_parsing_behavior",
                  "test_enhanced_command_parser_fallback_behavior",
                  "test_enhanced_command_parser_error_handling_behavior",
                  "test_enhanced_command_parser_performance_behavior",
                  "test_enhanced_command_parser_pattern_compilation_behavior"
                ],
                "name": "TestEnhancedCommandParserBehavior"
              },
              {
                "docstring": "Test integration behavior of Enhanced Command Parser.",
                "methods": [
                  "setup_method",
                  "test_enhanced_command_parser_with_real_handlers_behavior",
                  "test_enhanced_command_parser_with_real_ai_chatbot_behavior",
                  "test_enhanced_command_parser_end_to_end_behavior",
                  "test_enhanced_command_parser_consistency_behavior",
                  "test_enhanced_command_parser_memory_behavior",
                  "test_enhanced_command_parser_thread_safety_behavior"
                ],
                "name": "TestEnhancedCommandParserIntegration"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Set up test environment.",
                "name": "setup_method"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that parser initializes with all required components.",
                "name": "test_enhanced_command_parser_initialization_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test parser behavior with empty messages.",
                "name": "test_enhanced_command_parser_empty_message_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test real behavior of task creation pattern matching.",
                "name": "test_enhanced_command_parser_task_creation_patterns_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test real behavior of task listing pattern matching.",
                "name": "test_enhanced_command_parser_task_listing_patterns_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test real behavior of task completion pattern matching.",
                "name": "test_enhanced_command_parser_task_completion_patterns_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test real behavior of checkin pattern matching.",
                "name": "test_enhanced_command_parser_checkin_patterns_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test real behavior of help pattern matching.",
                "name": "test_enhanced_command_parser_help_patterns_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test real behavior of entity extraction.",
                "name": "test_enhanced_command_parser_entity_extraction_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test real behavior of confidence calculation.",
                "name": "test_enhanced_command_parser_confidence_calculation_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test real behavior of case insensitive matching.",
                "name": "test_enhanced_command_parser_case_insensitivity_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test real behavior with unknown patterns.",
                "name": "test_enhanced_command_parser_unknown_patterns_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test real behavior of AI-enhanced parsing.",
                "name": "test_enhanced_command_parser_ai_enhanced_parsing_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test real behavior of fallback parsing.",
                "name": "test_enhanced_command_parser_fallback_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test real behavior of error handling.",
                "name": "test_enhanced_command_parser_error_handling_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test real behavior of parsing performance.",
                "name": "test_enhanced_command_parser_performance_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test real behavior of pattern compilation.",
                "name": "test_enhanced_command_parser_pattern_compilation_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Set up test environment.",
                "name": "setup_method"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test parser behavior with real interaction handlers.",
                "name": "test_enhanced_command_parser_with_real_handlers_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test parser behavior with real AI chatbot.",
                "name": "test_enhanced_command_parser_with_real_ai_chatbot_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test end-to-end behavior of command parsing workflow.",
                "name": "test_enhanced_command_parser_end_to_end_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test consistency of parsing behavior across multiple calls.",
                "name": "test_enhanced_command_parser_consistency_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test memory usage behavior of parser.",
                "name": "test_enhanced_command_parser_memory_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test thread safety behavior of parser.",
                "name": "test_enhanced_command_parser_thread_safety_behavior"
              },
              {
                "args": [
                  "command"
                ],
                "docstring": "",
                "name": "parse_command"
              }
            ]
          },
          "tests/behavior/test_error_handling_coverage_expansion_phase3_final.py": {
            "classes": [
              {
                "docstring": "Test coverage expansion for core/error_handling.py - Phase 3 Final",
                "methods": [
                  "test_mhm_error_initialization",
                  "test_data_error_initialization",
                  "test_file_operation_error_initialization",
                  "test_configuration_error_initialization",
                  "test_error_recovery_strategy_base_class",
                  "test_file_not_found_recovery_strategy",
                  "test_json_decode_recovery_strategy",
                  "test_error_handler_initialization",
                  "test_error_handler_with_recovery_strategy",
                  "test_error_handler_with_multiple_strategies",
                  "test_error_handler_with_context",
                  "test_error_handler_with_complex_context",
                  "test_handle_errors_decorator_success",
                  "test_handle_errors_decorator_exception",
                  "test_handle_errors_decorator_custom_return",
                  "test_handle_errors_decorator_specific_exception",
                  "test_handle_errors_decorator_with_context",
                  "test_handle_errors_decorator_nested_exceptions",
                  "test_handle_errors_decorator_with_args_kwargs",
                  "test_handle_errors_decorator_with_exception_in_args",
                  "test_handle_errors_decorator_user_friendly_false",
                  "test_handle_errors_decorator_operation_name",
                  "test_handle_errors_decorator_recovery_success",
                  "test_handle_errors_decorator_recovery_failure",
                  "test_handle_errors_decorator_double_failure",
                  "test_handle_errors_decorator_with_complex_context",
                  "test_handle_errors_decorator_with_operation_and_context",
                  "test_handle_errors_decorator_with_all_parameters",
                  "test_error_handler_global_instance",
                  "test_error_handler_global_instance_functionality",
                  "test_error_handler_retry_limits",
                  "test_error_handler_with_unrecoverable_error",
                  "test_error_handler_with_no_context",
                  "test_error_handler_with_empty_context",
                  "test_error_handler_with_user_friendly_false",
                  "test_error_handler_with_user_friendly_true",
                  "test_error_handler_with_default_operation",
                  "test_error_handler_with_custom_operation",
                  "test_error_handler_with_long_operation_name",
                  "test_error_handler_with_special_characters_in_context",
                  "test_error_handler_with_none_error",
                  "test_error_handler_with_none_context_and_error",
                  "test_file_not_found_recovery_strategy_without_file_path",
                  "test_file_not_found_recovery_strategy_with_invalid_file_path",
                  "test_file_not_found_recovery_strategy_with_empty_file_path",
                  "test_json_decode_recovery_strategy_recover",
                  "test_error_handler_with_file_operation_error",
                  "test_error_handler_with_data_error",
                  "test_error_handler_with_configuration_error",
                  "test_error_handler_with_mhm_error",
                  "test_error_handler_with_generic_exception",
                  "test_error_handler_with_runtime_error",
                  "test_error_handler_with_type_error",
                  "test_error_handler_with_attribute_error",
                  "test_error_handler_with_key_error",
                  "test_error_handler_with_index_error",
                  "test_error_handler_with_os_error",
                  "test_error_handler_with_io_error",
                  "test_error_handler_with_permission_error",
                  "test_error_handler_with_timeout_error",
                  "test_error_handler_with_connection_error",
                  "test_error_handler_with_import_error",
                  "test_error_handler_with_module_not_found_error",
                  "test_error_handler_with_unicode_error",
                  "test_error_handler_with_unicode_decode_error",
                  "test_error_handler_with_unicode_encode_error",
                  "test_error_handler_with_unicode_translate_error",
                  "test_error_handler_with_warning",
                  "test_error_handler_with_user_warning",
                  "test_error_handler_with_deprecation_warning",
                  "test_error_handler_with_future_warning",
                  "test_error_handler_with_pending_deprecation_warning",
                  "test_error_handler_with_runtime_warning",
                  "test_error_handler_with_syntax_warning",
                  "test_error_handler_with_import_warning",
                  "test_error_handler_with_unicode_warning",
                  "test_error_handler_with_bytes_warning",
                  "test_error_handler_with_resource_warning"
                ],
                "name": "TestErrorHandlingCoverageExpansionPhase3Final"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test MHMError initialization",
                "name": "test_mhm_error_initialization"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test DataError initialization",
                "name": "test_data_error_initialization"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test FileOperationError initialization",
                "name": "test_file_operation_error_initialization"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test ConfigurationError initialization",
                "name": "test_configuration_error_initialization"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test ErrorRecoveryStrategy base class",
                "name": "test_error_recovery_strategy_base_class"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test FileNotFoundRecovery strategy",
                "name": "test_file_not_found_recovery_strategy"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test JSONDecodeRecovery strategy",
                "name": "test_json_decode_recovery_strategy"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test ErrorHandler initialization",
                "name": "test_error_handler_initialization"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with recovery strategy",
                "name": "test_error_handler_with_recovery_strategy"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with multiple recovery strategies",
                "name": "test_error_handler_with_multiple_strategies"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with additional context",
                "name": "test_error_handler_with_context"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with complex context",
                "name": "test_error_handler_with_complex_context"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test handle_errors decorator with successful function",
                "name": "test_handle_errors_decorator_success"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test handle_errors decorator with exception",
                "name": "test_handle_errors_decorator_exception"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test handle_errors decorator with custom return value",
                "name": "test_handle_errors_decorator_custom_return"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test handle_errors decorator with specific exception handling",
                "name": "test_handle_errors_decorator_specific_exception"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test handle_errors decorator with context",
                "name": "test_handle_errors_decorator_with_context"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test handle_errors decorator with nested exceptions",
                "name": "test_handle_errors_decorator_nested_exceptions"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test handle_errors decorator with function arguments",
                "name": "test_handle_errors_decorator_with_args_kwargs"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test handle_errors decorator with exception in function arguments",
                "name": "test_handle_errors_decorator_with_exception_in_args"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test handle_errors decorator with user_friendly=False",
                "name": "test_handle_errors_decorator_user_friendly_false"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test handle_errors decorator with custom operation name",
                "name": "test_handle_errors_decorator_operation_name"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test handle_errors decorator with successful recovery",
                "name": "test_handle_errors_decorator_recovery_success"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test handle_errors decorator with failed recovery",
                "name": "test_handle_errors_decorator_recovery_failure"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test handle_errors decorator with double failure after recovery",
                "name": "test_handle_errors_decorator_double_failure"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test handle_errors decorator with complex context",
                "name": "test_handle_errors_decorator_with_complex_context"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test handle_errors decorator with both operation and context",
                "name": "test_handle_errors_decorator_with_operation_and_context"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test handle_errors decorator with all parameters",
                "name": "test_handle_errors_decorator_with_all_parameters"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test the global error_handler instance",
                "name": "test_error_handler_global_instance"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test the global error_handler instance functionality",
                "name": "test_error_handler_global_instance_functionality"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler retry limits",
                "name": "test_error_handler_retry_limits"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with unrecoverable error",
                "name": "test_error_handler_with_unrecoverable_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with no context",
                "name": "test_error_handler_with_no_context"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with empty context",
                "name": "test_error_handler_with_empty_context"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with user_friendly=False",
                "name": "test_error_handler_with_user_friendly_false"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with user_friendly=True",
                "name": "test_error_handler_with_user_friendly_true"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with default operation name",
                "name": "test_error_handler_with_default_operation"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with custom operation name",
                "name": "test_error_handler_with_custom_operation"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with long operation name",
                "name": "test_error_handler_with_long_operation_name"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with special characters in context",
                "name": "test_error_handler_with_special_characters_in_context"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with None error",
                "name": "test_error_handler_with_none_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with None context and error",
                "name": "test_error_handler_with_none_context_and_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test FileNotFoundRecovery strategy without file_path in context",
                "name": "test_file_not_found_recovery_strategy_without_file_path"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test FileNotFoundRecovery strategy with invalid file_path in context",
                "name": "test_file_not_found_recovery_strategy_with_invalid_file_path"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test FileNotFoundRecovery strategy with empty file_path in context",
                "name": "test_file_not_found_recovery_strategy_with_empty_file_path"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test JSONDecodeRecovery strategy recover method",
                "name": "test_json_decode_recovery_strategy_recover"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with FileOperationError",
                "name": "test_error_handler_with_file_operation_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with DataError",
                "name": "test_error_handler_with_data_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with ConfigurationError",
                "name": "test_error_handler_with_configuration_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with MHMError",
                "name": "test_error_handler_with_mhm_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with generic Exception",
                "name": "test_error_handler_with_generic_exception"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with RuntimeError",
                "name": "test_error_handler_with_runtime_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with TypeError",
                "name": "test_error_handler_with_type_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with AttributeError",
                "name": "test_error_handler_with_attribute_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with KeyError",
                "name": "test_error_handler_with_key_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with IndexError",
                "name": "test_error_handler_with_index_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with OSError",
                "name": "test_error_handler_with_os_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with IOError",
                "name": "test_error_handler_with_io_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with PermissionError",
                "name": "test_error_handler_with_permission_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with TimeoutError",
                "name": "test_error_handler_with_timeout_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with ConnectionError",
                "name": "test_error_handler_with_connection_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with ImportError",
                "name": "test_error_handler_with_import_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with ModuleNotFoundError",
                "name": "test_error_handler_with_module_not_found_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with UnicodeError",
                "name": "test_error_handler_with_unicode_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with UnicodeDecodeError",
                "name": "test_error_handler_with_unicode_decode_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with UnicodeEncodeError",
                "name": "test_error_handler_with_unicode_encode_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with UnicodeTranslateError",
                "name": "test_error_handler_with_unicode_translate_error"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with Warning",
                "name": "test_error_handler_with_warning"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with UserWarning",
                "name": "test_error_handler_with_user_warning"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with DeprecationWarning",
                "name": "test_error_handler_with_deprecation_warning"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with FutureWarning",
                "name": "test_error_handler_with_future_warning"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with PendingDeprecationWarning",
                "name": "test_error_handler_with_pending_deprecation_warning"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with RuntimeWarning",
                "name": "test_error_handler_with_runtime_warning"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with SyntaxWarning",
                "name": "test_error_handler_with_syntax_warning"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with ImportWarning",
                "name": "test_error_handler_with_import_warning"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with UnicodeWarning",
                "name": "test_error_handler_with_unicode_warning"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with BytesWarning",
                "name": "test_error_handler_with_bytes_warning"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test error handler with ResourceWarning",
                "name": "test_error_handler_with_resource_warning"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "outer_function"
              },
              {
                "args": [
                  "arg1",
                  "arg2",
                  "kwarg1",
                  "kwarg2"
                ],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [
                  "arg1",
                  "arg2"
                ],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "inner_function"
              }
            ]
          },
          "tests/behavior/test_interaction_handlers_behavior.py": {
            "classes": [
              {
                "docstring": "Test interaction handlers real behavior and side effects.",
                "methods": [
                  "_create_test_user",
                  "test_handler_registry_creates_all_handlers",
                  "test_get_interaction_handler_returns_correct_handler",
                  "test_task_management_handler_can_handle_intents",
                  "test_checkin_handler_can_handle_intents",
                  "test_profile_handler_can_handle_intents",
                  "test_schedule_management_handler_can_handle_intents",
                  "test_analytics_handler_can_handle_intents",
                  "test_help_handler_can_handle_intents",
                  "test_task_management_handler_creates_actual_task",
                  "test_task_management_handler_lists_actual_tasks",
                  "test_task_management_handler_completes_actual_task",
                  "test_checkin_handler_starts_checkin_flow",
                  "test_profile_handler_shows_actual_profile",
                  "test_help_handler_provides_help",
                  "test_all_handlers_return_proper_help",
                  "test_all_handlers_return_proper_examples",
                  "test_handler_error_handling",
                  "test_handler_response_structure"
                ],
                "name": "TestInteractionHandlersBehavior"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "user_id",
                  "enable_checkins",
                  "test_data_dir"
                ],
                "docstring": "Create a test user with proper account setup.",
                "name": "_create_test_user"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that all handlers are properly registered and accessible.",
                "name": "test_handler_registry_creates_all_handlers"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that get_interaction_handler returns the correct handler for each intent.",
                "name": "test_get_interaction_handler_returns_correct_handler"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that TaskManagementHandler can handle all expected intents.",
                "name": "test_task_management_handler_can_handle_intents"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that CheckinHandler can handle all expected intents.",
                "name": "test_checkin_handler_can_handle_intents"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that ProfileHandler can handle all expected intents.",
                "name": "test_profile_handler_can_handle_intents"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that ScheduleManagementHandler can handle all expected intents.",
                "name": "test_schedule_management_handler_can_handle_intents"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that AnalyticsHandler can handle all expected intents.",
                "name": "test_analytics_handler_can_handle_intents"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that HelpHandler can handle all expected intents.",
                "name": "test_help_handler_can_handle_intents"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that TaskManagementHandler actually creates a task in the system.",
                "name": "test_task_management_handler_creates_actual_task"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that TaskManagementHandler actually lists tasks from the system.",
                "name": "test_task_management_handler_lists_actual_tasks"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that TaskManagementHandler actually completes a task in the system.",
                "name": "test_task_management_handler_completes_actual_task"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that CheckinHandler starts a check-in flow.",
                "name": "test_checkin_handler_starts_checkin_flow"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that ProfileHandler shows actual user profile data.",
                "name": "test_profile_handler_shows_actual_profile"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that HelpHandler provides helpful information.",
                "name": "test_help_handler_provides_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that all handlers return proper help text.",
                "name": "test_all_handlers_return_proper_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that all handlers return proper example commands.",
                "name": "test_all_handlers_return_proper_examples"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that handlers handle errors gracefully.",
                "name": "test_handler_error_handling"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that all handlers return properly structured responses.",
                "name": "test_handler_response_structure"
              }
            ]
          },
          "tests/behavior/test_interaction_handlers_coverage_expansion.py": {
            "classes": [
              {
                "docstring": "Test TaskManagementHandler comprehensive coverage.",
                "methods": [
                  "test_handle_create_task_with_title_only",
                  "test_handle_create_task_with_all_properties",
                  "test_handle_create_task_invalid_priority",
                  "test_parse_relative_date_today",
                  "test_parse_relative_date_tomorrow",
                  "test_parse_relative_date_next_week",
                  "test_parse_relative_date_next_month",
                  "test_parse_relative_date_existing_date",
                  "test_handle_list_tasks_no_tasks",
                  "test_handle_list_tasks_with_tasks",
                  "test_handle_list_tasks_with_filters",
                  "test_handle_list_tasks_due_soon_filter",
                  "test_handle_list_tasks_overdue_filter",
                  "test_handle_complete_task_with_identifier",
                  "test_handle_complete_task_no_identifier",
                  "test_handle_complete_task_not_found",
                  "test_handle_delete_task_with_identifier",
                  "test_handle_delete_task_no_identifier",
                  "test_handle_update_task_with_updates",
                  "test_handle_update_task_no_updates",
                  "test_handle_task_stats_with_analytics",
                  "test_handle_task_stats_no_data",
                  "test_handle_unknown_intent",
                  "test_get_help",
                  "test_get_examples"
                ],
                "name": "TestTaskManagementHandlerCoverage"
              },
              {
                "docstring": "Test CheckinHandler comprehensive coverage.",
                "methods": [
                  "test_handle_start_checkin_new_user",
                  "test_handle_continue_checkin",
                  "test_handle_checkin_status",
                  "test_checkin_status_displays_scale_out_of_5"
                ],
                "name": "TestCheckinHandlerCoverage"
              },
              {
                "docstring": "Test ProfileHandler comprehensive coverage.",
                "methods": [
                  "test_handle_show_profile",
                  "test_profile_get_help_is_text",
                  "test_show_profile_not_raw_json",
                  "test_handle_update_profile",
                  "test_handle_profile_stats"
                ],
                "name": "TestProfileHandlerCoverage"
              },
              {
                "docstring": "Test ScheduleManagementHandler comprehensive coverage.",
                "methods": [
                  "test_handle_show_schedule",
                  "test_handle_update_schedule"
                ],
                "name": "TestScheduleManagementHandlerCoverage"
              },
              {
                "docstring": "Test AnalyticsHandler comprehensive coverage.",
                "methods": [
                  "test_handle_show_analytics",
                  "test_handle_mood_trends",
                  "test_quantitative_summary_respects_enabled_fields",
                  "test_mood_trends_displays_scale_out_of_5",
                  "test_checkin_history_displays_scale_out_of_5"
                ],
                "name": "TestAnalyticsHandlerCoverage"
              },
              {
                "docstring": "Test HelpHandler comprehensive coverage.",
                "methods": [
                  "test_handle_help",
                  "test_handle_commands",
                  "test_handle_examples"
                ],
                "name": "TestHelpHandlerCoverage"
              },
              {
                "docstring": "Test error handling in interaction handlers.",
                "methods": [
                  "test_task_management_handler_error_handling"
                ],
                "name": "TestErrorHandling"
              },
              {
                "docstring": "Test advanced task management functionality for coverage expansion.",
                "methods": [
                  "test_handle_create_task_with_recurrence_settings",
                  "test_handle_create_task_with_invalid_priority",
                  "test_handle_create_task_with_invalid_recurrence_pattern",
                  "test_handle_list_tasks_with_priority_filter",
                  "test_handle_list_tasks_with_tag_filter",
                  "test_handle_complete_task_suggestion_logic",
                  "test_handle_complete_task_with_no_tasks",
                  "test_handle_edit_task_with_invalid_task_id",
                  "test_handle_delete_task_with_invalid_task_id"
                ],
                "name": "TestTaskManagementAdvancedCoverage"
              },
              {
                "docstring": "Test advanced checkin handler functionality for coverage expansion.",
                "methods": [
                  "test_handle_start_checkin_with_disabled_checkins",
                  "test_handle_start_checkin_with_no_questions",
                  "test_handle_checkin_response_with_invalid_response"
                ],
                "name": "TestCheckinHandlerAdvancedCoverage"
              },
              {
                "docstring": "Test advanced profile handler functionality for coverage expansion.",
                "methods": [
                  "test_handle_show_profile_with_missing_data",
                  "test_handle_update_profile_with_invalid_data"
                ],
                "name": "TestProfileHandlerAdvancedCoverage"
              },
              {
                "docstring": "Test advanced schedule management functionality for coverage expansion.",
                "methods": [
                  "test_handle_show_schedule_with_no_schedules",
                  "test_handle_update_schedule_with_invalid_period"
                ],
                "name": "TestScheduleManagementHandlerAdvancedCoverage"
              },
              {
                "docstring": "Test advanced analytics handler functionality for coverage expansion.",
                "methods": [
                  "test_handle_show_analytics_with_no_data",
                  "test_handle_show_analytics_with_specific_metric"
                ],
                "name": "TestAnalyticsHandlerAdvancedCoverage"
              },
              {
                "docstring": "Test advanced help handler functionality for coverage expansion.",
                "methods": [
                  "test_handle_help_with_specific_handler",
                  "test_handle_help_with_invalid_handler",
                  "test_handler_with_missing_user_data"
                ],
                "name": "TestHelpHandlerAdvancedCoverage"
              },
              {
                "docstring": "",
                "methods": [
                  "get_mood_trends"
                ],
                "name": "_MockAnalytics"
              },
              {
                "docstring": "",
                "methods": [
                  "get_checkin_history"
                ],
                "name": "_MockAnalytics"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Mock communication manager for testing.",
                "name": "mock_communication_manager"
              },
              {
                "args": [
                  "test_path_factory"
                ],
                "docstring": "Provide per-test data directory under tests/data/tmp.",
                "name": "test_data_dir"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test task creation with only title.",
                "name": "test_handle_create_task_with_title_only"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test task creation with all properties.",
                "name": "test_handle_create_task_with_all_properties"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test task creation with invalid priority.",
                "name": "test_handle_create_task_invalid_priority"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test relative date parsing for 'today'.",
                "name": "test_parse_relative_date_today"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test relative date parsing for 'tomorrow'.",
                "name": "test_parse_relative_date_tomorrow"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test relative date parsing for 'next week'.",
                "name": "test_parse_relative_date_next_week"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test relative date parsing for 'next month'.",
                "name": "test_parse_relative_date_next_month"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test relative date parsing for existing date.",
                "name": "test_parse_relative_date_existing_date"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test listing tasks when user has no tasks.",
                "name": "test_handle_list_tasks_no_tasks"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test listing tasks when user has tasks.",
                "name": "test_handle_list_tasks_with_tasks"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test listing tasks with various filters.",
                "name": "test_handle_list_tasks_with_filters"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test listing tasks with due_soon filter.",
                "name": "test_handle_list_tasks_due_soon_filter"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test listing tasks with overdue filter.",
                "name": "test_handle_list_tasks_overdue_filter"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test completing a task with identifier.",
                "name": "test_handle_complete_task_with_identifier"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test completing a task without identifier.",
                "name": "test_handle_complete_task_no_identifier"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test completing a task that doesn't exist.",
                "name": "test_handle_complete_task_not_found"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test deleting a task with identifier.",
                "name": "test_handle_delete_task_with_identifier"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test deleting a task without identifier.",
                "name": "test_handle_delete_task_no_identifier"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test updating a task with specific updates.",
                "name": "test_handle_update_task_with_updates"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test updating a task without specifying updates.",
                "name": "test_handle_update_task_no_updates"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test task statistics with analytics.",
                "name": "test_handle_task_stats_with_analytics"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test task statistics with no data.",
                "name": "test_handle_task_stats_no_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test handling unknown intent.",
                "name": "test_handle_unknown_intent"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting help text.",
                "name": "test_get_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting example commands.",
                "name": "test_get_examples"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test starting check-in for new user.",
                "name": "test_handle_start_checkin_new_user"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test continuing check-in process.",
                "name": "test_handle_continue_checkin"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test checking check-in status.",
                "name": "test_handle_checkin_status"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "monkeypatch"
                ],
                "docstring": "Ensure check-in status lines render mood values on a /5 scale.",
                "name": "test_checkin_status_displays_scale_out_of_5"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test showing user profile.",
                "name": "test_handle_show_profile"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "ProfileHandler.get_help should return a helpful text string.",
                "name": "test_profile_get_help_is_text"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Profile display should be formatted text, not raw JSON.",
                "name": "test_show_profile_not_raw_json"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test updating user profile.",
                "name": "test_handle_update_profile"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test showing profile statistics.",
                "name": "test_handle_profile_stats"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test showing user schedule.",
                "name": "test_handle_show_schedule"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test updating user schedule.",
                "name": "test_handle_update_schedule"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test showing analytics.",
                "name": "test_handle_show_analytics"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test showing mood trends.",
                "name": "test_handle_mood_trends"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "monkeypatch"
                ],
                "docstring": "Quant summary should include only enabled numeric fields present in data.",
                "name": "test_quantitative_summary_respects_enabled_fields"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "monkeypatch"
                ],
                "docstring": "Ensure mood trends render averages/ranges on a /5 scale.",
                "name": "test_mood_trends_displays_scale_out_of_5"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "monkeypatch"
                ],
                "docstring": "Ensure check-in history shows mood as /5.",
                "name": "test_checkin_history_displays_scale_out_of_5"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test showing help.",
                "name": "test_handle_help"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test showing commands.",
                "name": "test_handle_commands"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test showing examples.",
                "name": "test_handle_examples"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test error handling in task management.",
                "name": "test_task_management_handler_error_handling"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test task creation with recurrence settings from user preferences.",
                "name": "test_handle_create_task_with_recurrence_settings"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test task creation with invalid priority (should default to medium).",
                "name": "test_handle_create_task_with_invalid_priority"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test task creation with invalid recurrence pattern (should be ignored).",
                "name": "test_handle_create_task_with_invalid_recurrence_pattern"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test task listing with priority filter.",
                "name": "test_handle_list_tasks_with_priority_filter"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test task listing with tag filter.",
                "name": "test_handle_list_tasks_with_tag_filter"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test task completion suggestion logic when no specific task is mentioned.",
                "name": "test_handle_complete_task_suggestion_logic"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test task completion when user has no tasks.",
                "name": "test_handle_complete_task_with_no_tasks"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test task editing with invalid task ID.",
                "name": "test_handle_edit_task_with_invalid_task_id"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test task deletion with invalid task ID.",
                "name": "test_handle_delete_task_with_invalid_task_id"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test starting checkin when checkins are disabled for user.",
                "name": "test_handle_start_checkin_with_disabled_checkins"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test starting checkin when no questions are available.",
                "name": "test_handle_start_checkin_with_no_questions"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test checkin response handling with invalid response format.",
                "name": "test_handle_checkin_response_with_invalid_response"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test profile display when user data is missing.",
                "name": "test_handle_show_profile_with_missing_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test profile update with invalid data.",
                "name": "test_handle_update_profile_with_invalid_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test schedule display when user has no schedules.",
                "name": "test_handle_show_schedule_with_no_schedules"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test schedule update with invalid time period.",
                "name": "test_handle_update_schedule_with_invalid_period"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test analytics display when user has no data.",
                "name": "test_handle_show_analytics_with_no_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test analytics display with specific metric request.",
                "name": "test_handle_show_analytics_with_specific_metric"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test help display for specific handler.",
                "name": "test_handle_help_with_specific_handler"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test help display for invalid handler.",
                "name": "test_handle_help_with_invalid_handler"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test handlers with missing user data.",
                "name": "test_handler_with_missing_user_data"
              },
              {
                "args": [
                  "uid",
                  "section"
                ],
                "docstring": "",
                "name": "_mock_get_user_data"
              },
              {
                "args": [
                  "self",
                  "uid",
                  "days"
                ],
                "docstring": "",
                "name": "get_mood_trends"
              },
              {
                "args": [
                  "self",
                  "uid",
                  "days"
                ],
                "docstring": "",
                "name": "get_checkin_history"
              }
            ]
          },
          "tests/behavior/test_logger_behavior.py": {
            "classes": [
              {
                "docstring": "Test logger initialization with real behavior verification.",
                "methods": [
                  "temp_log_dir",
                  "test_get_logger_creation_real_behavior",
                  "test_get_logger_same_name_real_behavior",
                  "test_get_log_level_from_env_real_behavior"
                ],
                "name": "TestLoggerInitializationBehavior"
              },
              {
                "docstring": "Test logger verbosity control with real behavior verification.",
                "methods": [
                  "temp_log_dir",
                  "test_verbose_mode_toggle_real_behavior",
                  "test_set_verbose_mode_real_behavior",
                  "test_set_console_log_level_real_behavior"
                ],
                "name": "TestLoggerVerbosityBehavior"
              },
              {
                "docstring": "Test noise suppression functionality with real behavior verification.",
                "methods": [
                  "test_suppress_noisy_logging_real_behavior",
                  "test_disable_module_logging_real_behavior"
                ],
                "name": "TestLoggerNoiseSuppressionBehavior"
              },
              {
                "docstring": "Test logger file operations with real behavior verification.",
                "methods": [
                  "temp_log_dir",
                  "test_backup_directory_rotating_handler_creation_real_behavior",
                  "test_get_log_file_info_real_behavior",
                  "test_cleanup_old_logs_real_behavior"
                ],
                "name": "TestLoggerFileOperationsBehavior"
              },
              {
                "docstring": "Test logger restart functionality with real behavior verification.",
                "methods": [
                  "temp_log_dir",
                  "test_force_restart_logging_real_behavior",
                  "test_setup_logging_idempotent_real_behavior"
                ],
                "name": "TestLoggerRestartBehavior"
              },
              {
                "docstring": "Test logger integration with real behavior verification.",
                "methods": [
                  "temp_log_dir",
                  "test_logger_full_workflow_real_behavior",
                  "test_logger_environment_integration_real_behavior"
                ],
                "name": "TestLoggerIntegrationBehavior"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Create temporary log directory for testing.",
                "name": "temp_log_dir"
              },
              {
                "args": [
                  "self",
                  "temp_log_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test logger can be created successfully.",
                "name": "test_get_logger_creation_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_log_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test getting same logger returns same instance.",
                "name": "test_get_logger_same_name_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test getting log level from environment.",
                "name": "test_get_log_level_from_env_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Create temporary log directory for testing.",
                "name": "temp_log_dir"
              },
              {
                "args": [
                  "self",
                  "temp_log_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test verbose mode toggle functionality.",
                "name": "test_verbose_mode_toggle_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_log_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test setting verbose mode explicitly.",
                "name": "test_set_verbose_mode_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_log_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test setting console log level.",
                "name": "test_set_console_log_level_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test suppression of noisy third-party logging.",
                "name": "test_suppress_noisy_logging_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test disabling specific module logging.",
                "name": "test_disable_module_logging_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Create temporary log directory for testing.",
                "name": "temp_log_dir"
              },
              {
                "args": [
                  "self",
                  "temp_log_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test BackupDirectoryRotatingFileHandler creation.",
                "name": "test_backup_directory_rotating_handler_creation_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_log_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test getting log file information.",
                "name": "test_get_log_file_info_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_log_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cleanup of old log files.",
                "name": "test_cleanup_old_logs_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Create temporary log directory for testing.",
                "name": "temp_log_dir"
              },
              {
                "args": [
                  "self",
                  "temp_log_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test forcing logging restart.",
                "name": "test_force_restart_logging_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_log_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test setup_logging is idempotent.",
                "name": "test_setup_logging_idempotent_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Create temporary log directory for testing.",
                "name": "temp_log_dir"
              },
              {
                "args": [
                  "self",
                  "temp_log_dir",
                  "monkeypatch"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test complete logger workflow.",
                "name": "test_logger_full_workflow_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_log_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test logger integration with environment variables.",
                "name": "test_logger_environment_integration_real_behavior"
              }
            ]
          },
          "tests/behavior/test_logger_coverage_expansion.py": {
            "classes": [
              {
                "docstring": "Test Core Logger coverage expansion with real behavior verification.",
                "methods": [
                  "_setup",
                  "teardown_method",
                  "test_component_logger_initialization_real_behavior",
                  "test_component_logger_custom_level_real_behavior",
                  "test_component_logger_logging_methods_real_behavior",
                  "test_component_logger_structured_data_real_behavior",
                  "test_backup_directory_rotating_file_handler_initialization_real_behavior",
                  "test_backup_directory_rotating_file_handler_rollover_real_behavior",
                  "test_backup_directory_rotating_file_handler_rollover_disabled_real_behavior",
                  "test_heartbeat_warning_filter_real_behavior",
                  "test_heartbeat_warning_filter_summary_logging_real_behavior",
                  "test_get_component_logger_real_behavior",
                  "test_get_logger_real_behavior",
                  "test_suppress_noisy_logging_real_behavior",
                  "test_compress_old_logs_real_behavior",
                  "test_compress_old_logs_no_files_real_behavior",
                  "test_cleanup_old_archives_real_behavior",
                  "test_cleanup_old_logs_real_behavior",
                  "test_logger_error_handling_real_behavior",
                  "test_logger_performance_under_load",
                  "test_logger_memory_behavior",
                  "test_logger_thread_safety_behavior",
                  "test_logger_file_rotation_edge_cases",
                  "test_logger_encoding_handling_real_behavior",
                  "test_logger_concurrent_file_access",
                  "test_logger_backup_directory_creation_real_behavior",
                  "test_logger_formatter_real_behavior",
                  "test_logger_level_filtering_real_behavior",
                  "test_get_log_file_info_real_behavior",
                  "test_setup_logging_real_behavior",
                  "test_toggle_verbose_logging_real_behavior",
                  "test_get_verbose_mode_real_behavior",
                  "test_set_verbose_mode_real_behavior"
                ],
                "name": "TestLoggerCoverageExpansion"
              },
              {
                "docstring": "Test integration behavior of Core Logger.",
                "methods": [
                  "_setup",
                  "teardown_method",
                  "test_logger_integration_with_multiple_components",
                  "test_logger_error_recovery_with_real_operations",
                  "test_logger_concurrent_access_safety",
                  "test_logger_memory_behavior",
                  "test_logger_thread_safety_behavior"
                ],
                "name": "TestLoggerIntegration"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_path_factory"
                ],
                "docstring": "Set up test environment.",
                "name": "_setup"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Clean up test environment.",
                "name": "teardown_method"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that component logger initializes with proper structure.",
                "name": "test_component_logger_initialization_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test component logger with custom log level.",
                "name": "test_component_logger_custom_level_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test all logging methods with real behavior.",
                "name": "test_component_logger_logging_methods_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test logging with structured data.",
                "name": "test_component_logger_structured_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup directory rotating file handler initialization.",
                "name": "test_backup_directory_rotating_file_handler_initialization_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test log file rollover with real behavior.",
                "name": "test_backup_directory_rotating_file_handler_rollover_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test rollover when disabled.",
                "name": "test_backup_directory_rotating_file_handler_rollover_disabled_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test heartbeat warning filter with real behavior.",
                "name": "test_heartbeat_warning_filter_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test heartbeat warning filter summary logging.",
                "name": "test_heartbeat_warning_filter_summary_logging_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test get_component_logger function with real behavior.",
                "name": "test_get_component_logger_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test get_logger function with real behavior.",
                "name": "test_get_logger_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test suppress_noisy_logging function with real behavior.",
                "name": "test_suppress_noisy_logging_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test compression of old log files with real behavior.",
                "name": "test_compress_old_logs_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test compression when no files exist.",
                "name": "test_compress_old_logs_no_files_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test cleanup of old archives with real behavior.",
                "name": "test_cleanup_old_archives_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test cleanup of old log files with real behavior.",
                "name": "test_cleanup_old_logs_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test logger error handling with real behavior.",
                "name": "test_logger_error_handling_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test logger performance under load.",
                "name": "test_logger_performance_under_load"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test memory usage behavior of logger.",
                "name": "test_logger_memory_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test thread safety behavior of logger.",
                "name": "test_logger_thread_safety_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test logger file rotation edge cases.",
                "name": "test_logger_file_rotation_edge_cases"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test logger encoding handling with real behavior.",
                "name": "test_logger_encoding_handling_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test concurrent file access behavior.",
                "name": "test_logger_concurrent_file_access"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test backup directory creation with real behavior.",
                "name": "test_logger_backup_directory_creation_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test logger formatter with real behavior.",
                "name": "test_logger_formatter_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test logger level filtering with real behavior.",
                "name": "test_logger_level_filtering_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test get_log_file_info function with real behavior.",
                "name": "test_get_log_file_info_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test setup_logging function with real behavior.",
                "name": "test_setup_logging_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test toggle_verbose_logging function with real behavior.",
                "name": "test_toggle_verbose_logging_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test get_verbose_mode function with real behavior.",
                "name": "test_get_verbose_mode_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test set_verbose_mode function with real behavior.",
                "name": "test_set_verbose_mode_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_path_factory"
                ],
                "docstring": "Set up test environment.",
                "name": "_setup"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Clean up test environment.",
                "name": "teardown_method"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test logger integration with multiple components.",
                "name": "test_logger_integration_with_multiple_components"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test error recovery when working with real operations.",
                "name": "test_logger_error_recovery_with_real_operations"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that logger handles concurrent access safely.",
                "name": "test_logger_concurrent_access_safety"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test memory usage behavior of logger.",
                "name": "test_logger_memory_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test thread safety behavior of logger.",
                "name": "test_logger_thread_safety_behavior"
              },
              {
                "args": [
                  "level",
                  "message"
                ],
                "docstring": "",
                "name": "create_record"
              },
              {
                "args": [
                  "thread_id"
                ],
                "docstring": "",
                "name": "log_messages"
              },
              {
                "args": [
                  "thread_id"
                ],
                "docstring": "",
                "name": "write_logs"
              },
              {
                "args": [
                  "thread_id"
                ],
                "docstring": "",
                "name": "log_messages"
              },
              {
                "args": [
                  "thread_id"
                ],
                "docstring": "",
                "name": "log_messages"
              }
            ]
          },
          "tests/behavior/test_logger_coverage_expansion_phase3_simple.py": {
            "classes": [
              {
                "docstring": "Simple test suite to expand logger coverage from 68% to 75%+",
                "methods": [
                  "test_get_log_file_info_function",
                  "test_get_log_file_info_with_nonexistent_files",
                  "test_verbose_mode_functions_simple",
                  "test_environment_detection_functions_simple",
                  "test_component_logger_channels_alias_simple",
                  "test_component_logger_unknown_component_fallback_simple",
                  "test_backup_directory_rotating_file_handler_rollover_simple",
                  "test_heartbeat_warning_filter_simple",
                  "test_compress_old_logs_simple",
                  "test_cleanup_old_archives_simple",
                  "test_cleanup_old_logs_simple",
                  "test_suppress_noisy_logging_simple",
                  "test_setup_logging_environment_detection_simple",
                  "test_component_logger_error_handling_during_creation_simple",
                  "test_backup_directory_rotating_file_handler_initialization_simple",
                  "test_logger_integration_with_multiple_components_simple",
                  "test_logger_performance_under_high_load_simple"
                ],
                "name": "TestLoggerCoverageExpansionPhase3Simple"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test get_log_file_info function with proper mocking",
                "name": "test_get_log_file_info_function"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test get_log_file_info with nonexistent files",
                "name": "test_get_log_file_info_with_nonexistent_files"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test verbose mode setting and getting functions",
                "name": "test_verbose_mode_functions_simple"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test environment detection functions",
                "name": "test_environment_detection_functions_simple"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test that 'channels' component name is aliased to 'communication_manager'",
                "name": "test_component_logger_channels_alias_simple"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test that unknown component names fall back to main log file",
                "name": "test_component_logger_unknown_component_fallback_simple"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test BackupDirectoryRotatingFileHandler rollover with simple conditions",
                "name": "test_backup_directory_rotating_file_handler_rollover_simple"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test HeartbeatWarningFilter basic functionality",
                "name": "test_heartbeat_warning_filter_simple"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test compress_old_logs with simple conditions",
                "name": "test_compress_old_logs_simple"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test cleanup_old_archives with simple conditions",
                "name": "test_cleanup_old_archives_simple"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test cleanup_old_logs with simple conditions",
                "name": "test_cleanup_old_logs_simple"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test suppress_noisy_logging function",
                "name": "test_suppress_noisy_logging_simple"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test setup_logging with different environment configurations",
                "name": "test_setup_logging_environment_detection_simple"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test ComponentLogger error handling during creation",
                "name": "test_component_logger_error_handling_during_creation_simple"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test BackupDirectoryRotatingFileHandler initialization with simple parameters",
                "name": "test_backup_directory_rotating_file_handler_initialization_simple"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test logger integration with multiple components",
                "name": "test_logger_integration_with_multiple_components_simple"
              },
              {
                "args": [
                  "self",
                  "tmp_path"
                ],
                "docstring": "Test logger performance under high load conditions",
                "name": "test_logger_performance_under_high_load_simple"
              }
            ]
          },
          "tests/behavior/test_message_behavior.py": {
            "classes": [
              {
                "docstring": "Test message category functionality.",
                "methods": [
                  "test_get_message_categories_success",
                  "test_get_message_categories_default",
                  "test_get_message_categories_custom",
                  "test_get_message_categories_empty"
                ],
                "name": "TestMessageCategories"
              },
              {
                "docstring": "Test default message loading functionality.",
                "methods": [
                  "test_load_default_messages_success",
                  "test_load_default_messages_file_not_found",
                  "test_load_default_messages_invalid_json"
                ],
                "name": "TestDefaultMessages"
              },
              {
                "docstring": "Test message CRUD operations.",
                "methods": [
                  "test_add_message_success",
                  "test_edit_message_success",
                  "test_edit_message_not_found",
                  "test_update_message_success",
                  "test_delete_message_success",
                  "test_delete_message_not_found"
                ],
                "name": "TestMessageCRUD"
              },
              {
                "docstring": "Test sent message tracking functionality.",
                "methods": [
                  "test_store_sent_message_success",
                  "test_get_recent_messages_success",
                  "test_get_recent_messages_empty"
                ],
                "name": "TestSentMessages"
              },
              {
                "docstring": "Test message file creation and management.",
                "methods": [
                  "test_create_message_file_from_defaults_success",
                  "test_ensure_user_message_files_success"
                ],
                "name": "TestMessageFileManagement"
              },
              {
                "docstring": "Test error handling in message management functions.",
                "methods": [
                  "test_add_message_file_error",
                  "test_edit_message_file_error",
                  "test_delete_message_file_error",
                  "test_store_sent_message_file_error"
                ],
                "name": "TestErrorHandling"
              },
              {
                "docstring": "Test integration between message management functions.",
                "methods": [
                  "test_full_message_lifecycle"
                ],
                "name": "TestIntegration"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting message categories successfully.",
                "name": "test_get_message_categories_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting default message categories.",
                "name": "test_get_message_categories_default"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting custom message categories.",
                "name": "test_get_message_categories_custom"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting message categories when none are defined.",
                "name": "test_get_message_categories_empty"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test loading default messages successfully.",
                "name": "test_load_default_messages_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test loading default messages when file doesn't exist.",
                "name": "test_load_default_messages_file_not_found"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test loading default messages with invalid JSON.",
                "name": "test_load_default_messages_invalid_json"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test adding a message successfully.",
                "name": "test_add_message_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test editing a message successfully.",
                "name": "test_edit_message_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test editing a message that doesn't exist.",
                "name": "test_edit_message_not_found"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test updating a message successfully.",
                "name": "test_update_message_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test deleting a message successfully.",
                "name": "test_delete_message_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test deleting a message that doesn't exist.",
                "name": "test_delete_message_not_found"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test storing a sent message successfully.",
                "name": "test_store_sent_message_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test getting last 10 sent messages successfully.",
                "name": "test_get_recent_messages_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test getting last 10 messages when none exist.",
                "name": "test_get_recent_messages_empty"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test creating message file from defaults successfully.",
                "name": "test_create_message_file_from_defaults_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test ensuring user message files exist successfully.",
                "name": "test_ensure_user_message_files_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test add_message handles file errors gracefully.",
                "name": "test_add_message_file_error"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test edit_message handles file errors gracefully.",
                "name": "test_edit_message_file_error"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test delete_message handles file errors gracefully.",
                "name": "test_delete_message_file_error"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test store_sent_message handles file errors gracefully.",
                "name": "test_store_sent_message_file_error"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test complete message lifecycle (add, edit, delete).",
                "name": "test_full_message_lifecycle"
              }
            ]
          },
          "tests/behavior/test_observability_logging.py": {
            "classes": [],
            "functions": [
              {
                "args": [
                  "tmp_path",
                  "monkeypatch"
                ],
                "docstring": "Verify component logs go to their files, do not duplicate into app.log, and errors go to errors.log.",
                "name": "test_component_logs_isolation_and_errors_capture"
              }
            ]
          },
          "tests/behavior/test_response_tracking_behavior.py": {
            "classes": [
              {
                "docstring": "Test real behavior of response tracking functions.",
                "methods": [
                  "test_store_user_response_creates_actual_file",
                  "test_store_user_response_persists_multiple_entries",
                  "test_store_chat_interaction_creates_chat_log",
                  "test_get_recent_responses_returns_actual_data",
                  "test_get_recent_checkins_returns_checkin_data",
                  "test_get_recent_chat_interactions_returns_chat_data",
                  "test_get_user_checkin_preferences_returns_actual_preferences",
                  "test_is_user_checkins_enabled_checks_actual_account_data",
                  "test_get_user_checkin_questions_returns_actual_questions",
                  "test_get_user_info_for_tracking_returns_complete_user_info",
                  "test_track_user_response_stores_checkin",
                  "test_track_user_response_stores_chat_interaction",
                  "test_track_user_response_stores_generic_response",
                  "test_response_tracking_error_handling_preserves_system_stability",
                  "test_response_tracking_performance_under_load",
                  "test_response_tracking_data_integrity"
                ],
                "name": "TestResponseTrackingBehavior"
              },
              {
                "docstring": "Test integration between response tracking functions.",
                "methods": [
                  "test_response_tracking_integration_with_user_data",
                  "test_response_tracking_error_recovery_with_real_files",
                  "test_response_tracking_concurrent_access_safety"
                ],
                "name": "TestResponseTrackingIntegration"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that storing user response actually creates data files.",
                "name": "test_store_user_response_creates_actual_file"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that storing multiple responses actually persists all entries.",
                "name": "test_store_user_response_persists_multiple_entries"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that chat interactions are stored in chat interactions file.",
                "name": "test_store_chat_interaction_creates_chat_log"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that getting recent responses actually returns stored data.",
                "name": "test_get_recent_responses_returns_actual_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that getting recent checkins returns actual checkin data.",
                "name": "test_get_recent_checkins_returns_checkin_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that getting recent chat interactions returns actual chat data.",
                "name": "test_get_recent_chat_interactions_returns_chat_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that getting user checkin preferences returns actual preference data.",
                "name": "test_get_user_checkin_preferences_returns_actual_preferences"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that checking if user checkins are enabled checks actual account data.",
                "name": "test_is_user_checkins_enabled_checks_actual_account_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that getting user checkin questions returns actual question configuration.",
                "name": "test_get_user_checkin_questions_returns_actual_questions"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that getting user info for tracking returns complete user information.",
                "name": "test_get_user_info_for_tracking_returns_complete_user_info"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that tracking user response stores checkin data.",
                "name": "test_track_user_response_stores_checkin"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that tracking user response stores chat interaction data.",
                "name": "test_track_user_response_stores_chat_interaction"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that tracking user response stores generic response data.",
                "name": "test_track_user_response_stores_generic_response"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that response tracking error handling preserves system stability.",
                "name": "test_response_tracking_error_handling_preserves_system_stability"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that response tracking performs well under load.",
                "name": "test_response_tracking_performance_under_load"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that response tracking maintains data integrity.",
                "name": "test_response_tracking_data_integrity"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test integration between response tracking and user data management.",
                "name": "test_response_tracking_integration_with_user_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test error recovery when working with real files.",
                "name": "test_response_tracking_error_recovery_with_real_files"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that response tracking handles concurrent access safely.",
                "name": "test_response_tracking_concurrent_access_safety"
              }
            ]
          },
          "tests/behavior/test_schedule_management_behavior.py": {
            "classes": [
              {
                "docstring": "Test schedule management real behavior and side effects.",
                "methods": [
                  "test_get_schedule_time_periods_creates_cache",
                  "test_set_schedule_period_active_persists_changes",
                  "test_clear_schedule_periods_cache_removes_entries",
                  "test_validate_and_format_time_enforces_rules",
                  "test_time_conversion_functions_work_correctly",
                  "test_get_current_day_names_returns_actual_days",
                  "test_schedule_period_activation_integration",
                  "test_schedule_cache_invalidation",
                  "test_set_schedule_periods_persists_complete_data",
                  "test_set_schedule_days_persists_day_changes",
                  "test_schedule_period_crud_with_usercontext_mocking",
                  "test_schedule_period_operations_with_error_handling",
                  "test_schedule_period_validation_errors",
                  "test_schedule_period_operations_with_scheduler_manager",
                  "test_schedule_period_operations_with_real_user_data",
                  "test_schedule_period_edge_cases"
                ],
                "name": "TestScheduleManagementBehavior"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that getting schedule periods actually creates cache entries.",
                "name": "test_get_schedule_time_periods_creates_cache"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that setting period active actually persists changes to user data.",
                "name": "test_set_schedule_period_active_persists_changes"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that clearing schedule periods cache actually removes cache entries.",
                "name": "test_clear_schedule_periods_cache_removes_entries"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that time validation actually enforces format rules.",
                "name": "test_validate_and_format_time_enforces_rules"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that time conversion functions produce accurate results.",
                "name": "test_time_conversion_functions_work_correctly"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that get_current_day_names returns actual current day information.",
                "name": "test_get_current_day_names_returns_actual_days"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test complete integration of schedule period activation workflow.",
                "name": "test_schedule_period_activation_integration"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that schedule cache is properly invalidated when data changes.",
                "name": "test_schedule_cache_invalidation"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that setting schedule periods actually persists complete data structure.",
                "name": "test_set_schedule_periods_persists_complete_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that setting schedule days actually persists day changes.",
                "name": "test_set_schedule_days_persists_day_changes"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test CRUD operations with proper UserContext mocking.",
                "name": "test_schedule_period_crud_with_usercontext_mocking"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that schedule operations handle errors gracefully.",
                "name": "test_schedule_period_operations_with_error_handling"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that schedule operations validate input correctly.",
                "name": "test_schedule_period_validation_errors"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test schedule operations with scheduler manager integration.",
                "name": "test_schedule_period_operations_with_scheduler_manager"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test schedule operations with realistic user data setup.",
                "name": "test_schedule_period_operations_with_real_user_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test schedule operations with edge cases and boundary conditions.",
                "name": "test_schedule_period_edge_cases"
              }
            ]
          },
          "tests/behavior/test_scheduler_behavior.py": {
            "classes": [
              {
                "docstring": "Test SchedulerManager functionality.",
                "methods": [
                  "scheduler_manager",
                  "test_scheduler_manager_initialization",
                  "test_stop_scheduler_no_thread",
                  "test_is_job_for_category_no_jobs",
                  "test_is_job_for_category_with_matching_job",
                  "test_is_job_for_category_with_non_matching_job",
                  "test_get_random_time_within_period_valid_times",
                  "test_get_random_time_within_period_invalid_times",
                  "test_is_time_conflict_no_conflicts",
                  "test_cleanup_old_tasks",
                  "test_log_scheduled_tasks"
                ],
                "name": "TestSchedulerManager"
              },
              {
                "docstring": "Test standalone scheduler functions.",
                "methods": [
                  "test_get_user_categories_success",
                  "test_get_user_categories_no_user",
                  "test_get_user_task_preferences_success",
                  "test_get_user_task_preferences_no_user",
                  "test_get_user_checkin_preferences_success",
                  "test_get_user_checkin_preferences_no_user"
                ],
                "name": "TestSchedulerFunctions"
              },
              {
                "docstring": "Test scheduler integration scenarios.",
                "methods": [
                  "test_scheduler_lifecycle",
                  "test_scheduler_with_mock_users"
                ],
                "name": "TestSchedulerIntegration"
              },
              {
                "docstring": "Test scheduler edge cases and error conditions.",
                "methods": [
                  "test_scheduler_with_empty_user_list",
                  "test_scheduler_with_invalid_user_data",
                  "test_random_time_generation_consistency"
                ],
                "name": "TestSchedulerEdgeCases"
              },
              {
                "docstring": "Test task reminder specific functions.",
                "methods": [
                  "test_schedule_all_task_reminders_success",
                  "test_schedule_all_task_reminders_disabled"
                ],
                "name": "TestTaskReminderFunctions"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Create a mock communication manager.",
                "name": "mock_communication_manager"
              },
              {
                "args": [
                  "self",
                  "mock_communication_manager"
                ],
                "docstring": "Create a SchedulerManager instance for testing.",
                "name": "scheduler_manager"
              },
              {
                "args": [
                  "self",
                  "mock_communication_manager"
                ],
                "docstring": "Test SchedulerManager initialization.",
                "name": "test_scheduler_manager_initialization"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test stopping scheduler when no thread is running.",
                "name": "test_stop_scheduler_no_thread"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test checking for jobs when no jobs exist.",
                "name": "test_is_job_for_category_no_jobs"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test checking for jobs when a matching job exists.",
                "name": "test_is_job_for_category_with_matching_job"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test checking for jobs when no matching job exists.",
                "name": "test_is_job_for_category_with_non_matching_job"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test getting random time within a valid time period.",
                "name": "test_get_random_time_within_period_valid_times"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test getting random time with invalid time format.",
                "name": "test_get_random_time_within_period_invalid_times"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test time conflict detection when no conflicts exist.",
                "name": "test_is_time_conflict_no_conflicts"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager",
                  "test_data_dir"
                ],
                "docstring": "Test cleaning up old scheduled tasks.",
                "name": "test_cleanup_old_tasks"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test logging of scheduled tasks.",
                "name": "test_log_scheduled_tasks"
              },
              {
                "args": [
                  "self",
                  "mock_user_data"
                ],
                "docstring": "Test getting user categories successfully.",
                "name": "test_get_user_categories_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting categories for non-existent user.",
                "name": "test_get_user_categories_no_user"
              },
              {
                "args": [
                  "self",
                  "mock_user_data"
                ],
                "docstring": "Test getting user task preferences successfully.",
                "name": "test_get_user_task_preferences_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting task preferences for non-existent user.",
                "name": "test_get_user_task_preferences_no_user"
              },
              {
                "args": [
                  "self",
                  "mock_user_data"
                ],
                "docstring": "Test getting user check-in preferences successfully.",
                "name": "test_get_user_checkin_preferences_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting check-in preferences for non-existent user.",
                "name": "test_get_user_checkin_preferences_no_user"
              },
              {
                "args": [
                  "self",
                  "mock_communication_manager",
                  "test_data_dir"
                ],
                "docstring": "Test complete scheduler lifecycle.",
                "name": "test_scheduler_lifecycle"
              },
              {
                "args": [
                  "self",
                  "mock_communication_manager"
                ],
                "docstring": "Test scheduler with mock user data.",
                "name": "test_scheduler_with_mock_users"
              },
              {
                "args": [
                  "self",
                  "mock_communication_manager"
                ],
                "docstring": "Test scheduler behavior with no users.",
                "name": "test_scheduler_with_empty_user_list"
              },
              {
                "args": [
                  "self",
                  "mock_communication_manager"
                ],
                "docstring": "Test scheduler behavior with invalid user data.",
                "name": "test_scheduler_with_invalid_user_data"
              },
              {
                "args": [
                  "self",
                  "mock_communication_manager"
                ],
                "docstring": "Test that random time generation is consistent within bounds.",
                "name": "test_random_time_generation_consistency"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test scheduling all task reminders for a user.",
                "name": "test_schedule_all_task_reminders_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test scheduling task reminders when task management is disabled.",
                "name": "test_schedule_all_task_reminders_disabled"
              }
            ]
          },
          "tests/behavior/test_scheduler_coverage_expansion.py": {
            "classes": [
              {
                "docstring": "Test SchedulerManager lifecycle and threading.",
                "methods": [
                  "test_scheduler_manager_initialization_real_behavior",
                  "test_run_daily_scheduler_thread_creation_real_behavior",
                  "test_stop_scheduler_thread_cleanup_real_behavior",
                  "test_stop_scheduler_no_thread_graceful_handling"
                ],
                "name": "TestSchedulerManagerLifecycle"
              },
              {
                "docstring": "Test message scheduling functionality.",
                "methods": [
                  "test_schedule_all_users_immediately_real_behavior",
                  "test_schedule_new_user_real_behavior",
                  "test_schedule_daily_message_job_real_behavior",
                  "test_schedule_daily_message_job_no_periods",
                  "test_schedule_message_for_period_real_behavior",
                  "test_schedule_message_for_period_time_conflict_retry"
                ],
                "name": "TestMessageScheduling"
              },
              {
                "docstring": "Test task reminder scheduling functionality.",
                "methods": [
                  "test_schedule_all_task_reminders_real_behavior",
                  "test_schedule_all_task_reminders_tasks_disabled",
                  "test_schedule_task_reminder_at_time_real_behavior",
                  "test_schedule_task_reminder_at_time_completed_task",
                  "test_get_random_time_within_task_period_real_behavior"
                ],
                "name": "TestTaskReminderScheduling"
              },
              {
                "docstring": "Test time management and conflict detection.",
                "methods": [
                  "test_is_time_conflict_with_conflict_real_behavior",
                  "test_is_time_conflict_no_conflict_different_user",
                  "test_get_random_time_within_period_future_scheduling",
                  "test_get_random_time_within_period_invalid_period"
                ],
                "name": "TestTimeManagement"
              },
              {
                "docstring": "Test message handling and retry logic.",
                "methods": [
                  "test_handle_sending_scheduled_message_success",
                  "test_handle_sending_scheduled_message_with_retries",
                  "test_handle_task_reminder_success",
                  "test_handle_task_reminder_completed_task"
                ],
                "name": "TestMessageHandling"
              },
              {
                "docstring": "Test wake timer functionality (Windows scheduled tasks).",
                "methods": [
                  "test_set_wake_timer_real_behavior",
                  "test_set_wake_timer_failure_handling"
                ],
                "name": "TestWakeTimerFunctionality"
              },
              {
                "docstring": "Test cleanup operations.",
                "methods": [
                  "test_cleanup_old_tasks_real_behavior"
                ],
                "name": "TestCleanupOperations"
              },
              {
                "docstring": "Test standalone scheduler functions.",
                "methods": [
                  "test_schedule_all_task_reminders_standalone_real_behavior",
                  "test_process_user_schedules_real_behavior",
                  "test_process_category_schedule_real_behavior",
                  "test_get_user_checkin_preferences_real_behavior"
                ],
                "name": "TestStandaloneFunctions"
              },
              {
                "docstring": "Test error handling and edge cases.",
                "methods": [
                  "test_scheduler_manager_no_communication_manager",
                  "test_handle_sending_scheduled_message_no_communication_manager",
                  "test_handle_task_reminder_no_communication_manager",
                  "test_get_random_time_within_period_missing_times",
                  "test_schedule_message_for_period_max_retries_exceeded"
                ],
                "name": "TestErrorHandling"
              },
              {
                "docstring": "Test scheduler loop functionality and error handling.",
                "methods": [
                  "test_scheduler_loop_daily_job_scheduling_real_behavior",
                  "test_scheduler_loop_error_handling_real_behavior",
                  "test_scheduler_loop_stop_event_handling_real_behavior"
                ],
                "name": "TestSchedulerLoopCoverage"
              },
              {
                "docstring": "Test check-in scheduling functionality.",
                "methods": [
                  "test_schedule_checkin_at_exact_time_real_behavior",
                  "test_schedule_checkin_missing_period_real_behavior",
                  "test_schedule_checkin_missing_start_time_real_behavior"
                ],
                "name": "TestCheckinSchedulingCoverage"
              },
              {
                "docstring": "Test task reminder scheduling functionality.",
                "methods": [
                  "test_schedule_all_task_reminders_with_tasks_real_behavior",
                  "test_schedule_all_task_reminders_no_tasks_real_behavior",
                  "test_schedule_all_task_reminders_missing_times_real_behavior"
                ],
                "name": "TestTaskReminderSchedulingCoverage"
              },
              {
                "docstring": "Test wake timer functionality.",
                "methods": [
                  "test_set_wake_timer_success_real_behavior",
                  "test_set_wake_timer_process_failure_real_behavior"
                ],
                "name": "TestWakeTimerCoverage"
              },
              {
                "docstring": "Test comprehensive behavior of select_task_for_reminder function.",
                "methods": [
                  "test_select_task_for_reminder_empty_list_real_behavior",
                  "test_select_task_for_reminder_single_task_real_behavior",
                  "test_select_task_for_reminder_priority_weighting_real_behavior",
                  "test_select_task_for_reminder_due_today_weighting_real_behavior",
                  "test_select_task_for_reminder_overdue_weighting_real_behavior",
                  "test_select_task_for_reminder_no_due_date_weighting_real_behavior",
                  "test_select_task_for_reminder_invalid_date_format_real_behavior",
                  "test_select_task_for_reminder_large_task_list_real_behavior",
                  "test_select_task_for_reminder_zero_weights_fallback_real_behavior",
                  "test_select_task_for_reminder_exception_handling_real_behavior",
                  "test_select_task_for_reminder_week_proximity_weighting_real_behavior",
                  "test_select_task_for_reminder_month_proximity_weighting_real_behavior"
                ],
                "name": "TestSelectTaskForReminderBehavior"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Create a mock communication manager.",
                "name": "mock_communication_manager"
              },
              {
                "args": [
                  "mock_communication_manager"
                ],
                "docstring": "Create a SchedulerManager instance for testing.",
                "name": "scheduler_manager"
              },
              {
                "args": [
                  "self",
                  "mock_communication_manager"
                ],
                "docstring": "Test SchedulerManager initialization with real behavior verification.",
                "name": "test_scheduler_manager_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test that run_daily_scheduler creates a thread and starts it.",
                "name": "test_run_daily_scheduler_thread_creation_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test that stop_scheduler properly cleans up the thread.",
                "name": "test_stop_scheduler_thread_cleanup_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test stopping scheduler when no thread is running.",
                "name": "test_stop_scheduler_no_thread_graceful_handling"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager",
                  "test_data_dir"
                ],
                "docstring": "Test scheduling all users immediately with real behavior verification.",
                "name": "test_schedule_all_users_immediately_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager",
                  "test_data_dir"
                ],
                "docstring": "Test scheduling a newly created user.",
                "name": "test_schedule_new_user_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test scheduling daily messages for a specific user and category.",
                "name": "test_schedule_daily_message_job_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test scheduling daily messages when no periods are available.",
                "name": "test_schedule_daily_message_job_no_periods"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test scheduling a message for a specific period.",
                "name": "test_schedule_message_for_period_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test scheduling with time conflicts and retry logic.",
                "name": "test_schedule_message_for_period_time_conflict_retry"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test scheduling all task reminders for a user.",
                "name": "test_schedule_all_task_reminders_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test scheduling task reminders when tasks are disabled.",
                "name": "test_schedule_all_task_reminders_tasks_disabled"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test scheduling a task reminder at a specific time.",
                "name": "test_schedule_task_reminder_at_time_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test scheduling task reminder for a completed task.",
                "name": "test_schedule_task_reminder_at_time_completed_task"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test generating random time within a task period.",
                "name": "test_get_random_time_within_task_period_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test time conflict detection when conflicts exist.",
                "name": "test_is_time_conflict_with_conflict_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test time conflict detection with different user.",
                "name": "test_is_time_conflict_no_conflict_different_user"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test getting random time for future scheduling.",
                "name": "test_get_random_time_within_period_future_scheduling"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test getting random time with invalid period.",
                "name": "test_get_random_time_within_period_invalid_period"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test successful message sending.",
                "name": "test_handle_sending_scheduled_message_success"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test message sending with retry logic.",
                "name": "test_handle_sending_scheduled_message_with_retries"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test successful task reminder sending.",
                "name": "test_handle_task_reminder_success"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test task reminder for completed task.",
                "name": "test_handle_task_reminder_completed_task"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test setting wake timer for scheduled messages.",
                "name": "test_set_wake_timer_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test wake timer failure handling.",
                "name": "test_set_wake_timer_failure_handling"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test cleaning up old scheduled tasks.",
                "name": "test_cleanup_old_tasks_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test standalone schedule_all_task_reminders function.",
                "name": "test_schedule_all_task_reminders_standalone_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test processing schedules for a specific user.",
                "name": "test_process_user_schedules_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test processing schedule for a specific category.",
                "name": "test_process_category_schedule_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting user check-in preferences.",
                "name": "test_get_user_checkin_preferences_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test scheduler manager with no communication manager.",
                "name": "test_scheduler_manager_no_communication_manager"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test message sending with no communication manager.",
                "name": "test_handle_sending_scheduled_message_no_communication_manager"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test task reminder with no communication manager.",
                "name": "test_handle_task_reminder_no_communication_manager"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test getting random time with missing start/end times.",
                "name": "test_get_random_time_within_period_missing_times"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test scheduling with max retries exceeded.",
                "name": "test_schedule_message_for_period_max_retries_exceeded"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager",
                  "test_data_dir"
                ],
                "docstring": "Test that scheduler loop properly schedules daily jobs for all users.",
                "name": "test_scheduler_loop_daily_job_scheduling_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test scheduler loop error handling when scheduling fails.",
                "name": "test_scheduler_loop_error_handling_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test scheduler loop properly responds to stop events.",
                "name": "test_scheduler_loop_stop_event_handling_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test scheduling check-in at exact time with real behavior.",
                "name": "test_schedule_checkin_at_exact_time_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test check-in scheduling with missing time period.",
                "name": "test_schedule_checkin_missing_period_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test check-in scheduling with missing start time.",
                "name": "test_schedule_checkin_missing_start_time_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test scheduling task reminders when tasks exist.",
                "name": "test_schedule_all_task_reminders_with_tasks_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test scheduling task reminders when no tasks exist.",
                "name": "test_schedule_all_task_reminders_no_tasks_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test scheduling task reminders with missing start/end times.",
                "name": "test_schedule_all_task_reminders_missing_times_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test successful wake timer setting.",
                "name": "test_set_wake_timer_success_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test wake timer setting when process fails.",
                "name": "test_set_wake_timer_process_failure_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test selecting task from empty list returns None.",
                "name": "test_select_task_for_reminder_empty_list_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test selecting task from single-item list returns that task.",
                "name": "test_select_task_for_reminder_single_task_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test priority-based weighting works correctly.",
                "name": "test_select_task_for_reminder_priority_weighting_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test due date proximity weighting for tasks due today.",
                "name": "test_select_task_for_reminder_due_today_weighting_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test overdue task weighting with exponential increase.",
                "name": "test_select_task_for_reminder_overdue_weighting_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test tasks without due dates get slight reduction in weight.",
                "name": "test_select_task_for_reminder_no_due_date_weighting_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test handling of invalid date formats gracefully.",
                "name": "test_select_task_for_reminder_invalid_date_format_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test performance and correctness with large task lists.",
                "name": "test_select_task_for_reminder_large_task_list_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test fallback to random selection when all weights are zero.",
                "name": "test_select_task_for_reminder_zero_weights_fallback_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test exception handling with fallback to random selection.",
                "name": "test_select_task_for_reminder_exception_handling_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test sliding scale weighting for tasks due within a week.",
                "name": "test_select_task_for_reminder_week_proximity_weighting_real_behavior"
              },
              {
                "args": [
                  "self",
                  "scheduler_manager"
                ],
                "docstring": "Test sliding scale weighting for tasks due within a month.",
                "name": "test_select_task_for_reminder_month_proximity_weighting_real_behavior"
              }
            ]
          },
          "tests/behavior/test_service_behavior.py": {
            "classes": [
              {
                "docstring": "Test cases for the MHMService class.",
                "methods": [
                  "temp_dir",
                  "service",
                  "temp_base_dir",
                  "test_service_initialization",
                  "test_validate_configuration_real_behavior",
                  "test_initialize_paths_real_behavior",
                  "test_check_and_fix_logging_real_behavior",
                  "test_start_service_real_behavior",
                  "test_signal_handler_real_behavior",
                  "test_shutdown_real_behavior",
                  "test_emergency_shutdown_real_behavior",
                  "test_run_service_loop_shutdown_file_detection_real_behavior",
                  "test_check_test_message_requests_real_behavior",
                  "test_cleanup_test_message_requests_real_behavior",
                  "test_check_reschedule_requests_real_behavior",
                  "test_cleanup_reschedule_requests_real_behavior",
                  "test_get_user_categories_real_behavior",
                  "test_main_function_real_behavior",
                  "test_service_integration_with_managers_real_behavior",
                  "test_service_error_recovery_real_behavior",
                  "test_service_loop_heartbeat_logging_real_behavior",
                  "test_service_file_based_communication_integration_real_behavior",
                  "test_real_file_based_communication_creates_and_removes_files",
                  "test_real_cleanup_removes_actual_files",
                  "test_real_service_initialization_creates_actual_service",
                  "test_real_signal_handler_changes_service_state",
                  "test_real_emergency_shutdown_changes_service_state",
                  "test_real_get_user_categories_returns_actual_data",
                  "test_real_service_error_recovery_stops_service"
                ],
                "name": "TestMHMService"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_path_factory"
                ],
                "docstring": "Provide a per-test directory under tests/data/tmp.",
                "name": "temp_dir"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create an MHMService instance for testing.",
                "name": "service"
              },
              {
                "args": [
                  "self",
                  "test_path_factory"
                ],
                "docstring": "Provide a per-test base directory under tests/data/tmp for file-based communication tests.",
                "name": "temp_base_dir"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "Test MHMService initialization.",
                "name": "test_service_initialization"
              },
              {
                "args": [
                  "self",
                  "temp_dir",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test configuration validation with real file operations.",
                "name": "test_validate_configuration_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_dir",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test path initialization with real file system operations.",
                "name": "test_initialize_paths_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_dir",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test logging health check with real file operations.",
                "name": "test_check_and_fix_logging_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test service startup with real state changes.",
                "name": "test_start_service_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test signal handler with real state changes.",
                "name": "test_signal_handler_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test service shutdown with real state changes.",
                "name": "test_shutdown_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test emergency shutdown with real state changes.",
                "name": "test_emergency_shutdown_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_dir",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test service loop detects shutdown request file with real file operations.",
                "name": "test_run_service_loop_shutdown_file_detection_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_base_dir",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test processing of test message request files with real file operations.",
                "name": "test_check_test_message_requests_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_base_dir",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cleanup of test message request files with real file operations.",
                "name": "test_cleanup_test_message_requests_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_base_dir",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test processing of reschedule request files with real file operations.",
                "name": "test_check_reschedule_requests_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_base_dir",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test cleanup of reschedule request files with real file operations.",
                "name": "test_cleanup_reschedule_requests_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test get_user_categories with real data structures.",
                "name": "test_get_user_categories_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test main function with real service creation.",
                "name": "test_main_function_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test service integration with real manager objects.",
                "name": "test_service_integration_with_managers_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test service error recovery with real state changes.",
                "name": "test_service_error_recovery_real_behavior"
              },
              {
                "args": [
                  "self",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test service loop heartbeat logging with real state management.",
                "name": "test_service_loop_heartbeat_logging_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_base_dir",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test service file-based communication integration with real file operations.",
                "name": "test_service_file_based_communication_integration_real_behavior"
              },
              {
                "args": [
                  "self",
                  "temp_base_dir",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Verify that test message requests actually create and remove files.",
                "name": "test_real_file_based_communication_creates_and_removes_files"
              },
              {
                "args": [
                  "self",
                  "temp_base_dir",
                  "service"
                ],
                "docstring": "REAL BEHAVIOR TEST: Verify that cleanup actually removes real files.",
                "name": "test_real_cleanup_removes_actual_files"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "REAL BEHAVIOR TEST: Verify that service initialization creates a real service object.",
                "name": "test_real_service_initialization_creates_actual_service"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "REAL BEHAVIOR TEST: Verify that signal handler actually changes service state.",
                "name": "test_real_signal_handler_changes_service_state"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "REAL BEHAVIOR TEST: Verify that emergency shutdown actually changes service state.",
                "name": "test_real_emergency_shutdown_changes_service_state"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "REAL BEHAVIOR TEST: Verify that get_user_categories returns actual data structures.",
                "name": "test_real_get_user_categories_returns_actual_data"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "REAL BEHAVIOR TEST: Verify that error recovery actually stops the service.",
                "name": "test_real_service_error_recovery_stops_service"
              },
              {
                "args": [
                  "user_id",
                  "data_type"
                ],
                "docstring": "",
                "name": "mock_get_user_data_side_effect"
              },
              {
                "args": [],
                "docstring": "Mock side effect for service start that changes actual service state.\n                \n                Updates the service running status and startup time to simulate\n                real service startup behavior for testing.",
                "name": "mock_start_side_effect"
              },
              {
                "args": [],
                "docstring": "Mock side effect for service shutdown that changes actual service state.\n                \n                Updates the service running status and calls stop methods on managers\n                to simulate real service shutdown behavior for testing.",
                "name": "mock_shutdown_side_effect"
              },
              {
                "args": [
                  "seconds"
                ],
                "docstring": "Mock side effect for time.sleep that breaks out of service loop.\n                \n                Tracks call count and stops the service after a few iterations\n                to prevent infinite loops during testing.\n                \n                Args:\n                    seconds: Number of seconds to sleep (ignored in mock)",
                "name": "mock_sleep_side_effect"
              },
              {
                "args": [
                  "*args"
                ],
                "docstring": "Mock side effect for os.path.join that returns test file path.\n                \n                Returns the test request file path when the specific filename\n                is requested, otherwise delegates to the real os.path.join.\n                \n                Args:\n                    *args: Path components to join\n                    \n                Returns:\n                    str: Joined path, or test file path for specific filename",
                "name": "mock_join_side_effect"
              },
              {
                "args": [
                  "*args"
                ],
                "docstring": "Mock side effect for os.path.join that returns test file path.\n                \n                Returns the test request file path when the specific filename\n                is requested, otherwise delegates to the real os.path.join.\n                \n                Args:\n                    *args: Path components to join\n                    \n                Returns:\n                    str: Joined path, or test file path for specific filename",
                "name": "mock_join_side_effect"
              }
            ]
          },
          "tests/behavior/test_service_utilities_behavior.py": {
            "classes": [
              {
                "docstring": "Test real behavior of service utility functions.",
                "methods": [
                  "test_throttler_initialization_creates_proper_structure",
                  "test_throttler_should_run_returns_true_on_first_call",
                  "test_throttler_should_run_respects_interval",
                  "test_throttler_handles_invalid_timestamp_format",
                  "test_create_reschedule_request_creates_actual_file",
                  "test_create_reschedule_request_skips_when_service_not_running",
                  "test_is_service_running_checks_actual_processes",
                  "test_is_service_running_handles_process_errors_gracefully",
                  "test_wait_for_network_returns_true_when_network_available",
                  "test_wait_for_network_returns_false_when_network_unavailable",
                  "test_load_and_localize_datetime_creates_timezone_aware_datetime",
                  "test_load_and_localize_datetime_raises_error_for_invalid_format",
                  "test_load_and_localize_datetime_raises_error_for_invalid_timezone",
                  "test_title_case_converts_text_properly",
                  "test_title_case_handles_special_words_correctly",
                  "test_title_case_preserves_mixed_case_words",
                  "test_service_utilities_error_handling_preserves_system_stability",
                  "test_service_utilities_performance_under_load",
                  "test_service_utilities_data_integrity"
                ],
                "name": "TestServiceUtilitiesBehavior"
              },
              {
                "docstring": "Test integration between service utility functions.",
                "methods": [
                  "test_service_utilities_integration_with_reschedule_workflow",
                  "test_service_utilities_error_recovery_with_real_operations",
                  "test_service_utilities_concurrent_access_safety"
                ],
                "name": "TestServiceUtilitiesIntegration"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that Throttler initialization creates proper internal structure.",
                "name": "test_throttler_initialization_creates_proper_structure"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that Throttler should_run returns True on first call.",
                "name": "test_throttler_should_run_returns_true_on_first_call"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that Throttler should_run respects the time interval.",
                "name": "test_throttler_should_run_respects_interval"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that Throttler handles invalid timestamp format gracefully.",
                "name": "test_throttler_handles_invalid_timestamp_format"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that creating reschedule request actually creates flag file.",
                "name": "test_create_reschedule_request_creates_actual_file"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that creating reschedule request skips when service is not running.",
                "name": "test_create_reschedule_request_skips_when_service_not_running"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that is_service_running checks actual system processes.",
                "name": "test_is_service_running_checks_actual_processes"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that is_service_running handles process errors gracefully.",
                "name": "test_is_service_running_handles_process_errors_gracefully"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that wait_for_network returns True when network is available.",
                "name": "test_wait_for_network_returns_true_when_network_available"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that wait_for_network returns False when network is unavailable.",
                "name": "test_wait_for_network_returns_false_when_network_unavailable"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that load_and_localize_datetime creates timezone-aware datetime.",
                "name": "test_load_and_localize_datetime_creates_timezone_aware_datetime"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that load_and_localize_datetime handles invalid format gracefully.",
                "name": "test_load_and_localize_datetime_raises_error_for_invalid_format"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that load_and_localize_datetime handles invalid timezone gracefully.",
                "name": "test_load_and_localize_datetime_raises_error_for_invalid_timezone"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that title_case converts text to proper title case.",
                "name": "test_title_case_converts_text_properly"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that title_case handles special words and abbreviations correctly.",
                "name": "test_title_case_handles_special_words_correctly"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that title_case preserves already properly cased words.",
                "name": "test_title_case_preserves_mixed_case_words"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that service utilities error handling preserves system stability.",
                "name": "test_service_utilities_error_handling_preserves_system_stability"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that service utilities perform well under load.",
                "name": "test_service_utilities_performance_under_load"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that service utilities maintain data integrity.",
                "name": "test_service_utilities_data_integrity"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test integration between service utilities in reschedule workflow.",
                "name": "test_service_utilities_integration_with_reschedule_workflow"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test error recovery when working with real operations.",
                "name": "test_service_utilities_error_recovery_with_real_operations"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that service utilities handle concurrent access safely.",
                "name": "test_service_utilities_concurrent_access_safety"
              }
            ]
          },
          "tests/behavior/test_static_logging_check.py": {
            "classes": [],
            "functions": [
              {
                "args": [],
                "docstring": "Ensure the repository logging static check passes in CI/test runs.",
                "name": "test_repo_static_logging_check_passes"
              }
            ]
          },
          "tests/behavior/test_task_behavior.py": {
            "classes": [
              {
                "docstring": "Test cases for task management functions.",
                "methods": [
                  "temp_dir",
                  "user_id",
                  "test_ensure_task_directory",
                  "test_load_active_tasks",
                  "test_save_active_tasks",
                  "test_create_task",
                  "test_update_task",
                  "test_complete_task",
                  "test_delete_task",
                  "test_get_task_by_id",
                  "test_get_tasks_due_soon",
                  "test_are_tasks_enabled",
                  "test_get_user_task_stats"
                ],
                "name": "TestTaskManagement"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_path_factory"
                ],
                "docstring": "Provide a per-test directory under tests/data/tmp.",
                "name": "temp_dir"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create a test user ID.",
                "name": "user_id"
              },
              {
                "args": [
                  "self",
                  "mock_get_user_dir",
                  "user_id",
                  "temp_dir"
                ],
                "docstring": "Test task directory creation.",
                "name": "test_ensure_task_directory"
              },
              {
                "args": [
                  "self",
                  "mock_get_user_dir",
                  "user_id",
                  "temp_dir"
                ],
                "docstring": "Test loading active tasks.",
                "name": "test_load_active_tasks"
              },
              {
                "args": [
                  "self",
                  "mock_get_user_dir",
                  "user_id",
                  "temp_dir"
                ],
                "docstring": "Test saving active tasks.",
                "name": "test_save_active_tasks"
              },
              {
                "args": [
                  "self",
                  "mock_get_user_dir",
                  "temp_dir"
                ],
                "docstring": "Test task creation with file verification.",
                "name": "test_create_task"
              },
              {
                "args": [
                  "self",
                  "mock_get_user_dir",
                  "temp_dir"
                ],
                "docstring": "Test task updating with file verification.",
                "name": "test_update_task"
              },
              {
                "args": [
                  "self",
                  "mock_get_user_dir",
                  "temp_dir"
                ],
                "docstring": "Test task completion with file and side effect verification.",
                "name": "test_complete_task"
              },
              {
                "args": [
                  "self",
                  "mock_get_user_dir",
                  "temp_dir"
                ],
                "docstring": "Test task deletion with file verification.",
                "name": "test_delete_task"
              },
              {
                "args": [
                  "self",
                  "mock_get_user_dir",
                  "temp_dir"
                ],
                "docstring": "Test getting a task by ID with file verification.",
                "name": "test_get_task_by_id"
              },
              {
                "args": [
                  "self",
                  "mock_get_user_dir",
                  "temp_dir"
                ],
                "docstring": "Test getting tasks due soon with file verification.",
                "name": "test_get_tasks_due_soon"
              },
              {
                "args": [
                  "self",
                  "mock_get_user_data"
                ],
                "docstring": "Test checking if tasks are enabled with mock user data.",
                "name": "test_are_tasks_enabled"
              },
              {
                "args": [
                  "self",
                  "mock_get_user_dir",
                  "temp_dir"
                ],
                "docstring": "Test getting user task statistics with file verification.",
                "name": "test_get_user_task_stats"
              }
            ]
          },
          "tests/behavior/test_task_management_coverage_expansion.py": {
            "classes": [
              {
                "docstring": "Comprehensive test coverage expansion for task management.",
                "methods": [
                  "temp_dir",
                  "user_id",
                  "mock_user_data_dir",
                  "test_ensure_task_directory_real_behavior",
                  "test_ensure_task_directory_with_empty_user_id_real_behavior",
                  "test_ensure_task_directory_with_none_user_id_real_behavior",
                  "test_ensure_task_directory_existing_structure_real_behavior",
                  "test_load_active_tasks_real_behavior",
                  "test_load_active_tasks_empty_file_real_behavior",
                  "test_load_active_tasks_missing_file_real_behavior",
                  "test_save_active_tasks_real_behavior",
                  "test_save_active_tasks_with_empty_user_id_real_behavior",
                  "test_load_completed_tasks_real_behavior",
                  "test_save_completed_tasks_real_behavior",
                  "test_create_task_with_all_parameters_real_behavior",
                  "test_create_task_with_minimal_parameters_real_behavior",
                  "test_create_task_with_empty_user_id_real_behavior",
                  "test_create_task_with_empty_title_real_behavior",
                  "test_update_task_real_behavior",
                  "test_update_task_with_reminder_periods_real_behavior",
                  "test_update_task_not_found_real_behavior",
                  "test_complete_task_with_completion_data_real_behavior",
                  "test_complete_task_with_default_completion_real_behavior",
                  "test_complete_task_not_found_real_behavior",
                  "test_restore_task_real_behavior",
                  "test_restore_task_with_reminders_real_behavior",
                  "test_restore_task_not_found_real_behavior",
                  "test_delete_task_real_behavior",
                  "test_delete_task_not_found_real_behavior",
                  "test_get_task_by_id_active_task_real_behavior",
                  "test_get_task_by_id_completed_task_real_behavior",
                  "test_get_task_by_id_not_found_real_behavior",
                  "test_get_tasks_due_soon_real_behavior",
                  "test_get_tasks_due_soon_with_invalid_date_real_behavior",
                  "test_get_tasks_due_soon_empty_user_id_real_behavior",
                  "test_are_tasks_enabled_real_behavior",
                  "test_are_tasks_enabled_empty_user_id_real_behavior",
                  "test_schedule_task_reminders_real_behavior",
                  "test_schedule_task_reminders_no_scheduler_real_behavior",
                  "test_schedule_task_reminders_empty_periods_real_behavior",
                  "test_get_user_task_tags_real_behavior",
                  "test_get_user_task_tags_empty_user_id_real_behavior",
                  "test_add_user_task_tag_new_tag_real_behavior",
                  "test_add_user_task_tag_existing_tag_real_behavior",
                  "test_add_user_task_tag_empty_user_id_real_behavior",
                  "test_add_user_task_tag_empty_tag_real_behavior",
                  "test_remove_user_task_tag_real_behavior",
                  "test_remove_user_task_tag_not_found_real_behavior",
                  "test_setup_default_task_tags_new_user_real_behavior",
                  "test_setup_default_task_tags_existing_user_real_behavior",
                  "test_setup_default_task_tags_empty_user_id_real_behavior",
                  "test_get_user_task_stats_real_behavior",
                  "test_get_user_task_stats_empty_user_id_real_behavior",
                  "test_get_user_task_stats_error_handling_real_behavior"
                ],
                "name": "TestTaskManagementCoverageExpansion"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_path_factory"
                ],
                "docstring": "Provide a per-test directory under tests/data/tmp.",
                "name": "temp_dir"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create a test user ID.",
                "name": "user_id"
              },
              {
                "args": [
                  "self",
                  "temp_dir"
                ],
                "docstring": "Mock user data directory.",
                "name": "mock_user_data_dir"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test task directory creation with real file system behavior.",
                "name": "test_ensure_task_directory_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir"
                ],
                "docstring": "Test task directory creation with empty user ID.",
                "name": "test_ensure_task_directory_with_empty_user_id_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir"
                ],
                "docstring": "Test task directory creation with None user ID.",
                "name": "test_ensure_task_directory_with_none_user_id_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test task directory creation when structure already exists.",
                "name": "test_ensure_task_directory_existing_structure_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test loading active tasks with real file operations.",
                "name": "test_load_active_tasks_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test loading active tasks from empty file.",
                "name": "test_load_active_tasks_empty_file_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test loading active tasks when file doesn't exist.",
                "name": "test_load_active_tasks_missing_file_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test saving active tasks with real file operations.",
                "name": "test_save_active_tasks_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir"
                ],
                "docstring": "Test saving active tasks with empty user ID.",
                "name": "test_save_active_tasks_with_empty_user_id_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test loading completed tasks with real file operations.",
                "name": "test_load_completed_tasks_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test saving completed tasks with real file operations.",
                "name": "test_save_completed_tasks_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test task creation with all optional parameters.",
                "name": "test_create_task_with_all_parameters_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test task creation with minimal required parameters.",
                "name": "test_create_task_with_minimal_parameters_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir"
                ],
                "docstring": "Test task creation with empty user ID.",
                "name": "test_create_task_with_empty_user_id_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test task creation with empty title.",
                "name": "test_create_task_with_empty_title_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test task updating with real behavior verification.",
                "name": "test_update_task_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test task updating with reminder periods.",
                "name": "test_update_task_with_reminder_periods_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test updating a non-existent task.",
                "name": "test_update_task_not_found_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test task completion with custom completion data.",
                "name": "test_complete_task_with_completion_data_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test task completion with default completion time.",
                "name": "test_complete_task_with_default_completion_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test completing a non-existent task.",
                "name": "test_complete_task_not_found_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test task restoration from completed to active.",
                "name": "test_restore_task_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test task restoration with reminder periods.",
                "name": "test_restore_task_with_reminders_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test restoring a non-existent completed task.",
                "name": "test_restore_task_not_found_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test task deletion with cleanup verification.",
                "name": "test_delete_task_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test deleting a non-existent task.",
                "name": "test_delete_task_not_found_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test getting an active task by ID.",
                "name": "test_get_task_by_id_active_task_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test getting a completed task by ID.",
                "name": "test_get_task_by_id_completed_task_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test getting a non-existent task by ID.",
                "name": "test_get_task_by_id_not_found_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test getting tasks due within specified days.",
                "name": "test_get_tasks_due_soon_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test getting tasks due soon with invalid date format.",
                "name": "test_get_tasks_due_soon_with_invalid_date_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir"
                ],
                "docstring": "Test getting tasks due soon with empty user ID.",
                "name": "test_get_tasks_due_soon_empty_user_id_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test checking if tasks are enabled for a user.",
                "name": "test_are_tasks_enabled_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir"
                ],
                "docstring": "Test checking tasks enabled with empty user ID.",
                "name": "test_are_tasks_enabled_empty_user_id_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test scheduling task-specific reminders.",
                "name": "test_schedule_task_reminders_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test scheduling reminders when scheduler is not available.",
                "name": "test_schedule_task_reminders_no_scheduler_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test scheduling reminders with empty periods.",
                "name": "test_schedule_task_reminders_empty_periods_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test getting user task tags from preferences.",
                "name": "test_get_user_task_tags_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir"
                ],
                "docstring": "Test getting task tags with empty user ID.",
                "name": "test_get_user_task_tags_empty_user_id_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test adding a new task tag.",
                "name": "test_add_user_task_tag_new_tag_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test adding an existing task tag.",
                "name": "test_add_user_task_tag_existing_tag_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir"
                ],
                "docstring": "Test adding task tag with empty user ID.",
                "name": "test_add_user_task_tag_empty_user_id_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test adding empty task tag.",
                "name": "test_add_user_task_tag_empty_tag_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test removing a task tag.",
                "name": "test_remove_user_task_tag_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test removing a non-existent task tag.",
                "name": "test_remove_user_task_tag_not_found_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test setting up default task tags for new user.",
                "name": "test_setup_default_task_tags_new_user_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test setting up default task tags for user with existing tags.",
                "name": "test_setup_default_task_tags_existing_user_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir"
                ],
                "docstring": "Test setting up default task tags with empty user ID.",
                "name": "test_setup_default_task_tags_empty_user_id_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test getting user task statistics.",
                "name": "test_get_user_task_stats_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir"
                ],
                "docstring": "Test getting task statistics with empty user ID.",
                "name": "test_get_user_task_stats_empty_user_id_real_behavior"
              },
              {
                "args": [
                  "self",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test task statistics error handling.",
                "name": "test_get_user_task_stats_error_handling_real_behavior"
              }
            ]
          },
          "tests/behavior/test_ui_app_behavior.py": {
            "classes": [
              {
                "docstring": "Test real behavior of the main UI application.",
                "methods": [
                  "qt_app",
                  "test_ui_app_initialization_creates_proper_structure",
                  "test_service_manager_initialization_creates_proper_structure",
                  "test_service_manager_configuration_validation_checks_actual_config",
                  "test_service_manager_configuration_validation_handles_invalid_config",
                  "test_service_manager_service_status_check_checks_actual_processes",
                  "test_service_manager_service_status_check_handles_no_service",
                  "test_ui_app_user_list_refresh_loads_actual_user_data",
                  "test_ui_app_user_selection_loads_user_categories",
                  "test_ui_app_category_selection_enables_content_management",
                  "test_ui_app_new_user_creation_opens_account_creator",
                  "test_ui_app_communication_settings_opens_channel_management",
                  "test_ui_app_category_management_opens_category_dialog",
                  "test_ui_app_checkin_management_opens_checkin_dialog",
                  "test_ui_app_task_management_opens_task_dialog",
                  "test_ui_app_personalization_opens_user_profile_dialog",
                  "test_ui_app_error_handling_preserves_system_stability",
                  "test_ui_app_performance_under_load",
                  "test_ui_app_data_integrity"
                ],
                "name": "TestUIAppBehavior"
              },
              {
                "docstring": "Test integration between UI app components.",
                "methods": [
                  "test_ui_app_integration_with_service_manager",
                  "test_ui_app_error_recovery_with_real_operations",
                  "test_ui_app_concurrent_access_safety"
                ],
                "name": "TestUIAppIntegration"
              },
              {
                "docstring": "Test UI app integration and complex workflows.",
                "methods": [
                  "qt_app",
                  "test_ui_app_initialization_creates_proper_structure",
                  "test_send_test_message_no_user_selected_real_behavior",
                  "test_send_test_message_service_not_running_real_behavior",
                  "test_send_test_message_no_category_selected_real_behavior",
                  "test_send_test_message_invalid_category_real_behavior",
                  "test_send_test_message_successful_flow_real_behavior",
                  "test_confirm_test_message_user_confirms_real_behavior",
                  "test_confirm_test_message_user_cancels_real_behavior",
                  "test_send_actual_test_message_creates_request_file_real_behavior",
                  "test_send_test_message_edge_case_negative_index_real_behavior",
                  "test_send_test_message_service_manager_error_real_behavior"
                ],
                "name": "TestUIAppIntegration"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Create a QApplication instance for testing.",
                "name": "qt_app"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "Test that UI app initialization creates proper internal structure.",
                "name": "test_ui_app_initialization_creates_proper_structure"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that ServiceManager initialization creates proper internal structure.",
                "name": "test_service_manager_initialization_creates_proper_structure"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that configuration validation checks actual configuration.",
                "name": "test_service_manager_configuration_validation_checks_actual_config"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that configuration validation handles invalid configuration.",
                "name": "test_service_manager_configuration_validation_handles_invalid_config"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that service status check checks actual system processes.",
                "name": "test_service_manager_service_status_check_checks_actual_processes"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that service status check handles when service is not running.",
                "name": "test_service_manager_service_status_check_handles_no_service"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "Test that user list refresh loads actual user data.",
                "name": "test_ui_app_user_list_refresh_loads_actual_user_data"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "Test that user selection loads user categories.",
                "name": "test_ui_app_user_selection_loads_user_categories"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "Test that category selection enables content management.",
                "name": "test_ui_app_category_selection_enables_content_management"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "Test that new user creation opens account creator dialog.",
                "name": "test_ui_app_new_user_creation_opens_account_creator"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "Test that communication settings opens channel management dialog.",
                "name": "test_ui_app_communication_settings_opens_channel_management"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "Test that category management opens category management dialog.",
                "name": "test_ui_app_category_management_opens_category_dialog"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "Test that checkin management opens checkin management dialog.",
                "name": "test_ui_app_checkin_management_opens_checkin_dialog"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "Test that task management opens task management dialog.",
                "name": "test_ui_app_task_management_opens_task_dialog"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "Test that personalization opens user profile dialog.",
                "name": "test_ui_app_personalization_opens_user_profile_dialog"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "Test that UI app error handling preserves system stability.",
                "name": "test_ui_app_error_handling_preserves_system_stability"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "Test that UI app performs well under load.",
                "name": "test_ui_app_performance_under_load"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "Test that UI app maintains data integrity.",
                "name": "test_ui_app_data_integrity"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test integration between UI app and service manager.",
                "name": "test_ui_app_integration_with_service_manager"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test error recovery when working with real operations.",
                "name": "test_ui_app_error_recovery_with_real_operations"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that UI app handles concurrent access safely.",
                "name": "test_ui_app_concurrent_access_safety"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create a QApplication instance for testing.",
                "name": "qt_app"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "Test that UI app initialization creates proper internal structure.",
                "name": "test_ui_app_initialization_creates_proper_structure"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test send_test_message when no user is selected.",
                "name": "test_send_test_message_no_user_selected_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test send_test_message when service is not running.",
                "name": "test_send_test_message_service_not_running_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test send_test_message when no category is selected.",
                "name": "test_send_test_message_no_category_selected_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test send_test_message when category data is invalid.",
                "name": "test_send_test_message_invalid_category_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test successful send_test_message flow.",
                "name": "test_send_test_message_successful_flow_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test confirm_test_message when user confirms.",
                "name": "test_confirm_test_message_user_confirms_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test confirm_test_message when user cancels.",
                "name": "test_confirm_test_message_user_cancels_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test send_actual_test_message creates request file.",
                "name": "test_send_actual_test_message_creates_request_file_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test send_test_message with negative combo box index.",
                "name": "test_send_test_message_edge_case_negative_index_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qt_app",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test send_test_message when service manager throws error.",
                "name": "test_send_test_message_service_manager_error_real_behavior"
              }
            ]
          },
          "tests/behavior/test_user_context_behavior.py": {
            "classes": [
              {
                "docstring": "Test UserContextManager real behavior and side effects.",
                "methods": [
                  "test_user_context_manager_initialization_creates_structure",
                  "test_get_current_user_context_uses_usercontext_singleton",
                  "test_get_current_user_context_handles_no_user_gracefully",
                  "test_get_user_context_creates_complete_structure",
                  "test_get_user_context_without_conversation_history",
                  "test_add_conversation_exchange_actually_stores_data",
                  "test_add_conversation_exchange_maintains_history_limit",
                  "test_get_conversation_history_returns_actual_data",
                  "test_get_conversation_history_handles_empty_history",
                  "test_get_user_profile_uses_existing_infrastructure",
                  "test_get_recent_activity_integrates_multiple_sources",
                  "test_get_conversation_insights_analyzes_actual_data",
                  "test_get_mood_trends_analyzes_checkin_data",
                  "test_get_active_schedules_identifies_active_periods",
                  "test_format_context_for_ai_creates_readable_string",
                  "test_format_context_for_ai_handles_empty_context",
                  "test_user_context_manager_error_handling_preserves_system_stability",
                  "test_user_context_manager_integration_with_ai_chatbot",
                  "test_user_context_manager_performance_under_load",
                  "test_user_context_manager_cleanup_and_resource_management"
                ],
                "name": "TestUserContextManagerBehavior"
              },
              {
                "docstring": "Integration tests for UserContextManager with real user data.",
                "methods": [
                  "test_user_context_manager_with_real_user_data",
                  "test_user_context_manager_error_recovery_with_real_files",
                  "test_user_context_manager_concurrent_access_safety"
                ],
                "name": "TestUserContextManagerIntegration"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that UserContextManager initialization creates proper internal structure.",
                "name": "test_user_context_manager_initialization_creates_structure"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that get_current_user_context actually uses UserContext singleton.",
                "name": "test_get_current_user_context_uses_usercontext_singleton"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that get_current_user_context handles no logged-in user gracefully.",
                "name": "test_get_current_user_context_handles_no_user_gracefully"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that get_user_context creates complete context structure.",
                "name": "test_get_user_context_creates_complete_structure"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that get_user_context excludes conversation history when requested.",
                "name": "test_get_user_context_without_conversation_history"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that add_conversation_exchange actually stores conversation data.",
                "name": "test_add_conversation_exchange_actually_stores_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that add_conversation_exchange maintains conversation history limit.",
                "name": "test_add_conversation_exchange_maintains_history_limit"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that _get_conversation_history returns actual stored conversation data.",
                "name": "test_get_conversation_history_returns_actual_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that _get_conversation_history handles users with no conversation history.",
                "name": "test_get_conversation_history_handles_empty_history"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that _get_user_profile actually uses existing user infrastructure.",
                "name": "test_get_user_profile_uses_existing_infrastructure"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that _get_recent_activity integrates data from multiple sources.",
                "name": "test_get_recent_activity_integrates_multiple_sources"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that _get_conversation_insights analyzes actual conversation data.",
                "name": "test_get_conversation_insights_analyzes_actual_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that _get_mood_trends analyzes actual checkin data.",
                "name": "test_get_mood_trends_analyzes_checkin_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that get_active_schedules identifies actually active schedule periods.",
                "name": "test_get_active_schedules_identifies_active_periods"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that format_context_for_ai creates actual readable string from context.",
                "name": "test_format_context_for_ai_creates_readable_string"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that format_context_for_ai handles empty or minimal context gracefully.",
                "name": "test_format_context_for_ai_handles_empty_context"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that UserContextManager error handling preserves system stability.",
                "name": "test_user_context_manager_error_handling_preserves_system_stability"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that UserContextManager integrates properly with AI chatbot.",
                "name": "test_user_context_manager_integration_with_ai_chatbot"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that UserContextManager performs well under load.",
                "name": "test_user_context_manager_performance_under_load"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that UserContextManager properly manages resources and cleanup.",
                "name": "test_user_context_manager_cleanup_and_resource_management"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test UserContextManager with real user data files.",
                "name": "test_user_context_manager_with_real_user_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test UserContextManager error recovery with corrupted real files.",
                "name": "test_user_context_manager_error_recovery_with_real_files"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test UserContextManager safety under concurrent access.",
                "name": "test_user_context_manager_concurrent_access_safety"
              }
            ]
          },
          "tests/behavior/test_user_management_coverage_expansion.py": {
            "classes": [
              {
                "docstring": "Test Core User Management coverage expansion with real behavior verification.",
                "methods": [
                  "_setup",
                  "teardown_method",
                  "test_register_data_loader_real_behavior",
                  "test_get_available_data_types_real_behavior",
                  "test_get_data_type_info_real_behavior",
                  "test_get_all_user_ids_real_behavior",
                  "test_get_all_user_ids_no_directory_real_behavior",
                  "test_load_account_data_real_behavior",
                  "test_load_account_data_auto_create_real_behavior",
                  "test_load_account_data_no_auto_create_real_behavior",
                  "test_save_account_data_real_behavior",
                  "test_save_account_data_invalid_user_id_real_behavior",
                  "test_load_preferences_data_real_behavior",
                  "test_load_preferences_data_auto_create_real_behavior",
                  "test_save_preferences_data_real_behavior",
                  "test_load_context_data_real_behavior",
                  "test_load_context_data_auto_create_real_behavior",
                  "test_save_context_data_real_behavior",
                  "test_load_schedules_data_real_behavior",
                  "test_load_schedules_data_auto_create_real_behavior",
                  "test_save_schedules_data_real_behavior",
                  "test_save_schedules_data_invalid_user_id_real_behavior",
                  "test_update_user_schedules_real_behavior",
                  "test_update_user_schedules_invalid_user_id_real_behavior",
                  "test_create_default_schedule_periods_tasks_real_behavior",
                  "test_create_default_schedule_periods_checkin_real_behavior",
                  "test_create_default_schedule_periods_other_category_real_behavior",
                  "test_create_default_schedule_periods_no_category_real_behavior",
                  "test_cache_management_real_behavior",
                  "test_cache_timeout_real_behavior",
                  "test_error_handling_load_account_real_behavior",
                  "test_error_handling_save_account_real_behavior",
                  "test_data_validation_real_behavior",
                  "test_file_persistence_real_behavior"
                ],
                "name": "TestUserManagementCoverageExpansion"
              },
              {
                "docstring": "Test integration behavior of Core User Management.",
                "methods": [
                  "_setup",
                  "teardown_method",
                  "test_user_data_lifecycle_real_behavior",
                  "test_user_data_consistency_real_behavior",
                  "test_user_data_error_recovery_real_behavior",
                  "test_user_data_performance_real_behavior",
                  "test_user_data_concurrent_access_real_behavior"
                ],
                "name": "TestUserManagementIntegration"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_path_factory",
                  "monkeypatch"
                ],
                "docstring": "Set up test environment with per-test directory and path patches.",
                "name": "_setup"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Clean up test environment.",
                "name": "teardown_method"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test data loader registration with real behavior.",
                "name": "test_register_data_loader_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting available data types.",
                "name": "test_get_available_data_types_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting data type information.",
                "name": "test_get_data_type_info_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting all user IDs with real behavior.",
                "name": "test_get_all_user_ids_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test getting user IDs when directory doesn't exist.",
                "name": "test_get_all_user_ids_no_directory_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test loading account data with real behavior.",
                "name": "test_load_account_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test auto-creating account data when file doesn't exist.",
                "name": "test_load_account_data_auto_create_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test loading account data without auto-creation.",
                "name": "test_load_account_data_no_auto_create_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test saving account data with real behavior.",
                "name": "test_save_account_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test saving account data with invalid user ID.",
                "name": "test_save_account_data_invalid_user_id_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test loading preferences data with real behavior.",
                "name": "test_load_preferences_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test auto-creating preferences data when file doesn't exist.",
                "name": "test_load_preferences_data_auto_create_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test saving preferences data with real behavior.",
                "name": "test_save_preferences_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test loading context data with real behavior.",
                "name": "test_load_context_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test auto-creating context data when file doesn't exist.",
                "name": "test_load_context_data_auto_create_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test saving context data with real behavior.",
                "name": "test_save_context_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test loading schedules data with real behavior.",
                "name": "test_load_schedules_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test auto-creating schedules data when file doesn't exist.",
                "name": "test_load_schedules_data_auto_create_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test saving schedules data with real behavior.",
                "name": "test_save_schedules_data_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test saving schedules data with invalid user ID.",
                "name": "test_save_schedules_data_invalid_user_id_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test updating user schedules with real behavior.",
                "name": "test_update_user_schedules_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test updating schedules with invalid user ID.",
                "name": "test_update_user_schedules_invalid_user_id_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test creating default schedule periods for tasks category.",
                "name": "test_create_default_schedule_periods_tasks_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test creating default schedule periods for checkin category.",
                "name": "test_create_default_schedule_periods_checkin_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test creating default schedule periods for other categories.",
                "name": "test_create_default_schedule_periods_other_category_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test creating default schedule periods without category.",
                "name": "test_create_default_schedule_periods_no_category_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test cache management behavior.",
                "name": "test_cache_management_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test cache timeout behavior.",
                "name": "test_cache_timeout_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test error handling in account loading.",
                "name": "test_error_handling_load_account_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test error handling in account saving.",
                "name": "test_error_handling_save_account_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test data validation behavior.",
                "name": "test_data_validation_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test file persistence behavior.",
                "name": "test_file_persistence_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_path_factory"
                ],
                "docstring": "Set up test environment.",
                "name": "_setup"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Clean up test environment.",
                "name": "teardown_method"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test complete user data lifecycle.",
                "name": "test_user_data_lifecycle_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test user data consistency across operations.",
                "name": "test_user_data_consistency_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test user data error recovery.",
                "name": "test_user_data_error_recovery_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test user data performance under load.",
                "name": "test_user_data_performance_real_behavior"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test user data concurrent access behavior.",
                "name": "test_user_data_concurrent_access_real_behavior"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "auto_create"
                ],
                "docstring": "",
                "name": "test_loader"
              },
              {
                "args": [
                  "thread_id"
                ],
                "docstring": "",
                "name": "user_operation"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              },
              {
                "args": [
                  "user_id",
                  "file_type"
                ],
                "docstring": "",
                "name": "mock_path"
              }
            ]
          },
          "tests/behavior/test_utilities_demo.py": {
            "classes": [
              {
                "docstring": "Demonstration of centralized test utilities usage",
                "methods": [
                  "test_basic_user_creation",
                  "test_discord_user_creation",
                  "test_full_featured_user_creation",
                  "test_minimal_user_creation",
                  "test_user_data_factory_usage",
                  "test_environment_management",
                  "test_multiple_user_types_in_single_test",
                  "test_email_user_creation",
                  "test_custom_fields_user_creation",
                  "test_scheduled_user_creation",
                  "test_comprehensive_user_types",
                  "test_real_user_scenarios",
                  "test_edge_case_users",
                  "test_user_data_consistency"
                ],
                "name": "TestUtilitiesDemo"
              },
              {
                "docstring": "Demonstrate the benefits of centralized test utilities",
                "methods": [
                  "test_reduced_code_duplication",
                  "test_consistent_user_data",
                  "test_easy_maintenance",
                  "test_flexible_configuration"
                ],
                "name": "TestUtilitiesBenefits"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Demonstrate creating a basic test user",
                "name": "test_basic_user_creation"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Demonstrate creating a Discord-specific test user",
                "name": "test_discord_user_creation"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Demonstrate creating a full-featured test user",
                "name": "test_full_featured_user_creation"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Demonstrate creating a minimal test user",
                "name": "test_minimal_user_creation"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Demonstrate using the user data factory for custom data structures",
                "name": "test_user_data_factory_usage"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Demonstrate test environment setup and cleanup",
                "name": "test_environment_management"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test creating multiple different user types in a single test.",
                "name": "test_multiple_user_types_in_single_test"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test creating an email user with specific email address.",
                "name": "test_email_user_creation"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test creating a user with custom fields.",
                "name": "test_custom_fields_user_creation"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test creating a user with comprehensive schedules.",
                "name": "test_scheduled_user_creation"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test all comprehensive user types to ensure they cover real user scenarios.",
                "name": "test_comprehensive_user_types"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test scenarios that mirror real user data patterns.",
                "name": "test_real_user_scenarios"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test edge cases and boundary conditions for user creation.",
                "name": "test_edge_case_users"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that all user types produce consistent data structures.",
                "name": "test_user_data_consistency"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Show how much less code is needed with centralized utilities",
                "name": "test_reduced_code_duplication"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Show that all tests use consistent user data structures",
                "name": "test_consistent_user_data"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Show how easy it is to update user creation logic",
                "name": "test_easy_maintenance"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Show the flexibility of the utilities",
                "name": "test_flexible_configuration"
              }
            ]
          },
          "tests/conftest.py": {
            "classes": [
              {
                "docstring": "Custom formatter that automatically prepends test names to log messages.",
                "methods": [
                  "format"
                ],
                "name": "TestContextFormatter"
              },
              {
                "docstring": "Manages session-based log rotation that rotates ALL logs together if any exceed size limits.",
                "methods": [
                  "__init__",
                  "register_log_file",
                  "check_rotation_needed",
                  "rotate_all_logs"
                ],
                "name": "SessionLogRotationManager"
              },
              {
                "docstring": "Manages log file lifecycle including backup, archive, and cleanup operations.",
                "methods": [
                  "__init__",
                  "cleanup_old_archives",
                  "archive_old_backups",
                  "perform_lifecycle_maintenance"
                ],
                "name": "LogLifecycleManager"
              },
              {
                "docstring": "",
                "methods": [
                  "information",
                  "warning",
                  "critical",
                  "question",
                  "about"
                ],
                "name": "MockQMessageBox"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Set up logging isolation before any core modules are imported.",
                "name": "setup_logging_isolation"
              },
              {
                "args": [],
                "docstring": "",
                "name": "verify_user_data_loader_registry"
              },
              {
                "args": [],
                "docstring": "Import core.user_management before core.user_data_handlers and register loaders once.\n\n    This ensures both modules share the same USER_DATA_LOADERS dict and that required\n    loaders are present without relying on the data shim.",
                "name": "initialize_loader_import_order"
              },
              {
                "args": [],
                "docstring": "",
                "name": "_apply_get_user_data_shim_early"
              },
              {
                "args": [
                  "request",
                  "monkeypatch"
                ],
                "docstring": "",
                "name": "toggle_data_shim_per_marker"
              },
              {
                "args": [],
                "docstring": "Set up global QMessageBox patches to prevent popup dialogs during testing.",
                "name": "setup_qmessagebox_patches"
              },
              {
                "args": [],
                "docstring": "Set up dedicated logging for tests with complete isolation from main app logging.",
                "name": "setup_test_logging"
              },
              {
                "args": [],
                "docstring": "Replace component logger handlers with simple file handlers under tests/logs.\n\n    Uses simple FileHandler to avoid rotation conflicts during test sessions.\n    Session-based rotation is handled separately by SessionLogRotationManager.",
                "name": "setup_component_log_rotation"
              },
              {
                "args": [
                  "target_dir",
                  "patterns",
                  "older_than_days"
                ],
                "docstring": "Remove files in target_dir matching any pattern older than N days.\n\n    Returns the number of files removed.",
                "name": "_prune_old_files"
              },
              {
                "args": [],
                "docstring": "Prune old logs (tests/logs) and backups (tests/data/backups) before and after the session.\n\n    Defaults: logs older than 14 days, test backups older than 7 days.\n    Override via TEST_LOG_RETENTION_DAYS and TEST_BACKUP_RETENTION_DAYS env vars.",
                "name": "prune_test_artifacts_before_and_after_session"
              },
              {
                "args": [],
                "docstring": "Perform log lifecycle maintenance at session start.",
                "name": "log_lifecycle_maintenance"
              },
              {
                "args": [],
                "docstring": "Check for log rotation needs at session start and end.",
                "name": "session_log_rotation_check"
              },
              {
                "args": [],
                "docstring": "Ensure complete logging isolation during tests to prevent test logs from appearing in main app.log.",
                "name": "isolate_logging"
              },
              {
                "args": [
                  "predicate",
                  "timeout_seconds",
                  "poll_seconds"
                ],
                "docstring": "Poll predicate() until it returns True or timeout elapses.\n\n    Returns True if predicate succeeds within timeout, otherwise False.",
                "name": "wait_until"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Ensure minimal structures exist without overwriting existing data.\n\n    - Merges into existing account (preserves internal_username and enabled features)\n    - Adds missing preferences keys (keeps existing categories/channel)\n    - Adds a default motivational/morning period if schedules missing",
                "name": "materialize_user_minimal_via_public_apis"
              },
              {
                "args": [],
                "docstring": "Provide the repository-scoped test data directory for all tests.",
                "name": "test_data_dir"
              },
              {
                "args": [
                  "test_data_dir"
                ],
                "docstring": "Mock configuration for testing with proper test data directory.",
                "name": "mock_config"
              },
              {
                "args": [
                  "mock_config",
                  "test_data_dir"
                ],
                "docstring": "Verify mock_config fixture is active for every test.",
                "name": "ensure_mock_config_applied"
              },
              {
                "args": [],
                "docstring": "Ensure user data caches don't leak between tests.",
                "name": "clear_user_caches_between_tests"
              },
              {
                "args": [],
                "docstring": "Ensure core user data loaders are present without overwriting metadata.",
                "name": "register_user_data_loaders_session"
              },
              {
                "args": [],
                "docstring": "Ensure loaders stay correctly registered for each test without overwriting metadata.",
                "name": "fix_user_data_loaders"
              },
              {
                "args": [],
                "docstring": "Shim core.user_management.get_user_data to ensure structured dicts.\n\n    If a test calls get_user_data with 'all' or a specific type and the result is\n    empty/missing, invoke the registered loaders in USER_DATA_LOADERS to assemble\n    the expected structure. This preserves production behavior when everything is\n    wired correctly, but guards against import-order timing in tests.",
                "name": "shim_get_user_data_to_invoke_loaders"
              },
              {
                "args": [],
                "docstring": "Fail fast if required user-data loaders are missing at session start.",
                "name": "verify_required_loaders_present"
              },
              {
                "args": [
                  "monkeypatch"
                ],
                "docstring": "Snapshot and restore critical environment variables to prevent test leakage.\n\n    Restores after each test to ensure environment stability across the suite.",
                "name": "env_guard_and_restore"
              },
              {
                "args": [
                  "test_data_dir"
                ],
                "docstring": "Provide a per-test directory under tests/data/tmp/<uuid> for ad-hoc temp usage.\n\n    Prefer this over raw tempfile.mkdtemp/TemporaryDirectory to keep paths within the repo.",
                "name": "test_path_factory"
              },
              {
                "args": [
                  "test_data_dir"
                ],
                "docstring": "Return a helper to ensure account/preferences/context files exist for a user.\n\n    If the user directory is missing, uses TestUserFactory to create a basic user.\n    If present but missing files, writes minimal JSON structures to materialize them.",
                "name": "ensure_user_materialized"
              },
              {
                "args": [],
                "docstring": "Guardrail: ensure temp resolution stays within tests/data and detect escapes.\n\n    Fails fast if the active temp directory is outside tests/data.",
                "name": "path_sanitizer"
              },
              {
                "args": [],
                "docstring": "Ensure tests only create user dirs under tests/data/users.\n\n    - Fails if a top-level tests/data/test-user* directory appears.\n    - Fails if any test-user* directory is created under tests/data/tmp.\n    Cleans stray dirs to keep workspace tidy before failing.",
                "name": "enforce_user_dir_locations"
              },
              {
                "args": [],
                "docstring": "Clear tests/data/tmp contents at session end to keep the workspace tidy.",
                "name": "cleanup_tmp_at_session_end"
              },
              {
                "args": [],
                "docstring": "Route all system temp usage into tests/data for the entire session.",
                "name": "force_test_data_directory"
              },
              {
                "args": [
                  "mock_config",
                  "test_data_dir",
                  "request"
                ],
                "docstring": "Create mock user data for testing with unique user ID for each test.",
                "name": "mock_user_data"
              },
              {
                "args": [
                  "test_data_dir",
                  "mock_config",
                  "request"
                ],
                "docstring": "Create mock user data for testing with automated_messages enabled and categories.",
                "name": "mock_user_data_with_messages"
              },
              {
                "args": [
                  "test_data_dir"
                ],
                "docstring": "Helper fixture to update user index for test users.",
                "name": "update_user_index_for_test"
              },
              {
                "args": [],
                "docstring": "Remove test users from tests/data/users/ after all tests. NEVER touches real user data.",
                "name": "cleanup_test_users_after_session"
              },
              {
                "args": [],
                "docstring": "Clear user caches between tests to prevent state pollution.",
                "name": "clear_user_caches_between_tests"
              },
              {
                "args": [],
                "docstring": "Mock logger for testing.",
                "name": "mock_logger"
              },
              {
                "args": [],
                "docstring": "Create a temporary file for testing.",
                "name": "temp_file"
              },
              {
                "args": [],
                "docstring": "Mock AI response for testing.",
                "name": "mock_ai_response"
              },
              {
                "args": [],
                "docstring": "Mock task data for testing.",
                "name": "mock_task_data"
              },
              {
                "args": [],
                "docstring": "Mock message data for testing.",
                "name": "mock_message_data"
              },
              {
                "args": [],
                "docstring": "Mock service data for testing.",
                "name": "mock_service_data"
              },
              {
                "args": [],
                "docstring": "Mock communication data for testing.",
                "name": "mock_communication_data"
              },
              {
                "args": [],
                "docstring": "Mock schedule data for testing.",
                "name": "mock_schedule_data"
              },
              {
                "args": [
                  "config"
                ],
                "docstring": "Configure pytest for MHM testing.",
                "name": "pytest_configure"
              },
              {
                "args": [
                  "config",
                  "items"
                ],
                "docstring": "Modify test collection to add default markers.",
                "name": "pytest_collection_modifyitems"
              },
              {
                "args": [
                  "session"
                ],
                "docstring": "Log test session start.",
                "name": "pytest_sessionstart"
              },
              {
                "args": [
                  "session",
                  "exitstatus"
                ],
                "docstring": "Log test session finish.",
                "name": "pytest_sessionfinish"
              },
              {
                "args": [
                  "report"
                ],
                "docstring": "Log individual test results.",
                "name": "pytest_runtest_logreport"
              },
              {
                "args": [],
                "docstring": "Clean up CommunicationManager singleton after all tests complete.",
                "name": "cleanup_communication_manager"
              },
              {
                "args": [],
                "docstring": "Clean up ConversationManager state before each test.",
                "name": "cleanup_conversation_manager"
              },
              {
                "args": [],
                "docstring": "",
                "name": "_missing_keys"
              },
              {
                "args": [
                  "user_id",
                  "key",
                  "auto_create"
                ],
                "docstring": "",
                "name": "_load_single_type"
              },
              {
                "args": [
                  "user_id",
                  "data_type",
                  "*args",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "wrapped_get_user_data"
              },
              {
                "args": [
                  "self",
                  "record"
                ],
                "docstring": "",
                "name": "format"
              },
              {
                "args": [
                  "self",
                  "max_size_mb"
                ],
                "docstring": "",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "file_path"
                ],
                "docstring": "Register a log file for session-based rotation monitoring.",
                "name": "register_log_file"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Check if any log file exceeds the size limit.",
                "name": "check_rotation_needed"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Rotate all registered log files together to maintain continuity.",
                "name": "rotate_all_logs"
              },
              {
                "args": [
                  "self",
                  "archive_days"
                ],
                "docstring": "",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Remove archive files older than the specified number of days.",
                "name": "cleanup_old_archives"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Move old backup files to archive directory.",
                "name": "archive_old_backups"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Perform all lifecycle maintenance operations.",
                "name": "perform_lifecycle_maintenance"
              },
              {
                "args": [
                  "user_id",
                  "key",
                  "auto_create"
                ],
                "docstring": "",
                "name": "_load_single_type"
              },
              {
                "args": [
                  "user_id",
                  "key"
                ],
                "docstring": "Read requested type directly from user JSON files as a last resort.",
                "name": "_fallback_read_from_files"
              },
              {
                "args": [
                  "user_id",
                  "data_type",
                  "*args",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "wrapped_get_user_data"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "",
                "name": "_helper"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "",
                "name": "_update_index"
              },
              {
                "args": [
                  "*args",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "information"
              },
              {
                "args": [
                  "*args",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "warning"
              },
              {
                "args": [
                  "*args",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "critical"
              },
              {
                "args": [
                  "*args",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "question"
              },
              {
                "args": [
                  "*args",
                  "**kwargs"
                ],
                "docstring": "",
                "name": "about"
              }
            ]
          },
          "tests/debug_file_paths.py": {
            "classes": [],
            "functions": [
              {
                "args": [
                  "mock_user_data"
                ],
                "docstring": "Debug test to check if the issue is with file paths.",
                "name": "test_debug_file_paths"
              }
            ]
          },
          "tests/integration/test_account_lifecycle.py": {
            "classes": [
              {
                "docstring": "Test complete account lifecycle workflows with real behavior verification.",
                "methods": [
                  "_materialize_and_verify",
                  "_ensure_minimal_structure",
                  "save_user_data_simple",
                  "setup_test_environment",
                  "test_create_basic_account",
                  "test_create_full_account",
                  "test_enable_checkins_for_basic_user",
                  "test_disable_tasks_for_full_user",
                  "test_reenable_tasks_for_user",
                  "test_add_message_category",
                  "test_remove_message_category",
                  "test_add_schedule_period",
                  "test_modify_schedule_period",
                  "test_remove_schedule_period",
                  "test_complete_account_lifecycle"
                ],
                "name": "TestAccountLifecycle"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "uid"
                ],
                "docstring": "Ensure minimal structures exist without overwriting existing data; return full user data.",
                "name": "_materialize_and_verify"
              },
              {
                "args": [
                  "self",
                  "uid"
                ],
                "docstring": "",
                "name": "_ensure_minimal_structure"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "account_data",
                  "preferences_data",
                  "schedules_data"
                ],
                "docstring": "Helper function to save user data in the correct format.",
                "name": "save_user_data_simple"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Set up isolated test environment for each test.",
                "name": "setup_test_environment"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test creating a basic account with only messages enabled.",
                "name": "test_create_basic_account"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test creating a full account with all features enabled.",
                "name": "test_create_full_account"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test enabling check-ins for a user who only has messages enabled.",
                "name": "test_enable_checkins_for_basic_user"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test disabling tasks for a user who has all features enabled.",
                "name": "test_disable_tasks_for_full_user"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test re-enabling tasks for a user who previously had them disabled.",
                "name": "test_reenable_tasks_for_user"
              },
              {
                "args": [
                  "self",
                  "update_user_index_for_test"
                ],
                "docstring": "Test adding a new message category to user preferences.",
                "name": "test_add_message_category"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test removing a message category from user preferences.",
                "name": "test_remove_message_category"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test adding a new schedule period to user schedules.",
                "name": "test_add_schedule_period"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test modifying an existing schedule period.",
                "name": "test_modify_schedule_period"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test removing a schedule period from user schedules.",
                "name": "test_remove_schedule_period"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test complete account lifecycle: create, modify, disable, re-enable, delete.",
                "name": "test_complete_account_lifecycle"
              }
            ]
          },
          "tests/integration/test_account_management.py": {
            "classes": [],
            "functions": [
              {
                "args": [],
                "docstring": "Test that all account management modules can be imported without errors",
                "name": "test_account_management_imports"
              },
              {
                "args": [],
                "docstring": "Test that all account management functions can be called (with safe test data)",
                "name": "test_account_management_functions"
              },
              {
                "args": [
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test that account management can handle the expected data structures",
                "name": "test_account_management_data_structures"
              },
              {
                "args": [],
                "docstring": "Test that account management validation works correctly",
                "name": "test_account_management_validation"
              },
              {
                "args": [],
                "docstring": "Test account management operations with temporary test data",
                "name": "test_account_management_safe_operations"
              },
              {
                "args": [],
                "docstring": "Test that account management integrates properly with other systems",
                "name": "test_account_management_integration"
              }
            ]
          },
          "tests/integration/test_user_creation.py": {
            "classes": [
              {
                "docstring": "Test comprehensive user creation scenarios.",
                "methods": [
                  "test_basic_email_user_creation",
                  "test_discord_user_creation",
                  "test_user_with_custom_fields",
                  "test_user_creation_with_schedules"
                ],
                "name": "TestUserCreationScenarios"
              },
              {
                "docstring": "Test validation scenarios during user creation.",
                "methods": [
                  "test_username_validation",
                  "test_email_validation",
                  "test_timezone_validation",
                  "test_required_fields_validation"
                ],
                "name": "TestUserCreationValidation"
              },
              {
                "docstring": "Test error handling during user creation.",
                "methods": [
                  "test_duplicate_user_creation",
                  "test_invalid_user_id",
                  "test_corrupted_data_handling"
                ],
                "name": "TestUserCreationErrorHandling"
              },
              {
                "docstring": "Test integration scenarios for user creation.",
                "methods": [
                  "test_full_user_lifecycle",
                  "test_multiple_users_same_channel",
                  "test_user_with_all_features"
                ],
                "name": "TestUserCreationIntegration"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test creating a basic email user with minimal settings.",
                "name": "test_basic_email_user_creation"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test creating a Discord user with full features enabled.",
                "name": "test_discord_user_creation"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test creating a user with extensive custom fields using enhanced test utilities.",
                "name": "test_user_with_custom_fields"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test creating a user with schedule periods using enhanced test utilities.",
                "name": "test_user_creation_with_schedules"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test username validation.",
                "name": "test_username_validation"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test email validation.",
                "name": "test_email_validation"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test timezone validation.",
                "name": "test_timezone_validation"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test that required fields are validated.",
                "name": "test_required_fields_validation"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test creating a user that already exists.",
                "name": "test_duplicate_user_creation"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test creating user with invalid user ID.",
                "name": "test_invalid_user_id"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test handling corrupted user data.",
                "name": "test_corrupted_data_handling"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test complete user lifecycle: create, update, delete.",
                "name": "test_full_user_lifecycle"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test creating multiple users with the same channel type.",
                "name": "test_multiple_users_same_channel"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test creating a user with all possible features enabled.",
                "name": "test_user_with_all_features"
              }
            ]
          },
          "tests/test_isolation.py": {
            "classes": [
              {
                "docstring": "Context manager to ensure test isolation.",
                "methods": [
                  "__init__",
                  "__enter__",
                  "__exit__"
                ],
                "name": "TestIsolationManager"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Mock all system calls that could create real resources.\n    \n    This should be called at the start of any test that might trigger\n    system resource creation.",
                "name": "mock_system_calls"
              },
              {
                "args": [
                  "*args",
                  "**kwargs"
                ],
                "docstring": "Mock schtasks calls to prevent real task creation.",
                "name": "mock_schtasks_call"
              },
              {
                "args": [],
                "docstring": "Ensure that tests are properly isolated from system resources.\n    \n    This function should be called in test setup to prevent any\n    real system resource creation.",
                "name": "ensure_test_isolation"
              },
              {
                "args": [],
                "docstring": "Create a SchedulerManager instance with all system calls mocked.\n    \n    This should be used in tests that need to test scheduler functionality\n    without creating real system resources.",
                "name": "create_safe_scheduler_manager"
              },
              {
                "args": [],
                "docstring": "Verify that no real Windows tasks were created during test execution.\n    \n    This should be called in test teardown to ensure tests didn't\n    accidentally create real system resources.",
                "name": "verify_no_real_tasks_created"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "__enter__"
              },
              {
                "args": [
                  "self",
                  "exc_type",
                  "exc_val",
                  "exc_tb"
                ],
                "docstring": "",
                "name": "__exit__"
              }
            ]
          },
          "tests/test_utilities.py": {
            "classes": [
              {
                "docstring": "Factory for creating test users with different configurations",
                "methods": [
                  "create_basic_user",
                  "_create_user_files_directly__directory_structure",
                  "_create_user_files_directly__account_data",
                  "_create_user_files_directly__preferences_data",
                  "_create_user_files_directly__context_data",
                  "_create_user_files_directly__save_json",
                  "_create_user_files_directly__schedules_data",
                  "_create_user_files_directly__message_files",
                  "create_basic_user__update_index",
                  "_create_user_files_directly",
                  "create_basic_user__with_test_dir",
                  "create_discord_user",
                  "create_discord_user__with_test_dir",
                  "create_full_featured_user",
                  "create_full_featured_user__with_test_dir",
                  "create_full_featured_user__impl",
                  "create_email_user",
                  "create_email_user__with_test_dir",
                  "create_email_user__impl",
                  "create_user_with_custom_fields",
                  "create_user_with_custom_fields__impl",
                  "create_user_with_schedules",
                  "create_user_with_schedules__impl",
                  "create_minimal_user",
                  "create_minimal_user_and_get_id",
                  "create_minimal_user__with_test_dir",
                  "create_minimal_user__with_test_dir_and_get_id",
                  "create_minimal_user__impl",
                  "create_user_with_complex_checkins",
                  "create_user_with_complex_checkins__with_test_dir",
                  "create_user_with_complex_checkins__impl",
                  "create_user_with_health_focus",
                  "create_user_with_health_focus__with_test_dir",
                  "create_user_with_health_focus__impl",
                  "create_user_with_task_focus",
                  "create_user_with_task_focus__with_test_dir",
                  "create_user_with_task_focus__impl",
                  "create_user_with_disabilities",
                  "create_user_with_disabilities__with_test_dir",
                  "create_user_with_disabilities__impl",
                  "create_user_with_limited_data",
                  "create_user_with_limited_data__with_test_dir",
                  "create_user_with_limited_data__impl",
                  "create_user_with_inconsistent_data",
                  "create_user_with_inconsistent_data__with_test_dir",
                  "create_user_with_inconsistent_data__impl",
                  "get_test_user_data",
                  "get_test_user_id_by_internal_username",
                  "create_basic_user__verify_creation",
                  "verify_email_user_creation__with_test_dir"
                ],
                "name": "TestUserFactory"
              },
              {
                "docstring": "Manages test data directories and cleanup",
                "methods": [
                  "setup_test_environment",
                  "cleanup_test_environment"
                ],
                "name": "TestDataManager"
              },
              {
                "docstring": "Factory for creating specific test user data structures",
                "methods": [
                  "create_account_data",
                  "create_preferences_data",
                  "create_schedules_data",
                  "create_context_data"
                ],
                "name": "TestUserDataFactory"
              },
              {
                "docstring": "Factory for creating test data for various scenarios",
                "methods": [
                  "create_corrupted_user_data",
                  "create_test_schedule_data",
                  "create_test_task_data",
                  "create_test_message_data"
                ],
                "name": "TestDataFactory"
              }
            ],
            "functions": [
              {
                "args": [
                  "user_id",
                  "user_type",
                  "test_data_dir",
                  "**kwargs"
                ],
                "docstring": "Convenience function to create test users with different configurations\n    \n    Args:\n        user_id: Unique identifier for the test user\n        user_type: Type of user to create. Options:\n            - \"basic\": Basic user with configurable features\n            - \"discord\": Discord-specific user\n            - \"email\": Email-specific user\n\n            - \"full\": Full featured user with all capabilities\n            - \"minimal\": Minimal user with only messaging\n            - \"health\": Health-focused user\n            - \"task\": Task/productivity-focused user\n            - \"disability\": User with accessibility considerations\n            - \"complex_checkins\": User with complex check-in configurations\n            - \"limited_data\": User with minimal data (like real users)\n            - \"inconsistent\": User with inconsistent/partial data\n            - \"custom_fields\": User with custom field configurations\n            - \"scheduled\": User with custom schedule configurations\n        test_data_dir: Test data directory to use (required for modern test approach)\n        **kwargs: Additional arguments passed to the specific creation method\n        \n    Returns:\n        bool: True if user was created successfully, False otherwise",
                "name": "create_test_user"
              },
              {
                "args": [],
                "docstring": "Convenience function to set up test data environment\n    \n    Returns:\n        tuple: (test_dir, test_data_dir, test_test_data_dir)",
                "name": "setup_test_data_environment"
              },
              {
                "args": [
                  "test_dir"
                ],
                "docstring": "Convenience function to clean up test data environment\n    \n    Args:\n        test_dir: Path to the test directory to clean up",
                "name": "cleanup_test_data_environment"
              },
              {
                "args": [
                  "user_id",
                  "enable_checkins",
                  "enable_tasks",
                  "test_data_dir"
                ],
                "docstring": "Create a test user with basic functionality enabled\n        \n        Args:\n            user_id: Unique identifier for the test user\n            enable_checkins: Whether to enable check-ins for this user\n            enable_tasks: Whether to enable task management for this user\n            test_data_dir: Test data directory to use (if None, uses real user directory)\n            \n        Returns:\n            bool: True if user was created successfully, False otherwise",
                "name": "create_basic_user"
              },
              {
                "args": [
                  "test_data_dir",
                  "user_id"
                ],
                "docstring": "Create the user directory structure and return paths.",
                "name": "_create_user_files_directly__directory_structure"
              },
              {
                "args": [
                  "actual_user_id",
                  "user_id",
                  "user_data"
                ],
                "docstring": "Create account data structure.",
                "name": "_create_user_files_directly__account_data"
              },
              {
                "args": [
                  "user_data"
                ],
                "docstring": "Create preferences data structure.",
                "name": "_create_user_files_directly__preferences_data"
              },
              {
                "args": [
                  "user_data"
                ],
                "docstring": "Create user context data structure.",
                "name": "_create_user_files_directly__context_data"
              },
              {
                "args": [
                  "file_path",
                  "data"
                ],
                "docstring": "Save data to a JSON file.",
                "name": "_create_user_files_directly__save_json"
              },
              {
                "args": [
                  "categories"
                ],
                "docstring": "Create default schedule periods for categories.",
                "name": "_create_user_files_directly__schedules_data"
              },
              {
                "args": [
                  "user_dir",
                  "categories"
                ],
                "docstring": "Create message directory and default message files.",
                "name": "_create_user_files_directly__message_files"
              },
              {
                "args": [
                  "test_data_dir",
                  "user_id",
                  "actual_user_id"
                ],
                "docstring": "Update user index to map internal_username to UUID.",
                "name": "create_basic_user__update_index"
              },
              {
                "args": [
                  "user_id",
                  "user_data",
                  "test_data_dir"
                ],
                "docstring": "Helper function to create user files directly in test directory",
                "name": "_create_user_files_directly"
              },
              {
                "args": [
                  "user_id",
                  "enable_checkins",
                  "enable_tasks",
                  "test_data_dir"
                ],
                "docstring": "Create basic user with test directory by directly saving files",
                "name": "create_basic_user__with_test_dir"
              },
              {
                "args": [
                  "user_id",
                  "discord_user_id",
                  "test_data_dir"
                ],
                "docstring": "Create a test user specifically configured for Discord testing\n        \n        Args:\n            user_id: Unique identifier for the test user\n            discord_user_id: Discord user ID (defaults to user_id if not provided)\n            test_data_dir: Test data directory to use (if None, uses real user directory)\n            \n        Returns:\n            bool: True if user was created successfully, False otherwise",
                "name": "create_discord_user"
              },
              {
                "args": [
                  "user_id",
                  "discord_user_id",
                  "test_data_dir"
                ],
                "docstring": "Create discord user with test directory by directly saving files",
                "name": "create_discord_user__with_test_dir"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create a test user with all features enabled and comprehensive data\n        \n        Args:\n            user_id: Unique identifier for the test user\n            test_data_dir: Test data directory to use (if None, uses real user directory)\n            \n        Returns:\n            bool: True if user was created successfully, False otherwise",
                "name": "create_full_featured_user"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create full featured user with test directory by directly saving files",
                "name": "create_full_featured_user__with_test_dir"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Internal implementation of full featured user creation",
                "name": "create_full_featured_user__impl"
              },
              {
                "args": [
                  "user_id",
                  "email",
                  "test_data_dir"
                ],
                "docstring": "Create a test user specifically configured for email testing\n        \n        Args:\n            user_id: Unique identifier for the test user\n            email: Email address (defaults to user_id@example.com if not provided)\n            test_data_dir: Test data directory to use (if None, uses real user directory)\n            \n        Returns:\n            str: User ID if user was created successfully, None otherwise",
                "name": "create_email_user"
              },
              {
                "args": [
                  "user_id",
                  "email",
                  "test_data_dir"
                ],
                "docstring": "Create email user with test directory by directly saving files",
                "name": "create_email_user__with_test_dir"
              },
              {
                "args": [
                  "user_id",
                  "email"
                ],
                "docstring": "Internal implementation of email user creation",
                "name": "create_email_user__impl"
              },
              {
                "args": [
                  "user_id",
                  "custom_fields",
                  "test_data_dir"
                ],
                "docstring": "Create a test user with custom fields for testing custom field functionality\n        \n        Args:\n            user_id: Unique identifier for the test user\n            custom_fields: Dictionary of custom fields to add to user context\n            test_data_dir: Test data directory to use (if None, uses real user directory)\n            \n        Returns:\n            bool: True if user was created successfully, False otherwise",
                "name": "create_user_with_custom_fields"
              },
              {
                "args": [
                  "user_id",
                  "custom_fields"
                ],
                "docstring": "Internal implementation of custom fields user creation",
                "name": "create_user_with_custom_fields__impl"
              },
              {
                "args": [
                  "user_id",
                  "schedule_config",
                  "test_data_dir"
                ],
                "docstring": "Create a test user with comprehensive schedule configuration\n        \n        Args:\n            user_id: Unique identifier for the test user\n            schedule_config: Custom schedule configuration\n            test_data_dir: Test data directory to use (if None, uses real user directory)\n            \n        Returns:\n            bool: True if user was created successfully, False otherwise",
                "name": "create_user_with_schedules"
              },
              {
                "args": [
                  "user_id",
                  "schedule_config"
                ],
                "docstring": "Internal implementation of schedules user creation",
                "name": "create_user_with_schedules__impl"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create a minimal test user with only basic messaging enabled\n        \n        Args:\n            user_id: Unique identifier for the test user\n            test_data_dir: Test data directory to use (if None, uses real user directory)\n            \n        Returns:\n            bool: True if user was created successfully, False otherwise",
                "name": "create_minimal_user"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create a minimal test user and return the actual UUID\n        \n        Args:\n            user_id: Unique identifier for the test user\n            test_data_dir: Test data directory to use (if None, uses real user directory)\n            \n        Returns:\n            tuple[bool, str]: (success, actual_user_id) where actual_user_id is the UUID",
                "name": "create_minimal_user_and_get_id"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create minimal user with test directory by directly saving files",
                "name": "create_minimal_user__with_test_dir"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create minimal user with test directory and return the actual UUID",
                "name": "create_minimal_user__with_test_dir_and_get_id"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Internal implementation of minimal user creation",
                "name": "create_minimal_user__impl"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create a test user with complex check-in configurations\n        \n        Args:\n            user_id: Unique identifier for the test user\n            test_data_dir: Test data directory to use (if None, uses real user directory)\n            \n        Returns:\n            bool: True if user was created successfully, False otherwise",
                "name": "create_user_with_complex_checkins"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create complex checkins user with test directory by directly saving files",
                "name": "create_user_with_complex_checkins__with_test_dir"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Internal implementation of complex checkins user creation",
                "name": "create_user_with_complex_checkins__impl"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create a test user with health-focused features and data\n        \n        Args:\n            user_id: Unique identifier for the test user\n            test_data_dir: Test data directory to use (if None, uses real user directory)\n            \n        Returns:\n            bool: True if user was created successfully, False otherwise",
                "name": "create_user_with_health_focus"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create health focus user with test directory by directly saving files",
                "name": "create_user_with_health_focus__with_test_dir"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Internal implementation of health focus user creation",
                "name": "create_user_with_health_focus__impl"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create a test user with task management focus\n        \n        Args:\n            user_id: Unique identifier for the test user\n            test_data_dir: Test data directory to use (if None, uses real user directory)\n            \n        Returns:\n            bool: True if user was created successfully, False otherwise",
                "name": "create_user_with_task_focus"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create task focus user with test directory by directly saving files",
                "name": "create_user_with_task_focus__with_test_dir"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Internal implementation of task focus user creation",
                "name": "create_user_with_task_focus__impl"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create a test user with disability-focused features and data\n        \n        Args:\n            user_id: Unique identifier for the test user\n            test_data_dir: Test data directory to use (if None, uses real user directory)\n            \n        Returns:\n            bool: True if user was created successfully, False otherwise",
                "name": "create_user_with_disabilities"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create disability user with test directory by directly saving files",
                "name": "create_user_with_disabilities__with_test_dir"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Internal implementation of disability user creation",
                "name": "create_user_with_disabilities__impl"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create a test user with minimal data for testing edge cases\n        \n        Args:\n            user_id: Unique identifier for the test user\n            test_data_dir: Test data directory to use (if None, uses real user directory)\n            \n        Returns:\n            bool: True if user was created successfully, False otherwise",
                "name": "create_user_with_limited_data"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create limited data user with test directory by directly saving files",
                "name": "create_user_with_limited_data__with_test_dir"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Internal implementation of limited data user creation",
                "name": "create_user_with_limited_data__impl"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create a test user with inconsistent data for testing edge cases\n        \n        Args:\n            user_id: Unique identifier for the test user\n            test_data_dir: Test data directory to use (if None, uses real user directory)\n            \n        Returns:\n            bool: True if user was created successfully, False otherwise",
                "name": "create_user_with_inconsistent_data"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Create inconsistent data user with test directory by directly saving files",
                "name": "create_user_with_inconsistent_data__with_test_dir"
              },
              {
                "args": [
                  "user_id"
                ],
                "docstring": "Internal implementation of inconsistent data user creation",
                "name": "create_user_with_inconsistent_data__impl"
              },
              {
                "args": [
                  "user_id",
                  "test_data_dir"
                ],
                "docstring": "Get user data from test directory",
                "name": "get_test_user_data"
              },
              {
                "args": [
                  "internal_username",
                  "test_data_dir"
                ],
                "docstring": "Get user ID by internal username from test directory",
                "name": "get_test_user_id_by_internal_username"
              },
              {
                "args": [
                  "user_id",
                  "actual_user_id",
                  "test_data_dir"
                ],
                "docstring": "Helper function to verify user creation with proper configuration patching",
                "name": "create_basic_user__verify_creation"
              },
              {
                "args": [
                  "user_id",
                  "actual_user_id",
                  "test_data_dir"
                ],
                "docstring": "Helper function to verify email user creation with proper configuration patching",
                "name": "verify_email_user_creation__with_test_dir"
              },
              {
                "args": [],
                "docstring": "Create isolated test environment with temporary directories\n        \n        Returns:\n            tuple: (test_dir, test_data_dir, test_test_data_dir)",
                "name": "setup_test_environment"
              },
              {
                "args": [
                  "test_dir"
                ],
                "docstring": "Clean up test environment and remove temporary files\n        \n        Args:\n            test_dir: Path to the test directory to clean up",
                "name": "cleanup_test_environment"
              },
              {
                "args": [
                  "user_id",
                  "**overrides"
                ],
                "docstring": "Create standard account data structure with optional overrides\n        \n        Args:\n            user_id: User identifier\n            **overrides: Optional field overrides\n            \n        Returns:\n            Dict containing account data",
                "name": "create_account_data"
              },
              {
                "args": [
                  "user_id",
                  "**overrides"
                ],
                "docstring": "Create standard preferences data structure with optional overrides\n        \n        Args:\n            user_id: User identifier\n            **overrides: Optional field overrides\n            \n        Returns:\n            Dict containing preferences data",
                "name": "create_preferences_data"
              },
              {
                "args": [
                  "**overrides"
                ],
                "docstring": "Create standard schedules data structure with optional overrides\n        \n        Args:\n            **overrides: Optional field overrides\n            \n        Returns:\n            Dict containing schedules data",
                "name": "create_schedules_data"
              },
              {
                "args": [
                  "**overrides"
                ],
                "docstring": "Create standard context data structure with optional overrides\n        \n        Args:\n            **overrides: Optional field overrides\n            \n        Returns:\n            Dict containing context data",
                "name": "create_context_data"
              },
              {
                "args": [
                  "user_id",
                  "corruption_type"
                ],
                "docstring": "Create a user with corrupted data for testing error handling\n        \n        Args:\n            user_id: Unique identifier for the test user\n            corruption_type: Type of corruption (\"invalid_json\", \"missing_file\", \"empty_file\")\n            \n        Returns:\n            bool: True if corrupted user was created successfully, False otherwise",
                "name": "create_corrupted_user_data"
              },
              {
                "args": [
                  "categories"
                ],
                "docstring": "Create test schedule data for testing schedule management\n        \n        Args:\n            categories: List of categories to create schedules for\n            \n        Returns:\n            Dict containing schedule data",
                "name": "create_test_schedule_data"
              },
              {
                "args": [
                  "task_count"
                ],
                "docstring": "Create test task data for testing task management\n        \n        Args:\n            task_count: Number of tasks to create\n            \n        Returns:\n            List of task dictionaries",
                "name": "create_test_task_data"
              },
              {
                "args": [
                  "category",
                  "message_count"
                ],
                "docstring": "Create test message data for testing message management\n        \n        Args:\n            category: Message category\n            message_count: Number of messages to create\n            \n        Returns:\n            List of message dictionaries",
                "name": "create_test_message_data"
              }
            ]
          },
          "tests/ui/test_account_creation_ui.py": {
            "classes": [
              {
                "docstring": "Test account creation dialog with real behavior verification.",
                "methods": [
                  "dialog",
                  "test_dialog_initialization_real_behavior",
                  "test_feature_enablement_real_behavior",
                  "test_username_validation_real_behavior",
                  "test_timezone_validation_real_behavior",
                  "test_feature_validation_real_behavior",
                  "test_messages_validation_real_behavior",
                  "test_account_creation_real_behavior",
                  "test_widget_data_collection_real_behavior"
                ],
                "name": "TestAccountCreationDialogRealBehavior"
              },
              {
                "docstring": "Test account management functionality with real behavior verification.",
                "methods": [
                  "test_user_profile_dialog_integration",
                  "test_user_index_integration_real_behavior",
                  "test_feature_enablement_persistence_real_behavior"
                ],
                "name": "TestAccountManagementRealBehavior"
              },
              {
                "docstring": "Test error handling in account creation and management.",
                "methods": [
                  "test_duplicate_username_handling_real_behavior",
                  "test_invalid_data_handling_real_behavior",
                  "test_file_system_error_handling_real_behavior",
                  "test_widget_error_handling_real_behavior"
                ],
                "name": "TestAccountCreationErrorHandling"
              },
              {
                "docstring": "Test integration scenarios for account creation and management.",
                "methods": [
                  "test_full_account_lifecycle_real_behavior",
                  "test_multiple_users_same_features_real_behavior"
                ],
                "name": "TestAccountCreationIntegration"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Create QApplication instance for UI testing.",
                "name": "qapp"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Create account creation dialog for testing.",
                "name": "dialog"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.",
                "name": "test_dialog_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test feature enablement checkboxes control tab visibility.",
                "name": "test_feature_enablement_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test username validation with real UI interactions.",
                "name": "test_username_validation_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test timezone validation with real UI interactions.",
                "name": "test_timezone_validation_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test feature validation with proper category requirements.",
                "name": "test_feature_validation_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test messages-specific validation when messages are enabled.",
                "name": "test_messages_validation_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test complete account creation workflow with real file operations.",
                "name": "test_account_creation_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test that widgets properly collect and return data.",
                "name": "test_widget_data_collection_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test user profile dialog integration with real user data.",
                "name": "test_user_profile_dialog_integration"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test user index integration with real file operations.",
                "name": "test_user_index_integration_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test that feature enablement is properly persisted using enhanced test utilities.",
                "name": "test_feature_enablement_persistence_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test handling of duplicate usernames using enhanced test utilities.",
                "name": "test_duplicate_username_handling_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test handling of invalid data during account creation.",
                "name": "test_invalid_data_handling_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test handling of file system errors.",
                "name": "test_file_system_error_handling_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test handling of widget errors during account creation.",
                "name": "test_widget_error_handling_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test complete account lifecycle with real file operations.",
                "name": "test_full_account_lifecycle_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test creating multiple users with same features.",
                "name": "test_multiple_users_same_features_real_behavior"
              },
              {
                "args": [],
                "docstring": "",
                "name": "mock_accept_impl"
              }
            ]
          },
          "tests/ui/test_channel_management_dialog_coverage_expansion.py": {
            "classes": [
              {
                "docstring": "Test coverage expansion for ChannelManagementDialog.",
                "methods": [
                  "mock_user_data",
                  "test_save_channel_settings_without_user",
                  "test_save_channel_settings_success_email",
                  "test_save_channel_settings_success_discord",
                  "test_save_channel_settings_validation_error_email_required",
                  "test_save_channel_settings_validation_error_discord_required",
                  "test_save_channel_settings_validation_error_invalid_email",
                  "test_save_channel_settings_validation_error_invalid_discord_id",
                  "test_save_channel_settings_validation_error_invalid_email",
                  "test_save_channel_settings_exception_handling",
                  "test_save_channel_settings_removes_old_settings",
                  "test_get_selected_channel",
                  "test_set_selected_channel"
                ],
                "name": "TestChannelManagementDialogCoverageExpansion"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Mock user data for testing.",
                "name": "mock_user_data"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test save_channel_settings when no user ID is set.",
                "name": "test_save_channel_settings_without_user"
              },
              {
                "args": [
                  "self",
                  "mock_user_data"
                ],
                "docstring": "Test successful save with email channel.",
                "name": "test_save_channel_settings_success_email"
              },
              {
                "args": [
                  "self",
                  "mock_user_data"
                ],
                "docstring": "Test successful save with Discord channel.",
                "name": "test_save_channel_settings_success_discord"
              },
              {
                "args": [
                  "self",
                  "mock_user_data"
                ],
                "docstring": "Test validation error when email is required but not provided.",
                "name": "test_save_channel_settings_validation_error_email_required"
              },
              {
                "args": [
                  "self",
                  "mock_user_data"
                ],
                "docstring": "Test validation error when Discord ID is required but not provided.",
                "name": "test_save_channel_settings_validation_error_discord_required"
              },
              {
                "args": [
                  "self",
                  "mock_user_data"
                ],
                "docstring": "Test validation error for invalid email format.",
                "name": "test_save_channel_settings_validation_error_invalid_email"
              },
              {
                "args": [
                  "self",
                  "mock_user_data"
                ],
                "docstring": "Test validation error for missing Discord ID.",
                "name": "test_save_channel_settings_validation_error_invalid_discord_id"
              },
              {
                "args": [
                  "self",
                  "mock_user_data"
                ],
                "docstring": "Test validation error for invalid email format.",
                "name": "test_save_channel_settings_validation_error_invalid_email"
              },
              {
                "args": [
                  "self",
                  "mock_user_data"
                ],
                "docstring": "Test exception handling during save.",
                "name": "test_save_channel_settings_exception_handling"
              },
              {
                "args": [
                  "self",
                  "mock_user_data"
                ],
                "docstring": "Test that old settings are properly removed.",
                "name": "test_save_channel_settings_removes_old_settings"
              },
              {
                "args": [
                  "self",
                  "mock_user_data"
                ],
                "docstring": "Test get_selected_channel method.",
                "name": "test_get_selected_channel"
              },
              {
                "args": [
                  "self",
                  "mock_user_data"
                ],
                "docstring": "Test set_selected_channel method.",
                "name": "test_set_selected_channel"
              }
            ]
          },
          "tests/ui/test_dialog_behavior.py": {
            "classes": [
              {
                "docstring": "Test user profile dialog with real behavior verification.",
                "methods": [
                  "dialog",
                  "test_dialog_initialization_real_behavior",
                  "test_data_loading_real_behavior",
                  "test_data_saving_real_behavior",
                  "test_dynamic_list_fields_real_behavior"
                ],
                "name": "TestUserProfileDialogBehavior"
              },
              {
                "docstring": "Test category management dialog with real behavior verification.",
                "methods": [
                  "dialog",
                  "test_dialog_initialization_real_behavior",
                  "test_category_selection_real_behavior"
                ],
                "name": "TestCategoryManagementDialogBehavior"
              },
              {
                "docstring": "Test channel management dialog with real behavior verification.",
                "methods": [
                  "dialog",
                  "test_dialog_initialization_real_behavior",
                  "test_channel_configuration_real_behavior"
                ],
                "name": "TestChannelManagementDialogBehavior"
              },
              {
                "docstring": "Test check-in management dialog with real behavior verification.",
                "methods": [
                  "dialog",
                  "test_dialog_initialization_real_behavior",
                  "test_checkin_enablement_real_behavior"
                ],
                "name": "TestCheckinManagementDialogBehavior"
              },
              {
                "docstring": "Test task management dialog with real behavior verification.",
                "methods": [
                  "dialog",
                  "test_dialog_initialization_real_behavior",
                  "test_task_statistics_real_behavior"
                ],
                "name": "TestTaskManagementDialogBehavior"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Create QApplication instance for UI testing.",
                "name": "qapp"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir"
                ],
                "docstring": "Create user profile dialog for testing.",
                "name": "dialog"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.",
                "name": "test_dialog_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test dialog loads existing user data correctly.",
                "name": "test_data_loading_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test dialog saves user data correctly.",
                "name": "test_data_saving_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test dynamic list fields work correctly.",
                "name": "test_dynamic_list_fields_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir"
                ],
                "docstring": "Create category management dialog for testing.",
                "name": "dialog"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.",
                "name": "test_dialog_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test category selection and saving works correctly.",
                "name": "test_category_selection_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir"
                ],
                "docstring": "Create channel management dialog for testing.",
                "name": "dialog"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.",
                "name": "test_dialog_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test channel configuration and saving works correctly.",
                "name": "test_channel_configuration_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir"
                ],
                "docstring": "Create check-in management dialog for testing.",
                "name": "dialog"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.",
                "name": "test_dialog_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test check-in enablement toggle works correctly.",
                "name": "test_checkin_enablement_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir"
                ],
                "docstring": "Create task management dialog for testing.",
                "name": "dialog"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.",
                "name": "test_dialog_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test task statistics are calculated and displayed correctly.",
                "name": "test_task_statistics_real_behavior"
              }
            ]
          },
          "tests/ui/test_dialog_coverage_expansion.py": {
            "classes": [
              {
                "docstring": "Test schedule editor dialog with real behavior verification.",
                "methods": [
                  "test_user_data",
                  "dialog",
                  "test_dialog_initialization_real_behavior",
                  "test_existing_data_loading_real_behavior",
                  "test_add_new_period_real_behavior",
                  "test_delete_period_real_behavior",
                  "test_undo_delete_real_behavior",
                  "test_data_saving_real_behavior",
                  "test_validation_error_handling_real_behavior",
                  "test_open_schedule_editor_function_real_behavior"
                ],
                "name": "TestScheduleEditorDialogBehavior"
              },
              {
                "docstring": "Test TaskEditDialog behavior.",
                "methods": [
                  "test_user_data",
                  "dialog",
                  "test_dialog_initialization_real_behavior",
                  "test_task_data_editing_real_behavior",
                  "test_task_saving_real_behavior",
                  "test_validation_error_handling_real_behavior"
                ],
                "name": "TestTaskEditDialogBehavior"
              },
              {
                "docstring": "Test TaskCrudDialog behavior.",
                "methods": [
                  "test_user_data",
                  "dialog",
                  "test_dialog_initialization_real_behavior",
                  "test_add_task_real_behavior",
                  "test_edit_task_real_behavior",
                  "test_delete_task_real_behavior"
                ],
                "name": "TestTaskCrudDialogBehavior"
              },
              {
                "docstring": "Test task completion dialog with real behavior verification.",
                "methods": [
                  "test_user_data",
                  "dialog",
                  "test_dialog_initialization_real_behavior",
                  "test_task_completion_real_behavior"
                ],
                "name": "TestTaskCompletionDialogBehavior"
              },
              {
                "docstring": "Test UserProfileDialog behavior.",
                "methods": [
                  "test_user_data",
                  "dialog",
                  "test_dialog_initialization_real_behavior",
                  "test_profile_data_editing_real_behavior",
                  "test_dynamic_list_fields_real_behavior",
                  "test_validation_error_handling_real_behavior"
                ],
                "name": "TestUserProfileDialogBehavior"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Create QApplication instance for UI testing.",
                "name": "qapp"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Create test user with schedule data.",
                "name": "test_user_data"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Create schedule editor dialog for testing.",
                "name": "dialog"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test dialog initialization loads existing data.",
                "name": "test_dialog_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test dialog loads existing schedule data.",
                "name": "test_existing_data_loading_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test adding a new period creates widget and updates data.",
                "name": "test_add_new_period_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test deleting a period removes widget and tracks for undo.",
                "name": "test_delete_period_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test undo delete restores deleted period.",
                "name": "test_undo_delete_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test saving dialog data updates user files.",
                "name": "test_data_saving_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test validation errors are handled gracefully.",
                "name": "test_validation_error_handling_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test open_schedule_editor function creates and shows dialog.",
                "name": "test_open_schedule_editor_function_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "",
                "name": "test_user_data"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Create task edit dialog for testing.",
                "name": "dialog"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test dialog initialization sets up UI correctly.",
                "name": "test_dialog_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test editing task data updates form fields.",
                "name": "test_task_data_editing_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test task saving functionality.",
                "name": "test_task_saving_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test validation errors are handled gracefully.",
                "name": "test_validation_error_handling_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "",
                "name": "test_user_data"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Create task CRUD dialog for testing.",
                "name": "dialog"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test dialog initialization sets up UI correctly.",
                "name": "test_dialog_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test adding a new task updates the table.",
                "name": "test_add_task_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test editing a task shows edit dialog.",
                "name": "test_edit_task_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test deleting a task removes it from the table.",
                "name": "test_delete_task_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Create test user with task data.",
                "name": "test_user_data"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Create task completion dialog for testing.",
                "name": "dialog"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test dialog initialization sets up UI correctly.",
                "name": "test_dialog_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test completing a task updates user data.",
                "name": "test_task_completion_real_behavior"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "",
                "name": "test_user_data"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Create user profile dialog for testing.",
                "name": "dialog"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test dialog initialization sets up UI correctly.",
                "name": "test_dialog_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test editing profile data updates form fields.",
                "name": "test_profile_data_editing_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test dynamic list fields (health conditions, medications, etc.).",
                "name": "test_dynamic_list_fields_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test validation errors are handled gracefully.",
                "name": "test_validation_error_handling_real_behavior"
              }
            ]
          },
          "tests/ui/test_dialogs.py": {
            "classes": [],
            "functions": [
              {
                "args": [],
                "docstring": "Test that all dialog modules can be imported without errors",
                "name": "test_dialog_imports"
              },
              {
                "args": [],
                "docstring": "Test that all widget modules can be imported without errors",
                "name": "test_widget_imports"
              },
              {
                "args": [],
                "docstring": "Test that all required UI files exist",
                "name": "test_ui_files_exist"
              },
              {
                "args": [],
                "docstring": "Test that all generated Python UI files exist",
                "name": "test_generated_files_exist"
              },
              {
                "args": [
                  "test_data_dir",
                  "mock_config",
                  "mock_user_data"
                ],
                "docstring": "Test that we can access user data for testing - READ ONLY",
                "name": "test_user_data_access"
              },
              {
                "args": [
                  "monkeypatch"
                ],
                "docstring": "Test that dialogs can be instantiated (without showing them)",
                "name": "test_dialog_instantiation"
              },
              {
                "args": [
                  "data"
                ],
                "docstring": "",
                "name": "mock_save"
              }
            ]
          },
          "tests/ui/test_ui_widgets_coverage_expansion.py": {
            "classes": [
              {
                "docstring": "Comprehensive test coverage expansion for UI widgets.",
                "methods": [
                  "app",
                  "temp_dir",
                  "user_id",
                  "mock_user_data_dir",
                  "mock_message_boxes",
                  "cleanup_widgets",
                  "test_tag_widget_management_mode_initialization_real_behavior",
                  "test_tag_widget_selection_mode_initialization_real_behavior",
                  "test_tag_widget_account_creation_mode_real_behavior",
                  "test_tag_widget_add_tag_management_mode_real_behavior",
                  "test_tag_widget_add_tag_account_creation_mode_real_behavior",
                  "test_tag_widget_add_duplicate_tag_real_behavior",
                  "test_tag_widget_add_empty_tag_real_behavior",
                  "test_tag_widget_edit_tag_real_behavior",
                  "test_tag_widget_edit_tag_account_creation_mode_real_behavior",
                  "test_tag_widget_delete_tag_real_behavior",
                  "test_tag_widget_delete_tag_account_creation_mode_real_behavior",
                  "test_tag_widget_undo_delete_real_behavior",
                  "test_tag_widget_selection_mode_checkbox_behavior_real_behavior",
                  "test_tag_widget_selection_changed_signal_real_behavior",
                  "test_tag_widget_get_selected_tags_real_behavior",
                  "test_tag_widget_set_selected_tags_real_behavior",
                  "test_tag_widget_refresh_tags_real_behavior",
                  "test_period_row_widget_initialization_real_behavior",
                  "test_period_row_widget_default_initialization_real_behavior",
                  "test_period_row_widget_all_period_initialization_real_behavior",
                  "test_period_row_widget_load_period_data_real_behavior",
                  "test_period_row_widget_get_period_data_real_behavior",
                  "test_period_row_widget_delete_requested_signal_real_behavior",
                  "test_period_row_widget_read_only_mode_real_behavior",
                  "test_period_row_widget_validation_real_behavior",
                  "test_period_row_widget_day_selection_real_behavior",
                  "test_dynamic_list_container_initialization_real_behavior",
                  "test_dynamic_list_container_add_blank_row_real_behavior",
                  "test_dynamic_list_container_row_edited_real_behavior",
                  "test_dynamic_list_container_row_deleted_real_behavior",
                  "test_dynamic_list_container_get_values_real_behavior",
                  "test_dynamic_list_container_set_values_real_behavior",
                  "test_dynamic_list_container_duplicate_detection_real_behavior",
                  "test_dynamic_list_container_signal_emission_real_behavior",
                  "test_tag_widget_error_handling_real_behavior",
                  "test_period_row_widget_error_handling_real_behavior",
                  "test_dynamic_list_container_error_handling_real_behavior",
                  "test_widget_integration_real_behavior",
                  "test_widget_lifecycle_real_behavior",
                  "test_widget_performance_real_behavior",
                  "test_widget_memory_usage_real_behavior"
                ],
                "name": "TestUIWidgetsCoverageExpansion"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Create QApplication instance for testing.",
                "name": "app"
              },
              {
                "args": [
                  "self",
                  "test_path_factory"
                ],
                "docstring": "Provide a per-test directory under tests/data/tmp.",
                "name": "temp_dir"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create a test user ID.",
                "name": "user_id"
              },
              {
                "args": [
                  "self",
                  "temp_dir"
                ],
                "docstring": "Mock user data directory.",
                "name": "mock_user_data_dir"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Mock all QMessageBox dialogs to prevent real UI dialogs during testing.",
                "name": "mock_message_boxes"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Ensure widgets are properly cleaned up after each test.",
                "name": "cleanup_widgets"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test TagWidget initialization in management mode.",
                "name": "test_tag_widget_management_mode_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test TagWidget initialization in selection mode.",
                "name": "test_tag_widget_selection_mode_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir"
                ],
                "docstring": "Test TagWidget in account creation mode (no user_id).",
                "name": "test_tag_widget_account_creation_mode_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test adding a tag in management mode.",
                "name": "test_tag_widget_add_tag_management_mode_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir"
                ],
                "docstring": "Test adding a tag in account creation mode.",
                "name": "test_tag_widget_add_tag_account_creation_mode_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test adding a duplicate tag.",
                "name": "test_tag_widget_add_duplicate_tag_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test adding an empty tag.",
                "name": "test_tag_widget_add_empty_tag_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test editing a tag.",
                "name": "test_tag_widget_edit_tag_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir"
                ],
                "docstring": "Test editing a tag in account creation mode.",
                "name": "test_tag_widget_edit_tag_account_creation_mode_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test deleting a tag.",
                "name": "test_tag_widget_delete_tag_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir"
                ],
                "docstring": "Test deleting a tag in account creation mode.",
                "name": "test_tag_widget_delete_tag_account_creation_mode_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir"
                ],
                "docstring": "Test undoing tag deletion in account creation mode.",
                "name": "test_tag_widget_undo_delete_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test checkbox behavior in selection mode.",
                "name": "test_tag_widget_selection_mode_checkbox_behavior_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test that selection changes emit signals.",
                "name": "test_tag_widget_selection_changed_signal_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test getting selected tags.",
                "name": "test_tag_widget_get_selected_tags_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test setting selected tags.",
                "name": "test_tag_widget_set_selected_tags_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test refreshing tags.",
                "name": "test_tag_widget_refresh_tags_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test PeriodRowWidget initialization.",
                "name": "test_period_row_widget_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test PeriodRowWidget initialization with default data.",
                "name": "test_period_row_widget_default_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test PeriodRowWidget initialization for ALL period.",
                "name": "test_period_row_widget_all_period_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test loading period data into UI.",
                "name": "test_period_row_widget_load_period_data_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test getting period data from UI.",
                "name": "test_period_row_widget_get_period_data_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test that delete button emits signal.",
                "name": "test_period_row_widget_delete_requested_signal_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test read-only mode functionality.",
                "name": "test_period_row_widget_read_only_mode_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test period validation.",
                "name": "test_period_row_widget_validation_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test day selection functionality.",
                "name": "test_period_row_widget_day_selection_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test DynamicListContainer initialization.",
                "name": "test_dynamic_list_container_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test adding a blank row.",
                "name": "test_dynamic_list_container_add_blank_row_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test row editing behavior.",
                "name": "test_dynamic_list_container_row_edited_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test row deletion behavior.",
                "name": "test_dynamic_list_container_row_deleted_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test getting values from container.",
                "name": "test_dynamic_list_container_get_values_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test setting values in container.",
                "name": "test_dynamic_list_container_set_values_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test duplicate value detection.",
                "name": "test_dynamic_list_container_duplicate_detection_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test that value changes emit signals.",
                "name": "test_dynamic_list_container_signal_emission_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test error handling in TagWidget.",
                "name": "test_tag_widget_error_handling_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test error handling in PeriodRowWidget.",
                "name": "test_period_row_widget_error_handling_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app"
                ],
                "docstring": "Test error handling in DynamicListContainer.",
                "name": "test_dynamic_list_container_error_handling_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test integration between widgets.",
                "name": "test_widget_integration_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test widget lifecycle management.",
                "name": "test_widget_lifecycle_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test widget performance with large datasets.",
                "name": "test_widget_performance_real_behavior"
              },
              {
                "args": [
                  "self",
                  "app",
                  "mock_user_data_dir",
                  "user_id"
                ],
                "docstring": "Test widget memory usage.",
                "name": "test_widget_memory_usage_real_behavior"
              },
              {
                "args": [
                  "widget_instance"
                ],
                "docstring": "",
                "name": "on_delete_requested"
              },
              {
                "args": [],
                "docstring": "",
                "name": "on_tags_changed"
              },
              {
                "args": [],
                "docstring": "",
                "name": "on_values_changed"
              }
            ]
          },
          "tests/ui/test_user_profile_dialog_coverage_expansion.py": {
            "classes": [
              {
                "docstring": "Comprehensive test suite for UserProfileDialog coverage expansion.",
                "methods": [
                  "test_user_data",
                  "dialog",
                  "empty_dialog",
                  "test_dialog_initialization_with_existing_data_real_behavior",
                  "test_dialog_initialization_without_data_real_behavior",
                  "test_center_dialog_real_behavior",
                  "test_key_press_event_escape_real_behavior",
                  "test_key_press_event_enter_real_behavior",
                  "test_create_custom_field_list_real_behavior",
                  "test_add_custom_field_real_behavior",
                  "test_remove_custom_field_real_behavior",
                  "test_create_health_section_real_behavior",
                  "test_create_loved_ones_section_real_behavior",
                  "test_add_loved_one_widget_real_behavior",
                  "test_add_loved_one_widget_without_data_real_behavior",
                  "test_remove_loved_one_widget_real_behavior",
                  "test_save_personalization_real_behavior",
                  "test_save_personalization_without_callback_real_behavior",
                  "test_save_personalization_validation_error_real_behavior",
                  "test_cancel_real_behavior",
                  "test_close_event_real_behavior",
                  "test_close_event_declined_real_behavior",
                  "test_title_case_conversion_real_behavior",
                  "test_multi_column_layout_real_behavior",
                  "test_custom_field_interaction_real_behavior",
                  "test_loved_one_widget_interaction_real_behavior",
                  "test_dialog_with_parent_real_behavior",
                  "test_dialog_window_flags_real_behavior",
                  "test_dialog_modal_behavior_real_behavior",
                  "test_dialog_size_constraints_real_behavior",
                  "test_profile_widget_integration_real_behavior",
                  "test_error_handling_real_behavior",
                  "test_dialog_cleanup_real_behavior"
                ],
                "name": "TestUserProfileDialogCoverageExpansion"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Create QApplication instance for UI testing.",
                "name": "qapp"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Create test user with personalization data.",
                "name": "test_user_data"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Create user profile dialog for testing.",
                "name": "dialog"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir"
                ],
                "docstring": "Create user profile dialog with no existing data.",
                "name": "empty_dialog"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test dialog initialization with existing personalization data.",
                "name": "test_dialog_initialization_with_existing_data_real_behavior"
              },
              {
                "args": [
                  "self",
                  "empty_dialog",
                  "test_data_dir"
                ],
                "docstring": "Test dialog initialization without existing data.",
                "name": "test_dialog_initialization_without_data_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test dialog centering functionality.",
                "name": "test_center_dialog_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test escape key handling.",
                "name": "test_key_press_event_escape_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test enter key handling.",
                "name": "test_key_press_event_enter_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test custom field list creation.",
                "name": "test_create_custom_field_list_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test adding custom fields.",
                "name": "test_add_custom_field_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test removing custom fields.",
                "name": "test_remove_custom_field_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test health section creation.",
                "name": "test_create_health_section_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test loved ones section creation.",
                "name": "test_create_loved_ones_section_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test adding loved one widgets.",
                "name": "test_add_loved_one_widget_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test adding loved one widget without data.",
                "name": "test_add_loved_one_widget_without_data_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test removing loved one widgets.",
                "name": "test_remove_loved_one_widget_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test saving personalization data.",
                "name": "test_save_personalization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test saving personalization without save callback.",
                "name": "test_save_personalization_without_callback_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test saving personalization with validation errors.",
                "name": "test_save_personalization_validation_error_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test canceling the dialog.",
                "name": "test_cancel_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test close event handling.",
                "name": "test_close_event_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test close event handling when user declines.",
                "name": "test_close_event_declined_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test title case conversion in custom field list creation.",
                "name": "test_title_case_conversion_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test multi-column layout for large predefined value sets.",
                "name": "test_multi_column_layout_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test custom field interaction (add, edit, remove).",
                "name": "test_custom_field_interaction_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test loved one widget interaction (add, edit, remove).",
                "name": "test_loved_one_widget_interaction_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir"
                ],
                "docstring": "Test dialog creation with parent window.",
                "name": "test_dialog_with_parent_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test dialog window flags are set correctly.",
                "name": "test_dialog_window_flags_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test dialog modal behavior.",
                "name": "test_dialog_modal_behavior_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test dialog size constraints.",
                "name": "test_dialog_size_constraints_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test integration with UserProfileSettingsWidget.",
                "name": "test_profile_widget_integration_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test error handling in dialog operations.",
                "name": "test_error_handling_real_behavior"
              },
              {
                "args": [
                  "self",
                  "dialog",
                  "test_user_data",
                  "test_data_dir"
                ],
                "docstring": "Test dialog cleanup on destruction.",
                "name": "test_dialog_cleanup_real_behavior"
              }
            ]
          },
          "tests/ui/test_widget_behavior.py": {
            "classes": [
              {
                "docstring": "Test TagWidget with real behavior verification.",
                "methods": [
                  "widget",
                  "test_widget_initialization_real_behavior",
                  "test_tag_management_real_behavior",
                  "test_tag_selection_mode_real_behavior"
                ],
                "name": "TestTagWidgetBehavior"
              },
              {
                "docstring": "Test TaskSettingsWidget with real behavior verification.",
                "methods": [
                  "widget",
                  "test_widget_initialization_real_behavior",
                  "test_task_enablement_real_behavior"
                ],
                "name": "TestTaskSettingsWidgetBehavior"
              },
              {
                "docstring": "Test CategorySelectionWidget with real behavior verification.",
                "methods": [
                  "widget",
                  "test_widget_initialization_real_behavior"
                ],
                "name": "TestCategorySelectionWidgetBehavior"
              },
              {
                "docstring": "Test ChannelSelectionWidget with real behavior verification.",
                "methods": [
                  "widget",
                  "test_widget_initialization_real_behavior"
                ],
                "name": "TestChannelSelectionWidgetBehavior"
              },
              {
                "docstring": "Test CheckinSettingsWidget with real behavior verification.",
                "methods": [
                  "widget",
                  "test_widget_initialization_real_behavior",
                  "test_checkin_enablement_real_behavior"
                ],
                "name": "TestCheckinSettingsWidgetBehavior"
              },
              {
                "docstring": "Test UserProfileSettingsWidget with real behavior verification.",
                "methods": [
                  "widget",
                  "test_widget_initialization_real_behavior"
                ],
                "name": "TestUserProfileSettingsWidgetBehavior"
              },
              {
                "docstring": "Test PeriodRowWidget with real behavior verification.",
                "methods": [
                  "widget",
                  "test_widget_initialization_real_behavior"
                ],
                "name": "TestPeriodRowWidgetBehavior"
              },
              {
                "docstring": "Test DynamicListField with real behavior verification.",
                "methods": [
                  "widget",
                  "test_widget_initialization_real_behavior",
                  "test_item_management_real_behavior"
                ],
                "name": "TestDynamicListFieldBehavior"
              },
              {
                "docstring": "Test DynamicListContainer with real behavior verification.",
                "methods": [
                  "widget",
                  "test_widget_initialization_real_behavior"
                ],
                "name": "TestDynamicListContainerBehavior"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Create QApplication instance for UI testing.",
                "name": "qapp"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Create TagWidget for testing.",
                "name": "widget"
              },
              {
                "args": [
                  "self",
                  "widget"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.",
                "name": "test_widget_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "widget"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test adding and removing tags works correctly.",
                "name": "test_tag_management_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test widget works in selection mode.",
                "name": "test_tag_selection_mode_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Create TaskSettingsWidget for testing.",
                "name": "widget"
              },
              {
                "args": [
                  "self",
                  "widget"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.",
                "name": "test_widget_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "widget"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test task period management works correctly.",
                "name": "test_task_enablement_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Create CategorySelectionWidget for testing.",
                "name": "widget"
              },
              {
                "args": [
                  "self",
                  "widget"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.",
                "name": "test_widget_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Create ChannelSelectionWidget for testing.",
                "name": "widget"
              },
              {
                "args": [
                  "self",
                  "widget"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.",
                "name": "test_widget_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Create CheckinSettingsWidget for testing.",
                "name": "widget"
              },
              {
                "args": [
                  "self",
                  "widget"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.",
                "name": "test_widget_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "widget"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test check-in period management works correctly.",
                "name": "test_checkin_enablement_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Create UserProfileSettingsWidget for testing.",
                "name": "widget"
              },
              {
                "args": [
                  "self",
                  "widget"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.",
                "name": "test_widget_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp"
                ],
                "docstring": "Create PeriodRowWidget for testing.",
                "name": "widget"
              },
              {
                "args": [
                  "self",
                  "widget"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.",
                "name": "test_widget_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp"
                ],
                "docstring": "Create DynamicListField for testing.",
                "name": "widget"
              },
              {
                "args": [
                  "self",
                  "widget"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.",
                "name": "test_widget_initialization_real_behavior"
              },
              {
                "args": [
                  "self",
                  "widget"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test dynamic list field functionality.",
                "name": "test_item_management_real_behavior"
              },
              {
                "args": [
                  "self",
                  "qapp"
                ],
                "docstring": "Create DynamicListContainer for testing.",
                "name": "widget"
              },
              {
                "args": [
                  "self",
                  "widget"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.",
                "name": "test_widget_initialization_real_behavior"
              }
            ]
          },
          "tests/ui/test_widget_behavior_simple.py": {
            "classes": [
              {
                "docstring": "Test TagWidget basic functionality without complex UI setup.",
                "methods": [
                  "test_tag_widget_import_and_creation",
                  "test_tag_widget_selection_mode"
                ],
                "name": "TestTagWidgetBasicBehavior"
              },
              {
                "docstring": "Test TaskSettingsWidget basic functionality.",
                "methods": [
                  "test_task_settings_widget_import_and_creation"
                ],
                "name": "TestTaskSettingsWidgetBasicBehavior"
              },
              {
                "docstring": "Test CategorySelectionWidget basic functionality.",
                "methods": [
                  "test_category_selection_widget_import_and_creation"
                ],
                "name": "TestCategorySelectionWidgetBasicBehavior"
              },
              {
                "docstring": "Test ChannelSelectionWidget basic functionality.",
                "methods": [
                  "test_channel_selection_widget_import_and_creation"
                ],
                "name": "TestChannelSelectionWidgetBasicBehavior"
              },
              {
                "docstring": "Test CheckinSettingsWidget basic functionality.",
                "methods": [
                  "test_checkin_settings_widget_import_and_creation"
                ],
                "name": "TestCheckinSettingsWidgetBasicBehavior"
              },
              {
                "docstring": "Test UserProfileSettingsWidget basic functionality.",
                "methods": [
                  "test_user_profile_settings_widget_import_and_creation"
                ],
                "name": "TestUserProfileSettingsWidgetBasicBehavior"
              },
              {
                "docstring": "Test DynamicListField basic functionality.",
                "methods": [
                  "test_dynamic_list_field_import_and_creation"
                ],
                "name": "TestDynamicListFieldBasicBehavior"
              },
              {
                "docstring": "Test DynamicListContainer basic functionality.",
                "methods": [
                  "test_dynamic_list_container_import_and_creation"
                ],
                "name": "TestDynamicListContainerBasicBehavior"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Create QApplication instance for UI testing.",
                "name": "qapp"
              },
              {
                "args": [
                  "self",
                  "qapp"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test TagWidget can be imported and created.",
                "name": "test_tag_widget_import_and_creation"
              },
              {
                "args": [
                  "self",
                  "qapp"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test TagWidget works in selection mode.",
                "name": "test_tag_widget_selection_mode"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test TaskSettingsWidget can be imported and created.",
                "name": "test_task_settings_widget_import_and_creation"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test CategorySelectionWidget can be imported and created.",
                "name": "test_category_selection_widget_import_and_creation"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test ChannelSelectionWidget can be imported and created.",
                "name": "test_channel_selection_widget_import_and_creation"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test CheckinSettingsWidget can be imported and created.",
                "name": "test_checkin_settings_widget_import_and_creation"
              },
              {
                "args": [
                  "self",
                  "qapp",
                  "test_data_dir"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test UserProfileSettingsWidget can be imported and created.",
                "name": "test_user_profile_settings_widget_import_and_creation"
              },
              {
                "args": [
                  "self",
                  "qapp"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test DynamicListField can be imported and created.",
                "name": "test_dynamic_list_field_import_and_creation"
              },
              {
                "args": [
                  "self",
                  "qapp"
                ],
                "docstring": "REAL BEHAVIOR TEST: Test DynamicListContainer can be imported and created.",
                "name": "test_dynamic_list_container_import_and_creation"
              }
            ]
          },
          "tests/unit/test_cleanup.py": {
            "classes": [
              {
                "docstring": "Manages test data cleanup and isolation.",
                "methods": [
                  "__init__",
                  "cleanup_test_users",
                  "_find_test_users",
                  "_cleanup_single_user",
                  "_create_user_backup",
                  "reset_test_environment",
                  "_cleanup_old_test_logs",
                  "_cleanup_temp_files",
                  "validate_test_data_integrity",
                  "_validate_user_data",
                  "_find_orphaned_files"
                ],
                "name": "CleanupManager"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Command-line interface for test cleanup.",
                "name": "main"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Initialize the cleanup manager.",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "user_ids"
                ],
                "docstring": "Clean up test user data.\n        \n        Args:\n            user_ids: List of user IDs to clean up. If None, cleans up all test users.\n            \n        Returns:\n            bool: True if cleanup was successful, False otherwise.",
                "name": "cleanup_test_users"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Find all test users in the user directory.",
                "name": "_find_test_users"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Clean up a single test user.",
                "name": "_cleanup_single_user"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "user_path"
                ],
                "docstring": "Create a backup of user data before cleanup.",
                "name": "_create_user_backup"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Reset the entire test environment.",
                "name": "reset_test_environment"
              },
              {
                "args": [
                  "self",
                  "keep_days"
                ],
                "docstring": "Clean up old test log files.",
                "name": "_cleanup_old_test_logs"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Clean up temporary test files.",
                "name": "_cleanup_temp_files"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Validate the integrity of test data.",
                "name": "validate_test_data_integrity"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "user_path"
                ],
                "docstring": "Validate a single user's data integrity.",
                "name": "_validate_user_data"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Find orphaned files in the user directory.",
                "name": "_find_orphaned_files"
              }
            ]
          },
          "tests/unit/test_config.py": {
            "classes": [
              {
                "docstring": "Test configuration validation functions.",
                "methods": [
                  "test_validate_core_paths_success",
                  "test_validate_core_paths_missing_directory",
                  "test_validate_ai_configuration_success",
                  "test_validate_ai_configuration_missing_url",
                  "test_validate_communication_channels_success",
                  "test_validate_communication_channels_no_tokens",
                  "test_validate_logging_configuration_success",
                  "test_validate_scheduler_configuration_success",
                  "test_validate_file_organization_settings_success",
                  "test_validate_environment_variables_success",
                  "test_validate_all_configuration_success",
                  "test_validate_and_raise_if_invalid_success",
                  "test_validate_and_raise_if_invalid_failure"
                ],
                "name": "TestConfigValidation"
              },
              {
                "docstring": "Test configuration constants.",
                "methods": [
                  "test_base_data_dir_default",
                  "test_user_info_dir_path_default",
                  "test_default_messages_dir_path_default",
                  "test_environment_override"
                ],
                "name": "TestConfigConstants"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "test_path_factory"
                ],
                "docstring": "Test successful core path validation.",
                "name": "test_validate_core_paths_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test core path validation with missing directory.",
                "name": "test_validate_core_paths_missing_directory"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test successful AI configuration validation.",
                "name": "test_validate_ai_configuration_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test AI configuration validation with missing URL.",
                "name": "test_validate_ai_configuration_missing_url"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test successful communication channels validation.",
                "name": "test_validate_communication_channels_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test communication channels validation with no tokens.",
                "name": "test_validate_communication_channels_no_tokens"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test successful logging configuration validation.",
                "name": "test_validate_logging_configuration_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test successful scheduler configuration validation.",
                "name": "test_validate_scheduler_configuration_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test successful file organization settings validation.",
                "name": "test_validate_file_organization_settings_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test successful environment variables validation.",
                "name": "test_validate_environment_variables_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "test_path_factory"
                ],
                "docstring": "Test comprehensive configuration validation.",
                "name": "test_validate_all_configuration_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "test_path_factory"
                ],
                "docstring": "Test successful validation with no exceptions.",
                "name": "test_validate_and_raise_if_invalid_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test validation failure raises ConfigurationError.",
                "name": "test_validate_and_raise_if_invalid_failure"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test BASE_DATA_DIR default value.",
                "name": "test_base_data_dir_default"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test USER_INFO_DIR_PATH default value.",
                "name": "test_user_info_dir_path_default"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test DEFAULT_MESSAGES_DIR_PATH default value.",
                "name": "test_default_messages_dir_path_default"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test environment variable override.",
                "name": "test_environment_override"
              }
            ]
          },
          "tests/unit/test_error_handling.py": {
            "classes": [
              {
                "docstring": "Test custom exception classes.",
                "methods": [
                  "test_mhm_error_basic",
                  "test_mhm_error_with_details",
                  "test_data_error",
                  "test_file_operation_error",
                  "test_config_error",
                  "test_validation_error"
                ],
                "name": "TestCustomExceptions"
              },
              {
                "docstring": "Test the handle_errors decorator.",
                "methods": [
                  "test_error_handler_success",
                  "test_error_handler_exception",
                  "test_error_handler_custom_return",
                  "test_error_handler_logs_error"
                ],
                "name": "TestErrorHandlerDecorator"
              },
              {
                "docstring": "Test the handle_errors decorator.",
                "methods": [
                  "test_handle_errors_success",
                  "test_handle_errors_exception",
                  "test_handle_errors_custom_return",
                  "test_handle_errors_specific_exception",
                  "test_handle_errors_logs_error"
                ],
                "name": "TestHandleErrorsDecorator"
              },
              {
                "docstring": "Test specific error handling functions.",
                "methods": [
                  "test_handle_file_error",
                  "test_handle_configuration_error"
                ],
                "name": "TestErrorHandlingFunctions"
              },
              {
                "docstring": "Test error handling integration scenarios.",
                "methods": [
                  "test_error_handling_in_function_chain",
                  "test_error_handling_with_recovery",
                  "test_error_handling_different_exception_types"
                ],
                "name": "TestErrorHandlingIntegration"
              },
              {
                "docstring": "Test error handling edge cases.",
                "methods": [
                  "test_error_handler_with_args_kwargs",
                  "test_handle_errors_with_args_kwargs",
                  "test_error_handler_nested_exceptions",
                  "test_handle_errors_with_logging_disabled"
                ],
                "name": "TestErrorHandlingEdgeCases"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Test basic MHMError creation.",
                "name": "test_mhm_error_basic"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test MHMError with custom details.",
                "name": "test_mhm_error_with_details"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test DataError exception.",
                "name": "test_data_error"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test FileOperationError exception.",
                "name": "test_file_operation_error"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test ConfigError exception.",
                "name": "test_config_error"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test ValidationError exception.",
                "name": "test_validation_error"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test error_handler with successful function.",
                "name": "test_error_handler_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test error_handler with exception.",
                "name": "test_error_handler_exception"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test error_handler with custom return value.",
                "name": "test_error_handler_custom_return"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test error_handler logs errors.",
                "name": "test_error_handler_logs_error"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test handle_errors with successful function.",
                "name": "test_handle_errors_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test handle_errors with exception.",
                "name": "test_handle_errors_exception"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test handle_errors with custom return value.",
                "name": "test_handle_errors_custom_return"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test handle_errors with specific exception handling.",
                "name": "test_handle_errors_specific_exception"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test handle_errors logs errors.",
                "name": "test_handle_errors_logs_error"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test handle_file_error function.",
                "name": "test_handle_file_error"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test handle_configuration_error function.",
                "name": "test_handle_configuration_error"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test error handling in a chain of functions.",
                "name": "test_error_handling_in_function_chain"
              },
              {
                "args": [
                  "self",
                  "test_path_factory"
                ],
                "docstring": "Test error handling with recovery mechanisms and real side effects.",
                "name": "test_error_handling_with_recovery"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test error handling with different exception types and side effects.",
                "name": "test_error_handling_different_exception_types"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test error_handler with function arguments.",
                "name": "test_error_handler_with_args_kwargs"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test handle_errors with function arguments.",
                "name": "test_handle_errors_with_args_kwargs"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test error_handler with nested exceptions.",
                "name": "test_error_handler_nested_exceptions"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test handle_errors when logging is disabled.",
                "name": "test_handle_errors_with_logging_disabled"
              },
              {
                "args": [],
                "docstring": "Test Function.",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [
                  "exception_type"
                ],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [
                  "arg1",
                  "arg2",
                  "kwarg1"
                ],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [
                  "arg1",
                  "arg2",
                  "kwarg1"
                ],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "outer_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "inner_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "outer_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "inner_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "corrupt_data_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "recover_data_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "backup_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "cleanup_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "state_validation_function"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_function"
              }
            ]
          },
          "tests/unit/test_file_operations.py": {
            "classes": [
              {
                "docstring": "Test file operations functions.",
                "methods": [
                  "test_load_json_data_success",
                  "test_load_json_data_file_not_found",
                  "test_load_json_data_corrupted_json",
                  "test_load_json_data_empty_file",
                  "test_save_json_data_success",
                  "test_save_json_data_create_directory",
                  "test_save_json_data_permission_error",
                  "test_determine_file_path_user_file",
                  "test_determine_file_path_default_messages",
                  "test_verify_file_access_success",
                  "test_verify_file_access_missing_file",
                  "test_verify_file_access_permission_error",
                  "test_get_user_file_path_success",
                  "test_ensure_user_directory_success",
                  "test_ensure_user_directory_already_exists"
                ],
                "name": "TestFileOperations"
              },
              {
                "docstring": "Test edge cases and error conditions.",
                "methods": [
                  "test_load_json_data_unicode_content",
                  "test_save_json_data_complex_objects",
                  "test_determine_file_path_invalid_user_id",
                  "test_determine_file_path_invalid_file_type",
                  "test_file_operations_lifecycle"
                ],
                "name": "TestFileOperationsEdgeCases"
              },
              {
                "docstring": "Test file operations performance and large data handling.",
                "methods": [
                  "test_save_large_json_data",
                  "test_load_large_json_data"
                ],
                "name": "TestFileOperationsPerformance"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "temp_file"
                ],
                "docstring": "Test loading JSON data successfully.",
                "name": "test_load_json_data_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test loading JSON data from non-existent file.",
                "name": "test_load_json_data_file_not_found"
              },
              {
                "args": [
                  "self",
                  "temp_file"
                ],
                "docstring": "Test loading corrupted JSON data.",
                "name": "test_load_json_data_corrupted_json"
              },
              {
                "args": [
                  "self",
                  "temp_file"
                ],
                "docstring": "Test loading from empty file.",
                "name": "test_load_json_data_empty_file"
              },
              {
                "args": [
                  "self",
                  "temp_file"
                ],
                "docstring": "Test saving JSON data successfully.",
                "name": "test_save_json_data_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test saving JSON data with directory creation.",
                "name": "test_save_json_data_create_directory"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test saving JSON data with permission error.",
                "name": "test_save_json_data_permission_error"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test determining file path for user file.",
                "name": "test_determine_file_path_user_file"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test determining file path for default messages.",
                "name": "test_determine_file_path_default_messages"
              },
              {
                "args": [
                  "self",
                  "temp_file"
                ],
                "docstring": "Test file access verification for accessible file.",
                "name": "test_verify_file_access_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test file access verification for missing file.",
                "name": "test_verify_file_access_missing_file"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test file access verification with permission error.",
                "name": "test_verify_file_access_permission_error"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test getting user file path successfully.",
                "name": "test_get_user_file_path_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test ensuring user directory exists.",
                "name": "test_ensure_user_directory_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test ensuring user directory that already exists.",
                "name": "test_ensure_user_directory_already_exists"
              },
              {
                "args": [
                  "self",
                  "temp_file"
                ],
                "docstring": "Test loading JSON data with unicode content.",
                "name": "test_load_json_data_unicode_content"
              },
              {
                "args": [
                  "self",
                  "temp_file"
                ],
                "docstring": "Test saving JSON data with complex objects.",
                "name": "test_save_json_data_complex_objects"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test determining file path with invalid user ID.",
                "name": "test_determine_file_path_invalid_user_id"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test determining file path with invalid file type.",
                "name": "test_determine_file_path_invalid_file_type"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test complete file operations lifecycle using centralized utilities.",
                "name": "test_file_operations_lifecycle"
              },
              {
                "args": [
                  "self",
                  "temp_file"
                ],
                "docstring": "Test saving large JSON data with performance verification.",
                "name": "test_save_large_json_data"
              },
              {
                "args": [
                  "self",
                  "temp_file"
                ],
                "docstring": "Test loading large JSON data.",
                "name": "test_load_large_json_data"
              }
            ]
          },
          "tests/unit/test_logging_components.py": {
            "classes": [],
            "functions": [
              {
                "args": [
                  "tmp_path",
                  "monkeypatch"
                ],
                "docstring": "",
                "name": "test_component_logger_propagate_and_handlers"
              },
              {
                "args": [
                  "tmp_path",
                  "monkeypatch"
                ],
                "docstring": "",
                "name": "test_errors_routed_to_tests_logs_in_verbose_mode"
              }
            ]
          },
          "tests/unit/test_no_prints_policy.py": {
            "classes": [],
            "functions": [
              {
                "args": [],
                "docstring": "Policy: tests should not use print(); prefer logging or assertions.\n\n    Allowed: files containing '@pytest.mark.debug' marker.",
                "name": "test_no_print_calls_in_tests_except_debug_marked"
              }
            ]
          },
          "tests/unit/test_recurring_tasks.py": {
            "classes": [
              {
                "docstring": "Test recurring tasks functionality.",
                "methods": [
                  "temp_user_dir",
                  "test_create_recurring_task",
                  "test_complete_recurring_task_creates_next_instance",
                  "test_calculate_next_due_date_daily",
                  "test_calculate_next_due_date_weekly",
                  "test_calculate_next_due_date_monthly",
                  "test_calculate_next_due_date_yearly",
                  "test_calculate_next_due_date_invalid_pattern",
                  "test_non_recurring_task_completion"
                ],
                "name": "TestRecurringTasks"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_path_factory"
                ],
                "docstring": "Provide a per-test user directory under tests/data/tmp.",
                "name": "temp_user_dir"
              },
              {
                "args": [
                  "self",
                  "mock_get_user_data_dir",
                  "temp_user_dir"
                ],
                "docstring": "Test creating a recurring task.",
                "name": "test_create_recurring_task"
              },
              {
                "args": [
                  "self",
                  "mock_get_user_data_dir",
                  "temp_user_dir"
                ],
                "docstring": "Test that completing a recurring task creates the next instance.",
                "name": "test_complete_recurring_task_creates_next_instance"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test calculating next due date for daily recurrence.",
                "name": "test_calculate_next_due_date_daily"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test calculating next due date for weekly recurrence.",
                "name": "test_calculate_next_due_date_weekly"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test calculating next due date for monthly recurrence.",
                "name": "test_calculate_next_due_date_monthly"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test calculating next due date for yearly recurrence.",
                "name": "test_calculate_next_due_date_yearly"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test calculating next due date with invalid pattern.",
                "name": "test_calculate_next_due_date_invalid_pattern"
              },
              {
                "args": [
                  "self",
                  "mock_get_user_data_dir",
                  "temp_user_dir"
                ],
                "docstring": "Test that completing a non-recurring task doesn't create a new instance.",
                "name": "test_non_recurring_task_completion"
              }
            ]
          },
          "tests/unit/test_schedule_management.py": {
            "classes": [
              {
                "docstring": "Tests for time validation and conversion helpers.",
                "methods": [
                  "test_validate_and_format_time",
                  "test_time_conversion_helpers"
                ],
                "name": "TestPeriodValidation"
              },
              {
                "docstring": "Tests for schedule period lifecycle operations.",
                "methods": [
                  "test_schedule_period_lifecycle"
                ],
                "name": "TestScheduleManagement"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Ensure various time formats are normalized to HH:MM.",
                "name": "test_validate_and_format_time"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Verify 12h/24h conversion helpers.",
                "name": "test_time_conversion_helpers"
              },
              {
                "args": [
                  "self",
                  "mock_user_data",
                  "mock_config"
                ],
                "docstring": "Add, edit, deactivate, and delete a schedule period.",
                "name": "test_schedule_period_lifecycle"
              }
            ]
          },
          "tests/unit/test_user_data_loader_idempotency.py": {
            "classes": [],
            "functions": [
              {
                "args": [],
                "docstring": "",
                "name": "test_loader_registry_identity_and_idempotency"
              }
            ]
          },
          "tests/unit/test_user_data_loader_order_insensitivity.py": {
            "classes": [],
            "functions": [
              {
                "args": [
                  "first_module",
                  "second_module"
                ],
                "docstring": "",
                "name": "_reload_in_order"
              },
              {
                "args": [],
                "docstring": "",
                "name": "test_loader_registry_shared_and_complete_regardless_of_import_order"
              }
            ]
          },
          "tests/unit/test_user_management.py": {
            "classes": [
              {
                "docstring": "Test user management functions.",
                "methods": [
                  "test_get_all_user_ids_empty",
                  "test_get_all_user_ids_with_users",
                  "test_get_user_preferences_success",
                  "test_get_user_preferences_nonexistent_user",
                  "test_get_user_context_success",
                  "test_get_user_context_nonexistent_user",
                  "test_hybrid_get_user_data_success",
                  "test_hybrid_get_user_data_nonexistent_user",
                  "test_save_user_data_success",
                  "test_create_user_files_success",
                  "test_update_user_preferences_success",
                  "test_get_user_data_account_with_chat_id",
                  "test_get_user_data_account_nonexistent_chat_id",
                  "test_get_user_data_account_with_discord_id",
                  "test_get_user_data_account_nonexistent_discord_id",
                  "test_get_user_data_account_with_email",
                  "test_get_user_data_account_nonexistent_email"
                ],
                "name": "TestUserManagement"
              },
              {
                "docstring": "Test edge cases and error conditions.",
                "methods": [
                  "test_get_user_preferences_corrupted_file",
                  "test_save_user_preferences_invalid_user_id",
                  "test_update_user_preferences_nonexistent_user",
                  "test_user_lifecycle",
                  "test_get_user_data_single_type",
                  "test_get_user_data_multiple_types",
                  "test_get_user_data_invalid_type",
                  "test_get_user_data_nonexistent_user"
                ],
                "name": "TestUserManagementEdgeCases"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test getting user IDs when no users exist.",
                "name": "test_get_all_user_ids_empty"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_user_data",
                  "mock_config"
                ],
                "docstring": "Test getting user IDs when users exist.",
                "name": "test_get_all_user_ids_with_users"
              },
              {
                "args": [
                  "self",
                  "mock_user_data",
                  "mock_config"
                ],
                "docstring": "Test getting user preferences successfully.",
                "name": "test_get_user_preferences_success"
              },
              {
                "args": [
                  "self",
                  "mock_config"
                ],
                "docstring": "Test getting preferences for non-existent user.",
                "name": "test_get_user_preferences_nonexistent_user"
              },
              {
                "args": [
                  "self",
                  "mock_user_data",
                  "mock_config"
                ],
                "docstring": "Test getting user context successfully.",
                "name": "test_get_user_context_success"
              },
              {
                "args": [
                  "self",
                  "mock_config"
                ],
                "docstring": "Test getting context for non-existent user.",
                "name": "test_get_user_context_nonexistent_user"
              },
              {
                "args": [
                  "self",
                  "mock_user_data"
                ],
                "docstring": "Test loading user data successfully using new hybrid API.",
                "name": "test_hybrid_get_user_data_success"
              },
              {
                "args": [
                  "self",
                  "mock_config"
                ],
                "docstring": "Test loading non-existent user data using new hybrid API.",
                "name": "test_hybrid_get_user_data_nonexistent_user"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test saving user data successfully using centralized utilities.",
                "name": "test_save_user_data_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test creating user files successfully.",
                "name": "test_create_user_files_success"
              },
              {
                "args": [
                  "self",
                  "mock_user_data",
                  "mock_config"
                ],
                "docstring": "Test updating user preferences successfully.",
                "name": "test_update_user_preferences_success"
              },
              {
                "args": [
                  "self",
                  "mock_user_data",
                  "mock_config"
                ],
                "docstring": "Test getting user account with chat_id field.",
                "name": "test_get_user_data_account_with_chat_id"
              },
              {
                "args": [
                  "self",
                  "mock_config"
                ],
                "docstring": "Test getting user account for non-existent user.",
                "name": "test_get_user_data_account_nonexistent_chat_id"
              },
              {
                "args": [
                  "self",
                  "mock_user_data",
                  "mock_config"
                ],
                "docstring": "Test getting user account with discord_user_id field.",
                "name": "test_get_user_data_account_with_discord_id"
              },
              {
                "args": [
                  "self",
                  "mock_config"
                ],
                "docstring": "Test getting user account for non-existent user.",
                "name": "test_get_user_data_account_nonexistent_discord_id"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test getting user account with email successfully.",
                "name": "test_get_user_data_account_with_email"
              },
              {
                "args": [
                  "self",
                  "mock_config"
                ],
                "docstring": "Test getting user account for non-existent user.",
                "name": "test_get_user_data_account_nonexistent_email"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test getting preferences with corrupted JSON file.",
                "name": "test_get_user_preferences_corrupted_file"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test saving preferences with invalid user ID.",
                "name": "test_save_user_preferences_invalid_user_id"
              },
              {
                "args": [
                  "self",
                  "mock_config"
                ],
                "docstring": "Test updating preferences for non-existent user.",
                "name": "test_update_user_preferences_nonexistent_user"
              },
              {
                "args": [
                  "self",
                  "test_data_dir",
                  "mock_config"
                ],
                "docstring": "Test complete user lifecycle with real side effects and system state verification.",
                "name": "test_user_lifecycle"
              },
              {
                "args": [
                  "self",
                  "mock_user_data",
                  "mock_config"
                ],
                "docstring": "Test getting single data type using hybrid API.",
                "name": "test_get_user_data_single_type"
              },
              {
                "args": [
                  "self",
                  "mock_user_data",
                  "mock_config"
                ],
                "docstring": "Test getting multiple data types using hybrid API.",
                "name": "test_get_user_data_multiple_types"
              },
              {
                "args": [
                  "self",
                  "mock_user_data",
                  "mock_config"
                ],
                "docstring": "Test getting invalid data type using hybrid API.",
                "name": "test_get_user_data_invalid_type"
              },
              {
                "args": [
                  "self",
                  "mock_config"
                ],
                "docstring": "Test getting data for nonexistent user using hybrid API.",
                "name": "test_get_user_data_nonexistent_user"
              }
            ]
          },
          "tests/unit/test_validation.py": {
            "classes": [
              {
                "docstring": "Test basic validation functions with real behavior verification.",
                "methods": [
                  "test_is_valid_email_with_valid_emails",
                  "test_is_valid_email_with_invalid_emails",
                  "test_is_valid_phone_with_valid_phones",
                  "test_is_valid_phone_with_invalid_phones",
                  "test_validate_time_format_with_valid_times",
                  "test_validate_time_format_with_invalid_times",
                  "test_title_case_with_various_inputs"
                ],
                "name": "TestPrimitiveValidators"
              },
              {
                "docstring": "Test user update validation with real behavior verification.",
                "methods": [
                  "test_validate_user_update_account_success",
                  "test_validate_user_update_account_missing_username",
                  "test_validate_user_update_account_invalid_status",
                  "test_validate_user_update_account_invalid_email",
                  "test_validate_user_update_preferences_success",
                  "test_validate_user_update_preferences_invalid_categories",
                  "test_validate_user_update_preferences_invalid_channel_type",
                  "test_validate_user_update_context_success",
                  "test_validate_user_update_context_invalid_date",
                  "test_validate_user_update_context_invalid_custom_fields",
                  "test_validate_user_update_schedules_success",
                  "test_validate_user_update_schedules_invalid_time_format",
                  "test_validate_user_update_schedules_invalid_time_order",
                  "test_validate_user_update_schedules_invalid_days"
                ],
                "name": "TestUserUpdateValidation"
              },
              {
                "docstring": "Test schedule periods validation with real behavior verification.",
                "methods": [
                  "test_validate_schedule_periods_success",
                  "test_validate_schedule_periods_empty",
                  "test_validate_schedule_periods_no_active_periods",
                  "test_validate_schedule_periods_all_period_excluded",
                  "test_validate_schedule_periods_missing_times",
                  "test_validate_schedule_periods_invalid_time_format",
                  "test_validate_schedule_periods_invalid_time_order",
                  "test_validate_schedule_periods_invalid_days_type",
                  "test_validate_schedule_periods_empty_days",
                  "test_validate_schedule_periods_invalid_days"
                ],
                "name": "TestSchedulePeriodsValidation"
              },
              {
                "docstring": "Test new user data validation with real behavior verification.",
                "methods": [
                  "test_validate_new_user_data_success",
                  "test_validate_new_user_data_missing_user_id",
                  "test_validate_new_user_data_empty_updates",
                  "test_validate_new_user_data_user_already_exists",
                  "test_validate_new_user_data_missing_account",
                  "test_validate_new_user_data_missing_username",
                  "test_validate_new_user_data_missing_channel",
                  "test_validate_new_user_data_invalid_channel_type",
                  "test_validate_new_user_data_invalid_email",
                  "test_validate_new_user_data_invalid_account_status"
                ],
                "name": "TestNewUserDataValidation"
              },
              {
                "docstring": "Test personalization data validation with real behavior verification.",
                "methods": [
                  "test_validate_personalization_data_success",
                  "test_validate_personalization_data_empty",
                  "test_validate_personalization_data_invalid_string_fields",
                  "test_validate_personalization_data_invalid_list_fields",
                  "test_validate_personalization_data_invalid_custom_fields_type",
                  "test_validate_personalization_data_invalid_custom_field_lists",
                  "test_validate_personalization_data_invalid_date_format",
                  "test_validate_personalization_data_invalid_loved_ones_type",
                  "test_validate_personalization_data_invalid_loved_one_item"
                ],
                "name": "TestPersonalizationDataValidation"
              },
              {
                "docstring": "Test validation functions working together with real behavior verification.",
                "methods": [
                  "test_validation_functions_work_together",
                  "test_validation_error_propagation",
                  "test_validation_with_real_file_operations"
                ],
                "name": "TestValidationIntegration"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Test email validation with various valid email formats.",
                "name": "test_is_valid_email_with_valid_emails"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test email validation with various invalid email formats.",
                "name": "test_is_valid_email_with_invalid_emails"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test phone validation with various valid phone formats.",
                "name": "test_is_valid_phone_with_valid_phones"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test phone validation with various invalid phone formats.",
                "name": "test_is_valid_phone_with_invalid_phones"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test time format validation with valid 24-hour times.",
                "name": "test_validate_time_format_with_valid_times"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test time format validation with invalid time formats.",
                "name": "test_validate_time_format_with_invalid_times"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test title case conversion with various text inputs.",
                "name": "test_title_case_with_various_inputs"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test successful account update validation.",
                "name": "test_validate_user_update_account_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test account update validation with missing internal_username.",
                "name": "test_validate_user_update_account_missing_username"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test account update validation with invalid account status.",
                "name": "test_validate_user_update_account_invalid_status"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test account update validation with invalid email format.",
                "name": "test_validate_user_update_account_invalid_email"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test successful preferences update validation.",
                "name": "test_validate_user_update_preferences_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test preferences update validation with invalid categories.",
                "name": "test_validate_user_update_preferences_invalid_categories"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test preferences update validation with invalid channel type.",
                "name": "test_validate_user_update_preferences_invalid_channel_type"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test successful context update validation.",
                "name": "test_validate_user_update_context_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test context update validation with invalid date format.",
                "name": "test_validate_user_update_context_invalid_date"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test context update validation with invalid custom_fields type.",
                "name": "test_validate_user_update_context_invalid_custom_fields"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test successful schedules update validation.",
                "name": "test_validate_user_update_schedules_success"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test schedules update validation with invalid time format.",
                "name": "test_validate_user_update_schedules_invalid_time_format"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test schedules update validation with invalid time ordering.",
                "name": "test_validate_user_update_schedules_invalid_time_order"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test schedules update validation with invalid days.",
                "name": "test_validate_user_update_schedules_invalid_days"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test successful schedule periods validation.",
                "name": "test_validate_schedule_periods_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test schedule periods validation with empty periods.",
                "name": "test_validate_schedule_periods_empty"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test schedule periods validation with no active periods.",
                "name": "test_validate_schedule_periods_no_active_periods"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that ALL period is excluded from active period requirement.",
                "name": "test_validate_schedule_periods_all_period_excluded"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test schedule periods validation with missing start/end times.",
                "name": "test_validate_schedule_periods_missing_times"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test schedule periods validation with invalid time format.",
                "name": "test_validate_schedule_periods_invalid_time_format"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test schedule periods validation with invalid time ordering.",
                "name": "test_validate_schedule_periods_invalid_time_order"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test schedule periods validation with invalid days type.",
                "name": "test_validate_schedule_periods_invalid_days_type"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test schedule periods validation with empty days list.",
                "name": "test_validate_schedule_periods_empty_days"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test schedule periods validation with invalid day names.",
                "name": "test_validate_schedule_periods_invalid_days"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test successful new user data validation.",
                "name": "test_validate_new_user_data_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test new user data validation with missing user_id.",
                "name": "test_validate_new_user_data_missing_user_id"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test new user data validation with empty updates.",
                "name": "test_validate_new_user_data_empty_updates"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test new user data validation when user already exists.",
                "name": "test_validate_new_user_data_user_already_exists"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test new user data validation with missing account data.",
                "name": "test_validate_new_user_data_missing_account"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test new user data validation with missing internal_username.",
                "name": "test_validate_new_user_data_missing_username"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test new user data validation with missing channel.",
                "name": "test_validate_new_user_data_missing_channel"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test new user data validation with invalid channel type.",
                "name": "test_validate_new_user_data_invalid_channel_type"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test new user data validation with invalid email format.",
                "name": "test_validate_new_user_data_invalid_email"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test new user data validation with invalid account status.",
                "name": "test_validate_new_user_data_invalid_account_status"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test successful personalization data validation.",
                "name": "test_validate_personalization_data_success"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test personalization data validation with empty data.",
                "name": "test_validate_personalization_data_empty"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test personalization data validation with invalid string field types.",
                "name": "test_validate_personalization_data_invalid_string_fields"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test personalization data validation with invalid list field types.",
                "name": "test_validate_personalization_data_invalid_list_fields"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test personalization data validation with invalid custom_fields type.",
                "name": "test_validate_personalization_data_invalid_custom_fields_type"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test personalization data validation with invalid custom field list types.",
                "name": "test_validate_personalization_data_invalid_custom_field_lists"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test personalization data validation with invalid date format.",
                "name": "test_validate_personalization_data_invalid_date_format"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test personalization data validation with invalid loved_ones type.",
                "name": "test_validate_personalization_data_invalid_loved_ones_type"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test personalization data validation with invalid loved_one item type.",
                "name": "test_validate_personalization_data_invalid_loved_one_item"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test that validation functions work together correctly.",
                "name": "test_validation_functions_work_together"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Test that validation errors propagate correctly through the system.",
                "name": "test_validation_error_propagation"
              },
              {
                "args": [
                  "self",
                  "test_data_dir"
                ],
                "docstring": "Test validation with real file system operations.",
                "name": "test_validation_with_real_file_operations"
              }
            ]
          },
          "ui/dialogs/account_creator_dialog.py": {
            "classes": [
              {
                "docstring": "Account creation dialog using existing UI files.",
                "methods": [
                  "__init__",
                  "setup_dialog",
                  "load_widgets",
                  "load_category_widget",
                  "load_message_service_widget",
                  "load_task_management_widget",
                  "load_checkin_settings_widget",
                  "setup_feature_group_boxes",
                  "setup_profile_button",
                  "center_dialog",
                  "accept",
                  "close_dialog",
                  "setup_connections",
                  "keyPressEvent",
                  "on_username_changed",
                  "on_preferred_name_changed",
                  "on_feature_toggled",
                  "update_tab_visibility",
                  "open_personalization_dialog",
                  "update_profile_button_state",
                  "validate_input",
                  "_validate_and_accept__collect_basic_user_info",
                  "_validate_and_accept__collect_feature_settings",
                  "_validate_and_accept__collect_channel_data",
                  "_validate_and_accept__collect_widget_data",
                  "_validate_and_accept__build_account_data",
                  "_validate_and_accept__show_error_dialog",
                  "_validate_and_accept__show_success_dialog",
                  "validate_and_accept",
                  "_validate_and_accept__input_errors",
                  "_validate_and_accept__collect_data",
                  "_validate_and_accept__create_account",
                  "_validate_and_accept__handle_success",
                  "create_account",
                  "_validate_and_accept__build_user_preferences",
                  "_determine_chat_id",
                  "_build_features_dict",
                  "_validate_and_accept__add_feature_settings",
                  "_validate_and_accept__setup_task_tags",
                  "_validate_and_accept__update_user_index",
                  "_validate_and_accept__schedule_new_user",
                  "get_account_data",
                  "validate_account_data"
                ],
                "name": "AccountCreatorDialog"
              }
            ],
            "functions": [
              {
                "args": [
                  "parent",
                  "communication_manager"
                ],
                "docstring": "Create and show the account creation dialog.",
                "name": "create_account_dialog"
              },
              {
                "args": [
                  "self",
                  "parent",
                  "communication_manager"
                ],
                "docstring": "Initialize the account creator dialog.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Set up the dialog properties.",
                "name": "setup_dialog"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load all the widget UI files into the placeholder widgets.",
                "name": "load_widgets"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load the category selection widget.",
                "name": "load_category_widget"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load the message service selection widget.",
                "name": "load_message_service_widget"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load the task management widget.",
                "name": "load_task_management_widget"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load the check-in settings widget.",
                "name": "load_checkin_settings_widget"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup group boxes for task management and check-ins (no longer collapsible in tab structure).",
                "name": "setup_feature_group_boxes"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup the profile button.",
                "name": "setup_profile_button"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Center the dialog on the parent window.",
                "name": "center_dialog"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Override accept to prevent automatic dialog closing.",
                "name": "accept"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Close the dialog properly.",
                "name": "close_dialog"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup signal connections.",
                "name": "setup_connections"
              },
              {
                "args": [
                  "self",
                  "event"
                ],
                "docstring": "Handle key press events for the dialog.",
                "name": "keyPressEvent"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Handle username change.",
                "name": "on_username_changed"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Handle preferred name change.",
                "name": "on_preferred_name_changed"
              },
              {
                "args": [
                  "self",
                  "checked"
                ],
                "docstring": "Handle feature enablement checkbox toggles.",
                "name": "on_feature_toggled"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Update tab visibility based on feature enablement.",
                "name": "update_tab_visibility"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Open the personalization dialog.",
                "name": "open_personalization_dialog"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Update the profile button to show if profile has been configured.",
                "name": "update_profile_button_state"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Validate the input and return (is_valid, error_message).",
                "name": "validate_input"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Collect basic user information from UI fields.",
                "name": "_validate_and_accept__collect_basic_user_info"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Collect feature enablement states from UI.",
                "name": "_validate_and_accept__collect_feature_settings"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Collect channel and contact information from widgets.",
                "name": "_validate_and_accept__collect_channel_data"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Collect data from all widgets.",
                "name": "_validate_and_accept__collect_widget_data"
              },
              {
                "args": [
                  "self",
                  "username",
                  "preferred_name",
                  "timezone",
                  "channel_data",
                  "contact_info",
                  "categories",
                  "task_settings",
                  "checkin_settings",
                  "messages_enabled",
                  "tasks_enabled",
                  "checkins_enabled"
                ],
                "docstring": "Build the complete account data structure.",
                "name": "_validate_and_accept__build_account_data"
              },
              {
                "args": [
                  "self",
                  "title",
                  "message"
                ],
                "docstring": "Show an error dialog with the given title and message.",
                "name": "_validate_and_accept__show_error_dialog"
              },
              {
                "args": [
                  "self",
                  "username"
                ],
                "docstring": "Show a success dialog for account creation.",
                "name": "_validate_and_accept__show_success_dialog"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Validate input and accept the dialog.",
                "name": "validate_and_accept"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Validate input and show error dialog if validation fails.",
                "name": "_validate_and_accept__input_errors"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Collect all data from UI and build account data structure.",
                "name": "_validate_and_accept__collect_data"
              },
              {
                "args": [
                  "self",
                  "account_data"
                ],
                "docstring": "Create the account and set up all necessary components.",
                "name": "_validate_and_accept__create_account"
              },
              {
                "args": [
                  "self",
                  "username"
                ],
                "docstring": "Handle successful account creation.",
                "name": "_validate_and_accept__handle_success"
              },
              {
                "args": [
                  "self",
                  "account_data"
                ],
                "docstring": "Create the user account.",
                "name": "create_account"
              },
              {
                "args": [
                  "self",
                  "account_data"
                ],
                "docstring": "Build user preferences data structure.",
                "name": "_validate_and_accept__build_user_preferences"
              },
              {
                "args": [
                  "self",
                  "channel_type",
                  "email",
                  "phone",
                  "discord_user_id"
                ],
                "docstring": "Determine chat_id based on channel type.",
                "name": "_determine_chat_id"
              },
              {
                "args": [
                  "self",
                  "features_enabled"
                ],
                "docstring": "Build features dictionary in the correct format.",
                "name": "_build_features_dict"
              },
              {
                "args": [
                  "self",
                  "user_preferences",
                  "account_data",
                  "features_enabled"
                ],
                "docstring": "Add feature-specific settings to user preferences.",
                "name": "_validate_and_accept__add_feature_settings"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "account_data"
                ],
                "docstring": "Set up task tags for the new user.",
                "name": "_validate_and_accept__setup_task_tags"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Update user index for the new user.",
                "name": "_validate_and_accept__update_user_index"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Schedule the new user in the scheduler.",
                "name": "_validate_and_accept__schedule_new_user"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the account data from the form.",
                "name": "get_account_data"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Validate the account data.",
                "name": "validate_account_data"
              },
              {
                "args": [
                  "data"
                ],
                "docstring": "",
                "name": "on_personalization_save"
              }
            ]
          },
          "ui/dialogs/admin_panel.py": {
            "classes": [
              {
                "docstring": "Dialog for admin panel functionality.",
                "methods": [
                  "__init__",
                  "setup_ui",
                  "get_admin_data",
                  "set_admin_data"
                ],
                "name": "AdminPanelDialog"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent"
                ],
                "docstring": "Initialize the AdminPanelDialog.\n        \n        Args:\n            parent: Parent widget for the dialog",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup the UI components.",
                "name": "setup_ui"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the admin panel data.\n        \n        Returns:\n            dict: Admin panel data (currently returns empty dict as placeholder)",
                "name": "get_admin_data"
              },
              {
                "args": [
                  "self",
                  "data"
                ],
                "docstring": "Set the admin panel data.\n        \n        Args:\n            data: Admin panel data to set (currently not implemented)",
                "name": "set_admin_data"
              }
            ]
          },
          "ui/dialogs/category_management_dialog.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "__init__",
                  "load_user_category_data",
                  "on_enable_messages_toggled",
                  "save_category_settings",
                  "get_selected_categories",
                  "set_selected_categories"
                ],
                "name": "CategoryManagementDialog"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent",
                  "user_id"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load user's current category settings",
                "name": "load_user_category_data"
              },
              {
                "args": [
                  "self",
                  "checked"
                ],
                "docstring": "Handle enable automated messages checkbox toggle.",
                "name": "on_enable_messages_toggled"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Save the selected categories back to user preferences",
                "name": "save_category_settings"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_selected_categories"
              },
              {
                "args": [
                  "self",
                  "categories"
                ],
                "docstring": "",
                "name": "set_selected_categories"
              }
            ]
          },
          "ui/dialogs/channel_management_dialog.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "__init__",
                  "save_channel_settings",
                  "get_selected_channel",
                  "set_selected_channel"
                ],
                "name": "ChannelManagementDialog"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent",
                  "user_id"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "save_channel_settings"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_selected_channel"
              },
              {
                "args": [
                  "self",
                  "channel",
                  "value"
                ],
                "docstring": "",
                "name": "set_selected_channel"
              }
            ]
          },
          "ui/dialogs/checkin_management_dialog.py": {
            "classes": [
              {
                "docstring": "Dialog for managing check-in settings.",
                "methods": [
                  "__init__",
                  "on_enable_checkins_toggled",
                  "load_user_checkin_data",
                  "save_checkin_settings",
                  "get_checkin_settings",
                  "set_checkin_settings"
                ],
                "name": "CheckinManagementDialog"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent",
                  "user_id"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "checked"
                ],
                "docstring": "",
                "name": "on_enable_checkins_toggled"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load the user's current check-in settings",
                "name": "load_user_checkin_data"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Save the check-in settings back to user preferences",
                "name": "save_checkin_settings"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the current check-in settings.",
                "name": "get_checkin_settings"
              },
              {
                "args": [
                  "self",
                  "settings"
                ],
                "docstring": "Set the check-in settings.",
                "name": "set_checkin_settings"
              }
            ]
          },
          "ui/dialogs/schedule_editor_dialog.py": {
            "classes": [
              {
                "docstring": "Dialog for editing schedules.",
                "methods": [
                  "__init__",
                  "center_dialog",
                  "setup_functionality",
                  "load_existing_data",
                  "add_new_period",
                  "resort_period_widgets",
                  "find_lowest_available_period_number",
                  "remove_period_row",
                  "undo_last_delete",
                  "collect_period_data",
                  "handle_save",
                  "save_schedule",
                  "_trigger_rescheduling",
                  "cancel",
                  "get_schedule_data",
                  "set_schedule_data"
                ],
                "name": "ScheduleEditorDialog"
              }
            ],
            "functions": [
              {
                "args": [
                  "parent",
                  "user_id",
                  "category",
                  "on_save"
                ],
                "docstring": "Open the schedule editor dialog.",
                "name": "open_schedule_editor"
              },
              {
                "args": [
                  "self",
                  "parent",
                  "user_id",
                  "category",
                  "on_save"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Center the dialog on the parent window.",
                "name": "center_dialog"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup the functionality and connect signals.",
                "name": "setup_functionality"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load existing schedule data using the new reusable function.",
                "name": "load_existing_data"
              },
              {
                "args": [
                  "self",
                  "period_name",
                  "period_data"
                ],
                "docstring": "Add a new period row using the PeriodRowWidget.",
                "name": "add_new_period"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Re-sort the period widgets to maintain proper order (ALL at bottom).",
                "name": "resort_period_widgets"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Find the lowest available number for new period names.",
                "name": "find_lowest_available_period_number"
              },
              {
                "args": [
                  "self",
                  "row_widget"
                ],
                "docstring": "Remove a period row and store it for undo.",
                "name": "remove_period_row"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Undo the last deletion.",
                "name": "undo_last_delete"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Collect period data using the new reusable function.",
                "name": "collect_period_data"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Handle save button click - prevents dialog closure on validation errors.",
                "name": "handle_save"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Save the schedule data.",
                "name": "save_schedule"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Trigger rescheduling for this user and category when schedule changes.",
                "name": "_trigger_rescheduling"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Cancel the dialog.",
                "name": "cancel"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the current schedule data.",
                "name": "get_schedule_data"
              },
              {
                "args": [
                  "self",
                  "data"
                ],
                "docstring": "Set the schedule data.",
                "name": "set_schedule_data"
              },
              {
                "args": [
                  "widget"
                ],
                "docstring": "",
                "name": "sort_key"
              }
            ]
          },
          "ui/dialogs/task_completion_dialog.py": {
            "classes": [
              {
                "docstring": "Dialog for specifying task completion details.",
                "methods": [
                  "__init__",
                  "setup_ui",
                  "setup_completion_time_components",
                  "setup_connections",
                  "get_completion_date",
                  "get_completion_time",
                  "get_completion_notes",
                  "get_completion_data"
                ],
                "name": "TaskCompletionDialog"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent",
                  "task_title"
                ],
                "docstring": "Initialize the task completion dialog.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup the UI components.",
                "name": "setup_ui"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup the completion time input components.",
                "name": "setup_completion_time_components"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup signal connections.",
                "name": "setup_connections"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get completion date as string.",
                "name": "get_completion_date"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get completion time as 24-hour format string.",
                "name": "get_completion_time"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get completion notes.",
                "name": "get_completion_notes"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get all completion data as a dictionary.",
                "name": "get_completion_data"
              }
            ]
          },
          "ui/dialogs/task_crud_dialog.py": {
            "classes": [
              {
                "docstring": "Dialog for full CRUD operations on tasks.",
                "methods": [
                  "__init__",
                  "setup_ui",
                  "setup_connections",
                  "load_data",
                  "refresh_active_tasks",
                  "refresh_completed_tasks",
                  "update_statistics",
                  "get_selected_task_id",
                  "add_new_task",
                  "edit_selected_task",
                  "complete_selected_task",
                  "delete_selected_task",
                  "restore_selected_task",
                  "delete_completed_task"
                ],
                "name": "TaskCrudDialog"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent",
                  "user_id"
                ],
                "docstring": "Initialize the task CRUD dialog.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup the UI components.",
                "name": "setup_ui"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup signal connections.",
                "name": "setup_connections"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load all task data and update displays.",
                "name": "load_data"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Refresh the active tasks table.",
                "name": "refresh_active_tasks"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Refresh the completed tasks table.",
                "name": "refresh_completed_tasks"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Update the statistics display.",
                "name": "update_statistics"
              },
              {
                "args": [
                  "self",
                  "table"
                ],
                "docstring": "Get the task ID of the selected row in the given table.",
                "name": "get_selected_task_id"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Open dialog to add a new task.",
                "name": "add_new_task"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Edit the selected task.",
                "name": "edit_selected_task"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Mark the selected task as completed.",
                "name": "complete_selected_task"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Delete the selected task.",
                "name": "delete_selected_task"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Restore a completed task to active status.",
                "name": "restore_selected_task"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Permanently delete a completed task.",
                "name": "delete_completed_task"
              }
            ]
          },
          "ui/dialogs/task_edit_dialog.py": {
            "classes": [
              {
                "docstring": "Dialog for creating or editing tasks.",
                "methods": [
                  "__init__",
                  "setup_ui",
                  "setup_due_time_components",
                  "setup_recurring_task_components",
                  "on_recurring_pattern_changed",
                  "on_hour_changed",
                  "on_minute_changed",
                  "on_no_due_date_toggled",
                  "setup_connections",
                  "load_task_data",
                  "load_recurring_task_data",
                  "set_due_time_from_24h",
                  "get_due_time_as_24h",
                  "add_reminder_period",
                  "render_reminder_periods",
                  "render_reminder_period_row",
                  "delete_reminder_period",
                  "validate_form",
                  "collect_reminder_periods",
                  "collect_quick_reminders",
                  "collect_selected_tags",
                  "collect_recurring_task_data",
                  "save_task"
                ],
                "name": "TaskEditDialog"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent",
                  "user_id",
                  "task_data"
                ],
                "docstring": "Initialize the task edit dialog.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup the UI components.",
                "name": "setup_ui"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup the due time input components.",
                "name": "setup_due_time_components"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup the recurring task input components.",
                "name": "setup_recurring_task_components"
              },
              {
                "args": [
                  "self",
                  "pattern_text"
                ],
                "docstring": "Handle recurring pattern selection change.",
                "name": "on_recurring_pattern_changed"
              },
              {
                "args": [
                  "self",
                  "hour_text"
                ],
                "docstring": "Handle hour selection change.",
                "name": "on_hour_changed"
              },
              {
                "args": [
                  "self",
                  "minute_text"
                ],
                "docstring": "Handle minute selection change.",
                "name": "on_minute_changed"
              },
              {
                "args": [
                  "self",
                  "checked"
                ],
                "docstring": "Handle No Due Date checkbox toggle.",
                "name": "on_no_due_date_toggled"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup signal connections.",
                "name": "setup_connections"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load existing task data into the form.",
                "name": "load_task_data"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load recurring task data into the form.",
                "name": "load_recurring_task_data"
              },
              {
                "args": [
                  "self",
                  "time"
                ],
                "docstring": "Set due time components from 24-hour time.",
                "name": "set_due_time_from_24h"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get due time as 24-hour format string.",
                "name": "get_due_time_as_24h"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Add a new reminder period.",
                "name": "add_reminder_period"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Render the reminder periods in the UI.",
                "name": "render_reminder_periods"
              },
              {
                "args": [
                  "self",
                  "index",
                  "period"
                ],
                "docstring": "Render a single reminder period row.",
                "name": "render_reminder_period_row"
              },
              {
                "args": [
                  "self",
                  "index"
                ],
                "docstring": "Delete a reminder period.",
                "name": "delete_reminder_period"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Validate the form data.",
                "name": "validate_form"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Collect reminder period data from the UI.",
                "name": "collect_reminder_periods"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Collect quick reminder options.",
                "name": "collect_quick_reminders"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Collect selected tags from the tag widget.",
                "name": "collect_selected_tags"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Collect recurring task settings from the form.",
                "name": "collect_recurring_task_data"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Save the task data.",
                "name": "save_task"
              }
            ]
          },
          "ui/dialogs/task_management_dialog.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "__init__",
                  "on_enable_task_management_toggled",
                  "save_task_settings",
                  "get_statistics"
                ],
                "name": "TaskManagementDialog"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent",
                  "user_id"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "checked"
                ],
                "docstring": "",
                "name": "on_enable_task_management_toggled"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Save the task settings.",
                "name": "save_task_settings"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_statistics"
              }
            ]
          },
          "ui/dialogs/user_profile_dialog.py": {
            "classes": [
              {
                "docstring": "PySide6-based personalization dialog for user account creation and management.",
                "methods": [
                  "__init__",
                  "center_dialog",
                  "setup_ui",
                  "keyPressEvent",
                  "create_custom_field_list",
                  "add_custom_field",
                  "remove_custom_field",
                  "create_health_section",
                  "create_loved_ones_section",
                  "add_loved_one_widget",
                  "remove_loved_one_widget",
                  "create_interests_section",
                  "create_notes_section",
                  "create_goals_section",
                  "collect_custom_field_data",
                  "collect_loved_ones_data",
                  "save_personalization",
                  "cancel"
                ],
                "name": "UserProfileDialog"
              }
            ],
            "functions": [
              {
                "args": [
                  "parent",
                  "user_id",
                  "on_save",
                  "existing_data"
                ],
                "docstring": "Open the personalization dialog.\n    \n    Args:\n        parent: Parent widget\n        user_id: User ID for the personalization data\n        on_save: Optional callback function to call when saving\n        existing_data: Optional existing personalization data\n        \n    Returns:\n        QDialog.DialogCode: Dialog result code",
                "name": "open_personalization_dialog"
              },
              {
                "args": [
                  "self",
                  "parent",
                  "user_id",
                  "on_save",
                  "existing_data"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Center the dialog on the parent window.",
                "name": "center_dialog"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup the user interface.",
                "name": "setup_ui"
              },
              {
                "args": [
                  "self",
                  "event"
                ],
                "docstring": "Handle key press events for the dialog.",
                "name": "keyPressEvent"
              },
              {
                "args": [
                  "self",
                  "parent_layout",
                  "predefined_values",
                  "existing_values",
                  "label_text"
                ],
                "docstring": "Creates a multi-column list with preset items (checkbox + label) and custom fields (checkbox + entry + delete).",
                "name": "create_custom_field_list"
              },
              {
                "args": [
                  "self",
                  "parent_layout",
                  "field_type",
                  "value",
                  "checked"
                ],
                "docstring": "Add a custom field row with checkbox, entry, and delete button.",
                "name": "add_custom_field"
              },
              {
                "args": [
                  "self",
                  "field_frame"
                ],
                "docstring": "Remove a custom field from the layout.",
                "name": "remove_custom_field"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create the health section of the personalization dialog.\n        \n        Returns:\n            QGroupBox: Health section group box",
                "name": "create_health_section"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create the loved ones section of the personalization dialog.\n        \n        Returns:\n            QGroupBox: Loved ones section group box",
                "name": "create_loved_ones_section"
              },
              {
                "args": [
                  "self",
                  "parent_layout",
                  "loved_one_data"
                ],
                "docstring": "Add a loved one widget to the layout.\n        \n        Args:\n            parent_layout: Parent layout to add the widget to\n            loved_one_data: Optional existing loved one data",
                "name": "add_loved_one_widget"
              },
              {
                "args": [
                  "self",
                  "frame"
                ],
                "docstring": "Remove a loved one widget from the layout.\n        \n        Args:\n            frame: Frame widget to remove",
                "name": "remove_loved_one_widget"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create the interests section of the personalization dialog.\n        \n        Returns:\n            QGroupBox: Interests section group box",
                "name": "create_interests_section"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create the notes section of the personalization dialog.\n        \n        Returns:\n            QGroupBox: Notes section group box",
                "name": "create_notes_section"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Create the goals section of the personalization dialog.\n        \n        Returns:\n            QGroupBox: Goals section group box",
                "name": "create_goals_section"
              },
              {
                "args": [
                  "self",
                  "group_box"
                ],
                "docstring": "Collect data from custom field checkboxes and entries.\n        \n        Args:\n            group_box: Group box containing custom fields\n            \n        Returns:\n            list: List of selected values from checkboxes and custom entries",
                "name": "collect_custom_field_data"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Collect data from loved ones widgets.\n        \n        Returns:\n            list: List of loved ones data dictionaries",
                "name": "collect_loved_ones_data"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Save the personalization data.",
                "name": "save_personalization"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Cancel the personalization dialog.",
                "name": "cancel"
              },
              {
                "args": [
                  "s"
                ],
                "docstring": "Convert snake_case or lowercase to Title Case.\n            \n            Args:\n                s: String to convert to title case\n                \n            Returns:\n                str: String converted to title case",
                "name": "title_case"
              }
            ]
          },
          "ui/generate_ui_files.py": {
            "classes": [],
            "functions": [
              {
                "args": [
                  "ui_file_path",
                  "output_path"
                ],
                "docstring": "Generate a UI Python file from a .ui file with proper headers.\n    \n    Args:\n        ui_file_path: Path to the .ui file\n        output_path: Path for the generated Python file\n        \n    Returns:\n        bool: True if successful, False otherwise",
                "name": "generate_ui_file"
              },
              {
                "args": [],
                "docstring": "Generate all UI files in the project.",
                "name": "generate_all_ui_files"
              },
              {
                "args": [],
                "docstring": "Main function.",
                "name": "main"
              }
            ]
          },
          "ui/generated/account_creator_dialog_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Dialog_create_account"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Dialog_create_account"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Dialog_create_account"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/admin_panel_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_ui_app_mainwindow"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "ui_app_mainwindow"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "ui_app_mainwindow"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/category_management_dialog_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Dialog_category_management"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Dialog_category_management"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Dialog_category_management"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/category_selection_widget_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Form_category_selection_widget"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Form_category_selection_widget"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Form_category_selection_widget"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/channel_management_dialog_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Dialog"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Dialog"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Dialog"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/channel_selection_widget_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Form_channel_selection"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Form_channel_selection"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Form_channel_selection"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/checkin_element_template_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Form_checkin_element_template"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Form_checkin_element_template"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Form_checkin_element_template"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/checkin_management_dialog_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Dialog_checkin_management"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Dialog_checkin_management"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Dialog_checkin_management"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/checkin_settings_widget_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Form_checkin_settings"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Form_checkin_settings"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Form_checkin_settings"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/dynamic_list_field_template_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Form_dynamic_list_field_template"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Form_dynamic_list_field_template"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Form_dynamic_list_field_template"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/period_row_template_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Form_period_row_template"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Form_period_row_template"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Form_period_row_template"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/schedule_editor_dialog_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Dialog_edit_schedule"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Dialog_edit_schedule"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Dialog_edit_schedule"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/tag_widget_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Widget_tag"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Widget_tag"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Widget_tag"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/task_completion_dialog_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Dialog_task_completion"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Dialog_task_completion"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Dialog_task_completion"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/task_crud_dialog_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Dialog_task_crud"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Dialog_task_crud"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Dialog_task_crud"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/task_edit_dialog_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Dialog_task_edit"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Dialog_task_edit"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Dialog_task_edit"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/task_management_dialog_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Dialog_task_management"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Dialog_task_management"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Dialog_task_management"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/task_settings_widget_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Form_task_settings"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Form_task_settings"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Form_task_settings"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/user_profile_management_dialog_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Dialog_user_profile"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Dialog_user_profile"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Dialog_user_profile"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/generated/user_profile_settings_widget_pyqt.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "setupUi",
                  "retranslateUi"
                ],
                "name": "Ui_Form_user_profile_settings"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "Form_user_profile_settings"
                ],
                "docstring": "",
                "name": "setupUi"
              },
              {
                "args": [
                  "self",
                  "Form_user_profile_settings"
                ],
                "docstring": "",
                "name": "retranslateUi"
              }
            ]
          },
          "ui/ui_app_qt.py": {
            "classes": [
              {
                "docstring": "Manages the MHM backend service process",
                "methods": [
                  "__init__",
                  "validate_configuration_before_start",
                  "is_service_running",
                  "start_service",
                  "stop_service",
                  "restart_service"
                ],
                "name": "ServiceManager"
              },
              {
                "docstring": "Main MHM Management UI using PySide6",
                "methods": [
                  "__init__",
                  "load_ui",
                  "load_theme",
                  "connect_signals",
                  "initialize_ui",
                  "update_user_index_on_startup",
                  "update_service_status",
                  "start_service",
                  "stop_service",
                  "restart_service",
                  "run_full_scheduler",
                  "run_user_scheduler",
                  "run_category_scheduler",
                  "refresh_user_list",
                  "on_user_selected",
                  "load_user_categories",
                  "on_category_selected",
                  "enable_content_management",
                  "disable_content_management",
                  "create_new_user",
                  "manage_communication_settings",
                  "manage_categories",
                  "manage_checkins",
                  "manage_tasks",
                  "manage_task_crud",
                  "manage_personalization",
                  "manage_user_analytics",
                  "edit_user_messages",
                  "open_message_editor",
                  "edit_user_schedules",
                  "open_schedule_editor",
                  "_send_test_message__validate_user_selection",
                  "_send_test_message__validate_service_running",
                  "_send_test_message__get_selected_category",
                  "send_test_message",
                  "confirm_test_message",
                  "send_actual_test_message",
                  "toggle_logging_verbosity",
                  "view_log_file",
                  "view_cache_status",
                  "force_clean_cache",
                  "validate_configuration",
                  "show_configuration_help",
                  "view_all_users_summary",
                  "system_health_check",
                  "closeEvent",
                  "shutdown_ui_components"
                ],
                "name": "MHMManagerUI"
              }
            ],
            "functions": [
              {
                "args": [],
                "docstring": "Main entry point for the Qt-based UI application",
                "name": "main"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Validate configuration before attempting to start the service.",
                "name": "validate_configuration_before_start"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Check if the MHM service is running",
                "name": "is_service_running"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Start the MHM backend service",
                "name": "start_service"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Stop the MHM backend service",
                "name": "stop_service"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Restart the MHM backend service",
                "name": "restart_service"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load the UI from the .ui file",
                "name": "load_ui"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load and apply the QSS theme from the styles directory",
                "name": "load_theme"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Connect UI signals to slots",
                "name": "connect_signals"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the UI state",
                "name": "initialize_ui"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Automatically update the user index when the admin panel starts",
                "name": "update_user_index_on_startup"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Update the service status display",
                "name": "update_service_status"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Start the MHM service",
                "name": "start_service"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Stop the MHM service",
                "name": "stop_service"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Restart the MHM service",
                "name": "restart_service"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Run the full scheduler for all users",
                "name": "run_full_scheduler"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Run scheduler for the selected user",
                "name": "run_user_scheduler"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Run scheduler for the selected user and category",
                "name": "run_category_scheduler"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Refresh the user list in the combo box using user index",
                "name": "refresh_user_list"
              },
              {
                "args": [
                  "self",
                  "user_display"
                ],
                "docstring": "Handle user selection from combo box",
                "name": "on_user_selected"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Load categories for the selected user",
                "name": "load_user_categories"
              },
              {
                "args": [
                  "self",
                  "category"
                ],
                "docstring": "Handle category selection",
                "name": "on_category_selected"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Enable content management buttons",
                "name": "enable_content_management"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Disable content management buttons",
                "name": "disable_content_management"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Open dialog to create a new user",
                "name": "create_new_user"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "manage_communication_settings"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "manage_categories"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "manage_checkins"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "manage_tasks"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "manage_task_crud"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "manage_personalization"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Open user analytics interface for selected user",
                "name": "manage_user_analytics"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Open message editing interface for selected user",
                "name": "edit_user_messages"
              },
              {
                "args": [
                  "self",
                  "parent_dialog",
                  "category"
                ],
                "docstring": "Open the message editing window for a specific category",
                "name": "open_message_editor"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Open schedule editing interface for selected user",
                "name": "edit_user_schedules"
              },
              {
                "args": [
                  "self",
                  "parent_dialog",
                  "category"
                ],
                "docstring": "Open the schedule editing window for a specific category",
                "name": "open_schedule_editor"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Validate that a user is selected.",
                "name": "_send_test_message__validate_user_selection"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Validate that the service is running.",
                "name": "_send_test_message__validate_service_running"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get and validate the selected category from the dropdown.",
                "name": "_send_test_message__get_selected_category"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Send a test message to the selected user",
                "name": "send_test_message"
              },
              {
                "args": [
                  "self",
                  "category"
                ],
                "docstring": "Confirm and send test message",
                "name": "confirm_test_message"
              },
              {
                "args": [
                  "self",
                  "category"
                ],
                "docstring": "Send a test message via the running service",
                "name": "send_actual_test_message"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Toggle logging verbosity and update menu.",
                "name": "toggle_logging_verbosity"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Open the log file in the default text editor.",
                "name": "view_log_file"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Show cache cleanup status and information.",
                "name": "view_cache_status"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Force cache cleanup regardless of schedule.",
                "name": "force_clean_cache"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Show detailed configuration validation report.",
                "name": "validate_configuration"
              },
              {
                "args": [
                  "self",
                  "parent_window"
                ],
                "docstring": "Show help for fixing configuration issues.",
                "name": "show_configuration_help"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Show a summary of all users in the system.",
                "name": "view_all_users_summary"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Perform a basic system health check.",
                "name": "system_health_check"
              },
              {
                "args": [
                  "self",
                  "event"
                ],
                "docstring": "Handle window close event",
                "name": "closeEvent"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Shutdown any UI-created components gracefully",
                "name": "shutdown_ui_components"
              },
              {
                "args": [],
                "docstring": "",
                "name": "cleanup_old_requests"
              },
              {
                "args": [
                  "data"
                ],
                "docstring": "",
                "name": "on_save"
              },
              {
                "args": [],
                "docstring": "Callback when schedule is saved.",
                "name": "on_schedule_save"
              }
            ]
          },
          "ui/widgets/category_selection_widget.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "__init__",
                  "get_selected_categories",
                  "set_selected_categories"
                ],
                "name": "CategorySelectionWidget"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_selected_categories"
              },
              {
                "args": [
                  "self",
                  "categories"
                ],
                "docstring": "",
                "name": "set_selected_categories"
              }
            ]
          },
          "ui/widgets/channel_selection_widget.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "__init__",
                  "populate_timezones",
                  "get_selected_channel",
                  "get_all_contact_info",
                  "get_timezone",
                  "set_selected_channel",
                  "set_timezone",
                  "set_contact_info"
                ],
                "name": "ChannelSelectionWidget"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent"
                ],
                "docstring": "Initialize the ChannelSelectionWidget.\n        \n        Sets up the UI for channel selection with Discord and Email options,\n        along with timezone selection. Populates timezone options and sets default\n        timezone to America/Regina.\n        \n        Args:\n            parent: Parent widget (optional)",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Populate the timezone combo box with options.",
                "name": "populate_timezones"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_selected_channel"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get all contact info fields from the widget.",
                "name": "get_all_contact_info"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the selected timezone.",
                "name": "get_timezone"
              },
              {
                "args": [
                  "self",
                  "channel",
                  "value"
                ],
                "docstring": "",
                "name": "set_selected_channel"
              },
              {
                "args": [
                  "self",
                  "timezone"
                ],
                "docstring": "Set the timezone.",
                "name": "set_timezone"
              },
              {
                "args": [
                  "self",
                  "email",
                  "discord_id",
                  "timezone"
                ],
                "docstring": "",
                "name": "set_contact_info"
              }
            ]
          },
          "ui/widgets/checkin_settings_widget.py": {
            "classes": [
              {
                "docstring": "Widget for check-in settings configuration.",
                "methods": [
                  "__init__",
                  "showEvent",
                  "setup_connections",
                  "connect_question_checkboxes",
                  "on_question_toggled",
                  "load_existing_data",
                  "set_question_checkboxes",
                  "get_default_question_state",
                  "find_lowest_available_period_number",
                  "add_new_period",
                  "remove_period_row",
                  "undo_last_time_period_delete",
                  "add_new_question",
                  "undo_last_question_delete",
                  "get_checkin_settings",
                  "set_checkin_settings"
                ],
                "name": "CheckinSettingsWidget"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent",
                  "user_id"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "event"
                ],
                "docstring": "Handle widget show event.\n        \n        Called when the widget becomes visible. Currently just calls the parent\n        implementation but can be extended for initialization that needs to happen\n        when the widget is shown.\n        \n        Args:\n            event: The show event object",
                "name": "showEvent"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup signal connections.",
                "name": "setup_connections"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Connect all question checkboxes to track changes.",
                "name": "connect_question_checkboxes"
              },
              {
                "args": [
                  "self",
                  "checked"
                ],
                "docstring": "Handle question checkbox toggle.",
                "name": "on_question_toggled"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load existing check-in data.",
                "name": "load_existing_data"
              },
              {
                "args": [
                  "self",
                  "questions"
                ],
                "docstring": "Set question checkboxes based on saved preferences.",
                "name": "set_question_checkboxes"
              },
              {
                "args": [
                  "self",
                  "question_key"
                ],
                "docstring": "Get default enabled state for a question.",
                "name": "get_default_question_state"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Find the lowest available integer (2+) that's not currently used in period names.",
                "name": "find_lowest_available_period_number"
              },
              {
                "args": [
                  "self",
                  "checked",
                  "period_name",
                  "period_data"
                ],
                "docstring": "Add a new time period using the PeriodRowWidget.",
                "name": "add_new_period"
              },
              {
                "args": [
                  "self",
                  "row_widget"
                ],
                "docstring": "Remove a period row and store it for undo.",
                "name": "remove_period_row"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Undo the last time period deletion.",
                "name": "undo_last_time_period_delete"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Add a new check-in question.",
                "name": "add_new_question"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Undo the last question deletion.",
                "name": "undo_last_question_delete"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the current check-in settings.",
                "name": "get_checkin_settings"
              },
              {
                "args": [
                  "self",
                  "settings"
                ],
                "docstring": "Set the check-in settings.",
                "name": "set_checkin_settings"
              }
            ]
          },
          "ui/widgets/dynamic_list_container.py": {
            "classes": [
              {
                "docstring": "Manages a vertical list of DynamicListField rows.",
                "methods": [
                  "__init__",
                  "_add_blank_row",
                  "_on_row_edited",
                  "_on_row_deleted",
                  "_ensure_single_blank_row",
                  "_deduplicate_values",
                  "get_values",
                  "set_values",
                  "_first_blank_index",
                  "_on_preset_toggled",
                  "__post_init__"
                ],
                "name": "DynamicListContainer"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent",
                  "field_key"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "_add_blank_row"
              },
              {
                "args": [
                  "self",
                  "row"
                ],
                "docstring": "",
                "name": "_on_row_edited"
              },
              {
                "args": [
                  "self",
                  "row"
                ],
                "docstring": "",
                "name": "_on_row_deleted"
              },
              {
                "args": [
                  "self",
                  "current_blank"
                ],
                "docstring": "",
                "name": "_ensure_single_blank_row"
              },
              {
                "args": [
                  "self",
                  "trigger_row",
                  "skip_warning"
                ],
                "docstring": "",
                "name": "_deduplicate_values"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_values"
              },
              {
                "args": [
                  "self",
                  "selected"
                ],
                "docstring": "",
                "name": "set_values"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "_first_blank_index"
              },
              {
                "args": [
                  "self",
                  "row"
                ],
                "docstring": "",
                "name": "_on_preset_toggled"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Post-initialization setup.",
                "name": "__post_init__"
              }
            ]
          },
          "ui/widgets/dynamic_list_field.py": {
            "classes": [
              {
                "docstring": "Single row consisting of checkbox + editable text + delete button.",
                "methods": [
                  "__init__",
                  "on_text_changed",
                  "on_checkbox_toggled",
                  "on_editing_finished",
                  "_on_delete",
                  "is_checked",
                  "get_text",
                  "is_blank",
                  "set_checked",
                  "set_text"
                ],
                "name": "DynamicListField"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent",
                  "preset_label",
                  "editable",
                  "checked"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Called when user types in the text field.",
                "name": "on_text_changed"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Called when user clicks the checkbox.",
                "name": "on_checkbox_toggled"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Notify parent container that text editing has finished (for duplicate validation).",
                "name": "on_editing_finished"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "_on_delete"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "is_checked"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "get_text"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "is_blank"
              },
              {
                "args": [
                  "self",
                  "state"
                ],
                "docstring": "",
                "name": "set_checked"
              },
              {
                "args": [
                  "self",
                  "text"
                ],
                "docstring": "",
                "name": "set_text"
              }
            ]
          },
          "ui/widgets/period_row_widget.py": {
            "classes": [
              {
                "docstring": "Reusable widget for editing time periods with days selection.",
                "methods": [
                  "__init__",
                  "setup_functionality",
                  "load_period_data",
                  "load_days",
                  "on_select_all_days_toggled",
                  "on_individual_day_toggled",
                  "get_period_data",
                  "get_selected_days",
                  "request_delete",
                  "set_period_name",
                  "get_period_name",
                  "is_valid",
                  "set_read_only",
                  "_set_read_only__time_inputs",
                  "_set_read_only__checkbox_states",
                  "_set_read_only__all_period_read_only",
                  "_set_read_only__normal_checkbox_states",
                  "_get_day_checkboxes",
                  "_set_read_only__delete_button_visibility",
                  "_set_read_only__visual_styling",
                  "_set_read_only__apply_read_only_styling",
                  "_set_read_only__clear_read_only_styling",
                  "_set_read_only__force_style_updates"
                ],
                "name": "PeriodRowWidget"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent",
                  "period_name",
                  "period_data"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup the widget functionality and connect signals.",
                "name": "setup_functionality"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load period data into the widget.",
                "name": "load_period_data"
              },
              {
                "args": [
                  "self",
                  "days"
                ],
                "docstring": "Load day selections.",
                "name": "load_days"
              },
              {
                "args": [
                  "self",
                  "checked"
                ],
                "docstring": "Handle 'Select All Days' checkbox toggle.",
                "name": "on_select_all_days_toggled"
              },
              {
                "args": [
                  "self",
                  "checked"
                ],
                "docstring": "Handle individual day checkbox toggle.",
                "name": "on_individual_day_toggled"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the current period data from the widget.",
                "name": "get_period_data"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the currently selected days.",
                "name": "get_selected_days"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Request deletion of this period row.",
                "name": "request_delete"
              },
              {
                "args": [
                  "self",
                  "name"
                ],
                "docstring": "Set the period name.",
                "name": "set_period_name"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the current period name.",
                "name": "get_period_name"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Check if the period data is valid.",
                "name": "is_valid"
              },
              {
                "args": [
                  "self",
                  "read_only"
                ],
                "docstring": "Set the widget to read-only mode.",
                "name": "set_read_only"
              },
              {
                "args": [
                  "self",
                  "read_only"
                ],
                "docstring": "Set time input widgets to read-only mode.",
                "name": "_set_read_only__time_inputs"
              },
              {
                "args": [
                  "self",
                  "read_only"
                ],
                "docstring": "Set checkbox states based on read-only mode and period type.",
                "name": "_set_read_only__checkbox_states"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Set ALL period to read-only with all days selected.",
                "name": "_set_read_only__all_period_read_only"
              },
              {
                "args": [
                  "self",
                  "read_only"
                ],
                "docstring": "Set normal checkbox states for non-ALL periods.",
                "name": "_set_read_only__normal_checkbox_states"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get list of day checkboxes.",
                "name": "_get_day_checkboxes"
              },
              {
                "args": [
                  "self",
                  "read_only"
                ],
                "docstring": "Set delete button visibility based on read-only state.",
                "name": "_set_read_only__delete_button_visibility"
              },
              {
                "args": [
                  "self",
                  "read_only"
                ],
                "docstring": "Apply visual styling for read-only state.",
                "name": "_set_read_only__visual_styling"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Apply read-only visual styling.",
                "name": "_set_read_only__apply_read_only_styling"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Clear read-only visual styling.",
                "name": "_set_read_only__clear_read_only_styling"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Force style updates for all checkboxes.",
                "name": "_set_read_only__force_style_updates"
              }
            ]
          },
          "ui/widgets/tag_widget.py": {
            "classes": [
              {
                "docstring": "Flexible tag widget that can work in management or selection mode.",
                "methods": [
                  "__init__",
                  "setup_ui",
                  "setup_connections",
                  "load_tags",
                  "refresh_tag_list",
                  "update_button_states",
                  "on_tag_selection_changed",
                  "add_tag",
                  "edit_tag",
                  "delete_tag",
                  "get_available_tags",
                  "get_selected_tags",
                  "set_selected_tags",
                  "refresh_tags",
                  "undo_last_tag_delete"
                ],
                "name": "TagWidget"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent",
                  "user_id",
                  "mode",
                  "selected_tags",
                  "title"
                ],
                "docstring": "Initialize the tag widget.\n        \n        Args:\n            parent: Parent widget\n            user_id: User ID for loading/saving tags\n            mode: \"management\" for full CRUD operations, \"selection\" for checkbox selection\n            selected_tags: List of currently selected tags (for selection mode)\n            title: Title for the group box",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup the UI components based on mode.",
                "name": "setup_ui"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup signal connections.",
                "name": "setup_connections"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load the user's tags.",
                "name": "load_tags"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Refresh the tag list display.",
                "name": "refresh_tag_list"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Update button enabled states based on selection (management mode only).",
                "name": "update_button_states"
              },
              {
                "args": [
                  "self",
                  "item"
                ],
                "docstring": "Handle when a tag checkbox is changed (selection mode only).",
                "name": "on_tag_selection_changed"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Add a new tag.",
                "name": "add_tag"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Edit the selected tag (management mode only).",
                "name": "edit_tag"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Delete the selected tag (management mode only).",
                "name": "delete_tag"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the current list of available tags.",
                "name": "get_available_tags"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the currently selected tags (selection mode only).",
                "name": "get_selected_tags"
              },
              {
                "args": [
                  "self",
                  "tags"
                ],
                "docstring": "Set the selected tags (selection mode only).",
                "name": "set_selected_tags"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Refresh the tags in the tag widget.",
                "name": "refresh_tags"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Undo the last tag deletion (account creation mode only).",
                "name": "undo_last_tag_delete"
              }
            ]
          },
          "ui/widgets/task_settings_widget.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "__init__",
                  "setup_connections",
                  "load_existing_data",
                  "showEvent",
                  "find_lowest_available_period_number",
                  "add_new_period",
                  "remove_period_row",
                  "undo_last_period_delete",
                  "get_task_settings",
                  "set_task_settings",
                  "get_statistics",
                  "get_available_tags",
                  "refresh_tags",
                  "undo_last_tag_delete",
                  "get_recurring_task_settings",
                  "set_recurring_task_settings",
                  "load_recurring_task_settings",
                  "save_recurring_task_settings"
                ],
                "name": "TaskSettingsWidget"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent",
                  "user_id"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Setup signal connections.",
                "name": "setup_connections"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "",
                "name": "load_existing_data"
              },
              {
                "args": [
                  "self",
                  "event"
                ],
                "docstring": "Handle widget show event.\n        \n        Called when the widget becomes visible. Currently just calls the parent\n        implementation but can be extended for initialization that needs to happen\n        when the widget is shown.\n        \n        Args:\n            event: The show event object",
                "name": "showEvent"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Find the lowest available integer (2+) that's not currently used in period names.",
                "name": "find_lowest_available_period_number"
              },
              {
                "args": [
                  "self",
                  "checked",
                  "period_name",
                  "period_data"
                ],
                "docstring": "Add a new time period using the PeriodRowWidget.",
                "name": "add_new_period"
              },
              {
                "args": [
                  "self",
                  "row_widget"
                ],
                "docstring": "Remove a period row and store it for undo.",
                "name": "remove_period_row"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Undo the last time period deletion.",
                "name": "undo_last_period_delete"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the current task settings.",
                "name": "get_task_settings"
              },
              {
                "args": [
                  "self",
                  "settings"
                ],
                "docstring": "Set the task settings.",
                "name": "set_task_settings"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get real task statistics for the user.",
                "name": "get_statistics"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the current list of available tags from the tag widget.",
                "name": "get_available_tags"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Refresh the tags in the tag widget.",
                "name": "refresh_tags"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Undo the last tag deletion (account creation mode only).",
                "name": "undo_last_tag_delete"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the current recurring task settings.",
                "name": "get_recurring_task_settings"
              },
              {
                "args": [
                  "self",
                  "settings"
                ],
                "docstring": "Set the recurring task settings.",
                "name": "set_recurring_task_settings"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load recurring task settings from user preferences.",
                "name": "load_recurring_task_settings"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Save recurring task settings to user preferences.",
                "name": "save_recurring_task_settings"
              }
            ]
          },
          "ui/widgets/user_profile_settings_widget.py": {
            "classes": [
              {
                "docstring": "Widget for user profile settings configuration.",
                "methods": [
                  "__init__",
                  "populate_timezones",
                  "load_existing_data",
                  "set_checkbox_group",
                  "get_personalization_data",
                  "_get_personalization_data__extract_basic_fields",
                  "_get_personalization_data__extract_gender_identity",
                  "_get_personalization_data__extract_date_of_birth",
                  "_get_personalization_data__extract_dynamic_containers",
                  "_get_personalization_data__extract_loved_ones",
                  "_get_personalization_data__extract_notes",
                  "_get_personalization_data__ensure_required_fields",
                  "get_settings",
                  "set_settings"
                ],
                "name": "UserProfileSettingsWidget"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "parent",
                  "user_id",
                  "existing_data"
                ],
                "docstring": "Initialize the object.",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Populate the timezone combo box with options and enable selection.",
                "name": "populate_timezones"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load existing personalization data into the form.",
                "name": "load_existing_data"
              },
              {
                "args": [
                  "self",
                  "group_name",
                  "values"
                ],
                "docstring": "Set checkboxes for a specific group based on values.",
                "name": "set_checkbox_group"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get all personalization data from the form, preserving existing data structure.",
                "name": "get_personalization_data"
              },
              {
                "args": [
                  "self",
                  "data"
                ],
                "docstring": "Extract basic text fields from the UI.",
                "name": "_get_personalization_data__extract_basic_fields"
              },
              {
                "args": [
                  "self",
                  "data"
                ],
                "docstring": "Extract gender identity from checkboxes and custom input.",
                "name": "_get_personalization_data__extract_gender_identity"
              },
              {
                "args": [
                  "self",
                  "data"
                ],
                "docstring": "Extract date of birth from calendar widget with proper validation.",
                "name": "_get_personalization_data__extract_date_of_birth"
              },
              {
                "args": [
                  "self",
                  "data"
                ],
                "docstring": "Extract data from all dynamic list containers.",
                "name": "_get_personalization_data__extract_dynamic_containers"
              },
              {
                "args": [
                  "self",
                  "data"
                ],
                "docstring": "Extract loved ones data from text field with structured parsing.",
                "name": "_get_personalization_data__extract_loved_ones"
              },
              {
                "args": [
                  "self",
                  "data"
                ],
                "docstring": "Extract notes for AI from text field.",
                "name": "_get_personalization_data__extract_notes"
              },
              {
                "args": [
                  "self",
                  "data"
                ],
                "docstring": "Ensure all required fields exist in the data structure.",
                "name": "_get_personalization_data__ensure_required_fields"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get the current user profile settings.",
                "name": "get_settings"
              },
              {
                "args": [
                  "self",
                  "settings"
                ],
                "docstring": "Set the user profile settings.",
                "name": "set_settings"
              }
            ]
          },
          "user/context_manager.py": {
            "classes": [
              {
                "docstring": "Manages rich user context for AI conversations.",
                "methods": [
                  "__init__",
                  "get_current_user_context",
                  "get_ai_context",
                  "_get_user_profile",
                  "_get_recent_activity",
                  "_get_conversation_insights",
                  "_get_user_preferences",
                  "_get_mood_trends",
                  "_get_conversation_history",
                  "add_conversation_exchange",
                  "_get_minimal_context",
                  "format_context_for_ai"
                ],
                "name": "UserContextManager"
              }
            ],
            "functions": [
              {
                "args": [
                  "self"
                ],
                "docstring": "Initialize the UserContextManager.\n        \n        Sets up conversation history storage for tracking user interactions.",
                "name": "__init__"
              },
              {
                "args": [
                  "self",
                  "include_conversation_history"
                ],
                "docstring": "Get context for the currently logged-in user using the existing UserContext singleton.\n        \n        Args:\n            include_conversation_history: Whether to include recent conversation history\n            \n        Returns:\n            Dict containing all relevant user context for current user",
                "name": "get_current_user_context"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "include_conversation_history"
                ],
                "docstring": "Get comprehensive user context for AI conversation.\n        \n        Args:\n            user_id: The user's ID\n            include_conversation_history: Whether to include recent conversation history\n            \n        Returns:\n            Dict containing all relevant user context for AI processing",
                "name": "get_ai_context"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Get basic user profile information using existing user infrastructure.",
                "name": "_get_user_profile"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Get recent user activity and responses.",
                "name": "_get_recent_activity"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Get insights from recent chat interactions.",
                "name": "_get_conversation_insights"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Get user preferences using new structure.",
                "name": "_get_user_preferences"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Analyze recent mood and energy trends.",
                "name": "_get_mood_trends"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Get recent conversation history with this user.",
                "name": "_get_conversation_history"
              },
              {
                "args": [
                  "self",
                  "user_id",
                  "user_message",
                  "ai_response"
                ],
                "docstring": "Add a conversation exchange to history.\n        \n        Args:\n            user_id: The user's ID\n            user_message: The user's message\n            ai_response: The AI's response",
                "name": "add_conversation_exchange"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Fallback minimal context if full context generation fails.\n        \n        Args:\n            user_id: The user's ID (can be None for anonymous context)\n            \n        Returns:\n            dict: Minimal context with basic information",
                "name": "_get_minimal_context"
              },
              {
                "args": [
                  "self",
                  "context"
                ],
                "docstring": "Format user context into a concise string for AI prompt.\n        \n        Args:\n            context: User context dictionary\n            \n        Returns:\n            str: Formatted context string for AI consumption",
                "name": "format_context_for_ai"
              }
            ]
          },
          "user/user_context.py": {
            "classes": [
              {
                "docstring": "",
                "methods": [
                  "__new__",
                  "load_user_data",
                  "save_user_data",
                  "set_user_id",
                  "get_user_id",
                  "set_internal_username",
                  "get_internal_username",
                  "set_preferred_name",
                  "get_preferred_name",
                  "set_preference",
                  "get_preference",
                  "update_preference",
                  "get_instance_context"
                ],
                "name": "UserContext"
              }
            ],
            "functions": [
              {
                "args": [
                  "cls"
                ],
                "docstring": "Create a new instance.",
                "name": "__new__"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Loads user data using the new user management functions.\n        \n        Args:\n            user_id (str): The user ID whose data needs to be loaded.",
                "name": "load_user_data"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Saves user data using the new user management functions.\n        \n        Args:\n            user_id (str): The user ID whose data needs to be saved.",
                "name": "save_user_data"
              },
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Sets the user_id in the user_data dictionary.\n        \n        Args:\n            user_id (str): The user ID to be set.",
                "name": "set_user_id"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Retrieves the user_id from the user_data dictionary.\n        \n        Returns:\n            str: The current user ID, or None if not set.",
                "name": "get_user_id"
              },
              {
                "args": [
                  "self",
                  "internal_username"
                ],
                "docstring": "Sets the internal_username in the user_data dictionary.\n        \n        Args:\n            internal_username (str): The internal username to be set.",
                "name": "set_internal_username"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Retrieves the internal_username from the user_data dictionary.\n        \n        Returns:\n            str: The current internal username, or None if not set.",
                "name": "get_internal_username"
              },
              {
                "args": [
                  "self",
                  "preferred_name"
                ],
                "docstring": "Sets the preferred_name in the user_data dictionary.\n        \n        Args:\n            preferred_name (str): The preferred name to be set.",
                "name": "set_preferred_name"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Retrieves the preferred_name from the user_data dictionary.\n        \n        Returns:\n            str: The current preferred name, or None if not set.",
                "name": "get_preferred_name"
              },
              {
                "args": [
                  "self",
                  "key",
                  "value"
                ],
                "docstring": "Sets a user preference using UserPreferences.\n        \n        Args:\n            key (str): The preference key to be set.\n            value (any): The preference value to be set.",
                "name": "set_preference"
              },
              {
                "args": [
                  "self",
                  "key"
                ],
                "docstring": "Retrieves a user preference using UserPreferences.\n        \n        Args:\n            key (str): The preference key to retrieve.\n        \n        Returns:\n            any: The current preference value, or None if not set.",
                "name": "get_preference"
              },
              {
                "args": [
                  "self",
                  "key",
                  "value"
                ],
                "docstring": "Updates a user preference using UserPreferences.\n        \n        Args:\n            key (str): The preference key to be updated.\n            value (any): The preference value to be set.",
                "name": "update_preference"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get basic user context from the current UserContext instance.\n        \n        Returns:\n            dict: Dictionary containing basic user context information",
                "name": "get_instance_context"
              }
            ]
          },
          "user/user_preferences.py": {
            "classes": [
              {
                "docstring": "Manages user preferences and settings.\n    \n    Provides methods for loading, saving, and managing user preferences\n    including schedule period settings and general user preferences.",
                "methods": [
                  "__init__",
                  "load_preferences",
                  "save_preferences",
                  "set_preference",
                  "get_preference",
                  "update_preference",
                  "remove_preference",
                  "get_all_preferences",
                  "set_schedule_period_active",
                  "is_schedule_period_active"
                ],
                "name": "UserPreferences"
              }
            ],
            "functions": [
              {
                "args": [
                  "self",
                  "user_id"
                ],
                "docstring": "Initialize UserPreferences for a specific user.\n        \n        Args:\n            user_id: The user's unique identifier",
                "name": "__init__"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Load user preferences using the new user management functions.",
                "name": "load_preferences"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Save user preferences using the new user management functions.",
                "name": "save_preferences"
              },
              {
                "args": [
                  "self",
                  "key",
                  "value"
                ],
                "docstring": "Set a preference and save it.",
                "name": "set_preference"
              },
              {
                "args": [
                  "self",
                  "key"
                ],
                "docstring": "Get a preference value.",
                "name": "get_preference"
              },
              {
                "args": [
                  "self",
                  "key",
                  "value"
                ],
                "docstring": "Update a preference (alias for set_preference for consistency).",
                "name": "update_preference"
              },
              {
                "args": [
                  "self",
                  "key"
                ],
                "docstring": "Remove a preference.",
                "name": "remove_preference"
              },
              {
                "args": [
                  "self"
                ],
                "docstring": "Get all preferences.",
                "name": "get_all_preferences"
              },
              {
                "args": [
                  "user_id",
                  "category",
                  "period_name",
                  "is_active"
                ],
                "docstring": "Wrapper for :func:`core.schedule_management.set_schedule_period_active`.",
                "name": "set_schedule_period_active"
              },
              {
                "args": [
                  "user_id",
                  "category",
                  "period_name"
                ],
                "docstring": "Wrapper for :func:`core.schedule_management.is_schedule_period_active`.",
                "name": "is_schedule_period_active"
              }
            ]
          }
        },
        "totals": {
          "classes_found": 340,
          "files_scanned": 171,
          "functions_documented": 2976,
          "functions_found": 3178
        }
      },
      "issues_found": true
    },
    "audit_module_dependencies": {
      "success": true,
      "output": "[SCAN] Scanning all Python files for imports...\nError parsing tmp_rebuild_archive_norm.py: invalid non-printable character U+FEFF (<unknown>, line 1)\n[DOC] Parsing MODULE_DEPENDENCIES_DETAIL.md...\n\n================================================================================\nMODULE DEPENDENCIES AUDIT REPORT\n================================================================================\n\n[STATS] OVERALL STATISTICS:\n   Files scanned: 172\n   Total imports found: 2178\n   Dependencies documented: 171\n   Standard library imports: 692\n   Third-party imports: 512\n   Local imports: 974\n\n[ENHANCEMENT] Manual Enhancement Status:\n   Modules with manual enhancements: 171\n\n[MISS] MISSING FROM DEPENDENCIES DOCUMENTATION:\n   [DIR] tmp_rebuild_archive_norm.py - ENTIRE FILE MISSING\n\n   Total missing dependencies: 1\n\n[DIR] BREAKDOWN BY DIRECTORY:\n   ai/: 5 files, 49 imports, 21 local deps\n   communication/: 24 files, 313 imports, 135 local deps\n   core/: 22 files, 386 imports, 213 local deps\n   root/: 3 files, 10 imports, 1 local deps\n   tasks/: 1 files, 16 imports, 10 local deps\n   tests/: 72 files, 1043 imports, 412 local deps\n   ui/: 42 files, 334 imports, 164 local deps\n   user/: 3 files, 27 imports, 18 local deps\n\n================================================================================\nENHANCED MODULE ANALYSIS REPORT\n================================================================================\n\n#### `ai/cache_manager.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ai/chatbot.py`\n- **Complexity**: LOW\n- **Dependencies**: 8\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ai/context_builder.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ai/conversation_history.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ai/prompt_manager.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/command_handlers/analytics_handler.py`\n- **Complexity**: HIGH\n- **Dependencies**: 17\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `communication/command_handlers/base_handler.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/command_handlers/checkin_handler.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/command_handlers/interaction_handlers.py`\n- **Complexity**: HIGH\n- **Dependencies**: 28\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `communication/command_handlers/profile_handler.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/command_handlers/schedule_handler.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/command_handlers/shared_types.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/command_handlers/task_handler.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/communication_channels/base/base_channel.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/communication_channels/base/command_registry.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/communication_channels/base/message_formatter.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/communication_channels/base/rich_formatter.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/communication_channels/discord/api_client.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/communication_channels/discord/bot.py`\n- **Complexity**: LOW\n- **Dependencies**: 7\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/communication_channels/discord/event_handler.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/communication_channels/email/bot.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/core/channel_monitor.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/core/channel_orchestrator.py`\n- **Complexity**: HIGH\n- **Dependencies**: 21\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `communication/core/factory.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/core/retry_manager.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/message_processing/command_parser.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/message_processing/conversation_flow_manager.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/message_processing/interaction_manager.py`\n- **Complexity**: LOW\n- **Dependencies**: 7\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `communication/message_processing/message_router.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/auto_cleanup.py`\n- **Complexity**: LOW\n- **Dependencies**: 6\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/backup_manager.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/checkin_analytics.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/checkin_dynamic_manager.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/config.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/error_handling.py`\n- **Complexity**: HIGH\n- **Dependencies**: 19\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `core/file_auditor.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/file_operations.py`\n- **Complexity**: LOW\n- **Dependencies**: 6\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/logger.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/message_management.py`\n- **Complexity**: LOW\n- **Dependencies**: 8\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/response_tracking.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/schedule_management.py`\n- **Complexity**: LOW\n- **Dependencies**: 8\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/schedule_utilities.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/scheduler.py`\n- **Complexity**: HIGH\n- **Dependencies**: 19\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `core/schemas.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/service.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 15\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Review core dependency usage, Verify if this module is still needed\n\n#### `core/service_utilities.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/ui_management.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/user_data_handlers.py`\n- **Complexity**: HIGH\n- **Dependencies**: 31\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `core/user_data_manager.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 13\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Review core dependency usage, Verify if this module is still needed\n\n#### `core/user_data_validation.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 10\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/user_management.py`\n- **Complexity**: HIGH\n- **Dependencies**: 42\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `run_mhm.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `run_tests.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `tasks/task_management.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 10\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `tests/behavior/test_account_management_real_behavior.py`\n- **Complexity**: HIGH\n- **Dependencies**: 35\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage\n\n#### `tests/behavior/test_ai_chatbot_behavior.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 10\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_ai_context_builder_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_ai_context_builder_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_ai_conversation_history_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_auto_cleanup_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_backup_manager_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_checkin_analytics_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_command_parser_coverage_expansion_phase3_simple.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_communication_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_communication_command_parser_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_communication_factory_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_communication_interaction_manager_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_communication_manager_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_config_coverage_expansion_phase3_simple.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_conversation_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_core_message_management_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_core_service_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_discord_bot_behavior.py`\n- **Complexity**: HIGH\n- **Dependencies**: 19\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules\n\n#### `tests/behavior/test_dynamic_checkin_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_email_bot_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_enhanced_command_parser_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_error_handling_coverage_expansion_phase3_final.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_interaction_handlers_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 8\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_interaction_handlers_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_logger_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_logger_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_logger_coverage_expansion_phase3_simple.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_message_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_observability_logging.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_response_tracking_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_schedule_management_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_scheduler_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_scheduler_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 6\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_service_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_service_utilities_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 6\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_static_logging_check.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_task_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_task_management_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_ui_app_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/behavior/test_user_context_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 7\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_user_management_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_utilities_demo.py`\n- **Complexity**: HIGH\n- **Dependencies**: 23\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage\n\n#### `tests/conftest.py`\n- **Complexity**: HIGH\n- **Dependencies**: 28\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage\n\n#### `tests/debug_file_paths.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/integration/test_account_lifecycle.py`\n- **Complexity**: HIGH\n- **Dependencies**: 65\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage\n\n#### `tests/integration/test_account_management.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 13\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/integration/test_user_creation.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 11\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/test_isolation.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/test_utilities.py`\n- **Complexity**: HIGH\n- **Dependencies**: 23\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage\n\n#### `tests/ui/test_account_creation_ui.py`\n- **Complexity**: HIGH\n- **Dependencies**: 25\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage\n\n#### `tests/ui/test_channel_management_dialog_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/ui/test_dialog_behavior.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 11\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/ui/test_dialog_coverage_expansion.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/ui/test_dialogs.py`\n- **Complexity**: LOW\n- **Dependencies**: 7\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/ui/test_ui_widgets_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/ui/test_user_profile_dialog_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/ui/test_widget_behavior.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 12\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/ui/test_widget_behavior_simple.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/unit/test_cleanup.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/unit/test_config.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/unit/test_error_handling.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/unit/test_file_operations.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/unit/test_logging_components.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/unit/test_no_direct_env_mutation_policy.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/unit/test_no_prints_policy.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/unit/test_recurring_tasks.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/unit/test_schedule_management.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/unit/test_user_data_loader_idempotency.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/unit/test_user_data_loader_order_insensitivity.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/unit/test_user_management.py`\n- **Complexity**: LOW\n- **Dependencies**: 6\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/unit/test_validation.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `ui/dialogs/account_creator_dialog.py`\n- **Complexity**: HIGH\n- **Dependencies**: 21\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `ui/dialogs/admin_panel.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/category_management_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 7\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/channel_management_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/checkin_management_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 8\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/schedule_editor_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 8\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/task_completion_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/task_crud_dialog.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 13\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/task_edit_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/task_management_dialog.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/user_profile_dialog.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generate_ui_files.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/account_creator_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/admin_panel_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/category_management_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/category_selection_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/channel_management_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/channel_selection_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/checkin_element_template_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/checkin_management_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/checkin_settings_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/dynamic_list_field_template_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/period_row_template_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/schedule_editor_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/tag_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/task_completion_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/task_crud_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/task_edit_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/task_management_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/task_settings_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/user_profile_management_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/user_profile_settings_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/ui_app_qt.py`\n- **Complexity**: HIGH\n- **Dependencies**: 31\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `ui/widgets/category_selection_widget.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/channel_selection_widget.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/checkin_settings_widget.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 11\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/dynamic_list_container.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/dynamic_list_field.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/period_row_widget.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/tag_widget.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/task_settings_widget.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/user_profile_settings_widget.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `user/context_manager.py`\n- **Complexity**: LOW\n- **Dependencies**: 8\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `user/user_context.py`\n- **Complexity**: LOW\n- **Dependencies**: 6\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `user/user_preferences.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n[DOC] GENERATING UPDATED DEPENDENCY SECTIONS...\n\n================================================================================\nUPDATED DEPENDENCY SECTIONS TO ADD:\n================================================================================\n\n#### `ai/cache_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `ai/chatbot.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger, core.response_tracking, core.response_tracking, core.response_tracking, core.user_data_handlers, user.context_manager\n- **Used by**: [Add usage information]\n\n#### `ai/context_builder.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.response_tracking, core.user_data_handlers, user.context_manager\n- **Used by**: [Add usage information]\n\n#### `ai/conversation_history.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `ai/prompt_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `communication/command_handlers/analytics_handler.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.error_handling, core.logger, core.response_tracking, core.response_tracking, core.user_data_handlers, tasks.task_management, tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `communication/command_handlers/checkin_handler.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.response_tracking\n- **Used by**: [Add usage information]\n\n#### `communication/command_handlers/interaction_handlers.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.checkin_analytics, core.error_handling, core.logger, core.response_tracking, core.response_tracking, core.response_tracking, core.schedule_management, core.schedule_management, core.schedule_management, core.schedule_management, core.schedule_management, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_management, core.user_management, core.user_management, tasks.task_management, tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `communication/command_handlers/profile_handler.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.response_tracking, core.user_data_handlers, tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `communication/command_handlers/schedule_handler.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.schedule_management, core.schedule_management, core.schedule_management, core.schedule_management, core.user_management, core.user_management\n- **Used by**: [Add usage information]\n\n#### `communication/command_handlers/task_handler.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.checkin_analytics, core.error_handling, core.logger, tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `communication/communication_channels/base/base_channel.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `communication/communication_channels/base/command_registry.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger\n- **Used by**: [Add usage information]\n\n#### `communication/communication_channels/base/message_formatter.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger\n- **Used by**: [Add usage information]\n\n#### `communication/communication_channels/base/rich_formatter.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger\n- **Used by**: [Add usage information]\n\n#### `communication/communication_channels/discord/api_client.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `communication/communication_channels/discord/bot.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_management\n- **Used by**: [Add usage information]\n\n#### `communication/communication_channels/discord/event_handler.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.user_management\n- **Used by**: [Add usage information]\n\n#### `communication/communication_channels/email/bot.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `communication/core/channel_monitor.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger\n- **Used by**: [Add usage information]\n\n#### `communication/core/channel_orchestrator.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.error_handling, core.error_handling, core.error_handling, core.error_handling, core.error_handling, core.error_handling, core.file_operations, core.logger, core.logger, core.message_management, core.message_management, core.message_management, core.message_management, core.response_tracking, core.schedule_management, core.schemas, core.service_utilities, core.user_data_handlers, tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `communication/core/factory.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `communication/core/retry_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger\n- **Used by**: [Add usage information]\n\n#### `communication/message_processing/command_parser.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger, core.logger\n- **Used by**: [Add usage information]\n\n#### `communication/message_processing/conversation_flow_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.checkin_dynamic_manager, core.checkin_dynamic_manager, core.error_handling, core.logger, core.logger, core.logger, core.response_tracking, core.response_tracking, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `communication/message_processing/interaction_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger, core.response_tracking, core.response_tracking, core.user_management, tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `communication/message_processing/message_router.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `core/auto_cleanup.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger, core.logger, core.message_management, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `core/backup_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.error_handling, core.logger, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `core/checkin_analytics.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.response_tracking\n- **Used by**: [Add usage information]\n\n#### `core/checkin_dynamic_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.file_operations, core.logger\n- **Used by**: [Add usage information]\n\n#### `core/config.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `core/error_handling.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.service_utilities\n- **Used by**: [Add usage information]\n\n#### `core/file_auditor.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger\n- **Used by**: [Add usage information]\n\n#### `core/file_operations.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_auditor, core.logger, core.message_management, core.user_data_manager\n- **Used by**: [Add usage information]\n\n#### `core/logger.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config\n- **Used by**: [Add usage information]\n\n#### `core/message_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_operations, core.logger, core.schemas, core.user_data_manager, core.user_data_manager, core.user_data_manager\n- **Used by**: [Add usage information]\n\n#### `core/response_tracking.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_operations, core.logger, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `core/schedule_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.service_utilities, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, user.user_context\n- **Used by**: [Add usage information]\n\n#### `core/schedule_utilities.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger\n- **Used by**: [Add usage information]\n\n#### `core/scheduler.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.logger, core.logger, core.schedule_management, core.schedule_management, core.scheduler, core.scheduler, core.scheduler, core.service_utilities, core.user_data_handlers, core.user_data_handlers, core.user_management, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, user.user_context\n- **Used by**: [Add usage information]\n\n#### `core/schemas.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.message_management\n- **Used by**: [Add usage information]\n\n#### `core/service.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.auto_cleanup, core.config, core.config, core.config, core.config, core.error_handling, core.file_auditor, core.file_auditor, core.file_operations, core.logger, core.logger, core.scheduler, core.user_data_handlers, core.user_data_handlers, core.user_management\n- **Used by**: [Add usage information]\n\n#### `core/service_utilities.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.error_handling, core.file_auditor, core.logger\n- **Used by**: [Add usage information]\n\n#### `core/ui_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, ui.widgets.period_row_widget, ui.widgets.period_row_widget\n- **Used by**: [Add usage information]\n\n#### `core/user_data_handlers.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config, core.config, core.config, core.config, core.config, core.config, core.error_handling, core.file_operations, core.file_operations, core.logger, core.message_management, core.schemas, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_validation, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management\n- **Used by**: [Add usage information]\n\n#### `core/user_data_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_operations, core.logger, core.message_management, core.response_tracking, core.response_tracking, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_management, core.user_management\n- **Used by**: [Add usage information]\n\n#### `core/user_data_validation.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger, core.message_management, core.schemas, core.schemas, core.schemas, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `core/user_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config, core.config, core.config, core.config, core.error_handling, core.file_operations, core.logger, core.message_management, core.schemas, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_validation\n- **Used by**: [Add usage information]\n\n#### `run_mhm.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling\n- **Used by**: [Add usage information]\n\n#### `tasks/task_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_operations, core.logger, core.service, core.service, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_account_management_real_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.file_operations, core.message_management, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tasks.task_management, tests.conftest, tests.conftest, tests.conftest, tests.conftest, tests.conftest, tests.conftest, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_ai_chatbot_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.response_tracking, core.user_data_handlers, core.user_data_handlers, core.user_management, tests.conftest, tests.test_utilities, tests.test_utilities, tests.test_utilities, user.context_manager\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_ai_context_builder_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_ai_context_builder_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_ai_conversation_history_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_auto_cleanup_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.auto_cleanup\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_backup_manager_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.backup_manager, core.config, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_checkin_analytics_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.checkin_analytics\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_communication_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_communication_command_parser_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_communication_factory_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_communication_interaction_manager_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_communication_manager_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_config_coverage_expansion_phase3_simple.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_conversation_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, core.user_management, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_core_message_management_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.message_management\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_core_service_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.service\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_discord_bot_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.user_data_handlers, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tasks.task_management, tasks.task_management, tasks.task_management, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_dynamic_checkin_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.checkin_dynamic_manager\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_error_handling_coverage_expansion_phase3_final.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_interaction_handlers_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, core.user_management, core.user_management, core.user_management, tasks.task_management, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_interaction_handlers_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, tasks.task_management, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_logger_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.logger\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_logger_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_logger_coverage_expansion_phase3_simple.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_message_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.message_management\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_observability_logging.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_response_tracking_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.response_tracking, core.response_tracking, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_schedule_management_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.schedule_management, core.schedule_management, core.schedule_management, core.schedule_management\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_scheduler_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.scheduler, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_scheduler_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.scheduler, core.user_data_handlers, core.user_data_handlers, tests.test_isolation, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_service_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.service\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_service_utilities_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.service_utilities, core.service_utilities, core.user_data_validation, tests.conftest, tests.conftest, tests.conftest\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_task_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_task_management_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_ui_app_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: ui.ui_app_qt\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_user_context_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.schedule_utilities, core.user_management, core.user_management, tests.test_utilities, user.context_manager, user.user_context, user.user_preferences\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_user_management_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_management, core.user_management, core.user_management, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_utilities_demo.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/conftest.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config, core.config, core.config, core.config, core.config, core.config, core.logger, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/debug_file_paths.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `tests/integration/test_account_lifecycle.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tests.conftest, tests.conftest, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/integration/test_account_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_data_validation, core.user_management, tests.conftest, tests.conftest, tests.test_utilities, user.user_context\n- **Used by**: [Add usage information]\n\n#### `tests/integration/test_user_creation.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, core.user_data_validation, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/test_isolation.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.scheduler\n- **Used by**: [Add usage information]\n\n#### `tests/test_utilities.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config, core.config, core.file_operations, core.user_data_handlers, core.user_data_handlers, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tests.conftest\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_account_creation_ui.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_data_validation, core.user_management, tests.conftest, tests.conftest, tests.conftest, tests.test_utilities, tests.test_utilities, tests.test_utilities, ui.dialogs.account_creator_dialog, ui.widgets.category_selection_widget, ui.widgets.channel_selection_widget, ui.widgets.checkin_settings_widget, ui.widgets.task_settings_widget\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_channel_management_dialog_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, core.user_data_validation, ui.dialogs.channel_management_dialog\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_dialog_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_data_handlers, ui.dialogs.category_management_dialog, ui.dialogs.channel_management_dialog, ui.dialogs.checkin_management_dialog, ui.dialogs.schedule_editor_dialog, ui.dialogs.task_completion_dialog, ui.dialogs.task_crud_dialog, ui.dialogs.task_edit_dialog, ui.dialogs.task_management_dialog, ui.dialogs.user_profile_dialog\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_dialog_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.schedule_management, core.user_data_handlers, tests.test_utilities, ui.dialogs.schedule_editor_dialog, ui.dialogs.task_completion_dialog, ui.dialogs.task_crud_dialog, ui.dialogs.task_edit_dialog, ui.dialogs.user_profile_dialog\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_dialogs.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, core.user_data_handlers, tests.conftest, tests.conftest, tests.conftest, ui.dialogs.account_creator_dialog, ui.dialogs.user_profile_dialog\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_ui_widgets_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: ui.widgets.dynamic_list_container, ui.widgets.period_row_widget, ui.widgets.tag_widget\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_user_profile_dialog_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tests.test_utilities, ui.dialogs.user_profile_dialog\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_widget_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_data_handlers, tests.test_utilities, ui.widgets.category_selection_widget, ui.widgets.channel_selection_widget, ui.widgets.checkin_settings_widget, ui.widgets.dynamic_list_container, ui.widgets.dynamic_list_field, ui.widgets.period_row_widget, ui.widgets.tag_widget, ui.widgets.task_settings_widget, ui.widgets.user_profile_settings_widget\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_widget_behavior_simple.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: ui.widgets.category_selection_widget, ui.widgets.channel_selection_widget, ui.widgets.checkin_settings_widget, ui.widgets.dynamic_list_container, ui.widgets.dynamic_list_field, ui.widgets.tag_widget, ui.widgets.tag_widget, ui.widgets.task_settings_widget, ui.widgets.user_profile_settings_widget\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_cleanup.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.logger\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_config.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_error_handling.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_file_operations.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.error_handling, core.file_operations, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_logging_components.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.logger\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_recurring_tasks.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_schedule_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.schedule_management\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_user_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.user_data_handlers, core.user_management, core.user_management, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_validation.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_validation\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/account_creator_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.file_operations, core.file_operations, core.logger, core.message_management, core.service, core.user_data_manager, core.user_data_validation, core.user_data_validation, core.user_data_validation, core.user_management, tasks.task_management, tasks.task_management, ui.dialogs.user_profile_dialog, ui.dialogs.user_profile_dialog, ui.generated.account_creator_dialog_pyqt, ui.widgets.category_selection_widget, ui.widgets.channel_selection_widget, ui.widgets.checkin_settings_widget, ui.widgets.task_settings_widget, user.user_context\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/category_management_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.user_data_handlers, core.user_data_handlers, ui.generated.category_management_dialog_pyqt, ui.widgets.category_selection_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/channel_management_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_data_handlers, core.user_data_validation, ui.generated.channel_management_dialog_pyqt, ui.widgets.channel_selection_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/checkin_management_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.user_data_handlers, core.user_data_handlers, core.user_data_validation, ui.generated.checkin_management_dialog_pyqt, ui.widgets.checkin_settings_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/schedule_editor_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger, core.schedule_management, core.ui_management, core.user_data_validation, ui.generated.schedule_editor_dialog_pyqt, ui.widgets.period_row_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/task_completion_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, ui.generated.task_completion_dialog_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/task_crud_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, ui.dialogs.task_completion_dialog, ui.dialogs.task_edit_dialog, ui.dialogs.task_edit_dialog, ui.generated.task_crud_dialog_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/task_edit_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, tasks.task_management, ui.generated.task_edit_dialog_pyqt, ui.widgets.tag_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/task_management_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.user_data_handlers, core.user_data_handlers, core.user_data_validation, tasks.task_management, ui.generated.task_management_dialog_pyqt, ui.widgets.task_settings_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/user_profile_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.user_data_handlers, core.user_data_validation, core.user_management, ui.generated.user_profile_management_dialog_pyqt, ui.generated.user_profile_settings_widget_pyqt, ui.widgets.dynamic_list_container, ui.widgets.user_profile_settings_widget\n- **Used by**: [Add usage information]\n\n#### `ui/ui_app_qt.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.auto_cleanup, core.auto_cleanup, core.config, core.config, core.config, core.config, core.config, core.config, core.error_handling, core.logger, core.logger, core.scheduler, core.scheduler, core.scheduler, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_data_validation, ui.dialogs.account_creator_dialog, ui.dialogs.category_management_dialog, ui.dialogs.channel_management_dialog, ui.dialogs.checkin_management_dialog, ui.dialogs.schedule_editor_dialog, ui.dialogs.task_crud_dialog, ui.dialogs.task_management_dialog, ui.dialogs.user_profile_dialog, ui.generated.admin_panel_pyqt, user.user_context\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/category_selection_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_data_validation, ui.generated.category_selection_widget_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/channel_selection_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_management, ui.generated.channel_selection_widget_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/checkin_settings_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.checkin_dynamic_manager, core.checkin_dynamic_manager, core.checkin_dynamic_manager, core.error_handling, core.logger, core.schedule_management, core.ui_management, core.user_data_handlers, core.user_data_handlers, ui.generated.checkin_settings_widget_pyqt, ui.widgets.period_row_widget\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/dynamic_list_container.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_management, ui.widgets.dynamic_list_field\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/dynamic_list_field.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: ui.generated.dynamic_list_field_template_pyqt, ui.widgets.dynamic_list_container, ui.widgets.dynamic_list_container, ui.widgets.dynamic_list_container\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/period_row_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, ui.generated.period_row_template_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/tag_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.user_data_handlers, tasks.task_management, ui.generated.tag_widget_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/task_settings_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.ui_management, core.user_data_handlers, tasks.task_management, ui.generated.task_settings_widget_pyqt, ui.widgets.period_row_widget, ui.widgets.tag_widget\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/user_profile_settings_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_management, ui.generated.user_profile_settings_widget_pyqt, ui.widgets.dynamic_list_container\n- **Used by**: [Add usage information]\n\n#### `user/context_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.message_management, core.response_tracking, core.schedule_utilities, core.user_data_handlers, user.user_context, user.user_preferences\n- **Used by**: [Add usage information]\n\n#### `user/user_context.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_utilities, core.user_data_handlers, core.user_data_handlers, user.user_preferences\n- **Used by**: [Add usage information]\n\n#### `user/user_preferences.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n[CIRC] CIRCULAR DEPENDENCY ANALYSIS:\n   [OK] No circular dependencies detected\n",
      "error": "",
      "returncode": 0
    },
    "analyze_documentation": {
      "success": true,
      "output": "{\n  \"documents\": [\n    \"ARCHITECTURE.md\",\n    \"DEVELOPMENT_WORKFLOW.md\",\n    \"DOCUMENTATION_GUIDE.md\",\n    \"HOW_TO_RUN.md\",\n    \"QUICK_REFERENCE.md\",\n    \"README.md\",\n    \"TODO.md\",\n    \"ai_development_docs/AI_CHANGELOG.md\",\n    \"ai_development_docs/AI_DEVELOPMENT_WORKFLOW.md\",\n    \"ai_development_docs/AI_DOCUMENTATION_GUIDE.md\",\n    \"ai_development_docs/AI_REFERENCE.md\",\n    \"ai_development_docs/AI_SESSION_STARTER.md\",\n    \"development_docs/FUNCTION_REGISTRY_DETAIL.md\",\n    \"development_docs/MODULE_DEPENDENCIES_DETAIL.md\"\n  ],\n  \"duplicates\": [],\n  \"missing\": [],\n  \"placeholders\": []\n}\n",
      "error": "",
      "returncode": 0,
      "data": {
        "documents": [
          "ARCHITECTURE.md",
          "DEVELOPMENT_WORKFLOW.md",
          "DOCUMENTATION_GUIDE.md",
          "HOW_TO_RUN.md",
          "QUICK_REFERENCE.md",
          "README.md",
          "TODO.md",
          "ai_development_docs/AI_CHANGELOG.md",
          "ai_development_docs/AI_DEVELOPMENT_WORKFLOW.md",
          "ai_development_docs/AI_DOCUMENTATION_GUIDE.md",
          "ai_development_docs/AI_REFERENCE.md",
          "ai_development_docs/AI_SESSION_STARTER.md",
          "development_docs/FUNCTION_REGISTRY_DETAIL.md",
          "development_docs/MODULE_DEPENDENCIES_DETAIL.md"
        ],
        "duplicates": [],
        "missing": [],
        "placeholders": []
      },
      "issues_found": false
    }
  }
}