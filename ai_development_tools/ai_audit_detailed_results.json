{
  "timestamp": "2025-09-24T12:13:36.639765",
  "successful": [
    "function_discovery",
    "decision_support",
    "audit_function_registry",
    "audit_module_dependencies",
    "analyze_documentation"
  ],
  "failed": [],
  "results": {
    "function_discovery": {
      "success": true,
      "output": "[SCAN] Scanning for all functions...\nFound 2668 functions.\n\n=== FUNCTION DISCOVERY SUMMARY ===\n\nHANDLERS (578):\n  - get_last_cleanup_timestamp (file: auto_cleanup.py, complexity: 57)\n  - update_cleanup_timestamp (file: auto_cleanup.py, complexity: 63)\n  - _get_cleanup_status__get_never_cleaned_status (file: auto_cleanup.py, complexity: 15)\n  - _get_cleanup_status__calculate_days_since_cleanup (file: auto_cleanup.py, complexity: 36)\n  - _get_cleanup_status__format_next_cleanup_date (file: auto_cleanup.py, complexity: 36)\n  - _get_cleanup_status__build_status_response (file: auto_cleanup.py, complexity: 22)\n  - get_cleanup_status (file: auto_cleanup.py, complexity: 58)\n  - create_automatic_backup (file: backup_manager.py, complexity: 63)\n  - _validate_system_state__validate_user_index (file: backup_manager.py, complexity: 150)\n  - _validate_system_state__ensure_user_data_directory (file: backup_manager.py, complexity: 68)\n  ...and 568 more.\n\nTESTS (1598):\n  - _validate_backup__check_file_exists (file: backup_manager.py, complexity: 50)\n  - _validate_backup__check_file_integrity (file: backup_manager.py, complexity: 45)\n  - verify_file_access (file: file_operations.py, complexity: 48)\n  - _is_testing_environment (file: logger.py, complexity: 62)\n  - apply_test_context_formatter_to_all_loggers (file: logger.py, complexity: 98)\n  - _check_and_fix_logging__test_logging_functionality (file: service.py, complexity: 53)\n  - _check_and_fix_logging__ensure_log_file_exists (file: service.py, complexity: 54)\n  - _check_and_fix_logging__read_recent_log_content (file: service.py, complexity: 65)\n  - _check_and_fix_logging__verify_test_message_present (file: service.py, complexity: 52)\n  - _check_and_fix_logging__check_recent_activity_timestamps (file: service.py, complexity: 92)\n  ...and 1588 more.\n\nCOMPLEX (286):\n  - should_run_cleanup (file: auto_cleanup.py, complexity: 96)\n  - find_pycache_dirs (file: auto_cleanup.py, complexity: 63)\n  - find_pyc_files (file: auto_cleanup.py, complexity: 73)\n  - _calculate_cache_size__calculate_pycache_directories_size (file: auto_cleanup.py, complexity: 110)\n  - _calculate_cache_size__calculate_pyc_files_size (file: auto_cleanup.py, complexity: 65)\n  - _perform_cleanup__log_discovery_results (file: auto_cleanup.py, complexity: 76)\n  - _perform_cleanup__remove_cache_directories (file: auto_cleanup.py, complexity: 76)\n  - _perform_cleanup__remove_cache_files_list (file: auto_cleanup.py, complexity: 76)\n  - _perform_cleanup__log_completion_results (file: auto_cleanup.py, complexity: 56)\n  - perform_cleanup (file: auto_cleanup.py, complexity: 102)\n  ...and 276 more.\n\nUNDOCUMENTED (60):\n  - __init__ (file: logger.py, complexity: 40)\n  - __init__ (file: logger.py, complexity: 28)\n  - filter (file: logger.py, complexity: 39)\n  - __init__ (file: logger.py, complexity: 26)\n  - debug (file: logger.py, complexity: 8)\n  - info (file: logger.py, complexity: 8)\n  - warning (file: logger.py, complexity: 8)\n  - error (file: logger.py, complexity: 8)\n  - critical (file: logger.py, complexity: 8)\n  - sort_key (file: schedule_management.py, complexity: 39)\n  ...and 50 more.\n\nSPECIAL_METHODS (11):\n  - __init__ (file: checkin_analytics.py, complexity: 6)\n  - __init__ (file: error_handling.py, complexity: 14)\n  - __init__ (file: error_handling.py, complexity: 14)\n  - __init__ (file: error_handling.py, complexity: 14)\n  - __init__ (file: error_handling.py, complexity: 14)\n  - __init__ (file: logger.py, complexity: 13)\n  - __init__ (file: service_utilities.py, complexity: 19)\n  - __init__ (file: ui_app_qt.py, complexity: 11)\n  - __post_init__ (file: dynamic_list_container.py, complexity: 13)\n  - __init__ (file: test_communication_factory_coverage_expansion.py, complexity: 19)\n  ...and 1 more.\n\nOTHER (135):\n  - calculate_cache_size (file: auto_cleanup.py, complexity: 35)\n  - _perform_cleanup__discover_cache_files (file: auto_cleanup.py, complexity: 39)\n  - _perform_cleanup__remove_cache_files (file: auto_cleanup.py, complexity: 38)\n  - __init__ (file: checkin_dynamic_manager.py, complexity: 23)\n  - __init__ (file: error_handling.py, complexity: 25)\n  - recover (file: error_handling.py, complexity: 24)\n  - __enter__ (file: error_handling.py, complexity: 8)\n  - __exit__ (file: error_handling.py, complexity: 34)\n  - ensure_logs_directory (file: logger.py, complexity: 49)\n  - disable_module_logging (file: logger.py, complexity: 42)\n  ...and 125 more.\n\nNote: 11 special Python methods excluded from undocumented count\n\nTip: Use this output to quickly find handlers, tests, complex, or undocumented functions.\n",
      "error": ""
    },
    "decision_support": {
      "success": true,
      "output": "[SCAN] Gathering actionable insights for AI decision-making...\n\n=== AI DECISION SUPPORT DASHBOARD ===\nTotal functions: 2718\n\n[WARN] High Complexity Functions (>50 nodes): 1974\n  - get_last_cleanup_timestamp (file: auto_cleanup.py, complexity: 57)\n  - update_cleanup_timestamp (file: auto_cleanup.py, complexity: 63)\n  - should_run_cleanup (file: auto_cleanup.py, complexity: 96)\n  - find_pycache_dirs (file: auto_cleanup.py, complexity: 63)\n  - find_pyc_files (file: auto_cleanup.py, complexity: 73)\n  - _calculate_cache_size__calculate_pycache_directories_size (file: auto_cleanup.py, complexity: 110)\n  - _calculate_cache_size__calculate_pyc_files_size (file: auto_cleanup.py, complexity: 65)\n  - _perform_cleanup__log_discovery_results (file: auto_cleanup.py, complexity: 76)\n  - _perform_cleanup__remove_cache_directories (file: auto_cleanup.py, complexity: 76)\n  - _perform_cleanup__remove_cache_files_list (file: auto_cleanup.py, complexity: 76)\n  ...and 1964 more.\n\n[DOC] Undocumented Handlers: 66\n  - validate_account_dict (file: schemas.py)\n  - validate_preferences_dict (file: schemas.py)\n  - validate_schedules_dict (file: schemas.py)\n  - validate_messages_file_dict (file: schemas.py)\n  - _validate_email (file: schemas.py)\n  - _validate_discord_id (file: schemas.py)\n  - _validate_timezone (file: schemas.py)\n  - validate_schedule_periods__validate_time_format (file: user_data_validation.py)\n  - _ensure_default_loaders_once (file: user_management.py)\n  - manage_communication_settings (file: ui_app_qt.py)\n  ...and 56 more.\n\n[DUPE] Duplicate Function Names: 128\n  - __init__: backup_manager.py, checkin_analytics.py, checkin_dynamic_manager.py, config.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py, logger.py, logger.py, logger.py, logger.py, logger.py, logger.py, scheduler.py, service.py, service_utilities.py, user_data_manager.py, ui_app_qt.py, ui_app_qt.py, account_creator_dialog.py, admin_panel.py, category_management_dialog.py, channel_management_dialog.py, checkin_management_dialog.py, schedule_editor_dialog.py, task_completion_dialog.py, task_crud_dialog.py, task_edit_dialog.py, task_management_dialog.py, user_profile_dialog.py, category_selection_widget.py, channel_selection_widget.py, checkin_settings_widget.py, dynamic_list_container.py, dynamic_list_field.py, period_row_widget.py, tag_widget.py, task_settings_widget.py, user_profile_settings_widget.py, context_manager.py, user_preferences.py, conftest.py, conftest.py, test_communication_factory_coverage_expansion.py, test_communication_factory_coverage_expansion.py, test_cleanup.py\n  - get_mood_trends: checkin_analytics.py, test_interaction_handlers_coverage_expansion.py\n  - get_checkin_history: checkin_analytics.py, test_interaction_handlers_coverage_expansion.py\n  - can_handle: error_handling.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py\n  - recover: error_handling.py, error_handling.py, error_handling.py, error_handling.py, error_handling.py\n  ...and 123 more.\n\n=== SUGGESTED NEXT STEPS ===\n- Refactor high-complexity functions for maintainability.\n- Add docstrings to undocumented handler/utility functions.\n- Review duplicate function names for possible consolidation or renaming.\n\nTip: Use this dashboard before major refactoring, documentation, or architectural changes.\n",
      "error": ""
    },
    "audit_function_registry": {
      "success": true,
      "output": "[SCAN] Scanning all Python files...\n[DOC] Parsing FUNCTION_REGISTRY_DETAIL.md...\n\n================================================================================\nFUNCTION REGISTRY AUDIT REPORT\n================================================================================\n\n[STATS] OVERALL STATISTICS:\n   Files scanned: 139\n   Functions found: 2718\n   Classes found: 271\n   Functions documented: 2575\n   Coverage: 94.7%\n\n[MISS] MISSING FROM REGISTRY:\n   [FILE] core/auto_cleanup.py:\n      - _calculate_cache_size__calculate_pyc_files_size\n      - _calculate_cache_size__calculate_pycache_directories_size\n      - _get_cleanup_status__build_status_response\n      - _get_cleanup_status__calculate_days_since_cleanup\n      - _get_cleanup_status__format_next_cleanup_date\n      - _get_cleanup_status__get_never_cleaned_status\n      - _perform_cleanup__discover_cache_files\n      - _perform_cleanup__log_completion_results\n      - _perform_cleanup__log_discovery_results\n      - _perform_cleanup__remove_cache_directories\n      - _perform_cleanup__remove_cache_files\n      - _perform_cleanup__remove_cache_files_list\n   [FILE] core/backup_manager.py:\n      - _create_backup__cleanup_old_backups\n      - _create_backup__create_zip_file\n      - _create_backup__setup_backup\n      - _validate_backup__check_file_exists\n      - _validate_backup__check_file_integrity\n      - _validate_backup__validate_content_requirements\n      - _validate_backup__validate_manifest\n      - _validate_backup__validate_zip_file\n      - _validate_system_state__ensure_user_data_directory\n      - _validate_system_state__validate_user_index\n   [FILE] core/logger.py:\n      - apply_test_context_formatter_to_all_loggers\n      - format\n   [FILE] core/scheduler.py:\n      - _select_task_for_reminder__calculate_due_date_weight\n      - _select_task_for_reminder__calculate_priority_weight\n      - _select_task_for_reminder__calculate_task_weights\n      - _select_task_for_reminder__handle_edge_cases\n      - _select_task_for_reminder__select_task_by_weight\n      - clear_all_accumulated_jobs\n      - clear_all_accumulated_jobs_standalone\n      - perform_daily_log_archival\n   [FILE] core/service.py:\n      - _check_and_fix_logging__check_recent_activity_timestamps\n      - _check_and_fix_logging__ensure_log_file_exists\n      - _check_and_fix_logging__force_restart_logging_system\n      - _check_and_fix_logging__read_recent_log_content\n      - _check_and_fix_logging__test_logging_functionality\n      - _check_and_fix_logging__verify_test_message_present\n      - _check_reschedule_requests__cleanup_request_file\n      - _check_reschedule_requests__discover_request_files\n      - _check_reschedule_requests__get_base_directory\n      - _check_reschedule_requests__handle_processing_error\n      - _check_reschedule_requests__parse_request_file\n      - _check_reschedule_requests__process_valid_request\n      - _check_reschedule_requests__validate_request_data\n      - _check_test_message_requests__cleanup_request_file\n      - _check_test_message_requests__discover_request_files\n      - _check_test_message_requests__get_base_directory\n      - _check_test_message_requests__handle_processing_error\n      - _check_test_message_requests__parse_request_file\n      - _check_test_message_requests__process_valid_request\n      - _check_test_message_requests__validate_request_data\n      - _cleanup_test_message_requests__get_base_directory\n      - _cleanup_test_message_requests__is_test_message_request_file\n      - _cleanup_test_message_requests__remove_request_file\n   [FILE] ui/ui_app_qt.py:\n      - _send_test_message__get_selected_category\n      - _send_test_message__validate_service_running\n      - _send_test_message__validate_user_selection\n   [FILE] ui/widgets/user_profile_settings_widget.py:\n      - _get_personalization_data__ensure_required_fields\n      - _get_personalization_data__extract_basic_fields\n      - _get_personalization_data__extract_date_of_birth\n      - _get_personalization_data__extract_dynamic_containers\n      - _get_personalization_data__extract_gender_identity\n      - _get_personalization_data__extract_loved_ones\n      - _get_personalization_data__extract_notes\n   [FILE] tests/conftest.py:\n      - __init__\n      - archive_old_backups\n      - check_rotation_needed\n      - cleanup_old_archives\n      - format\n      - log_lifecycle_maintenance\n      - perform_lifecycle_maintenance\n      - register_log_file\n      - rotate_all_logs\n      - session_log_rotation_check\n   [FILE] tests/behavior/test_auto_cleanup_behavior.py:\n      - mock_exists_with_changes\n      - mock_walk_with_error\n      - test_calculate_cache_size_concurrent_file_changes_real_behavior\n      - test_calculate_cache_size_empty_inputs_real_behavior\n      - test_calculate_cache_size_file_corruption_handling_real_behavior\n      - test_calculate_cache_size_large_cache_scenario_real_behavior\n      - test_calculate_cache_size_nested_directory_structure_real_behavior\n      - test_calculate_cache_size_nonexistent_files_real_behavior\n      - test_calculate_cache_size_permission_error_simulation_real_behavior\n      - test_get_cleanup_status_29_days_real_behavior\n      - test_get_cleanup_status_31_days_real_behavior\n      - test_get_cleanup_status_corrupted_tracker_file_real_behavior\n      - test_get_cleanup_status_empty_tracker_file_real_behavior\n      - test_get_cleanup_status_exactly_30_days_real_behavior\n      - test_get_cleanup_status_invalid_timestamp_real_behavior\n      - test_get_cleanup_status_missing_timestamp_field_real_behavior\n      - test_get_cleanup_status_very_old_cleanup_real_behavior\n      - test_get_cleanup_status_very_recent_cleanup_real_behavior\n   [FILE] tests/behavior/test_core_service_coverage_expansion.py:\n      - mock_remove_with_disappearing_files\n      - mock_remove_with_partial_failure\n      - test_check_and_fix_logging_basic_success\n      - test_check_and_fix_logging_check_recent_activity_timestamps_invalid_timestamp\n      - test_check_and_fix_logging_check_recent_activity_timestamps_old_activity\n      - test_check_and_fix_logging_check_recent_activity_timestamps_recent_activity\n      - test_check_and_fix_logging_file_creation_failure\n      - test_check_and_fix_logging_file_missing\n      - test_check_and_fix_logging_old_activity_restart\n      - test_check_and_fix_logging_read_recent_log_content_large_file\n      - test_check_and_fix_logging_read_recent_log_content_small_file\n      - test_check_and_fix_logging_recent_activity_detected\n      - test_check_and_fix_logging_verify_test_message_present_found\n      - test_check_and_fix_logging_verify_test_message_present_not_found\n      - test_check_reschedule_requests_handle_processing_error_cleanup_failure\n      - test_check_reschedule_requests_handle_processing_error_successful_cleanup\n      - test_check_reschedule_requests_invalid_file\n      - test_check_reschedule_requests_json_error\n      - test_check_reschedule_requests_no_files\n      - test_check_reschedule_requests_old_file_processed\n      - test_check_reschedule_requests_valid_file\n      - test_check_reschedule_requests_validate_request_data_missing_fields\n      - test_check_reschedule_requests_validate_request_data_old_timestamp\n      - test_check_test_message_requests_communication_error\n      - test_check_test_message_requests_handle_processing_error_cleanup_failure\n      - test_check_test_message_requests_handle_processing_error_successful_cleanup\n      - test_check_test_message_requests_invalid_file\n      - test_check_test_message_requests_json_error\n      - test_check_test_message_requests_no_communication_manager\n      - test_check_test_message_requests_no_files\n      - test_check_test_message_requests_valid_file\n      - test_cleanup_test_message_requests_concurrent_access_simulation_real_behavior\n      - test_cleanup_test_message_requests_directory_access_error_real_behavior\n      - test_cleanup_test_message_requests_empty_directory_real_behavior\n      - test_cleanup_test_message_requests_file_in_use_error_real_behavior\n      - test_cleanup_test_message_requests_file_permission_error_real_behavior\n      - test_cleanup_test_message_requests_large_number_of_files_real_behavior\n      - test_cleanup_test_message_requests_mixed_file_types_real_behavior\n      - test_cleanup_test_message_requests_partial_failure_real_behavior\n      - test_cleanup_test_message_requests_remove_request_file_generic_error_real_behavior\n      - test_cleanup_test_message_requests_remove_request_file_not_found_error_real_behavior\n      - test_cleanup_test_message_requests_remove_request_file_permission_error_real_behavior\n      - test_cleanup_test_message_requests_remove_request_file_success_real_behavior\n   [FILE] tests/behavior/test_email_bot_behavior.py:\n      - test_email_bot_async_shutdown_method_behavior\n      - test_email_bot_status_checking_behavior\n   [FILE] tests/behavior/test_message_behavior.py:\n      - test_get_recent_messages_empty\n      - test_get_recent_messages_success\n   [FILE] tests/behavior/test_scheduler_coverage_expansion.py:\n      - test_select_task_for_reminder_due_today_weighting_real_behavior\n      - test_select_task_for_reminder_empty_list_real_behavior\n      - test_select_task_for_reminder_exception_handling_real_behavior\n      - test_select_task_for_reminder_invalid_date_format_real_behavior\n      - test_select_task_for_reminder_large_task_list_real_behavior\n      - test_select_task_for_reminder_month_proximity_weighting_real_behavior\n      - test_select_task_for_reminder_no_due_date_weighting_real_behavior\n      - test_select_task_for_reminder_overdue_weighting_real_behavior\n      - test_select_task_for_reminder_priority_weighting_real_behavior\n      - test_select_task_for_reminder_single_task_real_behavior\n      - test_select_task_for_reminder_week_proximity_weighting_real_behavior\n      - test_select_task_for_reminder_zero_weights_fallback_real_behavior\n   [FILE] tests/behavior/test_ui_app_behavior.py:\n      - test_confirm_test_message_user_cancels_real_behavior\n      - test_confirm_test_message_user_confirms_real_behavior\n      - test_send_actual_test_message_creates_request_file_real_behavior\n      - test_send_test_message_edge_case_negative_index_real_behavior\n      - test_send_test_message_invalid_category_real_behavior\n      - test_send_test_message_no_category_selected_real_behavior\n      - test_send_test_message_no_user_selected_real_behavior\n      - test_send_test_message_service_manager_error_real_behavior\n      - test_send_test_message_service_not_running_real_behavior\n      - test_send_test_message_successful_flow_real_behavior\n\n   Total missing functions: 162\n\n[EXTRA] EXTRA IN REGISTRY (not found in files):\n   [FILE] core/message_management.py:\n      - get_last_10_messages\n   [FILE] core/response_tracking.py:\n      - store_checkin_response\n   [FILE] core/scheduler.py:\n      - cleanup_task_reminders\n   [FILE] core/user_data_handlers.py:\n      - _save_user_data__legacy_account\n   [FILE] tests/behavior/test_email_bot_behavior.py:\n      - test_email_bot_legacy_is_initialized_method_behavior\n      - test_email_bot_legacy_stop_method_behavior\n   [FILE] tests/behavior/test_message_behavior.py:\n      - test_get_last_10_messages_empty\n      - test_get_last_10_messages_success\n   [FILE] tests/behavior/test_response_tracking_behavior.py:\n      - test_store_checkin_response_uses_correct_file\n   [FILE] tests/behavior/test_scheduler_behavior.py:\n      - test_cleanup_task_reminders_specific_task\n      - test_cleanup_task_reminders_success\n   [FILE] tests/behavior/test_scheduler_coverage_expansion.py:\n      - test_cleanup_task_reminders_real_behavior\n      - test_cleanup_task_reminders_standalone_real_behavior\n   [FILE] tests/behavior/test_task_management_coverage_expansion.py:\n      - test_cleanup_task_reminders_no_scheduler_real_behavior\n      - test_cleanup_task_reminders_real_behavior\n   [FILE] tests/conftest.py:\n      - cap_component_log_sizes_on_start\n   [FILE] user/context_manager.py:\n      - _get_active_schedules\n      - get_user_context\n   [FILE] user/user_context.py:\n      - _get_active_schedules\n      - get_user_context\n\n   Total extra functions: 20\n\n[ANALYSIS] FUNCTION ANALYSIS FOR DECISION-MAKING:\n   [WARN] HIGH COMPLEXITY FUNCTIONS (may need refactoring):\n      [DOC] core/user_data_handlers.py::get_user_data (complexity: 1962)\n      [DOC] tests/conftest.py::shim_get_user_data_to_invoke_loaders (complexity: 872)\n      [DOC] core/user_data_handlers.py::_save_user_data__save_single_type (complexity: 742)\n      [DOC] ui/ui_app_qt.py::validate_configuration (complexity: 692)\n      [DOC] tests/conftest.py::setup_component_log_rotation (complexity: 683)\n      [DOC] ui/widgets/user_profile_settings_widget.py::load_existing_data (complexity: 671)\n      [DOC] ui/widgets/user_profile_settings_widget.py::__init__ (complexity: 669)\n      [DOC] ui/dialogs/account_creator_dialog.py::validate_input (complexity: 651)\n      [DOC] ui/dialogs/task_edit_dialog.py::render_reminder_period_row (complexity: 614)\n      [DOC] tests/conftest.py::mock_user_data (complexity: 609)\n   [DOC] UNDOCUMENTED FUNCTIONS (need docstrings):\n      [HANDLER] Handlers/Utilities (52):\n         - tests/conftest.py::_apply_get_user_data_shim_early\n         - core/user_management.py::_ensure_default_loaders_once\n         - tests/conftest.py::_load_single_type\n         - tests/conftest.py::_load_single_type\n         - tests/behavior/test_interaction_handlers_coverage_expansion.py::_mock_get_user_data\n      [OTHER] Other functions (129):\n         - core/logger.py::__init__\n         - core/logger.py::__init__\n         - core/logger.py::__init__\n         - core/logger.py::__init__\n         - core/logger.py::__init__\n   [DUPE] POTENTIAL DUPLICATE FUNCTION NAMES:\n      '__init__' found in: core/backup_manager.py, core/checkin_analytics.py, core/checkin_dynamic_manager.py, core/config.py, core/error_handling.py, core/error_handling.py, core/error_handling.py, core/error_handling.py, core/error_handling.py, core/error_handling.py, core/error_handling.py, core/error_handling.py, core/logger.py, core/logger.py, core/logger.py, core/logger.py, core/logger.py, core/logger.py, core/scheduler.py, core/service.py, core/service_utilities.py, core/user_data_manager.py, ui/ui_app_qt.py, ui/ui_app_qt.py, ui/dialogs/account_creator_dialog.py, ui/dialogs/admin_panel.py, ui/dialogs/category_management_dialog.py, ui/dialogs/channel_management_dialog.py, ui/dialogs/checkin_management_dialog.py, ui/dialogs/schedule_editor_dialog.py, ui/dialogs/task_completion_dialog.py, ui/dialogs/task_crud_dialog.py, ui/dialogs/task_edit_dialog.py, ui/dialogs/task_management_dialog.py, ui/dialogs/user_profile_dialog.py, ui/widgets/category_selection_widget.py, ui/widgets/channel_selection_widget.py, ui/widgets/checkin_settings_widget.py, ui/widgets/dynamic_list_container.py, ui/widgets/dynamic_list_field.py, ui/widgets/period_row_widget.py, ui/widgets/tag_widget.py, ui/widgets/task_settings_widget.py, ui/widgets/user_profile_settings_widget.py, user/context_manager.py, user/user_preferences.py, tests/conftest.py, tests/conftest.py, tests/behavior/test_communication_factory_coverage_expansion.py, tests/behavior/test_communication_factory_coverage_expansion.py, tests/unit/test_cleanup.py\n      '_get_default_data' found in: core/error_handling.py, core/error_handling.py\n      '_load_single_type' found in: tests/conftest.py, tests/conftest.py\n      '_setup' found in: tests/behavior/test_logger_coverage_expansion.py, tests/behavior/test_logger_coverage_expansion.py, tests/behavior/test_user_management_coverage_expansion.py, tests/behavior/test_user_management_coverage_expansion.py\n      'add_message' found in: core/message_management.py, tests/behavior/test_ai_conversation_history_behavior.py\n\n[DIR] BREAKDOWN BY DIRECTORY:\n   behavior/: 43 files, 1254 functions, 112 classes\n   core/: 21 files, 453 functions, 43 classes\n   dialogs/: 11 files, 151 functions, 11 classes\n   generated/: 20 files, 50 functions, 20 classes\n   integration/: 3 files, 35 functions, 5 classes\n   root/: 2 files, 4 functions, 0 classes\n   tasks/: 1 files, 21 functions, 1 classes\n   tests/: 3 files, 136 functions, 8 classes\n   ui/: 10 files, 266 functions, 36 classes\n   unit/: 13 files, 195 functions, 23 classes\n   user/: 3 files, 35 functions, 3 classes\n   widgets/: 9 files, 118 functions, 9 classes\n\n[GEN] GENERATING UPDATED REGISTRY SECTIONS...\n\n================================================================================\nUPDATED REGISTRY SECTIONS TO ADD:\n================================================================================\n\n### core/auto_cleanup.py\n**Functions:**\n- `get_last_cleanup_timestamp()` - Get the timestamp of the last cleanup from tracker file.\n- `update_cleanup_timestamp()` - Update the cleanup tracker file with current timestamp.\n- `should_run_cleanup(interval_days)` - Check if cleanup should run based on last cleanup time.\n- `find_pycache_dirs(root_path)` - Find all __pycache__ directories recursively.\n- `find_pyc_files(root_path)` - Find all .pyc files recursively.\n- `_calculate_cache_size__calculate_pycache_directories_size(pycache_dirs)` - Calculate total size of __pycache__ directories.\n- `_calculate_cache_size__calculate_pyc_files_size(pyc_files)` - Calculate total size of standalone .pyc files.\n- `calculate_cache_size(pycache_dirs, pyc_files)` - Calculate total size of cache files.\n- `_perform_cleanup__discover_cache_files(root_path)` - Discover all cache files and directories in the given root path.\n- `_perform_cleanup__log_discovery_results(pycache_dirs, pyc_files)` - Calculate total size and log discovery results.\n- `_perform_cleanup__remove_cache_files(pycache_dirs, pyc_files)` - Remove all discovered cache directories and files.\n- `_perform_cleanup__remove_cache_directories(pycache_dirs)` - Remove all __pycache__ directories.\n- `_perform_cleanup__remove_cache_files_list(pyc_files)` - Remove all standalone .pyc files.\n- `_perform_cleanup__log_completion_results(removed_dirs, removed_files, total_size)` - Log the final cleanup results and statistics.\n- `perform_cleanup(root_path)` - Perform the actual cleanup of cache files.\n- `auto_cleanup_if_needed(root_path, interval_days)` - Main function to check if cleanup is needed and perform it if so.\nReturns True if cleanup was performed, False if not needed.\n- `archive_old_messages_for_all_users()` - Archive old messages for all users during monthly cleanup.\nThis runs alongside the cache cleanup to maintain message file sizes.\n- `_get_cleanup_status__get_never_cleaned_status()` - Get status when cleanup has never been performed.\n- `_get_cleanup_status__calculate_days_since_cleanup(last_cleanup_timestamp)` - Calculate days since last cleanup.\n- `_get_cleanup_status__format_next_cleanup_date(last_date)` - Format the next cleanup date or return 'Overdue'.\n- `_get_cleanup_status__build_status_response(last_date, days_since, next_cleanup)` - Build the final status response dictionary.\n- `get_cleanup_status()` - Get information about the cleanup status.\n\n### core/backup_manager.py\n**Functions:**\n- `create_automatic_backup(operation_name)` - Create an automatic backup before major operations.\n\nArgs:\n    operation_name: Name of the operation being performed\n\nReturns:\n    Path to the backup file, or None if failed\n- `_validate_system_state__validate_user_index()` - Validate the user index file and corresponding user directories.\n- `_validate_system_state__ensure_user_data_directory()` - Ensure the user data directory exists, creating it if necessary.\n- `validate_system_state()` - Validate the current system state for consistency.\n\nReturns:\n    True if system is in a valid state, False otherwise\n- `perform_safe_operation(operation_func)` - Perform an operation with automatic backup and rollback capability.\n\nArgs:\n    operation_func: Function to perform\n    *args: Arguments for the operation function\n    **kwargs: Keyword arguments for the operation function\n\nReturns:\n    True if operation succeeded, False if it failed and was rolled back\n- `__init__(self)` - Initialize the BackupManager with default settings.\n\nSets up backup directory, maximum backup count, and ensures backup directory exists.\n- `ensure_backup_directory(self)` - Ensure backup directory exists.\n- `_create_backup__setup_backup(self, backup_name)` - Setup backup name and path parameters.\n- `_create_backup__create_zip_file(self, backup_path, backup_name, include_users, include_config, include_logs)` - Create the backup zip file with all specified components.\n- `_create_backup__cleanup_old_backups(self)` - Clean up old backups by count and age.\n- `create_backup(self, backup_name, include_users, include_config, include_logs)` - Create a comprehensive backup of the system.\n\nArgs:\n    backup_name: Custom name for the backup (auto-generated if None)\n    include_users: Whether to include user data\n    include_config: Whether to include configuration files\n    include_logs: Whether to include log files\n\nReturns:\n    Path to the backup file, or None if failed\n- `_backup_user_data(self, zipf)` - Backup all user data directories.\n- `_backup_config_files(self, zipf)` - Backup configuration files.\n- `_backup_log_files(self, zipf)` - Backup log files.\n- `_create_backup_manifest(self, zipf, backup_name, include_users, include_config, include_logs)` - Create a manifest file describing the backup contents.\n- `_add_directory_to_zip(self, zipf, directory, zip_path)` - Recursively add a directory to the zip file.\n- `_cleanup_old_backups(self)` - Remove old backups by count and age retention policy.\n- `list_backups(self)` - List all available backups with metadata.\n- `_get_backup_info(self, backup_path)` - Get information about a specific backup.\n- `restore_backup(self, backup_path, restore_users, restore_config)` - Restore from a backup file.\n\nArgs:\n    backup_path: Path to the backup file\n    restore_users: Whether to restore user data\n    restore_config: Whether to restore configuration files\n\nReturns:\n    True if restoration was successful, False otherwise\n- `_restore_user_data(self, zipf)` - Restore user data from backup.\n- `_restore_config_files(self, zipf)` - Restore configuration files from backup.\n- `_validate_backup__check_file_exists(self, backup_path, errors)` - Check if the backup file exists and add error if not.\n- `_validate_backup__validate_zip_file(self, backup_path)` - Validate zip file integrity and contents.\n- `_validate_backup__check_file_integrity(self, zipf, errors)` - Check if the zip file is not corrupted.\n- `_validate_backup__validate_manifest(self, zipf, errors)` - Validate the backup manifest file.\n- `_validate_backup__validate_content_requirements(self, zipf, errors)` - Validate that backup contains required content.\n- `validate_backup(self, backup_path)` - Validate a backup file for integrity and completeness.\n\nArgs:\n    backup_path: Path to the backup file\n\nReturns:\n    Tuple of (is_valid, list_of_errors)\n**Classes:**\n- `BackupManager` - Manages automatic backups and rollback operations.\n  - `BackupManager.__init__(self)` - Initialize the BackupManager with default settings.\n\nSets up backup directory, maximum backup count, and ensures backup directory exists.\n  - `BackupManager.ensure_backup_directory(self)` - Ensure backup directory exists.\n  - `BackupManager._create_backup__setup_backup(self, backup_name)` - Setup backup name and path parameters.\n  - `BackupManager._create_backup__create_zip_file(self, backup_path, backup_name, include_users, include_config, include_logs)` - Create the backup zip file with all specified components.\n  - `BackupManager._create_backup__cleanup_old_backups(self)` - Clean up old backups by count and age.\n  - `BackupManager.create_backup(self, backup_name, include_users, include_config, include_logs)` - Create a comprehensive backup of the system.\n\nArgs:\n    backup_name: Custom name for the backup (auto-generated if None)\n    include_users: Whether to include user data\n    include_config: Whether to include configuration files\n    include_logs: Whether to include log files\n\nReturns:\n    Path to the backup file, or None if failed\n  - `BackupManager._backup_user_data(self, zipf)` - Backup all user data directories.\n  - `BackupManager._backup_config_files(self, zipf)` - Backup configuration files.\n  - `BackupManager._backup_log_files(self, zipf)` - Backup log files.\n  - `BackupManager._create_backup_manifest(self, zipf, backup_name, include_users, include_config, include_logs)` - Create a manifest file describing the backup contents.\n  - `BackupManager._add_directory_to_zip(self, zipf, directory, zip_path)` - Recursively add a directory to the zip file.\n  - `BackupManager._cleanup_old_backups(self)` - Remove old backups by count and age retention policy.\n  - `BackupManager.list_backups(self)` - List all available backups with metadata.\n  - `BackupManager._get_backup_info(self, backup_path)` - Get information about a specific backup.\n  - `BackupManager.restore_backup(self, backup_path, restore_users, restore_config)` - Restore from a backup file.\n\nArgs:\n    backup_path: Path to the backup file\n    restore_users: Whether to restore user data\n    restore_config: Whether to restore configuration files\n\nReturns:\n    True if restoration was successful, False otherwise\n  - `BackupManager._restore_user_data(self, zipf)` - Restore user data from backup.\n  - `BackupManager._restore_config_files(self, zipf)` - Restore configuration files from backup.\n  - `BackupManager._validate_backup__check_file_exists(self, backup_path, errors)` - Check if the backup file exists and add error if not.\n  - `BackupManager._validate_backup__validate_zip_file(self, backup_path)` - Validate zip file integrity and contents.\n  - `BackupManager._validate_backup__check_file_integrity(self, zipf, errors)` - Check if the zip file is not corrupted.\n  - `BackupManager._validate_backup__validate_manifest(self, zipf, errors)` - Validate the backup manifest file.\n  - `BackupManager._validate_backup__validate_content_requirements(self, zipf, errors)` - Validate that backup contains required content.\n  - `BackupManager.validate_backup(self, backup_path)` - Validate a backup file for integrity and completeness.\n\nArgs:\n    backup_path: Path to the backup file\n\nReturns:\n    Tuple of (is_valid, list_of_errors)\n\n### core/checkin_analytics.py\n**Functions:**\n- `__init__(self)` - Initialize the CheckinAnalytics instance.\n\nThis class provides analytics and insights from check-in data.\n- `get_mood_trends(self, user_id, days)` - Analyze mood trends over the specified period\n- `get_habit_analysis(self, user_id, days)` - Analyze habit patterns from check-in data\n- `get_sleep_analysis(self, user_id, days)` - Analyze sleep patterns from check-in data\n- `get_wellness_score(self, user_id, days)` - Calculate overall wellness score from check-in data\n- `get_checkin_history(self, user_id, days)` - Get check-in history with proper date formatting\n- `get_quantitative_summaries(self, user_id, days, enabled_fields)` - Compute per-field averages and ranges for opted-in quantitative fields.\n\nParameters:\n    user_id: target user\n    days: number of recent check-ins to analyze\n    enabled_fields: list of fields to include (e.g., ['mood','energy','stress','sleep_quality','anxiety'])\n\nReturns mapping: { field: { 'average': float, 'min': float, 'max': float, 'count': int } }\nOnly includes fields that appear in the data and are in enabled_fields if provided.\n- `get_completion_rate(self, user_id, days)` - Calculate overall completion rate for check-ins\n- `get_task_weekly_stats(self, user_id, days)` - Calculate weekly statistics for tasks\n- `_get_mood_distribution(self, moods)` - Calculate distribution of mood scores\n- `_calculate_streak(self, checkins, habit_key)` - Calculate current and best streaks for a habit\n- `_get_habit_status(self, completion_rate)` - Get status description for habit completion rate\n- `_calculate_overall_completion(self, habit_stats)` - Calculate overall habit completion rate\n- `_calculate_sleep_consistency(self, hours)` - Calculate sleep consistency (lower variance = more consistent)\n- `_get_sleep_recommendations(self, avg_hours, avg_quality, poor_days)` - Generate sleep recommendations\n- `_calculate_mood_score(self, checkins)` - Calculate mood score (0-100)\n- `_calculate_habit_score(self, checkins)` - Calculate habit score (0-100)\n- `_calculate_sleep_score(self, checkins)` - Calculate sleep score (0-100)\n- `_get_score_level(self, score)` - Get wellness score level description\n- `_get_wellness_recommendations(self, mood_score, habit_score, sleep_score)` - Generate wellness recommendations based on component scores\n**Classes:**\n- `CheckinAnalytics` - No description\n  - `CheckinAnalytics.__init__(self)` - Initialize the CheckinAnalytics instance.\n\nThis class provides analytics and insights from check-in data.\n  - `CheckinAnalytics.get_mood_trends(self, user_id, days)` - Analyze mood trends over the specified period\n  - `CheckinAnalytics.get_habit_analysis(self, user_id, days)` - Analyze habit patterns from check-in data\n  - `CheckinAnalytics.get_sleep_analysis(self, user_id, days)` - Analyze sleep patterns from check-in data\n  - `CheckinAnalytics.get_wellness_score(self, user_id, days)` - Calculate overall wellness score from check-in data\n  - `CheckinAnalytics.get_checkin_history(self, user_id, days)` - Get check-in history with proper date formatting\n  - `CheckinAnalytics.get_quantitative_summaries(self, user_id, days, enabled_fields)` - Compute per-field averages and ranges for opted-in quantitative fields.\n\nParameters:\n    user_id: target user\n    days: number of recent check-ins to analyze\n    enabled_fields: list of fields to include (e.g., ['mood','energy','stress','sleep_quality','anxiety'])\n\nReturns mapping: { field: { 'average': float, 'min': float, 'max': float, 'count': int } }\nOnly includes fields that appear in the data and are in enabled_fields if provided.\n  - `CheckinAnalytics.get_completion_rate(self, user_id, days)` - Calculate overall completion rate for check-ins\n  - `CheckinAnalytics.get_task_weekly_stats(self, user_id, days)` - Calculate weekly statistics for tasks\n  - `CheckinAnalytics._get_mood_distribution(self, moods)` - Calculate distribution of mood scores\n  - `CheckinAnalytics._calculate_streak(self, checkins, habit_key)` - Calculate current and best streaks for a habit\n  - `CheckinAnalytics._get_habit_status(self, completion_rate)` - Get status description for habit completion rate\n  - `CheckinAnalytics._calculate_overall_completion(self, habit_stats)` - Calculate overall habit completion rate\n  - `CheckinAnalytics._calculate_sleep_consistency(self, hours)` - Calculate sleep consistency (lower variance = more consistent)\n  - `CheckinAnalytics._get_sleep_recommendations(self, avg_hours, avg_quality, poor_days)` - Generate sleep recommendations\n  - `CheckinAnalytics._calculate_mood_score(self, checkins)` - Calculate mood score (0-100)\n  - `CheckinAnalytics._calculate_habit_score(self, checkins)` - Calculate habit score (0-100)\n  - `CheckinAnalytics._calculate_sleep_score(self, checkins)` - Calculate sleep score (0-100)\n  - `CheckinAnalytics._get_score_level(self, score)` - Get wellness score level description\n  - `CheckinAnalytics._get_wellness_recommendations(self, mood_score, habit_score, sleep_score)` - Generate wellness recommendations based on component scores\n\n### core/checkin_dynamic_manager.py\n**Functions:**\n- `__init__(self)` - Initialize the dynamic check-in manager.\n- `_load_data(self)` - Load questions and responses data from JSON files.\n- `get_question_definition(self, question_key)` - Get the definition for a specific question.\n- `get_all_questions(self)` - Get all question definitions.\n- `get_question_text(self, question_key)` - Get the question text for a specific question.\n- `get_question_type(self, question_key)` - Get the type of a specific question.\n- `get_question_validation(self, question_key)` - Get validation rules for a specific question.\n- `get_response_statement(self, question_key, answer_value)` - Get a random response statement for a question answer.\n- `get_transition_phrase(self)` - Get a random transition phrase.\n- `build_next_question_with_response(self, question_key, previous_question_key, previous_answer)` - Build the next question text with a response statement from the previous answer.\n- `validate_answer(self, question_key, answer)` - Validate an answer for a specific question.\n- `get_enabled_questions_for_ui(self)` - Get questions formatted for UI display with enabled_by_default status.\n- `get_categories(self)` - Get all question categories.\n**Classes:**\n- `DynamicCheckinManager` - Manages dynamic check-in questions and responses loaded from JSON files.\n  - `DynamicCheckinManager.__init__(self)` - Initialize the dynamic check-in manager.\n  - `DynamicCheckinManager._load_data(self)` - Load questions and responses data from JSON files.\n  - `DynamicCheckinManager.get_question_definition(self, question_key)` - Get the definition for a specific question.\n  - `DynamicCheckinManager.get_all_questions(self)` - Get all question definitions.\n  - `DynamicCheckinManager.get_question_text(self, question_key)` - Get the question text for a specific question.\n  - `DynamicCheckinManager.get_question_type(self, question_key)` - Get the type of a specific question.\n  - `DynamicCheckinManager.get_question_validation(self, question_key)` - Get validation rules for a specific question.\n  - `DynamicCheckinManager.get_response_statement(self, question_key, answer_value)` - Get a random response statement for a question answer.\n  - `DynamicCheckinManager.get_transition_phrase(self)` - Get a random transition phrase.\n  - `DynamicCheckinManager.build_next_question_with_response(self, question_key, previous_question_key, previous_answer)` - Build the next question text with a response statement from the previous answer.\n  - `DynamicCheckinManager.validate_answer(self, question_key, answer)` - Validate an answer for a specific question.\n  - `DynamicCheckinManager.get_enabled_questions_for_ui(self)` - Get questions formatted for UI display with enabled_by_default status.\n  - `DynamicCheckinManager.get_categories(self)` - Get all question categories.\n\n### core/config.py\n**Functions:**\n- `_normalize_path(value)` - Normalize path strings from environment to avoid Windows escape issues.\n- Removes CR/LF control chars\n- Strips surrounding quotes\n- Normalizes separators to OS-specific\n- `get_available_channels()` - Get list of available communication channels based on configuration.\n\nReturns:\n    List[str]: List of available channel names that can be used with ChannelFactory\n- `get_channel_class_mapping()` - Get mapping of channel names to their class names for dynamic imports.\n\nReturns:\n    Dict[str, str]: Mapping of channel name to fully qualified class name\n- `validate_core_paths()` - Validate that all core paths are accessible and can be created if needed.\n- `validate_ai_configuration()` - Validate AI-related configuration settings.\n- `validate_communication_channels()` - Validate communication channel configurations.\n- `validate_logging_configuration()` - Validate logging configuration.\n- `validate_scheduler_configuration()` - Validate scheduler configuration.\n- `validate_file_organization_settings()` - Validate file organization settings.\n- `validate_environment_variables()` - Check for common environment variable issues.\n- `validate_all_configuration()` - Comprehensive configuration validation that checks all aspects of the configuration.\n\nReturns:\n    Dict containing validation results with the following structure:\n    {\n        'valid': bool,\n        'errors': List[str],\n        'warnings': List[str],\n        'available_channels': List[str],\n        'summary': str\n    }\n- `validate_and_raise_if_invalid()` - Validate configuration and raise ConfigValidationError if invalid.\n\nReturns:\n    List of available communication channels if validation passes.\n\nRaises:\n    ConfigValidationError: If configuration is invalid with detailed error information.\n- `print_configuration_report()` - Print a detailed configuration report to the console.\n- `get_user_data_dir(user_id)` - Get the data directory for a specific user.\n- `get_backups_dir()` - Get the backups directory, redirected under tests when MHM_TESTING=1.\nReturns tests/data/backups if testing, otherwise BASE_DATA_DIR/backups.\n- `get_user_file_path(user_id, file_type)` - Get the file path for a specific user file type.\n- `ensure_user_directory(user_id)` - Ensure user directory exists if using subdirectories.\n- `validate_email_config()` - Validate email configuration settings.\n\nReturns:\n    bool: True if email configuration is valid\n    \nRaises:\n    ConfigurationError: If required email configuration variables are missing\n- `validate_discord_config()` - Validate Discord configuration settings.\n\nReturns:\n    bool: True if Discord configuration is valid\n    \nRaises:\n    ConfigurationError: If DISCORD_BOT_TOKEN is missing\n- `validate_minimum_config()` - Ensure at least one communication channel is configured\n- `__init__(self, message, missing_configs, warnings)` - Initialize the object.\n**Classes:**\n- `ConfigValidationError` - Custom exception for configuration validation errors with detailed information.\n  - `ConfigValidationError.__init__(self, message, missing_configs, warnings)` - Initialize the object.\n\n### core/error_handling.py\n**Functions:**\n- `handle_errors(operation, context, user_friendly, default_return)` - Decorator to automatically handle errors in functions.\n\nArgs:\n    operation: Description of the operation (defaults to function name)\n    context: Additional context to pass to error handler\n    user_friendly: Whether to show user-friendly error messages\n    default_return: Value to return if error occurs and can't be recovered\n- `safe_file_operation(file_path, operation, user_id, category)` - Context manager for safe file operations with automatic error handling.\n\nUsage:\n    with safe_file_operation(\"path/to/file.json\", \"loading user data\", user_id=\"123\"):\n        # file operations here\n- `handle_file_error(error, file_path, operation, user_id, category)` - Convenience function for handling file-related errors.\n- `handle_communication_error(error, channel, operation, user_id)` - Convenience function for handling communication errors.\n- `handle_configuration_error(error, setting, operation)` - Convenience function for handling configuration errors.\n- `handle_network_error(error, operation, user_id)` - Convenience function for handling network errors.\n- `handle_validation_error(error, field, operation, user_id)` - Convenience function for handling validation errors.\n- `handle_ai_error(error, operation, user_id)` - Convenience function for handling AI-related errors.\n- `__init__(self, message, details, recoverable)` - Initialize a new MHM error.\n\nArgs:\n    message: Human-readable error message\n    details: Optional dictionary with additional error details\n    recoverable: Whether this error can be recovered from\n- `__init__(self, name, description)` - Initialize an error recovery strategy.\n\nArgs:\n    name: The name of the recovery strategy\n    description: A description of what this strategy does\n- `can_handle(self, error)` - Check if this strategy can handle the given error.\n- `recover(self, error, context)` - Attempt to recover from the error. Returns True if successful.\n- `__init__(self)` - Initialize the FileNotFoundRecovery strategy.\n- `can_handle(self, error)` - Check if this strategy can handle the given error.\n\nArgs:\n    error: The exception to check\n    \nReturns:\n    True if this strategy can handle FileNotFoundError or file operation errors containing \"not found\"\n- `recover(self, error, context)` - Attempt to recover from the error by creating missing files with default data.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context containing file_path and other relevant information\n    \nReturns:\n    True if recovery was successful, False otherwise\n- `_get_default_data(self, file_path, context)` - Get appropriate default data based on file type.\n- `__init__(self)` - Initialize the JSONDecodeRecovery strategy.\n- `can_handle(self, error)` - Check if this strategy can handle the given error.\n\nArgs:\n    error: The exception to check\n    \nReturns:\n    True if this strategy can handle JSON decode errors or JSON-related file operation errors\n- `recover(self, error, context)` - Attempt to recover from the error by recreating corrupted JSON files.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context containing file_path and other relevant information\n    \nReturns:\n    True if recovery was successful, False otherwise\n- `_get_default_data(self, file_path, context)` - Get appropriate default data based on file type.\n- `__init__(self)` - Initialize the NetworkRecovery strategy.\n- `can_handle(self, error)` - Check if this strategy can handle the given error.\n\nArgs:\n    error: The exception to check\n    \nReturns:\n    True if this strategy can handle network-related errors\n- `recover(self, error, context)` - Attempt to recover from network errors by waiting and retrying.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context containing operation details\n    \nReturns:\n    True if recovery was successful, False otherwise\n- `__init__(self)` - Initialize the ConfigurationRecovery strategy.\n- `can_handle(self, error)` - Check if this strategy can handle the given error.\n\nArgs:\n    error: The exception to check\n    \nReturns:\n    True if this strategy can handle configuration-related errors\n- `recover(self, error, context)` - Attempt to recover from configuration errors by using default values.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context containing configuration details\n    \nReturns:\n    True if recovery was successful, False otherwise\n- `__init__(self)` - Initialize the ErrorHandler with default recovery strategies.\n\nSets up recovery strategies for common error types like missing files and corrupted JSON.\n- `handle_error(self, error, context, operation, user_friendly)` - Handle an error with recovery strategies and logging.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context about the error\n    operation: Description of the operation that failed\n    user_friendly: Whether to show user-friendly error messages\n    \nReturns:\n    True if error was recovered from, False otherwise\n- `_log_error(self, error, context)` - Log error with context.\n- `_show_user_error(self, error, context, custom_message)` - Show user-friendly error message.\n- `_get_user_friendly_message(self, error, context)` - Convert technical error to user-friendly message.\n- `decorator(func)` - No description\n- `wrapper()` - No description\n- `__init__(self, file_path, operation, user_id, category)` - Initialize the safe file context.\n\nArgs:\n    file_path: Path to the file being operated on\n    operation: Description of the operation being performed\n    user_id: ID of the user performing the operation\n    category: Category of the operation\n- `__enter__(self)` - Enter the context manager for safe file operations.\n\nReturns:\n    self: The SafeFileContext instance\n- `__exit__(self, exc_type, exc_val, exc_tb)` - Exit the context manager and handle any exceptions.\n\nArgs:\n    exc_type: Type of exception if any occurred\n    exc_val: Exception value if any occurred\n    exc_tb: Exception traceback if any occurred\n**Classes:**\n- `MHMError` - Base exception for all MHM-specific errors.\n  - `MHMError.__init__(self, message, details, recoverable)` - Initialize a new MHM error.\n\nArgs:\n    message: Human-readable error message\n    details: Optional dictionary with additional error details\n    recoverable: Whether this error can be recovered from\n- `DataError` - Raised when there are issues with data files or data integrity.\n- `FileOperationError` - Raised when file operations fail.\n- `ConfigurationError` - Raised when configuration is invalid or missing.\n- `CommunicationError` - Raised when communication channels fail.\n- `SchedulerError` - Raised when scheduler operations fail.\n- `UserInterfaceError` - Raised when UI operations fail.\n- `AIError` - Raised when AI operations fail.\n- `ValidationError` - Raised when data validation fails.\n- `RecoveryError` - Raised when error recovery fails.\n- `ErrorRecoveryStrategy` - Base class for error recovery strategies.\n  - `ErrorRecoveryStrategy.__init__(self, name, description)` - Initialize an error recovery strategy.\n\nArgs:\n    name: The name of the recovery strategy\n    description: A description of what this strategy does\n  - `ErrorRecoveryStrategy.can_handle(self, error)` - Check if this strategy can handle the given error.\n  - `ErrorRecoveryStrategy.recover(self, error, context)` - Attempt to recover from the error. Returns True if successful.\n- `FileNotFoundRecovery` - Recovery strategy for missing files.\n  - `FileNotFoundRecovery.__init__(self)` - Initialize the FileNotFoundRecovery strategy.\n  - `FileNotFoundRecovery.can_handle(self, error)` - Check if this strategy can handle the given error.\n\nArgs:\n    error: The exception to check\n    \nReturns:\n    True if this strategy can handle FileNotFoundError or file operation errors containing \"not found\"\n  - `FileNotFoundRecovery.recover(self, error, context)` - Attempt to recover from the error by creating missing files with default data.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context containing file_path and other relevant information\n    \nReturns:\n    True if recovery was successful, False otherwise\n  - `FileNotFoundRecovery._get_default_data(self, file_path, context)` - Get appropriate default data based on file type.\n- `JSONDecodeRecovery` - Recovery strategy for corrupted JSON files.\n  - `JSONDecodeRecovery.__init__(self)` - Initialize the JSONDecodeRecovery strategy.\n  - `JSONDecodeRecovery.can_handle(self, error)` - Check if this strategy can handle the given error.\n\nArgs:\n    error: The exception to check\n    \nReturns:\n    True if this strategy can handle JSON decode errors or JSON-related file operation errors\n  - `JSONDecodeRecovery.recover(self, error, context)` - Attempt to recover from the error by recreating corrupted JSON files.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context containing file_path and other relevant information\n    \nReturns:\n    True if recovery was successful, False otherwise\n  - `JSONDecodeRecovery._get_default_data(self, file_path, context)` - Get appropriate default data based on file type.\n- `NetworkRecovery` - Recovery strategy for network-related errors.\n  - `NetworkRecovery.__init__(self)` - Initialize the NetworkRecovery strategy.\n  - `NetworkRecovery.can_handle(self, error)` - Check if this strategy can handle the given error.\n\nArgs:\n    error: The exception to check\n    \nReturns:\n    True if this strategy can handle network-related errors\n  - `NetworkRecovery.recover(self, error, context)` - Attempt to recover from network errors by waiting and retrying.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context containing operation details\n    \nReturns:\n    True if recovery was successful, False otherwise\n- `ConfigurationRecovery` - Recovery strategy for configuration-related errors.\n  - `ConfigurationRecovery.__init__(self)` - Initialize the ConfigurationRecovery strategy.\n  - `ConfigurationRecovery.can_handle(self, error)` - Check if this strategy can handle the given error.\n\nArgs:\n    error: The exception to check\n    \nReturns:\n    True if this strategy can handle configuration-related errors\n  - `ConfigurationRecovery.recover(self, error, context)` - Attempt to recover from configuration errors by using default values.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context containing configuration details\n    \nReturns:\n    True if recovery was successful, False otherwise\n- `ErrorHandler` - Centralized error handler for MHM.\n  - `ErrorHandler.__init__(self)` - Initialize the ErrorHandler with default recovery strategies.\n\nSets up recovery strategies for common error types like missing files and corrupted JSON.\n  - `ErrorHandler.handle_error(self, error, context, operation, user_friendly)` - Handle an error with recovery strategies and logging.\n\nArgs:\n    error: The exception that occurred\n    context: Additional context about the error\n    operation: Description of the operation that failed\n    user_friendly: Whether to show user-friendly error messages\n    \nReturns:\n    True if error was recovered from, False otherwise\n  - `ErrorHandler._log_error(self, error, context)` - Log error with context.\n  - `ErrorHandler._show_user_error(self, error, context, custom_message)` - Show user-friendly error message.\n  - `ErrorHandler._get_user_friendly_message(self, error, context)` - Convert technical error to user-friendly message.\n- `SafeFileContext` - Context manager for safe file operations.\n  - `SafeFileContext.__init__(self, file_path, operation, user_id, category)` - Initialize the safe file context.\n\nArgs:\n    file_path: Path to the file being operated on\n    operation: Description of the operation being performed\n    user_id: ID of the user performing the operation\n    category: Category of the operation\n  - `SafeFileContext.__enter__(self)` - Enter the context manager for safe file operations.\n\nReturns:\n    self: The SafeFileContext instance\n  - `SafeFileContext.__exit__(self, exc_type, exc_val, exc_tb)` - Exit the context manager and handle any exceptions.\n\nArgs:\n    exc_type: Type of exception if any occurred\n    exc_val: Exception value if any occurred\n    exc_tb: Exception traceback if any occurred\n\n### core/file_operations.py\n**Functions:**\n- `verify_file_access(paths)` - Verify that files exist and are accessible.\n\nArgs:\n    paths: List of file paths to verify\n    \nRaises:\n    FileOperationError: If any file is not found or inaccessible\n- `determine_file_path(file_type, identifier)` - Determine file path based on file type and identifier.\nUpdated to support new organized structure.\n\nArgs:\n    file_type: Type of file ('users', 'messages', 'schedules', 'sent_messages', 'default_messages', 'tasks')\n    identifier: Identifier for the file (format depends on file_type)\n    \nReturns:\n    str: Full file path\n    \nRaises:\n    FileOperationError: If file_type is unknown or identifier format is invalid\n- `load_json_data(file_path)` - Load data from a JSON file with comprehensive error handling and auto-create user files if missing.\n\nArgs:\n    file_path: Path to the JSON file to load\n    \nReturns:\n    dict/list: Loaded JSON data, or None if loading failed\n- `save_json_data(data, file_path)` - Save data to a JSON file with comprehensive error handling.\n\nArgs:\n    data: Data to save (must be JSON serializable)\n    file_path: Path where to save the file\n    \nReturns:\n    bool: True if successful, False if failed\n    \nRaises:\n    FileOperationError: If saving fails\n- `create_user_files(user_id, categories, user_preferences)` - Creates files for a new user in the appropriate structure.\nEnsures schedules.json contains a block for each category, plus checkin and task reminder blocks.\n\nArgs:\n    user_id: The user ID\n    categories: List of message categories the user is opted into\n    user_preferences: Optional user preferences dict to determine which files to create\n- `_create_user_files__determine_feature_enablement(user_prefs)` - Determine which features are enabled based on user preferences.\n\nArgs:\n    user_prefs: User preferences dictionary\n    \nReturns:\n    tuple: (tasks_enabled, checkins_enabled)\n- `_create_user_files__account_file(user_id, user_prefs, categories, tasks_enabled, checkins_enabled)` - Create account.json with actual user data.\n- `_create_user_files__preferences_file(user_id, user_prefs, categories, tasks_enabled, checkins_enabled)` - Create preferences.json with actual user data.\n- `_create_user_files__context_file(user_id, user_prefs)` - Create user_context.json with actual personalization data.\n- `_create_user_files__schedules_file(user_id, categories, user_prefs, tasks_enabled, checkins_enabled)` - Create schedules file with appropriate structure.\n- `_create_user_files__log_files(user_id)` - Initialize empty log files if they don't exist.\n- `_create_user_files__sent_messages_file(user_id)` - Create sent_messages.json in messages/ subdirectory.\n- `_create_user_files__task_files(user_id)` - Create task files if tasks are enabled.\n- `_create_user_files__checkins_file(user_id)` - Create checkins.json only if checkins are enabled.\n- `_create_user_files__message_files(user_id, categories)` - Create message files for each enabled category directly.\n- `_create_user_files__update_user_references(user_id)` - Auto-update message references and user index.\n\n### core/logger.py\n**Functions:**\n- `_is_testing_environment()` - Check if we're running in a testing environment.\n- `apply_test_context_formatter_to_all_loggers()` - Apply TestContextFormatter to all existing loggers when in test mode.\n- `_get_log_paths_for_environment()` - Get appropriate log paths based on the current environment.\n- `get_log_level_from_env()` - Get log level from environment variable, default to WARNING for quiet mode.\n\nReturns:\n    int: Logging level constant (e.g., logging.WARNING, logging.DEBUG)\n- `ensure_logs_directory()` - Ensure the logs directory structure exists.\n- `get_component_logger(component_name)` - Get or create a component-specific logger.\n\nArgs:\n    component_name: Name of the component (e.g., 'discord', 'ai', 'user_activity')\n\nReturns:\n    ComponentLogger: Logger for the specified component\n- `setup_logging()` - Set up logging with file and console handlers. Ensure it is called only once.\n\nCreates a dual-handler logging system:\n- File handler: Always logs at DEBUG level with rotation\n- Console handler: Respects verbosity settings (WARNING by default)\n\nAutomatically suppresses noisy third-party library logging.\n- `setup_third_party_error_logging()` - Set up dedicated error logging for third-party libraries.\n\nRoutes ERROR and CRITICAL messages from asyncio, discord, and aiohttp\nto the errors.log file instead of app.log.\n- `get_logger(name)` - Get a logger with the specified name.\n\nArgs:\n    name: Logger name (usually __name__)\n\nReturns:\n    logging.Logger: Configured logger\n- `suppress_noisy_logging()` - Suppress excessive logging from third-party libraries.\n\nSets logging level to WARNING for common noisy libraries to reduce log spam\nwhile keeping important warnings and errors visible.\n- `set_console_log_level(level)` - Set the console logging level while keeping file logging at DEBUG.\n\nArgs:\n    level: logging level (e.g., logging.DEBUG, logging.INFO, logging.WARNING)\n- `toggle_verbose_logging()` - Toggle between verbose (DEBUG/INFO) and quiet (WARNING+) logging for console output.\nFile logging always remains at DEBUG level.\n\nReturns:\n    bool: True if verbose mode is now enabled, False if quiet mode\n- `get_verbose_mode()` - Get current verbose mode status.\n\nReturns:\n    bool: True if verbose mode is enabled\n- `set_verbose_mode(enabled)` - Explicitly set verbose mode.\n\nArgs:\n    enabled (bool): True to enable verbose mode, False for quiet mode\n- `disable_module_logging(module_name)` - Disable debug logging for a specific module.\n\nArgs:\n    module_name: Name of the module to disable debug logging for\n- `get_log_file_info()` - Get information about current log files and their sizes.\n\nReturns:\n    dict: Information about log files including total size and file count\n- `cleanup_old_logs(max_total_size_mb)` - Clean up old log files if total size exceeds the limit.\n\nArgs:\n    max_total_size_mb (int): Maximum total size in MB before cleanup (default 50MB)\n\nReturns:\n    bool: True if cleanup was performed, False otherwise\n- `compress_old_logs()` - Compress log files older than 7 days and move them to archive directory.\n\nReturns:\n    int: Number of files compressed and archived\n- `cleanup_old_archives(max_days)` - Remove archived log files older than specified days.\n\nArgs:\n    max_days (int): Maximum age in days for archived files (default 30)\n\nReturns:\n    int: Number of files removed\n- `force_restart_logging()` - Force restart the logging system by clearing all handlers and reinitializing.\n\nUseful when logging configuration becomes corrupted or needs to be reset.\n\nReturns:\n    bool: True if restart was successful, False otherwise\n- `clear_log_file_locks()` - Clear any file locks that might be preventing log rotation.\n\nThis function attempts to handle Windows file locking issues by:\n1. Temporarily disabling log rotation\n2. Closing all log file handlers\n3. Reopening them with fresh file handles\n\nReturns:\n    bool: True if locks were cleared successfully, False otherwise\n- `format(self, record)` - No description\n- `__init__(self, component_name, log_file_path, level)` - No description\n- `debug(self, message)` - Log debug message with optional structured data.\n- `info(self, message)` - Log info message with optional structured data.\n- `warning(self, message)` - Log warning message with optional structured data.\n- `error(self, message)` - Log error message with optional structured data.\n- `critical(self, message)` - Log critical message with optional structured data.\n- `_log(self, level, message)` - Internal logging method with structured data support.\n- `__init__(self, filename, backup_dir, maxBytes, backupCount, encoding, delay, when, interval)` - No description\n- `doRollover(self)` - Do a rollover, as described in __init__().\n- `__init__(self)` - No description\n- `filter(self, record)` - No description\n- `__init__(self, excluded_prefixes)` - No description\n- `filter(self, record)` - No description\n- `__init__(self, name)` - No description\n- `__init__(self, name)` - No description\n- `debug(self, message)` - No description\n- `info(self, message)` - No description\n- `warning(self, message)` - No description\n- `error(self, message)` - No description\n- `critical(self, message)` - No description\n**Classes:**\n- `TestContextFormatter` - Custom formatter that automatically prepends test names to log messages.\n  - `TestContextFormatter.format(self, record)` - No description\n- `ComponentLogger` - Component-specific logger that writes to dedicated log files.\n\nEach component gets its own log file with appropriate rotation and formatting.\n  - `ComponentLogger.__init__(self, component_name, log_file_path, level)` - No description\n  - `ComponentLogger.debug(self, message)` - Log debug message with optional structured data.\n  - `ComponentLogger.info(self, message)` - Log info message with optional structured data.\n  - `ComponentLogger.warning(self, message)` - Log warning message with optional structured data.\n  - `ComponentLogger.error(self, message)` - Log error message with optional structured data.\n  - `ComponentLogger.critical(self, message)` - Log critical message with optional structured data.\n  - `ComponentLogger._log(self, level, message)` - Internal logging method with structured data support.\n- `BackupDirectoryRotatingFileHandler` - Custom rotating file handler that moves rotated files to a backup directory.\n  - `BackupDirectoryRotatingFileHandler.__init__(self, filename, backup_dir, maxBytes, backupCount, encoding, delay, when, interval)` - No description\n  - `BackupDirectoryRotatingFileHandler.doRollover(self)` - Do a rollover, as described in __init__().\n- `HeartbeatWarningFilter` - Filter to suppress excessive Discord heartbeat warnings while keeping track of them.\n\n- Allows first 3 heartbeat warnings to pass through\n- Suppresses subsequent warnings for 10 minutes\n- Logs a summary every hour with total count\n  - `HeartbeatWarningFilter.__init__(self)` - No description\n  - `HeartbeatWarningFilter.filter(self, record)` - No description\n- `ExcludeLoggerNamesFilter` - Filter to exclude records for specific logger name prefixes.\nExample use: prevent Discord-related logs from going to app.log.\n  - `ExcludeLoggerNamesFilter.__init__(self, excluded_prefixes)` - No description\n  - `ExcludeLoggerNamesFilter.filter(self, record)` - No description\n- `_DummyLogger` - No description\n  - `_DummyLogger.__init__(self, name)` - No description\n- `DummyComponentLogger` - No description\n  - `DummyComponentLogger.__init__(self, name)` - No description\n  - `DummyComponentLogger.debug(self, message)` - No description\n  - `DummyComponentLogger.info(self, message)` - No description\n  - `DummyComponentLogger.warning(self, message)` - No description\n  - `DummyComponentLogger.error(self, message)` - No description\n  - `DummyComponentLogger.critical(self, message)` - No description\n\n### core/message_management.py\n**Functions:**\n- `get_message_categories()` - Retrieves message categories from the environment variable CATEGORIES.\nAllows for either a comma-separated string or a JSON array.\n\nReturns:\n    List[str]: List of message categories\n- `load_default_messages(category)` - Load default messages for a specific category.\n- `add_message(user_id, category, message_data, index)` - Add a new message to a user's category.\n\nArgs:\n    user_id: The user ID\n    category: The message category\n    message_data: Dictionary containing message data\n    index: Optional position to insert the message (None for append)\n- `edit_message(user_id, category, message_id, updated_data)` - Edit an existing message in a user's category.\n\nArgs:\n    user_id: The user ID\n    category: The message category\n    message_id: The ID of the message to edit\n    updated_data: Dictionary containing updated message data\n    \nRaises:\n    ValidationError: If message ID is not found or category is invalid\n- `update_message(user_id, category, message_id, new_message_data)` - Update a message by its message_id.\n\nArgs:\n    user_id: The user ID\n    category: The message category\n    message_id: The ID of the message to update\n    new_message_data: Complete new message data to replace the existing message\n    \nRaises:\n    ValidationError: If message ID is not found or category is invalid\n- `delete_message(user_id, category, message_id)` - Delete a specific message from a user's category.\n\nArgs:\n    user_id: The user ID\n    category: The message category\n    message_id: The ID of the message to delete\n    \nRaises:\n    ValidationError: If the message ID is not found or the category is invalid\n- `get_recent_messages(user_id, category, limit, days_back)` - Get recent messages with flexible filtering.\n\nThis function replaces get_last_10_messages() with enhanced functionality\nthat supports both category-specific and cross-category queries.\n\nArgs:\n    user_id: The user ID\n    category: Optional category filter (None = all categories)\n    limit: Maximum number of messages to return\n    days_back: Only include messages from last N days\n    \nReturns:\n    List[dict]: List of recent messages, sorted by timestamp descending\n- `store_sent_message(user_id, category, message_id, message, delivery_status, time_period)` - Store sent message in chronological order.\n\nThis function maintains the chronological structure by inserting new messages\nin the correct position based on timestamp.\n\nArgs:\n    user_id: The user ID\n    category: The message category\n    message_id: The message ID\n    message: The message content\n    delivery_status: Delivery status (default: \"sent\")\n    time_period: The time period when the message was sent (e.g., \"morning\", \"evening\")\n    \nReturns:\n    bool: True if message stored successfully\n- `archive_old_messages(user_id, days_to_keep)` - Archive messages older than specified days.\n\nThis function implements file rotation by moving old messages to archive files,\nkeeping the active sent_messages.json file manageable in size.\n\nArgs:\n    user_id: The user ID\n    days_to_keep: Number of days to keep in active file\n    \nReturns:\n    bool: True if archiving successful\n- `_parse_timestamp(timestamp_str)` - Parse timestamp string to datetime object.\n\nHandles multiple timestamp formats for backward compatibility.\n\nArgs:\n    timestamp_str: Timestamp string to parse\n    \nReturns:\n    datetime: Parsed datetime object\n- `create_message_file_from_defaults(user_id, category)` - Create a user's message file for a specific category from default messages.\nThis is the actual worker function that creates the file.\n\nArgs:\n    user_id: The user ID\n    category: The specific category to create a message file for\n    \nReturns:\n    bool: True if file was created successfully\n- `ensure_user_message_files(user_id, categories)` - Ensure user has message files for specified categories.\nCreates messages directory if missing, checks which files are missing, and creates them.\n\nArgs:\n    user_id: The user ID\n    categories: List of categories to check/create message files for (can be subset of user's categories)\n    \nReturns:\n    dict: Summary of the operation with keys:\n        - success: bool - True if all files were created/validated successfully\n        - directory_created: bool - True if messages directory was created\n        - files_checked: int - Number of categories checked\n        - files_created: int - Number of new files created\n        - files_existing: int - Number of files that already existed\n- `get_timestamp_for_sorting(item)` - Convert timestamp to float for consistent sorting.\n\nArgs:\n    item: Dictionary containing a timestamp field or other data type\n    \nReturns:\n    float: Timestamp as float for sorting, or 0.0 for invalid items\n\n### core/response_tracking.py\n**Functions:**\n- `_get_response_log_filename(response_type)` - Get the filename for a response log type.\n- `store_user_response(user_id, response_data, response_type)` - Store user response data in appropriate file structure.\n- `store_chat_interaction(user_id, user_message, ai_response, context_used)` - Store a chat interaction between user and AI.\n- `get_recent_responses(user_id, response_type, limit)` - Get recent responses for a user from appropriate file structure.\n- `get_recent_checkins(user_id, limit)` - Get recent check-in responses for a user.\n- `get_recent_chat_interactions(user_id, limit)` - Get recent chat interactions for a user.\n- `is_user_checkins_enabled(user_id)` - Check if check-ins are enabled for a user.\n- `get_user_info_for_tracking(user_id)` - Get user information for response tracking.\n- `track_user_response(user_id, category, response_data)` - Track a user's response to a message.\n- `get_timestamp_for_sorting(item)` - Convert timestamp to float for consistent sorting\n\n### core/schedule_management.py\n**Functions:**\n- `get_schedule_time_periods(user_id, category)` - Get schedule time periods for a specific user and category (new format).\n- `set_schedule_period_active(user_id, category, period_name, active)` - Set whether a schedule period is active or inactive.\n\nArgs:\n    user_id: The user ID\n    category: The schedule category\n    period_name: The name of the period to modify\n    active: Whether the period should be active (default: True)\n    \nReturns:\n    bool: True if the period was found and updated, False otherwise\n- `is_schedule_period_active(user_id, category, period_name)` - Check if a schedule period is currently active.\n\nArgs:\n    user_id: The user ID\n    category: The schedule category\n    period_name: The name of the period to check\n    \nReturns:\n    bool: True if the period is active, False otherwise (defaults to True if field is missing)\n- `get_current_time_periods_with_validation(user_id, category)` - Returns the current active time periods for a user and category.\nIf no active period is found, defaults to the first available period.\n- `add_schedule_period(category, period_name, start_time, end_time, scheduler_manager)` - No description\n- `edit_schedule_period(category, period_name, new_start_time, new_end_time, scheduler_manager)` - No description\n- `delete_schedule_period(category, period_name, scheduler_manager)` - Delete a schedule period from a category.\n\nArgs:\n    category: The schedule category\n    period_name: The name of the period to delete\n    scheduler_manager: Optional scheduler manager for rescheduling (default: None)\n- `clear_schedule_periods_cache(user_id, category)` - Clear the schedule periods cache for a specific user/category or all.\n- `get_period_data__validate_and_format_time(time_str)` - Validate and format a time string to HH:MM format.\n\nArgs:\n    time_str: Time string to validate and format\n    \nReturns:\n    str: Formatted time string in HH:MM format\n    \nRaises:\n    ValueError: If the time format is invalid\n- `get_period_data__time_24h_to_12h_display(time_24h)` - Convert 24-hour time string (HH:MM) to 12-hour display format.\n\nArgs:\n    time_24h (str): Time in 24-hour format (e.g., \"14:30\")\n    \nReturns:\n    tuple: (hour_12, minute, is_pm) where:\n        - hour_12 (int): Hour in 12-hour format (1-12)\n        - minute (int): Minute (0-59)\n        - is_pm (bool): True if PM, False if AM\n- `get_period_data__time_12h_display_to_24h(hour_12, minute, is_pm)` - Convert 12-hour display format to 24-hour time string.\n\nArgs:\n    hour_12 (int): Hour in 12-hour format (1-12)\n    minute (int): Minute (0-59)\n    is_pm (bool): True if PM, False if AM\n    \nReturns:\n    str: Time in 24-hour format (HH:MM)\n- `get_current_day_names()` - Returns the name of the current day plus 'ALL' for universal day messages.\n- `set_schedule_periods(user_id, category, periods_dict)` - Replace all schedule periods for a category with the given dict (period_name: {active, days, start_time, end_time}).\n- `get_schedule_days(user_id, category)` - Get the schedule days for a user and category.\n\nArgs:\n    user_id: The user ID\n    category: The schedule category\n    \nReturns:\n    list: List of days for the schedule, defaults to all days of the week\n- `set_schedule_days(user_id, category, days)` - Set the schedule days for a user and category.\n\nArgs:\n    user_id: The user ID\n    category: The schedule category\n    days: List of days to set for the schedule\n- `get_user_info_for_schedule_management(user_id)` - Get user info for schedule management operations.\n- `sort_key(item)` - No description\n\n### core/schedule_utilities.py\n**Functions:**\n- `get_active_schedules(schedules)` - Get list of currently active schedule periods.\n\nArgs:\n    schedules: Dictionary containing schedule periods\n    \nReturns:\n    list: List of active schedule period names\n- `is_schedule_active(schedule_data, current_time)` - Check if a schedule period is currently active based on time and day.\n\nArgs:\n    schedule_data: Dictionary containing schedule period data\n    current_time: Current time to check against (defaults to now)\n    \nReturns:\n    bool: True if the schedule is active, False otherwise\n- `get_current_active_schedules(schedules, current_time)` - Get list of schedule periods that are currently active based on time and day.\n\nArgs:\n    schedules: Dictionary containing all schedule periods\n    current_time: Current time to check against (defaults to now)\n    \nReturns:\n    list: List of currently active schedule period names\n\n### core/scheduler.py\n**Functions:**\n- `run_full_scheduler_standalone()` - Standalone function to run the full scheduler for all users.\nThis can be called from the admin UI without needing a scheduler instance.\n- `run_user_scheduler_standalone(user_id)` - Standalone function to run scheduler for a specific user.\nThis can be called from the admin UI without needing a scheduler instance.\n- `run_category_scheduler_standalone(user_id, category)` - Standalone function to run scheduler for a specific user and category.\nThis can be called from the admin UI without needing a scheduler instance.\n- `schedule_all_task_reminders(user_id)` - Standalone function to schedule all task reminders for a user.\nThis can be called from the admin UI without needing a scheduler instance.\n- `clear_all_accumulated_jobs_standalone()` - Standalone function to clear all accumulated scheduler jobs.\nThis can be called from the admin UI or service to fix job accumulation issues.\n- `process_user_schedules(user_id)` - Process schedules for a specific user.\n- `process_category_schedule(user_id, category)` - Process schedule for a specific user and category.\n- `__init__(self, communication_manager)` - Initialize the SchedulerManager with communication manager.\n\nArgs:\n    communication_manager: The communication manager for sending messages\n- `run_daily_scheduler(self)` - Starts the daily scheduler in a separate thread that handles all users.\n- `stop_scheduler(self)` - Stops the scheduler thread.\n- `reset_and_reschedule_daily_messages(self, category, user_id)` - Resets scheduled tasks for a specific category and reschedules daily messages for that category.\n- `is_job_for_category(self, job, user_id, category)` - Determines if a job is scheduled for a specific user and category.\n- `schedule_all_users_immediately(self)` - Schedule daily messages immediately for all users\n- `schedule_new_user(self, user_id)` - Schedule a newly created user immediately.\nThis method should be called after a new user is created to add them to the scheduler.\n\nArgs:\n    user_id: The ID of the newly created user\n- `schedule_daily_message_job(self, user_id, category)` - Schedules daily messages immediately for the specified user and category.\nSchedules one message per active period in the category.\n- `schedule_message_for_period(self, user_id, category, period_name)` - Schedules a message at a random time within a specific period for a user and category.\n- `schedule_checkin_at_exact_time(self, user_id, period_name)` - Schedule a check-in at the exact time specified in the period.\n- `schedule_message_at_random_time(self, user_id, category)` - Schedules a message at a random time within the user's preferred time periods.\n- `is_time_conflict(self, user_id, schedule_datetime)` - Checks if there is a time conflict with any existing scheduled jobs for the user.\n- `get_random_time_within_period(self, user_id, category, period, timezone_str)` - Get a random time within a specified period for a given category.\n- `log_scheduled_tasks(self)` - Logs all current and upcoming scheduled tasks in a user-friendly manner.\n- `handle_sending_scheduled_message(self, user_id, category, retry_attempts, retry_delay)` - Handles the sending of scheduled messages with retries.\n- `handle_task_reminder(self, user_id, task_id, retry_attempts, retry_delay)` - Handles sending task reminders with retries.\n- `set_wake_timer(self, schedule_time, user_id, category, period, wake_ahead_minutes)` - Set a Windows scheduled task to wake the computer before a scheduled message.\n\nArgs:\n    schedule_time: The datetime when the message is scheduled\n    user_id: The user ID\n    category: The message category\n    period: The time period name\n    wake_ahead_minutes: Minutes before schedule_time to wake the computer (default: 4)\n- `cleanup_old_tasks(self, user_id, category)` - Cleans up all tasks (scheduled jobs and system tasks) associated with a given user and category.\n- `clear_all_accumulated_jobs(self)` - Clears all accumulated scheduler jobs and reschedules only the necessary ones.\n- `schedule_all_task_reminders(self, user_id)` - Schedule reminders for all active tasks for a user.\nFor each reminder period, pick one random task and schedule it at a random time within the period.\n- `_select_task_for_reminder__handle_edge_cases(self, incomplete_tasks)` - Handle edge cases for task selection.\n- `_select_task_for_reminder__calculate_priority_weight(self, task)` - Calculate priority-based weight for a task.\n- `_select_task_for_reminder__calculate_due_date_weight(self, task, today)` - Calculate due date proximity weight for a task.\n- `_select_task_for_reminder__calculate_task_weights(self, incomplete_tasks, today)` - Calculate weights for all tasks.\n- `_select_task_for_reminder__select_task_by_weight(self, task_weights, incomplete_tasks)` - Select a task based on calculated weights.\n- `select_task_for_reminder(self, incomplete_tasks)` - Select a task for reminder using priority-based and due date proximity weighting.\n\nArgs:\n    incomplete_tasks: List of incomplete tasks to choose from\n    \nReturns:\n    Selected task dictionary\n- `get_random_time_within_task_period(self, start_time, end_time)` - Generate a random time within a task reminder period.\nArgs:\n    start_time: Start time in HH:MM format (e.g., \"17:00\")\n    end_time: End time in HH:MM format (e.g., \"18:00\")\nReturns:\n    Random time in HH:MM format\n- `schedule_task_reminder_at_time(self, user_id, task_id, reminder_time)` - Schedule a reminder for a specific task at the specified time (daily).\n- `schedule_task_reminder(self, user_id, task_id, reminder_time)` - Legacy function for backward compatibility.\nSchedule a reminder for a specific task at the specified time.\n- `schedule_task_reminder_at_datetime(self, user_id, task_id, date_str, time_str)` - Schedule a reminder for a specific task at a specific date and time.\n- `perform_daily_log_archival(self)` - Perform daily log archival to compress old logs and clean up archives.\nThis runs automatically at 02:00 daily via the scheduler.\n- `scheduler_loop()` - No description\n**Classes:**\n- `SchedulerManager` - No description\n  - `SchedulerManager.__init__(self, communication_manager)` - Initialize the SchedulerManager with communication manager.\n\nArgs:\n    communication_manager: The communication manager for sending messages\n  - `SchedulerManager.run_daily_scheduler(self)` - Starts the daily scheduler in a separate thread that handles all users.\n  - `SchedulerManager.stop_scheduler(self)` - Stops the scheduler thread.\n  - `SchedulerManager.reset_and_reschedule_daily_messages(self, category, user_id)` - Resets scheduled tasks for a specific category and reschedules daily messages for that category.\n  - `SchedulerManager.is_job_for_category(self, job, user_id, category)` - Determines if a job is scheduled for a specific user and category.\n  - `SchedulerManager.schedule_all_users_immediately(self)` - Schedule daily messages immediately for all users\n  - `SchedulerManager.schedule_new_user(self, user_id)` - Schedule a newly created user immediately.\nThis method should be called after a new user is created to add them to the scheduler.\n\nArgs:\n    user_id: The ID of the newly created user\n  - `SchedulerManager.schedule_daily_message_job(self, user_id, category)` - Schedules daily messages immediately for the specified user and category.\nSchedules one message per active period in the category.\n  - `SchedulerManager.schedule_message_for_period(self, user_id, category, period_name)` - Schedules a message at a random time within a specific period for a user and category.\n  - `SchedulerManager.schedule_checkin_at_exact_time(self, user_id, period_name)` - Schedule a check-in at the exact time specified in the period.\n  - `SchedulerManager.schedule_message_at_random_time(self, user_id, category)` - Schedules a message at a random time within the user's preferred time periods.\n  - `SchedulerManager.is_time_conflict(self, user_id, schedule_datetime)` - Checks if there is a time conflict with any existing scheduled jobs for the user.\n  - `SchedulerManager.get_random_time_within_period(self, user_id, category, period, timezone_str)` - Get a random time within a specified period for a given category.\n  - `SchedulerManager.log_scheduled_tasks(self)` - Logs all current and upcoming scheduled tasks in a user-friendly manner.\n  - `SchedulerManager.handle_sending_scheduled_message(self, user_id, category, retry_attempts, retry_delay)` - Handles the sending of scheduled messages with retries.\n  - `SchedulerManager.handle_task_reminder(self, user_id, task_id, retry_attempts, retry_delay)` - Handles sending task reminders with retries.\n  - `SchedulerManager.set_wake_timer(self, schedule_time, user_id, category, period, wake_ahead_minutes)` - Set a Windows scheduled task to wake the computer before a scheduled message.\n\nArgs:\n    schedule_time: The datetime when the message is scheduled\n    user_id: The user ID\n    category: The message category\n    period: The time period name\n    wake_ahead_minutes: Minutes before schedule_time to wake the computer (default: 4)\n  - `SchedulerManager.cleanup_old_tasks(self, user_id, category)` - Cleans up all tasks (scheduled jobs and system tasks) associated with a given user and category.\n  - `SchedulerManager.clear_all_accumulated_jobs(self)` - Clears all accumulated scheduler jobs and reschedules only the necessary ones.\n  - `SchedulerManager.schedule_all_task_reminders(self, user_id)` - Schedule reminders for all active tasks for a user.\nFor each reminder period, pick one random task and schedule it at a random time within the period.\n  - `SchedulerManager._select_task_for_reminder__handle_edge_cases(self, incomplete_tasks)` - Handle edge cases for task selection.\n  - `SchedulerManager._select_task_for_reminder__calculate_priority_weight(self, task)` - Calculate priority-based weight for a task.\n  - `SchedulerManager._select_task_for_reminder__calculate_due_date_weight(self, task, today)` - Calculate due date proximity weight for a task.\n  - `SchedulerManager._select_task_for_reminder__calculate_task_weights(self, incomplete_tasks, today)` - Calculate weights for all tasks.\n  - `SchedulerManager._select_task_for_reminder__select_task_by_weight(self, task_weights, incomplete_tasks)` - Select a task based on calculated weights.\n  - `SchedulerManager.select_task_for_reminder(self, incomplete_tasks)` - Select a task for reminder using priority-based and due date proximity weighting.\n\nArgs:\n    incomplete_tasks: List of incomplete tasks to choose from\n    \nReturns:\n    Selected task dictionary\n  - `SchedulerManager.get_random_time_within_task_period(self, start_time, end_time)` - Generate a random time within a task reminder period.\nArgs:\n    start_time: Start time in HH:MM format (e.g., \"17:00\")\n    end_time: End time in HH:MM format (e.g., \"18:00\")\nReturns:\n    Random time in HH:MM format\n  - `SchedulerManager.schedule_task_reminder_at_time(self, user_id, task_id, reminder_time)` - Schedule a reminder for a specific task at the specified time (daily).\n  - `SchedulerManager.schedule_task_reminder(self, user_id, task_id, reminder_time)` - Legacy function for backward compatibility.\nSchedule a reminder for a specific task at the specified time.\n  - `SchedulerManager.schedule_task_reminder_at_datetime(self, user_id, task_id, date_str, time_str)` - Schedule a reminder for a specific task at a specific date and time.\n  - `SchedulerManager.perform_daily_log_archival(self)` - Perform daily log archival to compress old logs and clean up archives.\nThis runs automatically at 02:00 daily via the scheduler.\n\n### core/schemas.py\n**Functions:**\n- `validate_account_dict(data)` - No description\n- `validate_preferences_dict(data)` - No description\n- `validate_schedules_dict(data)` - No description\n- `validate_messages_file_dict(data)` - No description\n- `_coerce_bool(cls, v)` - No description\n- `_normalize_flags(cls, v)` - No description\n- `_validate_email(cls, v)` - No description\n- `_validate_discord_id(cls, v)` - No description\n- `_validate_timezone(cls, v)` - No description\n- `_normalize_contact(self)` - No description\n- `_validate_categories(cls, v)` - Validate that all categories are in the allowed list.\n- `_valid_time(cls, v)` - No description\n- `_valid_days(cls, v)` - No description\n- `_accept_legacy_shape(cls, data)` - No description\n- `to_dict(self)` - No description\n- `_normalize_days(cls, v)` - No description\n- `_normalize_periods(cls, v)` - No description\n**Classes:**\n- `FeaturesModel` - No description\n  - `FeaturesModel._coerce_bool(cls, v)` - No description\n  - `FeaturesModel._normalize_flags(cls, v)` - No description\n- `AccountModel` - No description\n  - `AccountModel._validate_email(cls, v)` - No description\n  - `AccountModel._validate_discord_id(cls, v)` - No description\n  - `AccountModel._validate_timezone(cls, v)` - No description\n- `ChannelModel` - No description\n  - `ChannelModel._normalize_contact(self)` - No description\n- `PreferencesModel` - No description\n  - `PreferencesModel._validate_categories(cls, v)` - Validate that all categories are in the allowed list.\n- `PeriodModel` - No description\n  - `PeriodModel._valid_time(cls, v)` - No description\n  - `PeriodModel._valid_days(cls, v)` - No description\n- `CategoryScheduleModel` - No description\n  - `CategoryScheduleModel._accept_legacy_shape(cls, data)` - No description\n- `SchedulesModel` - No description\n  - `SchedulesModel.to_dict(self)` - No description\n- `MessageModel` - No description\n  - `MessageModel._normalize_days(cls, v)` - No description\n  - `MessageModel._normalize_periods(cls, v)` - No description\n- `MessagesFileModel` - No description\n\n### core/service.py\n**Functions:**\n- `get_scheduler_manager()` - Get the scheduler manager instance from the global service.\nSafely handle cases where the global 'service' symbol may not be defined yet.\n- `main()` - Main entry point for the MHM backend service.\n\nCreates and starts the service, handling initialization errors and graceful shutdown.\n- `__init__(self)` - Initialize the MHM backend service.\n\nSets up communication manager, scheduler manager, and registers emergency shutdown handler.\n- `validate_configuration(self)` - Validate all configuration settings before starting the service.\n- `initialize_paths(self)` - Initialize and verify all required file paths for the service.\n\nCreates paths for log files, user data directories, and message files for all users.\n\nReturns:\n    List[str]: List of all initialized file paths\n- `_check_and_fix_logging__test_logging_functionality(self, test_message)` - Test if logging functionality works by writing a test message and flushing handlers.\n- `_check_and_fix_logging__ensure_log_file_exists(self)` - Ensure the log file exists, creating it if necessary.\n- `_check_and_fix_logging__read_recent_log_content(self)` - Read the last 1000 characters from the log file to check for recent activity.\n- `_check_and_fix_logging__verify_test_message_present(self, recent_content, test_message, test_timestamp)` - Check if our test message or recent timestamp patterns are present in log content.\n- `_check_and_fix_logging__check_recent_activity_timestamps(self, recent_content)` - Check if there's any recent activity within the last 5 minutes using timestamp patterns.\n- `_check_and_fix_logging__force_restart_logging_system(self)` - Force restart the logging system and update the global logger.\n- `check_and_fix_logging(self)` - Check if logging is working and restart if needed\n- `start(self)` - Start the MHM backend service.\n\nInitializes communication channels, scheduler, and begins the main service loop.\nSets up signal handlers for graceful shutdown.\n- `run_service_loop(self)` - Keep the service running until shutdown is requested\n- `_check_test_message_requests__get_base_directory(self)` - Get the base directory for test message request files.\n- `_check_test_message_requests__discover_request_files(self, base_dir)` - Discover all test message request files in the base directory.\n- `_check_test_message_requests__parse_request_file(self, request_file)` - Parse and validate a test message request file.\n- `_check_test_message_requests__validate_request_data(self, request_data, filename)` - Validate request data and check if it should be processed.\n- `_check_test_message_requests__process_valid_request(self, request_data)` - Process a valid test message request.\n- `_check_test_message_requests__cleanup_request_file(self, request_file, filename)` - Clean up a processed request file.\n- `_check_test_message_requests__handle_processing_error(self, request_file, filename, error)` - Handle errors during request processing.\n- `check_test_message_requests(self)` - Check for and process test message request files from admin panel\n- `_cleanup_test_message_requests__get_base_directory(self)` - Get the base directory for test message request files.\n- `_cleanup_test_message_requests__is_test_message_request_file(self, filename)` - Check if a filename matches the test message request file pattern.\n- `_cleanup_test_message_requests__remove_request_file(self, request_file, filename)` - Remove a single test message request file with proper error handling.\n- `cleanup_test_message_requests(self)` - Clean up any remaining test message request files\n- `_check_reschedule_requests__get_base_directory(self)` - Get the base directory for reschedule request files.\n- `_check_reschedule_requests__discover_request_files(self, base_dir)` - Discover all reschedule request files in the base directory.\n- `_check_reschedule_requests__parse_request_file(self, request_file)` - Parse and validate a reschedule request file.\n- `_check_reschedule_requests__validate_request_data(self, request_data, filename)` - Validate request data and check if it should be processed.\n- `_check_reschedule_requests__process_valid_request(self, request_data)` - Process a valid reschedule request.\n- `_check_reschedule_requests__cleanup_request_file(self, request_file, filename)` - Clean up a processed request file.\n- `_check_reschedule_requests__handle_processing_error(self, request_file, filename, error)` - Handle errors during request processing.\n- `check_reschedule_requests(self)` - Check for and process reschedule request files from UI\n- `cleanup_reschedule_requests(self)` - Clean up any remaining reschedule request files\n- `shutdown(self)` - Gracefully shutdown the service\n- `signal_handler(self, signum, frame)` - Handle shutdown signals for graceful service termination.\n\nArgs:\n    signum: Signal number\n    frame: Current stack frame\n- `emergency_shutdown(self)` - Emergency shutdown handler registered with atexit\n**Classes:**\n- `InitializationError` - Custom exception for initialization errors.\n- `MHMService` - No description\n  - `MHMService.__init__(self)` - Initialize the MHM backend service.\n\nSets up communication manager, scheduler manager, and registers emergency shutdown handler.\n  - `MHMService.validate_configuration(self)` - Validate all configuration settings before starting the service.\n  - `MHMService.initialize_paths(self)` - Initialize and verify all required file paths for the service.\n\nCreates paths for log files, user data directories, and message files for all users.\n\nReturns:\n    List[str]: List of all initialized file paths\n  - `MHMService._check_and_fix_logging__test_logging_functionality(self, test_message)` - Test if logging functionality works by writing a test message and flushing handlers.\n  - `MHMService._check_and_fix_logging__ensure_log_file_exists(self)` - Ensure the log file exists, creating it if necessary.\n  - `MHMService._check_and_fix_logging__read_recent_log_content(self)` - Read the last 1000 characters from the log file to check for recent activity.\n  - `MHMService._check_and_fix_logging__verify_test_message_present(self, recent_content, test_message, test_timestamp)` - Check if our test message or recent timestamp patterns are present in log content.\n  - `MHMService._check_and_fix_logging__check_recent_activity_timestamps(self, recent_content)` - Check if there's any recent activity within the last 5 minutes using timestamp patterns.\n  - `MHMService._check_and_fix_logging__force_restart_logging_system(self)` - Force restart the logging system and update the global logger.\n  - `MHMService.check_and_fix_logging(self)` - Check if logging is working and restart if needed\n  - `MHMService.start(self)` - Start the MHM backend service.\n\nInitializes communication channels, scheduler, and begins the main service loop.\nSets up signal handlers for graceful shutdown.\n  - `MHMService.run_service_loop(self)` - Keep the service running until shutdown is requested\n  - `MHMService._check_test_message_requests__get_base_directory(self)` - Get the base directory for test message request files.\n  - `MHMService._check_test_message_requests__discover_request_files(self, base_dir)` - Discover all test message request files in the base directory.\n  - `MHMService._check_test_message_requests__parse_request_file(self, request_file)` - Parse and validate a test message request file.\n  - `MHMService._check_test_message_requests__validate_request_data(self, request_data, filename)` - Validate request data and check if it should be processed.\n  - `MHMService._check_test_message_requests__process_valid_request(self, request_data)` - Process a valid test message request.\n  - `MHMService._check_test_message_requests__cleanup_request_file(self, request_file, filename)` - Clean up a processed request file.\n  - `MHMService._check_test_message_requests__handle_processing_error(self, request_file, filename, error)` - Handle errors during request processing.\n  - `MHMService.check_test_message_requests(self)` - Check for and process test message request files from admin panel\n  - `MHMService._cleanup_test_message_requests__get_base_directory(self)` - Get the base directory for test message request files.\n  - `MHMService._cleanup_test_message_requests__is_test_message_request_file(self, filename)` - Check if a filename matches the test message request file pattern.\n  - `MHMService._cleanup_test_message_requests__remove_request_file(self, request_file, filename)` - Remove a single test message request file with proper error handling.\n  - `MHMService.cleanup_test_message_requests(self)` - Clean up any remaining test message request files\n  - `MHMService._check_reschedule_requests__get_base_directory(self)` - Get the base directory for reschedule request files.\n  - `MHMService._check_reschedule_requests__discover_request_files(self, base_dir)` - Discover all reschedule request files in the base directory.\n  - `MHMService._check_reschedule_requests__parse_request_file(self, request_file)` - Parse and validate a reschedule request file.\n  - `MHMService._check_reschedule_requests__validate_request_data(self, request_data, filename)` - Validate request data and check if it should be processed.\n  - `MHMService._check_reschedule_requests__process_valid_request(self, request_data)` - Process a valid reschedule request.\n  - `MHMService._check_reschedule_requests__cleanup_request_file(self, request_file, filename)` - Clean up a processed request file.\n  - `MHMService._check_reschedule_requests__handle_processing_error(self, request_file, filename, error)` - Handle errors during request processing.\n  - `MHMService.check_reschedule_requests(self)` - Check for and process reschedule request files from UI\n  - `MHMService.cleanup_reschedule_requests(self)` - Clean up any remaining reschedule request files\n  - `MHMService.shutdown(self)` - Gracefully shutdown the service\n  - `MHMService.signal_handler(self, signum, frame)` - Handle shutdown signals for graceful service termination.\n\nArgs:\n    signum: Signal number\n    frame: Current stack frame\n  - `MHMService.emergency_shutdown(self)` - Emergency shutdown handler registered with atexit\n\n### core/service_utilities.py\n**Functions:**\n- `create_reschedule_request(user_id, category)` - Create a reschedule request file that the service will pick up.\n\nArgs:\n    user_id: The user ID\n    category: The category to reschedule\n    \nReturns:\n    bool: True if request was created successfully\n- `is_service_running()` - Check if the MHM service is currently running\n- `wait_for_network(timeout)` - Wait for the network to be available, retrying every 5 seconds up to a timeout.\n- `load_and_localize_datetime(datetime_str, timezone_str)` - Load and localize a datetime string to a specific timezone.\n\nArgs:\n    datetime_str: Datetime string in format \"YYYY-MM-DD HH:MM\"\n    timezone_str: Timezone string (default: 'America/Regina')\n    \nReturns:\n    datetime: Timezone-aware datetime object\n    \nRaises:\n    InvalidTimeFormatError: If datetime_str format is invalid\n- `__init__(self, interval)` - Initialize the throttler with a specified interval.\n\nArgs:\n    interval: Time interval in seconds between allowed operations\n- `should_run(self)` - Check if enough time has passed since the last run to allow another execution.\n**Classes:**\n- `Throttler` - A utility class for throttling operations based on time intervals.\n\nPrevents operations from running too frequently by tracking the last execution time.\n  - `Throttler.__init__(self, interval)` - Initialize the throttler with a specified interval.\n\nArgs:\n    interval: Time interval in seconds between allowed operations\n  - `Throttler.should_run(self)` - Check if enough time has passed since the last run to allow another execution.\n- `InvalidTimeFormatError` - Exception raised when time format is invalid.\n\nUsed for time parsing and validation operations.\n\n### core/ui_management.py\n**Functions:**\n- `clear_period_widgets_from_layout(layout, widget_list)` - Clear all period widgets from a layout.\n\nArgs:\n    layout: The QVBoxLayout to clear\n    widget_list: Optional list to track widgets (will be cleared if provided)\n\nReturns:\n    None\n- `add_period_widget_to_layout(layout, period_name, period_data, category, parent_widget, widget_list, delete_callback)` - Add a period widget to a layout with proper display formatting.\n\nArgs:\n    layout: The QVBoxLayout to add the widget to\n    period_name: The period name\n    period_data: The period data dictionary\n    category: The category (tasks, checkin, or schedule category)\n    parent_widget: The parent widget for the period widget\n    widget_list: Optional list to track widgets\n    delete_callback: Optional callback for delete signal\n\nReturns:\n    The created PeriodRowWidget or None if failed\n- `load_period_widgets_for_category(layout, user_id, category, parent_widget, widget_list, delete_callback)` - Load and display period widgets for a specific category.\n\nArgs:\n    layout: The QVBoxLayout to add widgets to\n    user_id: The user ID\n    category: The category (tasks, checkin, or schedule category)\n    parent_widget: The parent widget for period widgets\n    widget_list: Optional list to track widgets\n    delete_callback: Optional callback for delete signal\n\nReturns:\n    List of created widgets\n- `collect_period_data_from_widgets(widget_list, category)` - Collect period data from a list of period widgets.\n\nArgs:\n    widget_list: List of PeriodRowWidget instances\n    category: The category (tasks, checkin, or schedule category)\n\nReturns:\n    Dictionary of period data with storage-formatted names, each with only 'active', 'days', 'start_time', 'end_time'.\n- `period_name_for_display(period_name, category)` - Convert period name to display format using existing logic.\n\nArgs:\n    period_name: The period name to convert\n    category: The category (tasks, checkin, or schedule category)\n\nReturns:\n    Display-formatted period name\n- `period_name_for_storage(display_name, category)` - Convert display period name to storage format.\n\nArgs:\n    display_name: The display-formatted period name\n    category: The category (tasks, checkin, or schedule category)\n\nReturns:\n    Storage-formatted period name (preserve original case)\n\n### core/user_data_handlers.py\n**Functions:**\n- `register_data_loader(data_type, loader_func, file_type, default_fields, metadata_fields, description)` - Proxy to the original *register_data_loader*.\n\nImported here so callers can simply do::\n\n    from core.user_data_handlers import register_data_loader\n\n\u2026and forget about *core.user_management*.\n- `get_user_data(user_id, data_types, fields, auto_create, include_metadata, normalize_on_read)` - Migrated implementation of get_user_data.\n- `_save_user_data__validate_input(user_id, data_updates)` - Validate input parameters and initialize result structure.\n- `_save_user_data__create_backup(user_id, valid_types, create_backup)` - Create backup if needed for major data updates.\n- `_save_user_data__validate_data(user_id, data_updates, valid_types, validate_data, is_new_user)` - Validate data for new and existing users.\n- `_save_user_data__legacy_preferences(updated, updates, user_id)` - Handle legacy preferences compatibility and cleanup.\n- `_save_user_data__normalize_data(dt, updated)` - Apply Pydantic normalization to data.\n- `_save_user_data__save_single_type(user_id, dt, updates, auto_create)` - Save a single data type for a user.\n- `_save_user_data__update_index(user_id, result, update_index)` - Update user index and clear cache if needed.\n- `save_user_data(user_id, data_updates, auto_create, update_index, create_backup, validate_data)` - Migrated implementation of save_user_data.\n- `save_user_data_transaction(user_id, data_updates, auto_create)` - Atomic wrapper copied from user_management.\n- `get_all_user_ids()` - Return a list of *all* user IDs known to the system.\n- `update_user_schedules(user_id, schedules_data)` - Persist a complete schedules dict for *user_id*.\n\nWrapper around the original helper in **core.user_management** \u2013 keeps\noutside modules decoupled from the legacy path.\n- `update_user_account(user_id, updates)` - Update (part of) a user\u2019s *account.json* file.\n\nThis is a thin convenience wrapper around :pyfunc:`save_user_data` that\nscopes *updates* to the ``account`` data-type.\n- `update_user_preferences(user_id, updates)` - Update *preferences.json*.\n\nIncludes the extra bookkeeping originally implemented in\n``core.user_management.update_user_preferences`` (default schedule creation\nfor new categories, message-file creation, etc.) so behaviour remains\nunchanged.\n- `update_user_context(user_id, updates)` - Update *user_context.json* for the given user.\n- `update_channel_preferences(user_id, updates)` - Specialised helper \u2013 update only the *preferences.channel* subtree.\n\n### core/user_data_manager.py\n**Functions:**\n- `update_message_references(user_id)` - Update message file references for a user.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    bool: True if references were updated successfully\n- `backup_user_data(user_id, include_messages)` - Create a backup of user data.\n\nArgs:\n    user_id: The user's ID\n    include_messages: Whether to include message files in backup\n    \nReturns:\n    str: Path to the created backup file\n- `export_user_data(user_id, export_format)` - Export user data to a structured format.\n\nArgs:\n    user_id: The user's ID\n    export_format: Format for export (currently only \"json\" supported)\n    \nReturns:\n    Dict containing all user data in structured format\n- `delete_user_completely(user_id, create_backup)` - Completely delete a user and all their data.\n\nArgs:\n    user_id: The user's ID\n    create_backup: Whether to create a backup before deletion\n    \nReturns:\n    bool: True if user was deleted successfully\n- `get_user_data_summary(user_id)` - Get a summary of user data.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    Dict containing user data summary\n- `update_user_index(user_id)` - Update the user index for a specific user.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    bool: True if index was updated successfully\n- `rebuild_user_index()` - Rebuild the complete user index.\n\nReturns:\n    bool: True if index was rebuilt successfully\n- `get_user_info_for_data_manager(user_id)` - Get user info using the new centralized data structure.\n- `build_user_index()` - Build an index of all users and their message data.\n- `get_user_summary(user_id)` - Get a summary of user data and message statistics.\n- `get_all_user_summaries()` - Get summaries for all users.\n- `get_user_analytics_summary(user_id)` - Get an analytics summary for a user including interaction patterns and data usage.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    Dict containing analytics summary information\n- `__init__(self)` - Initialize the UserDataManager.\n\nSets up backup directory and index file path for user data management operations.\n- `update_message_references(self, user_id)` - Add/update message file references in user profile\n- `get_user_message_files(self, user_id)` - Get all message file paths for a user\n- `backup_user_data(self, user_id, include_messages)` - Create a complete backup of user's data\n- `export_user_data(self, user_id, export_format)` - Export all user data to a structured format\n- `delete_user_completely(self, user_id, create_backup)` - Completely remove all traces of a user from the system\n- `get_user_data_summary(self, user_id)` - Get a comprehensive summary of user data including file counts and sizes.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    Dict containing summary information about the user's data\n- `_get_user_data_summary__initialize_summary(self, user_id)` - Initialize the summary structure with default values.\n- `_get_user_data_summary__process_core_files(self, user_id, summary)` - Process core user data files (profile, preferences, schedules, etc.).\n- `_get_user_data_summary__add_file_info(self, file_path, file_type, summary)` - Add basic file information to the summary.\n- `_get_user_data_summary__add_special_file_details(self, file_path, file_type, summary)` - Add special details for specific file types (schedules, sent_messages).\n- `_get_user_data_summary__add_schedule_details(self, file_path, summary)` - Add schedule-specific details to the summary.\n- `_get_user_data_summary__add_sent_messages_details(self, file_path, summary)` - Add sent messages count to the summary.\n- `_get_user_data_summary__process_message_files(self, user_id, summary)` - Process message files for all user categories.\n- `_get_user_data_summary__ensure_message_files(self, user_id, categories)` - Ensure message files exist for all user categories.\n- `_get_user_data_summary__process_enabled_message_files(self, user_id, categories, summary)` - Process message files for enabled categories.\n- `_get_user_data_summary__process_orphaned_message_files(self, user_id, categories, message_files, summary)` - Process orphaned message files (categories not enabled but files exist).\n- `_get_user_data_summary__add_message_file_info(self, file_path, category, summary, orphaned)` - Add message file information to the summary.\n- `_get_user_data_summary__add_missing_message_file_info(self, file_path, category, summary, user_id)` - Add information for missing message files.\n- `_get_user_data_summary__process_log_files(self, user_id, summary)` - Process log files (checkins, chat_interactions).\n- `_get_user_data_summary__add_log_file_info(self, log_file, log_type, summary)` - Add log file information to the summary.\n- `_get_last_interaction(self, user_id)` - Get the timestamp of the user's last interaction with the system.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    str: ISO format timestamp of last interaction, or default if none found\n- `update_user_index(self, user_id)` - Update the user index with current information for a specific user.\n\nCreates a comprehensive multi-identifier structure:\n- Fast lookups: {\"internal_username\": \"UUID\", \"email\": \"UUID\", \"discord_user_id\": \"UUID\", \"phone\": \"UUID\"}\n- Detailed mapping: {\"users\": {\"UUID\": {\"internal_username\": \"...\", \"active\": true, ...}}} for rich info\n\nArgs:\n    user_id: The user's ID (UUID)\n    \nReturns:\n    bool: True if index was updated successfully\n- `remove_from_index(self, user_id)` - Remove a user from the index.\n\nRemoves all identifier mappings (internal_username, email, discord_user_id, phone) and detailed mapping.\n\nArgs:\n    user_id: The user's ID (UUID)\n    \nReturns:\n    bool: True if user was removed from index successfully\n- `rebuild_full_index(self)` - Rebuild the complete user index from scratch.\n\nCreates a comprehensive multi-identifier structure:\n- Fast lookups: {\"internal_username\": \"UUID\", \"email:email\": \"UUID\", \"discord:discord_id\": \"UUID\", \"phone:phone\": \"UUID\"}\n- Detailed mapping: {\"users\": {\"UUID\": {\"internal_username\": \"...\", \"active\": true, ...}}} for rich info\n\nReturns:\n    bool: True if index was rebuilt successfully\n- `search_users(self, query, search_fields)` - Search for users based on query string and specified fields.\n\nArgs:\n    query: Search query string\n    search_fields: List of fields to search in (default: all fields)\n    \nReturns:\n    List of user summaries matching the search criteria\n**Classes:**\n- `UserDataManager` - Enhanced user data management with references, backup, and indexing capabilities\n  - `UserDataManager.__init__(self)` - Initialize the UserDataManager.\n\nSets up backup directory and index file path for user data management operations.\n  - `UserDataManager.update_message_references(self, user_id)` - Add/update message file references in user profile\n  - `UserDataManager.get_user_message_files(self, user_id)` - Get all message file paths for a user\n  - `UserDataManager.backup_user_data(self, user_id, include_messages)` - Create a complete backup of user's data\n  - `UserDataManager.export_user_data(self, user_id, export_format)` - Export all user data to a structured format\n  - `UserDataManager.delete_user_completely(self, user_id, create_backup)` - Completely remove all traces of a user from the system\n  - `UserDataManager.get_user_data_summary(self, user_id)` - Get a comprehensive summary of user data including file counts and sizes.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    Dict containing summary information about the user's data\n  - `UserDataManager._get_user_data_summary__initialize_summary(self, user_id)` - Initialize the summary structure with default values.\n  - `UserDataManager._get_user_data_summary__process_core_files(self, user_id, summary)` - Process core user data files (profile, preferences, schedules, etc.).\n  - `UserDataManager._get_user_data_summary__add_file_info(self, file_path, file_type, summary)` - Add basic file information to the summary.\n  - `UserDataManager._get_user_data_summary__add_special_file_details(self, file_path, file_type, summary)` - Add special details for specific file types (schedules, sent_messages).\n  - `UserDataManager._get_user_data_summary__add_schedule_details(self, file_path, summary)` - Add schedule-specific details to the summary.\n  - `UserDataManager._get_user_data_summary__add_sent_messages_details(self, file_path, summary)` - Add sent messages count to the summary.\n  - `UserDataManager._get_user_data_summary__process_message_files(self, user_id, summary)` - Process message files for all user categories.\n  - `UserDataManager._get_user_data_summary__ensure_message_files(self, user_id, categories)` - Ensure message files exist for all user categories.\n  - `UserDataManager._get_user_data_summary__process_enabled_message_files(self, user_id, categories, summary)` - Process message files for enabled categories.\n  - `UserDataManager._get_user_data_summary__process_orphaned_message_files(self, user_id, categories, message_files, summary)` - Process orphaned message files (categories not enabled but files exist).\n  - `UserDataManager._get_user_data_summary__add_message_file_info(self, file_path, category, summary, orphaned)` - Add message file information to the summary.\n  - `UserDataManager._get_user_data_summary__add_missing_message_file_info(self, file_path, category, summary, user_id)` - Add information for missing message files.\n  - `UserDataManager._get_user_data_summary__process_log_files(self, user_id, summary)` - Process log files (checkins, chat_interactions).\n  - `UserDataManager._get_user_data_summary__add_log_file_info(self, log_file, log_type, summary)` - Add log file information to the summary.\n  - `UserDataManager._get_last_interaction(self, user_id)` - Get the timestamp of the user's last interaction with the system.\n\nArgs:\n    user_id: The user's ID\n    \nReturns:\n    str: ISO format timestamp of last interaction, or default if none found\n  - `UserDataManager.update_user_index(self, user_id)` - Update the user index with current information for a specific user.\n\nCreates a comprehensive multi-identifier structure:\n- Fast lookups: {\"internal_username\": \"UUID\", \"email\": \"UUID\", \"discord_user_id\": \"UUID\", \"phone\": \"UUID\"}\n- Detailed mapping: {\"users\": {\"UUID\": {\"internal_username\": \"...\", \"active\": true, ...}}} for rich info\n\nArgs:\n    user_id: The user's ID (UUID)\n    \nReturns:\n    bool: True if index was updated successfully\n  - `UserDataManager.remove_from_index(self, user_id)` - Remove a user from the index.\n\nRemoves all identifier mappings (internal_username, email, discord_user_id, phone) and detailed mapping.\n\nArgs:\n    user_id: The user's ID (UUID)\n    \nReturns:\n    bool: True if user was removed from index successfully\n  - `UserDataManager.rebuild_full_index(self)` - Rebuild the complete user index from scratch.\n\nCreates a comprehensive multi-identifier structure:\n- Fast lookups: {\"internal_username\": \"UUID\", \"email:email\": \"UUID\", \"discord:discord_id\": \"UUID\", \"phone:phone\": \"UUID\"}\n- Detailed mapping: {\"users\": {\"UUID\": {\"internal_username\": \"...\", \"active\": true, ...}}} for rich info\n\nReturns:\n    bool: True if index was rebuilt successfully\n  - `UserDataManager.search_users(self, query, search_fields)` - Search for users based on query string and specified fields.\n\nArgs:\n    query: Search query string\n    search_fields: List of fields to search in (default: all fields)\n    \nReturns:\n    List of user summaries matching the search criteria\n\n### core/user_data_validation.py\n**Functions:**\n- `is_valid_email(email)` - No description\n- `is_valid_phone(phone)` - No description\n- `validate_schedule_periods__validate_time_format(time_str)` - No description\n- `_shared__title_case(text)` - Convert text to title case with special handling for technical terms.\n- `validate_user_update(user_id, data_type, updates)` - Validate partial updates to an existing user's data.\n- `validate_schedule_periods(periods, category)` - Validate schedule periods and return (is_valid, error_messages).\n\nArgs:\n    periods: Dictionary of period_name -> period_data\n    category: Category name for error messages (e.g., \"tasks\", \"check-ins\")\n\nReturns:\n    Tuple of (is_valid, list_of_error_messages)\n- `validate_new_user_data(user_id, data_updates)` - Validate complete dataset required for a brand-new user.\n- `validate_personalization_data(data)` - Validate *context/personalization* structure.\n\nNo field is required; we only type-check fields that are present.\nThis logic previously lived in ``core.user_management``.\n\n### core/user_management.py\n**Functions:**\n- `register_data_loader(data_type, loader_func, file_type, default_fields, metadata_fields, description)` - Register a new data loader for the centralized system.\n\nArgs:\n    data_type: Unique identifier for the data type\n    loader_func: Function that loads the data\n    file_type: File type identifier\n    default_fields: Commonly accessed fields\n    metadata_fields: Fields that contain metadata\n    description: Human-readable description\n- `register_default_loaders()` - Ensure required loaders are registered (idempotent).\n\nMutates the shared USER_DATA_LOADERS in-place, setting any missing/None\nloader entries for: account, preferences, context, schedules.\n- `_ensure_default_loaders_once()` - No description\n- `get_available_data_types()` - Get list of available data types.\n- `get_data_type_info(data_type)` - Get information about a specific data type.\n- `get_all_user_ids()` - Get all user IDs from the system.\n- `_get_user_data__load_account(user_id, auto_create)` - Load user account data from account.json.\n- `_save_user_data__save_account(user_id, account_data)` - Save user account data to account.json.\n- `_get_user_data__load_preferences(user_id, auto_create)` - Load user preferences data from preferences.json.\n- `_save_user_data__save_preferences(user_id, preferences_data)` - Save user preferences data to preferences.json.\n- `_get_user_data__load_context(user_id, auto_create)` - Load user context data from user_context.json.\n- `_save_user_data__save_context(user_id, context_data)` - Save user context data to user_context.json.\n- `_get_user_data__load_schedules(user_id, auto_create)` - Load user schedules data from schedules.json.\n- `_save_user_data__save_schedules(user_id, schedules_data)` - Save user schedules data to schedules.json.\n- `update_user_schedules(user_id, schedules_data)` - Update user schedules data.\n- `create_default_schedule_periods(category)` - Create default schedule periods for a new category.\n- `migrate_legacy_schedules_structure(schedules_data)` - Migrate legacy schedules structure to new format.\n- `ensure_category_has_default_schedule(user_id, category)` - Ensure a category has default schedule periods if it doesn't exist.\n- `update_user_account(user_id, updates, auto_create)` - Update user account information.\n- `update_user_context(user_id, updates, auto_create)` - Update user context information.\n- `update_channel_preferences(user_id, updates, auto_create)` - Update channel preferences without triggering category schedule creation.\n- `create_new_user(user_data)` - Create a new user with the new data structure.\n- `_get_user_id_by_identifier__by_internal_username(internal_username)` - Helper function: Get user ID by internal username using the user index for fast lookup.\n- `_get_user_id_by_identifier__by_email(email)` - Helper function: Get user ID by email using the user index for fast lookup.\n- `_get_user_id_by_identifier__by_phone(phone)` - Helper function: Get user ID by phone using the user index for fast lookup.\n- `_get_user_id_by_identifier__by_chat_id(chat_id)` - Helper function: Get user ID by chat ID.\n- `_get_user_id_by_identifier__by_discord_user_id(discord_user_id)` - Helper function: Get user ID by Discord user ID using the user index for fast lookup.\n- `clear_user_caches(user_id)` - Clear user data caches.\n- `ensure_unique_ids(data)` - Ensure all messages have unique IDs.\n- `load_and_ensure_ids(user_id)` - Load messages for all categories and ensure IDs are unique for a user.\n- `ensure_all_categories_have_schedules(user_id)` - Ensure all categories in user preferences have corresponding schedules.\n- `get_user_categories(user_id)` - Get user's message categories using centralized system.\n- `get_user_data_with_metadata(user_id, data_types)` - Get user data with file metadata using centralized system.\n- `_load_presets_json()` - Load presets from resources/presets.json (cached).\n- `get_predefined_options(field)` - Return predefined options for a personalization field.\n- `get_timezone_options()` - Get timezone options.\n- `create_default_personalization_data()` - Create default personalization data structure.\n- `get_personalization_field(user_id, field)` - Get a specific field from personalization data using centralized system.\n- `update_personalization_field(user_id, field, value)` - Update a specific field in personalization data using centralized system.\n- `add_personalization_item(user_id, field, item)` - Add an item to a list field in personalization data using centralized system.\n- `remove_personalization_item(user_id, field, item)` - Remove an item from a list field in personalization data using centralized system.\n- `clear_personalization_cache(user_id)` - Clear the personalization cache for a specific user or all users.\n- `get_user_id_by_identifier(identifier)` - Get user ID by any identifier (internal_username, email, discord_user_id, phone).\n\nAutomatically detects the identifier type and uses the appropriate lookup method.\n\nArgs:\n    identifier: The identifier to look up (can be any supported type)\n    \nReturns:\n    Optional[str]: User ID if found, None otherwise\n\n### run_mhm.py\n**Functions:**\n- `main()` - Launch the MHM Manager UI\n\n### run_tests.py\n**Functions:**\n- `run_command(cmd, description, progress_interval)` - Run a command and return success status with periodic progress logs.\n- `print_test_mode_info()` - Print helpful information about test modes.\n- `main()` - No description\n\n### tasks/task_management.py\n**Functions:**\n- `ensure_task_directory(user_id)` - Ensure the task directory structure exists for a user.\n- `load_active_tasks(user_id)` - Load active tasks for a user.\n- `save_active_tasks(user_id, tasks)` - Save active tasks for a user.\n- `load_completed_tasks(user_id)` - Load completed tasks for a user.\n- `save_completed_tasks(user_id, tasks)` - Save completed tasks for a user.\n- `create_task(user_id, title, description, due_date, due_time, priority, reminder_periods, tags, quick_reminders, recurrence_pattern, recurrence_interval, repeat_after_completion)` - Create a new task for a user.\n- `update_task(user_id, task_id, updates)` - Update an existing task.\n- `complete_task(user_id, task_id, completion_data)` - Mark a task as completed.\n- `restore_task(user_id, task_id)` - Restore a completed task to active status.\n- `delete_task(user_id, task_id)` - Delete a task (permanently remove it).\n- `get_task_by_id(user_id, task_id)` - Get a specific task by ID.\n- `get_tasks_due_soon(user_id, days_ahead)` - Get tasks due within the specified number of days.\n- `are_tasks_enabled(user_id)` - Check if task management is enabled for a user.\n- `schedule_task_reminders(user_id, task_id, reminder_periods)` - Schedule reminders for a specific task based on its reminder periods.\n- `cleanup_task_reminders(user_id, task_id)` - Clean up all reminders for a specific task.\n- `add_user_task_tag(user_id, tag)` - Add a new tag to the user's task settings.\n- `setup_default_task_tags(user_id)` - Set up default task tags for a user when task management is first enabled.\n- `remove_user_task_tag(user_id, tag)` - Remove a tag from the user's task settings.\n- `get_user_task_stats(user_id)` - Get task statistics for a user.\n- `_create_next_recurring_task_instance(user_id, completed_task)` - Create the next instance of a recurring task when the current one is completed.\n- `_calculate_next_due_date(completion_date, recurrence_pattern, recurrence_interval, repeat_after_completion)` - Calculate the next due date for a recurring task.\n**Classes:**\n- `TaskManagementError` - Custom exception for task management errors.\n\n### tests/behavior/test_account_management_real_behavior.py\n**Functions:**\n- `setup_test_environment(test_data_dir)` - Create isolated test environment with temporary directories\n- `create_test_user_data(user_id, test_data_dir, base_state)` - Create test user data with specific base state using centralized utilities\n- `test_user_data_loading_real_behavior(test_data_dir, mock_config)` - Test actual user data loading with file verification\n- `test_feature_enablement_real_behavior(test_data_dir, mock_config)` - Test actual feature enablement with file creation/deletion\n- `test_category_management_real_behavior(test_data_dir, mock_config)` - Test actual category management with file persistence\n- `test_schedule_period_management_real_behavior(test_data_dir)` - Test actual schedule period management with file persistence\n- `test_integration_scenarios_real_behavior(test_data_dir)` - Test complex integration scenarios with multiple operations\n- `test_data_consistency_real_behavior(test_data_dir, mock_config)` - Test data consistency across multiple operations\n- `cleanup_test_environment(test_dir)` - Clean up test environment\n- `main()` - Run all real behavior tests\n\n### tests/behavior/test_ai_chatbot_behavior.py\n**Functions:**\n- `test_singleton_behavior_creates_single_instance(self, test_data_dir)` - Test that AI chatbot singleton actually creates only one instance.\n- `test_prompt_manager_creates_actual_file(self, test_data_dir)` - Test that prompt manager actually creates and manages prompt files.\n- `test_response_cache_actually_stores_and_retrieves_data(self, test_data_dir)` - Test that response cache actually stores and retrieves data.\n- `test_response_cache_cleanup_actually_removes_entries(self, test_data_dir)` - Test that response cache cleanup actually removes old entries.\n- `test_ai_chatbot_generates_actual_responses(self, test_data_dir)` - Test that AI chatbot actually generates responses with real behavior.\n- `test_ai_chatbot_handles_api_failures_gracefully(self, test_data_dir)` - Test that AI chatbot handles API failures and provides fallbacks.\n- `test_ai_chatbot_tracks_conversation_history(self, test_data_dir)` - Test that AI chatbot actually tracks conversation history.\n- `test_ai_chatbot_uses_user_context_for_personalization(self, test_data_dir)` - Test that AI chatbot actually uses user context for personalized responses.\n- `test_ai_chatbot_adaptive_timeout_responds_to_system_resources(self, test_data_dir)` - Test that AI chatbot adaptive timeout actually responds to system resources.\n- `test_ai_chatbot_command_parsing_creates_structured_output(self, test_data_dir)` - Test that AI chatbot command parsing actually creates structured output.\n- `test_ai_chatbot_prompt_optimization_improves_performance(self, test_data_dir)` - Test that AI chatbot prompt optimization actually improves performance.\n- `test_ai_chatbot_status_reporting_actual_system_state(self, test_data_dir)` - Test that AI chatbot status reporting reflects actual system state.\n- `test_ai_chatbot_system_prompt_integration_test_actual_functionality(self, test_data_dir)` - Test that AI chatbot system prompt integration test actually verifies functionality.\n- `test_ai_chatbot_error_handling_preserves_system_stability(self, test_data_dir)` - Test that AI chatbot error handling actually preserves system stability.\n- `test_ai_chatbot_conversation_manager_integration(self, test_data_dir)` - Test that AI chatbot integrates properly with conversation manager.\n- `test_ai_chatbot_user_context_manager_integration(self, test_data_dir)` - Test that AI chatbot integrates properly with user context manager.\n- `test_ai_chatbot_response_tracking_integration(self, test_data_dir)` - Test that AI chatbot integrates properly with response tracking.\n- `test_ai_chatbot_performance_under_load(self, test_data_dir)` - Test that AI chatbot performs well under load.\n- `test_ai_chatbot_cache_performance_improvement(self, test_data_dir)` - Test that AI chatbot cache actually improves performance.\n- `test_ai_chatbot_cleanup_and_resource_management(self, test_data_dir)` - Test that AI chatbot properly manages resources and cleanup.\n- `test_ai_chatbot_with_real_user_data(self, test_data_dir, mock_config)` - Test AI chatbot with real user data files.\n- `test_ai_chatbot_error_recovery_with_real_files(self, test_data_dir)` - Test AI chatbot error recovery with real file operations.\n- `test_ai_chatbot_concurrent_access_safety(self, test_data_dir)` - Test that AI chatbot handles concurrent access safely.\n- `generate_response(thread_id)` - No description\n**Classes:**\n- `TestAIChatBotBehavior` - Test AI chatbot real behavior and side effects.\n  - `TestAIChatBotBehavior.test_singleton_behavior_creates_single_instance(self, test_data_dir)` - Test that AI chatbot singleton actually creates only one instance.\n  - `TestAIChatBotBehavior.test_prompt_manager_creates_actual_file(self, test_data_dir)` - Test that prompt manager actually creates and manages prompt files.\n  - `TestAIChatBotBehavior.test_response_cache_actually_stores_and_retrieves_data(self, test_data_dir)` - Test that response cache actually stores and retrieves data.\n  - `TestAIChatBotBehavior.test_response_cache_cleanup_actually_removes_entries(self, test_data_dir)` - Test that response cache cleanup actually removes old entries.\n  - `TestAIChatBotBehavior.test_ai_chatbot_generates_actual_responses(self, test_data_dir)` - Test that AI chatbot actually generates responses with real behavior.\n  - `TestAIChatBotBehavior.test_ai_chatbot_handles_api_failures_gracefully(self, test_data_dir)` - Test that AI chatbot handles API failures and provides fallbacks.\n  - `TestAIChatBotBehavior.test_ai_chatbot_tracks_conversation_history(self, test_data_dir)` - Test that AI chatbot actually tracks conversation history.\n  - `TestAIChatBotBehavior.test_ai_chatbot_uses_user_context_for_personalization(self, test_data_dir)` - Test that AI chatbot actually uses user context for personalized responses.\n  - `TestAIChatBotBehavior.test_ai_chatbot_adaptive_timeout_responds_to_system_resources(self, test_data_dir)` - Test that AI chatbot adaptive timeout actually responds to system resources.\n  - `TestAIChatBotBehavior.test_ai_chatbot_command_parsing_creates_structured_output(self, test_data_dir)` - Test that AI chatbot command parsing actually creates structured output.\n  - `TestAIChatBotBehavior.test_ai_chatbot_prompt_optimization_improves_performance(self, test_data_dir)` - Test that AI chatbot prompt optimization actually improves performance.\n  - `TestAIChatBotBehavior.test_ai_chatbot_status_reporting_actual_system_state(self, test_data_dir)` - Test that AI chatbot status reporting reflects actual system state.\n  - `TestAIChatBotBehavior.test_ai_chatbot_system_prompt_integration_test_actual_functionality(self, test_data_dir)` - Test that AI chatbot system prompt integration test actually verifies functionality.\n  - `TestAIChatBotBehavior.test_ai_chatbot_error_handling_preserves_system_stability(self, test_data_dir)` - Test that AI chatbot error handling actually preserves system stability.\n  - `TestAIChatBotBehavior.test_ai_chatbot_conversation_manager_integration(self, test_data_dir)` - Test that AI chatbot integrates properly with conversation manager.\n  - `TestAIChatBotBehavior.test_ai_chatbot_user_context_manager_integration(self, test_data_dir)` - Test that AI chatbot integrates properly with user context manager.\n  - `TestAIChatBotBehavior.test_ai_chatbot_response_tracking_integration(self, test_data_dir)` - Test that AI chatbot integrates properly with response tracking.\n  - `TestAIChatBotBehavior.test_ai_chatbot_performance_under_load(self, test_data_dir)` - Test that AI chatbot performs well under load.\n  - `TestAIChatBotBehavior.test_ai_chatbot_cache_performance_improvement(self, test_data_dir)` - Test that AI chatbot cache actually improves performance.\n  - `TestAIChatBotBehavior.test_ai_chatbot_cleanup_and_resource_management(self, test_data_dir)` - Test that AI chatbot properly manages resources and cleanup.\n- `TestAIChatBotIntegration` - Test AI chatbot integration with other system components.\n  - `TestAIChatBotIntegration.test_ai_chatbot_with_real_user_data(self, test_data_dir, mock_config)` - Test AI chatbot with real user data files.\n  - `TestAIChatBotIntegration.test_ai_chatbot_error_recovery_with_real_files(self, test_data_dir)` - Test AI chatbot error recovery with real file operations.\n  - `TestAIChatBotIntegration.test_ai_chatbot_concurrent_access_safety(self, test_data_dir)` - Test that AI chatbot handles concurrent access safely.\n\n### tests/behavior/test_ai_context_builder_behavior.py\n**Functions:**\n- `test_context_builder_initialization_creates_components(self, test_data_dir)` - Test that context builder initialization creates required components.\n- `test_build_user_context_creates_structured_context_data(self, test_data_dir)` - Test that build_user_context creates actual structured context data.\n- `test_build_user_context_includes_user_data_from_files(self, test_data_dir)` - Test that build_user_context actually reads and includes user data from files.\n- `test_build_user_context_includes_conversation_history(self, test_data_dir)` - Test that build_user_context includes actual conversation history.\n- `test_build_user_context_handles_missing_user_data_gracefully(self, test_data_dir)` - Test that build_user_context handles missing user data gracefully.\n- `test_build_user_context_includes_current_time(self, test_data_dir)` - Test that build_user_context includes current time information.\n- `test_build_user_context_includes_recent_checkins(self, test_data_dir)` - Test that build_user_context includes recent checkins information.\n- `test_build_user_context_without_conversation_history(self, test_data_dir)` - Test that build_user_context can exclude conversation history.\n- `test_build_user_context_handles_error_conditions(self, test_data_dir)` - Test that build_user_context handles error conditions gracefully.\n- `test_build_user_context_creates_fresh_timestamp(self, test_data_dir)` - Test that build_user_context creates fresh timestamp for each call.\n- `test_build_user_context_handles_empty_user_data(self, test_data_dir)` - Test that build_user_context handles empty user data gracefully.\n- `test_build_user_context_handles_corrupted_user_data(self, test_data_dir)` - Test that build_user_context handles corrupted user data gracefully.\n- `test_build_user_context_handles_missing_files(self, test_data_dir)` - Test that build_user_context handles missing user files gracefully.\n- `test_build_user_context_handles_empty_files(self, test_data_dir)` - Test that build_user_context handles empty user files gracefully.\n- `test_build_user_context_handles_long_user_id(self, test_data_dir)` - Test that build_user_context handles long user IDs correctly.\n- `test_build_user_context_handles_special_characters_in_user_id(self, test_data_dir)` - Test that build_user_context handles special characters in user IDs.\n- `test_build_user_context_handles_unicode_user_id(self, test_data_dir)` - Test that build_user_context handles unicode characters in user IDs.\n- `test_build_user_context_handles_concurrent_access(self, test_data_dir)` - Test that build_user_context handles concurrent access safely.\n- `test_build_user_context_handles_rapid_calls(self, test_data_dir)` - Test that build_user_context handles rapid successive calls.\n- `test_build_user_context_handles_large_user_data(self, test_data_dir)` - Test that build_user_context handles large user data efficiently.\n- `build_context()` - No description\n**Classes:**\n- `TestContextBuilderBehavior` - Test real behavior of context builder functionality.\n  - `TestContextBuilderBehavior.test_context_builder_initialization_creates_components(self, test_data_dir)` - Test that context builder initialization creates required components.\n  - `TestContextBuilderBehavior.test_build_user_context_creates_structured_context_data(self, test_data_dir)` - Test that build_user_context creates actual structured context data.\n  - `TestContextBuilderBehavior.test_build_user_context_includes_user_data_from_files(self, test_data_dir)` - Test that build_user_context actually reads and includes user data from files.\n  - `TestContextBuilderBehavior.test_build_user_context_includes_conversation_history(self, test_data_dir)` - Test that build_user_context includes actual conversation history.\n  - `TestContextBuilderBehavior.test_build_user_context_handles_missing_user_data_gracefully(self, test_data_dir)` - Test that build_user_context handles missing user data gracefully.\n  - `TestContextBuilderBehavior.test_build_user_context_includes_current_time(self, test_data_dir)` - Test that build_user_context includes current time information.\n  - `TestContextBuilderBehavior.test_build_user_context_includes_recent_checkins(self, test_data_dir)` - Test that build_user_context includes recent checkins information.\n  - `TestContextBuilderBehavior.test_build_user_context_without_conversation_history(self, test_data_dir)` - Test that build_user_context can exclude conversation history.\n  - `TestContextBuilderBehavior.test_build_user_context_handles_error_conditions(self, test_data_dir)` - Test that build_user_context handles error conditions gracefully.\n  - `TestContextBuilderBehavior.test_build_user_context_creates_fresh_timestamp(self, test_data_dir)` - Test that build_user_context creates fresh timestamp for each call.\n  - `TestContextBuilderBehavior.test_build_user_context_handles_empty_user_data(self, test_data_dir)` - Test that build_user_context handles empty user data gracefully.\n  - `TestContextBuilderBehavior.test_build_user_context_handles_corrupted_user_data(self, test_data_dir)` - Test that build_user_context handles corrupted user data gracefully.\n  - `TestContextBuilderBehavior.test_build_user_context_handles_missing_files(self, test_data_dir)` - Test that build_user_context handles missing user files gracefully.\n  - `TestContextBuilderBehavior.test_build_user_context_handles_empty_files(self, test_data_dir)` - Test that build_user_context handles empty user files gracefully.\n  - `TestContextBuilderBehavior.test_build_user_context_handles_long_user_id(self, test_data_dir)` - Test that build_user_context handles long user IDs correctly.\n  - `TestContextBuilderBehavior.test_build_user_context_handles_special_characters_in_user_id(self, test_data_dir)` - Test that build_user_context handles special characters in user IDs.\n  - `TestContextBuilderBehavior.test_build_user_context_handles_unicode_user_id(self, test_data_dir)` - Test that build_user_context handles unicode characters in user IDs.\n  - `TestContextBuilderBehavior.test_build_user_context_handles_concurrent_access(self, test_data_dir)` - Test that build_user_context handles concurrent access safely.\n  - `TestContextBuilderBehavior.test_build_user_context_handles_rapid_calls(self, test_data_dir)` - Test that build_user_context handles rapid successive calls.\n  - `TestContextBuilderBehavior.test_build_user_context_handles_large_user_data(self, test_data_dir)` - Test that build_user_context handles large user data efficiently.\n\n### tests/behavior/test_ai_context_builder_coverage_expansion.py\n**Functions:**\n- `test_analyze_context_with_empty_checkins(self, test_data_dir)` - Test analyze_context with empty recent checkins.\n- `test_analyze_context_with_checkin_data(self, test_data_dir)` - Test analyze_context with actual checkin data.\n- `test_analyze_context_with_missing_data(self, test_data_dir)` - Test analyze_context with missing data fields.\n- `test_determine_trend_improving(self, test_data_dir)` - Test _determine_trend with improving values.\n- `test_determine_trend_declining(self, test_data_dir)` - Test _determine_trend with declining values.\n- `test_determine_trend_stable(self, test_data_dir)` - Test _determine_trend with stable values.\n- `test_determine_trend_insufficient_data(self, test_data_dir)` - Test _determine_trend with insufficient data.\n- `test_calculate_wellness_score_all_factors(self, test_data_dir)` - Test _calculate_wellness_score with all factors present.\n- `test_calculate_wellness_score_no_factors(self, test_data_dir)` - Test _calculate_wellness_score with no factors present.\n- `test_generate_insights_excellent_breakfast(self, test_data_dir)` - Test _generate_insights with excellent breakfast rate.\n- `test_generate_insights_poor_breakfast(self, test_data_dir)` - Test _generate_insights with poor breakfast rate.\n- `test_generate_insights_positive_mood(self, test_data_dir)` - Test _generate_insights with positive mood.\n- `test_generate_insights_low_mood(self, test_data_dir)` - Test _generate_insights with low mood.\n- `test_generate_insights_energy_patterns(self, test_data_dir)` - Test _generate_insights with energy patterns.\n- `test_generate_insights_dental_hygiene(self, test_data_dir)` - Test _generate_insights with dental hygiene patterns.\n- `test_create_context_prompt_with_profile(self, test_data_dir)` - Test create_context_prompt with user profile data.\n- `test_create_context_prompt_with_user_context(self, test_data_dir)` - Test create_context_prompt with user context data.\n- `test_create_context_prompt_with_analysis(self, test_data_dir)` - Test create_context_prompt with pre-computed analysis.\n- `test_create_task_context(self, test_data_dir)` - Test create_task_context method.\n- `test_create_checkin_context(self, test_data_dir)` - Test create_checkin_context method.\n- `test_get_context_builder_singleton(self, test_data_dir)` - Test get_context_builder singleton behavior.\n- `test_analyze_context_error_handling(self, test_data_dir)` - Test analyze_context error handling.\n- `test_create_context_prompt_error_handling(self, test_data_dir)` - Test create_context_prompt error handling.\n- `test_create_task_context_error_handling(self, test_data_dir)` - Test create_task_context error handling.\n- `test_create_checkin_context_error_handling(self, test_data_dir)` - Test create_checkin_context error handling.\n**Classes:**\n- `TestContextBuilderCoverageExpansion` - Test coverage expansion for ContextBuilder module.\n  - `TestContextBuilderCoverageExpansion.test_analyze_context_with_empty_checkins(self, test_data_dir)` - Test analyze_context with empty recent checkins.\n  - `TestContextBuilderCoverageExpansion.test_analyze_context_with_checkin_data(self, test_data_dir)` - Test analyze_context with actual checkin data.\n  - `TestContextBuilderCoverageExpansion.test_analyze_context_with_missing_data(self, test_data_dir)` - Test analyze_context with missing data fields.\n  - `TestContextBuilderCoverageExpansion.test_determine_trend_improving(self, test_data_dir)` - Test _determine_trend with improving values.\n  - `TestContextBuilderCoverageExpansion.test_determine_trend_declining(self, test_data_dir)` - Test _determine_trend with declining values.\n  - `TestContextBuilderCoverageExpansion.test_determine_trend_stable(self, test_data_dir)` - Test _determine_trend with stable values.\n  - `TestContextBuilderCoverageExpansion.test_determine_trend_insufficient_data(self, test_data_dir)` - Test _determine_trend with insufficient data.\n  - `TestContextBuilderCoverageExpansion.test_calculate_wellness_score_all_factors(self, test_data_dir)` - Test _calculate_wellness_score with all factors present.\n  - `TestContextBuilderCoverageExpansion.test_calculate_wellness_score_no_factors(self, test_data_dir)` - Test _calculate_wellness_score with no factors present.\n  - `TestContextBuilderCoverageExpansion.test_generate_insights_excellent_breakfast(self, test_data_dir)` - Test _generate_insights with excellent breakfast rate.\n  - `TestContextBuilderCoverageExpansion.test_generate_insights_poor_breakfast(self, test_data_dir)` - Test _generate_insights with poor breakfast rate.\n  - `TestContextBuilderCoverageExpansion.test_generate_insights_positive_mood(self, test_data_dir)` - Test _generate_insights with positive mood.\n  - `TestContextBuilderCoverageExpansion.test_generate_insights_low_mood(self, test_data_dir)` - Test _generate_insights with low mood.\n  - `TestContextBuilderCoverageExpansion.test_generate_insights_energy_patterns(self, test_data_dir)` - Test _generate_insights with energy patterns.\n  - `TestContextBuilderCoverageExpansion.test_generate_insights_dental_hygiene(self, test_data_dir)` - Test _generate_insights with dental hygiene patterns.\n  - `TestContextBuilderCoverageExpansion.test_create_context_prompt_with_profile(self, test_data_dir)` - Test create_context_prompt with user profile data.\n  - `TestContextBuilderCoverageExpansion.test_create_context_prompt_with_user_context(self, test_data_dir)` - Test create_context_prompt with user context data.\n  - `TestContextBuilderCoverageExpansion.test_create_context_prompt_with_analysis(self, test_data_dir)` - Test create_context_prompt with pre-computed analysis.\n  - `TestContextBuilderCoverageExpansion.test_create_task_context(self, test_data_dir)` - Test create_task_context method.\n  - `TestContextBuilderCoverageExpansion.test_create_checkin_context(self, test_data_dir)` - Test create_checkin_context method.\n  - `TestContextBuilderCoverageExpansion.test_get_context_builder_singleton(self, test_data_dir)` - Test get_context_builder singleton behavior.\n  - `TestContextBuilderCoverageExpansion.test_analyze_context_error_handling(self, test_data_dir)` - Test analyze_context error handling.\n  - `TestContextBuilderCoverageExpansion.test_create_context_prompt_error_handling(self, test_data_dir)` - Test create_context_prompt error handling.\n  - `TestContextBuilderCoverageExpansion.test_create_task_context_error_handling(self, test_data_dir)` - Test create_task_context error handling.\n  - `TestContextBuilderCoverageExpansion.test_create_checkin_context_error_handling(self, test_data_dir)` - Test create_checkin_context error handling.\n\n### tests/behavior/test_ai_conversation_history_behavior.py\n**Functions:**\n- `test_conversation_history_initialization_creates_components(self, test_data_dir)` - Test that conversation history initialization creates required components.\n- `test_start_session_creates_actual_session(self, test_data_dir)` - Test that start_session creates actual session data.\n- `test_add_message_persists_to_session(self, test_data_dir)` - Test that add_message actually persists messages to session.\n- `test_add_message_appends_to_existing_session(self, test_data_dir)` - Test that add_message appends to existing session.\n- `test_get_recent_messages_returns_actual_data(self, test_data_dir)` - Test that get_recent_messages returns actual session data.\n- `test_get_recent_messages_handles_empty_history(self, test_data_dir)` - Test that get_recent_messages handles empty conversation history.\n- `test_clear_history_removes_session_data(self, test_data_dir)` - Test that clear_history removes actual session data.\n- `test_get_conversation_summary_returns_actual_summary(self, test_data_dir)` - Test that get_conversation_summary returns actual conversation summary.\n- `test_get_conversation_summary_handles_empty_history(self, test_data_dir)` - Test that get_conversation_summary handles empty conversation history.\n- `test_add_message_includes_timestamp(self, test_data_dir)` - Test that add_message includes timestamp in message data.\n- `test_add_message_validates_role(self, test_data_dir)` - Test that add_message validates role parameter.\n- `test_add_message_validates_content(self, test_data_dir)` - Test that add_message validates content parameter.\n- `test_get_recent_messages_respects_limit(self, test_data_dir)` - Test that get_recent_messages respects the count limit.\n- `test_get_recent_messages_handles_zero_limit(self, test_data_dir)` - Test that get_recent_messages handles zero count gracefully.\n- `test_get_recent_messages_handles_negative_limit(self, test_data_dir)` - Test that get_recent_messages handles negative limit.\n- `test_conversation_history_handles_concurrent_access(self, test_data_dir)` - Test that conversation history handles concurrent access safely.\n- `test_conversation_history_handles_rapid_access(self, test_data_dir)` - Test that conversation history handles rapid successive access.\n- `test_conversation_history_handles_large_messages(self, test_data_dir)` - Test that conversation history handles large message content.\n- `test_conversation_history_handles_special_characters(self, test_data_dir)` - Test that conversation history handles special characters in messages.\n- `test_conversation_history_handles_unicode_messages(self, test_data_dir)` - Test that conversation history handles unicode messages.\n- `test_end_session_terminates_active_session(self, test_data_dir)` - Test that end_session terminates the active session.\n- `test_get_statistics_returns_actual_data(self, test_data_dir)` - Test that get_statistics returns actual conversation statistics.\n- `test_delete_session_removes_specific_session(self, test_data_dir)` - Test that delete_session removes a specific session.\n- `test_get_history_returns_all_sessions(self, test_data_dir)` - Test that get_history returns all sessions for a user.\n- `add_message()` - No description\n**Classes:**\n- `TestConversationHistoryBehavior` - Test real behavior of conversation history functionality.\n  - `TestConversationHistoryBehavior.test_conversation_history_initialization_creates_components(self, test_data_dir)` - Test that conversation history initialization creates required components.\n  - `TestConversationHistoryBehavior.test_start_session_creates_actual_session(self, test_data_dir)` - Test that start_session creates actual session data.\n  - `TestConversationHistoryBehavior.test_add_message_persists_to_session(self, test_data_dir)` - Test that add_message actually persists messages to session.\n  - `TestConversationHistoryBehavior.test_add_message_appends_to_existing_session(self, test_data_dir)` - Test that add_message appends to existing session.\n  - `TestConversationHistoryBehavior.test_get_recent_messages_returns_actual_data(self, test_data_dir)` - Test that get_recent_messages returns actual session data.\n  - `TestConversationHistoryBehavior.test_get_recent_messages_handles_empty_history(self, test_data_dir)` - Test that get_recent_messages handles empty conversation history.\n  - `TestConversationHistoryBehavior.test_clear_history_removes_session_data(self, test_data_dir)` - Test that clear_history removes actual session data.\n  - `TestConversationHistoryBehavior.test_get_conversation_summary_returns_actual_summary(self, test_data_dir)` - Test that get_conversation_summary returns actual conversation summary.\n  - `TestConversationHistoryBehavior.test_get_conversation_summary_handles_empty_history(self, test_data_dir)` - Test that get_conversation_summary handles empty conversation history.\n  - `TestConversationHistoryBehavior.test_add_message_includes_timestamp(self, test_data_dir)` - Test that add_message includes timestamp in message data.\n  - `TestConversationHistoryBehavior.test_add_message_validates_role(self, test_data_dir)` - Test that add_message validates role parameter.\n  - `TestConversationHistoryBehavior.test_add_message_validates_content(self, test_data_dir)` - Test that add_message validates content parameter.\n  - `TestConversationHistoryBehavior.test_get_recent_messages_respects_limit(self, test_data_dir)` - Test that get_recent_messages respects the count limit.\n  - `TestConversationHistoryBehavior.test_get_recent_messages_handles_zero_limit(self, test_data_dir)` - Test that get_recent_messages handles zero count gracefully.\n  - `TestConversationHistoryBehavior.test_get_recent_messages_handles_negative_limit(self, test_data_dir)` - Test that get_recent_messages handles negative limit.\n  - `TestConversationHistoryBehavior.test_conversation_history_handles_concurrent_access(self, test_data_dir)` - Test that conversation history handles concurrent access safely.\n  - `TestConversationHistoryBehavior.test_conversation_history_handles_rapid_access(self, test_data_dir)` - Test that conversation history handles rapid successive access.\n  - `TestConversationHistoryBehavior.test_conversation_history_handles_large_messages(self, test_data_dir)` - Test that conversation history handles large message content.\n  - `TestConversationHistoryBehavior.test_conversation_history_handles_special_characters(self, test_data_dir)` - Test that conversation history handles special characters in messages.\n  - `TestConversationHistoryBehavior.test_conversation_history_handles_unicode_messages(self, test_data_dir)` - Test that conversation history handles unicode messages.\n  - `TestConversationHistoryBehavior.test_end_session_terminates_active_session(self, test_data_dir)` - Test that end_session terminates the active session.\n  - `TestConversationHistoryBehavior.test_get_statistics_returns_actual_data(self, test_data_dir)` - Test that get_statistics returns actual conversation statistics.\n  - `TestConversationHistoryBehavior.test_delete_session_removes_specific_session(self, test_data_dir)` - Test that delete_session removes a specific session.\n  - `TestConversationHistoryBehavior.test_get_history_returns_all_sessions(self, test_data_dir)` - Test that get_history returns all sessions for a user.\n\n### tests/behavior/test_auto_cleanup_behavior.py\n**Functions:**\n- `temp_tracker_file(self, test_data_dir)` - Create temporary tracker file for testing.\n- `test_get_last_cleanup_timestamp_no_file_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test getting timestamp when no tracker file exists.\n- `test_get_last_cleanup_timestamp_with_file_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test getting timestamp from existing tracker file.\n- `test_update_cleanup_timestamp_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test updating cleanup timestamp creates file with correct data.\n- `temp_tracker_file(self, test_data_dir)` - Create temporary tracker file for testing.\n- `test_should_run_cleanup_never_cleaned_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test cleanup decision when never cleaned before.\n- `test_should_run_cleanup_recent_cleanup_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test cleanup decision when recently cleaned.\n- `test_should_run_cleanup_old_cleanup_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test cleanup decision when last cleanup was old.\n- `test_should_run_cleanup_custom_interval_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test cleanup decision with custom interval.\n- `temp_test_dir(self, test_data_dir)` - Create temporary test directory with cache files.\n- `test_find_pycache_dirs_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test finding __pycache__ directories.\n- `test_find_pyc_files_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test finding .pyc files.\n- `test_calculate_cache_size_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test calculating cache size.\n- `test_calculate_cache_size_large_cache_scenario_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test calculating cache size with large number of files.\n- `test_calculate_cache_size_file_corruption_handling_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test cache size calculation when files are corrupted or inaccessible.\n- `test_calculate_cache_size_nonexistent_files_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test cache size calculation with non-existent files.\n- `test_calculate_cache_size_empty_inputs_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test cache size calculation with empty inputs.\n- `test_calculate_cache_size_permission_error_simulation_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test cache size calculation when file access fails.\n- `test_calculate_cache_size_nested_directory_structure_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test cache size calculation with deeply nested directories.\n- `test_calculate_cache_size_concurrent_file_changes_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test cache size calculation when files change during calculation.\n- `temp_tracker_file(self, test_data_dir)` - Create temporary tracker file for testing.\n- `test_get_cleanup_status_never_cleaned_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when never cleaned before.\n- `test_get_cleanup_status_recent_cleanup_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when recently cleaned.\n- `test_get_cleanup_status_overdue_cleanup_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when cleanup is overdue.\n- `test_get_cleanup_status_exactly_30_days_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when cleanup was exactly 30 days ago (boundary condition).\n- `test_get_cleanup_status_29_days_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when cleanup was 29 days ago (just under threshold).\n- `test_get_cleanup_status_31_days_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when cleanup was 31 days ago (just over threshold).\n- `test_get_cleanup_status_very_recent_cleanup_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when cleanup was very recent (1 day ago).\n- `test_get_cleanup_status_very_old_cleanup_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when cleanup was very old (100+ days ago).\n- `test_get_cleanup_status_corrupted_tracker_file_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when tracker file contains invalid JSON.\n- `test_get_cleanup_status_empty_tracker_file_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when tracker file is empty.\n- `test_get_cleanup_status_missing_timestamp_field_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when tracker file is missing timestamp field.\n- `test_get_cleanup_status_invalid_timestamp_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when tracker file contains invalid timestamp.\n- `temp_test_environment(self, test_data_dir)` - Create temporary test environment with cache files and tracker.\n- `test_perform_cleanup_real_behavior(self, temp_test_environment)` - REAL BEHAVIOR TEST: Test performing actual cleanup.\n- `test_auto_cleanup_if_needed_real_behavior(self, temp_test_environment)` - REAL BEHAVIOR TEST: Test automatic cleanup decision and execution.\n- `test_auto_cleanup_if_needed_not_needed_real_behavior(self, temp_test_environment)` - REAL BEHAVIOR TEST: Test auto cleanup when not needed.\n- `mock_walk_with_error(path)` - No description\n- `mock_exists_with_changes(path)` - No description\n**Classes:**\n- `TestAutoCleanupTimestampBehavior` - Test timestamp tracking functionality with real behavior verification.\n  - `TestAutoCleanupTimestampBehavior.temp_tracker_file(self, test_data_dir)` - Create temporary tracker file for testing.\n  - `TestAutoCleanupTimestampBehavior.test_get_last_cleanup_timestamp_no_file_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test getting timestamp when no tracker file exists.\n  - `TestAutoCleanupTimestampBehavior.test_get_last_cleanup_timestamp_with_file_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test getting timestamp from existing tracker file.\n  - `TestAutoCleanupTimestampBehavior.test_update_cleanup_timestamp_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test updating cleanup timestamp creates file with correct data.\n- `TestAutoCleanupLogicBehavior` - Test cleanup logic and decision making with real behavior verification.\n  - `TestAutoCleanupLogicBehavior.temp_tracker_file(self, test_data_dir)` - Create temporary tracker file for testing.\n  - `TestAutoCleanupLogicBehavior.test_should_run_cleanup_never_cleaned_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test cleanup decision when never cleaned before.\n  - `TestAutoCleanupLogicBehavior.test_should_run_cleanup_recent_cleanup_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test cleanup decision when recently cleaned.\n  - `TestAutoCleanupLogicBehavior.test_should_run_cleanup_old_cleanup_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test cleanup decision when last cleanup was old.\n  - `TestAutoCleanupLogicBehavior.test_should_run_cleanup_custom_interval_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test cleanup decision with custom interval.\n- `TestAutoCleanupFileDiscoveryBehavior` - Test file discovery functionality with real behavior verification.\n  - `TestAutoCleanupFileDiscoveryBehavior.temp_test_dir(self, test_data_dir)` - Create temporary test directory with cache files.\n  - `TestAutoCleanupFileDiscoveryBehavior.test_find_pycache_dirs_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test finding __pycache__ directories.\n  - `TestAutoCleanupFileDiscoveryBehavior.test_find_pyc_files_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test finding .pyc files.\n  - `TestAutoCleanupFileDiscoveryBehavior.test_calculate_cache_size_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test calculating cache size.\n  - `TestAutoCleanupFileDiscoveryBehavior.test_calculate_cache_size_large_cache_scenario_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test calculating cache size with large number of files.\n  - `TestAutoCleanupFileDiscoveryBehavior.test_calculate_cache_size_file_corruption_handling_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test cache size calculation when files are corrupted or inaccessible.\n  - `TestAutoCleanupFileDiscoveryBehavior.test_calculate_cache_size_nonexistent_files_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test cache size calculation with non-existent files.\n  - `TestAutoCleanupFileDiscoveryBehavior.test_calculate_cache_size_empty_inputs_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test cache size calculation with empty inputs.\n  - `TestAutoCleanupFileDiscoveryBehavior.test_calculate_cache_size_permission_error_simulation_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test cache size calculation when file access fails.\n  - `TestAutoCleanupFileDiscoveryBehavior.test_calculate_cache_size_nested_directory_structure_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test cache size calculation with deeply nested directories.\n  - `TestAutoCleanupFileDiscoveryBehavior.test_calculate_cache_size_concurrent_file_changes_real_behavior(self, temp_test_dir)` - REAL BEHAVIOR TEST: Test cache size calculation when files change during calculation.\n- `TestAutoCleanupStatusBehavior` - Test cleanup status functionality with real behavior verification.\n  - `TestAutoCleanupStatusBehavior.temp_tracker_file(self, test_data_dir)` - Create temporary tracker file for testing.\n  - `TestAutoCleanupStatusBehavior.test_get_cleanup_status_never_cleaned_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when never cleaned before.\n  - `TestAutoCleanupStatusBehavior.test_get_cleanup_status_recent_cleanup_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when recently cleaned.\n  - `TestAutoCleanupStatusBehavior.test_get_cleanup_status_overdue_cleanup_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when cleanup is overdue.\n  - `TestAutoCleanupStatusBehavior.test_get_cleanup_status_exactly_30_days_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when cleanup was exactly 30 days ago (boundary condition).\n  - `TestAutoCleanupStatusBehavior.test_get_cleanup_status_29_days_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when cleanup was 29 days ago (just under threshold).\n  - `TestAutoCleanupStatusBehavior.test_get_cleanup_status_31_days_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when cleanup was 31 days ago (just over threshold).\n  - `TestAutoCleanupStatusBehavior.test_get_cleanup_status_very_recent_cleanup_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when cleanup was very recent (1 day ago).\n  - `TestAutoCleanupStatusBehavior.test_get_cleanup_status_very_old_cleanup_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when cleanup was very old (100+ days ago).\n  - `TestAutoCleanupStatusBehavior.test_get_cleanup_status_corrupted_tracker_file_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when tracker file contains invalid JSON.\n  - `TestAutoCleanupStatusBehavior.test_get_cleanup_status_empty_tracker_file_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when tracker file is empty.\n  - `TestAutoCleanupStatusBehavior.test_get_cleanup_status_missing_timestamp_field_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when tracker file is missing timestamp field.\n  - `TestAutoCleanupStatusBehavior.test_get_cleanup_status_invalid_timestamp_real_behavior(self, temp_tracker_file)` - REAL BEHAVIOR TEST: Test status when tracker file contains invalid timestamp.\n- `TestAutoCleanupIntegrationBehavior` - Test integrated cleanup functionality with real behavior verification.\n  - `TestAutoCleanupIntegrationBehavior.temp_test_environment(self, test_data_dir)` - Create temporary test environment with cache files and tracker.\n  - `TestAutoCleanupIntegrationBehavior.test_perform_cleanup_real_behavior(self, temp_test_environment)` - REAL BEHAVIOR TEST: Test performing actual cleanup.\n  - `TestAutoCleanupIntegrationBehavior.test_auto_cleanup_if_needed_real_behavior(self, temp_test_environment)` - REAL BEHAVIOR TEST: Test automatic cleanup decision and execution.\n  - `TestAutoCleanupIntegrationBehavior.test_auto_cleanup_if_needed_not_needed_real_behavior(self, temp_test_environment)` - REAL BEHAVIOR TEST: Test auto cleanup when not needed.\n\n### tests/behavior/test_backup_manager_behavior.py\n**Functions:**\n- `setup_backup_manager(self, test_data_dir)` - Set up backup manager with test data directory.\n- `_create_test_config_files(self)` - Create test configuration files.\n- `_cleanup_test_files(self)` - Clean up test files and directories.\n- `test_backup_manager_initialization_real_behavior(self)` - Test BackupManager initialization creates backup directory.\n- `test_create_backup_with_user_data_real_behavior(self)` - Test backup creation includes user data.\n- `test_create_backup_with_config_files_real_behavior(self)` - Test backup creation includes configuration files.\n- `test_create_backup_with_all_components_real_behavior(self)` - Test backup creation with all components.\n- `test_backup_rotation_by_count_real_behavior(self)` - Test backup rotation removes old backups by count.\n- `test_backup_rotation_by_age_real_behavior(self)` - Test backup rotation removes old backups by age.\n- `test_list_backups_real_behavior(self)` - Test listing backups returns correct metadata.\n- `test_validate_backup_real_behavior(self)` - Test backup validation with valid backup.\n- `test_validate_backup_with_corrupted_file_real_behavior(self)` - Test backup validation with corrupted file.\n- `test_validate_backup_with_missing_file_real_behavior(self)` - Test backup validation with missing file.\n- `test_backup_creation_and_validation_real_behavior(self)` - Test backup creation and validation functionality.\n- `test_restore_backup_with_config_files_real_behavior(self)` - Test backup restoration with configuration files.\n- `test_restore_backup_with_nonexistent_file_real_behavior(self)` - Test backup restoration with non-existent file.\n- `test_ensure_backup_directory_real_behavior(self)` - Test backup directory creation.\n- `test_create_automatic_backup_real_behavior(self)` - Test automatic backup creation.\n- `test_validate_system_state_real_behavior(self)` - Test system state validation.\n- `test_validate_system_state_with_missing_user_dir_real_behavior(self)` - Test system state validation with missing user directory.\n- `test_perform_safe_operation_real_behavior(self)` - Test safe operation with backup and rollback.\n- `test_perform_safe_operation_with_failure_real_behavior(self)` - Test safe operation with failure and rollback.\n- `test_backup_manager_with_large_user_data_real_behavior(self)` - Test backup manager with large user data.\n- `test_backup_manager_error_handling_real_behavior(self)` - Test backup manager error handling.\n- `test_backup_manager_with_empty_user_directory_real_behavior(self)` - Test backup manager with empty user directory.\n- `test_operation()` - No description\n- `failing_operation()` - No description\n**Classes:**\n- `TestBackupManagerBehavior` - Test BackupManager behavior with real file system operations.\n  - `TestBackupManagerBehavior.setup_backup_manager(self, test_data_dir)` - Set up backup manager with test data directory.\n  - `TestBackupManagerBehavior._create_test_config_files(self)` - Create test configuration files.\n  - `TestBackupManagerBehavior._cleanup_test_files(self)` - Clean up test files and directories.\n  - `TestBackupManagerBehavior.test_backup_manager_initialization_real_behavior(self)` - Test BackupManager initialization creates backup directory.\n  - `TestBackupManagerBehavior.test_create_backup_with_user_data_real_behavior(self)` - Test backup creation includes user data.\n  - `TestBackupManagerBehavior.test_create_backup_with_config_files_real_behavior(self)` - Test backup creation includes configuration files.\n  - `TestBackupManagerBehavior.test_create_backup_with_all_components_real_behavior(self)` - Test backup creation with all components.\n  - `TestBackupManagerBehavior.test_backup_rotation_by_count_real_behavior(self)` - Test backup rotation removes old backups by count.\n  - `TestBackupManagerBehavior.test_backup_rotation_by_age_real_behavior(self)` - Test backup rotation removes old backups by age.\n  - `TestBackupManagerBehavior.test_list_backups_real_behavior(self)` - Test listing backups returns correct metadata.\n  - `TestBackupManagerBehavior.test_validate_backup_real_behavior(self)` - Test backup validation with valid backup.\n  - `TestBackupManagerBehavior.test_validate_backup_with_corrupted_file_real_behavior(self)` - Test backup validation with corrupted file.\n  - `TestBackupManagerBehavior.test_validate_backup_with_missing_file_real_behavior(self)` - Test backup validation with missing file.\n  - `TestBackupManagerBehavior.test_backup_creation_and_validation_real_behavior(self)` - Test backup creation and validation functionality.\n  - `TestBackupManagerBehavior.test_restore_backup_with_config_files_real_behavior(self)` - Test backup restoration with configuration files.\n  - `TestBackupManagerBehavior.test_restore_backup_with_nonexistent_file_real_behavior(self)` - Test backup restoration with non-existent file.\n  - `TestBackupManagerBehavior.test_ensure_backup_directory_real_behavior(self)` - Test backup directory creation.\n  - `TestBackupManagerBehavior.test_create_automatic_backup_real_behavior(self)` - Test automatic backup creation.\n  - `TestBackupManagerBehavior.test_validate_system_state_real_behavior(self)` - Test system state validation.\n  - `TestBackupManagerBehavior.test_validate_system_state_with_missing_user_dir_real_behavior(self)` - Test system state validation with missing user directory.\n  - `TestBackupManagerBehavior.test_perform_safe_operation_real_behavior(self)` - Test safe operation with backup and rollback.\n  - `TestBackupManagerBehavior.test_perform_safe_operation_with_failure_real_behavior(self)` - Test safe operation with failure and rollback.\n  - `TestBackupManagerBehavior.test_backup_manager_with_large_user_data_real_behavior(self)` - Test backup manager with large user data.\n  - `TestBackupManagerBehavior.test_backup_manager_error_handling_real_behavior(self)` - Test backup manager error handling.\n  - `TestBackupManagerBehavior.test_backup_manager_with_empty_user_directory_real_behavior(self)` - Test backup manager with empty user directory.\n\n### tests/behavior/test_checkin_analytics_behavior.py\n**Functions:**\n- `test_analytics_initialization_real_behavior(self)` - REAL BEHAVIOR TEST: Test CheckinAnalytics can be initialized.\n- `analytics(self)` - Create CheckinAnalytics instance for testing.\n- `mock_checkins_with_mood(self)` - Create mock check-in data with mood information.\n- `test_mood_trends_no_data_real_behavior(self, analytics)` - REAL BEHAVIOR TEST: Test mood trends with no check-in data.\n- `test_mood_trends_with_data_real_behavior(self, analytics, mock_checkins_with_mood)` - REAL BEHAVIOR TEST: Test mood trends analysis with valid data.\n- `test_mood_trends_invalid_mood_data_real_behavior(self, analytics)` - REAL BEHAVIOR TEST: Test mood trends with invalid mood data.\n- `analytics(self)` - Create CheckinAnalytics instance for testing.\n- `mock_checkins_with_habits(self)` - Create mock check-in data with habit information.\n- `test_habit_analysis_no_data_real_behavior(self, analytics)` - REAL BEHAVIOR TEST: Test habit analysis with no check-in data.\n- `test_habit_analysis_with_data_real_behavior(self, analytics, mock_checkins_with_habits)` - REAL BEHAVIOR TEST: Test habit analysis with valid data.\n- `analytics(self)` - Create CheckinAnalytics instance for testing.\n- `mock_checkins_with_sleep(self)` - Create mock check-in data with sleep information.\n- `test_sleep_analysis_no_data_real_behavior(self, analytics)` - REAL BEHAVIOR TEST: Test sleep analysis with no check-in data.\n- `test_sleep_analysis_with_data_real_behavior(self, analytics, mock_checkins_with_sleep)` - REAL BEHAVIOR TEST: Test sleep analysis with valid data.\n- `analytics(self)` - Create CheckinAnalytics instance for testing.\n- `mock_checkins_for_wellness(self)` - Create mock check-in data for wellness scoring.\n- `test_wellness_score_no_data_real_behavior(self, analytics)` - REAL BEHAVIOR TEST: Test wellness score with no check-in data.\n- `test_wellness_score_with_data_real_behavior(self, analytics, mock_checkins_for_wellness)` - REAL BEHAVIOR TEST: Test wellness score calculation with valid data.\n- `analytics(self)` - Create CheckinAnalytics instance for testing.\n- `mock_checkins_for_history(self)` - Create mock check-in data for history testing.\n- `test_checkin_history_no_data_real_behavior(self, analytics)` - REAL BEHAVIOR TEST: Test check-in history with no data.\n- `test_checkin_history_with_data_real_behavior(self, analytics, mock_checkins_for_history)` - REAL BEHAVIOR TEST: Test check-in history with valid data.\n- `analytics(self)` - Create CheckinAnalytics instance for testing.\n- `mock_checkins_for_completion(self)` - Create mock check-in data for completion rate testing.\n- `test_completion_rate_no_data_real_behavior(self, analytics)` - REAL BEHAVIOR TEST: Test completion rate with no data.\n- `test_completion_rate_with_data_real_behavior(self, analytics, mock_checkins_for_completion)` - REAL BEHAVIOR TEST: Test completion rate calculation with valid data.\n- `analytics(self)` - Create CheckinAnalytics instance for testing.\n- `mock_checkins_for_tasks(self)` - Create mock check-in data for task stats testing.\n- `test_task_weekly_stats_no_data_real_behavior(self, analytics)` - REAL BEHAVIOR TEST: Test task weekly stats with no data.\n- `test_task_weekly_stats_with_data_real_behavior(self, analytics, mock_checkins_for_tasks)` - REAL BEHAVIOR TEST: Test task weekly stats calculation with valid data.\n**Classes:**\n- `TestCheckinAnalyticsInitializationBehavior` - Test CheckinAnalytics initialization with real behavior verification.\n  - `TestCheckinAnalyticsInitializationBehavior.test_analytics_initialization_real_behavior(self)` - REAL BEHAVIOR TEST: Test CheckinAnalytics can be initialized.\n- `TestCheckinAnalyticsMoodTrendsBehavior` - Test mood trends analysis with real behavior verification.\n  - `TestCheckinAnalyticsMoodTrendsBehavior.analytics(self)` - Create CheckinAnalytics instance for testing.\n  - `TestCheckinAnalyticsMoodTrendsBehavior.mock_checkins_with_mood(self)` - Create mock check-in data with mood information.\n  - `TestCheckinAnalyticsMoodTrendsBehavior.test_mood_trends_no_data_real_behavior(self, analytics)` - REAL BEHAVIOR TEST: Test mood trends with no check-in data.\n  - `TestCheckinAnalyticsMoodTrendsBehavior.test_mood_trends_with_data_real_behavior(self, analytics, mock_checkins_with_mood)` - REAL BEHAVIOR TEST: Test mood trends analysis with valid data.\n  - `TestCheckinAnalyticsMoodTrendsBehavior.test_mood_trends_invalid_mood_data_real_behavior(self, analytics)` - REAL BEHAVIOR TEST: Test mood trends with invalid mood data.\n- `TestCheckinAnalyticsHabitAnalysisBehavior` - Test habit analysis with real behavior verification.\n  - `TestCheckinAnalyticsHabitAnalysisBehavior.analytics(self)` - Create CheckinAnalytics instance for testing.\n  - `TestCheckinAnalyticsHabitAnalysisBehavior.mock_checkins_with_habits(self)` - Create mock check-in data with habit information.\n  - `TestCheckinAnalyticsHabitAnalysisBehavior.test_habit_analysis_no_data_real_behavior(self, analytics)` - REAL BEHAVIOR TEST: Test habit analysis with no check-in data.\n  - `TestCheckinAnalyticsHabitAnalysisBehavior.test_habit_analysis_with_data_real_behavior(self, analytics, mock_checkins_with_habits)` - REAL BEHAVIOR TEST: Test habit analysis with valid data.\n- `TestCheckinAnalyticsSleepAnalysisBehavior` - Test sleep analysis with real behavior verification.\n  - `TestCheckinAnalyticsSleepAnalysisBehavior.analytics(self)` - Create CheckinAnalytics instance for testing.\n  - `TestCheckinAnalyticsSleepAnalysisBehavior.mock_checkins_with_sleep(self)` - Create mock check-in data with sleep information.\n  - `TestCheckinAnalyticsSleepAnalysisBehavior.test_sleep_analysis_no_data_real_behavior(self, analytics)` - REAL BEHAVIOR TEST: Test sleep analysis with no check-in data.\n  - `TestCheckinAnalyticsSleepAnalysisBehavior.test_sleep_analysis_with_data_real_behavior(self, analytics, mock_checkins_with_sleep)` - REAL BEHAVIOR TEST: Test sleep analysis with valid data.\n- `TestCheckinAnalyticsWellnessScoreBehavior` - Test wellness score calculation with real behavior verification.\n  - `TestCheckinAnalyticsWellnessScoreBehavior.analytics(self)` - Create CheckinAnalytics instance for testing.\n  - `TestCheckinAnalyticsWellnessScoreBehavior.mock_checkins_for_wellness(self)` - Create mock check-in data for wellness scoring.\n  - `TestCheckinAnalyticsWellnessScoreBehavior.test_wellness_score_no_data_real_behavior(self, analytics)` - REAL BEHAVIOR TEST: Test wellness score with no check-in data.\n  - `TestCheckinAnalyticsWellnessScoreBehavior.test_wellness_score_with_data_real_behavior(self, analytics, mock_checkins_for_wellness)` - REAL BEHAVIOR TEST: Test wellness score calculation with valid data.\n- `TestCheckinAnalyticsHistoryBehavior` - Test check-in history functionality with real behavior verification.\n  - `TestCheckinAnalyticsHistoryBehavior.analytics(self)` - Create CheckinAnalytics instance for testing.\n  - `TestCheckinAnalyticsHistoryBehavior.mock_checkins_for_history(self)` - Create mock check-in data for history testing.\n  - `TestCheckinAnalyticsHistoryBehavior.test_checkin_history_no_data_real_behavior(self, analytics)` - REAL BEHAVIOR TEST: Test check-in history with no data.\n  - `TestCheckinAnalyticsHistoryBehavior.test_checkin_history_with_data_real_behavior(self, analytics, mock_checkins_for_history)` - REAL BEHAVIOR TEST: Test check-in history with valid data.\n- `TestCheckinAnalyticsCompletionRateBehavior` - Test completion rate calculation with real behavior verification.\n  - `TestCheckinAnalyticsCompletionRateBehavior.analytics(self)` - Create CheckinAnalytics instance for testing.\n  - `TestCheckinAnalyticsCompletionRateBehavior.mock_checkins_for_completion(self)` - Create mock check-in data for completion rate testing.\n  - `TestCheckinAnalyticsCompletionRateBehavior.test_completion_rate_no_data_real_behavior(self, analytics)` - REAL BEHAVIOR TEST: Test completion rate with no data.\n  - `TestCheckinAnalyticsCompletionRateBehavior.test_completion_rate_with_data_real_behavior(self, analytics, mock_checkins_for_completion)` - REAL BEHAVIOR TEST: Test completion rate calculation with valid data.\n- `TestCheckinAnalyticsTaskStatsBehavior` - Test task weekly stats with real behavior verification.\n  - `TestCheckinAnalyticsTaskStatsBehavior.analytics(self)` - Create CheckinAnalytics instance for testing.\n  - `TestCheckinAnalyticsTaskStatsBehavior.mock_checkins_for_tasks(self)` - Create mock check-in data for task stats testing.\n  - `TestCheckinAnalyticsTaskStatsBehavior.test_task_weekly_stats_no_data_real_behavior(self, analytics)` - REAL BEHAVIOR TEST: Test task weekly stats with no data.\n  - `TestCheckinAnalyticsTaskStatsBehavior.test_task_weekly_stats_with_data_real_behavior(self, analytics, mock_checkins_for_tasks)` - REAL BEHAVIOR TEST: Test task weekly stats calculation with valid data.\n\n### tests/behavior/test_command_parser_coverage_expansion_phase3_simple.py\n**Functions:**\n- `setup_method(self)` - Set up test fixtures\n- `test_parsing_result_initialization(self)` - Test ParsingResult initialization\n- `test_parser_initialization(self)` - Test EnhancedCommandParser initialization\n- `test_get_suggestions_empty_input(self)` - Test get_suggestions with empty input\n- `test_get_suggestions_task_keywords(self)` - Test get_suggestions with task-related keywords\n- `test_get_suggestions_checkin_keywords(self)` - Test get_suggestions with check-in related keywords\n- `test_get_suggestions_profile_keywords(self)` - Test get_suggestions with profile-related keywords\n- `test_get_suggestions_schedule_keywords(self)` - Test get_suggestions with schedule-related keywords\n- `test_get_suggestions_analytics_keywords(self)` - Test get_suggestions with analytics-related keywords\n- `test_get_suggestions_unknown_keywords(self)` - Test get_suggestions with unknown keywords\n- `test_extract_task_entities_basic(self)` - Test _extract_task_entities with basic input\n- `test_extract_task_entities_with_priority(self)` - Test _extract_task_entities with priority keywords\n- `test_extract_task_entities_with_due_date(self)` - Test _extract_task_entities with due date\n- `test_extract_task_entities_complex(self)` - Test _extract_task_entities with complex input\n- `test_extract_task_entities_no_match(self)` - Test _extract_task_entities with no matching patterns\n- `test_extract_task_name_from_context_basic(self)` - Test _extract_task_name_from_context with basic input\n- `test_extract_task_name_from_context_complex(self)` - Test _extract_task_name_from_context with complex input\n- `test_extract_task_name_from_context_no_match(self)` - Test _extract_task_name_from_context with no matching patterns\n- `test_extract_update_entities_priority(self)` - Test _extract_update_entities with priority\n- `test_extract_update_entities_due_date(self)` - Test _extract_update_entities with due date\n- `test_extract_update_entities_due_short(self)` - Test _extract_update_entities with short due format\n- `test_extract_update_entities_complex(self)` - Test _extract_update_entities with multiple entities\n- `test_extract_update_entities_no_match(self)` - Test _extract_update_entities with no matching patterns\n- `test_extract_intent_from_ai_response_create_task(self)` - Test _extract_intent_from_ai_response with create task\n- `test_extract_intent_from_ai_response_list_tasks(self)` - Test _extract_intent_from_ai_response with list tasks\n- `test_extract_intent_from_ai_response_complete_task(self)` - Test _extract_intent_from_ai_response with complete task\n- `test_extract_intent_from_ai_response_start_checkin(self)` - Test _extract_intent_from_ai_response with start checkin\n- `test_extract_intent_from_ai_response_no_match(self)` - Test _extract_intent_from_ai_response with no matching patterns\n- `test_extract_intent_from_ai_response_case_insensitive(self)` - Test _extract_intent_from_ai_response with case insensitive matching\n- `test_parse_command_function(self)` - Test the parse_command convenience function\n- `test_parse_command_function_empty(self)` - Test the parse_command convenience function with empty input\n- `test_parse_command_function_none(self)` - Test the parse_command convenience function with None input\n- `test_get_enhanced_command_parser_singleton(self)` - Test get_enhanced_command_parser returns singleton\n- `test_parser_parse_method(self)` - Test the parser's parse method\n- `test_parser_parse_method_empty(self)` - Test the parser's parse method with empty input\n- `test_parser_parse_method_none(self)` - Test the parser's parse method with None input\n- `test_parser_parse_method_whitespace(self)` - Test the parser's parse method with whitespace-only input\n- `test_parser_with_mock_ai_chatbot(self)` - Test parser with mocked AI chatbot\n- `test_parser_with_mock_interaction_handlers(self)` - Test parser with mocked interaction handlers\n- `test_error_handling_in_parsing(self)` - Test error handling in parsing methods\n- `test_pattern_matching_edge_cases(self)` - Test pattern matching with edge cases\n- `test_parser_integration_with_real_inputs(self)` - Test parser integration with real input patterns\n- `test_parser_suggestions_integration(self)` - Test parser suggestions integration\n- `test_parser_entity_extraction_integration(self)` - Test parser entity extraction integration\n- `test_parser_ai_response_processing(self)` - Test parser AI response processing\n- `test_parser_initialization_components(self)` - Test parser initialization components\n- `test_parser_method_signatures(self)` - Test parser method signatures\n- `test_parser_robustness(self)` - Test parser robustness with various inputs\n**Classes:**\n- `TestCommandParserCoverageExpansionPhase3Simple` - Test coverage expansion for command_parser.py - Phase 3 Simple\n  - `TestCommandParserCoverageExpansionPhase3Simple.setup_method(self)` - Set up test fixtures\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parsing_result_initialization(self)` - Test ParsingResult initialization\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parser_initialization(self)` - Test EnhancedCommandParser initialization\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_get_suggestions_empty_input(self)` - Test get_suggestions with empty input\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_get_suggestions_task_keywords(self)` - Test get_suggestions with task-related keywords\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_get_suggestions_checkin_keywords(self)` - Test get_suggestions with check-in related keywords\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_get_suggestions_profile_keywords(self)` - Test get_suggestions with profile-related keywords\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_get_suggestions_schedule_keywords(self)` - Test get_suggestions with schedule-related keywords\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_get_suggestions_analytics_keywords(self)` - Test get_suggestions with analytics-related keywords\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_get_suggestions_unknown_keywords(self)` - Test get_suggestions with unknown keywords\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_task_entities_basic(self)` - Test _extract_task_entities with basic input\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_task_entities_with_priority(self)` - Test _extract_task_entities with priority keywords\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_task_entities_with_due_date(self)` - Test _extract_task_entities with due date\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_task_entities_complex(self)` - Test _extract_task_entities with complex input\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_task_entities_no_match(self)` - Test _extract_task_entities with no matching patterns\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_task_name_from_context_basic(self)` - Test _extract_task_name_from_context with basic input\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_task_name_from_context_complex(self)` - Test _extract_task_name_from_context with complex input\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_task_name_from_context_no_match(self)` - Test _extract_task_name_from_context with no matching patterns\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_update_entities_priority(self)` - Test _extract_update_entities with priority\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_update_entities_due_date(self)` - Test _extract_update_entities with due date\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_update_entities_due_short(self)` - Test _extract_update_entities with short due format\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_update_entities_complex(self)` - Test _extract_update_entities with multiple entities\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_update_entities_no_match(self)` - Test _extract_update_entities with no matching patterns\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_intent_from_ai_response_create_task(self)` - Test _extract_intent_from_ai_response with create task\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_intent_from_ai_response_list_tasks(self)` - Test _extract_intent_from_ai_response with list tasks\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_intent_from_ai_response_complete_task(self)` - Test _extract_intent_from_ai_response with complete task\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_intent_from_ai_response_start_checkin(self)` - Test _extract_intent_from_ai_response with start checkin\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_intent_from_ai_response_no_match(self)` - Test _extract_intent_from_ai_response with no matching patterns\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_extract_intent_from_ai_response_case_insensitive(self)` - Test _extract_intent_from_ai_response with case insensitive matching\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parse_command_function(self)` - Test the parse_command convenience function\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parse_command_function_empty(self)` - Test the parse_command convenience function with empty input\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parse_command_function_none(self)` - Test the parse_command convenience function with None input\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_get_enhanced_command_parser_singleton(self)` - Test get_enhanced_command_parser returns singleton\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parser_parse_method(self)` - Test the parser's parse method\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parser_parse_method_empty(self)` - Test the parser's parse method with empty input\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parser_parse_method_none(self)` - Test the parser's parse method with None input\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parser_parse_method_whitespace(self)` - Test the parser's parse method with whitespace-only input\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parser_with_mock_ai_chatbot(self)` - Test parser with mocked AI chatbot\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parser_with_mock_interaction_handlers(self)` - Test parser with mocked interaction handlers\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_error_handling_in_parsing(self)` - Test error handling in parsing methods\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_pattern_matching_edge_cases(self)` - Test pattern matching with edge cases\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parser_integration_with_real_inputs(self)` - Test parser integration with real input patterns\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parser_suggestions_integration(self)` - Test parser suggestions integration\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parser_entity_extraction_integration(self)` - Test parser entity extraction integration\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parser_ai_response_processing(self)` - Test parser AI response processing\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parser_initialization_components(self)` - Test parser initialization components\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parser_method_signatures(self)` - Test parser method signatures\n  - `TestCommandParserCoverageExpansionPhase3Simple.test_parser_robustness(self)` - Test parser robustness with various inputs\n\n### tests/behavior/test_communication_behavior.py\n**Functions:**\n- `temp_dir(self, test_path_factory)` - Provide a per-test directory under tests/data/tmp.\n- `comm_manager(self)` - Create a CommunicationManager instance for testing.\n- `mock_channel_config(self)` - Create a mock channel configuration.\n- `realistic_mock_channel(self)` - Create a realistic mock channel with proper async methods.\n- `test_communication_manager_singleton(self, comm_manager)` - Test that CommunicationManager follows singleton pattern.\n- `test_communication_manager_initialization(self, comm_manager)` - Test CommunicationManager initialization.\n- `test_initialize_channels_from_config(self, mock_factory, comm_manager, mock_channel_config, realistic_mock_channel)` - Test channel initialization from configuration with realistic channel behavior.\n- `test_get_active_channels(self, comm_manager, realistic_mock_channel)` - Test getting active channels with realistic channel setup.\n- `test_send_message_sync_with_realistic_channel(self, comm_manager, realistic_mock_channel)` - Test synchronous message sending with realistic channel behavior.\n- `test_send_message_sync_channel_not_ready(self, comm_manager, realistic_mock_channel)` - Test synchronous message sending when channel is not ready.\n- `test_send_message_sync_channel_not_found(self, comm_manager)` - Test synchronous message sending when channel doesn't exist.\n**Classes:**\n- `TestCommunicationManager` - Test cases for the CommunicationManager class.\n  - `TestCommunicationManager.temp_dir(self, test_path_factory)` - Provide a per-test directory under tests/data/tmp.\n  - `TestCommunicationManager.comm_manager(self)` - Create a CommunicationManager instance for testing.\n  - `TestCommunicationManager.mock_channel_config(self)` - Create a mock channel configuration.\n  - `TestCommunicationManager.realistic_mock_channel(self)` - Create a realistic mock channel with proper async methods.\n  - `TestCommunicationManager.test_communication_manager_singleton(self, comm_manager)` - Test that CommunicationManager follows singleton pattern.\n  - `TestCommunicationManager.test_communication_manager_initialization(self, comm_manager)` - Test CommunicationManager initialization.\n  - `TestCommunicationManager.test_initialize_channels_from_config(self, mock_factory, comm_manager, mock_channel_config, realistic_mock_channel)` - Test channel initialization from configuration with realistic channel behavior.\n  - `TestCommunicationManager.test_get_active_channels(self, comm_manager, realistic_mock_channel)` - Test getting active channels with realistic channel setup.\n  - `TestCommunicationManager.test_send_message_sync_with_realistic_channel(self, comm_manager, realistic_mock_channel)` - Test synchronous message sending with realistic channel behavior.\n  - `TestCommunicationManager.test_send_message_sync_channel_not_ready(self, comm_manager, realistic_mock_channel)` - Test synchronous message sending when channel is not ready.\n  - `TestCommunicationManager.test_send_message_sync_channel_not_found(self, comm_manager)` - Test synchronous message sending when channel doesn't exist.\n\n### tests/behavior/test_communication_command_parser_behavior.py\n**Functions:**\n- `test_command_parser_initialization_creates_components(self, test_data_dir)` - Test that command parser initialization creates required components.\n**Classes:**\n- `TestCommandParserBehavior` - Test real behavior of command parser functionality.\n  - `TestCommandParserBehavior.test_command_parser_initialization_creates_components(self, test_data_dir)` - Test that command parser initialization creates required components.\n\n### tests/behavior/test_communication_factory_coverage_expansion.py\n**Functions:**\n- `test_initialize_registry_already_initialized(self, test_data_dir)` - Test _initialize_registry when already initialized.\n- `test_initialize_registry_with_import_error(self, test_data_dir)` - Test _initialize_registry with import error.\n- `test_initialize_registry_with_attribute_error(self, test_data_dir)` - Test _initialize_registry with attribute error.\n- `test_initialize_registry_successful_registration(self, test_data_dir)` - Test _initialize_registry with successful channel registration.\n- `test_create_channel_unknown_type(self, test_data_dir)` - Test create_channel with unknown channel type.\n- `test_create_channel_successful_creation(self, test_data_dir)` - Test create_channel with successful channel creation.\n- `test_get_registered_channels_empty_registry(self, test_data_dir)` - Test get_registered_channels with empty registry.\n- `test_get_registered_channels_with_channels(self, test_data_dir)` - Test get_registered_channels with registered channels.\n- `test_factory_error_handling_initialization(self, test_data_dir)` - Test factory error handling during initialization.\n- `test_factory_error_handling_create_channel(self, test_data_dir)` - Test factory error handling during channel creation.\n- `test_factory_error_handling_get_channels(self, test_data_dir)` - Test factory error handling during get_registered_channels.\n- `test_factory_registry_persistence(self, test_data_dir)` - Test that registry persists between calls.\n- `test_factory_dynamic_import_handling(self, test_data_dir)` - Test factory handling of dynamic imports.\n- `test_factory_config_integration(self, test_data_dir)` - Test factory integration with configuration system.\n- `test_factory_logging_behavior(self, test_data_dir)` - Test factory logging behavior.\n- `test_factory_singleton_behavior(self, test_data_dir)` - Test factory singleton-like behavior.\n- `__init__(self, config)` - No description\n- `channel_type(self)` - No description\n- `__init__(self, config)` - No description\n- `channel_type(self)` - No description\n**Classes:**\n- `TestCommunicationFactoryCoverageExpansion` - Test coverage expansion for Communication Factory module.\n  - `TestCommunicationFactoryCoverageExpansion.test_initialize_registry_already_initialized(self, test_data_dir)` - Test _initialize_registry when already initialized.\n  - `TestCommunicationFactoryCoverageExpansion.test_initialize_registry_with_import_error(self, test_data_dir)` - Test _initialize_registry with import error.\n  - `TestCommunicationFactoryCoverageExpansion.test_initialize_registry_with_attribute_error(self, test_data_dir)` - Test _initialize_registry with attribute error.\n  - `TestCommunicationFactoryCoverageExpansion.test_initialize_registry_successful_registration(self, test_data_dir)` - Test _initialize_registry with successful channel registration.\n  - `TestCommunicationFactoryCoverageExpansion.test_create_channel_unknown_type(self, test_data_dir)` - Test create_channel with unknown channel type.\n  - `TestCommunicationFactoryCoverageExpansion.test_create_channel_successful_creation(self, test_data_dir)` - Test create_channel with successful channel creation.\n  - `TestCommunicationFactoryCoverageExpansion.test_get_registered_channels_empty_registry(self, test_data_dir)` - Test get_registered_channels with empty registry.\n  - `TestCommunicationFactoryCoverageExpansion.test_get_registered_channels_with_channels(self, test_data_dir)` - Test get_registered_channels with registered channels.\n  - `TestCommunicationFactoryCoverageExpansion.test_factory_error_handling_initialization(self, test_data_dir)` - Test factory error handling during initialization.\n  - `TestCommunicationFactoryCoverageExpansion.test_factory_error_handling_create_channel(self, test_data_dir)` - Test factory error handling during channel creation.\n  - `TestCommunicationFactoryCoverageExpansion.test_factory_error_handling_get_channels(self, test_data_dir)` - Test factory error handling during get_registered_channels.\n  - `TestCommunicationFactoryCoverageExpansion.test_factory_registry_persistence(self, test_data_dir)` - Test that registry persists between calls.\n  - `TestCommunicationFactoryCoverageExpansion.test_factory_dynamic_import_handling(self, test_data_dir)` - Test factory handling of dynamic imports.\n  - `TestCommunicationFactoryCoverageExpansion.test_factory_config_integration(self, test_data_dir)` - Test factory integration with configuration system.\n  - `TestCommunicationFactoryCoverageExpansion.test_factory_logging_behavior(self, test_data_dir)` - Test factory logging behavior.\n  - `TestCommunicationFactoryCoverageExpansion.test_factory_singleton_behavior(self, test_data_dir)` - Test factory singleton-like behavior.\n- `MockChannel` - No description\n  - `MockChannel.__init__(self, config)` - No description\n  - `MockChannel.channel_type(self)` - No description\n- `ErrorChannel` - No description\n  - `ErrorChannel.__init__(self, config)` - No description\n  - `ErrorChannel.channel_type(self)` - No description\n\n### tests/behavior/test_communication_interaction_manager_behavior.py\n**Functions:**\n- `test_interaction_manager_initialization_creates_components(self, test_data_dir)` - Test that interaction manager initialization creates required components.\n- `test_process_message_creates_interaction_record(self, test_data_dir)` - Test that process_message creates actual interaction record.\n- `test_process_message_handles_command_parsing(self, test_data_dir)` - Test that process_message handles command parsing correctly.\n- `test_process_message_handles_conversation_flow(self, test_data_dir)` - Test that process_message handles conversation flow correctly.\n- `test_process_message_handles_ai_chat(self, test_data_dir)` - Test that process_message handles AI chat correctly.\n- `test_process_message_includes_user_context(self, test_data_dir)` - Test that process_message includes user context in processing.\n- `test_process_message_handles_task_commands(self, test_data_dir)` - Test that process_message handles task-related commands.\n- `test_process_message_handles_schedule_commands(self, test_data_dir)` - Test that process_message handles schedule-related commands.\n- `test_process_message_handles_checkin_commands(self, test_data_dir)` - Test that process_message handles checkin-related commands.\n- `test_process_message_handles_profile_commands(self, test_data_dir)` - Test that process_message handles profile-related commands.\n- `test_process_message_handles_help_commands(self, test_data_dir)` - Test that process_message handles help commands.\n- `test_process_message_handles_unknown_commands(self, test_data_dir)` - Test that process_message handles unknown commands gracefully.\n- `test_process_message_handles_empty_message(self, test_data_dir)` - Test that process_message handles empty messages.\n- `test_process_message_handles_whitespace_only_message(self, test_data_dir)` - Test that process_message handles whitespace-only messages.\n- `test_process_message_includes_timestamp(self, test_data_dir)` - Test that process_message includes timestamp in result.\n- `test_process_message_includes_interaction_type(self, test_data_dir)` - Test that process_message includes interaction type in result.\n- `test_process_message_handles_long_messages(self, test_data_dir)` - Test that process_message handles long messages correctly.\n- `test_process_message_handles_special_characters(self, test_data_dir)` - Test that process_message handles special characters correctly.\n- `test_process_message_handles_unicode_characters(self, test_data_dir)` - Test that process_message handles unicode characters correctly.\n- `test_process_message_handles_mixed_content(self, test_data_dir)` - Test that process_message handles mixed content types.\n- `test_process_message_handles_conversation_context(self, test_data_dir)` - Test that process_message maintains conversation context.\n- `test_process_message_handles_error_conditions(self, test_data_dir)` - Test that process_message handles error conditions gracefully.\n- `test_process_message_handles_concurrent_access(self, test_data_dir)` - Test that process_message handles concurrent access safely.\n- `test_process_message_handles_rate_limiting(self, test_data_dir)` - Test that process_message handles rate limiting correctly.\n- `test_process_message_handles_user_preferences(self, test_data_dir)` - Test that process_message respects user preferences.\n- `test_process_message_handles_feature_flags(self, test_data_dir)` - Test that process_message respects feature flags.\n**Classes:**\n- `TestInteractionManagerBehavior` - Test real behavior of interaction manager functionality.\n  - `TestInteractionManagerBehavior.test_interaction_manager_initialization_creates_components(self, test_data_dir)` - Test that interaction manager initialization creates required components.\n  - `TestInteractionManagerBehavior.test_process_message_creates_interaction_record(self, test_data_dir)` - Test that process_message creates actual interaction record.\n  - `TestInteractionManagerBehavior.test_process_message_handles_command_parsing(self, test_data_dir)` - Test that process_message handles command parsing correctly.\n  - `TestInteractionManagerBehavior.test_process_message_handles_conversation_flow(self, test_data_dir)` - Test that process_message handles conversation flow correctly.\n  - `TestInteractionManagerBehavior.test_process_message_handles_ai_chat(self, test_data_dir)` - Test that process_message handles AI chat correctly.\n  - `TestInteractionManagerBehavior.test_process_message_includes_user_context(self, test_data_dir)` - Test that process_message includes user context in processing.\n  - `TestInteractionManagerBehavior.test_process_message_handles_task_commands(self, test_data_dir)` - Test that process_message handles task-related commands.\n  - `TestInteractionManagerBehavior.test_process_message_handles_schedule_commands(self, test_data_dir)` - Test that process_message handles schedule-related commands.\n  - `TestInteractionManagerBehavior.test_process_message_handles_checkin_commands(self, test_data_dir)` - Test that process_message handles checkin-related commands.\n  - `TestInteractionManagerBehavior.test_process_message_handles_profile_commands(self, test_data_dir)` - Test that process_message handles profile-related commands.\n  - `TestInteractionManagerBehavior.test_process_message_handles_help_commands(self, test_data_dir)` - Test that process_message handles help commands.\n  - `TestInteractionManagerBehavior.test_process_message_handles_unknown_commands(self, test_data_dir)` - Test that process_message handles unknown commands gracefully.\n  - `TestInteractionManagerBehavior.test_process_message_handles_empty_message(self, test_data_dir)` - Test that process_message handles empty messages.\n  - `TestInteractionManagerBehavior.test_process_message_handles_whitespace_only_message(self, test_data_dir)` - Test that process_message handles whitespace-only messages.\n  - `TestInteractionManagerBehavior.test_process_message_includes_timestamp(self, test_data_dir)` - Test that process_message includes timestamp in result.\n  - `TestInteractionManagerBehavior.test_process_message_includes_interaction_type(self, test_data_dir)` - Test that process_message includes interaction type in result.\n  - `TestInteractionManagerBehavior.test_process_message_handles_long_messages(self, test_data_dir)` - Test that process_message handles long messages correctly.\n  - `TestInteractionManagerBehavior.test_process_message_handles_special_characters(self, test_data_dir)` - Test that process_message handles special characters correctly.\n  - `TestInteractionManagerBehavior.test_process_message_handles_unicode_characters(self, test_data_dir)` - Test that process_message handles unicode characters correctly.\n  - `TestInteractionManagerBehavior.test_process_message_handles_mixed_content(self, test_data_dir)` - Test that process_message handles mixed content types.\n  - `TestInteractionManagerBehavior.test_process_message_handles_conversation_context(self, test_data_dir)` - Test that process_message maintains conversation context.\n  - `TestInteractionManagerBehavior.test_process_message_handles_error_conditions(self, test_data_dir)` - Test that process_message handles error conditions gracefully.\n  - `TestInteractionManagerBehavior.test_process_message_handles_concurrent_access(self, test_data_dir)` - Test that process_message handles concurrent access safely.\n  - `TestInteractionManagerBehavior.test_process_message_handles_rate_limiting(self, test_data_dir)` - Test that process_message handles rate limiting correctly.\n  - `TestInteractionManagerBehavior.test_process_message_handles_user_preferences(self, test_data_dir)` - Test that process_message respects user preferences.\n  - `TestInteractionManagerBehavior.test_process_message_handles_feature_flags(self, test_data_dir)` - Test that process_message respects feature flags.\n\n### tests/behavior/test_communication_manager_coverage_expansion.py\n**Functions:**\n- `test_data_dir(self, test_path_factory)` - Provide per-test directory under tests/data/tmp.\n- `comm_manager(self)` - Create a CommunicationManager instance for testing.\n- `mock_channel_config(self)` - Create a mock channel configuration.\n- `realistic_mock_channel(self)` - Create a realistic mock channel with proper async methods.\n- `test_message_queuing_real_behavior(self, comm_manager)` - Test message queuing functionality for failed messages.\n- `test_retry_thread_management_real_behavior(self, comm_manager)` - Test retry thread start/stop functionality.\n- `test_restart_monitor_management_real_behavior(self, comm_manager)` - Test restart monitor thread start/stop functionality.\n- `test_channel_restart_monitoring_real_behavior(self, comm_manager, realistic_mock_channel)` - Test channel restart monitoring functionality.\n- `test_channel_restart_attempt_real_behavior(self, comm_manager, realistic_mock_channel, mock_channel_config)` - Test channel restart attempt functionality.\n- `test_retry_queue_processing_real_behavior(self, comm_manager, realistic_mock_channel)` - Test retry queue processing functionality.\n- `test_retry_queue_processing_with_failure_real_behavior(self, comm_manager, realistic_mock_channel)` - Test retry queue processing when message sending fails.\n- `test_async_channel_initialization_real_behavior(self, comm_manager, realistic_mock_channel, mock_channel_config)` - Test async channel initialization functionality.\n- `test_channel_initialization_with_retry_real_behavior(self, comm_manager, realistic_mock_channel, mock_channel_config)` - Test channel initialization with retry logic.\n- `test_sync_channel_initialization_real_behavior(self, comm_manager, realistic_mock_channel, mock_channel_config)` - Test synchronous channel initialization functionality.\n- `test_default_channel_configs_real_behavior(self, comm_manager)` - Test default channel configuration generation.\n- `test_async_startup_real_behavior(self, comm_manager, realistic_mock_channel, mock_channel_config)` - Test async startup functionality.\n- `test_sync_startup_real_behavior(self, comm_manager, realistic_mock_channel, mock_channel_config)` - Test synchronous startup functionality.\n- `test_async_message_sending_real_behavior(self, comm_manager, realistic_mock_channel)` - Test async message sending functionality.\n- `test_async_message_sending_channel_not_ready_real_behavior(self, comm_manager, realistic_mock_channel)` - Test async message sending when channel is not ready.\n- `test_logging_health_check_real_behavior(self, comm_manager)` - Test logging health check functionality.\n- `test_broadcast_message_real_behavior(self, comm_manager, realistic_mock_channel)` - Test broadcast message functionality.\n- `test_get_channel_status_real_behavior(self, comm_manager, realistic_mock_channel)` - Test getting channel status functionality.\n- `test_get_all_statuses_real_behavior(self, comm_manager, realistic_mock_channel)` - Test getting all channel statuses functionality.\n- `test_health_check_all_real_behavior(self, comm_manager, realistic_mock_channel)` - Test health check all channels functionality.\n- `test_discord_connectivity_status_real_behavior(self, comm_manager, realistic_mock_channel)` - Test Discord connectivity status functionality.\n- `test_async_shutdown_real_behavior(self, comm_manager, realistic_mock_channel)` - Test async shutdown functionality.\n- `test_sync_shutdown_real_behavior(self, comm_manager, realistic_mock_channel)` - Test synchronous shutdown functionality.\n- `test_receive_messages_real_behavior(self, comm_manager, realistic_mock_channel)` - Test receive messages functionality.\n- `test_handle_message_sending_real_behavior(self, comm_manager, test_data_dir)` - Test handle message sending functionality.\n- `test_get_recipient_for_service_real_behavior(self, comm_manager, test_data_dir)` - Test getting recipient for service functionality.\n- `test_should_send_checkin_prompt_real_behavior(self, comm_manager, test_data_dir)` - Test checkin prompt sending logic.\n- `test_handle_scheduled_checkin_real_behavior(self, comm_manager, test_data_dir)` - Test scheduled checkin handling functionality.\n- `test_send_checkin_prompt_real_behavior(self, comm_manager, test_data_dir)` - Test sending checkin prompt functionality.\n- `test_send_ai_generated_message_real_behavior(self, comm_manager, test_data_dir)` - Test sending AI generated message functionality.\n- `test_send_predefined_message_real_behavior(self, comm_manager, test_data_dir)` - Test sending predefined message functionality.\n- `test_handle_task_reminder_real_behavior(self, comm_manager, test_data_dir)` - Test task reminder handling functionality.\n- `test_create_task_reminder_message_real_behavior(self, comm_manager)` - Test creating task reminder message functionality.\n- `test_event_loop_setup_real_behavior(self, comm_manager)` - Test event loop setup functionality.\n- `test_run_async_sync_real_behavior(self, comm_manager)` - Test running async functions synchronously.\n- `test_set_scheduler_manager_real_behavior(self, comm_manager)` - Test setting scheduler manager functionality.\n- `test_start_all_real_behavior(self, comm_manager, realistic_mock_channel, mock_channel_config)` - Test start all functionality.\n- `test_stop_all_real_behavior(self, comm_manager, realistic_mock_channel)` - Test stop all functionality.\n**Classes:**\n- `TestCommunicationManagerCoverageExpansion` - Comprehensive tests for CommunicationManager uncovered functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_data_dir(self, test_path_factory)` - Provide per-test directory under tests/data/tmp.\n  - `TestCommunicationManagerCoverageExpansion.comm_manager(self)` - Create a CommunicationManager instance for testing.\n  - `TestCommunicationManagerCoverageExpansion.mock_channel_config(self)` - Create a mock channel configuration.\n  - `TestCommunicationManagerCoverageExpansion.realistic_mock_channel(self)` - Create a realistic mock channel with proper async methods.\n  - `TestCommunicationManagerCoverageExpansion.test_message_queuing_real_behavior(self, comm_manager)` - Test message queuing functionality for failed messages.\n  - `TestCommunicationManagerCoverageExpansion.test_retry_thread_management_real_behavior(self, comm_manager)` - Test retry thread start/stop functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_restart_monitor_management_real_behavior(self, comm_manager)` - Test restart monitor thread start/stop functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_channel_restart_monitoring_real_behavior(self, comm_manager, realistic_mock_channel)` - Test channel restart monitoring functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_channel_restart_attempt_real_behavior(self, comm_manager, realistic_mock_channel, mock_channel_config)` - Test channel restart attempt functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_retry_queue_processing_real_behavior(self, comm_manager, realistic_mock_channel)` - Test retry queue processing functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_retry_queue_processing_with_failure_real_behavior(self, comm_manager, realistic_mock_channel)` - Test retry queue processing when message sending fails.\n  - `TestCommunicationManagerCoverageExpansion.test_async_channel_initialization_real_behavior(self, comm_manager, realistic_mock_channel, mock_channel_config)` - Test async channel initialization functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_channel_initialization_with_retry_real_behavior(self, comm_manager, realistic_mock_channel, mock_channel_config)` - Test channel initialization with retry logic.\n  - `TestCommunicationManagerCoverageExpansion.test_sync_channel_initialization_real_behavior(self, comm_manager, realistic_mock_channel, mock_channel_config)` - Test synchronous channel initialization functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_default_channel_configs_real_behavior(self, comm_manager)` - Test default channel configuration generation.\n  - `TestCommunicationManagerCoverageExpansion.test_async_startup_real_behavior(self, comm_manager, realistic_mock_channel, mock_channel_config)` - Test async startup functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_sync_startup_real_behavior(self, comm_manager, realistic_mock_channel, mock_channel_config)` - Test synchronous startup functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_async_message_sending_real_behavior(self, comm_manager, realistic_mock_channel)` - Test async message sending functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_async_message_sending_channel_not_ready_real_behavior(self, comm_manager, realistic_mock_channel)` - Test async message sending when channel is not ready.\n  - `TestCommunicationManagerCoverageExpansion.test_logging_health_check_real_behavior(self, comm_manager)` - Test logging health check functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_broadcast_message_real_behavior(self, comm_manager, realistic_mock_channel)` - Test broadcast message functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_get_channel_status_real_behavior(self, comm_manager, realistic_mock_channel)` - Test getting channel status functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_get_all_statuses_real_behavior(self, comm_manager, realistic_mock_channel)` - Test getting all channel statuses functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_health_check_all_real_behavior(self, comm_manager, realistic_mock_channel)` - Test health check all channels functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_discord_connectivity_status_real_behavior(self, comm_manager, realistic_mock_channel)` - Test Discord connectivity status functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_async_shutdown_real_behavior(self, comm_manager, realistic_mock_channel)` - Test async shutdown functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_sync_shutdown_real_behavior(self, comm_manager, realistic_mock_channel)` - Test synchronous shutdown functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_receive_messages_real_behavior(self, comm_manager, realistic_mock_channel)` - Test receive messages functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_handle_message_sending_real_behavior(self, comm_manager, test_data_dir)` - Test handle message sending functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_get_recipient_for_service_real_behavior(self, comm_manager, test_data_dir)` - Test getting recipient for service functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_should_send_checkin_prompt_real_behavior(self, comm_manager, test_data_dir)` - Test checkin prompt sending logic.\n  - `TestCommunicationManagerCoverageExpansion.test_handle_scheduled_checkin_real_behavior(self, comm_manager, test_data_dir)` - Test scheduled checkin handling functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_send_checkin_prompt_real_behavior(self, comm_manager, test_data_dir)` - Test sending checkin prompt functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_send_ai_generated_message_real_behavior(self, comm_manager, test_data_dir)` - Test sending AI generated message functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_send_predefined_message_real_behavior(self, comm_manager, test_data_dir)` - Test sending predefined message functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_handle_task_reminder_real_behavior(self, comm_manager, test_data_dir)` - Test task reminder handling functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_create_task_reminder_message_real_behavior(self, comm_manager)` - Test creating task reminder message functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_event_loop_setup_real_behavior(self, comm_manager)` - Test event loop setup functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_run_async_sync_real_behavior(self, comm_manager)` - Test running async functions synchronously.\n  - `TestCommunicationManagerCoverageExpansion.test_set_scheduler_manager_real_behavior(self, comm_manager)` - Test setting scheduler manager functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_start_all_real_behavior(self, comm_manager, realistic_mock_channel, mock_channel_config)` - Test start all functionality.\n  - `TestCommunicationManagerCoverageExpansion.test_stop_all_real_behavior(self, comm_manager, realistic_mock_channel)` - Test stop all functionality.\n\n### tests/behavior/test_config_coverage_expansion_phase3_simple.py\n**Functions:**\n- `test_config_validation_error_initialization(self, tmp_path)` - Test ConfigValidationError initialization\n- `test_config_validation_error_with_none_values(self, tmp_path)` - Test ConfigValidationError with None values\n- `test_normalize_path_function(self, tmp_path)` - Test _normalize_path function\n- `test_normalize_path_edge_cases(self, tmp_path)` - Test path normalization with edge cases\n- `test_get_available_channels(self, tmp_path)` - Test get_available_channels function\n- `test_get_channel_class_mapping(self, tmp_path)` - Test get_channel_class_mapping function\n- `test_validate_core_paths_success(self, tmp_path)` - Test validate_core_paths function with successful validation\n- `test_validate_ai_configuration_missing_url(self, tmp_path)` - Test validate_ai_configuration with missing LM Studio URL\n- `test_validate_ai_configuration_invalid_url(self, tmp_path)` - Test validate_ai_configuration with invalid URL\n- `test_validate_ai_configuration_valid_config(self, tmp_path)` - Test validate_ai_configuration with valid configuration\n- `test_validate_communication_channels(self, tmp_path)` - Test validate_communication_channels function\n- `test_validate_logging_configuration(self, tmp_path)` - Test validate_logging_configuration function\n- `test_validate_scheduler_configuration(self, tmp_path)` - Test validate_scheduler_configuration function\n- `test_validate_file_organization_settings(self, tmp_path)` - Test validate_file_organization_settings function\n- `test_validate_environment_variables(self, tmp_path)` - Test validate_environment_variables function\n- `test_validate_all_configuration_integration(self, tmp_path)` - Test validate_all_configuration function integration\n- `test_validate_and_raise_if_invalid(self, tmp_path)` - Test validate_and_raise_if_invalid function\n- `test_print_configuration_report(self, tmp_path, capsys)` - Test print_configuration_report function\n- `test_print_configuration_report_no_channels(self, tmp_path, capsys)` - Test print_configuration_report function with no available channels\n- `test_get_user_data_dir(self, tmp_path)` - Test get_user_data_dir function\n- `test_get_backups_dir_testing_mode(self, tmp_path)` - Test get_backups_dir function in testing mode\n- `test_get_backups_dir_production_mode(self, tmp_path)` - Test get_backups_dir function in production mode\n- `test_get_user_file_path(self, tmp_path)` - Test get_user_file_path function\n- `test_ensure_user_directory_success(self, tmp_path)` - Test ensure_user_directory function with success\n- `test_ensure_user_directory_failure(self, tmp_path)` - Test ensure_user_directory function with failure\n- `test_validate_email_config(self, tmp_path)` - Test validate_email_config function\n- `test_validate_discord_config(self, tmp_path)` - Test validate_discord_config function\n- `test_validate_minimum_config(self, tmp_path)` - Test validate_minimum_config function\n- `test_environment_variable_loading(self, tmp_path)` - Test environment variable loading and parsing\n- `test_configuration_constants_exist(self, tmp_path)` - Test that all expected configuration constants exist\n- `test_configuration_error_handling(self, tmp_path)` - Test configuration error handling\n- `test_validation_functions_return_correct_types(self, tmp_path)` - Test that all validation functions return correct types\n- `test_path_handling_functions(self, tmp_path)` - Test path handling functions\n- `test_directory_creation_functions(self, tmp_path)` - Test directory creation functions\n- `test_configuration_validation_integration(self, tmp_path)` - Test configuration validation integration\n**Classes:**\n- `TestConfigCoverageExpansionPhase3Simple` - Test coverage expansion for core/config.py - Phase 3 Simple\n  - `TestConfigCoverageExpansionPhase3Simple.test_config_validation_error_initialization(self, tmp_path)` - Test ConfigValidationError initialization\n  - `TestConfigCoverageExpansionPhase3Simple.test_config_validation_error_with_none_values(self, tmp_path)` - Test ConfigValidationError with None values\n  - `TestConfigCoverageExpansionPhase3Simple.test_normalize_path_function(self, tmp_path)` - Test _normalize_path function\n  - `TestConfigCoverageExpansionPhase3Simple.test_normalize_path_edge_cases(self, tmp_path)` - Test path normalization with edge cases\n  - `TestConfigCoverageExpansionPhase3Simple.test_get_available_channels(self, tmp_path)` - Test get_available_channels function\n  - `TestConfigCoverageExpansionPhase3Simple.test_get_channel_class_mapping(self, tmp_path)` - Test get_channel_class_mapping function\n  - `TestConfigCoverageExpansionPhase3Simple.test_validate_core_paths_success(self, tmp_path)` - Test validate_core_paths function with successful validation\n  - `TestConfigCoverageExpansionPhase3Simple.test_validate_ai_configuration_missing_url(self, tmp_path)` - Test validate_ai_configuration with missing LM Studio URL\n  - `TestConfigCoverageExpansionPhase3Simple.test_validate_ai_configuration_invalid_url(self, tmp_path)` - Test validate_ai_configuration with invalid URL\n  - `TestConfigCoverageExpansionPhase3Simple.test_validate_ai_configuration_valid_config(self, tmp_path)` - Test validate_ai_configuration with valid configuration\n  - `TestConfigCoverageExpansionPhase3Simple.test_validate_communication_channels(self, tmp_path)` - Test validate_communication_channels function\n  - `TestConfigCoverageExpansionPhase3Simple.test_validate_logging_configuration(self, tmp_path)` - Test validate_logging_configuration function\n  - `TestConfigCoverageExpansionPhase3Simple.test_validate_scheduler_configuration(self, tmp_path)` - Test validate_scheduler_configuration function\n  - `TestConfigCoverageExpansionPhase3Simple.test_validate_file_organization_settings(self, tmp_path)` - Test validate_file_organization_settings function\n  - `TestConfigCoverageExpansionPhase3Simple.test_validate_environment_variables(self, tmp_path)` - Test validate_environment_variables function\n  - `TestConfigCoverageExpansionPhase3Simple.test_validate_all_configuration_integration(self, tmp_path)` - Test validate_all_configuration function integration\n  - `TestConfigCoverageExpansionPhase3Simple.test_validate_and_raise_if_invalid(self, tmp_path)` - Test validate_and_raise_if_invalid function\n  - `TestConfigCoverageExpansionPhase3Simple.test_print_configuration_report(self, tmp_path, capsys)` - Test print_configuration_report function\n  - `TestConfigCoverageExpansionPhase3Simple.test_print_configuration_report_no_channels(self, tmp_path, capsys)` - Test print_configuration_report function with no available channels\n  - `TestConfigCoverageExpansionPhase3Simple.test_get_user_data_dir(self, tmp_path)` - Test get_user_data_dir function\n  - `TestConfigCoverageExpansionPhase3Simple.test_get_backups_dir_testing_mode(self, tmp_path)` - Test get_backups_dir function in testing mode\n  - `TestConfigCoverageExpansionPhase3Simple.test_get_backups_dir_production_mode(self, tmp_path)` - Test get_backups_dir function in production mode\n  - `TestConfigCoverageExpansionPhase3Simple.test_get_user_file_path(self, tmp_path)` - Test get_user_file_path function\n  - `TestConfigCoverageExpansionPhase3Simple.test_ensure_user_directory_success(self, tmp_path)` - Test ensure_user_directory function with success\n  - `TestConfigCoverageExpansionPhase3Simple.test_ensure_user_directory_failure(self, tmp_path)` - Test ensure_user_directory function with failure\n  - `TestConfigCoverageExpansionPhase3Simple.test_validate_email_config(self, tmp_path)` - Test validate_email_config function\n  - `TestConfigCoverageExpansionPhase3Simple.test_validate_discord_config(self, tmp_path)` - Test validate_discord_config function\n  - `TestConfigCoverageExpansionPhase3Simple.test_validate_minimum_config(self, tmp_path)` - Test validate_minimum_config function\n  - `TestConfigCoverageExpansionPhase3Simple.test_environment_variable_loading(self, tmp_path)` - Test environment variable loading and parsing\n  - `TestConfigCoverageExpansionPhase3Simple.test_configuration_constants_exist(self, tmp_path)` - Test that all expected configuration constants exist\n  - `TestConfigCoverageExpansionPhase3Simple.test_configuration_error_handling(self, tmp_path)` - Test configuration error handling\n  - `TestConfigCoverageExpansionPhase3Simple.test_validation_functions_return_correct_types(self, tmp_path)` - Test that all validation functions return correct types\n  - `TestConfigCoverageExpansionPhase3Simple.test_path_handling_functions(self, tmp_path)` - Test path handling functions\n  - `TestConfigCoverageExpansionPhase3Simple.test_directory_creation_functions(self, tmp_path)` - Test directory creation functions\n  - `TestConfigCoverageExpansionPhase3Simple.test_configuration_validation_integration(self, tmp_path)` - Test configuration validation integration\n\n### tests/behavior/test_conversation_behavior.py\n**Functions:**\n- `test_conversation_manager_initialization_creates_structure(self, test_data_dir)` - Test that ConversationManager initialization creates proper internal structure.\n- `test_handle_inbound_message_creates_user_state(self, test_data_dir)` - Test that handle_inbound_message actually creates user state when needed.\n- `test_handle_inbound_message_preserves_existing_state(self, test_data_dir)` - Test that handle_inbound_message preserves existing user state.\n- `test_start_checkin_creates_checkin_state(self, test_data_dir)` - Test that start_checkin actually creates check-in state.\n- `test_start_checkin_handles_disabled_user(self, test_data_dir)` - Test that start_checkin handles users with disabled check-ins.\n- `test_checkin_flow_progression(self, test_data_dir)` - Test that check-in flow actually progresses through states.\n- `test_checkin_flow_completion(self, test_data_dir)` - Test that check-in flow actually completes and cleans up state.\n- `test_validate_response_handles_various_inputs(self, test_data_dir)` - Test that _validate_response actually validates different types of responses.\n- `test_validate_response_handles_edge_cases(self, test_data_dir)` - Test that _validate_response handles edge cases gracefully.\n- `test_get_question_text_returns_personalized_questions(self, test_data_dir)` - Test that _get_question_text returns personalized questions based on context.\n- `test_handle_contextual_question_integrates_with_ai(self, test_data_dir)` - Test that handle_contextual_question integrates with AI chatbot.\n- `test_conversation_manager_error_handling_preserves_system_stability(self, test_data_dir)` - Test that ConversationManager error handling preserves system stability.\n- `test_conversation_manager_performance_under_load(self, test_data_dir)` - Test that ConversationManager performs well under load.\n- `test_conversation_manager_cleanup_and_resource_management(self, test_data_dir)` - Test that ConversationManager properly manages resources and cleanup.\n- `test_conversation_manager_integration_with_response_tracking(self, test_data_dir)` - Test that ConversationManager integrates properly with response tracking.\n- `test_conversation_manager_command_handling(self, test_data_dir)` - Test that ConversationManager properly handles special commands.\n- `test_conversation_manager_cancel_handling(self, test_data_dir)` - Test that ConversationManager properly handles cancel commands.\n- `test_conversation_manager_with_real_user_data(self, test_data_dir)` - Test ConversationManager with real user data files.\n- `test_conversation_manager_error_recovery_with_real_files(self, test_data_dir)` - Test ConversationManager error recovery with corrupted real files.\n- `test_conversation_manager_concurrent_access_safety(self, test_data_dir)` - Test ConversationManager safety under concurrent access.\n**Classes:**\n- `TestConversationManagerBehavior` - Test ConversationManager real behavior and side effects.\n  - `TestConversationManagerBehavior.test_conversation_manager_initialization_creates_structure(self, test_data_dir)` - Test that ConversationManager initialization creates proper internal structure.\n  - `TestConversationManagerBehavior.test_handle_inbound_message_creates_user_state(self, test_data_dir)` - Test that handle_inbound_message actually creates user state when needed.\n  - `TestConversationManagerBehavior.test_handle_inbound_message_preserves_existing_state(self, test_data_dir)` - Test that handle_inbound_message preserves existing user state.\n  - `TestConversationManagerBehavior.test_start_checkin_creates_checkin_state(self, test_data_dir)` - Test that start_checkin actually creates check-in state.\n  - `TestConversationManagerBehavior.test_start_checkin_handles_disabled_user(self, test_data_dir)` - Test that start_checkin handles users with disabled check-ins.\n  - `TestConversationManagerBehavior.test_checkin_flow_progression(self, test_data_dir)` - Test that check-in flow actually progresses through states.\n  - `TestConversationManagerBehavior.test_checkin_flow_completion(self, test_data_dir)` - Test that check-in flow actually completes and cleans up state.\n  - `TestConversationManagerBehavior.test_validate_response_handles_various_inputs(self, test_data_dir)` - Test that _validate_response actually validates different types of responses.\n  - `TestConversationManagerBehavior.test_validate_response_handles_edge_cases(self, test_data_dir)` - Test that _validate_response handles edge cases gracefully.\n  - `TestConversationManagerBehavior.test_get_question_text_returns_personalized_questions(self, test_data_dir)` - Test that _get_question_text returns personalized questions based on context.\n  - `TestConversationManagerBehavior.test_handle_contextual_question_integrates_with_ai(self, test_data_dir)` - Test that handle_contextual_question integrates with AI chatbot.\n  - `TestConversationManagerBehavior.test_conversation_manager_error_handling_preserves_system_stability(self, test_data_dir)` - Test that ConversationManager error handling preserves system stability.\n  - `TestConversationManagerBehavior.test_conversation_manager_performance_under_load(self, test_data_dir)` - Test that ConversationManager performs well under load.\n  - `TestConversationManagerBehavior.test_conversation_manager_cleanup_and_resource_management(self, test_data_dir)` - Test that ConversationManager properly manages resources and cleanup.\n  - `TestConversationManagerBehavior.test_conversation_manager_integration_with_response_tracking(self, test_data_dir)` - Test that ConversationManager integrates properly with response tracking.\n  - `TestConversationManagerBehavior.test_conversation_manager_command_handling(self, test_data_dir)` - Test that ConversationManager properly handles special commands.\n  - `TestConversationManagerBehavior.test_conversation_manager_cancel_handling(self, test_data_dir)` - Test that ConversationManager properly handles cancel commands.\n- `TestConversationManagerIntegration` - Integration tests for ConversationManager with real user data.\n  - `TestConversationManagerIntegration.test_conversation_manager_with_real_user_data(self, test_data_dir)` - Test ConversationManager with real user data files.\n  - `TestConversationManagerIntegration.test_conversation_manager_error_recovery_with_real_files(self, test_data_dir)` - Test ConversationManager error recovery with corrupted real files.\n  - `TestConversationManagerIntegration.test_conversation_manager_concurrent_access_safety(self, test_data_dir)` - Test ConversationManager safety under concurrent access.\n\n### tests/behavior/test_core_message_management_coverage_expansion.py\n**Functions:**\n- `test_get_message_categories_from_env_real_behavior(self)` - Test getting message categories from environment variable.\n- `test_get_message_categories_from_json_real_behavior(self)` - Test getting message categories from JSON format.\n- `test_get_message_categories_no_env_real_behavior(self)` - Test getting message categories when no environment variable.\n- `test_load_default_messages_real_behavior(self)` - Test loading default messages for a category.\n- `test_load_default_messages_file_not_found_real_behavior(self)` - Test loading default messages when file doesn't exist.\n- `test_parse_timestamp_real_behavior(self)` - Test parsing timestamp strings.\n- `test_get_timestamp_for_sorting_real_behavior(self)` - Test getting timestamp for sorting.\n- `test_get_timestamp_for_sorting_string_real_behavior(self)` - Test getting timestamp for sorting with string timestamp.\n- `test_get_timestamp_for_sorting_invalid_item_real_behavior(self)` - Test getting timestamp for sorting with invalid item type.\n**Classes:**\n- `TestCoreMessageManagementCoverageExpansion` - Test class for Core Message Management coverage expansion.\n  - `TestCoreMessageManagementCoverageExpansion.test_get_message_categories_from_env_real_behavior(self)` - Test getting message categories from environment variable.\n  - `TestCoreMessageManagementCoverageExpansion.test_get_message_categories_from_json_real_behavior(self)` - Test getting message categories from JSON format.\n  - `TestCoreMessageManagementCoverageExpansion.test_get_message_categories_no_env_real_behavior(self)` - Test getting message categories when no environment variable.\n  - `TestCoreMessageManagementCoverageExpansion.test_load_default_messages_real_behavior(self)` - Test loading default messages for a category.\n  - `TestCoreMessageManagementCoverageExpansion.test_load_default_messages_file_not_found_real_behavior(self)` - Test loading default messages when file doesn't exist.\n  - `TestCoreMessageManagementCoverageExpansion.test_parse_timestamp_real_behavior(self)` - Test parsing timestamp strings.\n  - `TestCoreMessageManagementCoverageExpansion.test_get_timestamp_for_sorting_real_behavior(self)` - Test getting timestamp for sorting.\n  - `TestCoreMessageManagementCoverageExpansion.test_get_timestamp_for_sorting_string_real_behavior(self)` - Test getting timestamp for sorting with string timestamp.\n  - `TestCoreMessageManagementCoverageExpansion.test_get_timestamp_for_sorting_invalid_item_real_behavior(self)` - Test getting timestamp for sorting with invalid item type.\n\n### tests/behavior/test_core_service_coverage_expansion.py\n**Functions:**\n- `service(self)` - Create a fresh MHMService instance for each test.\n- `mock_config(self)` - Mock configuration to avoid real config dependencies.\n- `mock_communication_manager(self)` - Mock communication manager.\n- `mock_scheduler_manager(self)` - Mock scheduler manager.\n- `test_service_initialization_real_behavior(self, service)` - Test service initialization with real behavior verification.\n- `test_validate_configuration_success_real_behavior(self, service, mock_config)` - Test successful configuration validation.\n- `test_validate_configuration_failure_real_behavior(self, service)` - Test configuration validation failure.\n- `test_initialize_paths_real_behavior(self, service)` - Test path initialization with real behavior verification.\n- `test_initialize_paths_with_none_user_id_real_behavior(self, service)` - Test path initialization with None user ID handling.\n- `test_initialize_paths_with_invalid_categories_real_behavior(self, service)` - Test path initialization with invalid categories data.\n- `test_initialize_paths_with_empty_categories_real_behavior(self, service)` - Test path initialization with empty categories list.\n- `test_initialize_paths_with_path_generation_error_real_behavior(self, service)` - Test path initialization with path generation error.\n- `test_check_and_fix_logging_success_real_behavior(self, service)` - Test successful logging check and fix.\n- `test_check_and_fix_logging_failure_real_behavior(self, service)` - Test logging check and fix failure.\n- `test_signal_handler_real_behavior(self, service)` - Test signal handler behavior.\n- `test_start_service_success_real_behavior(self, service, mock_config, mock_communication_manager, mock_scheduler_manager)` - Test successful service startup.\n- `test_start_service_configuration_failure_real_behavior(self, service)` - Test service startup with configuration failure.\n- `test_start_service_path_initialization_failure_real_behavior(self, service, mock_config)` - Test service startup with path initialization failure.\n- `test_start_service_communication_manager_failure_real_behavior(self, service, mock_config)` - Test service startup with communication manager failure.\n- `test_start_service_scheduler_manager_failure_real_behavior(self, service, mock_config, mock_communication_manager)` - Test service startup with scheduler manager failure.\n- `test_stop_service_real_behavior(self, service, mock_communication_manager, mock_scheduler_manager)` - Test service shutdown.\n- `test_stop_service_with_none_managers_real_behavior(self, service)` - Test service shutdown with None managers.\n- `test_stop_service_with_manager_stop_failure_real_behavior(self, service, mock_communication_manager, mock_scheduler_manager)` - Test service shutdown with manager stop failure.\n- `test_get_scheduler_manager_real_behavior(self)` - Test getting scheduler manager.\n- `test_main_function_real_behavior(self)` - Test main function behavior.\n- `test_main_function_with_service_failure_real_behavior(self)` - Test main function with service failure.\n- `test_service_atexit_handler_real_behavior(self, service)` - Test service atexit handler behavior.\n- `test_service_atexit_handler_with_none_managers_real_behavior(self, service)` - Test service atexit handler with None managers.\n- `test_service_atexit_handler_with_manager_stop_failure_real_behavior(self, service)` - Test service atexit handler with manager stop failure.\n- `test_service_initialization_error_real_behavior(self)` - Test InitializationError exception.\n- `test_service_startup_time_tracking_real_behavior(self, service)` - Test service startup time tracking.\n- `test_service_signal_handlers_real_behavior(self, service)` - Test service signal handlers setup.\n- `test_service_retry_mechanism_real_behavior(self, service, mock_config)` - Test service retry mechanism for startup failures.\n- `test_service_cleanup_test_message_requests_real_behavior(self, service)` - Test service cleanup test message requests.\n- `test_cleanup_test_message_requests_empty_directory_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test cleanup when no request files exist.\n- `test_cleanup_test_message_requests_large_number_of_files_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test cleanup with many request files.\n- `test_cleanup_test_message_requests_file_permission_error_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test cleanup when file removal fails due to permission errors.\n- `test_cleanup_test_message_requests_partial_failure_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test cleanup when some files succeed and others fail.\n- `test_cleanup_test_message_requests_directory_access_error_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test cleanup when directory listing fails.\n- `test_cleanup_test_message_requests_mixed_file_types_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test cleanup with mixed file types in directory.\n- `test_cleanup_test_message_requests_concurrent_access_simulation_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test cleanup when files disappear during processing.\n- `test_cleanup_test_message_requests_file_in_use_error_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test cleanup when files are in use by another process.\n- `test_cleanup_test_message_requests_remove_request_file_success_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test successful file removal by helper function.\n- `test_cleanup_test_message_requests_remove_request_file_permission_error_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test file removal with permission error by helper function.\n- `test_cleanup_test_message_requests_remove_request_file_not_found_error_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test file removal with file not found error by helper function.\n- `test_cleanup_test_message_requests_remove_request_file_generic_error_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test file removal with generic error by helper function.\n- `test_service_cleanup_reschedule_requests_real_behavior(self, service)` - Test service cleanup reschedule requests.\n- `test_check_and_fix_logging_basic_success(self, service)` - Test basic successful logging verification.\n- `test_check_and_fix_logging_file_missing(self, service)` - Test logging verification when log file doesn't exist.\n- `test_check_and_fix_logging_file_creation_failure(self, service)` - Test logging verification when log file creation fails.\n- `test_check_and_fix_logging_old_activity_restart(self, service)` - Test logging restart when activity is too old.\n- `test_check_and_fix_logging_recent_activity_detected(self, service)` - Test detection of recent logging activity.\n- `test_check_reschedule_requests_no_files(self, service)` - Test reschedule requests when no files exist.\n- `test_check_reschedule_requests_valid_file(self, service)` - Test reschedule requests with valid file.\n- `test_check_reschedule_requests_invalid_file(self, service)` - Test reschedule requests with invalid file data.\n- `test_check_reschedule_requests_old_file_processed(self, service)` - Test reschedule requests with old timestamp still processed.\n- `test_check_reschedule_requests_json_error(self, service)` - Test reschedule requests with JSON parsing error.\n- `test_check_test_message_requests_no_files(self, service)` - Test test message requests when no files exist.\n- `test_check_test_message_requests_valid_file(self, service)` - Test test message requests with valid file.\n- `test_check_test_message_requests_invalid_file(self, service)` - Test test message requests with invalid file data.\n- `test_check_test_message_requests_json_error(self, service)` - Test test message requests with JSON parsing error.\n- `test_check_test_message_requests_no_communication_manager(self, service)` - Test test message requests when communication manager is None.\n- `test_check_test_message_requests_communication_error(self, service)` - Test test message requests when communication manager raises error.\n- `test_check_and_fix_logging_check_recent_activity_timestamps_recent_activity(self, service)` - Test the most complex helper function - recent activity timestamp checking with recent activity.\n- `test_check_and_fix_logging_check_recent_activity_timestamps_old_activity(self, service)` - Test the most complex helper function - recent activity timestamp checking with old activity.\n- `test_check_and_fix_logging_check_recent_activity_timestamps_invalid_timestamp(self, service)` - Test the most complex helper function - recent activity timestamp checking with invalid timestamp.\n- `test_check_and_fix_logging_read_recent_log_content_large_file(self, service)` - Test reading recent log content from a large log file.\n- `test_check_and_fix_logging_read_recent_log_content_small_file(self, service)` - Test reading recent log content from a small log file.\n- `test_check_and_fix_logging_verify_test_message_present_found(self, service)` - Test verifying test message presence when message is found.\n- `test_check_and_fix_logging_verify_test_message_present_not_found(self, service)` - Test verifying test message presence when message is not found.\n- `test_check_reschedule_requests_handle_processing_error_successful_cleanup(self, service)` - Test error handling helper with successful file cleanup.\n- `test_check_reschedule_requests_handle_processing_error_cleanup_failure(self, service)` - Test error handling helper when file cleanup fails.\n- `test_check_test_message_requests_handle_processing_error_successful_cleanup(self, service)` - Test test message error handling helper with successful file cleanup.\n- `test_check_test_message_requests_handle_processing_error_cleanup_failure(self, service)` - Test test message error handling helper when file cleanup fails.\n- `test_check_reschedule_requests_validate_request_data_old_timestamp(self, service)` - Test request data validation with old timestamp.\n- `test_check_reschedule_requests_validate_request_data_missing_fields(self, service)` - Test request data validation with missing required fields.\n- `mock_remove_with_partial_failure(file_path)` - No description\n- `mock_remove_with_disappearing_files(file_path)` - No description\n**Classes:**\n- `TestCoreServiceCoverageExpansion` - Test class for expanding Core Service test coverage.\n  - `TestCoreServiceCoverageExpansion.service(self)` - Create a fresh MHMService instance for each test.\n  - `TestCoreServiceCoverageExpansion.mock_config(self)` - Mock configuration to avoid real config dependencies.\n  - `TestCoreServiceCoverageExpansion.mock_communication_manager(self)` - Mock communication manager.\n  - `TestCoreServiceCoverageExpansion.mock_scheduler_manager(self)` - Mock scheduler manager.\n  - `TestCoreServiceCoverageExpansion.test_service_initialization_real_behavior(self, service)` - Test service initialization with real behavior verification.\n  - `TestCoreServiceCoverageExpansion.test_validate_configuration_success_real_behavior(self, service, mock_config)` - Test successful configuration validation.\n  - `TestCoreServiceCoverageExpansion.test_validate_configuration_failure_real_behavior(self, service)` - Test configuration validation failure.\n  - `TestCoreServiceCoverageExpansion.test_initialize_paths_real_behavior(self, service)` - Test path initialization with real behavior verification.\n  - `TestCoreServiceCoverageExpansion.test_initialize_paths_with_none_user_id_real_behavior(self, service)` - Test path initialization with None user ID handling.\n  - `TestCoreServiceCoverageExpansion.test_initialize_paths_with_invalid_categories_real_behavior(self, service)` - Test path initialization with invalid categories data.\n  - `TestCoreServiceCoverageExpansion.test_initialize_paths_with_empty_categories_real_behavior(self, service)` - Test path initialization with empty categories list.\n  - `TestCoreServiceCoverageExpansion.test_initialize_paths_with_path_generation_error_real_behavior(self, service)` - Test path initialization with path generation error.\n  - `TestCoreServiceCoverageExpansion.test_check_and_fix_logging_success_real_behavior(self, service)` - Test successful logging check and fix.\n  - `TestCoreServiceCoverageExpansion.test_check_and_fix_logging_failure_real_behavior(self, service)` - Test logging check and fix failure.\n  - `TestCoreServiceCoverageExpansion.test_signal_handler_real_behavior(self, service)` - Test signal handler behavior.\n  - `TestCoreServiceCoverageExpansion.test_start_service_success_real_behavior(self, service, mock_config, mock_communication_manager, mock_scheduler_manager)` - Test successful service startup.\n  - `TestCoreServiceCoverageExpansion.test_start_service_configuration_failure_real_behavior(self, service)` - Test service startup with configuration failure.\n  - `TestCoreServiceCoverageExpansion.test_start_service_path_initialization_failure_real_behavior(self, service, mock_config)` - Test service startup with path initialization failure.\n  - `TestCoreServiceCoverageExpansion.test_start_service_communication_manager_failure_real_behavior(self, service, mock_config)` - Test service startup with communication manager failure.\n  - `TestCoreServiceCoverageExpansion.test_start_service_scheduler_manager_failure_real_behavior(self, service, mock_config, mock_communication_manager)` - Test service startup with scheduler manager failure.\n  - `TestCoreServiceCoverageExpansion.test_stop_service_real_behavior(self, service, mock_communication_manager, mock_scheduler_manager)` - Test service shutdown.\n  - `TestCoreServiceCoverageExpansion.test_stop_service_with_none_managers_real_behavior(self, service)` - Test service shutdown with None managers.\n  - `TestCoreServiceCoverageExpansion.test_stop_service_with_manager_stop_failure_real_behavior(self, service, mock_communication_manager, mock_scheduler_manager)` - Test service shutdown with manager stop failure.\n  - `TestCoreServiceCoverageExpansion.test_get_scheduler_manager_real_behavior(self)` - Test getting scheduler manager.\n  - `TestCoreServiceCoverageExpansion.test_main_function_real_behavior(self)` - Test main function behavior.\n  - `TestCoreServiceCoverageExpansion.test_main_function_with_service_failure_real_behavior(self)` - Test main function with service failure.\n  - `TestCoreServiceCoverageExpansion.test_service_atexit_handler_real_behavior(self, service)` - Test service atexit handler behavior.\n  - `TestCoreServiceCoverageExpansion.test_service_atexit_handler_with_none_managers_real_behavior(self, service)` - Test service atexit handler with None managers.\n  - `TestCoreServiceCoverageExpansion.test_service_atexit_handler_with_manager_stop_failure_real_behavior(self, service)` - Test service atexit handler with manager stop failure.\n  - `TestCoreServiceCoverageExpansion.test_service_initialization_error_real_behavior(self)` - Test InitializationError exception.\n  - `TestCoreServiceCoverageExpansion.test_service_startup_time_tracking_real_behavior(self, service)` - Test service startup time tracking.\n  - `TestCoreServiceCoverageExpansion.test_service_signal_handlers_real_behavior(self, service)` - Test service signal handlers setup.\n  - `TestCoreServiceCoverageExpansion.test_service_retry_mechanism_real_behavior(self, service, mock_config)` - Test service retry mechanism for startup failures.\n  - `TestCoreServiceCoverageExpansion.test_service_cleanup_test_message_requests_real_behavior(self, service)` - Test service cleanup test message requests.\n  - `TestCoreServiceCoverageExpansion.test_cleanup_test_message_requests_empty_directory_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test cleanup when no request files exist.\n  - `TestCoreServiceCoverageExpansion.test_cleanup_test_message_requests_large_number_of_files_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test cleanup with many request files.\n  - `TestCoreServiceCoverageExpansion.test_cleanup_test_message_requests_file_permission_error_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test cleanup when file removal fails due to permission errors.\n  - `TestCoreServiceCoverageExpansion.test_cleanup_test_message_requests_partial_failure_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test cleanup when some files succeed and others fail.\n  - `TestCoreServiceCoverageExpansion.test_cleanup_test_message_requests_directory_access_error_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test cleanup when directory listing fails.\n  - `TestCoreServiceCoverageExpansion.test_cleanup_test_message_requests_mixed_file_types_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test cleanup with mixed file types in directory.\n  - `TestCoreServiceCoverageExpansion.test_cleanup_test_message_requests_concurrent_access_simulation_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test cleanup when files disappear during processing.\n  - `TestCoreServiceCoverageExpansion.test_cleanup_test_message_requests_file_in_use_error_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test cleanup when files are in use by another process.\n  - `TestCoreServiceCoverageExpansion.test_cleanup_test_message_requests_remove_request_file_success_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test successful file removal by helper function.\n  - `TestCoreServiceCoverageExpansion.test_cleanup_test_message_requests_remove_request_file_permission_error_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test file removal with permission error by helper function.\n  - `TestCoreServiceCoverageExpansion.test_cleanup_test_message_requests_remove_request_file_not_found_error_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test file removal with file not found error by helper function.\n  - `TestCoreServiceCoverageExpansion.test_cleanup_test_message_requests_remove_request_file_generic_error_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test file removal with generic error by helper function.\n  - `TestCoreServiceCoverageExpansion.test_service_cleanup_reschedule_requests_real_behavior(self, service)` - Test service cleanup reschedule requests.\n  - `TestCoreServiceCoverageExpansion.test_check_and_fix_logging_basic_success(self, service)` - Test basic successful logging verification.\n  - `TestCoreServiceCoverageExpansion.test_check_and_fix_logging_file_missing(self, service)` - Test logging verification when log file doesn't exist.\n  - `TestCoreServiceCoverageExpansion.test_check_and_fix_logging_file_creation_failure(self, service)` - Test logging verification when log file creation fails.\n  - `TestCoreServiceCoverageExpansion.test_check_and_fix_logging_old_activity_restart(self, service)` - Test logging restart when activity is too old.\n  - `TestCoreServiceCoverageExpansion.test_check_and_fix_logging_recent_activity_detected(self, service)` - Test detection of recent logging activity.\n  - `TestCoreServiceCoverageExpansion.test_check_reschedule_requests_no_files(self, service)` - Test reschedule requests when no files exist.\n  - `TestCoreServiceCoverageExpansion.test_check_reschedule_requests_valid_file(self, service)` - Test reschedule requests with valid file.\n  - `TestCoreServiceCoverageExpansion.test_check_reschedule_requests_invalid_file(self, service)` - Test reschedule requests with invalid file data.\n  - `TestCoreServiceCoverageExpansion.test_check_reschedule_requests_old_file_processed(self, service)` - Test reschedule requests with old timestamp still processed.\n  - `TestCoreServiceCoverageExpansion.test_check_reschedule_requests_json_error(self, service)` - Test reschedule requests with JSON parsing error.\n  - `TestCoreServiceCoverageExpansion.test_check_test_message_requests_no_files(self, service)` - Test test message requests when no files exist.\n  - `TestCoreServiceCoverageExpansion.test_check_test_message_requests_valid_file(self, service)` - Test test message requests with valid file.\n  - `TestCoreServiceCoverageExpansion.test_check_test_message_requests_invalid_file(self, service)` - Test test message requests with invalid file data.\n  - `TestCoreServiceCoverageExpansion.test_check_test_message_requests_json_error(self, service)` - Test test message requests with JSON parsing error.\n  - `TestCoreServiceCoverageExpansion.test_check_test_message_requests_no_communication_manager(self, service)` - Test test message requests when communication manager is None.\n  - `TestCoreServiceCoverageExpansion.test_check_test_message_requests_communication_error(self, service)` - Test test message requests when communication manager raises error.\n  - `TestCoreServiceCoverageExpansion.test_check_and_fix_logging_check_recent_activity_timestamps_recent_activity(self, service)` - Test the most complex helper function - recent activity timestamp checking with recent activity.\n  - `TestCoreServiceCoverageExpansion.test_check_and_fix_logging_check_recent_activity_timestamps_old_activity(self, service)` - Test the most complex helper function - recent activity timestamp checking with old activity.\n  - `TestCoreServiceCoverageExpansion.test_check_and_fix_logging_check_recent_activity_timestamps_invalid_timestamp(self, service)` - Test the most complex helper function - recent activity timestamp checking with invalid timestamp.\n  - `TestCoreServiceCoverageExpansion.test_check_and_fix_logging_read_recent_log_content_large_file(self, service)` - Test reading recent log content from a large log file.\n  - `TestCoreServiceCoverageExpansion.test_check_and_fix_logging_read_recent_log_content_small_file(self, service)` - Test reading recent log content from a small log file.\n  - `TestCoreServiceCoverageExpansion.test_check_and_fix_logging_verify_test_message_present_found(self, service)` - Test verifying test message presence when message is found.\n  - `TestCoreServiceCoverageExpansion.test_check_and_fix_logging_verify_test_message_present_not_found(self, service)` - Test verifying test message presence when message is not found.\n  - `TestCoreServiceCoverageExpansion.test_check_reschedule_requests_handle_processing_error_successful_cleanup(self, service)` - Test error handling helper with successful file cleanup.\n  - `TestCoreServiceCoverageExpansion.test_check_reschedule_requests_handle_processing_error_cleanup_failure(self, service)` - Test error handling helper when file cleanup fails.\n  - `TestCoreServiceCoverageExpansion.test_check_test_message_requests_handle_processing_error_successful_cleanup(self, service)` - Test test message error handling helper with successful file cleanup.\n  - `TestCoreServiceCoverageExpansion.test_check_test_message_requests_handle_processing_error_cleanup_failure(self, service)` - Test test message error handling helper when file cleanup fails.\n  - `TestCoreServiceCoverageExpansion.test_check_reschedule_requests_validate_request_data_old_timestamp(self, service)` - Test request data validation with old timestamp.\n  - `TestCoreServiceCoverageExpansion.test_check_reschedule_requests_validate_request_data_missing_fields(self, service)` - Test request data validation with missing required fields.\n\n### tests/behavior/test_discord_bot_behavior.py\n**Functions:**\n- `discord_bot(self, test_data_dir)` - Create a Discord bot instance for testing\n- `mock_discord_bot(self)` - Create a mock Discord bot instance\n- `test_discord_bot_initialization_creates_proper_structure(self, test_data_dir)` - Test that Discord bot initialization creates proper internal structure\n- `test_discord_bot_channel_type_is_async(self, test_data_dir)` - Test that Discord bot channel type is correctly set to ASYNC\n- `test_dns_resolution_check_actually_tests_connectivity(self, test_data_dir)` - Test that DNS resolution check actually tests network connectivity\n- `test_dns_resolution_fallback_uses_alternative_servers(self, test_data_dir)` - Test that DNS resolution fallback actually tries alternative DNS servers\n- `test_network_connectivity_check_tests_multiple_endpoints(self, test_data_dir)` - Test that network connectivity check actually tests multiple Discord endpoints\n- `test_network_connectivity_fallback_tries_alternative_endpoints(self, test_data_dir)` - Test that network connectivity fallback actually tries alternative endpoints\n- `test_connection_status_update_actually_changes_state(self, test_data_dir)` - Test that connection status update actually changes internal state\n- `test_detailed_connection_status_returns_actual_state(self, test_data_dir)` - Test that detailed connection status returns actual system state\n- `test_discord_bot_initialization_with_valid_token(self, test_data_dir, mock_discord_bot)` - Test that Discord bot initialization actually creates bot instance with valid token\n- `test_discord_bot_initialization_without_token(self, test_data_dir)` - Test that Discord bot initialization fails gracefully without token\n- `test_discord_bot_initialization_with_dns_failure(self, test_data_dir)` - Test that Discord bot initialization handles DNS failures gracefully\n- `test_discord_bot_shutdown_actually_cleans_up(self, test_data_dir, mock_discord_bot)` - Test that Discord bot shutdown actually cleans up resources\n- `test_discord_bot_send_message_actually_sends(self, test_data_dir, mock_discord_bot)` - Test that Discord bot send_message actually sends messages\n- `test_discord_bot_send_message_handles_errors(self, test_data_dir, mock_discord_bot)` - Test that Discord bot send_message handles errors gracefully\n- `test_discord_bot_receive_messages_returns_actual_data(self, test_data_dir, mock_discord_bot)` - Test that Discord bot receive_messages returns actual message data\n- `test_discord_bot_health_check_verifies_actual_status(self, test_data_dir, mock_discord_bot)` - Test that Discord bot health check actually verifies system status\n- `test_discord_bot_health_status_returns_actual_metrics(self, test_data_dir, mock_discord_bot)` - Test that Discord bot health status returns actual system metrics\n- `test_discord_bot_connection_status_summary_returns_readable_string(self, test_data_dir)` - Test that Discord bot connection status summary returns readable string\n- `test_discord_bot_is_actually_connected_checks_real_state(self, test_data_dir, mock_discord_bot)` - Test that Discord bot is_actually_connected checks real connection state\n- `test_discord_bot_manual_reconnect_actually_reconnects(self, test_data_dir, mock_discord_bot)` - Test that Discord bot manual reconnect actually attempts reconnection\n- `test_discord_bot_initialize_creates_thread(self, test_data_dir)` - Test that Discord bot initialize actually creates a thread\n- `test_interaction_manager_single_response(self, test_data_dir)` - Ensure a single inbound message yields one main response (no duplicates).\n- `test_discord_checkin_flow_end_to_end(self, test_data_dir)` - Simulate a Discord user going through a check-in flow via /checkin and responding to prompts.\n- `test_discord_task_create_update_complete(self, test_data_dir)` - Create a task, update it, then complete it through InteractionManager natural language.\n- `test_discord_complete_task_by_name_variation(self, test_data_dir)` - Complete a task by a fuzzy name match like 'complete per davey' -> 'Pet Davey'.\n- `test_discord_response_after_task_reminder(self, test_data_dir)` - Simulate a user replying to a reminder by completing the first task.\n- `test_discord_bot_shutdown_actually_stops_thread(self, test_data_dir)` - Test that Discord bot shutdown actually stops the thread\n- `test_discord_bot_is_initialized_checks_actual_state(self, test_data_dir, mock_discord_bot)` - Test that Discord bot is_initialized checks actual initialization state\n- `test_discord_bot_send_dm_actually_sends_direct_message(self, test_data_dir, mock_discord_bot)` - Test that Discord bot send_dm actually sends direct messages\n- `test_user_setup(self, test_data_dir)` - Set up test user data for integration tests\n- `mock_discord_bot(self)` - Create a mock Discord bot instance for integration tests\n- `test_discord_bot_integration_with_conversation_manager(self, test_data_dir, test_user_setup)` - Test that Discord bot integrates properly with conversation manager\n- `test_discord_message_to_interaction_manager_complete_task_prompt(self, test_data_dir)` - End-to-end-ish: ensure plain 'complete task' routes to InteractionManager and returns a helpful prompt, not a generic error.\n- `test_discord_bot_integration_with_user_management(self, test_data_dir, test_user_setup)` - Test that Discord bot integrates properly with user management\n- `test_discord_bot_error_handling_preserves_system_stability(self, test_data_dir)` - Test that Discord bot error handling preserves system stability\n- `test_discord_bot_performance_under_load(self, test_data_dir)` - Test that Discord bot performs well under load\n- `test_discord_bot_cleanup_and_resource_management(self, test_data_dir, mock_discord_bot)` - Test that Discord bot properly manages resources and cleanup\n- `test_discord_bot_with_real_user_data(self, test_data_dir, test_user_setup)` - Test Discord bot with real user data\n- `test_discord_bot_error_recovery_with_real_files(self, test_data_dir)` - Test Discord bot error recovery with real files\n- `test_discord_bot_concurrent_access_safety(self, test_data_dir)` - Test that Discord bot handles concurrent access safely\n**Classes:**\n- `TestDiscordBotBehavior` - Test Discord bot real behavior and side effects\n  - `TestDiscordBotBehavior.discord_bot(self, test_data_dir)` - Create a Discord bot instance for testing\n  - `TestDiscordBotBehavior.mock_discord_bot(self)` - Create a mock Discord bot instance\n  - `TestDiscordBotBehavior.test_discord_bot_initialization_creates_proper_structure(self, test_data_dir)` - Test that Discord bot initialization creates proper internal structure\n  - `TestDiscordBotBehavior.test_discord_bot_channel_type_is_async(self, test_data_dir)` - Test that Discord bot channel type is correctly set to ASYNC\n  - `TestDiscordBotBehavior.test_dns_resolution_check_actually_tests_connectivity(self, test_data_dir)` - Test that DNS resolution check actually tests network connectivity\n  - `TestDiscordBotBehavior.test_dns_resolution_fallback_uses_alternative_servers(self, test_data_dir)` - Test that DNS resolution fallback actually tries alternative DNS servers\n  - `TestDiscordBotBehavior.test_network_connectivity_check_tests_multiple_endpoints(self, test_data_dir)` - Test that network connectivity check actually tests multiple Discord endpoints\n  - `TestDiscordBotBehavior.test_network_connectivity_fallback_tries_alternative_endpoints(self, test_data_dir)` - Test that network connectivity fallback actually tries alternative endpoints\n  - `TestDiscordBotBehavior.test_connection_status_update_actually_changes_state(self, test_data_dir)` - Test that connection status update actually changes internal state\n  - `TestDiscordBotBehavior.test_detailed_connection_status_returns_actual_state(self, test_data_dir)` - Test that detailed connection status returns actual system state\n  - `TestDiscordBotBehavior.test_discord_bot_initialization_with_valid_token(self, test_data_dir, mock_discord_bot)` - Test that Discord bot initialization actually creates bot instance with valid token\n  - `TestDiscordBotBehavior.test_discord_bot_initialization_without_token(self, test_data_dir)` - Test that Discord bot initialization fails gracefully without token\n  - `TestDiscordBotBehavior.test_discord_bot_initialization_with_dns_failure(self, test_data_dir)` - Test that Discord bot initialization handles DNS failures gracefully\n  - `TestDiscordBotBehavior.test_discord_bot_shutdown_actually_cleans_up(self, test_data_dir, mock_discord_bot)` - Test that Discord bot shutdown actually cleans up resources\n  - `TestDiscordBotBehavior.test_discord_bot_send_message_actually_sends(self, test_data_dir, mock_discord_bot)` - Test that Discord bot send_message actually sends messages\n  - `TestDiscordBotBehavior.test_discord_bot_send_message_handles_errors(self, test_data_dir, mock_discord_bot)` - Test that Discord bot send_message handles errors gracefully\n  - `TestDiscordBotBehavior.test_discord_bot_receive_messages_returns_actual_data(self, test_data_dir, mock_discord_bot)` - Test that Discord bot receive_messages returns actual message data\n  - `TestDiscordBotBehavior.test_discord_bot_health_check_verifies_actual_status(self, test_data_dir, mock_discord_bot)` - Test that Discord bot health check actually verifies system status\n  - `TestDiscordBotBehavior.test_discord_bot_health_status_returns_actual_metrics(self, test_data_dir, mock_discord_bot)` - Test that Discord bot health status returns actual system metrics\n  - `TestDiscordBotBehavior.test_discord_bot_connection_status_summary_returns_readable_string(self, test_data_dir)` - Test that Discord bot connection status summary returns readable string\n  - `TestDiscordBotBehavior.test_discord_bot_is_actually_connected_checks_real_state(self, test_data_dir, mock_discord_bot)` - Test that Discord bot is_actually_connected checks real connection state\n  - `TestDiscordBotBehavior.test_discord_bot_manual_reconnect_actually_reconnects(self, test_data_dir, mock_discord_bot)` - Test that Discord bot manual reconnect actually attempts reconnection\n  - `TestDiscordBotBehavior.test_discord_bot_initialize_creates_thread(self, test_data_dir)` - Test that Discord bot initialize actually creates a thread\n  - `TestDiscordBotBehavior.test_interaction_manager_single_response(self, test_data_dir)` - Ensure a single inbound message yields one main response (no duplicates).\n  - `TestDiscordBotBehavior.test_discord_checkin_flow_end_to_end(self, test_data_dir)` - Simulate a Discord user going through a check-in flow via /checkin and responding to prompts.\n  - `TestDiscordBotBehavior.test_discord_task_create_update_complete(self, test_data_dir)` - Create a task, update it, then complete it through InteractionManager natural language.\n  - `TestDiscordBotBehavior.test_discord_complete_task_by_name_variation(self, test_data_dir)` - Complete a task by a fuzzy name match like 'complete per davey' -> 'Pet Davey'.\n  - `TestDiscordBotBehavior.test_discord_response_after_task_reminder(self, test_data_dir)` - Simulate a user replying to a reminder by completing the first task.\n  - `TestDiscordBotBehavior.test_discord_bot_shutdown_actually_stops_thread(self, test_data_dir)` - Test that Discord bot shutdown actually stops the thread\n  - `TestDiscordBotBehavior.test_discord_bot_is_initialized_checks_actual_state(self, test_data_dir, mock_discord_bot)` - Test that Discord bot is_initialized checks actual initialization state\n  - `TestDiscordBotBehavior.test_discord_bot_send_dm_actually_sends_direct_message(self, test_data_dir, mock_discord_bot)` - Test that Discord bot send_dm actually sends direct messages\n- `TestDiscordBotIntegration` - Test Discord bot integration with other system components\n  - `TestDiscordBotIntegration.test_user_setup(self, test_data_dir)` - Set up test user data for integration tests\n  - `TestDiscordBotIntegration.mock_discord_bot(self)` - Create a mock Discord bot instance for integration tests\n  - `TestDiscordBotIntegration.test_discord_bot_integration_with_conversation_manager(self, test_data_dir, test_user_setup)` - Test that Discord bot integrates properly with conversation manager\n  - `TestDiscordBotIntegration.test_discord_message_to_interaction_manager_complete_task_prompt(self, test_data_dir)` - End-to-end-ish: ensure plain 'complete task' routes to InteractionManager and returns a helpful prompt, not a generic error.\n  - `TestDiscordBotIntegration.test_discord_bot_integration_with_user_management(self, test_data_dir, test_user_setup)` - Test that Discord bot integrates properly with user management\n  - `TestDiscordBotIntegration.test_discord_bot_error_handling_preserves_system_stability(self, test_data_dir)` - Test that Discord bot error handling preserves system stability\n  - `TestDiscordBotIntegration.test_discord_bot_performance_under_load(self, test_data_dir)` - Test that Discord bot performs well under load\n  - `TestDiscordBotIntegration.test_discord_bot_cleanup_and_resource_management(self, test_data_dir, mock_discord_bot)` - Test that Discord bot properly manages resources and cleanup\n  - `TestDiscordBotIntegration.test_discord_bot_with_real_user_data(self, test_data_dir, test_user_setup)` - Test Discord bot with real user data\n  - `TestDiscordBotIntegration.test_discord_bot_error_recovery_with_real_files(self, test_data_dir)` - Test Discord bot error recovery with real files\n  - `TestDiscordBotIntegration.test_discord_bot_concurrent_access_safety(self, test_data_dir)` - Test that Discord bot handles concurrent access safely\n- `FakeAuthor` - No description\n- `FakeMessage` - No description\n\n### tests/behavior/test_dynamic_checkin_behavior.py\n**Functions:**\n- `test_dynamic_checkin_manager_initialization(self)` - Test that the dynamic check-in manager initializes correctly.\n- `test_question_definitions(self)` - Test that question definitions are loaded correctly.\n- `test_response_statements(self)` - Test that response statements are loaded and varied.\n- `test_validation(self)` - Test that validation works correctly for different question types.\n- `test_build_next_question_with_response(self)` - Test building questions with response statements.\n- `test_ui_questions_format(self)` - Test that questions are formatted correctly for UI.\n- `test_conversation_manager_uses_dynamic_questions(self)` - Test that the conversation manager uses the dynamic question system.\n- `test_question_text_uses_dynamic_manager(self)` - Test that question text is retrieved from the dynamic manager.\n- `test_validation_uses_dynamic_manager(self)` - Test that validation uses the dynamic manager.\n- `test_response_variety(self)` - Test that we get varied responses for the same answer.\n- `test_transition_phrase_variety(self)` - Test that transition phrases provide variety.\n- `test_complete_question_flow_variety(self)` - Test that complete question flows provide variety.\n**Classes:**\n- `TestDynamicCheckinManager` - Test the dynamic check-in manager functionality.\n  - `TestDynamicCheckinManager.test_dynamic_checkin_manager_initialization(self)` - Test that the dynamic check-in manager initializes correctly.\n  - `TestDynamicCheckinManager.test_question_definitions(self)` - Test that question definitions are loaded correctly.\n  - `TestDynamicCheckinManager.test_response_statements(self)` - Test that response statements are loaded and varied.\n  - `TestDynamicCheckinManager.test_validation(self)` - Test that validation works correctly for different question types.\n  - `TestDynamicCheckinManager.test_build_next_question_with_response(self)` - Test building questions with response statements.\n  - `TestDynamicCheckinManager.test_ui_questions_format(self)` - Test that questions are formatted correctly for UI.\n- `TestDynamicCheckinIntegration` - Test integration with the conversation flow manager.\n  - `TestDynamicCheckinIntegration.test_conversation_manager_uses_dynamic_questions(self)` - Test that the conversation manager uses the dynamic question system.\n  - `TestDynamicCheckinIntegration.test_question_text_uses_dynamic_manager(self)` - Test that question text is retrieved from the dynamic manager.\n  - `TestDynamicCheckinIntegration.test_validation_uses_dynamic_manager(self)` - Test that validation uses the dynamic manager.\n- `TestDynamicCheckinVariety` - Test that the system provides variety in responses.\n  - `TestDynamicCheckinVariety.test_response_variety(self)` - Test that we get varied responses for the same answer.\n  - `TestDynamicCheckinVariety.test_transition_phrase_variety(self)` - Test that transition phrases provide variety.\n  - `TestDynamicCheckinVariety.test_complete_question_flow_variety(self)` - Test that complete question flows provide variety.\n\n### tests/behavior/test_email_bot_behavior.py\n**Functions:**\n- `setup_method(self)` - Set up test environment.\n- `test_email_bot_initialization_creates_proper_structure(self, test_data_dir)` - Test that EmailBot initialization creates proper internal structure.\n- `test_email_bot_initialization_with_custom_config(self, test_data_dir)` - Test that EmailBot initialization with custom config works properly.\n- `test_email_bot_legacy_start_method_behavior(self, test_data_dir)` - Test legacy start method behavior.\n- `test_email_bot_legacy_start_method_failure_behavior(self, test_data_dir)` - Test legacy start method failure behavior.\n- `test_email_bot_async_shutdown_method_behavior(self, test_data_dir)` - Test async shutdown method behavior.\n- `test_email_bot_status_checking_behavior(self, test_data_dir)` - Test email bot status checking behavior.\n- `test_email_bot_error_handling_preserves_system_stability(self, test_data_dir)` - Test that email bot error handling preserves system stability.\n- `test_email_bot_performance_under_load(self, test_data_dir)` - Test that email bot performs well under load.\n- `test_email_bot_data_integrity(self, test_data_dir)` - Test that email bot maintains data integrity.\n- `setup_method(self)` - Set up test environment.\n- `send_email(recipient, message)` - No description\n**Classes:**\n- `TestEmailBotBehavior` - Test real behavior of Email Bot.\n  - `TestEmailBotBehavior.setup_method(self)` - Set up test environment.\n  - `TestEmailBotBehavior.test_email_bot_initialization_creates_proper_structure(self, test_data_dir)` - Test that EmailBot initialization creates proper internal structure.\n  - `TestEmailBotBehavior.test_email_bot_initialization_with_custom_config(self, test_data_dir)` - Test that EmailBot initialization with custom config works properly.\n  - `TestEmailBotBehavior.test_email_bot_legacy_start_method_behavior(self, test_data_dir)` - Test legacy start method behavior.\n  - `TestEmailBotBehavior.test_email_bot_legacy_start_method_failure_behavior(self, test_data_dir)` - Test legacy start method failure behavior.\n  - `TestEmailBotBehavior.test_email_bot_async_shutdown_method_behavior(self, test_data_dir)` - Test async shutdown method behavior.\n  - `TestEmailBotBehavior.test_email_bot_status_checking_behavior(self, test_data_dir)` - Test email bot status checking behavior.\n  - `TestEmailBotBehavior.test_email_bot_error_handling_preserves_system_stability(self, test_data_dir)` - Test that email bot error handling preserves system stability.\n  - `TestEmailBotBehavior.test_email_bot_performance_under_load(self, test_data_dir)` - Test that email bot performs well under load.\n  - `TestEmailBotBehavior.test_email_bot_data_integrity(self, test_data_dir)` - Test that email bot maintains data integrity.\n- `TestEmailBotIntegration` - Test integration behavior of Email Bot.\n  - `TestEmailBotIntegration.setup_method(self)` - Set up test environment.\n\n### tests/behavior/test_enhanced_command_parser_behavior.py\n**Functions:**\n- `setup_method(self)` - Set up test environment.\n- `test_enhanced_command_parser_initialization_behavior(self, test_data_dir)` - Test that parser initializes with all required components.\n- `test_enhanced_command_parser_empty_message_behavior(self, test_data_dir)` - Test parser behavior with empty messages.\n- `test_enhanced_command_parser_task_creation_patterns_behavior(self, test_data_dir)` - Test real behavior of task creation pattern matching.\n- `test_enhanced_command_parser_task_listing_patterns_behavior(self, test_data_dir)` - Test real behavior of task listing pattern matching.\n- `test_enhanced_command_parser_task_completion_patterns_behavior(self, test_data_dir)` - Test real behavior of task completion pattern matching.\n- `test_enhanced_command_parser_checkin_patterns_behavior(self, test_data_dir)` - Test real behavior of checkin pattern matching.\n- `test_enhanced_command_parser_help_patterns_behavior(self, test_data_dir)` - Test real behavior of help pattern matching.\n- `test_enhanced_command_parser_entity_extraction_behavior(self, test_data_dir)` - Test real behavior of entity extraction.\n- `test_enhanced_command_parser_confidence_calculation_behavior(self, test_data_dir)` - Test real behavior of confidence calculation.\n- `test_enhanced_command_parser_case_insensitivity_behavior(self, test_data_dir)` - Test real behavior of case insensitive matching.\n- `test_enhanced_command_parser_unknown_patterns_behavior(self, test_data_dir)` - Test real behavior with unknown patterns.\n- `test_enhanced_command_parser_ai_enhanced_parsing_behavior(self, test_data_dir)` - Test real behavior of AI-enhanced parsing.\n- `test_enhanced_command_parser_fallback_behavior(self, test_data_dir)` - Test real behavior of fallback parsing.\n- `test_enhanced_command_parser_error_handling_behavior(self, test_data_dir)` - Test real behavior of error handling.\n- `test_enhanced_command_parser_performance_behavior(self, test_data_dir)` - Test real behavior of parsing performance.\n- `test_enhanced_command_parser_pattern_compilation_behavior(self, test_data_dir)` - Test real behavior of pattern compilation.\n- `setup_method(self)` - Set up test environment.\n- `test_enhanced_command_parser_with_real_handlers_behavior(self, test_data_dir)` - Test parser behavior with real interaction handlers.\n- `test_enhanced_command_parser_with_real_ai_chatbot_behavior(self, test_data_dir)` - Test parser behavior with real AI chatbot.\n- `test_enhanced_command_parser_end_to_end_behavior(self, test_data_dir)` - Test end-to-end behavior of command parsing workflow.\n- `test_enhanced_command_parser_consistency_behavior(self, test_data_dir)` - Test consistency of parsing behavior across multiple calls.\n- `test_enhanced_command_parser_memory_behavior(self, test_data_dir)` - Test memory usage behavior of parser.\n- `test_enhanced_command_parser_thread_safety_behavior(self, test_data_dir)` - Test thread safety behavior of parser.\n- `parse_command(command)` - No description\n**Classes:**\n- `TestEnhancedCommandParserBehavior` - Test real behavior of Enhanced Command Parser.\n  - `TestEnhancedCommandParserBehavior.setup_method(self)` - Set up test environment.\n  - `TestEnhancedCommandParserBehavior.test_enhanced_command_parser_initialization_behavior(self, test_data_dir)` - Test that parser initializes with all required components.\n  - `TestEnhancedCommandParserBehavior.test_enhanced_command_parser_empty_message_behavior(self, test_data_dir)` - Test parser behavior with empty messages.\n  - `TestEnhancedCommandParserBehavior.test_enhanced_command_parser_task_creation_patterns_behavior(self, test_data_dir)` - Test real behavior of task creation pattern matching.\n  - `TestEnhancedCommandParserBehavior.test_enhanced_command_parser_task_listing_patterns_behavior(self, test_data_dir)` - Test real behavior of task listing pattern matching.\n  - `TestEnhancedCommandParserBehavior.test_enhanced_command_parser_task_completion_patterns_behavior(self, test_data_dir)` - Test real behavior of task completion pattern matching.\n  - `TestEnhancedCommandParserBehavior.test_enhanced_command_parser_checkin_patterns_behavior(self, test_data_dir)` - Test real behavior of checkin pattern matching.\n  - `TestEnhancedCommandParserBehavior.test_enhanced_command_parser_help_patterns_behavior(self, test_data_dir)` - Test real behavior of help pattern matching.\n  - `TestEnhancedCommandParserBehavior.test_enhanced_command_parser_entity_extraction_behavior(self, test_data_dir)` - Test real behavior of entity extraction.\n  - `TestEnhancedCommandParserBehavior.test_enhanced_command_parser_confidence_calculation_behavior(self, test_data_dir)` - Test real behavior of confidence calculation.\n  - `TestEnhancedCommandParserBehavior.test_enhanced_command_parser_case_insensitivity_behavior(self, test_data_dir)` - Test real behavior of case insensitive matching.\n  - `TestEnhancedCommandParserBehavior.test_enhanced_command_parser_unknown_patterns_behavior(self, test_data_dir)` - Test real behavior with unknown patterns.\n  - `TestEnhancedCommandParserBehavior.test_enhanced_command_parser_ai_enhanced_parsing_behavior(self, test_data_dir)` - Test real behavior of AI-enhanced parsing.\n  - `TestEnhancedCommandParserBehavior.test_enhanced_command_parser_fallback_behavior(self, test_data_dir)` - Test real behavior of fallback parsing.\n  - `TestEnhancedCommandParserBehavior.test_enhanced_command_parser_error_handling_behavior(self, test_data_dir)` - Test real behavior of error handling.\n  - `TestEnhancedCommandParserBehavior.test_enhanced_command_parser_performance_behavior(self, test_data_dir)` - Test real behavior of parsing performance.\n  - `TestEnhancedCommandParserBehavior.test_enhanced_command_parser_pattern_compilation_behavior(self, test_data_dir)` - Test real behavior of pattern compilation.\n- `TestEnhancedCommandParserIntegration` - Test integration behavior of Enhanced Command Parser.\n  - `TestEnhancedCommandParserIntegration.setup_method(self)` - Set up test environment.\n  - `TestEnhancedCommandParserIntegration.test_enhanced_command_parser_with_real_handlers_behavior(self, test_data_dir)` - Test parser behavior with real interaction handlers.\n  - `TestEnhancedCommandParserIntegration.test_enhanced_command_parser_with_real_ai_chatbot_behavior(self, test_data_dir)` - Test parser behavior with real AI chatbot.\n  - `TestEnhancedCommandParserIntegration.test_enhanced_command_parser_end_to_end_behavior(self, test_data_dir)` - Test end-to-end behavior of command parsing workflow.\n  - `TestEnhancedCommandParserIntegration.test_enhanced_command_parser_consistency_behavior(self, test_data_dir)` - Test consistency of parsing behavior across multiple calls.\n  - `TestEnhancedCommandParserIntegration.test_enhanced_command_parser_memory_behavior(self, test_data_dir)` - Test memory usage behavior of parser.\n  - `TestEnhancedCommandParserIntegration.test_enhanced_command_parser_thread_safety_behavior(self, test_data_dir)` - Test thread safety behavior of parser.\n\n### tests/behavior/test_error_handling_coverage_expansion_phase3_final.py\n**Functions:**\n- `test_mhm_error_initialization(self, tmp_path)` - Test MHMError initialization\n- `test_data_error_initialization(self, tmp_path)` - Test DataError initialization\n- `test_file_operation_error_initialization(self, tmp_path)` - Test FileOperationError initialization\n- `test_configuration_error_initialization(self, tmp_path)` - Test ConfigurationError initialization\n- `test_error_recovery_strategy_base_class(self, tmp_path)` - Test ErrorRecoveryStrategy base class\n- `test_file_not_found_recovery_strategy(self, tmp_path)` - Test FileNotFoundRecovery strategy\n- `test_json_decode_recovery_strategy(self, tmp_path)` - Test JSONDecodeRecovery strategy\n- `test_error_handler_initialization(self, tmp_path)` - Test ErrorHandler initialization\n- `test_error_handler_with_recovery_strategy(self, tmp_path)` - Test error handler with recovery strategy\n- `test_error_handler_with_multiple_strategies(self, tmp_path)` - Test error handler with multiple recovery strategies\n- `test_error_handler_with_context(self, tmp_path)` - Test error handler with additional context\n- `test_error_handler_with_complex_context(self, tmp_path)` - Test error handler with complex context\n- `test_handle_errors_decorator_success(self, tmp_path)` - Test handle_errors decorator with successful function\n- `test_handle_errors_decorator_exception(self, tmp_path)` - Test handle_errors decorator with exception\n- `test_handle_errors_decorator_custom_return(self, tmp_path)` - Test handle_errors decorator with custom return value\n- `test_handle_errors_decorator_specific_exception(self, tmp_path)` - Test handle_errors decorator with specific exception handling\n- `test_handle_errors_decorator_with_context(self, tmp_path)` - Test handle_errors decorator with context\n- `test_handle_errors_decorator_nested_exceptions(self, tmp_path)` - Test handle_errors decorator with nested exceptions\n- `test_handle_errors_decorator_with_args_kwargs(self, tmp_path)` - Test handle_errors decorator with function arguments\n- `test_handle_errors_decorator_with_exception_in_args(self, tmp_path)` - Test handle_errors decorator with exception in function arguments\n- `test_handle_errors_decorator_user_friendly_false(self, tmp_path)` - Test handle_errors decorator with user_friendly=False\n- `test_handle_errors_decorator_operation_name(self, tmp_path)` - Test handle_errors decorator with custom operation name\n- `test_handle_errors_decorator_recovery_success(self, tmp_path)` - Test handle_errors decorator with successful recovery\n- `test_handle_errors_decorator_recovery_failure(self, tmp_path)` - Test handle_errors decorator with failed recovery\n- `test_handle_errors_decorator_double_failure(self, tmp_path)` - Test handle_errors decorator with double failure after recovery\n- `test_handle_errors_decorator_with_complex_context(self, tmp_path)` - Test handle_errors decorator with complex context\n- `test_handle_errors_decorator_with_operation_and_context(self, tmp_path)` - Test handle_errors decorator with both operation and context\n- `test_handle_errors_decorator_with_all_parameters(self, tmp_path)` - Test handle_errors decorator with all parameters\n- `test_error_handler_global_instance(self, tmp_path)` - Test the global error_handler instance\n- `test_error_handler_global_instance_functionality(self, tmp_path)` - Test the global error_handler instance functionality\n- `test_error_handler_retry_limits(self, tmp_path)` - Test error handler retry limits\n- `test_error_handler_with_unrecoverable_error(self, tmp_path)` - Test error handler with unrecoverable error\n- `test_error_handler_with_no_context(self, tmp_path)` - Test error handler with no context\n- `test_error_handler_with_empty_context(self, tmp_path)` - Test error handler with empty context\n- `test_error_handler_with_user_friendly_false(self, tmp_path)` - Test error handler with user_friendly=False\n- `test_error_handler_with_user_friendly_true(self, tmp_path)` - Test error handler with user_friendly=True\n- `test_error_handler_with_default_operation(self, tmp_path)` - Test error handler with default operation name\n- `test_error_handler_with_custom_operation(self, tmp_path)` - Test error handler with custom operation name\n- `test_error_handler_with_long_operation_name(self, tmp_path)` - Test error handler with long operation name\n- `test_error_handler_with_special_characters_in_context(self, tmp_path)` - Test error handler with special characters in context\n- `test_error_handler_with_none_error(self, tmp_path)` - Test error handler with None error\n- `test_error_handler_with_none_context_and_error(self, tmp_path)` - Test error handler with None context and error\n- `test_file_not_found_recovery_strategy_without_file_path(self, tmp_path)` - Test FileNotFoundRecovery strategy without file_path in context\n- `test_file_not_found_recovery_strategy_with_invalid_file_path(self, tmp_path)` - Test FileNotFoundRecovery strategy with invalid file_path in context\n- `test_file_not_found_recovery_strategy_with_empty_file_path(self, tmp_path)` - Test FileNotFoundRecovery strategy with empty file_path in context\n- `test_json_decode_recovery_strategy_recover(self, tmp_path)` - Test JSONDecodeRecovery strategy recover method\n- `test_error_handler_with_file_operation_error(self, tmp_path)` - Test error handler with FileOperationError\n- `test_error_handler_with_data_error(self, tmp_path)` - Test error handler with DataError\n- `test_error_handler_with_configuration_error(self, tmp_path)` - Test error handler with ConfigurationError\n- `test_error_handler_with_mhm_error(self, tmp_path)` - Test error handler with MHMError\n- `test_error_handler_with_generic_exception(self, tmp_path)` - Test error handler with generic Exception\n- `test_error_handler_with_runtime_error(self, tmp_path)` - Test error handler with RuntimeError\n- `test_error_handler_with_type_error(self, tmp_path)` - Test error handler with TypeError\n- `test_error_handler_with_attribute_error(self, tmp_path)` - Test error handler with AttributeError\n- `test_error_handler_with_key_error(self, tmp_path)` - Test error handler with KeyError\n- `test_error_handler_with_index_error(self, tmp_path)` - Test error handler with IndexError\n- `test_error_handler_with_os_error(self, tmp_path)` - Test error handler with OSError\n- `test_error_handler_with_io_error(self, tmp_path)` - Test error handler with IOError\n- `test_error_handler_with_permission_error(self, tmp_path)` - Test error handler with PermissionError\n- `test_error_handler_with_timeout_error(self, tmp_path)` - Test error handler with TimeoutError\n- `test_error_handler_with_connection_error(self, tmp_path)` - Test error handler with ConnectionError\n- `test_error_handler_with_import_error(self, tmp_path)` - Test error handler with ImportError\n- `test_error_handler_with_module_not_found_error(self, tmp_path)` - Test error handler with ModuleNotFoundError\n- `test_error_handler_with_unicode_error(self, tmp_path)` - Test error handler with UnicodeError\n- `test_error_handler_with_unicode_decode_error(self, tmp_path)` - Test error handler with UnicodeDecodeError\n- `test_error_handler_with_unicode_encode_error(self, tmp_path)` - Test error handler with UnicodeEncodeError\n- `test_error_handler_with_unicode_translate_error(self, tmp_path)` - Test error handler with UnicodeTranslateError\n- `test_error_handler_with_warning(self, tmp_path)` - Test error handler with Warning\n- `test_error_handler_with_user_warning(self, tmp_path)` - Test error handler with UserWarning\n- `test_error_handler_with_deprecation_warning(self, tmp_path)` - Test error handler with DeprecationWarning\n- `test_error_handler_with_future_warning(self, tmp_path)` - Test error handler with FutureWarning\n- `test_error_handler_with_pending_deprecation_warning(self, tmp_path)` - Test error handler with PendingDeprecationWarning\n- `test_error_handler_with_runtime_warning(self, tmp_path)` - Test error handler with RuntimeWarning\n- `test_error_handler_with_syntax_warning(self, tmp_path)` - Test error handler with SyntaxWarning\n- `test_error_handler_with_import_warning(self, tmp_path)` - Test error handler with ImportWarning\n- `test_error_handler_with_unicode_warning(self, tmp_path)` - Test error handler with UnicodeWarning\n- `test_error_handler_with_bytes_warning(self, tmp_path)` - Test error handler with BytesWarning\n- `test_error_handler_with_resource_warning(self, tmp_path)` - Test error handler with ResourceWarning\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `outer_function()` - No description\n- `test_function(arg1, arg2, kwarg1, kwarg2)` - No description\n- `test_function(arg1, arg2)` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `inner_function()` - No description\n**Classes:**\n- `TestErrorHandlingCoverageExpansionPhase3Final` - Test coverage expansion for core/error_handling.py - Phase 3 Final\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_mhm_error_initialization(self, tmp_path)` - Test MHMError initialization\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_data_error_initialization(self, tmp_path)` - Test DataError initialization\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_file_operation_error_initialization(self, tmp_path)` - Test FileOperationError initialization\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_configuration_error_initialization(self, tmp_path)` - Test ConfigurationError initialization\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_recovery_strategy_base_class(self, tmp_path)` - Test ErrorRecoveryStrategy base class\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_file_not_found_recovery_strategy(self, tmp_path)` - Test FileNotFoundRecovery strategy\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_json_decode_recovery_strategy(self, tmp_path)` - Test JSONDecodeRecovery strategy\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_initialization(self, tmp_path)` - Test ErrorHandler initialization\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_recovery_strategy(self, tmp_path)` - Test error handler with recovery strategy\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_multiple_strategies(self, tmp_path)` - Test error handler with multiple recovery strategies\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_context(self, tmp_path)` - Test error handler with additional context\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_complex_context(self, tmp_path)` - Test error handler with complex context\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_handle_errors_decorator_success(self, tmp_path)` - Test handle_errors decorator with successful function\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_handle_errors_decorator_exception(self, tmp_path)` - Test handle_errors decorator with exception\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_handle_errors_decorator_custom_return(self, tmp_path)` - Test handle_errors decorator with custom return value\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_handle_errors_decorator_specific_exception(self, tmp_path)` - Test handle_errors decorator with specific exception handling\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_handle_errors_decorator_with_context(self, tmp_path)` - Test handle_errors decorator with context\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_handle_errors_decorator_nested_exceptions(self, tmp_path)` - Test handle_errors decorator with nested exceptions\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_handle_errors_decorator_with_args_kwargs(self, tmp_path)` - Test handle_errors decorator with function arguments\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_handle_errors_decorator_with_exception_in_args(self, tmp_path)` - Test handle_errors decorator with exception in function arguments\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_handle_errors_decorator_user_friendly_false(self, tmp_path)` - Test handle_errors decorator with user_friendly=False\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_handle_errors_decorator_operation_name(self, tmp_path)` - Test handle_errors decorator with custom operation name\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_handle_errors_decorator_recovery_success(self, tmp_path)` - Test handle_errors decorator with successful recovery\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_handle_errors_decorator_recovery_failure(self, tmp_path)` - Test handle_errors decorator with failed recovery\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_handle_errors_decorator_double_failure(self, tmp_path)` - Test handle_errors decorator with double failure after recovery\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_handle_errors_decorator_with_complex_context(self, tmp_path)` - Test handle_errors decorator with complex context\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_handle_errors_decorator_with_operation_and_context(self, tmp_path)` - Test handle_errors decorator with both operation and context\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_handle_errors_decorator_with_all_parameters(self, tmp_path)` - Test handle_errors decorator with all parameters\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_global_instance(self, tmp_path)` - Test the global error_handler instance\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_global_instance_functionality(self, tmp_path)` - Test the global error_handler instance functionality\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_retry_limits(self, tmp_path)` - Test error handler retry limits\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_unrecoverable_error(self, tmp_path)` - Test error handler with unrecoverable error\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_no_context(self, tmp_path)` - Test error handler with no context\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_empty_context(self, tmp_path)` - Test error handler with empty context\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_user_friendly_false(self, tmp_path)` - Test error handler with user_friendly=False\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_user_friendly_true(self, tmp_path)` - Test error handler with user_friendly=True\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_default_operation(self, tmp_path)` - Test error handler with default operation name\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_custom_operation(self, tmp_path)` - Test error handler with custom operation name\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_long_operation_name(self, tmp_path)` - Test error handler with long operation name\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_special_characters_in_context(self, tmp_path)` - Test error handler with special characters in context\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_none_error(self, tmp_path)` - Test error handler with None error\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_none_context_and_error(self, tmp_path)` - Test error handler with None context and error\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_file_not_found_recovery_strategy_without_file_path(self, tmp_path)` - Test FileNotFoundRecovery strategy without file_path in context\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_file_not_found_recovery_strategy_with_invalid_file_path(self, tmp_path)` - Test FileNotFoundRecovery strategy with invalid file_path in context\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_file_not_found_recovery_strategy_with_empty_file_path(self, tmp_path)` - Test FileNotFoundRecovery strategy with empty file_path in context\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_json_decode_recovery_strategy_recover(self, tmp_path)` - Test JSONDecodeRecovery strategy recover method\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_file_operation_error(self, tmp_path)` - Test error handler with FileOperationError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_data_error(self, tmp_path)` - Test error handler with DataError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_configuration_error(self, tmp_path)` - Test error handler with ConfigurationError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_mhm_error(self, tmp_path)` - Test error handler with MHMError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_generic_exception(self, tmp_path)` - Test error handler with generic Exception\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_runtime_error(self, tmp_path)` - Test error handler with RuntimeError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_type_error(self, tmp_path)` - Test error handler with TypeError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_attribute_error(self, tmp_path)` - Test error handler with AttributeError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_key_error(self, tmp_path)` - Test error handler with KeyError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_index_error(self, tmp_path)` - Test error handler with IndexError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_os_error(self, tmp_path)` - Test error handler with OSError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_io_error(self, tmp_path)` - Test error handler with IOError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_permission_error(self, tmp_path)` - Test error handler with PermissionError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_timeout_error(self, tmp_path)` - Test error handler with TimeoutError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_connection_error(self, tmp_path)` - Test error handler with ConnectionError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_import_error(self, tmp_path)` - Test error handler with ImportError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_module_not_found_error(self, tmp_path)` - Test error handler with ModuleNotFoundError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_unicode_error(self, tmp_path)` - Test error handler with UnicodeError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_unicode_decode_error(self, tmp_path)` - Test error handler with UnicodeDecodeError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_unicode_encode_error(self, tmp_path)` - Test error handler with UnicodeEncodeError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_unicode_translate_error(self, tmp_path)` - Test error handler with UnicodeTranslateError\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_warning(self, tmp_path)` - Test error handler with Warning\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_user_warning(self, tmp_path)` - Test error handler with UserWarning\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_deprecation_warning(self, tmp_path)` - Test error handler with DeprecationWarning\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_future_warning(self, tmp_path)` - Test error handler with FutureWarning\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_pending_deprecation_warning(self, tmp_path)` - Test error handler with PendingDeprecationWarning\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_runtime_warning(self, tmp_path)` - Test error handler with RuntimeWarning\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_syntax_warning(self, tmp_path)` - Test error handler with SyntaxWarning\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_import_warning(self, tmp_path)` - Test error handler with ImportWarning\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_unicode_warning(self, tmp_path)` - Test error handler with UnicodeWarning\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_bytes_warning(self, tmp_path)` - Test error handler with BytesWarning\n  - `TestErrorHandlingCoverageExpansionPhase3Final.test_error_handler_with_resource_warning(self, tmp_path)` - Test error handler with ResourceWarning\n\n### tests/behavior/test_interaction_handlers_behavior.py\n**Functions:**\n- `_create_test_user(self, user_id, enable_checkins, test_data_dir)` - Create a test user with proper account setup.\n- `test_handler_registry_creates_all_handlers(self)` - Test that all handlers are properly registered and accessible.\n- `test_get_interaction_handler_returns_correct_handler(self)` - Test that get_interaction_handler returns the correct handler for each intent.\n- `test_task_management_handler_can_handle_intents(self)` - Test that TaskManagementHandler can handle all expected intents.\n- `test_checkin_handler_can_handle_intents(self)` - Test that CheckinHandler can handle all expected intents.\n- `test_profile_handler_can_handle_intents(self)` - Test that ProfileHandler can handle all expected intents.\n- `test_schedule_management_handler_can_handle_intents(self)` - Test that ScheduleManagementHandler can handle all expected intents.\n- `test_analytics_handler_can_handle_intents(self)` - Test that AnalyticsHandler can handle all expected intents.\n- `test_help_handler_can_handle_intents(self)` - Test that HelpHandler can handle all expected intents.\n- `test_task_management_handler_creates_actual_task(self, test_data_dir)` - Test that TaskManagementHandler actually creates a task in the system.\n- `test_task_management_handler_lists_actual_tasks(self, test_data_dir)` - Test that TaskManagementHandler actually lists tasks from the system.\n- `test_task_management_handler_completes_actual_task(self, test_data_dir)` - Test that TaskManagementHandler actually completes a task in the system.\n- `test_checkin_handler_starts_checkin_flow(self, test_data_dir)` - Test that CheckinHandler starts a check-in flow.\n- `test_profile_handler_shows_actual_profile(self, test_data_dir)` - Test that ProfileHandler shows actual user profile data.\n- `test_help_handler_provides_help(self)` - Test that HelpHandler provides helpful information.\n- `test_all_handlers_return_proper_help(self)` - Test that all handlers return proper help text.\n- `test_all_handlers_return_proper_examples(self)` - Test that all handlers return proper example commands.\n- `test_handler_error_handling(self, test_data_dir)` - Test that handlers handle errors gracefully.\n- `test_handler_response_structure(self)` - Test that all handlers return properly structured responses.\n**Classes:**\n- `TestInteractionHandlersBehavior` - Test interaction handlers real behavior and side effects.\n  - `TestInteractionHandlersBehavior._create_test_user(self, user_id, enable_checkins, test_data_dir)` - Create a test user with proper account setup.\n  - `TestInteractionHandlersBehavior.test_handler_registry_creates_all_handlers(self)` - Test that all handlers are properly registered and accessible.\n  - `TestInteractionHandlersBehavior.test_get_interaction_handler_returns_correct_handler(self)` - Test that get_interaction_handler returns the correct handler for each intent.\n  - `TestInteractionHandlersBehavior.test_task_management_handler_can_handle_intents(self)` - Test that TaskManagementHandler can handle all expected intents.\n  - `TestInteractionHandlersBehavior.test_checkin_handler_can_handle_intents(self)` - Test that CheckinHandler can handle all expected intents.\n  - `TestInteractionHandlersBehavior.test_profile_handler_can_handle_intents(self)` - Test that ProfileHandler can handle all expected intents.\n  - `TestInteractionHandlersBehavior.test_schedule_management_handler_can_handle_intents(self)` - Test that ScheduleManagementHandler can handle all expected intents.\n  - `TestInteractionHandlersBehavior.test_analytics_handler_can_handle_intents(self)` - Test that AnalyticsHandler can handle all expected intents.\n  - `TestInteractionHandlersBehavior.test_help_handler_can_handle_intents(self)` - Test that HelpHandler can handle all expected intents.\n  - `TestInteractionHandlersBehavior.test_task_management_handler_creates_actual_task(self, test_data_dir)` - Test that TaskManagementHandler actually creates a task in the system.\n  - `TestInteractionHandlersBehavior.test_task_management_handler_lists_actual_tasks(self, test_data_dir)` - Test that TaskManagementHandler actually lists tasks from the system.\n  - `TestInteractionHandlersBehavior.test_task_management_handler_completes_actual_task(self, test_data_dir)` - Test that TaskManagementHandler actually completes a task in the system.\n  - `TestInteractionHandlersBehavior.test_checkin_handler_starts_checkin_flow(self, test_data_dir)` - Test that CheckinHandler starts a check-in flow.\n  - `TestInteractionHandlersBehavior.test_profile_handler_shows_actual_profile(self, test_data_dir)` - Test that ProfileHandler shows actual user profile data.\n  - `TestInteractionHandlersBehavior.test_help_handler_provides_help(self)` - Test that HelpHandler provides helpful information.\n  - `TestInteractionHandlersBehavior.test_all_handlers_return_proper_help(self)` - Test that all handlers return proper help text.\n  - `TestInteractionHandlersBehavior.test_all_handlers_return_proper_examples(self)` - Test that all handlers return proper example commands.\n  - `TestInteractionHandlersBehavior.test_handler_error_handling(self, test_data_dir)` - Test that handlers handle errors gracefully.\n  - `TestInteractionHandlersBehavior.test_handler_response_structure(self)` - Test that all handlers return properly structured responses.\n\n### tests/behavior/test_interaction_handlers_coverage_expansion.py\n**Functions:**\n- `mock_communication_manager()` - Mock communication manager for testing.\n- `test_data_dir(test_path_factory)` - Provide per-test data directory under tests/data/tmp.\n- `test_handle_create_task_with_title_only(self, test_data_dir)` - Test task creation with only title.\n- `test_handle_create_task_with_all_properties(self, test_data_dir)` - Test task creation with all properties.\n- `test_handle_create_task_invalid_priority(self, test_data_dir)` - Test task creation with invalid priority.\n- `test_parse_relative_date_today(self)` - Test relative date parsing for 'today'.\n- `test_parse_relative_date_tomorrow(self)` - Test relative date parsing for 'tomorrow'.\n- `test_parse_relative_date_next_week(self)` - Test relative date parsing for 'next week'.\n- `test_parse_relative_date_next_month(self)` - Test relative date parsing for 'next month'.\n- `test_parse_relative_date_existing_date(self)` - Test relative date parsing for existing date.\n- `test_handle_list_tasks_no_tasks(self, test_data_dir)` - Test listing tasks when user has no tasks.\n- `test_handle_list_tasks_with_tasks(self, test_data_dir)` - Test listing tasks when user has tasks.\n- `test_handle_list_tasks_with_filters(self, test_data_dir)` - Test listing tasks with various filters.\n- `test_handle_list_tasks_due_soon_filter(self, test_data_dir)` - Test listing tasks with due_soon filter.\n- `test_handle_list_tasks_overdue_filter(self, test_data_dir)` - Test listing tasks with overdue filter.\n- `test_handle_complete_task_with_identifier(self, test_data_dir)` - Test completing a task with identifier.\n- `test_handle_complete_task_no_identifier(self, test_data_dir)` - Test completing a task without identifier.\n- `test_handle_complete_task_not_found(self, test_data_dir)` - Test completing a task that doesn't exist.\n- `test_handle_delete_task_with_identifier(self, test_data_dir)` - Test deleting a task with identifier.\n- `test_handle_delete_task_no_identifier(self, test_data_dir)` - Test deleting a task without identifier.\n- `test_handle_update_task_with_updates(self, test_data_dir)` - Test updating a task with specific updates.\n- `test_handle_update_task_no_updates(self, test_data_dir)` - Test updating a task without specifying updates.\n- `test_handle_task_stats_with_analytics(self, test_data_dir)` - Test task statistics with analytics.\n- `test_handle_task_stats_no_data(self, test_data_dir)` - Test task statistics with no data.\n- `test_handle_unknown_intent(self, test_data_dir)` - Test handling unknown intent.\n- `test_get_help(self)` - Test getting help text.\n- `test_get_examples(self)` - Test getting example commands.\n- `test_handle_start_checkin_new_user(self, test_data_dir)` - Test starting check-in for new user.\n- `test_handle_continue_checkin(self, test_data_dir)` - Test continuing check-in process.\n- `test_handle_checkin_status(self, test_data_dir)` - Test checking check-in status.\n- `test_checkin_status_displays_scale_out_of_5(self, test_data_dir, monkeypatch)` - Ensure check-in status lines render mood values on a /5 scale.\n- `test_handle_show_profile(self, test_data_dir)` - Test showing user profile.\n- `test_profile_get_help_is_text(self)` - ProfileHandler.get_help should return a helpful text string.\n- `test_show_profile_not_raw_json(self, test_data_dir)` - Profile display should be formatted text, not raw JSON.\n- `test_handle_update_profile(self, test_data_dir)` - Test updating user profile.\n- `test_handle_profile_stats(self, test_data_dir)` - Test showing profile statistics.\n- `test_handle_show_schedule(self, test_data_dir)` - Test showing user schedule.\n- `test_handle_update_schedule(self, test_data_dir)` - Test updating user schedule.\n- `test_handle_show_analytics(self, test_data_dir)` - Test showing analytics.\n- `test_handle_mood_trends(self, test_data_dir)` - Test showing mood trends.\n- `test_quantitative_summary_respects_enabled_fields(self, test_data_dir, monkeypatch)` - Quant summary should include only enabled numeric fields present in data.\n- `test_mood_trends_displays_scale_out_of_5(self, test_data_dir, monkeypatch)` - Ensure mood trends render averages/ranges on a /5 scale.\n- `test_checkin_history_displays_scale_out_of_5(self, test_data_dir, monkeypatch)` - Ensure check-in history shows mood as /5.\n- `test_handle_help(self, test_data_dir)` - Test showing help.\n- `test_handle_commands(self, test_data_dir)` - Test showing commands.\n- `test_handle_examples(self, test_data_dir)` - Test showing examples.\n- `test_task_management_handler_error_handling(self, test_data_dir)` - Test error handling in task management.\n- `test_handle_create_task_with_recurrence_settings(self, test_data_dir)` - Test task creation with recurrence settings from user preferences.\n- `test_handle_create_task_with_invalid_priority(self, test_data_dir)` - Test task creation with invalid priority (should default to medium).\n- `test_handle_create_task_with_invalid_recurrence_pattern(self, test_data_dir)` - Test task creation with invalid recurrence pattern (should be ignored).\n- `test_handle_list_tasks_with_priority_filter(self, test_data_dir)` - Test task listing with priority filter.\n- `test_handle_list_tasks_with_tag_filter(self, test_data_dir)` - Test task listing with tag filter.\n- `test_handle_complete_task_suggestion_logic(self, test_data_dir)` - Test task completion suggestion logic when no specific task is mentioned.\n- `test_handle_complete_task_with_no_tasks(self, test_data_dir)` - Test task completion when user has no tasks.\n- `test_handle_edit_task_with_invalid_task_id(self, test_data_dir)` - Test task editing with invalid task ID.\n- `test_handle_delete_task_with_invalid_task_id(self, test_data_dir)` - Test task deletion with invalid task ID.\n- `test_handle_start_checkin_with_disabled_checkins(self, test_data_dir)` - Test starting checkin when checkins are disabled for user.\n- `test_handle_start_checkin_with_no_questions(self, test_data_dir)` - Test starting checkin when no questions are available.\n- `test_handle_checkin_response_with_invalid_response(self, test_data_dir)` - Test checkin response handling with invalid response format.\n- `test_handle_show_profile_with_missing_data(self, test_data_dir)` - Test profile display when user data is missing.\n- `test_handle_update_profile_with_invalid_data(self, test_data_dir)` - Test profile update with invalid data.\n- `test_handle_show_schedule_with_no_schedules(self, test_data_dir)` - Test schedule display when user has no schedules.\n- `test_handle_update_schedule_with_invalid_period(self, test_data_dir)` - Test schedule update with invalid time period.\n- `test_handle_show_analytics_with_no_data(self, test_data_dir)` - Test analytics display when user has no data.\n- `test_handle_show_analytics_with_specific_metric(self, test_data_dir)` - Test analytics display with specific metric request.\n- `test_handle_help_with_specific_handler(self, test_data_dir)` - Test help display for specific handler.\n- `test_handle_help_with_invalid_handler(self, test_data_dir)` - Test help display for invalid handler.\n- `test_handler_with_missing_user_data(self, test_data_dir)` - Test handlers with missing user data.\n- `_mock_get_user_data(uid, section)` - No description\n- `get_mood_trends(self, uid, days)` - No description\n- `get_checkin_history(self, uid, days)` - No description\n**Classes:**\n- `TestTaskManagementHandlerCoverage` - Test TaskManagementHandler comprehensive coverage.\n  - `TestTaskManagementHandlerCoverage.test_handle_create_task_with_title_only(self, test_data_dir)` - Test task creation with only title.\n  - `TestTaskManagementHandlerCoverage.test_handle_create_task_with_all_properties(self, test_data_dir)` - Test task creation with all properties.\n  - `TestTaskManagementHandlerCoverage.test_handle_create_task_invalid_priority(self, test_data_dir)` - Test task creation with invalid priority.\n  - `TestTaskManagementHandlerCoverage.test_parse_relative_date_today(self)` - Test relative date parsing for 'today'.\n  - `TestTaskManagementHandlerCoverage.test_parse_relative_date_tomorrow(self)` - Test relative date parsing for 'tomorrow'.\n  - `TestTaskManagementHandlerCoverage.test_parse_relative_date_next_week(self)` - Test relative date parsing for 'next week'.\n  - `TestTaskManagementHandlerCoverage.test_parse_relative_date_next_month(self)` - Test relative date parsing for 'next month'.\n  - `TestTaskManagementHandlerCoverage.test_parse_relative_date_existing_date(self)` - Test relative date parsing for existing date.\n  - `TestTaskManagementHandlerCoverage.test_handle_list_tasks_no_tasks(self, test_data_dir)` - Test listing tasks when user has no tasks.\n  - `TestTaskManagementHandlerCoverage.test_handle_list_tasks_with_tasks(self, test_data_dir)` - Test listing tasks when user has tasks.\n  - `TestTaskManagementHandlerCoverage.test_handle_list_tasks_with_filters(self, test_data_dir)` - Test listing tasks with various filters.\n  - `TestTaskManagementHandlerCoverage.test_handle_list_tasks_due_soon_filter(self, test_data_dir)` - Test listing tasks with due_soon filter.\n  - `TestTaskManagementHandlerCoverage.test_handle_list_tasks_overdue_filter(self, test_data_dir)` - Test listing tasks with overdue filter.\n  - `TestTaskManagementHandlerCoverage.test_handle_complete_task_with_identifier(self, test_data_dir)` - Test completing a task with identifier.\n  - `TestTaskManagementHandlerCoverage.test_handle_complete_task_no_identifier(self, test_data_dir)` - Test completing a task without identifier.\n  - `TestTaskManagementHandlerCoverage.test_handle_complete_task_not_found(self, test_data_dir)` - Test completing a task that doesn't exist.\n  - `TestTaskManagementHandlerCoverage.test_handle_delete_task_with_identifier(self, test_data_dir)` - Test deleting a task with identifier.\n  - `TestTaskManagementHandlerCoverage.test_handle_delete_task_no_identifier(self, test_data_dir)` - Test deleting a task without identifier.\n  - `TestTaskManagementHandlerCoverage.test_handle_update_task_with_updates(self, test_data_dir)` - Test updating a task with specific updates.\n  - `TestTaskManagementHandlerCoverage.test_handle_update_task_no_updates(self, test_data_dir)` - Test updating a task without specifying updates.\n  - `TestTaskManagementHandlerCoverage.test_handle_task_stats_with_analytics(self, test_data_dir)` - Test task statistics with analytics.\n  - `TestTaskManagementHandlerCoverage.test_handle_task_stats_no_data(self, test_data_dir)` - Test task statistics with no data.\n  - `TestTaskManagementHandlerCoverage.test_handle_unknown_intent(self, test_data_dir)` - Test handling unknown intent.\n  - `TestTaskManagementHandlerCoverage.test_get_help(self)` - Test getting help text.\n  - `TestTaskManagementHandlerCoverage.test_get_examples(self)` - Test getting example commands.\n- `TestCheckinHandlerCoverage` - Test CheckinHandler comprehensive coverage.\n  - `TestCheckinHandlerCoverage.test_handle_start_checkin_new_user(self, test_data_dir)` - Test starting check-in for new user.\n  - `TestCheckinHandlerCoverage.test_handle_continue_checkin(self, test_data_dir)` - Test continuing check-in process.\n  - `TestCheckinHandlerCoverage.test_handle_checkin_status(self, test_data_dir)` - Test checking check-in status.\n  - `TestCheckinHandlerCoverage.test_checkin_status_displays_scale_out_of_5(self, test_data_dir, monkeypatch)` - Ensure check-in status lines render mood values on a /5 scale.\n- `TestProfileHandlerCoverage` - Test ProfileHandler comprehensive coverage.\n  - `TestProfileHandlerCoverage.test_handle_show_profile(self, test_data_dir)` - Test showing user profile.\n  - `TestProfileHandlerCoverage.test_profile_get_help_is_text(self)` - ProfileHandler.get_help should return a helpful text string.\n  - `TestProfileHandlerCoverage.test_show_profile_not_raw_json(self, test_data_dir)` - Profile display should be formatted text, not raw JSON.\n  - `TestProfileHandlerCoverage.test_handle_update_profile(self, test_data_dir)` - Test updating user profile.\n  - `TestProfileHandlerCoverage.test_handle_profile_stats(self, test_data_dir)` - Test showing profile statistics.\n- `TestScheduleManagementHandlerCoverage` - Test ScheduleManagementHandler comprehensive coverage.\n  - `TestScheduleManagementHandlerCoverage.test_handle_show_schedule(self, test_data_dir)` - Test showing user schedule.\n  - `TestScheduleManagementHandlerCoverage.test_handle_update_schedule(self, test_data_dir)` - Test updating user schedule.\n- `TestAnalyticsHandlerCoverage` - Test AnalyticsHandler comprehensive coverage.\n  - `TestAnalyticsHandlerCoverage.test_handle_show_analytics(self, test_data_dir)` - Test showing analytics.\n  - `TestAnalyticsHandlerCoverage.test_handle_mood_trends(self, test_data_dir)` - Test showing mood trends.\n  - `TestAnalyticsHandlerCoverage.test_quantitative_summary_respects_enabled_fields(self, test_data_dir, monkeypatch)` - Quant summary should include only enabled numeric fields present in data.\n  - `TestAnalyticsHandlerCoverage.test_mood_trends_displays_scale_out_of_5(self, test_data_dir, monkeypatch)` - Ensure mood trends render averages/ranges on a /5 scale.\n  - `TestAnalyticsHandlerCoverage.test_checkin_history_displays_scale_out_of_5(self, test_data_dir, monkeypatch)` - Ensure check-in history shows mood as /5.\n- `TestHelpHandlerCoverage` - Test HelpHandler comprehensive coverage.\n  - `TestHelpHandlerCoverage.test_handle_help(self, test_data_dir)` - Test showing help.\n  - `TestHelpHandlerCoverage.test_handle_commands(self, test_data_dir)` - Test showing commands.\n  - `TestHelpHandlerCoverage.test_handle_examples(self, test_data_dir)` - Test showing examples.\n- `TestErrorHandling` - Test error handling in interaction handlers.\n  - `TestErrorHandling.test_task_management_handler_error_handling(self, test_data_dir)` - Test error handling in task management.\n- `TestTaskManagementAdvancedCoverage` - Test advanced task management functionality for coverage expansion.\n  - `TestTaskManagementAdvancedCoverage.test_handle_create_task_with_recurrence_settings(self, test_data_dir)` - Test task creation with recurrence settings from user preferences.\n  - `TestTaskManagementAdvancedCoverage.test_handle_create_task_with_invalid_priority(self, test_data_dir)` - Test task creation with invalid priority (should default to medium).\n  - `TestTaskManagementAdvancedCoverage.test_handle_create_task_with_invalid_recurrence_pattern(self, test_data_dir)` - Test task creation with invalid recurrence pattern (should be ignored).\n  - `TestTaskManagementAdvancedCoverage.test_handle_list_tasks_with_priority_filter(self, test_data_dir)` - Test task listing with priority filter.\n  - `TestTaskManagementAdvancedCoverage.test_handle_list_tasks_with_tag_filter(self, test_data_dir)` - Test task listing with tag filter.\n  - `TestTaskManagementAdvancedCoverage.test_handle_complete_task_suggestion_logic(self, test_data_dir)` - Test task completion suggestion logic when no specific task is mentioned.\n  - `TestTaskManagementAdvancedCoverage.test_handle_complete_task_with_no_tasks(self, test_data_dir)` - Test task completion when user has no tasks.\n  - `TestTaskManagementAdvancedCoverage.test_handle_edit_task_with_invalid_task_id(self, test_data_dir)` - Test task editing with invalid task ID.\n  - `TestTaskManagementAdvancedCoverage.test_handle_delete_task_with_invalid_task_id(self, test_data_dir)` - Test task deletion with invalid task ID.\n- `TestCheckinHandlerAdvancedCoverage` - Test advanced checkin handler functionality for coverage expansion.\n  - `TestCheckinHandlerAdvancedCoverage.test_handle_start_checkin_with_disabled_checkins(self, test_data_dir)` - Test starting checkin when checkins are disabled for user.\n  - `TestCheckinHandlerAdvancedCoverage.test_handle_start_checkin_with_no_questions(self, test_data_dir)` - Test starting checkin when no questions are available.\n  - `TestCheckinHandlerAdvancedCoverage.test_handle_checkin_response_with_invalid_response(self, test_data_dir)` - Test checkin response handling with invalid response format.\n- `TestProfileHandlerAdvancedCoverage` - Test advanced profile handler functionality for coverage expansion.\n  - `TestProfileHandlerAdvancedCoverage.test_handle_show_profile_with_missing_data(self, test_data_dir)` - Test profile display when user data is missing.\n  - `TestProfileHandlerAdvancedCoverage.test_handle_update_profile_with_invalid_data(self, test_data_dir)` - Test profile update with invalid data.\n- `TestScheduleManagementHandlerAdvancedCoverage` - Test advanced schedule management functionality for coverage expansion.\n  - `TestScheduleManagementHandlerAdvancedCoverage.test_handle_show_schedule_with_no_schedules(self, test_data_dir)` - Test schedule display when user has no schedules.\n  - `TestScheduleManagementHandlerAdvancedCoverage.test_handle_update_schedule_with_invalid_period(self, test_data_dir)` - Test schedule update with invalid time period.\n- `TestAnalyticsHandlerAdvancedCoverage` - Test advanced analytics handler functionality for coverage expansion.\n  - `TestAnalyticsHandlerAdvancedCoverage.test_handle_show_analytics_with_no_data(self, test_data_dir)` - Test analytics display when user has no data.\n  - `TestAnalyticsHandlerAdvancedCoverage.test_handle_show_analytics_with_specific_metric(self, test_data_dir)` - Test analytics display with specific metric request.\n- `TestHelpHandlerAdvancedCoverage` - Test advanced help handler functionality for coverage expansion.\n  - `TestHelpHandlerAdvancedCoverage.test_handle_help_with_specific_handler(self, test_data_dir)` - Test help display for specific handler.\n  - `TestHelpHandlerAdvancedCoverage.test_handle_help_with_invalid_handler(self, test_data_dir)` - Test help display for invalid handler.\n  - `TestHelpHandlerAdvancedCoverage.test_handler_with_missing_user_data(self, test_data_dir)` - Test handlers with missing user data.\n- `_MockAnalytics` - No description\n  - `_MockAnalytics.get_mood_trends(self, uid, days)` - No description\n- `_MockAnalytics` - No description\n  - `_MockAnalytics.get_checkin_history(self, uid, days)` - No description\n\n### tests/behavior/test_logger_behavior.py\n**Functions:**\n- `temp_log_dir(self, test_data_dir)` - Create temporary log directory for testing.\n- `test_get_logger_creation_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test logger can be created successfully.\n- `test_get_logger_same_name_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test getting same logger returns same instance.\n- `test_get_log_level_from_env_real_behavior(self)` - REAL BEHAVIOR TEST: Test getting log level from environment.\n- `temp_log_dir(self, test_data_dir)` - Create temporary log directory for testing.\n- `test_verbose_mode_toggle_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test verbose mode toggle functionality.\n- `test_set_verbose_mode_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test setting verbose mode explicitly.\n- `test_set_console_log_level_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test setting console log level.\n- `test_suppress_noisy_logging_real_behavior(self)` - REAL BEHAVIOR TEST: Test suppression of noisy third-party logging.\n- `test_disable_module_logging_real_behavior(self)` - REAL BEHAVIOR TEST: Test disabling specific module logging.\n- `temp_log_dir(self, test_data_dir)` - Create temporary log directory for testing.\n- `test_backup_directory_rotating_handler_creation_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test BackupDirectoryRotatingFileHandler creation.\n- `test_get_log_file_info_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test getting log file information.\n- `test_cleanup_old_logs_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test cleanup of old log files.\n- `temp_log_dir(self, test_data_dir)` - Create temporary log directory for testing.\n- `test_force_restart_logging_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test forcing logging restart.\n- `test_setup_logging_idempotent_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test setup_logging is idempotent.\n- `temp_log_dir(self, test_data_dir)` - Create temporary log directory for testing.\n- `test_logger_full_workflow_real_behavior(self, temp_log_dir, monkeypatch)` - REAL BEHAVIOR TEST: Test complete logger workflow.\n- `test_logger_environment_integration_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test logger integration with environment variables.\n**Classes:**\n- `TestLoggerInitializationBehavior` - Test logger initialization with real behavior verification.\n  - `TestLoggerInitializationBehavior.temp_log_dir(self, test_data_dir)` - Create temporary log directory for testing.\n  - `TestLoggerInitializationBehavior.test_get_logger_creation_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test logger can be created successfully.\n  - `TestLoggerInitializationBehavior.test_get_logger_same_name_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test getting same logger returns same instance.\n  - `TestLoggerInitializationBehavior.test_get_log_level_from_env_real_behavior(self)` - REAL BEHAVIOR TEST: Test getting log level from environment.\n- `TestLoggerVerbosityBehavior` - Test logger verbosity control with real behavior verification.\n  - `TestLoggerVerbosityBehavior.temp_log_dir(self, test_data_dir)` - Create temporary log directory for testing.\n  - `TestLoggerVerbosityBehavior.test_verbose_mode_toggle_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test verbose mode toggle functionality.\n  - `TestLoggerVerbosityBehavior.test_set_verbose_mode_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test setting verbose mode explicitly.\n  - `TestLoggerVerbosityBehavior.test_set_console_log_level_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test setting console log level.\n- `TestLoggerNoiseSuppressionBehavior` - Test noise suppression functionality with real behavior verification.\n  - `TestLoggerNoiseSuppressionBehavior.test_suppress_noisy_logging_real_behavior(self)` - REAL BEHAVIOR TEST: Test suppression of noisy third-party logging.\n  - `TestLoggerNoiseSuppressionBehavior.test_disable_module_logging_real_behavior(self)` - REAL BEHAVIOR TEST: Test disabling specific module logging.\n- `TestLoggerFileOperationsBehavior` - Test logger file operations with real behavior verification.\n  - `TestLoggerFileOperationsBehavior.temp_log_dir(self, test_data_dir)` - Create temporary log directory for testing.\n  - `TestLoggerFileOperationsBehavior.test_backup_directory_rotating_handler_creation_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test BackupDirectoryRotatingFileHandler creation.\n  - `TestLoggerFileOperationsBehavior.test_get_log_file_info_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test getting log file information.\n  - `TestLoggerFileOperationsBehavior.test_cleanup_old_logs_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test cleanup of old log files.\n- `TestLoggerRestartBehavior` - Test logger restart functionality with real behavior verification.\n  - `TestLoggerRestartBehavior.temp_log_dir(self, test_data_dir)` - Create temporary log directory for testing.\n  - `TestLoggerRestartBehavior.test_force_restart_logging_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test forcing logging restart.\n  - `TestLoggerRestartBehavior.test_setup_logging_idempotent_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test setup_logging is idempotent.\n- `TestLoggerIntegrationBehavior` - Test logger integration with real behavior verification.\n  - `TestLoggerIntegrationBehavior.temp_log_dir(self, test_data_dir)` - Create temporary log directory for testing.\n  - `TestLoggerIntegrationBehavior.test_logger_full_workflow_real_behavior(self, temp_log_dir, monkeypatch)` - REAL BEHAVIOR TEST: Test complete logger workflow.\n  - `TestLoggerIntegrationBehavior.test_logger_environment_integration_real_behavior(self, temp_log_dir)` - REAL BEHAVIOR TEST: Test logger integration with environment variables.\n\n### tests/behavior/test_logger_coverage_expansion.py\n**Functions:**\n- `_setup(self, test_path_factory)` - Set up test environment.\n- `teardown_method(self)` - Clean up test environment.\n- `test_component_logger_initialization_real_behavior(self)` - Test that component logger initializes with proper structure.\n- `test_component_logger_custom_level_real_behavior(self)` - Test component logger with custom log level.\n- `test_component_logger_logging_methods_real_behavior(self)` - Test all logging methods with real behavior.\n- `test_component_logger_structured_data_real_behavior(self)` - Test logging with structured data.\n- `test_backup_directory_rotating_file_handler_initialization_real_behavior(self)` - Test backup directory rotating file handler initialization.\n- `test_backup_directory_rotating_file_handler_rollover_real_behavior(self)` - Test log file rollover with real behavior.\n- `test_backup_directory_rotating_file_handler_rollover_disabled_real_behavior(self)` - Test rollover when disabled.\n- `test_heartbeat_warning_filter_real_behavior(self)` - Test heartbeat warning filter with real behavior.\n- `test_heartbeat_warning_filter_summary_logging_real_behavior(self)` - Test heartbeat warning filter summary logging.\n- `test_get_component_logger_real_behavior(self)` - Test get_component_logger function with real behavior.\n- `test_get_logger_real_behavior(self)` - Test get_logger function with real behavior.\n- `test_suppress_noisy_logging_real_behavior(self)` - Test suppress_noisy_logging function with real behavior.\n- `test_compress_old_logs_real_behavior(self)` - Test compression of old log files with real behavior.\n- `test_compress_old_logs_no_files_real_behavior(self)` - Test compression when no files exist.\n- `test_cleanup_old_archives_real_behavior(self)` - Test cleanup of old archives with real behavior.\n- `test_cleanup_old_logs_real_behavior(self)` - Test cleanup of old log files with real behavior.\n- `test_logger_error_handling_real_behavior(self)` - Test logger error handling with real behavior.\n- `test_logger_performance_under_load(self)` - Test logger performance under load.\n- `test_logger_memory_behavior(self)` - Test memory usage behavior of logger.\n- `test_logger_thread_safety_behavior(self)` - Test thread safety behavior of logger.\n- `test_logger_file_rotation_edge_cases(self)` - Test logger file rotation edge cases.\n- `test_logger_encoding_handling_real_behavior(self)` - Test logger encoding handling with real behavior.\n- `test_logger_concurrent_file_access(self)` - Test concurrent file access behavior.\n- `test_logger_backup_directory_creation_real_behavior(self)` - Test backup directory creation with real behavior.\n- `test_logger_formatter_real_behavior(self)` - Test logger formatter with real behavior.\n- `test_logger_level_filtering_real_behavior(self)` - Test logger level filtering with real behavior.\n- `test_get_log_file_info_real_behavior(self)` - Test get_log_file_info function with real behavior.\n- `test_setup_logging_real_behavior(self)` - Test setup_logging function with real behavior.\n- `test_toggle_verbose_logging_real_behavior(self)` - Test toggle_verbose_logging function with real behavior.\n- `test_get_verbose_mode_real_behavior(self)` - Test get_verbose_mode function with real behavior.\n- `test_set_verbose_mode_real_behavior(self)` - Test set_verbose_mode function with real behavior.\n- `_setup(self, test_path_factory)` - Set up test environment.\n- `teardown_method(self)` - Clean up test environment.\n- `test_logger_integration_with_multiple_components(self)` - Test logger integration with multiple components.\n- `test_logger_error_recovery_with_real_operations(self)` - Test error recovery when working with real operations.\n- `test_logger_concurrent_access_safety(self)` - Test that logger handles concurrent access safely.\n- `test_logger_memory_behavior(self)` - Test memory usage behavior of logger.\n- `test_logger_thread_safety_behavior(self)` - Test thread safety behavior of logger.\n- `create_record(level, message)` - No description\n- `log_messages(thread_id)` - No description\n- `write_logs(thread_id)` - No description\n- `log_messages(thread_id)` - No description\n- `log_messages(thread_id)` - No description\n**Classes:**\n- `TestLoggerCoverageExpansion` - Test Core Logger coverage expansion with real behavior verification.\n  - `TestLoggerCoverageExpansion._setup(self, test_path_factory)` - Set up test environment.\n  - `TestLoggerCoverageExpansion.teardown_method(self)` - Clean up test environment.\n  - `TestLoggerCoverageExpansion.test_component_logger_initialization_real_behavior(self)` - Test that component logger initializes with proper structure.\n  - `TestLoggerCoverageExpansion.test_component_logger_custom_level_real_behavior(self)` - Test component logger with custom log level.\n  - `TestLoggerCoverageExpansion.test_component_logger_logging_methods_real_behavior(self)` - Test all logging methods with real behavior.\n  - `TestLoggerCoverageExpansion.test_component_logger_structured_data_real_behavior(self)` - Test logging with structured data.\n  - `TestLoggerCoverageExpansion.test_backup_directory_rotating_file_handler_initialization_real_behavior(self)` - Test backup directory rotating file handler initialization.\n  - `TestLoggerCoverageExpansion.test_backup_directory_rotating_file_handler_rollover_real_behavior(self)` - Test log file rollover with real behavior.\n  - `TestLoggerCoverageExpansion.test_backup_directory_rotating_file_handler_rollover_disabled_real_behavior(self)` - Test rollover when disabled.\n  - `TestLoggerCoverageExpansion.test_heartbeat_warning_filter_real_behavior(self)` - Test heartbeat warning filter with real behavior.\n  - `TestLoggerCoverageExpansion.test_heartbeat_warning_filter_summary_logging_real_behavior(self)` - Test heartbeat warning filter summary logging.\n  - `TestLoggerCoverageExpansion.test_get_component_logger_real_behavior(self)` - Test get_component_logger function with real behavior.\n  - `TestLoggerCoverageExpansion.test_get_logger_real_behavior(self)` - Test get_logger function with real behavior.\n  - `TestLoggerCoverageExpansion.test_suppress_noisy_logging_real_behavior(self)` - Test suppress_noisy_logging function with real behavior.\n  - `TestLoggerCoverageExpansion.test_compress_old_logs_real_behavior(self)` - Test compression of old log files with real behavior.\n  - `TestLoggerCoverageExpansion.test_compress_old_logs_no_files_real_behavior(self)` - Test compression when no files exist.\n  - `TestLoggerCoverageExpansion.test_cleanup_old_archives_real_behavior(self)` - Test cleanup of old archives with real behavior.\n  - `TestLoggerCoverageExpansion.test_cleanup_old_logs_real_behavior(self)` - Test cleanup of old log files with real behavior.\n  - `TestLoggerCoverageExpansion.test_logger_error_handling_real_behavior(self)` - Test logger error handling with real behavior.\n  - `TestLoggerCoverageExpansion.test_logger_performance_under_load(self)` - Test logger performance under load.\n  - `TestLoggerCoverageExpansion.test_logger_memory_behavior(self)` - Test memory usage behavior of logger.\n  - `TestLoggerCoverageExpansion.test_logger_thread_safety_behavior(self)` - Test thread safety behavior of logger.\n  - `TestLoggerCoverageExpansion.test_logger_file_rotation_edge_cases(self)` - Test logger file rotation edge cases.\n  - `TestLoggerCoverageExpansion.test_logger_encoding_handling_real_behavior(self)` - Test logger encoding handling with real behavior.\n  - `TestLoggerCoverageExpansion.test_logger_concurrent_file_access(self)` - Test concurrent file access behavior.\n  - `TestLoggerCoverageExpansion.test_logger_backup_directory_creation_real_behavior(self)` - Test backup directory creation with real behavior.\n  - `TestLoggerCoverageExpansion.test_logger_formatter_real_behavior(self)` - Test logger formatter with real behavior.\n  - `TestLoggerCoverageExpansion.test_logger_level_filtering_real_behavior(self)` - Test logger level filtering with real behavior.\n  - `TestLoggerCoverageExpansion.test_get_log_file_info_real_behavior(self)` - Test get_log_file_info function with real behavior.\n  - `TestLoggerCoverageExpansion.test_setup_logging_real_behavior(self)` - Test setup_logging function with real behavior.\n  - `TestLoggerCoverageExpansion.test_toggle_verbose_logging_real_behavior(self)` - Test toggle_verbose_logging function with real behavior.\n  - `TestLoggerCoverageExpansion.test_get_verbose_mode_real_behavior(self)` - Test get_verbose_mode function with real behavior.\n  - `TestLoggerCoverageExpansion.test_set_verbose_mode_real_behavior(self)` - Test set_verbose_mode function with real behavior.\n- `TestLoggerIntegration` - Test integration behavior of Core Logger.\n  - `TestLoggerIntegration._setup(self, test_path_factory)` - Set up test environment.\n  - `TestLoggerIntegration.teardown_method(self)` - Clean up test environment.\n  - `TestLoggerIntegration.test_logger_integration_with_multiple_components(self)` - Test logger integration with multiple components.\n  - `TestLoggerIntegration.test_logger_error_recovery_with_real_operations(self)` - Test error recovery when working with real operations.\n  - `TestLoggerIntegration.test_logger_concurrent_access_safety(self)` - Test that logger handles concurrent access safely.\n  - `TestLoggerIntegration.test_logger_memory_behavior(self)` - Test memory usage behavior of logger.\n  - `TestLoggerIntegration.test_logger_thread_safety_behavior(self)` - Test thread safety behavior of logger.\n\n### tests/behavior/test_logger_coverage_expansion_phase3_simple.py\n**Functions:**\n- `test_get_log_file_info_function(self, tmp_path)` - Test get_log_file_info function with proper mocking\n- `test_get_log_file_info_with_nonexistent_files(self, tmp_path)` - Test get_log_file_info with nonexistent files\n- `test_verbose_mode_functions_simple(self, tmp_path)` - Test verbose mode setting and getting functions\n- `test_environment_detection_functions_simple(self, tmp_path)` - Test environment detection functions\n- `test_component_logger_channels_alias_simple(self, tmp_path)` - Test that 'channels' component name is aliased to 'communication_manager'\n- `test_component_logger_unknown_component_fallback_simple(self, tmp_path)` - Test that unknown component names fall back to main log file\n- `test_backup_directory_rotating_file_handler_rollover_simple(self, tmp_path)` - Test BackupDirectoryRotatingFileHandler rollover with simple conditions\n- `test_heartbeat_warning_filter_simple(self, tmp_path)` - Test HeartbeatWarningFilter basic functionality\n- `test_compress_old_logs_simple(self, tmp_path)` - Test compress_old_logs with simple conditions\n- `test_cleanup_old_archives_simple(self, tmp_path)` - Test cleanup_old_archives with simple conditions\n- `test_cleanup_old_logs_simple(self, tmp_path)` - Test cleanup_old_logs with simple conditions\n- `test_suppress_noisy_logging_simple(self, tmp_path)` - Test suppress_noisy_logging function\n- `test_setup_logging_environment_detection_simple(self, tmp_path)` - Test setup_logging with different environment configurations\n- `test_component_logger_error_handling_during_creation_simple(self, tmp_path)` - Test ComponentLogger error handling during creation\n- `test_backup_directory_rotating_file_handler_initialization_simple(self, tmp_path)` - Test BackupDirectoryRotatingFileHandler initialization with simple parameters\n- `test_logger_integration_with_multiple_components_simple(self, tmp_path)` - Test logger integration with multiple components\n- `test_logger_performance_under_high_load_simple(self, tmp_path)` - Test logger performance under high load conditions\n**Classes:**\n- `TestLoggerCoverageExpansionPhase3Simple` - Simple test suite to expand logger coverage from 68% to 75%+\n  - `TestLoggerCoverageExpansionPhase3Simple.test_get_log_file_info_function(self, tmp_path)` - Test get_log_file_info function with proper mocking\n  - `TestLoggerCoverageExpansionPhase3Simple.test_get_log_file_info_with_nonexistent_files(self, tmp_path)` - Test get_log_file_info with nonexistent files\n  - `TestLoggerCoverageExpansionPhase3Simple.test_verbose_mode_functions_simple(self, tmp_path)` - Test verbose mode setting and getting functions\n  - `TestLoggerCoverageExpansionPhase3Simple.test_environment_detection_functions_simple(self, tmp_path)` - Test environment detection functions\n  - `TestLoggerCoverageExpansionPhase3Simple.test_component_logger_channels_alias_simple(self, tmp_path)` - Test that 'channels' component name is aliased to 'communication_manager'\n  - `TestLoggerCoverageExpansionPhase3Simple.test_component_logger_unknown_component_fallback_simple(self, tmp_path)` - Test that unknown component names fall back to main log file\n  - `TestLoggerCoverageExpansionPhase3Simple.test_backup_directory_rotating_file_handler_rollover_simple(self, tmp_path)` - Test BackupDirectoryRotatingFileHandler rollover with simple conditions\n  - `TestLoggerCoverageExpansionPhase3Simple.test_heartbeat_warning_filter_simple(self, tmp_path)` - Test HeartbeatWarningFilter basic functionality\n  - `TestLoggerCoverageExpansionPhase3Simple.test_compress_old_logs_simple(self, tmp_path)` - Test compress_old_logs with simple conditions\n  - `TestLoggerCoverageExpansionPhase3Simple.test_cleanup_old_archives_simple(self, tmp_path)` - Test cleanup_old_archives with simple conditions\n  - `TestLoggerCoverageExpansionPhase3Simple.test_cleanup_old_logs_simple(self, tmp_path)` - Test cleanup_old_logs with simple conditions\n  - `TestLoggerCoverageExpansionPhase3Simple.test_suppress_noisy_logging_simple(self, tmp_path)` - Test suppress_noisy_logging function\n  - `TestLoggerCoverageExpansionPhase3Simple.test_setup_logging_environment_detection_simple(self, tmp_path)` - Test setup_logging with different environment configurations\n  - `TestLoggerCoverageExpansionPhase3Simple.test_component_logger_error_handling_during_creation_simple(self, tmp_path)` - Test ComponentLogger error handling during creation\n  - `TestLoggerCoverageExpansionPhase3Simple.test_backup_directory_rotating_file_handler_initialization_simple(self, tmp_path)` - Test BackupDirectoryRotatingFileHandler initialization with simple parameters\n  - `TestLoggerCoverageExpansionPhase3Simple.test_logger_integration_with_multiple_components_simple(self, tmp_path)` - Test logger integration with multiple components\n  - `TestLoggerCoverageExpansionPhase3Simple.test_logger_performance_under_high_load_simple(self, tmp_path)` - Test logger performance under high load conditions\n\n### tests/behavior/test_message_behavior.py\n**Functions:**\n- `test_get_message_categories_success(self)` - Test getting message categories successfully.\n- `test_get_message_categories_default(self)` - Test getting default message categories.\n- `test_get_message_categories_custom(self)` - Test getting custom message categories.\n- `test_get_message_categories_empty(self)` - Test getting message categories when none are defined.\n- `test_load_default_messages_success(self, test_data_dir)` - Test loading default messages successfully.\n- `test_load_default_messages_file_not_found(self, test_data_dir, mock_config)` - Test loading default messages when file doesn't exist.\n- `test_load_default_messages_invalid_json(self, test_data_dir, mock_config)` - Test loading default messages with invalid JSON.\n- `test_add_message_success(self, test_data_dir)` - Test adding a message successfully.\n- `test_edit_message_success(self, test_data_dir)` - Test editing a message successfully.\n- `test_edit_message_not_found(self, test_data_dir)` - Test editing a message that doesn't exist.\n- `test_update_message_success(self, test_data_dir)` - Test updating a message successfully.\n- `test_delete_message_success(self, test_data_dir)` - Test deleting a message successfully.\n- `test_delete_message_not_found(self, test_data_dir)` - Test deleting a message that doesn't exist.\n- `test_store_sent_message_success(self, test_data_dir)` - Test storing a sent message successfully.\n- `test_get_recent_messages_success(self, test_data_dir)` - Test getting last 10 sent messages successfully.\n- `test_get_recent_messages_empty(self, test_data_dir)` - Test getting last 10 messages when none exist.\n- `test_create_message_file_from_defaults_success(self, test_data_dir)` - Test creating message file from defaults successfully.\n- `test_ensure_user_message_files_success(self, test_data_dir)` - Test ensuring user message files exist successfully.\n- `test_add_message_file_error(self, test_data_dir)` - Test add_message handles file errors gracefully.\n- `test_edit_message_file_error(self, test_data_dir)` - Test edit_message handles file errors gracefully.\n- `test_delete_message_file_error(self, test_data_dir)` - Test delete_message handles file errors gracefully.\n- `test_store_sent_message_file_error(self, test_data_dir)` - Test store_sent_message handles file errors gracefully.\n- `test_full_message_lifecycle(self, test_data_dir)` - Test complete message lifecycle (add, edit, delete).\n**Classes:**\n- `TestMessageCategories` - Test message category functionality.\n  - `TestMessageCategories.test_get_message_categories_success(self)` - Test getting message categories successfully.\n  - `TestMessageCategories.test_get_message_categories_default(self)` - Test getting default message categories.\n  - `TestMessageCategories.test_get_message_categories_custom(self)` - Test getting custom message categories.\n  - `TestMessageCategories.test_get_message_categories_empty(self)` - Test getting message categories when none are defined.\n- `TestDefaultMessages` - Test default message loading functionality.\n  - `TestDefaultMessages.test_load_default_messages_success(self, test_data_dir)` - Test loading default messages successfully.\n  - `TestDefaultMessages.test_load_default_messages_file_not_found(self, test_data_dir, mock_config)` - Test loading default messages when file doesn't exist.\n  - `TestDefaultMessages.test_load_default_messages_invalid_json(self, test_data_dir, mock_config)` - Test loading default messages with invalid JSON.\n- `TestMessageCRUD` - Test message CRUD operations.\n  - `TestMessageCRUD.test_add_message_success(self, test_data_dir)` - Test adding a message successfully.\n  - `TestMessageCRUD.test_edit_message_success(self, test_data_dir)` - Test editing a message successfully.\n  - `TestMessageCRUD.test_edit_message_not_found(self, test_data_dir)` - Test editing a message that doesn't exist.\n  - `TestMessageCRUD.test_update_message_success(self, test_data_dir)` - Test updating a message successfully.\n  - `TestMessageCRUD.test_delete_message_success(self, test_data_dir)` - Test deleting a message successfully.\n  - `TestMessageCRUD.test_delete_message_not_found(self, test_data_dir)` - Test deleting a message that doesn't exist.\n- `TestSentMessages` - Test sent message tracking functionality.\n  - `TestSentMessages.test_store_sent_message_success(self, test_data_dir)` - Test storing a sent message successfully.\n  - `TestSentMessages.test_get_recent_messages_success(self, test_data_dir)` - Test getting last 10 sent messages successfully.\n  - `TestSentMessages.test_get_recent_messages_empty(self, test_data_dir)` - Test getting last 10 messages when none exist.\n- `TestMessageFileManagement` - Test message file creation and management.\n  - `TestMessageFileManagement.test_create_message_file_from_defaults_success(self, test_data_dir)` - Test creating message file from defaults successfully.\n  - `TestMessageFileManagement.test_ensure_user_message_files_success(self, test_data_dir)` - Test ensuring user message files exist successfully.\n- `TestErrorHandling` - Test error handling in message management functions.\n  - `TestErrorHandling.test_add_message_file_error(self, test_data_dir)` - Test add_message handles file errors gracefully.\n  - `TestErrorHandling.test_edit_message_file_error(self, test_data_dir)` - Test edit_message handles file errors gracefully.\n  - `TestErrorHandling.test_delete_message_file_error(self, test_data_dir)` - Test delete_message handles file errors gracefully.\n  - `TestErrorHandling.test_store_sent_message_file_error(self, test_data_dir)` - Test store_sent_message handles file errors gracefully.\n- `TestIntegration` - Test integration between message management functions.\n  - `TestIntegration.test_full_message_lifecycle(self, test_data_dir)` - Test complete message lifecycle (add, edit, delete).\n\n### tests/behavior/test_observability_logging.py\n**Functions:**\n- `test_component_logs_isolation_and_errors_capture(tmp_path, monkeypatch)` - Verify component logs go to their files, do not duplicate into app.log, and errors go to errors.log.\n\n### tests/behavior/test_response_tracking_behavior.py\n**Functions:**\n- `test_store_user_response_creates_actual_file(self, test_data_dir)` - Test that storing user response actually creates data files.\n- `test_store_user_response_persists_multiple_entries(self, test_data_dir)` - Test that storing multiple responses actually persists all entries.\n- `test_store_chat_interaction_creates_chat_log(self, test_data_dir)` - Test that chat interactions are stored in chat interactions file.\n- `test_get_recent_responses_returns_actual_data(self, test_data_dir)` - Test that getting recent responses actually returns stored data.\n- `test_get_recent_checkins_returns_checkin_data(self, test_data_dir)` - Test that getting recent checkins returns actual checkin data.\n- `test_get_recent_chat_interactions_returns_chat_data(self, test_data_dir)` - Test that getting recent chat interactions returns actual chat data.\n- `test_get_user_checkin_preferences_returns_actual_preferences(self, test_data_dir)` - Test that getting user checkin preferences returns actual preference data.\n- `test_is_user_checkins_enabled_checks_actual_account_data(self, test_data_dir)` - Test that checking if user checkins are enabled checks actual account data.\n- `test_get_user_checkin_questions_returns_actual_questions(self, test_data_dir)` - Test that getting user checkin questions returns actual question configuration.\n- `test_get_user_info_for_tracking_returns_complete_user_info(self, test_data_dir)` - Test that getting user info for tracking returns complete user information.\n- `test_track_user_response_stores_checkin(self, test_data_dir)` - Test that tracking user response stores checkin data.\n- `test_track_user_response_stores_chat_interaction(self, test_data_dir)` - Test that tracking user response stores chat interaction data.\n- `test_track_user_response_stores_generic_response(self, test_data_dir)` - Test that tracking user response stores generic response data.\n- `test_response_tracking_error_handling_preserves_system_stability(self, test_data_dir)` - Test that response tracking error handling preserves system stability.\n- `test_response_tracking_performance_under_load(self, test_data_dir)` - Test that response tracking performs well under load.\n- `test_response_tracking_data_integrity(self, test_data_dir)` - Test that response tracking maintains data integrity.\n- `test_response_tracking_integration_with_user_data(self, test_data_dir)` - Test integration between response tracking and user data management.\n- `test_response_tracking_error_recovery_with_real_files(self, test_data_dir)` - Test error recovery when working with real files.\n- `test_response_tracking_concurrent_access_safety(self, test_data_dir)` - Test that response tracking handles concurrent access safely.\n**Classes:**\n- `TestResponseTrackingBehavior` - Test real behavior of response tracking functions.\n  - `TestResponseTrackingBehavior.test_store_user_response_creates_actual_file(self, test_data_dir)` - Test that storing user response actually creates data files.\n  - `TestResponseTrackingBehavior.test_store_user_response_persists_multiple_entries(self, test_data_dir)` - Test that storing multiple responses actually persists all entries.\n  - `TestResponseTrackingBehavior.test_store_chat_interaction_creates_chat_log(self, test_data_dir)` - Test that chat interactions are stored in chat interactions file.\n  - `TestResponseTrackingBehavior.test_get_recent_responses_returns_actual_data(self, test_data_dir)` - Test that getting recent responses actually returns stored data.\n  - `TestResponseTrackingBehavior.test_get_recent_checkins_returns_checkin_data(self, test_data_dir)` - Test that getting recent checkins returns actual checkin data.\n  - `TestResponseTrackingBehavior.test_get_recent_chat_interactions_returns_chat_data(self, test_data_dir)` - Test that getting recent chat interactions returns actual chat data.\n  - `TestResponseTrackingBehavior.test_get_user_checkin_preferences_returns_actual_preferences(self, test_data_dir)` - Test that getting user checkin preferences returns actual preference data.\n  - `TestResponseTrackingBehavior.test_is_user_checkins_enabled_checks_actual_account_data(self, test_data_dir)` - Test that checking if user checkins are enabled checks actual account data.\n  - `TestResponseTrackingBehavior.test_get_user_checkin_questions_returns_actual_questions(self, test_data_dir)` - Test that getting user checkin questions returns actual question configuration.\n  - `TestResponseTrackingBehavior.test_get_user_info_for_tracking_returns_complete_user_info(self, test_data_dir)` - Test that getting user info for tracking returns complete user information.\n  - `TestResponseTrackingBehavior.test_track_user_response_stores_checkin(self, test_data_dir)` - Test that tracking user response stores checkin data.\n  - `TestResponseTrackingBehavior.test_track_user_response_stores_chat_interaction(self, test_data_dir)` - Test that tracking user response stores chat interaction data.\n  - `TestResponseTrackingBehavior.test_track_user_response_stores_generic_response(self, test_data_dir)` - Test that tracking user response stores generic response data.\n  - `TestResponseTrackingBehavior.test_response_tracking_error_handling_preserves_system_stability(self, test_data_dir)` - Test that response tracking error handling preserves system stability.\n  - `TestResponseTrackingBehavior.test_response_tracking_performance_under_load(self, test_data_dir)` - Test that response tracking performs well under load.\n  - `TestResponseTrackingBehavior.test_response_tracking_data_integrity(self, test_data_dir)` - Test that response tracking maintains data integrity.\n- `TestResponseTrackingIntegration` - Test integration between response tracking functions.\n  - `TestResponseTrackingIntegration.test_response_tracking_integration_with_user_data(self, test_data_dir)` - Test integration between response tracking and user data management.\n  - `TestResponseTrackingIntegration.test_response_tracking_error_recovery_with_real_files(self, test_data_dir)` - Test error recovery when working with real files.\n  - `TestResponseTrackingIntegration.test_response_tracking_concurrent_access_safety(self, test_data_dir)` - Test that response tracking handles concurrent access safely.\n\n### tests/behavior/test_schedule_management_behavior.py\n**Functions:**\n- `test_get_schedule_time_periods_creates_cache(self, test_data_dir)` - Test that getting schedule periods actually creates cache entries.\n- `test_set_schedule_period_active_persists_changes(self, test_data_dir)` - Test that setting period active actually persists changes to user data.\n- `test_clear_schedule_periods_cache_removes_entries(self, test_data_dir)` - Test that clearing schedule periods cache actually removes cache entries.\n- `test_validate_and_format_time_enforces_rules(self)` - Test that time validation actually enforces format rules.\n- `test_time_conversion_functions_work_correctly(self)` - Test that time conversion functions produce accurate results.\n- `test_get_current_day_names_returns_actual_days(self)` - Test that get_current_day_names returns actual current day information.\n- `test_schedule_period_activation_integration(self, test_data_dir)` - Test complete integration of schedule period activation workflow.\n- `test_schedule_cache_invalidation(self, test_data_dir)` - Test that schedule cache is properly invalidated when data changes.\n- `test_set_schedule_periods_persists_complete_data(self, test_data_dir)` - Test that setting schedule periods actually persists complete data structure.\n- `test_set_schedule_days_persists_day_changes(self, test_data_dir)` - Test that setting schedule days actually persists day changes.\n- `test_schedule_period_crud_with_usercontext_mocking(self, test_data_dir)` - Test CRUD operations with proper UserContext mocking.\n- `test_schedule_period_operations_with_error_handling(self, test_data_dir)` - Test that schedule operations handle errors gracefully.\n- `test_schedule_period_validation_errors(self, test_data_dir)` - Test that schedule operations validate input correctly.\n- `test_schedule_period_operations_with_scheduler_manager(self, test_data_dir)` - Test schedule operations with scheduler manager integration.\n- `test_schedule_period_operations_with_real_user_data(self, test_data_dir)` - Test schedule operations with realistic user data setup.\n- `test_schedule_period_edge_cases(self, test_data_dir)` - Test schedule operations with edge cases and boundary conditions.\n**Classes:**\n- `TestScheduleManagementBehavior` - Test schedule management real behavior and side effects.\n  - `TestScheduleManagementBehavior.test_get_schedule_time_periods_creates_cache(self, test_data_dir)` - Test that getting schedule periods actually creates cache entries.\n  - `TestScheduleManagementBehavior.test_set_schedule_period_active_persists_changes(self, test_data_dir)` - Test that setting period active actually persists changes to user data.\n  - `TestScheduleManagementBehavior.test_clear_schedule_periods_cache_removes_entries(self, test_data_dir)` - Test that clearing schedule periods cache actually removes cache entries.\n  - `TestScheduleManagementBehavior.test_validate_and_format_time_enforces_rules(self)` - Test that time validation actually enforces format rules.\n  - `TestScheduleManagementBehavior.test_time_conversion_functions_work_correctly(self)` - Test that time conversion functions produce accurate results.\n  - `TestScheduleManagementBehavior.test_get_current_day_names_returns_actual_days(self)` - Test that get_current_day_names returns actual current day information.\n  - `TestScheduleManagementBehavior.test_schedule_period_activation_integration(self, test_data_dir)` - Test complete integration of schedule period activation workflow.\n  - `TestScheduleManagementBehavior.test_schedule_cache_invalidation(self, test_data_dir)` - Test that schedule cache is properly invalidated when data changes.\n  - `TestScheduleManagementBehavior.test_set_schedule_periods_persists_complete_data(self, test_data_dir)` - Test that setting schedule periods actually persists complete data structure.\n  - `TestScheduleManagementBehavior.test_set_schedule_days_persists_day_changes(self, test_data_dir)` - Test that setting schedule days actually persists day changes.\n  - `TestScheduleManagementBehavior.test_schedule_period_crud_with_usercontext_mocking(self, test_data_dir)` - Test CRUD operations with proper UserContext mocking.\n  - `TestScheduleManagementBehavior.test_schedule_period_operations_with_error_handling(self, test_data_dir)` - Test that schedule operations handle errors gracefully.\n  - `TestScheduleManagementBehavior.test_schedule_period_validation_errors(self, test_data_dir)` - Test that schedule operations validate input correctly.\n  - `TestScheduleManagementBehavior.test_schedule_period_operations_with_scheduler_manager(self, test_data_dir)` - Test schedule operations with scheduler manager integration.\n  - `TestScheduleManagementBehavior.test_schedule_period_operations_with_real_user_data(self, test_data_dir)` - Test schedule operations with realistic user data setup.\n  - `TestScheduleManagementBehavior.test_schedule_period_edge_cases(self, test_data_dir)` - Test schedule operations with edge cases and boundary conditions.\n\n### tests/behavior/test_scheduler_behavior.py\n**Functions:**\n- `mock_communication_manager()` - Create a mock communication manager.\n- `scheduler_manager(self, mock_communication_manager)` - Create a SchedulerManager instance for testing.\n- `test_scheduler_manager_initialization(self, mock_communication_manager)` - Test SchedulerManager initialization.\n- `test_stop_scheduler_no_thread(self, scheduler_manager)` - Test stopping scheduler when no thread is running.\n- `test_is_job_for_category_no_jobs(self, scheduler_manager)` - Test checking for jobs when no jobs exist.\n- `test_is_job_for_category_with_matching_job(self, scheduler_manager)` - Test checking for jobs when a matching job exists.\n- `test_is_job_for_category_with_non_matching_job(self, scheduler_manager)` - Test checking for jobs when no matching job exists.\n- `test_get_random_time_within_period_valid_times(self, scheduler_manager)` - Test getting random time within a valid time period.\n- `test_get_random_time_within_period_invalid_times(self, scheduler_manager)` - Test getting random time with invalid time format.\n- `test_is_time_conflict_no_conflicts(self, scheduler_manager)` - Test time conflict detection when no conflicts exist.\n- `test_cleanup_old_tasks(self, scheduler_manager, test_data_dir)` - Test cleaning up old scheduled tasks.\n- `test_log_scheduled_tasks(self, scheduler_manager)` - Test logging of scheduled tasks.\n- `test_get_user_categories_success(self, mock_user_data)` - Test getting user categories successfully.\n- `test_get_user_categories_no_user(self)` - Test getting categories for non-existent user.\n- `test_get_user_task_preferences_success(self, mock_user_data)` - Test getting user task preferences successfully.\n- `test_get_user_task_preferences_no_user(self)` - Test getting task preferences for non-existent user.\n- `test_get_user_checkin_preferences_success(self, mock_user_data)` - Test getting user check-in preferences successfully.\n- `test_get_user_checkin_preferences_no_user(self)` - Test getting check-in preferences for non-existent user.\n- `test_scheduler_lifecycle(self, mock_communication_manager, test_data_dir)` - Test complete scheduler lifecycle.\n- `test_scheduler_with_mock_users(self, mock_communication_manager)` - Test scheduler with mock user data.\n- `test_scheduler_with_empty_user_list(self, mock_communication_manager)` - Test scheduler behavior with no users.\n- `test_scheduler_with_invalid_user_data(self, mock_communication_manager)` - Test scheduler behavior with invalid user data.\n- `test_random_time_generation_consistency(self, mock_communication_manager)` - Test that random time generation is consistent within bounds.\n- `test_schedule_all_task_reminders_success(self, test_data_dir)` - Test scheduling all task reminders for a user.\n- `test_schedule_all_task_reminders_disabled(self, test_data_dir)` - Test scheduling task reminders when task management is disabled.\n**Classes:**\n- `TestSchedulerManager` - Test SchedulerManager functionality.\n  - `TestSchedulerManager.scheduler_manager(self, mock_communication_manager)` - Create a SchedulerManager instance for testing.\n  - `TestSchedulerManager.test_scheduler_manager_initialization(self, mock_communication_manager)` - Test SchedulerManager initialization.\n  - `TestSchedulerManager.test_stop_scheduler_no_thread(self, scheduler_manager)` - Test stopping scheduler when no thread is running.\n  - `TestSchedulerManager.test_is_job_for_category_no_jobs(self, scheduler_manager)` - Test checking for jobs when no jobs exist.\n  - `TestSchedulerManager.test_is_job_for_category_with_matching_job(self, scheduler_manager)` - Test checking for jobs when a matching job exists.\n  - `TestSchedulerManager.test_is_job_for_category_with_non_matching_job(self, scheduler_manager)` - Test checking for jobs when no matching job exists.\n  - `TestSchedulerManager.test_get_random_time_within_period_valid_times(self, scheduler_manager)` - Test getting random time within a valid time period.\n  - `TestSchedulerManager.test_get_random_time_within_period_invalid_times(self, scheduler_manager)` - Test getting random time with invalid time format.\n  - `TestSchedulerManager.test_is_time_conflict_no_conflicts(self, scheduler_manager)` - Test time conflict detection when no conflicts exist.\n  - `TestSchedulerManager.test_cleanup_old_tasks(self, scheduler_manager, test_data_dir)` - Test cleaning up old scheduled tasks.\n  - `TestSchedulerManager.test_log_scheduled_tasks(self, scheduler_manager)` - Test logging of scheduled tasks.\n- `TestSchedulerFunctions` - Test standalone scheduler functions.\n  - `TestSchedulerFunctions.test_get_user_categories_success(self, mock_user_data)` - Test getting user categories successfully.\n  - `TestSchedulerFunctions.test_get_user_categories_no_user(self)` - Test getting categories for non-existent user.\n  - `TestSchedulerFunctions.test_get_user_task_preferences_success(self, mock_user_data)` - Test getting user task preferences successfully.\n  - `TestSchedulerFunctions.test_get_user_task_preferences_no_user(self)` - Test getting task preferences for non-existent user.\n  - `TestSchedulerFunctions.test_get_user_checkin_preferences_success(self, mock_user_data)` - Test getting user check-in preferences successfully.\n  - `TestSchedulerFunctions.test_get_user_checkin_preferences_no_user(self)` - Test getting check-in preferences for non-existent user.\n- `TestSchedulerIntegration` - Test scheduler integration scenarios.\n  - `TestSchedulerIntegration.test_scheduler_lifecycle(self, mock_communication_manager, test_data_dir)` - Test complete scheduler lifecycle.\n  - `TestSchedulerIntegration.test_scheduler_with_mock_users(self, mock_communication_manager)` - Test scheduler with mock user data.\n- `TestSchedulerEdgeCases` - Test scheduler edge cases and error conditions.\n  - `TestSchedulerEdgeCases.test_scheduler_with_empty_user_list(self, mock_communication_manager)` - Test scheduler behavior with no users.\n  - `TestSchedulerEdgeCases.test_scheduler_with_invalid_user_data(self, mock_communication_manager)` - Test scheduler behavior with invalid user data.\n  - `TestSchedulerEdgeCases.test_random_time_generation_consistency(self, mock_communication_manager)` - Test that random time generation is consistent within bounds.\n- `TestTaskReminderFunctions` - Test task reminder specific functions.\n  - `TestTaskReminderFunctions.test_schedule_all_task_reminders_success(self, test_data_dir)` - Test scheduling all task reminders for a user.\n  - `TestTaskReminderFunctions.test_schedule_all_task_reminders_disabled(self, test_data_dir)` - Test scheduling task reminders when task management is disabled.\n\n### tests/behavior/test_scheduler_coverage_expansion.py\n**Functions:**\n- `mock_communication_manager()` - Create a mock communication manager.\n- `scheduler_manager(mock_communication_manager)` - Create a SchedulerManager instance for testing.\n- `test_scheduler_manager_initialization_real_behavior(self, mock_communication_manager)` - Test SchedulerManager initialization with real behavior verification.\n- `test_run_daily_scheduler_thread_creation_real_behavior(self, scheduler_manager)` - Test that run_daily_scheduler creates a thread and starts it.\n- `test_stop_scheduler_thread_cleanup_real_behavior(self, scheduler_manager)` - Test that stop_scheduler properly cleans up the thread.\n- `test_stop_scheduler_no_thread_graceful_handling(self, scheduler_manager)` - Test stopping scheduler when no thread is running.\n- `test_schedule_all_users_immediately_real_behavior(self, scheduler_manager, test_data_dir)` - Test scheduling all users immediately with real behavior verification.\n- `test_schedule_new_user_real_behavior(self, scheduler_manager, test_data_dir)` - Test scheduling a newly created user.\n- `test_schedule_daily_message_job_real_behavior(self, scheduler_manager)` - Test scheduling daily messages for a specific user and category.\n- `test_schedule_daily_message_job_no_periods(self, scheduler_manager)` - Test scheduling daily messages when no periods are available.\n- `test_schedule_message_for_period_real_behavior(self, scheduler_manager)` - Test scheduling a message for a specific period.\n- `test_schedule_message_for_period_time_conflict_retry(self, scheduler_manager)` - Test scheduling with time conflicts and retry logic.\n- `test_schedule_all_task_reminders_real_behavior(self, scheduler_manager)` - Test scheduling all task reminders for a user.\n- `test_schedule_all_task_reminders_tasks_disabled(self, scheduler_manager)` - Test scheduling task reminders when tasks are disabled.\n- `test_schedule_task_reminder_at_time_real_behavior(self, scheduler_manager)` - Test scheduling a task reminder at a specific time.\n- `test_schedule_task_reminder_at_time_completed_task(self, scheduler_manager)` - Test scheduling task reminder for a completed task.\n- `test_get_random_time_within_task_period_real_behavior(self, scheduler_manager)` - Test generating random time within a task period.\n- `test_is_time_conflict_with_conflict_real_behavior(self, scheduler_manager)` - Test time conflict detection when conflicts exist.\n- `test_is_time_conflict_no_conflict_different_user(self, scheduler_manager)` - Test time conflict detection with different user.\n- `test_get_random_time_within_period_future_scheduling(self, scheduler_manager)` - Test getting random time for future scheduling.\n- `test_get_random_time_within_period_invalid_period(self, scheduler_manager)` - Test getting random time with invalid period.\n- `test_handle_sending_scheduled_message_success(self, scheduler_manager)` - Test successful message sending.\n- `test_handle_sending_scheduled_message_with_retries(self, scheduler_manager)` - Test message sending with retry logic.\n- `test_handle_task_reminder_success(self, scheduler_manager)` - Test successful task reminder sending.\n- `test_handle_task_reminder_completed_task(self, scheduler_manager)` - Test task reminder for completed task.\n- `test_set_wake_timer_real_behavior(self, scheduler_manager)` - Test setting wake timer for scheduled messages.\n- `test_set_wake_timer_failure_handling(self, scheduler_manager)` - Test wake timer failure handling.\n- `test_cleanup_old_tasks_real_behavior(self, scheduler_manager)` - Test cleaning up old scheduled tasks.\n- `test_schedule_all_task_reminders_standalone_real_behavior(self)` - Test standalone schedule_all_task_reminders function.\n- `test_process_user_schedules_real_behavior(self)` - Test processing schedules for a specific user.\n- `test_process_category_schedule_real_behavior(self)` - Test processing schedule for a specific category.\n- `test_get_user_checkin_preferences_real_behavior(self)` - Test getting user check-in preferences.\n- `test_scheduler_manager_no_communication_manager(self)` - Test scheduler manager with no communication manager.\n- `test_handle_sending_scheduled_message_no_communication_manager(self, scheduler_manager)` - Test message sending with no communication manager.\n- `test_handle_task_reminder_no_communication_manager(self, scheduler_manager)` - Test task reminder with no communication manager.\n- `test_get_random_time_within_period_missing_times(self, scheduler_manager)` - Test getting random time with missing start/end times.\n- `test_schedule_message_for_period_max_retries_exceeded(self, scheduler_manager)` - Test scheduling with max retries exceeded.\n- `test_scheduler_loop_daily_job_scheduling_real_behavior(self, scheduler_manager, test_data_dir)` - Test that scheduler loop properly schedules daily jobs for all users.\n- `test_scheduler_loop_error_handling_real_behavior(self, scheduler_manager)` - Test scheduler loop error handling when scheduling fails.\n- `test_scheduler_loop_stop_event_handling_real_behavior(self, scheduler_manager)` - Test scheduler loop properly responds to stop events.\n- `test_schedule_checkin_at_exact_time_real_behavior(self, scheduler_manager)` - Test scheduling check-in at exact time with real behavior.\n- `test_schedule_checkin_missing_period_real_behavior(self, scheduler_manager)` - Test check-in scheduling with missing time period.\n- `test_schedule_checkin_missing_start_time_real_behavior(self, scheduler_manager)` - Test check-in scheduling with missing start time.\n- `test_schedule_all_task_reminders_with_tasks_real_behavior(self, scheduler_manager)` - Test scheduling task reminders when tasks exist.\n- `test_schedule_all_task_reminders_no_tasks_real_behavior(self, scheduler_manager)` - Test scheduling task reminders when no tasks exist.\n- `test_schedule_all_task_reminders_missing_times_real_behavior(self, scheduler_manager)` - Test scheduling task reminders with missing start/end times.\n- `test_set_wake_timer_success_real_behavior(self, scheduler_manager)` - Test successful wake timer setting.\n- `test_set_wake_timer_process_failure_real_behavior(self, scheduler_manager)` - Test wake timer setting when process fails.\n- `test_select_task_for_reminder_empty_list_real_behavior(self, scheduler_manager)` - Test selecting task from empty list returns None.\n- `test_select_task_for_reminder_single_task_real_behavior(self, scheduler_manager)` - Test selecting task from single-item list returns that task.\n- `test_select_task_for_reminder_priority_weighting_real_behavior(self, scheduler_manager)` - Test priority-based weighting works correctly.\n- `test_select_task_for_reminder_due_today_weighting_real_behavior(self, scheduler_manager)` - Test due date proximity weighting for tasks due today.\n- `test_select_task_for_reminder_overdue_weighting_real_behavior(self, scheduler_manager)` - Test overdue task weighting with exponential increase.\n- `test_select_task_for_reminder_no_due_date_weighting_real_behavior(self, scheduler_manager)` - Test tasks without due dates get slight reduction in weight.\n- `test_select_task_for_reminder_invalid_date_format_real_behavior(self, scheduler_manager)` - Test handling of invalid date formats gracefully.\n- `test_select_task_for_reminder_large_task_list_real_behavior(self, scheduler_manager)` - Test performance and correctness with large task lists.\n- `test_select_task_for_reminder_zero_weights_fallback_real_behavior(self, scheduler_manager)` - Test fallback to random selection when all weights are zero.\n- `test_select_task_for_reminder_exception_handling_real_behavior(self, scheduler_manager)` - Test exception handling with fallback to random selection.\n- `test_select_task_for_reminder_week_proximity_weighting_real_behavior(self, scheduler_manager)` - Test sliding scale weighting for tasks due within a week.\n- `test_select_task_for_reminder_month_proximity_weighting_real_behavior(self, scheduler_manager)` - Test sliding scale weighting for tasks due within a month.\n**Classes:**\n- `TestSchedulerManagerLifecycle` - Test SchedulerManager lifecycle and threading.\n  - `TestSchedulerManagerLifecycle.test_scheduler_manager_initialization_real_behavior(self, mock_communication_manager)` - Test SchedulerManager initialization with real behavior verification.\n  - `TestSchedulerManagerLifecycle.test_run_daily_scheduler_thread_creation_real_behavior(self, scheduler_manager)` - Test that run_daily_scheduler creates a thread and starts it.\n  - `TestSchedulerManagerLifecycle.test_stop_scheduler_thread_cleanup_real_behavior(self, scheduler_manager)` - Test that stop_scheduler properly cleans up the thread.\n  - `TestSchedulerManagerLifecycle.test_stop_scheduler_no_thread_graceful_handling(self, scheduler_manager)` - Test stopping scheduler when no thread is running.\n- `TestMessageScheduling` - Test message scheduling functionality.\n  - `TestMessageScheduling.test_schedule_all_users_immediately_real_behavior(self, scheduler_manager, test_data_dir)` - Test scheduling all users immediately with real behavior verification.\n  - `TestMessageScheduling.test_schedule_new_user_real_behavior(self, scheduler_manager, test_data_dir)` - Test scheduling a newly created user.\n  - `TestMessageScheduling.test_schedule_daily_message_job_real_behavior(self, scheduler_manager)` - Test scheduling daily messages for a specific user and category.\n  - `TestMessageScheduling.test_schedule_daily_message_job_no_periods(self, scheduler_manager)` - Test scheduling daily messages when no periods are available.\n  - `TestMessageScheduling.test_schedule_message_for_period_real_behavior(self, scheduler_manager)` - Test scheduling a message for a specific period.\n  - `TestMessageScheduling.test_schedule_message_for_period_time_conflict_retry(self, scheduler_manager)` - Test scheduling with time conflicts and retry logic.\n- `TestTaskReminderScheduling` - Test task reminder scheduling functionality.\n  - `TestTaskReminderScheduling.test_schedule_all_task_reminders_real_behavior(self, scheduler_manager)` - Test scheduling all task reminders for a user.\n  - `TestTaskReminderScheduling.test_schedule_all_task_reminders_tasks_disabled(self, scheduler_manager)` - Test scheduling task reminders when tasks are disabled.\n  - `TestTaskReminderScheduling.test_schedule_task_reminder_at_time_real_behavior(self, scheduler_manager)` - Test scheduling a task reminder at a specific time.\n  - `TestTaskReminderScheduling.test_schedule_task_reminder_at_time_completed_task(self, scheduler_manager)` - Test scheduling task reminder for a completed task.\n  - `TestTaskReminderScheduling.test_get_random_time_within_task_period_real_behavior(self, scheduler_manager)` - Test generating random time within a task period.\n- `TestTimeManagement` - Test time management and conflict detection.\n  - `TestTimeManagement.test_is_time_conflict_with_conflict_real_behavior(self, scheduler_manager)` - Test time conflict detection when conflicts exist.\n  - `TestTimeManagement.test_is_time_conflict_no_conflict_different_user(self, scheduler_manager)` - Test time conflict detection with different user.\n  - `TestTimeManagement.test_get_random_time_within_period_future_scheduling(self, scheduler_manager)` - Test getting random time for future scheduling.\n  - `TestTimeManagement.test_get_random_time_within_period_invalid_period(self, scheduler_manager)` - Test getting random time with invalid period.\n- `TestMessageHandling` - Test message handling and retry logic.\n  - `TestMessageHandling.test_handle_sending_scheduled_message_success(self, scheduler_manager)` - Test successful message sending.\n  - `TestMessageHandling.test_handle_sending_scheduled_message_with_retries(self, scheduler_manager)` - Test message sending with retry logic.\n  - `TestMessageHandling.test_handle_task_reminder_success(self, scheduler_manager)` - Test successful task reminder sending.\n  - `TestMessageHandling.test_handle_task_reminder_completed_task(self, scheduler_manager)` - Test task reminder for completed task.\n- `TestWakeTimerFunctionality` - Test wake timer functionality (Windows scheduled tasks).\n  - `TestWakeTimerFunctionality.test_set_wake_timer_real_behavior(self, scheduler_manager)` - Test setting wake timer for scheduled messages.\n  - `TestWakeTimerFunctionality.test_set_wake_timer_failure_handling(self, scheduler_manager)` - Test wake timer failure handling.\n- `TestCleanupOperations` - Test cleanup operations.\n  - `TestCleanupOperations.test_cleanup_old_tasks_real_behavior(self, scheduler_manager)` - Test cleaning up old scheduled tasks.\n- `TestStandaloneFunctions` - Test standalone scheduler functions.\n  - `TestStandaloneFunctions.test_schedule_all_task_reminders_standalone_real_behavior(self)` - Test standalone schedule_all_task_reminders function.\n  - `TestStandaloneFunctions.test_process_user_schedules_real_behavior(self)` - Test processing schedules for a specific user.\n  - `TestStandaloneFunctions.test_process_category_schedule_real_behavior(self)` - Test processing schedule for a specific category.\n  - `TestStandaloneFunctions.test_get_user_checkin_preferences_real_behavior(self)` - Test getting user check-in preferences.\n- `TestErrorHandling` - Test error handling and edge cases.\n  - `TestErrorHandling.test_scheduler_manager_no_communication_manager(self)` - Test scheduler manager with no communication manager.\n  - `TestErrorHandling.test_handle_sending_scheduled_message_no_communication_manager(self, scheduler_manager)` - Test message sending with no communication manager.\n  - `TestErrorHandling.test_handle_task_reminder_no_communication_manager(self, scheduler_manager)` - Test task reminder with no communication manager.\n  - `TestErrorHandling.test_get_random_time_within_period_missing_times(self, scheduler_manager)` - Test getting random time with missing start/end times.\n  - `TestErrorHandling.test_schedule_message_for_period_max_retries_exceeded(self, scheduler_manager)` - Test scheduling with max retries exceeded.\n- `TestSchedulerLoopCoverage` - Test scheduler loop functionality and error handling.\n  - `TestSchedulerLoopCoverage.test_scheduler_loop_daily_job_scheduling_real_behavior(self, scheduler_manager, test_data_dir)` - Test that scheduler loop properly schedules daily jobs for all users.\n  - `TestSchedulerLoopCoverage.test_scheduler_loop_error_handling_real_behavior(self, scheduler_manager)` - Test scheduler loop error handling when scheduling fails.\n  - `TestSchedulerLoopCoverage.test_scheduler_loop_stop_event_handling_real_behavior(self, scheduler_manager)` - Test scheduler loop properly responds to stop events.\n- `TestCheckinSchedulingCoverage` - Test check-in scheduling functionality.\n  - `TestCheckinSchedulingCoverage.test_schedule_checkin_at_exact_time_real_behavior(self, scheduler_manager)` - Test scheduling check-in at exact time with real behavior.\n  - `TestCheckinSchedulingCoverage.test_schedule_checkin_missing_period_real_behavior(self, scheduler_manager)` - Test check-in scheduling with missing time period.\n  - `TestCheckinSchedulingCoverage.test_schedule_checkin_missing_start_time_real_behavior(self, scheduler_manager)` - Test check-in scheduling with missing start time.\n- `TestTaskReminderSchedulingCoverage` - Test task reminder scheduling functionality.\n  - `TestTaskReminderSchedulingCoverage.test_schedule_all_task_reminders_with_tasks_real_behavior(self, scheduler_manager)` - Test scheduling task reminders when tasks exist.\n  - `TestTaskReminderSchedulingCoverage.test_schedule_all_task_reminders_no_tasks_real_behavior(self, scheduler_manager)` - Test scheduling task reminders when no tasks exist.\n  - `TestTaskReminderSchedulingCoverage.test_schedule_all_task_reminders_missing_times_real_behavior(self, scheduler_manager)` - Test scheduling task reminders with missing start/end times.\n- `TestWakeTimerCoverage` - Test wake timer functionality.\n  - `TestWakeTimerCoverage.test_set_wake_timer_success_real_behavior(self, scheduler_manager)` - Test successful wake timer setting.\n  - `TestWakeTimerCoverage.test_set_wake_timer_process_failure_real_behavior(self, scheduler_manager)` - Test wake timer setting when process fails.\n- `TestSelectTaskForReminderBehavior` - Test comprehensive behavior of select_task_for_reminder function.\n  - `TestSelectTaskForReminderBehavior.test_select_task_for_reminder_empty_list_real_behavior(self, scheduler_manager)` - Test selecting task from empty list returns None.\n  - `TestSelectTaskForReminderBehavior.test_select_task_for_reminder_single_task_real_behavior(self, scheduler_manager)` - Test selecting task from single-item list returns that task.\n  - `TestSelectTaskForReminderBehavior.test_select_task_for_reminder_priority_weighting_real_behavior(self, scheduler_manager)` - Test priority-based weighting works correctly.\n  - `TestSelectTaskForReminderBehavior.test_select_task_for_reminder_due_today_weighting_real_behavior(self, scheduler_manager)` - Test due date proximity weighting for tasks due today.\n  - `TestSelectTaskForReminderBehavior.test_select_task_for_reminder_overdue_weighting_real_behavior(self, scheduler_manager)` - Test overdue task weighting with exponential increase.\n  - `TestSelectTaskForReminderBehavior.test_select_task_for_reminder_no_due_date_weighting_real_behavior(self, scheduler_manager)` - Test tasks without due dates get slight reduction in weight.\n  - `TestSelectTaskForReminderBehavior.test_select_task_for_reminder_invalid_date_format_real_behavior(self, scheduler_manager)` - Test handling of invalid date formats gracefully.\n  - `TestSelectTaskForReminderBehavior.test_select_task_for_reminder_large_task_list_real_behavior(self, scheduler_manager)` - Test performance and correctness with large task lists.\n  - `TestSelectTaskForReminderBehavior.test_select_task_for_reminder_zero_weights_fallback_real_behavior(self, scheduler_manager)` - Test fallback to random selection when all weights are zero.\n  - `TestSelectTaskForReminderBehavior.test_select_task_for_reminder_exception_handling_real_behavior(self, scheduler_manager)` - Test exception handling with fallback to random selection.\n  - `TestSelectTaskForReminderBehavior.test_select_task_for_reminder_week_proximity_weighting_real_behavior(self, scheduler_manager)` - Test sliding scale weighting for tasks due within a week.\n  - `TestSelectTaskForReminderBehavior.test_select_task_for_reminder_month_proximity_weighting_real_behavior(self, scheduler_manager)` - Test sliding scale weighting for tasks due within a month.\n\n### tests/behavior/test_service_behavior.py\n**Functions:**\n- `temp_dir(self, test_path_factory)` - Provide a per-test directory under tests/data/tmp.\n- `service(self)` - Create an MHMService instance for testing.\n- `temp_base_dir(self, test_path_factory)` - Provide a per-test base directory under tests/data/tmp for file-based communication tests.\n- `test_service_initialization(self, service)` - Test MHMService initialization.\n- `test_validate_configuration_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test configuration validation with real file operations.\n- `test_initialize_paths_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test path initialization with real file system operations.\n- `test_check_and_fix_logging_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test logging health check with real file operations.\n- `test_start_service_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service startup with real state changes.\n- `test_signal_handler_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test signal handler with real state changes.\n- `test_shutdown_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service shutdown with real state changes.\n- `test_emergency_shutdown_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test emergency shutdown with real state changes.\n- `test_run_service_loop_shutdown_file_detection_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test service loop detects shutdown request file with real file operations.\n- `test_check_test_message_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test processing of test message request files with real file operations.\n- `test_cleanup_test_message_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test cleanup of test message request files with real file operations.\n- `test_check_reschedule_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test processing of reschedule request files with real file operations.\n- `test_cleanup_reschedule_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test cleanup of reschedule request files with real file operations.\n- `test_get_user_categories_real_behavior(self)` - REAL BEHAVIOR TEST: Test get_user_categories with real data structures.\n- `test_main_function_real_behavior(self)` - REAL BEHAVIOR TEST: Test main function with real service creation.\n- `test_service_integration_with_managers_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service integration with real manager objects.\n- `test_service_error_recovery_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service error recovery with real state changes.\n- `test_service_loop_heartbeat_logging_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service loop heartbeat logging with real state management.\n- `test_service_file_based_communication_integration_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test service file-based communication integration with real file operations.\n- `test_real_file_based_communication_creates_and_removes_files(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Verify that test message requests actually create and remove files.\n- `test_real_cleanup_removes_actual_files(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Verify that cleanup actually removes real files.\n- `test_real_service_initialization_creates_actual_service(self)` - REAL BEHAVIOR TEST: Verify that service initialization creates a real service object.\n- `test_real_signal_handler_changes_service_state(self)` - REAL BEHAVIOR TEST: Verify that signal handler actually changes service state.\n- `test_real_emergency_shutdown_changes_service_state(self)` - REAL BEHAVIOR TEST: Verify that emergency shutdown actually changes service state.\n- `test_real_get_user_categories_returns_actual_data(self)` - REAL BEHAVIOR TEST: Verify that get_user_categories returns actual data structures.\n- `test_real_service_error_recovery_stops_service(self)` - REAL BEHAVIOR TEST: Verify that error recovery actually stops the service.\n- `mock_get_user_data_side_effect(user_id, data_type)` - No description\n- `mock_start_side_effect()` - Mock side effect for service start that changes actual service state.\n\nUpdates the service running status and startup time to simulate\nreal service startup behavior for testing.\n- `mock_shutdown_side_effect()` - Mock side effect for service shutdown that changes actual service state.\n\nUpdates the service running status and calls stop methods on managers\nto simulate real service shutdown behavior for testing.\n- `mock_sleep_side_effect(seconds)` - Mock side effect for time.sleep that breaks out of service loop.\n\nTracks call count and stops the service after a few iterations\nto prevent infinite loops during testing.\n\nArgs:\n    seconds: Number of seconds to sleep (ignored in mock)\n- `mock_join_side_effect()` - Mock side effect for os.path.join that returns test file path.\n\nReturns the test request file path when the specific filename\nis requested, otherwise delegates to the real os.path.join.\n\nArgs:\n    *args: Path components to join\n    \nReturns:\n    str: Joined path, or test file path for specific filename\n- `mock_join_side_effect()` - Mock side effect for os.path.join that returns test file path.\n\nReturns the test request file path when the specific filename\nis requested, otherwise delegates to the real os.path.join.\n\nArgs:\n    *args: Path components to join\n    \nReturns:\n    str: Joined path, or test file path for specific filename\n**Classes:**\n- `TestMHMService` - Test cases for the MHMService class.\n  - `TestMHMService.temp_dir(self, test_path_factory)` - Provide a per-test directory under tests/data/tmp.\n  - `TestMHMService.service(self)` - Create an MHMService instance for testing.\n  - `TestMHMService.temp_base_dir(self, test_path_factory)` - Provide a per-test base directory under tests/data/tmp for file-based communication tests.\n  - `TestMHMService.test_service_initialization(self, service)` - Test MHMService initialization.\n  - `TestMHMService.test_validate_configuration_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test configuration validation with real file operations.\n  - `TestMHMService.test_initialize_paths_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test path initialization with real file system operations.\n  - `TestMHMService.test_check_and_fix_logging_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test logging health check with real file operations.\n  - `TestMHMService.test_start_service_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service startup with real state changes.\n  - `TestMHMService.test_signal_handler_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test signal handler with real state changes.\n  - `TestMHMService.test_shutdown_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service shutdown with real state changes.\n  - `TestMHMService.test_emergency_shutdown_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test emergency shutdown with real state changes.\n  - `TestMHMService.test_run_service_loop_shutdown_file_detection_real_behavior(self, temp_dir, service)` - REAL BEHAVIOR TEST: Test service loop detects shutdown request file with real file operations.\n  - `TestMHMService.test_check_test_message_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test processing of test message request files with real file operations.\n  - `TestMHMService.test_cleanup_test_message_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test cleanup of test message request files with real file operations.\n  - `TestMHMService.test_check_reschedule_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test processing of reschedule request files with real file operations.\n  - `TestMHMService.test_cleanup_reschedule_requests_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test cleanup of reschedule request files with real file operations.\n  - `TestMHMService.test_get_user_categories_real_behavior(self)` - REAL BEHAVIOR TEST: Test get_user_categories with real data structures.\n  - `TestMHMService.test_main_function_real_behavior(self)` - REAL BEHAVIOR TEST: Test main function with real service creation.\n  - `TestMHMService.test_service_integration_with_managers_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service integration with real manager objects.\n  - `TestMHMService.test_service_error_recovery_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service error recovery with real state changes.\n  - `TestMHMService.test_service_loop_heartbeat_logging_real_behavior(self, service)` - REAL BEHAVIOR TEST: Test service loop heartbeat logging with real state management.\n  - `TestMHMService.test_service_file_based_communication_integration_real_behavior(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Test service file-based communication integration with real file operations.\n  - `TestMHMService.test_real_file_based_communication_creates_and_removes_files(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Verify that test message requests actually create and remove files.\n  - `TestMHMService.test_real_cleanup_removes_actual_files(self, temp_base_dir, service)` - REAL BEHAVIOR TEST: Verify that cleanup actually removes real files.\n  - `TestMHMService.test_real_service_initialization_creates_actual_service(self)` - REAL BEHAVIOR TEST: Verify that service initialization creates a real service object.\n  - `TestMHMService.test_real_signal_handler_changes_service_state(self)` - REAL BEHAVIOR TEST: Verify that signal handler actually changes service state.\n  - `TestMHMService.test_real_emergency_shutdown_changes_service_state(self)` - REAL BEHAVIOR TEST: Verify that emergency shutdown actually changes service state.\n  - `TestMHMService.test_real_get_user_categories_returns_actual_data(self)` - REAL BEHAVIOR TEST: Verify that get_user_categories returns actual data structures.\n  - `TestMHMService.test_real_service_error_recovery_stops_service(self)` - REAL BEHAVIOR TEST: Verify that error recovery actually stops the service.\n\n### tests/behavior/test_service_utilities_behavior.py\n**Functions:**\n- `test_throttler_initialization_creates_proper_structure(self, test_data_dir)` - Test that Throttler initialization creates proper internal structure.\n- `test_throttler_should_run_returns_true_on_first_call(self, test_data_dir)` - Test that Throttler should_run returns True on first call.\n- `test_throttler_should_run_respects_interval(self, test_data_dir)` - Test that Throttler should_run respects the time interval.\n- `test_throttler_handles_invalid_timestamp_format(self, test_data_dir)` - Test that Throttler handles invalid timestamp format gracefully.\n- `test_create_reschedule_request_creates_actual_file(self, test_data_dir)` - Test that creating reschedule request actually creates flag file.\n- `test_create_reschedule_request_skips_when_service_not_running(self, test_data_dir)` - Test that creating reschedule request skips when service is not running.\n- `test_is_service_running_checks_actual_processes(self, test_data_dir)` - Test that is_service_running checks actual system processes.\n- `test_is_service_running_handles_process_errors_gracefully(self, test_data_dir)` - Test that is_service_running handles process errors gracefully.\n- `test_wait_for_network_returns_true_when_network_available(self, test_data_dir)` - Test that wait_for_network returns True when network is available.\n- `test_wait_for_network_returns_false_when_network_unavailable(self, test_data_dir)` - Test that wait_for_network returns False when network is unavailable.\n- `test_load_and_localize_datetime_creates_timezone_aware_datetime(self, test_data_dir)` - Test that load_and_localize_datetime creates timezone-aware datetime.\n- `test_load_and_localize_datetime_raises_error_for_invalid_format(self, test_data_dir)` - Test that load_and_localize_datetime handles invalid format gracefully.\n- `test_load_and_localize_datetime_raises_error_for_invalid_timezone(self, test_data_dir)` - Test that load_and_localize_datetime handles invalid timezone gracefully.\n- `test_title_case_converts_text_properly(self, test_data_dir)` - Test that title_case converts text to proper title case.\n- `test_title_case_handles_special_words_correctly(self, test_data_dir)` - Test that title_case handles special words and abbreviations correctly.\n- `test_title_case_preserves_mixed_case_words(self, test_data_dir)` - Test that title_case preserves already properly cased words.\n- `test_service_utilities_error_handling_preserves_system_stability(self, test_data_dir)` - Test that service utilities error handling preserves system stability.\n- `test_service_utilities_performance_under_load(self, test_data_dir)` - Test that service utilities perform well under load.\n- `test_service_utilities_data_integrity(self, test_data_dir)` - Test that service utilities maintain data integrity.\n- `test_service_utilities_integration_with_reschedule_workflow(self, test_data_dir)` - Test integration between service utilities in reschedule workflow.\n- `test_service_utilities_error_recovery_with_real_operations(self, test_data_dir)` - Test error recovery when working with real operations.\n- `test_service_utilities_concurrent_access_safety(self, test_data_dir)` - Test that service utilities handle concurrent access safely.\n**Classes:**\n- `TestServiceUtilitiesBehavior` - Test real behavior of service utility functions.\n  - `TestServiceUtilitiesBehavior.test_throttler_initialization_creates_proper_structure(self, test_data_dir)` - Test that Throttler initialization creates proper internal structure.\n  - `TestServiceUtilitiesBehavior.test_throttler_should_run_returns_true_on_first_call(self, test_data_dir)` - Test that Throttler should_run returns True on first call.\n  - `TestServiceUtilitiesBehavior.test_throttler_should_run_respects_interval(self, test_data_dir)` - Test that Throttler should_run respects the time interval.\n  - `TestServiceUtilitiesBehavior.test_throttler_handles_invalid_timestamp_format(self, test_data_dir)` - Test that Throttler handles invalid timestamp format gracefully.\n  - `TestServiceUtilitiesBehavior.test_create_reschedule_request_creates_actual_file(self, test_data_dir)` - Test that creating reschedule request actually creates flag file.\n  - `TestServiceUtilitiesBehavior.test_create_reschedule_request_skips_when_service_not_running(self, test_data_dir)` - Test that creating reschedule request skips when service is not running.\n  - `TestServiceUtilitiesBehavior.test_is_service_running_checks_actual_processes(self, test_data_dir)` - Test that is_service_running checks actual system processes.\n  - `TestServiceUtilitiesBehavior.test_is_service_running_handles_process_errors_gracefully(self, test_data_dir)` - Test that is_service_running handles process errors gracefully.\n  - `TestServiceUtilitiesBehavior.test_wait_for_network_returns_true_when_network_available(self, test_data_dir)` - Test that wait_for_network returns True when network is available.\n  - `TestServiceUtilitiesBehavior.test_wait_for_network_returns_false_when_network_unavailable(self, test_data_dir)` - Test that wait_for_network returns False when network is unavailable.\n  - `TestServiceUtilitiesBehavior.test_load_and_localize_datetime_creates_timezone_aware_datetime(self, test_data_dir)` - Test that load_and_localize_datetime creates timezone-aware datetime.\n  - `TestServiceUtilitiesBehavior.test_load_and_localize_datetime_raises_error_for_invalid_format(self, test_data_dir)` - Test that load_and_localize_datetime handles invalid format gracefully.\n  - `TestServiceUtilitiesBehavior.test_load_and_localize_datetime_raises_error_for_invalid_timezone(self, test_data_dir)` - Test that load_and_localize_datetime handles invalid timezone gracefully.\n  - `TestServiceUtilitiesBehavior.test_title_case_converts_text_properly(self, test_data_dir)` - Test that title_case converts text to proper title case.\n  - `TestServiceUtilitiesBehavior.test_title_case_handles_special_words_correctly(self, test_data_dir)` - Test that title_case handles special words and abbreviations correctly.\n  - `TestServiceUtilitiesBehavior.test_title_case_preserves_mixed_case_words(self, test_data_dir)` - Test that title_case preserves already properly cased words.\n  - `TestServiceUtilitiesBehavior.test_service_utilities_error_handling_preserves_system_stability(self, test_data_dir)` - Test that service utilities error handling preserves system stability.\n  - `TestServiceUtilitiesBehavior.test_service_utilities_performance_under_load(self, test_data_dir)` - Test that service utilities perform well under load.\n  - `TestServiceUtilitiesBehavior.test_service_utilities_data_integrity(self, test_data_dir)` - Test that service utilities maintain data integrity.\n- `TestServiceUtilitiesIntegration` - Test integration between service utility functions.\n  - `TestServiceUtilitiesIntegration.test_service_utilities_integration_with_reschedule_workflow(self, test_data_dir)` - Test integration between service utilities in reschedule workflow.\n  - `TestServiceUtilitiesIntegration.test_service_utilities_error_recovery_with_real_operations(self, test_data_dir)` - Test error recovery when working with real operations.\n  - `TestServiceUtilitiesIntegration.test_service_utilities_concurrent_access_safety(self, test_data_dir)` - Test that service utilities handle concurrent access safely.\n\n### tests/behavior/test_static_logging_check.py\n**Functions:**\n- `test_repo_static_logging_check_passes()` - Ensure the repository logging static check passes in CI/test runs.\n\n### tests/behavior/test_task_behavior.py\n**Functions:**\n- `temp_dir(self, test_path_factory)` - Provide a per-test directory under tests/data/tmp.\n- `user_id(self)` - Create a test user ID.\n- `test_ensure_task_directory(self, mock_get_user_dir, user_id, temp_dir)` - Test task directory creation.\n- `test_load_active_tasks(self, mock_get_user_dir, user_id, temp_dir)` - Test loading active tasks.\n- `test_save_active_tasks(self, mock_get_user_dir, user_id, temp_dir)` - Test saving active tasks.\n- `test_create_task(self, mock_get_user_dir, temp_dir)` - Test task creation with file verification.\n- `test_update_task(self, mock_get_user_dir, temp_dir)` - Test task updating with file verification.\n- `test_complete_task(self, mock_get_user_dir, temp_dir)` - Test task completion with file and side effect verification.\n- `test_delete_task(self, mock_get_user_dir, temp_dir)` - Test task deletion with file verification.\n- `test_get_task_by_id(self, mock_get_user_dir, temp_dir)` - Test getting a task by ID with file verification.\n- `test_get_tasks_due_soon(self, mock_get_user_dir, temp_dir)` - Test getting tasks due soon with file verification.\n- `test_are_tasks_enabled(self, mock_get_user_data)` - Test checking if tasks are enabled with mock user data.\n- `test_get_user_task_stats(self, mock_get_user_dir, temp_dir)` - Test getting user task statistics with file verification.\n**Classes:**\n- `TestTaskManagement` - Test cases for task management functions.\n  - `TestTaskManagement.temp_dir(self, test_path_factory)` - Provide a per-test directory under tests/data/tmp.\n  - `TestTaskManagement.user_id(self)` - Create a test user ID.\n  - `TestTaskManagement.test_ensure_task_directory(self, mock_get_user_dir, user_id, temp_dir)` - Test task directory creation.\n  - `TestTaskManagement.test_load_active_tasks(self, mock_get_user_dir, user_id, temp_dir)` - Test loading active tasks.\n  - `TestTaskManagement.test_save_active_tasks(self, mock_get_user_dir, user_id, temp_dir)` - Test saving active tasks.\n  - `TestTaskManagement.test_create_task(self, mock_get_user_dir, temp_dir)` - Test task creation with file verification.\n  - `TestTaskManagement.test_update_task(self, mock_get_user_dir, temp_dir)` - Test task updating with file verification.\n  - `TestTaskManagement.test_complete_task(self, mock_get_user_dir, temp_dir)` - Test task completion with file and side effect verification.\n  - `TestTaskManagement.test_delete_task(self, mock_get_user_dir, temp_dir)` - Test task deletion with file verification.\n  - `TestTaskManagement.test_get_task_by_id(self, mock_get_user_dir, temp_dir)` - Test getting a task by ID with file verification.\n  - `TestTaskManagement.test_get_tasks_due_soon(self, mock_get_user_dir, temp_dir)` - Test getting tasks due soon with file verification.\n  - `TestTaskManagement.test_are_tasks_enabled(self, mock_get_user_data)` - Test checking if tasks are enabled with mock user data.\n  - `TestTaskManagement.test_get_user_task_stats(self, mock_get_user_dir, temp_dir)` - Test getting user task statistics with file verification.\n\n### tests/behavior/test_task_management_coverage_expansion.py\n**Functions:**\n- `temp_dir(self, test_path_factory)` - Provide a per-test directory under tests/data/tmp.\n- `user_id(self)` - Create a test user ID.\n- `mock_user_data_dir(self, temp_dir)` - Mock user data directory.\n- `test_ensure_task_directory_real_behavior(self, mock_user_data_dir, user_id)` - Test task directory creation with real file system behavior.\n- `test_ensure_task_directory_with_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test task directory creation with empty user ID.\n- `test_ensure_task_directory_with_none_user_id_real_behavior(self, mock_user_data_dir)` - Test task directory creation with None user ID.\n- `test_ensure_task_directory_existing_structure_real_behavior(self, mock_user_data_dir, user_id)` - Test task directory creation when structure already exists.\n- `test_load_active_tasks_real_behavior(self, mock_user_data_dir, user_id)` - Test loading active tasks with real file operations.\n- `test_load_active_tasks_empty_file_real_behavior(self, mock_user_data_dir, user_id)` - Test loading active tasks from empty file.\n- `test_load_active_tasks_missing_file_real_behavior(self, mock_user_data_dir, user_id)` - Test loading active tasks when file doesn't exist.\n- `test_save_active_tasks_real_behavior(self, mock_user_data_dir, user_id)` - Test saving active tasks with real file operations.\n- `test_save_active_tasks_with_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test saving active tasks with empty user ID.\n- `test_load_completed_tasks_real_behavior(self, mock_user_data_dir, user_id)` - Test loading completed tasks with real file operations.\n- `test_save_completed_tasks_real_behavior(self, mock_user_data_dir, user_id)` - Test saving completed tasks with real file operations.\n- `test_create_task_with_all_parameters_real_behavior(self, mock_user_data_dir, user_id)` - Test task creation with all optional parameters.\n- `test_create_task_with_minimal_parameters_real_behavior(self, mock_user_data_dir, user_id)` - Test task creation with minimal required parameters.\n- `test_create_task_with_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test task creation with empty user ID.\n- `test_create_task_with_empty_title_real_behavior(self, mock_user_data_dir, user_id)` - Test task creation with empty title.\n- `test_update_task_real_behavior(self, mock_user_data_dir, user_id)` - Test task updating with real behavior verification.\n- `test_update_task_with_reminder_periods_real_behavior(self, mock_user_data_dir, user_id)` - Test task updating with reminder periods.\n- `test_update_task_not_found_real_behavior(self, mock_user_data_dir, user_id)` - Test updating a non-existent task.\n- `test_complete_task_with_completion_data_real_behavior(self, mock_user_data_dir, user_id)` - Test task completion with custom completion data.\n- `test_complete_task_with_default_completion_real_behavior(self, mock_user_data_dir, user_id)` - Test task completion with default completion time.\n- `test_complete_task_not_found_real_behavior(self, mock_user_data_dir, user_id)` - Test completing a non-existent task.\n- `test_restore_task_real_behavior(self, mock_user_data_dir, user_id)` - Test task restoration from completed to active.\n- `test_restore_task_with_reminders_real_behavior(self, mock_user_data_dir, user_id)` - Test task restoration with reminder periods.\n- `test_restore_task_not_found_real_behavior(self, mock_user_data_dir, user_id)` - Test restoring a non-existent completed task.\n- `test_delete_task_real_behavior(self, mock_user_data_dir, user_id)` - Test task deletion with cleanup verification.\n- `test_delete_task_not_found_real_behavior(self, mock_user_data_dir, user_id)` - Test deleting a non-existent task.\n- `test_get_task_by_id_active_task_real_behavior(self, mock_user_data_dir, user_id)` - Test getting an active task by ID.\n- `test_get_task_by_id_completed_task_real_behavior(self, mock_user_data_dir, user_id)` - Test getting a completed task by ID.\n- `test_get_task_by_id_not_found_real_behavior(self, mock_user_data_dir, user_id)` - Test getting a non-existent task by ID.\n- `test_get_tasks_due_soon_real_behavior(self, mock_user_data_dir, user_id)` - Test getting tasks due within specified days.\n- `test_get_tasks_due_soon_with_invalid_date_real_behavior(self, mock_user_data_dir, user_id)` - Test getting tasks due soon with invalid date format.\n- `test_get_tasks_due_soon_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test getting tasks due soon with empty user ID.\n- `test_are_tasks_enabled_real_behavior(self, mock_user_data_dir, user_id)` - Test checking if tasks are enabled for a user.\n- `test_are_tasks_enabled_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test checking tasks enabled with empty user ID.\n- `test_schedule_task_reminders_real_behavior(self, mock_user_data_dir, user_id)` - Test scheduling task-specific reminders.\n- `test_schedule_task_reminders_no_scheduler_real_behavior(self, mock_user_data_dir, user_id)` - Test scheduling reminders when scheduler is not available.\n- `test_schedule_task_reminders_empty_periods_real_behavior(self, mock_user_data_dir, user_id)` - Test scheduling reminders with empty periods.\n- `test_get_user_task_tags_real_behavior(self, mock_user_data_dir, user_id)` - Test getting user task tags from preferences.\n- `test_get_user_task_tags_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test getting task tags with empty user ID.\n- `test_add_user_task_tag_new_tag_real_behavior(self, mock_user_data_dir, user_id)` - Test adding a new task tag.\n- `test_add_user_task_tag_existing_tag_real_behavior(self, mock_user_data_dir, user_id)` - Test adding an existing task tag.\n- `test_add_user_task_tag_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test adding task tag with empty user ID.\n- `test_add_user_task_tag_empty_tag_real_behavior(self, mock_user_data_dir, user_id)` - Test adding empty task tag.\n- `test_remove_user_task_tag_real_behavior(self, mock_user_data_dir, user_id)` - Test removing a task tag.\n- `test_remove_user_task_tag_not_found_real_behavior(self, mock_user_data_dir, user_id)` - Test removing a non-existent task tag.\n- `test_setup_default_task_tags_new_user_real_behavior(self, mock_user_data_dir, user_id)` - Test setting up default task tags for new user.\n- `test_setup_default_task_tags_existing_user_real_behavior(self, mock_user_data_dir, user_id)` - Test setting up default task tags for user with existing tags.\n- `test_setup_default_task_tags_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test setting up default task tags with empty user ID.\n- `test_get_user_task_stats_real_behavior(self, mock_user_data_dir, user_id)` - Test getting user task statistics.\n- `test_get_user_task_stats_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test getting task statistics with empty user ID.\n- `test_get_user_task_stats_error_handling_real_behavior(self, mock_user_data_dir, user_id)` - Test task statistics error handling.\n**Classes:**\n- `TestTaskManagementCoverageExpansion` - Comprehensive test coverage expansion for task management.\n  - `TestTaskManagementCoverageExpansion.temp_dir(self, test_path_factory)` - Provide a per-test directory under tests/data/tmp.\n  - `TestTaskManagementCoverageExpansion.user_id(self)` - Create a test user ID.\n  - `TestTaskManagementCoverageExpansion.mock_user_data_dir(self, temp_dir)` - Mock user data directory.\n  - `TestTaskManagementCoverageExpansion.test_ensure_task_directory_real_behavior(self, mock_user_data_dir, user_id)` - Test task directory creation with real file system behavior.\n  - `TestTaskManagementCoverageExpansion.test_ensure_task_directory_with_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test task directory creation with empty user ID.\n  - `TestTaskManagementCoverageExpansion.test_ensure_task_directory_with_none_user_id_real_behavior(self, mock_user_data_dir)` - Test task directory creation with None user ID.\n  - `TestTaskManagementCoverageExpansion.test_ensure_task_directory_existing_structure_real_behavior(self, mock_user_data_dir, user_id)` - Test task directory creation when structure already exists.\n  - `TestTaskManagementCoverageExpansion.test_load_active_tasks_real_behavior(self, mock_user_data_dir, user_id)` - Test loading active tasks with real file operations.\n  - `TestTaskManagementCoverageExpansion.test_load_active_tasks_empty_file_real_behavior(self, mock_user_data_dir, user_id)` - Test loading active tasks from empty file.\n  - `TestTaskManagementCoverageExpansion.test_load_active_tasks_missing_file_real_behavior(self, mock_user_data_dir, user_id)` - Test loading active tasks when file doesn't exist.\n  - `TestTaskManagementCoverageExpansion.test_save_active_tasks_real_behavior(self, mock_user_data_dir, user_id)` - Test saving active tasks with real file operations.\n  - `TestTaskManagementCoverageExpansion.test_save_active_tasks_with_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test saving active tasks with empty user ID.\n  - `TestTaskManagementCoverageExpansion.test_load_completed_tasks_real_behavior(self, mock_user_data_dir, user_id)` - Test loading completed tasks with real file operations.\n  - `TestTaskManagementCoverageExpansion.test_save_completed_tasks_real_behavior(self, mock_user_data_dir, user_id)` - Test saving completed tasks with real file operations.\n  - `TestTaskManagementCoverageExpansion.test_create_task_with_all_parameters_real_behavior(self, mock_user_data_dir, user_id)` - Test task creation with all optional parameters.\n  - `TestTaskManagementCoverageExpansion.test_create_task_with_minimal_parameters_real_behavior(self, mock_user_data_dir, user_id)` - Test task creation with minimal required parameters.\n  - `TestTaskManagementCoverageExpansion.test_create_task_with_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test task creation with empty user ID.\n  - `TestTaskManagementCoverageExpansion.test_create_task_with_empty_title_real_behavior(self, mock_user_data_dir, user_id)` - Test task creation with empty title.\n  - `TestTaskManagementCoverageExpansion.test_update_task_real_behavior(self, mock_user_data_dir, user_id)` - Test task updating with real behavior verification.\n  - `TestTaskManagementCoverageExpansion.test_update_task_with_reminder_periods_real_behavior(self, mock_user_data_dir, user_id)` - Test task updating with reminder periods.\n  - `TestTaskManagementCoverageExpansion.test_update_task_not_found_real_behavior(self, mock_user_data_dir, user_id)` - Test updating a non-existent task.\n  - `TestTaskManagementCoverageExpansion.test_complete_task_with_completion_data_real_behavior(self, mock_user_data_dir, user_id)` - Test task completion with custom completion data.\n  - `TestTaskManagementCoverageExpansion.test_complete_task_with_default_completion_real_behavior(self, mock_user_data_dir, user_id)` - Test task completion with default completion time.\n  - `TestTaskManagementCoverageExpansion.test_complete_task_not_found_real_behavior(self, mock_user_data_dir, user_id)` - Test completing a non-existent task.\n  - `TestTaskManagementCoverageExpansion.test_restore_task_real_behavior(self, mock_user_data_dir, user_id)` - Test task restoration from completed to active.\n  - `TestTaskManagementCoverageExpansion.test_restore_task_with_reminders_real_behavior(self, mock_user_data_dir, user_id)` - Test task restoration with reminder periods.\n  - `TestTaskManagementCoverageExpansion.test_restore_task_not_found_real_behavior(self, mock_user_data_dir, user_id)` - Test restoring a non-existent completed task.\n  - `TestTaskManagementCoverageExpansion.test_delete_task_real_behavior(self, mock_user_data_dir, user_id)` - Test task deletion with cleanup verification.\n  - `TestTaskManagementCoverageExpansion.test_delete_task_not_found_real_behavior(self, mock_user_data_dir, user_id)` - Test deleting a non-existent task.\n  - `TestTaskManagementCoverageExpansion.test_get_task_by_id_active_task_real_behavior(self, mock_user_data_dir, user_id)` - Test getting an active task by ID.\n  - `TestTaskManagementCoverageExpansion.test_get_task_by_id_completed_task_real_behavior(self, mock_user_data_dir, user_id)` - Test getting a completed task by ID.\n  - `TestTaskManagementCoverageExpansion.test_get_task_by_id_not_found_real_behavior(self, mock_user_data_dir, user_id)` - Test getting a non-existent task by ID.\n  - `TestTaskManagementCoverageExpansion.test_get_tasks_due_soon_real_behavior(self, mock_user_data_dir, user_id)` - Test getting tasks due within specified days.\n  - `TestTaskManagementCoverageExpansion.test_get_tasks_due_soon_with_invalid_date_real_behavior(self, mock_user_data_dir, user_id)` - Test getting tasks due soon with invalid date format.\n  - `TestTaskManagementCoverageExpansion.test_get_tasks_due_soon_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test getting tasks due soon with empty user ID.\n  - `TestTaskManagementCoverageExpansion.test_are_tasks_enabled_real_behavior(self, mock_user_data_dir, user_id)` - Test checking if tasks are enabled for a user.\n  - `TestTaskManagementCoverageExpansion.test_are_tasks_enabled_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test checking tasks enabled with empty user ID.\n  - `TestTaskManagementCoverageExpansion.test_schedule_task_reminders_real_behavior(self, mock_user_data_dir, user_id)` - Test scheduling task-specific reminders.\n  - `TestTaskManagementCoverageExpansion.test_schedule_task_reminders_no_scheduler_real_behavior(self, mock_user_data_dir, user_id)` - Test scheduling reminders when scheduler is not available.\n  - `TestTaskManagementCoverageExpansion.test_schedule_task_reminders_empty_periods_real_behavior(self, mock_user_data_dir, user_id)` - Test scheduling reminders with empty periods.\n  - `TestTaskManagementCoverageExpansion.test_get_user_task_tags_real_behavior(self, mock_user_data_dir, user_id)` - Test getting user task tags from preferences.\n  - `TestTaskManagementCoverageExpansion.test_get_user_task_tags_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test getting task tags with empty user ID.\n  - `TestTaskManagementCoverageExpansion.test_add_user_task_tag_new_tag_real_behavior(self, mock_user_data_dir, user_id)` - Test adding a new task tag.\n  - `TestTaskManagementCoverageExpansion.test_add_user_task_tag_existing_tag_real_behavior(self, mock_user_data_dir, user_id)` - Test adding an existing task tag.\n  - `TestTaskManagementCoverageExpansion.test_add_user_task_tag_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test adding task tag with empty user ID.\n  - `TestTaskManagementCoverageExpansion.test_add_user_task_tag_empty_tag_real_behavior(self, mock_user_data_dir, user_id)` - Test adding empty task tag.\n  - `TestTaskManagementCoverageExpansion.test_remove_user_task_tag_real_behavior(self, mock_user_data_dir, user_id)` - Test removing a task tag.\n  - `TestTaskManagementCoverageExpansion.test_remove_user_task_tag_not_found_real_behavior(self, mock_user_data_dir, user_id)` - Test removing a non-existent task tag.\n  - `TestTaskManagementCoverageExpansion.test_setup_default_task_tags_new_user_real_behavior(self, mock_user_data_dir, user_id)` - Test setting up default task tags for new user.\n  - `TestTaskManagementCoverageExpansion.test_setup_default_task_tags_existing_user_real_behavior(self, mock_user_data_dir, user_id)` - Test setting up default task tags for user with existing tags.\n  - `TestTaskManagementCoverageExpansion.test_setup_default_task_tags_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test setting up default task tags with empty user ID.\n  - `TestTaskManagementCoverageExpansion.test_get_user_task_stats_real_behavior(self, mock_user_data_dir, user_id)` - Test getting user task statistics.\n  - `TestTaskManagementCoverageExpansion.test_get_user_task_stats_empty_user_id_real_behavior(self, mock_user_data_dir)` - Test getting task statistics with empty user ID.\n  - `TestTaskManagementCoverageExpansion.test_get_user_task_stats_error_handling_real_behavior(self, mock_user_data_dir, user_id)` - Test task statistics error handling.\n\n### tests/behavior/test_ui_app_behavior.py\n**Functions:**\n- `qt_app(self)` - Create a QApplication instance for testing.\n- `test_ui_app_initialization_creates_proper_structure(self, qt_app, test_data_dir)` - Test that UI app initialization creates proper internal structure.\n- `test_service_manager_initialization_creates_proper_structure(self, test_data_dir)` - Test that ServiceManager initialization creates proper internal structure.\n- `test_service_manager_configuration_validation_checks_actual_config(self, test_data_dir)` - Test that configuration validation checks actual configuration.\n- `test_service_manager_configuration_validation_handles_invalid_config(self, test_data_dir)` - Test that configuration validation handles invalid configuration.\n- `test_service_manager_service_status_check_checks_actual_processes(self, test_data_dir)` - Test that service status check checks actual system processes.\n- `test_service_manager_service_status_check_handles_no_service(self, test_data_dir)` - Test that service status check handles when service is not running.\n- `test_ui_app_user_list_refresh_loads_actual_user_data(self, qt_app, test_data_dir)` - Test that user list refresh loads actual user data.\n- `test_ui_app_user_selection_loads_user_categories(self, qt_app, test_data_dir)` - Test that user selection loads user categories.\n- `test_ui_app_category_selection_enables_content_management(self, qt_app, test_data_dir)` - Test that category selection enables content management.\n- `test_ui_app_new_user_creation_opens_account_creator(self, qt_app, test_data_dir)` - Test that new user creation opens account creator dialog.\n- `test_ui_app_communication_settings_opens_channel_management(self, qt_app, test_data_dir)` - Test that communication settings opens channel management dialog.\n- `test_ui_app_category_management_opens_category_dialog(self, qt_app, test_data_dir)` - Test that category management opens category management dialog.\n- `test_ui_app_checkin_management_opens_checkin_dialog(self, qt_app, test_data_dir)` - Test that checkin management opens checkin management dialog.\n- `test_ui_app_task_management_opens_task_dialog(self, qt_app, test_data_dir)` - Test that task management opens task management dialog.\n- `test_ui_app_personalization_opens_user_profile_dialog(self, qt_app, test_data_dir)` - Test that personalization opens user profile dialog.\n- `test_ui_app_error_handling_preserves_system_stability(self, qt_app, test_data_dir)` - Test that UI app error handling preserves system stability.\n- `test_ui_app_performance_under_load(self, qt_app, test_data_dir)` - Test that UI app performs well under load.\n- `test_ui_app_data_integrity(self, qt_app, test_data_dir)` - Test that UI app maintains data integrity.\n- `test_ui_app_integration_with_service_manager(self, test_data_dir)` - Test integration between UI app and service manager.\n- `test_ui_app_error_recovery_with_real_operations(self, test_data_dir)` - Test error recovery when working with real operations.\n- `test_ui_app_concurrent_access_safety(self, test_data_dir)` - Test that UI app handles concurrent access safely.\n- `qt_app(self)` - Create a QApplication instance for testing.\n- `test_ui_app_initialization_creates_proper_structure(self, qt_app, test_data_dir)` - Test that UI app initialization creates proper internal structure.\n- `test_send_test_message_no_user_selected_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test send_test_message when no user is selected.\n- `test_send_test_message_service_not_running_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test send_test_message when service is not running.\n- `test_send_test_message_no_category_selected_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test send_test_message when no category is selected.\n- `test_send_test_message_invalid_category_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test send_test_message when category data is invalid.\n- `test_send_test_message_successful_flow_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test successful send_test_message flow.\n- `test_confirm_test_message_user_confirms_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test confirm_test_message when user confirms.\n- `test_confirm_test_message_user_cancels_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test confirm_test_message when user cancels.\n- `test_send_actual_test_message_creates_request_file_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test send_actual_test_message creates request file.\n- `test_send_test_message_edge_case_negative_index_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test send_test_message with negative combo box index.\n- `test_send_test_message_service_manager_error_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test send_test_message when service manager throws error.\n**Classes:**\n- `TestUIAppBehavior` - Test real behavior of the main UI application.\n  - `TestUIAppBehavior.qt_app(self)` - Create a QApplication instance for testing.\n  - `TestUIAppBehavior.test_ui_app_initialization_creates_proper_structure(self, qt_app, test_data_dir)` - Test that UI app initialization creates proper internal structure.\n  - `TestUIAppBehavior.test_service_manager_initialization_creates_proper_structure(self, test_data_dir)` - Test that ServiceManager initialization creates proper internal structure.\n  - `TestUIAppBehavior.test_service_manager_configuration_validation_checks_actual_config(self, test_data_dir)` - Test that configuration validation checks actual configuration.\n  - `TestUIAppBehavior.test_service_manager_configuration_validation_handles_invalid_config(self, test_data_dir)` - Test that configuration validation handles invalid configuration.\n  - `TestUIAppBehavior.test_service_manager_service_status_check_checks_actual_processes(self, test_data_dir)` - Test that service status check checks actual system processes.\n  - `TestUIAppBehavior.test_service_manager_service_status_check_handles_no_service(self, test_data_dir)` - Test that service status check handles when service is not running.\n  - `TestUIAppBehavior.test_ui_app_user_list_refresh_loads_actual_user_data(self, qt_app, test_data_dir)` - Test that user list refresh loads actual user data.\n  - `TestUIAppBehavior.test_ui_app_user_selection_loads_user_categories(self, qt_app, test_data_dir)` - Test that user selection loads user categories.\n  - `TestUIAppBehavior.test_ui_app_category_selection_enables_content_management(self, qt_app, test_data_dir)` - Test that category selection enables content management.\n  - `TestUIAppBehavior.test_ui_app_new_user_creation_opens_account_creator(self, qt_app, test_data_dir)` - Test that new user creation opens account creator dialog.\n  - `TestUIAppBehavior.test_ui_app_communication_settings_opens_channel_management(self, qt_app, test_data_dir)` - Test that communication settings opens channel management dialog.\n  - `TestUIAppBehavior.test_ui_app_category_management_opens_category_dialog(self, qt_app, test_data_dir)` - Test that category management opens category management dialog.\n  - `TestUIAppBehavior.test_ui_app_checkin_management_opens_checkin_dialog(self, qt_app, test_data_dir)` - Test that checkin management opens checkin management dialog.\n  - `TestUIAppBehavior.test_ui_app_task_management_opens_task_dialog(self, qt_app, test_data_dir)` - Test that task management opens task management dialog.\n  - `TestUIAppBehavior.test_ui_app_personalization_opens_user_profile_dialog(self, qt_app, test_data_dir)` - Test that personalization opens user profile dialog.\n  - `TestUIAppBehavior.test_ui_app_error_handling_preserves_system_stability(self, qt_app, test_data_dir)` - Test that UI app error handling preserves system stability.\n  - `TestUIAppBehavior.test_ui_app_performance_under_load(self, qt_app, test_data_dir)` - Test that UI app performs well under load.\n  - `TestUIAppBehavior.test_ui_app_data_integrity(self, qt_app, test_data_dir)` - Test that UI app maintains data integrity.\n- `TestUIAppIntegration` - Test integration between UI app components.\n  - `TestUIAppIntegration.test_ui_app_integration_with_service_manager(self, test_data_dir)` - Test integration between UI app and service manager.\n  - `TestUIAppIntegration.test_ui_app_error_recovery_with_real_operations(self, test_data_dir)` - Test error recovery when working with real operations.\n  - `TestUIAppIntegration.test_ui_app_concurrent_access_safety(self, test_data_dir)` - Test that UI app handles concurrent access safely.\n- `TestUIAppIntegration` - Test UI app integration and complex workflows.\n  - `TestUIAppIntegration.qt_app(self)` - Create a QApplication instance for testing.\n  - `TestUIAppIntegration.test_ui_app_initialization_creates_proper_structure(self, qt_app, test_data_dir)` - Test that UI app initialization creates proper internal structure.\n  - `TestUIAppIntegration.test_send_test_message_no_user_selected_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test send_test_message when no user is selected.\n  - `TestUIAppIntegration.test_send_test_message_service_not_running_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test send_test_message when service is not running.\n  - `TestUIAppIntegration.test_send_test_message_no_category_selected_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test send_test_message when no category is selected.\n  - `TestUIAppIntegration.test_send_test_message_invalid_category_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test send_test_message when category data is invalid.\n  - `TestUIAppIntegration.test_send_test_message_successful_flow_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test successful send_test_message flow.\n  - `TestUIAppIntegration.test_confirm_test_message_user_confirms_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test confirm_test_message when user confirms.\n  - `TestUIAppIntegration.test_confirm_test_message_user_cancels_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test confirm_test_message when user cancels.\n  - `TestUIAppIntegration.test_send_actual_test_message_creates_request_file_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test send_actual_test_message creates request file.\n  - `TestUIAppIntegration.test_send_test_message_edge_case_negative_index_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test send_test_message with negative combo box index.\n  - `TestUIAppIntegration.test_send_test_message_service_manager_error_real_behavior(self, qt_app, test_data_dir)` - REAL BEHAVIOR TEST: Test send_test_message when service manager throws error.\n\n### tests/behavior/test_user_context_behavior.py\n**Functions:**\n- `test_user_context_manager_initialization_creates_structure(self, test_data_dir)` - Test that UserContextManager initialization creates proper internal structure.\n- `test_get_current_user_context_uses_usercontext_singleton(self, test_data_dir)` - Test that get_current_user_context actually uses UserContext singleton.\n- `test_get_current_user_context_handles_no_user_gracefully(self, test_data_dir)` - Test that get_current_user_context handles no logged-in user gracefully.\n- `test_get_user_context_creates_complete_structure(self, test_data_dir)` - Test that get_user_context creates complete context structure.\n- `test_get_user_context_without_conversation_history(self, test_data_dir)` - Test that get_user_context excludes conversation history when requested.\n- `test_add_conversation_exchange_actually_stores_data(self, test_data_dir)` - Test that add_conversation_exchange actually stores conversation data.\n- `test_add_conversation_exchange_maintains_history_limit(self, test_data_dir)` - Test that add_conversation_exchange maintains conversation history limit.\n- `test_get_conversation_history_returns_actual_data(self, test_data_dir)` - Test that _get_conversation_history returns actual stored conversation data.\n- `test_get_conversation_history_handles_empty_history(self, test_data_dir)` - Test that _get_conversation_history handles users with no conversation history.\n- `test_get_user_profile_uses_existing_infrastructure(self, test_data_dir)` - Test that _get_user_profile actually uses existing user infrastructure.\n- `test_get_recent_activity_integrates_multiple_sources(self, test_data_dir)` - Test that _get_recent_activity integrates data from multiple sources.\n- `test_get_conversation_insights_analyzes_actual_data(self, test_data_dir)` - Test that _get_conversation_insights analyzes actual conversation data.\n- `test_get_mood_trends_analyzes_checkin_data(self, test_data_dir)` - Test that _get_mood_trends analyzes actual checkin data.\n- `test_get_active_schedules_identifies_active_periods(self, test_data_dir)` - Test that get_active_schedules identifies actually active schedule periods.\n- `test_format_context_for_ai_creates_readable_string(self, test_data_dir)` - Test that format_context_for_ai creates actual readable string from context.\n- `test_format_context_for_ai_handles_empty_context(self, test_data_dir)` - Test that format_context_for_ai handles empty or minimal context gracefully.\n- `test_user_context_manager_error_handling_preserves_system_stability(self, test_data_dir)` - Test that UserContextManager error handling preserves system stability.\n- `test_user_context_manager_integration_with_ai_chatbot(self, test_data_dir)` - Test that UserContextManager integrates properly with AI chatbot.\n- `test_user_context_manager_performance_under_load(self, test_data_dir)` - Test that UserContextManager performs well under load.\n- `test_user_context_manager_cleanup_and_resource_management(self, test_data_dir)` - Test that UserContextManager properly manages resources and cleanup.\n- `test_user_context_manager_with_real_user_data(self, test_data_dir)` - Test UserContextManager with real user data files.\n- `test_user_context_manager_error_recovery_with_real_files(self, test_data_dir)` - Test UserContextManager error recovery with corrupted real files.\n- `test_user_context_manager_concurrent_access_safety(self, test_data_dir)` - Test UserContextManager safety under concurrent access.\n**Classes:**\n- `TestUserContextManagerBehavior` - Test UserContextManager real behavior and side effects.\n  - `TestUserContextManagerBehavior.test_user_context_manager_initialization_creates_structure(self, test_data_dir)` - Test that UserContextManager initialization creates proper internal structure.\n  - `TestUserContextManagerBehavior.test_get_current_user_context_uses_usercontext_singleton(self, test_data_dir)` - Test that get_current_user_context actually uses UserContext singleton.\n  - `TestUserContextManagerBehavior.test_get_current_user_context_handles_no_user_gracefully(self, test_data_dir)` - Test that get_current_user_context handles no logged-in user gracefully.\n  - `TestUserContextManagerBehavior.test_get_user_context_creates_complete_structure(self, test_data_dir)` - Test that get_user_context creates complete context structure.\n  - `TestUserContextManagerBehavior.test_get_user_context_without_conversation_history(self, test_data_dir)` - Test that get_user_context excludes conversation history when requested.\n  - `TestUserContextManagerBehavior.test_add_conversation_exchange_actually_stores_data(self, test_data_dir)` - Test that add_conversation_exchange actually stores conversation data.\n  - `TestUserContextManagerBehavior.test_add_conversation_exchange_maintains_history_limit(self, test_data_dir)` - Test that add_conversation_exchange maintains conversation history limit.\n  - `TestUserContextManagerBehavior.test_get_conversation_history_returns_actual_data(self, test_data_dir)` - Test that _get_conversation_history returns actual stored conversation data.\n  - `TestUserContextManagerBehavior.test_get_conversation_history_handles_empty_history(self, test_data_dir)` - Test that _get_conversation_history handles users with no conversation history.\n  - `TestUserContextManagerBehavior.test_get_user_profile_uses_existing_infrastructure(self, test_data_dir)` - Test that _get_user_profile actually uses existing user infrastructure.\n  - `TestUserContextManagerBehavior.test_get_recent_activity_integrates_multiple_sources(self, test_data_dir)` - Test that _get_recent_activity integrates data from multiple sources.\n  - `TestUserContextManagerBehavior.test_get_conversation_insights_analyzes_actual_data(self, test_data_dir)` - Test that _get_conversation_insights analyzes actual conversation data.\n  - `TestUserContextManagerBehavior.test_get_mood_trends_analyzes_checkin_data(self, test_data_dir)` - Test that _get_mood_trends analyzes actual checkin data.\n  - `TestUserContextManagerBehavior.test_get_active_schedules_identifies_active_periods(self, test_data_dir)` - Test that get_active_schedules identifies actually active schedule periods.\n  - `TestUserContextManagerBehavior.test_format_context_for_ai_creates_readable_string(self, test_data_dir)` - Test that format_context_for_ai creates actual readable string from context.\n  - `TestUserContextManagerBehavior.test_format_context_for_ai_handles_empty_context(self, test_data_dir)` - Test that format_context_for_ai handles empty or minimal context gracefully.\n  - `TestUserContextManagerBehavior.test_user_context_manager_error_handling_preserves_system_stability(self, test_data_dir)` - Test that UserContextManager error handling preserves system stability.\n  - `TestUserContextManagerBehavior.test_user_context_manager_integration_with_ai_chatbot(self, test_data_dir)` - Test that UserContextManager integrates properly with AI chatbot.\n  - `TestUserContextManagerBehavior.test_user_context_manager_performance_under_load(self, test_data_dir)` - Test that UserContextManager performs well under load.\n  - `TestUserContextManagerBehavior.test_user_context_manager_cleanup_and_resource_management(self, test_data_dir)` - Test that UserContextManager properly manages resources and cleanup.\n- `TestUserContextManagerIntegration` - Integration tests for UserContextManager with real user data.\n  - `TestUserContextManagerIntegration.test_user_context_manager_with_real_user_data(self, test_data_dir)` - Test UserContextManager with real user data files.\n  - `TestUserContextManagerIntegration.test_user_context_manager_error_recovery_with_real_files(self, test_data_dir)` - Test UserContextManager error recovery with corrupted real files.\n  - `TestUserContextManagerIntegration.test_user_context_manager_concurrent_access_safety(self, test_data_dir)` - Test UserContextManager safety under concurrent access.\n\n### tests/behavior/test_user_management_coverage_expansion.py\n**Functions:**\n- `_setup(self, test_path_factory, monkeypatch)` - Set up test environment with per-test directory and path patches.\n- `teardown_method(self)` - Clean up test environment.\n- `test_register_data_loader_real_behavior(self)` - Test data loader registration with real behavior.\n- `test_get_available_data_types_real_behavior(self)` - Test getting available data types.\n- `test_get_data_type_info_real_behavior(self)` - Test getting data type information.\n- `test_get_all_user_ids_real_behavior(self)` - Test getting all user IDs with real behavior.\n- `test_get_all_user_ids_no_directory_real_behavior(self)` - Test getting user IDs when directory doesn't exist.\n- `test_load_account_data_real_behavior(self)` - Test loading account data with real behavior.\n- `test_load_account_data_auto_create_real_behavior(self)` - Test auto-creating account data when file doesn't exist.\n- `test_load_account_data_no_auto_create_real_behavior(self)` - Test loading account data without auto-creation.\n- `test_save_account_data_real_behavior(self)` - Test saving account data with real behavior.\n- `test_save_account_data_invalid_user_id_real_behavior(self)` - Test saving account data with invalid user ID.\n- `test_load_preferences_data_real_behavior(self)` - Test loading preferences data with real behavior.\n- `test_load_preferences_data_auto_create_real_behavior(self)` - Test auto-creating preferences data when file doesn't exist.\n- `test_save_preferences_data_real_behavior(self)` - Test saving preferences data with real behavior.\n- `test_load_context_data_real_behavior(self)` - Test loading context data with real behavior.\n- `test_load_context_data_auto_create_real_behavior(self)` - Test auto-creating context data when file doesn't exist.\n- `test_save_context_data_real_behavior(self)` - Test saving context data with real behavior.\n- `test_load_schedules_data_real_behavior(self)` - Test loading schedules data with real behavior.\n- `test_load_schedules_data_auto_create_real_behavior(self)` - Test auto-creating schedules data when file doesn't exist.\n- `test_save_schedules_data_real_behavior(self)` - Test saving schedules data with real behavior.\n- `test_save_schedules_data_invalid_user_id_real_behavior(self)` - Test saving schedules data with invalid user ID.\n- `test_update_user_schedules_real_behavior(self)` - Test updating user schedules with real behavior.\n- `test_update_user_schedules_invalid_user_id_real_behavior(self)` - Test updating schedules with invalid user ID.\n- `test_create_default_schedule_periods_tasks_real_behavior(self)` - Test creating default schedule periods for tasks category.\n- `test_create_default_schedule_periods_checkin_real_behavior(self)` - Test creating default schedule periods for checkin category.\n- `test_create_default_schedule_periods_other_category_real_behavior(self)` - Test creating default schedule periods for other categories.\n- `test_create_default_schedule_periods_no_category_real_behavior(self)` - Test creating default schedule periods without category.\n- `test_cache_management_real_behavior(self)` - Test cache management behavior.\n- `test_cache_timeout_real_behavior(self)` - Test cache timeout behavior.\n- `test_error_handling_load_account_real_behavior(self)` - Test error handling in account loading.\n- `test_error_handling_save_account_real_behavior(self)` - Test error handling in account saving.\n- `test_data_validation_real_behavior(self)` - Test data validation behavior.\n- `test_file_persistence_real_behavior(self)` - Test file persistence behavior.\n- `_setup(self, test_path_factory)` - Set up test environment.\n- `teardown_method(self)` - Clean up test environment.\n- `test_user_data_lifecycle_real_behavior(self)` - Test complete user data lifecycle.\n- `test_user_data_consistency_real_behavior(self)` - Test user data consistency across operations.\n- `test_user_data_error_recovery_real_behavior(self)` - Test user data error recovery.\n- `test_user_data_performance_real_behavior(self)` - Test user data performance under load.\n- `test_user_data_concurrent_access_real_behavior(self)` - Test user data concurrent access behavior.\n- `mock_path(user_id, file_type)` - No description\n- `test_loader(user_id, auto_create)` - No description\n- `user_operation(thread_id)` - No description\n- `mock_path(user_id, file_type)` - No description\n- `mock_path(user_id, file_type)` - No description\n- `mock_path(user_id, file_type)` - No description\n- `mock_path(user_id, file_type)` - No description\n- `mock_path(user_id, file_type)` - No description\n- `mock_path(user_id, file_type)` - No description\n- `mock_path(user_id, file_type)` - No description\n- `mock_path(user_id, file_type)` - No description\n- `mock_path(user_id, file_type)` - No description\n- `mock_path(user_id, file_type)` - No description\n- `mock_path(user_id, file_type)` - No description\n- `mock_path(user_id, file_type)` - No description\n- `mock_path(user_id, file_type)` - No description\n- `mock_path(user_id, file_type)` - No description\n- `mock_path(user_id, file_type)` - No description\n- `mock_path(user_id, file_type)` - No description\n- `mock_path(user_id, file_type)` - No description\n**Classes:**\n- `TestUserManagementCoverageExpansion` - Test Core User Management coverage expansion with real behavior verification.\n  - `TestUserManagementCoverageExpansion._setup(self, test_path_factory, monkeypatch)` - Set up test environment with per-test directory and path patches.\n  - `TestUserManagementCoverageExpansion.teardown_method(self)` - Clean up test environment.\n  - `TestUserManagementCoverageExpansion.test_register_data_loader_real_behavior(self)` - Test data loader registration with real behavior.\n  - `TestUserManagementCoverageExpansion.test_get_available_data_types_real_behavior(self)` - Test getting available data types.\n  - `TestUserManagementCoverageExpansion.test_get_data_type_info_real_behavior(self)` - Test getting data type information.\n  - `TestUserManagementCoverageExpansion.test_get_all_user_ids_real_behavior(self)` - Test getting all user IDs with real behavior.\n  - `TestUserManagementCoverageExpansion.test_get_all_user_ids_no_directory_real_behavior(self)` - Test getting user IDs when directory doesn't exist.\n  - `TestUserManagementCoverageExpansion.test_load_account_data_real_behavior(self)` - Test loading account data with real behavior.\n  - `TestUserManagementCoverageExpansion.test_load_account_data_auto_create_real_behavior(self)` - Test auto-creating account data when file doesn't exist.\n  - `TestUserManagementCoverageExpansion.test_load_account_data_no_auto_create_real_behavior(self)` - Test loading account data without auto-creation.\n  - `TestUserManagementCoverageExpansion.test_save_account_data_real_behavior(self)` - Test saving account data with real behavior.\n  - `TestUserManagementCoverageExpansion.test_save_account_data_invalid_user_id_real_behavior(self)` - Test saving account data with invalid user ID.\n  - `TestUserManagementCoverageExpansion.test_load_preferences_data_real_behavior(self)` - Test loading preferences data with real behavior.\n  - `TestUserManagementCoverageExpansion.test_load_preferences_data_auto_create_real_behavior(self)` - Test auto-creating preferences data when file doesn't exist.\n  - `TestUserManagementCoverageExpansion.test_save_preferences_data_real_behavior(self)` - Test saving preferences data with real behavior.\n  - `TestUserManagementCoverageExpansion.test_load_context_data_real_behavior(self)` - Test loading context data with real behavior.\n  - `TestUserManagementCoverageExpansion.test_load_context_data_auto_create_real_behavior(self)` - Test auto-creating context data when file doesn't exist.\n  - `TestUserManagementCoverageExpansion.test_save_context_data_real_behavior(self)` - Test saving context data with real behavior.\n  - `TestUserManagementCoverageExpansion.test_load_schedules_data_real_behavior(self)` - Test loading schedules data with real behavior.\n  - `TestUserManagementCoverageExpansion.test_load_schedules_data_auto_create_real_behavior(self)` - Test auto-creating schedules data when file doesn't exist.\n  - `TestUserManagementCoverageExpansion.test_save_schedules_data_real_behavior(self)` - Test saving schedules data with real behavior.\n  - `TestUserManagementCoverageExpansion.test_save_schedules_data_invalid_user_id_real_behavior(self)` - Test saving schedules data with invalid user ID.\n  - `TestUserManagementCoverageExpansion.test_update_user_schedules_real_behavior(self)` - Test updating user schedules with real behavior.\n  - `TestUserManagementCoverageExpansion.test_update_user_schedules_invalid_user_id_real_behavior(self)` - Test updating schedules with invalid user ID.\n  - `TestUserManagementCoverageExpansion.test_create_default_schedule_periods_tasks_real_behavior(self)` - Test creating default schedule periods for tasks category.\n  - `TestUserManagementCoverageExpansion.test_create_default_schedule_periods_checkin_real_behavior(self)` - Test creating default schedule periods for checkin category.\n  - `TestUserManagementCoverageExpansion.test_create_default_schedule_periods_other_category_real_behavior(self)` - Test creating default schedule periods for other categories.\n  - `TestUserManagementCoverageExpansion.test_create_default_schedule_periods_no_category_real_behavior(self)` - Test creating default schedule periods without category.\n  - `TestUserManagementCoverageExpansion.test_cache_management_real_behavior(self)` - Test cache management behavior.\n  - `TestUserManagementCoverageExpansion.test_cache_timeout_real_behavior(self)` - Test cache timeout behavior.\n  - `TestUserManagementCoverageExpansion.test_error_handling_load_account_real_behavior(self)` - Test error handling in account loading.\n  - `TestUserManagementCoverageExpansion.test_error_handling_save_account_real_behavior(self)` - Test error handling in account saving.\n  - `TestUserManagementCoverageExpansion.test_data_validation_real_behavior(self)` - Test data validation behavior.\n  - `TestUserManagementCoverageExpansion.test_file_persistence_real_behavior(self)` - Test file persistence behavior.\n- `TestUserManagementIntegration` - Test integration behavior of Core User Management.\n  - `TestUserManagementIntegration._setup(self, test_path_factory)` - Set up test environment.\n  - `TestUserManagementIntegration.teardown_method(self)` - Clean up test environment.\n  - `TestUserManagementIntegration.test_user_data_lifecycle_real_behavior(self)` - Test complete user data lifecycle.\n  - `TestUserManagementIntegration.test_user_data_consistency_real_behavior(self)` - Test user data consistency across operations.\n  - `TestUserManagementIntegration.test_user_data_error_recovery_real_behavior(self)` - Test user data error recovery.\n  - `TestUserManagementIntegration.test_user_data_performance_real_behavior(self)` - Test user data performance under load.\n  - `TestUserManagementIntegration.test_user_data_concurrent_access_real_behavior(self)` - Test user data concurrent access behavior.\n\n### tests/behavior/test_utilities_demo.py\n**Functions:**\n- `test_basic_user_creation(self, test_data_dir)` - Demonstrate creating a basic test user\n- `test_discord_user_creation(self, test_data_dir)` - Demonstrate creating a Discord-specific test user\n- `test_full_featured_user_creation(self, test_data_dir)` - Demonstrate creating a full-featured test user\n- `test_minimal_user_creation(self, test_data_dir)` - Demonstrate creating a minimal test user\n- `test_user_data_factory_usage(self, test_data_dir)` - Demonstrate using the user data factory for custom data structures\n- `test_environment_management(self)` - Demonstrate test environment setup and cleanup\n- `test_multiple_user_types_in_single_test(self, test_data_dir)` - Test creating multiple different user types in a single test.\n- `test_email_user_creation(self, test_data_dir)` - Test creating an email user with specific email address.\n- `test_custom_fields_user_creation(self, test_data_dir)` - Test creating a user with custom fields.\n- `test_scheduled_user_creation(self, test_data_dir)` - Test creating a user with comprehensive schedules.\n- `test_comprehensive_user_types(self, test_data_dir)` - Test all comprehensive user types to ensure they cover real user scenarios.\n- `test_real_user_scenarios(self, test_data_dir, mock_config)` - Test scenarios that mirror real user data patterns.\n- `test_edge_case_users(self, test_data_dir)` - Test edge cases and boundary conditions for user creation.\n- `test_user_data_consistency(self, test_data_dir)` - Test that all user types produce consistent data structures.\n- `test_reduced_code_duplication(self, test_data_dir)` - Show how much less code is needed with centralized utilities\n- `test_consistent_user_data(self, test_data_dir)` - Show that all tests use consistent user data structures\n- `test_easy_maintenance(self, test_data_dir)` - Show how easy it is to update user creation logic\n- `test_flexible_configuration(self, test_data_dir)` - Show the flexibility of the utilities\n**Classes:**\n- `TestUtilitiesDemo` - Demonstration of centralized test utilities usage\n  - `TestUtilitiesDemo.test_basic_user_creation(self, test_data_dir)` - Demonstrate creating a basic test user\n  - `TestUtilitiesDemo.test_discord_user_creation(self, test_data_dir)` - Demonstrate creating a Discord-specific test user\n  - `TestUtilitiesDemo.test_full_featured_user_creation(self, test_data_dir)` - Demonstrate creating a full-featured test user\n  - `TestUtilitiesDemo.test_minimal_user_creation(self, test_data_dir)` - Demonstrate creating a minimal test user\n  - `TestUtilitiesDemo.test_user_data_factory_usage(self, test_data_dir)` - Demonstrate using the user data factory for custom data structures\n  - `TestUtilitiesDemo.test_environment_management(self)` - Demonstrate test environment setup and cleanup\n  - `TestUtilitiesDemo.test_multiple_user_types_in_single_test(self, test_data_dir)` - Test creating multiple different user types in a single test.\n  - `TestUtilitiesDemo.test_email_user_creation(self, test_data_dir)` - Test creating an email user with specific email address.\n  - `TestUtilitiesDemo.test_custom_fields_user_creation(self, test_data_dir)` - Test creating a user with custom fields.\n  - `TestUtilitiesDemo.test_scheduled_user_creation(self, test_data_dir)` - Test creating a user with comprehensive schedules.\n  - `TestUtilitiesDemo.test_comprehensive_user_types(self, test_data_dir)` - Test all comprehensive user types to ensure they cover real user scenarios.\n  - `TestUtilitiesDemo.test_real_user_scenarios(self, test_data_dir, mock_config)` - Test scenarios that mirror real user data patterns.\n  - `TestUtilitiesDemo.test_edge_case_users(self, test_data_dir)` - Test edge cases and boundary conditions for user creation.\n  - `TestUtilitiesDemo.test_user_data_consistency(self, test_data_dir)` - Test that all user types produce consistent data structures.\n- `TestUtilitiesBenefits` - Demonstrate the benefits of centralized test utilities\n  - `TestUtilitiesBenefits.test_reduced_code_duplication(self, test_data_dir)` - Show how much less code is needed with centralized utilities\n  - `TestUtilitiesBenefits.test_consistent_user_data(self, test_data_dir)` - Show that all tests use consistent user data structures\n  - `TestUtilitiesBenefits.test_easy_maintenance(self, test_data_dir)` - Show how easy it is to update user creation logic\n  - `TestUtilitiesBenefits.test_flexible_configuration(self, test_data_dir)` - Show the flexibility of the utilities\n\n### tests/conftest.py\n**Functions:**\n- `setup_logging_isolation()` - Set up logging isolation before any core modules are imported.\n- `verify_user_data_loader_registry()` - No description\n- `initialize_loader_import_order()` - Import core.user_management before core.user_data_handlers and register loaders once.\n\nThis ensures both modules share the same USER_DATA_LOADERS dict and that required\nloaders are present without relying on the data shim.\n- `_apply_get_user_data_shim_early()` - No description\n- `toggle_data_shim_per_marker(request, monkeypatch)` - No description\n- `setup_qmessagebox_patches()` - Set up global QMessageBox patches to prevent popup dialogs during testing.\n- `setup_test_logging()` - Set up dedicated logging for tests with complete isolation from main app logging.\n- `setup_component_log_rotation()` - Replace component logger handlers with simple file handlers under tests/logs.\n\nUses simple FileHandler to avoid rotation conflicts during test sessions.\nSession-based rotation is handled separately by SessionLogRotationManager.\n- `_prune_old_files(target_dir, patterns, older_than_days)` - Remove files in target_dir matching any pattern older than N days.\n\nReturns the number of files removed.\n- `prune_test_artifacts_before_and_after_session()` - Prune old logs (tests/logs) and backups (tests/data/backups) before and after the session.\n\nDefaults: logs older than 14 days, test backups older than 7 days.\nOverride via TEST_LOG_RETENTION_DAYS and TEST_BACKUP_RETENTION_DAYS env vars.\n- `log_lifecycle_maintenance()` - Perform log lifecycle maintenance at session start.\n- `session_log_rotation_check()` - Check for log rotation needs at session start and end.\n- `isolate_logging()` - Ensure complete logging isolation during tests to prevent test logs from appearing in main app.log.\n- `wait_until(predicate, timeout_seconds, poll_seconds)` - Poll predicate() until it returns True or timeout elapses.\n\nReturns True if predicate succeeds within timeout, otherwise False.\n- `materialize_user_minimal_via_public_apis(user_id)` - Ensure minimal structures exist without overwriting existing data.\n\n- Merges into existing account (preserves internal_username and enabled features)\n- Adds missing preferences keys (keeps existing categories/channel)\n- Adds a default motivational/morning period if schedules missing\n- `test_data_dir()` - Provide the repository-scoped test data directory for all tests.\n- `mock_config(test_data_dir)` - Mock configuration for testing with proper test data directory.\n- `ensure_mock_config_applied(mock_config, test_data_dir)` - Verify mock_config fixture is active for every test.\n- `clear_user_caches_between_tests()` - Ensure user data caches don't leak between tests.\n- `register_user_data_loaders_session()` - Ensure core user data loaders are present without overwriting metadata.\n- `fix_user_data_loaders()` - Ensure loaders stay correctly registered for each test without overwriting metadata.\n- `shim_get_user_data_to_invoke_loaders()` - Shim core.user_management.get_user_data to ensure structured dicts.\n\nIf a test calls get_user_data with 'all' or a specific type and the result is\nempty/missing, invoke the registered loaders in USER_DATA_LOADERS to assemble\nthe expected structure. This preserves production behavior when everything is\nwired correctly, but guards against import-order timing in tests.\n- `verify_required_loaders_present()` - Fail fast if required user-data loaders are missing at session start.\n- `env_guard_and_restore(monkeypatch)` - Snapshot and restore critical environment variables to prevent test leakage.\n\nRestores after each test to ensure environment stability across the suite.\n- `test_path_factory(test_data_dir)` - Provide a per-test directory under tests/data/tmp/<uuid> for ad-hoc temp usage.\n\nPrefer this over raw tempfile.mkdtemp/TemporaryDirectory to keep paths within the repo.\n- `ensure_user_materialized(test_data_dir)` - Return a helper to ensure account/preferences/context files exist for a user.\n\nIf the user directory is missing, uses TestUserFactory to create a basic user.\nIf present but missing files, writes minimal JSON structures to materialize them.\n- `path_sanitizer()` - Guardrail: ensure temp resolution stays within tests/data and detect escapes.\n\nFails fast if the active temp directory is outside tests/data.\n- `enforce_user_dir_locations()` - Ensure tests only create user dirs under tests/data/users.\n\n- Fails if a top-level tests/data/test-user* directory appears.\n- Fails if any test-user* directory is created under tests/data/tmp.\nCleans stray dirs to keep workspace tidy before failing.\n- `cleanup_tmp_at_session_end()` - Clear tests/data/tmp contents at session end to keep the workspace tidy.\n- `force_test_data_directory()` - Route all system temp usage into tests/data for the entire session.\n- `mock_user_data(mock_config, test_data_dir, request)` - Create mock user data for testing with unique user ID for each test.\n- `mock_user_data_with_messages(test_data_dir, mock_config, request)` - Create mock user data for testing with automated_messages enabled and categories.\n- `update_user_index_for_test(test_data_dir)` - Helper fixture to update user index for test users.\n- `cleanup_test_users_after_session()` - Remove test users from tests/data/users/ after all tests. NEVER touches real user data.\n- `clear_user_caches_between_tests()` - Clear user caches between tests to prevent state pollution.\n- `mock_logger()` - Mock logger for testing.\n- `temp_file()` - Create a temporary file for testing.\n- `mock_ai_response()` - Mock AI response for testing.\n- `mock_task_data()` - Mock task data for testing.\n- `mock_message_data()` - Mock message data for testing.\n- `mock_service_data()` - Mock service data for testing.\n- `mock_communication_data()` - Mock communication data for testing.\n- `mock_schedule_data()` - Mock schedule data for testing.\n- `pytest_configure(config)` - Configure pytest for MHM testing.\n- `pytest_collection_modifyitems(config, items)` - Modify test collection to add default markers.\n- `pytest_sessionstart(session)` - Log test session start.\n- `pytest_sessionfinish(session, exitstatus)` - Log test session finish.\n- `pytest_runtest_logreport(report)` - Log individual test results.\n- `cleanup_communication_manager()` - Clean up CommunicationManager singleton after all tests complete.\n- `cleanup_conversation_manager()` - Clean up ConversationManager state before each test.\n- `_missing_keys()` - No description\n- `_load_single_type(user_id, key)` - No description\n- `wrapped_get_user_data(user_id, data_type)` - No description\n- `format(self, record)` - No description\n- `__init__(self, max_size_mb)` - No description\n- `register_log_file(self, file_path)` - Register a log file for session-based rotation monitoring.\n- `check_rotation_needed(self)` - Check if any log file exceeds the size limit.\n- `rotate_all_logs(self)` - Rotate all registered log files together to maintain continuity.\n- `__init__(self, archive_days)` - No description\n- `cleanup_old_archives(self)` - Remove archive files older than the specified number of days.\n- `archive_old_backups(self)` - Move old backup files to archive directory.\n- `perform_lifecycle_maintenance(self)` - Perform all lifecycle maintenance operations.\n- `_load_single_type(user_id, key)` - No description\n- `_fallback_read_from_files(user_id, key)` - Read requested type directly from user JSON files as a last resort.\n- `wrapped_get_user_data(user_id, data_type)` - No description\n- `_helper(user_id)` - No description\n- `_update_index(user_id)` - No description\n- `information()` - No description\n- `warning()` - No description\n- `critical()` - No description\n- `question()` - No description\n- `about()` - No description\n**Classes:**\n- `TestContextFormatter` - Custom formatter that automatically prepends test names to log messages.\n  - `TestContextFormatter.format(self, record)` - No description\n- `SessionLogRotationManager` - Manages session-based log rotation that rotates ALL logs together if any exceed size limits.\n  - `SessionLogRotationManager.__init__(self, max_size_mb)` - No description\n  - `SessionLogRotationManager.register_log_file(self, file_path)` - Register a log file for session-based rotation monitoring.\n  - `SessionLogRotationManager.check_rotation_needed(self)` - Check if any log file exceeds the size limit.\n  - `SessionLogRotationManager.rotate_all_logs(self)` - Rotate all registered log files together to maintain continuity.\n- `LogLifecycleManager` - Manages log file lifecycle including backup, archive, and cleanup operations.\n  - `LogLifecycleManager.__init__(self, archive_days)` - No description\n  - `LogLifecycleManager.cleanup_old_archives(self)` - Remove archive files older than the specified number of days.\n  - `LogLifecycleManager.archive_old_backups(self)` - Move old backup files to archive directory.\n  - `LogLifecycleManager.perform_lifecycle_maintenance(self)` - Perform all lifecycle maintenance operations.\n- `MockQMessageBox` - No description\n  - `MockQMessageBox.information()` - No description\n  - `MockQMessageBox.warning()` - No description\n  - `MockQMessageBox.critical()` - No description\n  - `MockQMessageBox.question()` - No description\n  - `MockQMessageBox.about()` - No description\n\n### tests/debug_file_paths.py\n**Functions:**\n- `test_debug_file_paths(mock_user_data)` - Debug test to check if the issue is with file paths.\n\n### tests/integration/test_account_lifecycle.py\n**Functions:**\n- `_materialize_and_verify(self, uid)` - Ensure minimal structures exist without overwriting existing data; return full user data.\n- `_ensure_minimal_structure(self, uid)` - No description\n- `save_user_data_simple(self, user_id, account_data, preferences_data, schedules_data)` - Helper function to save user data in the correct format.\n- `setup_test_environment(self, test_data_dir, mock_config)` - Set up isolated test environment for each test.\n- `test_create_basic_account(self)` - Test creating a basic account with only messages enabled.\n- `test_create_full_account(self)` - Test creating a full account with all features enabled.\n- `test_enable_checkins_for_basic_user(self)` - Test enabling check-ins for a user who only has messages enabled.\n- `test_disable_tasks_for_full_user(self)` - Test disabling tasks for a user who has all features enabled.\n- `test_reenable_tasks_for_user(self)` - Test re-enabling tasks for a user who previously had them disabled.\n- `test_add_message_category(self, update_user_index_for_test)` - Test adding a new message category to user preferences.\n- `test_remove_message_category(self)` - Test removing a message category from user preferences.\n- `test_add_schedule_period(self)` - Test adding a new schedule period to user schedules.\n- `test_modify_schedule_period(self)` - Test modifying an existing schedule period.\n- `test_remove_schedule_period(self)` - Test removing a schedule period from user schedules.\n- `test_complete_account_lifecycle(self)` - Test complete account lifecycle: create, modify, disable, re-enable, delete.\n**Classes:**\n- `TestAccountLifecycle` - Test complete account lifecycle workflows with real behavior verification.\n  - `TestAccountLifecycle._materialize_and_verify(self, uid)` - Ensure minimal structures exist without overwriting existing data; return full user data.\n  - `TestAccountLifecycle._ensure_minimal_structure(self, uid)` - No description\n  - `TestAccountLifecycle.save_user_data_simple(self, user_id, account_data, preferences_data, schedules_data)` - Helper function to save user data in the correct format.\n  - `TestAccountLifecycle.setup_test_environment(self, test_data_dir, mock_config)` - Set up isolated test environment for each test.\n  - `TestAccountLifecycle.test_create_basic_account(self)` - Test creating a basic account with only messages enabled.\n  - `TestAccountLifecycle.test_create_full_account(self)` - Test creating a full account with all features enabled.\n  - `TestAccountLifecycle.test_enable_checkins_for_basic_user(self)` - Test enabling check-ins for a user who only has messages enabled.\n  - `TestAccountLifecycle.test_disable_tasks_for_full_user(self)` - Test disabling tasks for a user who has all features enabled.\n  - `TestAccountLifecycle.test_reenable_tasks_for_user(self)` - Test re-enabling tasks for a user who previously had them disabled.\n  - `TestAccountLifecycle.test_add_message_category(self, update_user_index_for_test)` - Test adding a new message category to user preferences.\n  - `TestAccountLifecycle.test_remove_message_category(self)` - Test removing a message category from user preferences.\n  - `TestAccountLifecycle.test_add_schedule_period(self)` - Test adding a new schedule period to user schedules.\n  - `TestAccountLifecycle.test_modify_schedule_period(self)` - Test modifying an existing schedule period.\n  - `TestAccountLifecycle.test_remove_schedule_period(self)` - Test removing a schedule period from user schedules.\n  - `TestAccountLifecycle.test_complete_account_lifecycle(self)` - Test complete account lifecycle: create, modify, disable, re-enable, delete.\n\n### tests/integration/test_account_management.py\n**Functions:**\n- `test_account_management_imports()` - Test that all account management modules can be imported without errors\n- `test_account_management_functions()` - Test that all account management functions can be called (with safe test data)\n- `test_account_management_data_structures(test_data_dir, mock_config)` - Test that account management can handle the expected data structures\n- `test_account_management_validation()` - Test that account management validation works correctly\n- `test_account_management_safe_operations()` - Test account management operations with temporary test data\n- `test_account_management_integration()` - Test that account management integrates properly with other systems\n\n### tests/integration/test_user_creation.py\n**Functions:**\n- `test_basic_email_user_creation(self, test_data_dir, mock_config)` - Test creating a basic email user with minimal settings.\n- `test_discord_user_creation(self, test_data_dir, mock_config)` - Test creating a Discord user with full features enabled.\n- `test_user_with_custom_fields(self, test_data_dir, mock_config)` - Test creating a user with extensive custom fields using enhanced test utilities.\n- `test_user_creation_with_schedules(self, test_data_dir, mock_config)` - Test creating a user with schedule periods using enhanced test utilities.\n- `test_username_validation(self)` - Test username validation.\n- `test_email_validation(self)` - Test email validation.\n- `test_timezone_validation(self)` - Test timezone validation.\n- `test_required_fields_validation(self, test_data_dir, mock_config)` - Test that required fields are validated.\n- `test_duplicate_user_creation(self, test_data_dir, mock_config)` - Test creating a user that already exists.\n- `test_invalid_user_id(self, test_data_dir, mock_config)` - Test creating user with invalid user ID.\n- `test_corrupted_data_handling(self, test_data_dir, mock_config)` - Test handling corrupted user data.\n- `test_full_user_lifecycle(self, test_data_dir, mock_config)` - Test complete user lifecycle: create, update, delete.\n- `test_multiple_users_same_channel(self, test_data_dir, mock_config)` - Test creating multiple users with the same channel type.\n- `test_user_with_all_features(self, test_data_dir, mock_config)` - Test creating a user with all possible features enabled.\n**Classes:**\n- `TestUserCreationScenarios` - Test comprehensive user creation scenarios.\n  - `TestUserCreationScenarios.test_basic_email_user_creation(self, test_data_dir, mock_config)` - Test creating a basic email user with minimal settings.\n  - `TestUserCreationScenarios.test_discord_user_creation(self, test_data_dir, mock_config)` - Test creating a Discord user with full features enabled.\n  - `TestUserCreationScenarios.test_user_with_custom_fields(self, test_data_dir, mock_config)` - Test creating a user with extensive custom fields using enhanced test utilities.\n  - `TestUserCreationScenarios.test_user_creation_with_schedules(self, test_data_dir, mock_config)` - Test creating a user with schedule periods using enhanced test utilities.\n- `TestUserCreationValidation` - Test validation scenarios during user creation.\n  - `TestUserCreationValidation.test_username_validation(self)` - Test username validation.\n  - `TestUserCreationValidation.test_email_validation(self)` - Test email validation.\n  - `TestUserCreationValidation.test_timezone_validation(self)` - Test timezone validation.\n  - `TestUserCreationValidation.test_required_fields_validation(self, test_data_dir, mock_config)` - Test that required fields are validated.\n- `TestUserCreationErrorHandling` - Test error handling during user creation.\n  - `TestUserCreationErrorHandling.test_duplicate_user_creation(self, test_data_dir, mock_config)` - Test creating a user that already exists.\n  - `TestUserCreationErrorHandling.test_invalid_user_id(self, test_data_dir, mock_config)` - Test creating user with invalid user ID.\n  - `TestUserCreationErrorHandling.test_corrupted_data_handling(self, test_data_dir, mock_config)` - Test handling corrupted user data.\n- `TestUserCreationIntegration` - Test integration scenarios for user creation.\n  - `TestUserCreationIntegration.test_full_user_lifecycle(self, test_data_dir, mock_config)` - Test complete user lifecycle: create, update, delete.\n  - `TestUserCreationIntegration.test_multiple_users_same_channel(self, test_data_dir, mock_config)` - Test creating multiple users with the same channel type.\n  - `TestUserCreationIntegration.test_user_with_all_features(self, test_data_dir, mock_config)` - Test creating a user with all possible features enabled.\n\n### tests/test_utilities.py\n**Functions:**\n- `create_test_user(user_id, user_type, test_data_dir)` - Convenience function to create test users with different configurations\n\nArgs:\n    user_id: Unique identifier for the test user\n    user_type: Type of user to create. Options:\n        - \"basic\": Basic user with configurable features\n        - \"discord\": Discord-specific user\n        - \"email\": Email-specific user\n\n        - \"full\": Full featured user with all capabilities\n        - \"minimal\": Minimal user with only messaging\n        - \"health\": Health-focused user\n        - \"task\": Task/productivity-focused user\n        - \"disability\": User with accessibility considerations\n        - \"complex_checkins\": User with complex check-in configurations\n        - \"limited_data\": User with minimal data (like real users)\n        - \"inconsistent\": User with inconsistent/partial data\n        - \"custom_fields\": User with custom field configurations\n        - \"scheduled\": User with custom schedule configurations\n    test_data_dir: Test data directory to use (required for modern test approach)\n    **kwargs: Additional arguments passed to the specific creation method\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `setup_test_data_environment()` - Convenience function to set up test data environment\n\nReturns:\n    tuple: (test_dir, test_data_dir, test_test_data_dir)\n- `cleanup_test_data_environment(test_dir)` - Convenience function to clean up test data environment\n\nArgs:\n    test_dir: Path to the test directory to clean up\n- `create_basic_user(user_id, enable_checkins, enable_tasks, test_data_dir)` - Create a test user with basic functionality enabled\n\nArgs:\n    user_id: Unique identifier for the test user\n    enable_checkins: Whether to enable check-ins for this user\n    enable_tasks: Whether to enable task management for this user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `_create_user_files_directly__directory_structure(test_data_dir, user_id)` - Create the user directory structure and return paths.\n- `_create_user_files_directly__account_data(actual_user_id, user_id, user_data)` - Create account data structure.\n- `_create_user_files_directly__preferences_data(user_data)` - Create preferences data structure.\n- `_create_user_files_directly__context_data(user_data)` - Create user context data structure.\n- `_create_user_files_directly__save_json(file_path, data)` - Save data to a JSON file.\n- `_create_user_files_directly__schedules_data(categories)` - Create default schedule periods for categories.\n- `_create_user_files_directly__message_files(user_dir, categories)` - Create message directory and default message files.\n- `create_basic_user__update_index(test_data_dir, user_id, actual_user_id)` - Update user index to map internal_username to UUID.\n- `_create_user_files_directly(user_id, user_data, test_data_dir)` - Helper function to create user files directly in test directory\n- `create_basic_user__with_test_dir(user_id, enable_checkins, enable_tasks, test_data_dir)` - Create basic user with test directory by directly saving files\n- `create_discord_user(user_id, discord_user_id, test_data_dir)` - Create a test user specifically configured for Discord testing\n\nArgs:\n    user_id: Unique identifier for the test user\n    discord_user_id: Discord user ID (defaults to user_id if not provided)\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `create_discord_user__with_test_dir(user_id, discord_user_id, test_data_dir)` - Create discord user with test directory by directly saving files\n- `create_full_featured_user(user_id, test_data_dir)` - Create a test user with all features enabled and comprehensive data\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `create_full_featured_user__with_test_dir(user_id, test_data_dir)` - Create full featured user with test directory by directly saving files\n- `create_full_featured_user__impl(user_id)` - Internal implementation of full featured user creation\n- `create_email_user(user_id, email, test_data_dir)` - Create a test user specifically configured for email testing\n\nArgs:\n    user_id: Unique identifier for the test user\n    email: Email address (defaults to user_id@example.com if not provided)\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    str: User ID if user was created successfully, None otherwise\n- `create_email_user__with_test_dir(user_id, email, test_data_dir)` - Create email user with test directory by directly saving files\n- `create_email_user__impl(user_id, email)` - Internal implementation of email user creation\n- `create_user_with_custom_fields(user_id, custom_fields, test_data_dir)` - Create a test user with custom fields for testing custom field functionality\n\nArgs:\n    user_id: Unique identifier for the test user\n    custom_fields: Dictionary of custom fields to add to user context\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `create_user_with_custom_fields__impl(user_id, custom_fields)` - Internal implementation of custom fields user creation\n- `create_user_with_schedules(user_id, schedule_config, test_data_dir)` - Create a test user with comprehensive schedule configuration\n\nArgs:\n    user_id: Unique identifier for the test user\n    schedule_config: Custom schedule configuration\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `create_user_with_schedules__impl(user_id, schedule_config)` - Internal implementation of schedules user creation\n- `create_minimal_user(user_id, test_data_dir)` - Create a minimal test user with only basic messaging enabled\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `create_minimal_user_and_get_id(user_id, test_data_dir)` - Create a minimal test user and return the actual UUID\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    tuple[bool, str]: (success, actual_user_id) where actual_user_id is the UUID\n- `create_minimal_user__with_test_dir(user_id, test_data_dir)` - Create minimal user with test directory by directly saving files\n- `create_minimal_user__with_test_dir_and_get_id(user_id, test_data_dir)` - Create minimal user with test directory and return the actual UUID\n- `create_minimal_user__impl(user_id)` - Internal implementation of minimal user creation\n- `create_user_with_complex_checkins(user_id, test_data_dir)` - Create a test user with complex check-in configurations\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `create_user_with_complex_checkins__with_test_dir(user_id, test_data_dir)` - Create complex checkins user with test directory by directly saving files\n- `create_user_with_complex_checkins__impl(user_id)` - Internal implementation of complex checkins user creation\n- `create_user_with_health_focus(user_id, test_data_dir)` - Create a test user with health-focused features and data\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `create_user_with_health_focus__with_test_dir(user_id, test_data_dir)` - Create health focus user with test directory by directly saving files\n- `create_user_with_health_focus__impl(user_id)` - Internal implementation of health focus user creation\n- `create_user_with_task_focus(user_id, test_data_dir)` - Create a test user with task management focus\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `create_user_with_task_focus__with_test_dir(user_id, test_data_dir)` - Create task focus user with test directory by directly saving files\n- `create_user_with_task_focus__impl(user_id)` - Internal implementation of task focus user creation\n- `create_user_with_disabilities(user_id, test_data_dir)` - Create a test user with disability-focused features and data\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `create_user_with_disabilities__with_test_dir(user_id, test_data_dir)` - Create disability user with test directory by directly saving files\n- `create_user_with_disabilities__impl(user_id)` - Internal implementation of disability user creation\n- `create_user_with_limited_data(user_id, test_data_dir)` - Create a test user with minimal data for testing edge cases\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `create_user_with_limited_data__with_test_dir(user_id, test_data_dir)` - Create limited data user with test directory by directly saving files\n- `create_user_with_limited_data__impl(user_id)` - Internal implementation of limited data user creation\n- `create_user_with_inconsistent_data(user_id, test_data_dir)` - Create a test user with inconsistent data for testing edge cases\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n- `create_user_with_inconsistent_data__with_test_dir(user_id, test_data_dir)` - Create inconsistent data user with test directory by directly saving files\n- `create_user_with_inconsistent_data__impl(user_id)` - Internal implementation of inconsistent data user creation\n- `get_test_user_data(user_id, test_data_dir)` - Get user data from test directory\n- `get_test_user_id_by_internal_username(internal_username, test_data_dir)` - Get user ID by internal username from test directory\n- `create_basic_user__verify_creation(user_id, actual_user_id, test_data_dir)` - Helper function to verify user creation with proper configuration patching\n- `verify_email_user_creation__with_test_dir(user_id, actual_user_id, test_data_dir)` - Helper function to verify email user creation with proper configuration patching\n- `setup_test_environment()` - Create isolated test environment with temporary directories\n\nReturns:\n    tuple: (test_dir, test_data_dir, test_test_data_dir)\n- `cleanup_test_environment(test_dir)` - Clean up test environment and remove temporary files\n\nArgs:\n    test_dir: Path to the test directory to clean up\n- `create_account_data(user_id)` - Create standard account data structure with optional overrides\n\nArgs:\n    user_id: User identifier\n    **overrides: Optional field overrides\n    \nReturns:\n    Dict containing account data\n- `create_preferences_data(user_id)` - Create standard preferences data structure with optional overrides\n\nArgs:\n    user_id: User identifier\n    **overrides: Optional field overrides\n    \nReturns:\n    Dict containing preferences data\n- `create_schedules_data()` - Create standard schedules data structure with optional overrides\n\nArgs:\n    **overrides: Optional field overrides\n    \nReturns:\n    Dict containing schedules data\n- `create_context_data()` - Create standard context data structure with optional overrides\n\nArgs:\n    **overrides: Optional field overrides\n    \nReturns:\n    Dict containing context data\n- `create_corrupted_user_data(user_id, corruption_type)` - Create a user with corrupted data for testing error handling\n\nArgs:\n    user_id: Unique identifier for the test user\n    corruption_type: Type of corruption (\"invalid_json\", \"missing_file\", \"empty_file\")\n    \nReturns:\n    bool: True if corrupted user was created successfully, False otherwise\n- `create_test_schedule_data(categories)` - Create test schedule data for testing schedule management\n\nArgs:\n    categories: List of categories to create schedules for\n    \nReturns:\n    Dict containing schedule data\n- `create_test_task_data(task_count)` - Create test task data for testing task management\n\nArgs:\n    task_count: Number of tasks to create\n    \nReturns:\n    List of task dictionaries\n- `create_test_message_data(category, message_count)` - Create test message data for testing message management\n\nArgs:\n    category: Message category\n    message_count: Number of messages to create\n    \nReturns:\n    List of message dictionaries\n**Classes:**\n- `TestUserFactory` - Factory for creating test users with different configurations\n  - `TestUserFactory.create_basic_user(user_id, enable_checkins, enable_tasks, test_data_dir)` - Create a test user with basic functionality enabled\n\nArgs:\n    user_id: Unique identifier for the test user\n    enable_checkins: Whether to enable check-ins for this user\n    enable_tasks: Whether to enable task management for this user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory._create_user_files_directly__directory_structure(test_data_dir, user_id)` - Create the user directory structure and return paths.\n  - `TestUserFactory._create_user_files_directly__account_data(actual_user_id, user_id, user_data)` - Create account data structure.\n  - `TestUserFactory._create_user_files_directly__preferences_data(user_data)` - Create preferences data structure.\n  - `TestUserFactory._create_user_files_directly__context_data(user_data)` - Create user context data structure.\n  - `TestUserFactory._create_user_files_directly__save_json(file_path, data)` - Save data to a JSON file.\n  - `TestUserFactory._create_user_files_directly__schedules_data(categories)` - Create default schedule periods for categories.\n  - `TestUserFactory._create_user_files_directly__message_files(user_dir, categories)` - Create message directory and default message files.\n  - `TestUserFactory.create_basic_user__update_index(test_data_dir, user_id, actual_user_id)` - Update user index to map internal_username to UUID.\n  - `TestUserFactory._create_user_files_directly(user_id, user_data, test_data_dir)` - Helper function to create user files directly in test directory\n  - `TestUserFactory.create_basic_user__with_test_dir(user_id, enable_checkins, enable_tasks, test_data_dir)` - Create basic user with test directory by directly saving files\n  - `TestUserFactory.create_discord_user(user_id, discord_user_id, test_data_dir)` - Create a test user specifically configured for Discord testing\n\nArgs:\n    user_id: Unique identifier for the test user\n    discord_user_id: Discord user ID (defaults to user_id if not provided)\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory.create_discord_user__with_test_dir(user_id, discord_user_id, test_data_dir)` - Create discord user with test directory by directly saving files\n  - `TestUserFactory.create_full_featured_user(user_id, test_data_dir)` - Create a test user with all features enabled and comprehensive data\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory.create_full_featured_user__with_test_dir(user_id, test_data_dir)` - Create full featured user with test directory by directly saving files\n  - `TestUserFactory.create_full_featured_user__impl(user_id)` - Internal implementation of full featured user creation\n  - `TestUserFactory.create_email_user(user_id, email, test_data_dir)` - Create a test user specifically configured for email testing\n\nArgs:\n    user_id: Unique identifier for the test user\n    email: Email address (defaults to user_id@example.com if not provided)\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    str: User ID if user was created successfully, None otherwise\n  - `TestUserFactory.create_email_user__with_test_dir(user_id, email, test_data_dir)` - Create email user with test directory by directly saving files\n  - `TestUserFactory.create_email_user__impl(user_id, email)` - Internal implementation of email user creation\n  - `TestUserFactory.create_user_with_custom_fields(user_id, custom_fields, test_data_dir)` - Create a test user with custom fields for testing custom field functionality\n\nArgs:\n    user_id: Unique identifier for the test user\n    custom_fields: Dictionary of custom fields to add to user context\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory.create_user_with_custom_fields__impl(user_id, custom_fields)` - Internal implementation of custom fields user creation\n  - `TestUserFactory.create_user_with_schedules(user_id, schedule_config, test_data_dir)` - Create a test user with comprehensive schedule configuration\n\nArgs:\n    user_id: Unique identifier for the test user\n    schedule_config: Custom schedule configuration\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory.create_user_with_schedules__impl(user_id, schedule_config)` - Internal implementation of schedules user creation\n  - `TestUserFactory.create_minimal_user(user_id, test_data_dir)` - Create a minimal test user with only basic messaging enabled\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory.create_minimal_user_and_get_id(user_id, test_data_dir)` - Create a minimal test user and return the actual UUID\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    tuple[bool, str]: (success, actual_user_id) where actual_user_id is the UUID\n  - `TestUserFactory.create_minimal_user__with_test_dir(user_id, test_data_dir)` - Create minimal user with test directory by directly saving files\n  - `TestUserFactory.create_minimal_user__with_test_dir_and_get_id(user_id, test_data_dir)` - Create minimal user with test directory and return the actual UUID\n  - `TestUserFactory.create_minimal_user__impl(user_id)` - Internal implementation of minimal user creation\n  - `TestUserFactory.create_user_with_complex_checkins(user_id, test_data_dir)` - Create a test user with complex check-in configurations\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory.create_user_with_complex_checkins__with_test_dir(user_id, test_data_dir)` - Create complex checkins user with test directory by directly saving files\n  - `TestUserFactory.create_user_with_complex_checkins__impl(user_id)` - Internal implementation of complex checkins user creation\n  - `TestUserFactory.create_user_with_health_focus(user_id, test_data_dir)` - Create a test user with health-focused features and data\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory.create_user_with_health_focus__with_test_dir(user_id, test_data_dir)` - Create health focus user with test directory by directly saving files\n  - `TestUserFactory.create_user_with_health_focus__impl(user_id)` - Internal implementation of health focus user creation\n  - `TestUserFactory.create_user_with_task_focus(user_id, test_data_dir)` - Create a test user with task management focus\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory.create_user_with_task_focus__with_test_dir(user_id, test_data_dir)` - Create task focus user with test directory by directly saving files\n  - `TestUserFactory.create_user_with_task_focus__impl(user_id)` - Internal implementation of task focus user creation\n  - `TestUserFactory.create_user_with_disabilities(user_id, test_data_dir)` - Create a test user with disability-focused features and data\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory.create_user_with_disabilities__with_test_dir(user_id, test_data_dir)` - Create disability user with test directory by directly saving files\n  - `TestUserFactory.create_user_with_disabilities__impl(user_id)` - Internal implementation of disability user creation\n  - `TestUserFactory.create_user_with_limited_data(user_id, test_data_dir)` - Create a test user with minimal data for testing edge cases\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory.create_user_with_limited_data__with_test_dir(user_id, test_data_dir)` - Create limited data user with test directory by directly saving files\n  - `TestUserFactory.create_user_with_limited_data__impl(user_id)` - Internal implementation of limited data user creation\n  - `TestUserFactory.create_user_with_inconsistent_data(user_id, test_data_dir)` - Create a test user with inconsistent data for testing edge cases\n\nArgs:\n    user_id: Unique identifier for the test user\n    test_data_dir: Test data directory to use (if None, uses real user directory)\n    \nReturns:\n    bool: True if user was created successfully, False otherwise\n  - `TestUserFactory.create_user_with_inconsistent_data__with_test_dir(user_id, test_data_dir)` - Create inconsistent data user with test directory by directly saving files\n  - `TestUserFactory.create_user_with_inconsistent_data__impl(user_id)` - Internal implementation of inconsistent data user creation\n  - `TestUserFactory.get_test_user_data(user_id, test_data_dir)` - Get user data from test directory\n  - `TestUserFactory.get_test_user_id_by_internal_username(internal_username, test_data_dir)` - Get user ID by internal username from test directory\n  - `TestUserFactory.create_basic_user__verify_creation(user_id, actual_user_id, test_data_dir)` - Helper function to verify user creation with proper configuration patching\n  - `TestUserFactory.verify_email_user_creation__with_test_dir(user_id, actual_user_id, test_data_dir)` - Helper function to verify email user creation with proper configuration patching\n- `TestDataManager` - Manages test data directories and cleanup\n  - `TestDataManager.setup_test_environment()` - Create isolated test environment with temporary directories\n\nReturns:\n    tuple: (test_dir, test_data_dir, test_test_data_dir)\n  - `TestDataManager.cleanup_test_environment(test_dir)` - Clean up test environment and remove temporary files\n\nArgs:\n    test_dir: Path to the test directory to clean up\n- `TestUserDataFactory` - Factory for creating specific test user data structures\n  - `TestUserDataFactory.create_account_data(user_id)` - Create standard account data structure with optional overrides\n\nArgs:\n    user_id: User identifier\n    **overrides: Optional field overrides\n    \nReturns:\n    Dict containing account data\n  - `TestUserDataFactory.create_preferences_data(user_id)` - Create standard preferences data structure with optional overrides\n\nArgs:\n    user_id: User identifier\n    **overrides: Optional field overrides\n    \nReturns:\n    Dict containing preferences data\n  - `TestUserDataFactory.create_schedules_data()` - Create standard schedules data structure with optional overrides\n\nArgs:\n    **overrides: Optional field overrides\n    \nReturns:\n    Dict containing schedules data\n  - `TestUserDataFactory.create_context_data()` - Create standard context data structure with optional overrides\n\nArgs:\n    **overrides: Optional field overrides\n    \nReturns:\n    Dict containing context data\n- `TestDataFactory` - Factory for creating test data for various scenarios\n  - `TestDataFactory.create_corrupted_user_data(user_id, corruption_type)` - Create a user with corrupted data for testing error handling\n\nArgs:\n    user_id: Unique identifier for the test user\n    corruption_type: Type of corruption (\"invalid_json\", \"missing_file\", \"empty_file\")\n    \nReturns:\n    bool: True if corrupted user was created successfully, False otherwise\n  - `TestDataFactory.create_test_schedule_data(categories)` - Create test schedule data for testing schedule management\n\nArgs:\n    categories: List of categories to create schedules for\n    \nReturns:\n    Dict containing schedule data\n  - `TestDataFactory.create_test_task_data(task_count)` - Create test task data for testing task management\n\nArgs:\n    task_count: Number of tasks to create\n    \nReturns:\n    List of task dictionaries\n  - `TestDataFactory.create_test_message_data(category, message_count)` - Create test message data for testing message management\n\nArgs:\n    category: Message category\n    message_count: Number of messages to create\n    \nReturns:\n    List of message dictionaries\n\n### tests/ui/test_account_creation_ui.py\n**Functions:**\n- `qapp()` - Create QApplication instance for UI testing.\n- `dialog(self, qapp, test_data_dir, mock_config)` - Create account creation dialog for testing.\n- `test_dialog_initialization_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\n- `test_feature_enablement_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test feature enablement checkboxes control tab visibility.\n- `test_username_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test username validation with real UI interactions.\n- `test_timezone_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test timezone validation with real UI interactions.\n- `test_feature_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test feature validation with proper category requirements.\n- `test_messages_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test messages-specific validation when messages are enabled.\n- `test_account_creation_real_behavior(self, dialog, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test complete account creation workflow with real file operations.\n- `test_widget_data_collection_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test that widgets properly collect and return data.\n- `test_user_profile_dialog_integration(self, qapp, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test user profile dialog integration with real user data.\n- `test_user_index_integration_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test user index integration with real file operations.\n- `test_feature_enablement_persistence_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test that feature enablement is properly persisted using enhanced test utilities.\n- `test_duplicate_username_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of duplicate usernames using enhanced test utilities.\n- `test_invalid_data_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of invalid data during account creation.\n- `test_file_system_error_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of file system errors.\n- `test_widget_error_handling_real_behavior(self, qapp, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of widget errors during account creation.\n- `test_full_account_lifecycle_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test complete account lifecycle with real file operations.\n- `test_multiple_users_same_features_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test creating multiple users with same features.\n- `mock_accept_impl()` - No description\n**Classes:**\n- `TestAccountCreationDialogRealBehavior` - Test account creation dialog with real behavior verification.\n  - `TestAccountCreationDialogRealBehavior.dialog(self, qapp, test_data_dir, mock_config)` - Create account creation dialog for testing.\n  - `TestAccountCreationDialogRealBehavior.test_dialog_initialization_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\n  - `TestAccountCreationDialogRealBehavior.test_feature_enablement_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test feature enablement checkboxes control tab visibility.\n  - `TestAccountCreationDialogRealBehavior.test_username_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test username validation with real UI interactions.\n  - `TestAccountCreationDialogRealBehavior.test_timezone_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test timezone validation with real UI interactions.\n  - `TestAccountCreationDialogRealBehavior.test_feature_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test feature validation with proper category requirements.\n  - `TestAccountCreationDialogRealBehavior.test_messages_validation_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test messages-specific validation when messages are enabled.\n  - `TestAccountCreationDialogRealBehavior.test_account_creation_real_behavior(self, dialog, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test complete account creation workflow with real file operations.\n  - `TestAccountCreationDialogRealBehavior.test_widget_data_collection_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test that widgets properly collect and return data.\n- `TestAccountManagementRealBehavior` - Test account management functionality with real behavior verification.\n  - `TestAccountManagementRealBehavior.test_user_profile_dialog_integration(self, qapp, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test user profile dialog integration with real user data.\n  - `TestAccountManagementRealBehavior.test_user_index_integration_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test user index integration with real file operations.\n  - `TestAccountManagementRealBehavior.test_feature_enablement_persistence_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test that feature enablement is properly persisted using enhanced test utilities.\n- `TestAccountCreationErrorHandling` - Test error handling in account creation and management.\n  - `TestAccountCreationErrorHandling.test_duplicate_username_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of duplicate usernames using enhanced test utilities.\n  - `TestAccountCreationErrorHandling.test_invalid_data_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of invalid data during account creation.\n  - `TestAccountCreationErrorHandling.test_file_system_error_handling_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of file system errors.\n  - `TestAccountCreationErrorHandling.test_widget_error_handling_real_behavior(self, qapp, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test handling of widget errors during account creation.\n- `TestAccountCreationIntegration` - Test integration scenarios for account creation and management.\n  - `TestAccountCreationIntegration.test_full_account_lifecycle_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test complete account lifecycle with real file operations.\n  - `TestAccountCreationIntegration.test_multiple_users_same_features_real_behavior(self, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test creating multiple users with same features.\n\n### tests/ui/test_channel_management_dialog_coverage_expansion.py\n**Functions:**\n- `mock_user_data(self)` - Mock user data for testing.\n- `test_save_channel_settings_without_user(self)` - Test save_channel_settings when no user ID is set.\n- `test_save_channel_settings_success_email(self, mock_user_data)` - Test successful save with email channel.\n- `test_save_channel_settings_success_discord(self, mock_user_data)` - Test successful save with Discord channel.\n- `test_save_channel_settings_validation_error_email_required(self, mock_user_data)` - Test validation error when email is required but not provided.\n- `test_save_channel_settings_validation_error_discord_required(self, mock_user_data)` - Test validation error when Discord ID is required but not provided.\n- `test_save_channel_settings_validation_error_invalid_email(self, mock_user_data)` - Test validation error for invalid email format.\n- `test_save_channel_settings_validation_error_invalid_phone(self, mock_user_data)` - Test validation error for invalid phone format.\n- `test_save_channel_settings_multiple_validation_errors(self, mock_user_data)` - Test multiple validation errors.\n- `test_save_channel_settings_exception_handling(self, mock_user_data)` - Test exception handling during save.\n- `test_save_channel_settings_removes_old_settings(self, mock_user_data)` - Test that old settings are properly removed.\n- `test_get_selected_channel(self, mock_user_data)` - Test get_selected_channel method.\n- `test_set_selected_channel(self, mock_user_data)` - Test set_selected_channel method.\n**Classes:**\n- `TestChannelManagementDialogCoverageExpansion` - Test coverage expansion for ChannelManagementDialog.\n  - `TestChannelManagementDialogCoverageExpansion.mock_user_data(self)` - Mock user data for testing.\n  - `TestChannelManagementDialogCoverageExpansion.test_save_channel_settings_without_user(self)` - Test save_channel_settings when no user ID is set.\n  - `TestChannelManagementDialogCoverageExpansion.test_save_channel_settings_success_email(self, mock_user_data)` - Test successful save with email channel.\n  - `TestChannelManagementDialogCoverageExpansion.test_save_channel_settings_success_discord(self, mock_user_data)` - Test successful save with Discord channel.\n  - `TestChannelManagementDialogCoverageExpansion.test_save_channel_settings_validation_error_email_required(self, mock_user_data)` - Test validation error when email is required but not provided.\n  - `TestChannelManagementDialogCoverageExpansion.test_save_channel_settings_validation_error_discord_required(self, mock_user_data)` - Test validation error when Discord ID is required but not provided.\n  - `TestChannelManagementDialogCoverageExpansion.test_save_channel_settings_validation_error_invalid_email(self, mock_user_data)` - Test validation error for invalid email format.\n  - `TestChannelManagementDialogCoverageExpansion.test_save_channel_settings_validation_error_invalid_phone(self, mock_user_data)` - Test validation error for invalid phone format.\n  - `TestChannelManagementDialogCoverageExpansion.test_save_channel_settings_multiple_validation_errors(self, mock_user_data)` - Test multiple validation errors.\n  - `TestChannelManagementDialogCoverageExpansion.test_save_channel_settings_exception_handling(self, mock_user_data)` - Test exception handling during save.\n  - `TestChannelManagementDialogCoverageExpansion.test_save_channel_settings_removes_old_settings(self, mock_user_data)` - Test that old settings are properly removed.\n  - `TestChannelManagementDialogCoverageExpansion.test_get_selected_channel(self, mock_user_data)` - Test get_selected_channel method.\n  - `TestChannelManagementDialogCoverageExpansion.test_set_selected_channel(self, mock_user_data)` - Test set_selected_channel method.\n\n### tests/ui/test_dialog_behavior.py\n**Functions:**\n- `qapp()` - Create QApplication instance for UI testing.\n- `dialog(self, qapp, test_data_dir)` - Create user profile dialog for testing.\n- `test_dialog_initialization_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\n- `test_data_loading_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog loads existing user data correctly.\n- `test_data_saving_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog saves user data correctly.\n- `test_dynamic_list_fields_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dynamic list fields work correctly.\n- `dialog(self, qapp, test_data_dir)` - Create category management dialog for testing.\n- `test_dialog_initialization_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\n- `test_category_selection_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test category selection and saving works correctly.\n- `dialog(self, qapp, test_data_dir)` - Create channel management dialog for testing.\n- `test_dialog_initialization_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\n- `test_channel_configuration_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test channel configuration and saving works correctly.\n- `dialog(self, qapp, test_data_dir)` - Create check-in management dialog for testing.\n- `test_dialog_initialization_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\n- `test_checkin_enablement_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test check-in enablement toggle works correctly.\n- `dialog(self, qapp, test_data_dir)` - Create task management dialog for testing.\n- `test_dialog_initialization_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\n- `test_task_statistics_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test task statistics are calculated and displayed correctly.\n**Classes:**\n- `TestUserProfileDialogBehavior` - Test user profile dialog with real behavior verification.\n  - `TestUserProfileDialogBehavior.dialog(self, qapp, test_data_dir)` - Create user profile dialog for testing.\n  - `TestUserProfileDialogBehavior.test_dialog_initialization_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\n  - `TestUserProfileDialogBehavior.test_data_loading_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog loads existing user data correctly.\n  - `TestUserProfileDialogBehavior.test_data_saving_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog saves user data correctly.\n  - `TestUserProfileDialogBehavior.test_dynamic_list_fields_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dynamic list fields work correctly.\n- `TestCategoryManagementDialogBehavior` - Test category management dialog with real behavior verification.\n  - `TestCategoryManagementDialogBehavior.dialog(self, qapp, test_data_dir)` - Create category management dialog for testing.\n  - `TestCategoryManagementDialogBehavior.test_dialog_initialization_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\n  - `TestCategoryManagementDialogBehavior.test_category_selection_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test category selection and saving works correctly.\n- `TestChannelManagementDialogBehavior` - Test channel management dialog with real behavior verification.\n  - `TestChannelManagementDialogBehavior.dialog(self, qapp, test_data_dir)` - Create channel management dialog for testing.\n  - `TestChannelManagementDialogBehavior.test_dialog_initialization_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\n  - `TestChannelManagementDialogBehavior.test_channel_configuration_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test channel configuration and saving works correctly.\n- `TestCheckinManagementDialogBehavior` - Test check-in management dialog with real behavior verification.\n  - `TestCheckinManagementDialogBehavior.dialog(self, qapp, test_data_dir)` - Create check-in management dialog for testing.\n  - `TestCheckinManagementDialogBehavior.test_dialog_initialization_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\n  - `TestCheckinManagementDialogBehavior.test_checkin_enablement_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test check-in enablement toggle works correctly.\n- `TestTaskManagementDialogBehavior` - Test task management dialog with real behavior verification.\n  - `TestTaskManagementDialogBehavior.dialog(self, qapp, test_data_dir)` - Create task management dialog for testing.\n  - `TestTaskManagementDialogBehavior.test_dialog_initialization_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test dialog initializes correctly with proper UI state.\n  - `TestTaskManagementDialogBehavior.test_task_statistics_real_behavior(self, dialog, test_data_dir)` - REAL BEHAVIOR TEST: Test task statistics are calculated and displayed correctly.\n\n### tests/ui/test_dialog_coverage_expansion.py\n**Functions:**\n- `qapp()` - Create QApplication instance for UI testing.\n- `test_user_data(self, test_data_dir)` - Create test user with schedule data.\n- `dialog(self, qapp, test_user_data, test_data_dir)` - Create schedule editor dialog for testing.\n- `test_dialog_initialization_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog initialization loads existing data.\n- `test_existing_data_loading_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog loads existing schedule data.\n- `test_add_new_period_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test adding a new period creates widget and updates data.\n- `test_delete_period_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test deleting a period removes widget and tracks for undo.\n- `test_undo_delete_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test undo delete restores deleted period.\n- `test_data_saving_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test saving dialog data updates user files.\n- `test_validation_error_handling_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test validation errors are handled gracefully.\n- `test_open_schedule_editor_function_real_behavior(self, qapp, test_user_data, test_data_dir)` - Test open_schedule_editor function creates and shows dialog.\n- `test_user_data(self, test_data_dir)` - No description\n- `dialog(self, qapp, test_user_data, test_data_dir)` - Create task edit dialog for testing.\n- `test_dialog_initialization_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog initialization sets up UI correctly.\n- `test_task_data_editing_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test editing task data updates form fields.\n- `test_task_saving_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test task saving functionality.\n- `test_validation_error_handling_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test validation errors are handled gracefully.\n- `test_user_data(self, test_data_dir)` - No description\n- `dialog(self, qapp, test_user_data, test_data_dir)` - Create task CRUD dialog for testing.\n- `test_dialog_initialization_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog initialization sets up UI correctly.\n- `test_add_task_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test adding a new task updates the table.\n- `test_edit_task_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test editing a task shows edit dialog.\n- `test_delete_task_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test deleting a task removes it from the table.\n- `test_user_data(self, test_data_dir)` - Create test user with task data.\n- `dialog(self, qapp, test_user_data, test_data_dir)` - Create task completion dialog for testing.\n- `test_dialog_initialization_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog initialization sets up UI correctly.\n- `test_task_completion_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test completing a task updates user data.\n- `test_user_data(self, test_data_dir)` - No description\n- `dialog(self, qapp, test_user_data, test_data_dir)` - Create user profile dialog for testing.\n- `test_dialog_initialization_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog initialization sets up UI correctly.\n- `test_profile_data_editing_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test editing profile data updates form fields.\n- `test_dynamic_list_fields_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dynamic list fields (health conditions, medications, etc.).\n- `test_validation_error_handling_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test validation errors are handled gracefully.\n**Classes:**\n- `TestScheduleEditorDialogBehavior` - Test schedule editor dialog with real behavior verification.\n  - `TestScheduleEditorDialogBehavior.test_user_data(self, test_data_dir)` - Create test user with schedule data.\n  - `TestScheduleEditorDialogBehavior.dialog(self, qapp, test_user_data, test_data_dir)` - Create schedule editor dialog for testing.\n  - `TestScheduleEditorDialogBehavior.test_dialog_initialization_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog initialization loads existing data.\n  - `TestScheduleEditorDialogBehavior.test_existing_data_loading_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog loads existing schedule data.\n  - `TestScheduleEditorDialogBehavior.test_add_new_period_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test adding a new period creates widget and updates data.\n  - `TestScheduleEditorDialogBehavior.test_delete_period_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test deleting a period removes widget and tracks for undo.\n  - `TestScheduleEditorDialogBehavior.test_undo_delete_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test undo delete restores deleted period.\n  - `TestScheduleEditorDialogBehavior.test_data_saving_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test saving dialog data updates user files.\n  - `TestScheduleEditorDialogBehavior.test_validation_error_handling_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test validation errors are handled gracefully.\n  - `TestScheduleEditorDialogBehavior.test_open_schedule_editor_function_real_behavior(self, qapp, test_user_data, test_data_dir)` - Test open_schedule_editor function creates and shows dialog.\n- `TestTaskEditDialogBehavior` - Test TaskEditDialog behavior.\n  - `TestTaskEditDialogBehavior.test_user_data(self, test_data_dir)` - No description\n  - `TestTaskEditDialogBehavior.dialog(self, qapp, test_user_data, test_data_dir)` - Create task edit dialog for testing.\n  - `TestTaskEditDialogBehavior.test_dialog_initialization_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog initialization sets up UI correctly.\n  - `TestTaskEditDialogBehavior.test_task_data_editing_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test editing task data updates form fields.\n  - `TestTaskEditDialogBehavior.test_task_saving_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test task saving functionality.\n  - `TestTaskEditDialogBehavior.test_validation_error_handling_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test validation errors are handled gracefully.\n- `TestTaskCrudDialogBehavior` - Test TaskCrudDialog behavior.\n  - `TestTaskCrudDialogBehavior.test_user_data(self, test_data_dir)` - No description\n  - `TestTaskCrudDialogBehavior.dialog(self, qapp, test_user_data, test_data_dir)` - Create task CRUD dialog for testing.\n  - `TestTaskCrudDialogBehavior.test_dialog_initialization_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog initialization sets up UI correctly.\n  - `TestTaskCrudDialogBehavior.test_add_task_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test adding a new task updates the table.\n  - `TestTaskCrudDialogBehavior.test_edit_task_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test editing a task shows edit dialog.\n  - `TestTaskCrudDialogBehavior.test_delete_task_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test deleting a task removes it from the table.\n- `TestTaskCompletionDialogBehavior` - Test task completion dialog with real behavior verification.\n  - `TestTaskCompletionDialogBehavior.test_user_data(self, test_data_dir)` - Create test user with task data.\n  - `TestTaskCompletionDialogBehavior.dialog(self, qapp, test_user_data, test_data_dir)` - Create task completion dialog for testing.\n  - `TestTaskCompletionDialogBehavior.test_dialog_initialization_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog initialization sets up UI correctly.\n  - `TestTaskCompletionDialogBehavior.test_task_completion_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test completing a task updates user data.\n- `TestUserProfileDialogBehavior` - Test UserProfileDialog behavior.\n  - `TestUserProfileDialogBehavior.test_user_data(self, test_data_dir)` - No description\n  - `TestUserProfileDialogBehavior.dialog(self, qapp, test_user_data, test_data_dir)` - Create user profile dialog for testing.\n  - `TestUserProfileDialogBehavior.test_dialog_initialization_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog initialization sets up UI correctly.\n  - `TestUserProfileDialogBehavior.test_profile_data_editing_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test editing profile data updates form fields.\n  - `TestUserProfileDialogBehavior.test_dynamic_list_fields_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dynamic list fields (health conditions, medications, etc.).\n  - `TestUserProfileDialogBehavior.test_validation_error_handling_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test validation errors are handled gracefully.\n\n### tests/ui/test_dialogs.py\n**Functions:**\n- `test_dialog_imports()` - Test that all dialog modules can be imported without errors\n- `test_widget_imports()` - Test that all widget modules can be imported without errors\n- `test_ui_files_exist()` - Test that all required UI files exist\n- `test_generated_files_exist()` - Test that all generated Python UI files exist\n- `test_user_data_access(test_data_dir, mock_config, mock_user_data)` - Test that we can access user data for testing - READ ONLY\n- `test_dialog_instantiation(monkeypatch)` - Test that dialogs can be instantiated (without showing them)\n- `mock_save(data)` - No description\n\n### tests/ui/test_ui_widgets_coverage_expansion.py\n**Functions:**\n- `app(self)` - Create QApplication instance for testing.\n- `temp_dir(self, test_path_factory)` - Provide a per-test directory under tests/data/tmp.\n- `user_id(self)` - Create a test user ID.\n- `mock_user_data_dir(self, temp_dir)` - Mock user data directory.\n- `mock_message_boxes(self)` - Mock all QMessageBox dialogs to prevent real UI dialogs during testing.\n- `cleanup_widgets(self)` - Ensure widgets are properly cleaned up after each test.\n- `test_tag_widget_management_mode_initialization_real_behavior(self, app, mock_user_data_dir, user_id)` - Test TagWidget initialization in management mode.\n- `test_tag_widget_selection_mode_initialization_real_behavior(self, app, mock_user_data_dir, user_id)` - Test TagWidget initialization in selection mode.\n- `test_tag_widget_account_creation_mode_real_behavior(self, app, mock_user_data_dir)` - Test TagWidget in account creation mode (no user_id).\n- `test_tag_widget_add_tag_management_mode_real_behavior(self, app, mock_user_data_dir, user_id)` - Test adding a tag in management mode.\n- `test_tag_widget_add_tag_account_creation_mode_real_behavior(self, app, mock_user_data_dir)` - Test adding a tag in account creation mode.\n- `test_tag_widget_add_duplicate_tag_real_behavior(self, app, mock_user_data_dir, user_id)` - Test adding a duplicate tag.\n- `test_tag_widget_add_empty_tag_real_behavior(self, app, mock_user_data_dir, user_id)` - Test adding an empty tag.\n- `test_tag_widget_edit_tag_real_behavior(self, app, mock_user_data_dir, user_id)` - Test editing a tag.\n- `test_tag_widget_edit_tag_account_creation_mode_real_behavior(self, app, mock_user_data_dir)` - Test editing a tag in account creation mode.\n- `test_tag_widget_delete_tag_real_behavior(self, app, mock_user_data_dir, user_id)` - Test deleting a tag.\n- `test_tag_widget_delete_tag_account_creation_mode_real_behavior(self, app, mock_user_data_dir)` - Test deleting a tag in account creation mode.\n- `test_tag_widget_undo_delete_real_behavior(self, app, mock_user_data_dir)` - Test undoing tag deletion in account creation mode.\n- `test_tag_widget_selection_mode_checkbox_behavior_real_behavior(self, app, mock_user_data_dir, user_id)` - Test checkbox behavior in selection mode.\n- `test_tag_widget_selection_changed_signal_real_behavior(self, app, mock_user_data_dir, user_id)` - Test that selection changes emit signals.\n- `test_tag_widget_get_selected_tags_real_behavior(self, app, mock_user_data_dir, user_id)` - Test getting selected tags.\n- `test_tag_widget_set_selected_tags_real_behavior(self, app, mock_user_data_dir, user_id)` - Test setting selected tags.\n- `test_tag_widget_refresh_tags_real_behavior(self, app, mock_user_data_dir, user_id)` - Test refreshing tags.\n- `test_period_row_widget_initialization_real_behavior(self, app)` - Test PeriodRowWidget initialization.\n- `test_period_row_widget_default_initialization_real_behavior(self, app)` - Test PeriodRowWidget initialization with default data.\n- `test_period_row_widget_all_period_initialization_real_behavior(self, app)` - Test PeriodRowWidget initialization for ALL period.\n- `test_period_row_widget_load_period_data_real_behavior(self, app)` - Test loading period data into UI.\n- `test_period_row_widget_get_period_data_real_behavior(self, app)` - Test getting period data from UI.\n- `test_period_row_widget_delete_requested_signal_real_behavior(self, app)` - Test that delete button emits signal.\n- `test_period_row_widget_read_only_mode_real_behavior(self, app)` - Test read-only mode functionality.\n- `test_period_row_widget_validation_real_behavior(self, app)` - Test period validation.\n- `test_period_row_widget_day_selection_real_behavior(self, app)` - Test day selection functionality.\n- `test_dynamic_list_container_initialization_real_behavior(self, app)` - Test DynamicListContainer initialization.\n- `test_dynamic_list_container_add_blank_row_real_behavior(self, app)` - Test adding a blank row.\n- `test_dynamic_list_container_row_edited_real_behavior(self, app)` - Test row editing behavior.\n- `test_dynamic_list_container_row_deleted_real_behavior(self, app)` - Test row deletion behavior.\n- `test_dynamic_list_container_get_values_real_behavior(self, app)` - Test getting values from container.\n- `test_dynamic_list_container_set_values_real_behavior(self, app)` - Test setting values in container.\n- `test_dynamic_list_container_duplicate_detection_real_behavior(self, app)` - Test duplicate value detection.\n- `test_dynamic_list_container_signal_emission_real_behavior(self, app)` - Test that value changes emit signals.\n- `test_tag_widget_error_handling_real_behavior(self, app, mock_user_data_dir, user_id)` - Test error handling in TagWidget.\n- `test_period_row_widget_error_handling_real_behavior(self, app)` - Test error handling in PeriodRowWidget.\n- `test_dynamic_list_container_error_handling_real_behavior(self, app)` - Test error handling in DynamicListContainer.\n- `test_widget_integration_real_behavior(self, app, mock_user_data_dir, user_id)` - Test integration between widgets.\n- `test_widget_lifecycle_real_behavior(self, app, mock_user_data_dir, user_id)` - Test widget lifecycle management.\n- `test_widget_performance_real_behavior(self, app, mock_user_data_dir, user_id)` - Test widget performance with large datasets.\n- `test_widget_memory_usage_real_behavior(self, app, mock_user_data_dir, user_id)` - Test widget memory usage.\n- `on_delete_requested(widget_instance)` - No description\n- `on_tags_changed()` - No description\n- `on_values_changed()` - No description\n**Classes:**\n- `TestUIWidgetsCoverageExpansion` - Comprehensive test coverage expansion for UI widgets.\n  - `TestUIWidgetsCoverageExpansion.app(self)` - Create QApplication instance for testing.\n  - `TestUIWidgetsCoverageExpansion.temp_dir(self, test_path_factory)` - Provide a per-test directory under tests/data/tmp.\n  - `TestUIWidgetsCoverageExpansion.user_id(self)` - Create a test user ID.\n  - `TestUIWidgetsCoverageExpansion.mock_user_data_dir(self, temp_dir)` - Mock user data directory.\n  - `TestUIWidgetsCoverageExpansion.mock_message_boxes(self)` - Mock all QMessageBox dialogs to prevent real UI dialogs during testing.\n  - `TestUIWidgetsCoverageExpansion.cleanup_widgets(self)` - Ensure widgets are properly cleaned up after each test.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_management_mode_initialization_real_behavior(self, app, mock_user_data_dir, user_id)` - Test TagWidget initialization in management mode.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_selection_mode_initialization_real_behavior(self, app, mock_user_data_dir, user_id)` - Test TagWidget initialization in selection mode.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_account_creation_mode_real_behavior(self, app, mock_user_data_dir)` - Test TagWidget in account creation mode (no user_id).\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_add_tag_management_mode_real_behavior(self, app, mock_user_data_dir, user_id)` - Test adding a tag in management mode.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_add_tag_account_creation_mode_real_behavior(self, app, mock_user_data_dir)` - Test adding a tag in account creation mode.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_add_duplicate_tag_real_behavior(self, app, mock_user_data_dir, user_id)` - Test adding a duplicate tag.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_add_empty_tag_real_behavior(self, app, mock_user_data_dir, user_id)` - Test adding an empty tag.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_edit_tag_real_behavior(self, app, mock_user_data_dir, user_id)` - Test editing a tag.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_edit_tag_account_creation_mode_real_behavior(self, app, mock_user_data_dir)` - Test editing a tag in account creation mode.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_delete_tag_real_behavior(self, app, mock_user_data_dir, user_id)` - Test deleting a tag.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_delete_tag_account_creation_mode_real_behavior(self, app, mock_user_data_dir)` - Test deleting a tag in account creation mode.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_undo_delete_real_behavior(self, app, mock_user_data_dir)` - Test undoing tag deletion in account creation mode.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_selection_mode_checkbox_behavior_real_behavior(self, app, mock_user_data_dir, user_id)` - Test checkbox behavior in selection mode.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_selection_changed_signal_real_behavior(self, app, mock_user_data_dir, user_id)` - Test that selection changes emit signals.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_get_selected_tags_real_behavior(self, app, mock_user_data_dir, user_id)` - Test getting selected tags.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_set_selected_tags_real_behavior(self, app, mock_user_data_dir, user_id)` - Test setting selected tags.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_refresh_tags_real_behavior(self, app, mock_user_data_dir, user_id)` - Test refreshing tags.\n  - `TestUIWidgetsCoverageExpansion.test_period_row_widget_initialization_real_behavior(self, app)` - Test PeriodRowWidget initialization.\n  - `TestUIWidgetsCoverageExpansion.test_period_row_widget_default_initialization_real_behavior(self, app)` - Test PeriodRowWidget initialization with default data.\n  - `TestUIWidgetsCoverageExpansion.test_period_row_widget_all_period_initialization_real_behavior(self, app)` - Test PeriodRowWidget initialization for ALL period.\n  - `TestUIWidgetsCoverageExpansion.test_period_row_widget_load_period_data_real_behavior(self, app)` - Test loading period data into UI.\n  - `TestUIWidgetsCoverageExpansion.test_period_row_widget_get_period_data_real_behavior(self, app)` - Test getting period data from UI.\n  - `TestUIWidgetsCoverageExpansion.test_period_row_widget_delete_requested_signal_real_behavior(self, app)` - Test that delete button emits signal.\n  - `TestUIWidgetsCoverageExpansion.test_period_row_widget_read_only_mode_real_behavior(self, app)` - Test read-only mode functionality.\n  - `TestUIWidgetsCoverageExpansion.test_period_row_widget_validation_real_behavior(self, app)` - Test period validation.\n  - `TestUIWidgetsCoverageExpansion.test_period_row_widget_day_selection_real_behavior(self, app)` - Test day selection functionality.\n  - `TestUIWidgetsCoverageExpansion.test_dynamic_list_container_initialization_real_behavior(self, app)` - Test DynamicListContainer initialization.\n  - `TestUIWidgetsCoverageExpansion.test_dynamic_list_container_add_blank_row_real_behavior(self, app)` - Test adding a blank row.\n  - `TestUIWidgetsCoverageExpansion.test_dynamic_list_container_row_edited_real_behavior(self, app)` - Test row editing behavior.\n  - `TestUIWidgetsCoverageExpansion.test_dynamic_list_container_row_deleted_real_behavior(self, app)` - Test row deletion behavior.\n  - `TestUIWidgetsCoverageExpansion.test_dynamic_list_container_get_values_real_behavior(self, app)` - Test getting values from container.\n  - `TestUIWidgetsCoverageExpansion.test_dynamic_list_container_set_values_real_behavior(self, app)` - Test setting values in container.\n  - `TestUIWidgetsCoverageExpansion.test_dynamic_list_container_duplicate_detection_real_behavior(self, app)` - Test duplicate value detection.\n  - `TestUIWidgetsCoverageExpansion.test_dynamic_list_container_signal_emission_real_behavior(self, app)` - Test that value changes emit signals.\n  - `TestUIWidgetsCoverageExpansion.test_tag_widget_error_handling_real_behavior(self, app, mock_user_data_dir, user_id)` - Test error handling in TagWidget.\n  - `TestUIWidgetsCoverageExpansion.test_period_row_widget_error_handling_real_behavior(self, app)` - Test error handling in PeriodRowWidget.\n  - `TestUIWidgetsCoverageExpansion.test_dynamic_list_container_error_handling_real_behavior(self, app)` - Test error handling in DynamicListContainer.\n  - `TestUIWidgetsCoverageExpansion.test_widget_integration_real_behavior(self, app, mock_user_data_dir, user_id)` - Test integration between widgets.\n  - `TestUIWidgetsCoverageExpansion.test_widget_lifecycle_real_behavior(self, app, mock_user_data_dir, user_id)` - Test widget lifecycle management.\n  - `TestUIWidgetsCoverageExpansion.test_widget_performance_real_behavior(self, app, mock_user_data_dir, user_id)` - Test widget performance with large datasets.\n  - `TestUIWidgetsCoverageExpansion.test_widget_memory_usage_real_behavior(self, app, mock_user_data_dir, user_id)` - Test widget memory usage.\n\n### tests/ui/test_user_profile_dialog_coverage_expansion.py\n**Functions:**\n- `qapp()` - Create QApplication instance for UI testing.\n- `test_user_data(self, test_data_dir)` - Create test user with personalization data.\n- `dialog(self, qapp, test_user_data, test_data_dir)` - Create user profile dialog for testing.\n- `empty_dialog(self, qapp, test_data_dir)` - Create user profile dialog with no existing data.\n- `test_dialog_initialization_with_existing_data_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog initialization with existing personalization data.\n- `test_dialog_initialization_without_data_real_behavior(self, empty_dialog, test_data_dir)` - Test dialog initialization without existing data.\n- `test_center_dialog_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog centering functionality.\n- `test_key_press_event_escape_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test escape key handling.\n- `test_key_press_event_enter_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test enter key handling.\n- `test_create_custom_field_list_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test custom field list creation.\n- `test_add_custom_field_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test adding custom fields.\n- `test_remove_custom_field_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test removing custom fields.\n- `test_create_health_section_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test health section creation.\n- `test_create_loved_ones_section_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test loved ones section creation.\n- `test_add_loved_one_widget_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test adding loved one widgets.\n- `test_add_loved_one_widget_without_data_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test adding loved one widget without data.\n- `test_remove_loved_one_widget_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test removing loved one widgets.\n- `test_save_personalization_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test saving personalization data.\n- `test_save_personalization_without_callback_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test saving personalization without save callback.\n- `test_save_personalization_validation_error_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test saving personalization with validation errors.\n- `test_cancel_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test canceling the dialog.\n- `test_close_event_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test close event handling.\n- `test_close_event_declined_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test close event handling when user declines.\n- `test_title_case_conversion_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test title case conversion in custom field list creation.\n- `test_multi_column_layout_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test multi-column layout for large predefined value sets.\n- `test_custom_field_interaction_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test custom field interaction (add, edit, remove).\n- `test_loved_one_widget_interaction_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test loved one widget interaction (add, edit, remove).\n- `test_dialog_with_parent_real_behavior(self, qapp, test_data_dir)` - Test dialog creation with parent window.\n- `test_dialog_window_flags_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog window flags are set correctly.\n- `test_dialog_modal_behavior_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog modal behavior.\n- `test_dialog_size_constraints_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog size constraints.\n- `test_profile_widget_integration_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test integration with UserProfileSettingsWidget.\n- `test_error_handling_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test error handling in dialog operations.\n- `test_dialog_cleanup_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog cleanup on destruction.\n**Classes:**\n- `TestUserProfileDialogCoverageExpansion` - Comprehensive test suite for UserProfileDialog coverage expansion.\n  - `TestUserProfileDialogCoverageExpansion.test_user_data(self, test_data_dir)` - Create test user with personalization data.\n  - `TestUserProfileDialogCoverageExpansion.dialog(self, qapp, test_user_data, test_data_dir)` - Create user profile dialog for testing.\n  - `TestUserProfileDialogCoverageExpansion.empty_dialog(self, qapp, test_data_dir)` - Create user profile dialog with no existing data.\n  - `TestUserProfileDialogCoverageExpansion.test_dialog_initialization_with_existing_data_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog initialization with existing personalization data.\n  - `TestUserProfileDialogCoverageExpansion.test_dialog_initialization_without_data_real_behavior(self, empty_dialog, test_data_dir)` - Test dialog initialization without existing data.\n  - `TestUserProfileDialogCoverageExpansion.test_center_dialog_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog centering functionality.\n  - `TestUserProfileDialogCoverageExpansion.test_key_press_event_escape_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test escape key handling.\n  - `TestUserProfileDialogCoverageExpansion.test_key_press_event_enter_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test enter key handling.\n  - `TestUserProfileDialogCoverageExpansion.test_create_custom_field_list_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test custom field list creation.\n  - `TestUserProfileDialogCoverageExpansion.test_add_custom_field_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test adding custom fields.\n  - `TestUserProfileDialogCoverageExpansion.test_remove_custom_field_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test removing custom fields.\n  - `TestUserProfileDialogCoverageExpansion.test_create_health_section_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test health section creation.\n  - `TestUserProfileDialogCoverageExpansion.test_create_loved_ones_section_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test loved ones section creation.\n  - `TestUserProfileDialogCoverageExpansion.test_add_loved_one_widget_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test adding loved one widgets.\n  - `TestUserProfileDialogCoverageExpansion.test_add_loved_one_widget_without_data_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test adding loved one widget without data.\n  - `TestUserProfileDialogCoverageExpansion.test_remove_loved_one_widget_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test removing loved one widgets.\n  - `TestUserProfileDialogCoverageExpansion.test_save_personalization_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test saving personalization data.\n  - `TestUserProfileDialogCoverageExpansion.test_save_personalization_without_callback_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test saving personalization without save callback.\n  - `TestUserProfileDialogCoverageExpansion.test_save_personalization_validation_error_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test saving personalization with validation errors.\n  - `TestUserProfileDialogCoverageExpansion.test_cancel_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test canceling the dialog.\n  - `TestUserProfileDialogCoverageExpansion.test_close_event_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test close event handling.\n  - `TestUserProfileDialogCoverageExpansion.test_close_event_declined_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test close event handling when user declines.\n  - `TestUserProfileDialogCoverageExpansion.test_title_case_conversion_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test title case conversion in custom field list creation.\n  - `TestUserProfileDialogCoverageExpansion.test_multi_column_layout_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test multi-column layout for large predefined value sets.\n  - `TestUserProfileDialogCoverageExpansion.test_custom_field_interaction_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test custom field interaction (add, edit, remove).\n  - `TestUserProfileDialogCoverageExpansion.test_loved_one_widget_interaction_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test loved one widget interaction (add, edit, remove).\n  - `TestUserProfileDialogCoverageExpansion.test_dialog_with_parent_real_behavior(self, qapp, test_data_dir)` - Test dialog creation with parent window.\n  - `TestUserProfileDialogCoverageExpansion.test_dialog_window_flags_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog window flags are set correctly.\n  - `TestUserProfileDialogCoverageExpansion.test_dialog_modal_behavior_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog modal behavior.\n  - `TestUserProfileDialogCoverageExpansion.test_dialog_size_constraints_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog size constraints.\n  - `TestUserProfileDialogCoverageExpansion.test_profile_widget_integration_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test integration with UserProfileSettingsWidget.\n  - `TestUserProfileDialogCoverageExpansion.test_error_handling_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test error handling in dialog operations.\n  - `TestUserProfileDialogCoverageExpansion.test_dialog_cleanup_real_behavior(self, dialog, test_user_data, test_data_dir)` - Test dialog cleanup on destruction.\n\n### tests/ui/test_widget_behavior.py\n**Functions:**\n- `qapp()` - Create QApplication instance for UI testing.\n- `widget(self, qapp, test_data_dir, mock_config)` - Create TagWidget for testing.\n- `test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n- `test_tag_management_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test adding and removing tags works correctly.\n- `test_tag_selection_mode_real_behavior(self, qapp, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test widget works in selection mode.\n- `widget(self, qapp, test_data_dir, mock_config)` - Create TaskSettingsWidget for testing.\n- `test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n- `test_task_enablement_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test task period management works correctly.\n- `widget(self, qapp, test_data_dir, mock_config)` - Create CategorySelectionWidget for testing.\n- `test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n- `widget(self, qapp, test_data_dir, mock_config)` - Create ChannelSelectionWidget for testing.\n- `test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n- `widget(self, qapp, test_data_dir, mock_config)` - Create CheckinSettingsWidget for testing.\n- `test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n- `test_checkin_enablement_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test check-in period management works correctly.\n- `widget(self, qapp, test_data_dir, mock_config)` - Create UserProfileSettingsWidget for testing.\n- `test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n- `widget(self, qapp)` - Create PeriodRowWidget for testing.\n- `test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n- `widget(self, qapp)` - Create DynamicListField for testing.\n- `test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n- `test_item_management_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test dynamic list field functionality.\n- `widget(self, qapp)` - Create DynamicListContainer for testing.\n- `test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n**Classes:**\n- `TestTagWidgetBehavior` - Test TagWidget with real behavior verification.\n  - `TestTagWidgetBehavior.widget(self, qapp, test_data_dir, mock_config)` - Create TagWidget for testing.\n  - `TestTagWidgetBehavior.test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n  - `TestTagWidgetBehavior.test_tag_management_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test adding and removing tags works correctly.\n  - `TestTagWidgetBehavior.test_tag_selection_mode_real_behavior(self, qapp, test_data_dir, mock_config)` - REAL BEHAVIOR TEST: Test widget works in selection mode.\n- `TestTaskSettingsWidgetBehavior` - Test TaskSettingsWidget with real behavior verification.\n  - `TestTaskSettingsWidgetBehavior.widget(self, qapp, test_data_dir, mock_config)` - Create TaskSettingsWidget for testing.\n  - `TestTaskSettingsWidgetBehavior.test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n  - `TestTaskSettingsWidgetBehavior.test_task_enablement_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test task period management works correctly.\n- `TestCategorySelectionWidgetBehavior` - Test CategorySelectionWidget with real behavior verification.\n  - `TestCategorySelectionWidgetBehavior.widget(self, qapp, test_data_dir, mock_config)` - Create CategorySelectionWidget for testing.\n  - `TestCategorySelectionWidgetBehavior.test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n- `TestChannelSelectionWidgetBehavior` - Test ChannelSelectionWidget with real behavior verification.\n  - `TestChannelSelectionWidgetBehavior.widget(self, qapp, test_data_dir, mock_config)` - Create ChannelSelectionWidget for testing.\n  - `TestChannelSelectionWidgetBehavior.test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n- `TestCheckinSettingsWidgetBehavior` - Test CheckinSettingsWidget with real behavior verification.\n  - `TestCheckinSettingsWidgetBehavior.widget(self, qapp, test_data_dir, mock_config)` - Create CheckinSettingsWidget for testing.\n  - `TestCheckinSettingsWidgetBehavior.test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n  - `TestCheckinSettingsWidgetBehavior.test_checkin_enablement_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test check-in period management works correctly.\n- `TestUserProfileSettingsWidgetBehavior` - Test UserProfileSettingsWidget with real behavior verification.\n  - `TestUserProfileSettingsWidgetBehavior.widget(self, qapp, test_data_dir, mock_config)` - Create UserProfileSettingsWidget for testing.\n  - `TestUserProfileSettingsWidgetBehavior.test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n- `TestPeriodRowWidgetBehavior` - Test PeriodRowWidget with real behavior verification.\n  - `TestPeriodRowWidgetBehavior.widget(self, qapp)` - Create PeriodRowWidget for testing.\n  - `TestPeriodRowWidgetBehavior.test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n- `TestDynamicListFieldBehavior` - Test DynamicListField with real behavior verification.\n  - `TestDynamicListFieldBehavior.widget(self, qapp)` - Create DynamicListField for testing.\n  - `TestDynamicListFieldBehavior.test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n  - `TestDynamicListFieldBehavior.test_item_management_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test dynamic list field functionality.\n- `TestDynamicListContainerBehavior` - Test DynamicListContainer with real behavior verification.\n  - `TestDynamicListContainerBehavior.widget(self, qapp)` - Create DynamicListContainer for testing.\n  - `TestDynamicListContainerBehavior.test_widget_initialization_real_behavior(self, widget)` - REAL BEHAVIOR TEST: Test widget initializes correctly with proper UI state.\n\n### tests/ui/test_widget_behavior_simple.py\n**Functions:**\n- `qapp()` - Create QApplication instance for UI testing.\n- `test_tag_widget_import_and_creation(self, qapp)` - REAL BEHAVIOR TEST: Test TagWidget can be imported and created.\n- `test_tag_widget_selection_mode(self, qapp)` - REAL BEHAVIOR TEST: Test TagWidget works in selection mode.\n- `test_task_settings_widget_import_and_creation(self, qapp, test_data_dir)` - REAL BEHAVIOR TEST: Test TaskSettingsWidget can be imported and created.\n- `test_category_selection_widget_import_and_creation(self, qapp, test_data_dir)` - REAL BEHAVIOR TEST: Test CategorySelectionWidget can be imported and created.\n- `test_channel_selection_widget_import_and_creation(self, qapp, test_data_dir)` - REAL BEHAVIOR TEST: Test ChannelSelectionWidget can be imported and created.\n- `test_checkin_settings_widget_import_and_creation(self, qapp, test_data_dir)` - REAL BEHAVIOR TEST: Test CheckinSettingsWidget can be imported and created.\n- `test_user_profile_settings_widget_import_and_creation(self, qapp, test_data_dir)` - REAL BEHAVIOR TEST: Test UserProfileSettingsWidget can be imported and created.\n- `test_dynamic_list_field_import_and_creation(self, qapp)` - REAL BEHAVIOR TEST: Test DynamicListField can be imported and created.\n- `test_dynamic_list_container_import_and_creation(self, qapp)` - REAL BEHAVIOR TEST: Test DynamicListContainer can be imported and created.\n**Classes:**\n- `TestTagWidgetBasicBehavior` - Test TagWidget basic functionality without complex UI setup.\n  - `TestTagWidgetBasicBehavior.test_tag_widget_import_and_creation(self, qapp)` - REAL BEHAVIOR TEST: Test TagWidget can be imported and created.\n  - `TestTagWidgetBasicBehavior.test_tag_widget_selection_mode(self, qapp)` - REAL BEHAVIOR TEST: Test TagWidget works in selection mode.\n- `TestTaskSettingsWidgetBasicBehavior` - Test TaskSettingsWidget basic functionality.\n  - `TestTaskSettingsWidgetBasicBehavior.test_task_settings_widget_import_and_creation(self, qapp, test_data_dir)` - REAL BEHAVIOR TEST: Test TaskSettingsWidget can be imported and created.\n- `TestCategorySelectionWidgetBasicBehavior` - Test CategorySelectionWidget basic functionality.\n  - `TestCategorySelectionWidgetBasicBehavior.test_category_selection_widget_import_and_creation(self, qapp, test_data_dir)` - REAL BEHAVIOR TEST: Test CategorySelectionWidget can be imported and created.\n- `TestChannelSelectionWidgetBasicBehavior` - Test ChannelSelectionWidget basic functionality.\n  - `TestChannelSelectionWidgetBasicBehavior.test_channel_selection_widget_import_and_creation(self, qapp, test_data_dir)` - REAL BEHAVIOR TEST: Test ChannelSelectionWidget can be imported and created.\n- `TestCheckinSettingsWidgetBasicBehavior` - Test CheckinSettingsWidget basic functionality.\n  - `TestCheckinSettingsWidgetBasicBehavior.test_checkin_settings_widget_import_and_creation(self, qapp, test_data_dir)` - REAL BEHAVIOR TEST: Test CheckinSettingsWidget can be imported and created.\n- `TestUserProfileSettingsWidgetBasicBehavior` - Test UserProfileSettingsWidget basic functionality.\n  - `TestUserProfileSettingsWidgetBasicBehavior.test_user_profile_settings_widget_import_and_creation(self, qapp, test_data_dir)` - REAL BEHAVIOR TEST: Test UserProfileSettingsWidget can be imported and created.\n- `TestDynamicListFieldBasicBehavior` - Test DynamicListField basic functionality.\n  - `TestDynamicListFieldBasicBehavior.test_dynamic_list_field_import_and_creation(self, qapp)` - REAL BEHAVIOR TEST: Test DynamicListField can be imported and created.\n- `TestDynamicListContainerBasicBehavior` - Test DynamicListContainer basic functionality.\n  - `TestDynamicListContainerBasicBehavior.test_dynamic_list_container_import_and_creation(self, qapp)` - REAL BEHAVIOR TEST: Test DynamicListContainer can be imported and created.\n\n### tests/unit/test_cleanup.py\n**Functions:**\n- `main()` - Command-line interface for test cleanup.\n- `__init__(self, test_data_dir)` - Initialize the cleanup manager.\n- `cleanup_test_users(self, user_ids)` - Clean up test user data.\n\nArgs:\n    user_ids: List of user IDs to clean up. If None, cleans up all test users.\n    \nReturns:\n    bool: True if cleanup was successful, False otherwise.\n- `_find_test_users(self)` - Find all test users in the user directory.\n- `_cleanup_single_user(self, user_id)` - Clean up a single test user.\n- `_create_user_backup(self, user_id, user_path)` - Create a backup of user data before cleanup.\n- `reset_test_environment(self)` - Reset the entire test environment.\n- `_cleanup_old_test_logs(self, keep_days)` - Clean up old test log files.\n- `_cleanup_temp_files(self)` - Clean up temporary test files.\n- `validate_test_data_integrity(self)` - Validate the integrity of test data.\n- `_validate_user_data(self, user_id, user_path)` - Validate a single user's data integrity.\n- `_find_orphaned_files(self)` - Find orphaned files in the user directory.\n**Classes:**\n- `CleanupManager` - Manages test data cleanup and isolation.\n  - `CleanupManager.__init__(self, test_data_dir)` - Initialize the cleanup manager.\n  - `CleanupManager.cleanup_test_users(self, user_ids)` - Clean up test user data.\n\nArgs:\n    user_ids: List of user IDs to clean up. If None, cleans up all test users.\n    \nReturns:\n    bool: True if cleanup was successful, False otherwise.\n  - `CleanupManager._find_test_users(self)` - Find all test users in the user directory.\n  - `CleanupManager._cleanup_single_user(self, user_id)` - Clean up a single test user.\n  - `CleanupManager._create_user_backup(self, user_id, user_path)` - Create a backup of user data before cleanup.\n  - `CleanupManager.reset_test_environment(self)` - Reset the entire test environment.\n  - `CleanupManager._cleanup_old_test_logs(self, keep_days)` - Clean up old test log files.\n  - `CleanupManager._cleanup_temp_files(self)` - Clean up temporary test files.\n  - `CleanupManager.validate_test_data_integrity(self)` - Validate the integrity of test data.\n  - `CleanupManager._validate_user_data(self, user_id, user_path)` - Validate a single user's data integrity.\n  - `CleanupManager._find_orphaned_files(self)` - Find orphaned files in the user directory.\n\n### tests/unit/test_config.py\n**Functions:**\n- `test_validate_core_paths_success(self, test_data_dir, test_path_factory)` - Test successful core path validation.\n- `test_validate_core_paths_missing_directory(self)` - Test core path validation with missing directory.\n- `test_validate_ai_configuration_success(self)` - Test successful AI configuration validation.\n- `test_validate_ai_configuration_missing_url(self)` - Test AI configuration validation with missing URL.\n- `test_validate_communication_channels_success(self)` - Test successful communication channels validation.\n- `test_validate_communication_channels_no_tokens(self)` - Test communication channels validation with no tokens.\n- `test_validate_logging_configuration_success(self)` - Test successful logging configuration validation.\n- `test_validate_scheduler_configuration_success(self)` - Test successful scheduler configuration validation.\n- `test_validate_file_organization_settings_success(self)` - Test successful file organization settings validation.\n- `test_validate_environment_variables_success(self)` - Test successful environment variables validation.\n- `test_validate_all_configuration_success(self, test_data_dir, test_path_factory)` - Test comprehensive configuration validation.\n- `test_validate_and_raise_if_invalid_success(self, test_data_dir, test_path_factory)` - Test successful validation with no exceptions.\n- `test_validate_and_raise_if_invalid_failure(self)` - Test validation failure raises ConfigurationError.\n- `test_base_data_dir_default(self)` - Test BASE_DATA_DIR default value.\n- `test_user_info_dir_path_default(self)` - Test USER_INFO_DIR_PATH default value.\n- `test_default_messages_dir_path_default(self)` - Test DEFAULT_MESSAGES_DIR_PATH default value.\n- `test_environment_override(self)` - Test environment variable override.\n**Classes:**\n- `TestConfigValidation` - Test configuration validation functions.\n  - `TestConfigValidation.test_validate_core_paths_success(self, test_data_dir, test_path_factory)` - Test successful core path validation.\n  - `TestConfigValidation.test_validate_core_paths_missing_directory(self)` - Test core path validation with missing directory.\n  - `TestConfigValidation.test_validate_ai_configuration_success(self)` - Test successful AI configuration validation.\n  - `TestConfigValidation.test_validate_ai_configuration_missing_url(self)` - Test AI configuration validation with missing URL.\n  - `TestConfigValidation.test_validate_communication_channels_success(self)` - Test successful communication channels validation.\n  - `TestConfigValidation.test_validate_communication_channels_no_tokens(self)` - Test communication channels validation with no tokens.\n  - `TestConfigValidation.test_validate_logging_configuration_success(self)` - Test successful logging configuration validation.\n  - `TestConfigValidation.test_validate_scheduler_configuration_success(self)` - Test successful scheduler configuration validation.\n  - `TestConfigValidation.test_validate_file_organization_settings_success(self)` - Test successful file organization settings validation.\n  - `TestConfigValidation.test_validate_environment_variables_success(self)` - Test successful environment variables validation.\n  - `TestConfigValidation.test_validate_all_configuration_success(self, test_data_dir, test_path_factory)` - Test comprehensive configuration validation.\n  - `TestConfigValidation.test_validate_and_raise_if_invalid_success(self, test_data_dir, test_path_factory)` - Test successful validation with no exceptions.\n  - `TestConfigValidation.test_validate_and_raise_if_invalid_failure(self)` - Test validation failure raises ConfigurationError.\n- `TestConfigConstants` - Test configuration constants.\n  - `TestConfigConstants.test_base_data_dir_default(self)` - Test BASE_DATA_DIR default value.\n  - `TestConfigConstants.test_user_info_dir_path_default(self)` - Test USER_INFO_DIR_PATH default value.\n  - `TestConfigConstants.test_default_messages_dir_path_default(self)` - Test DEFAULT_MESSAGES_DIR_PATH default value.\n  - `TestConfigConstants.test_environment_override(self)` - Test environment variable override.\n\n### tests/unit/test_error_handling.py\n**Functions:**\n- `test_mhm_error_basic(self)` - Test basic MHMError creation.\n- `test_mhm_error_with_details(self)` - Test MHMError with custom details.\n- `test_data_error(self)` - Test DataError exception.\n- `test_file_operation_error(self)` - Test FileOperationError exception.\n- `test_config_error(self)` - Test ConfigError exception.\n- `test_validation_error(self)` - Test ValidationError exception.\n- `test_error_handler_success(self)` - Test error_handler with successful function.\n- `test_error_handler_exception(self)` - Test error_handler with exception.\n- `test_error_handler_custom_return(self)` - Test error_handler with custom return value.\n- `test_error_handler_logs_error(self)` - Test error_handler logs errors.\n- `test_handle_errors_success(self)` - Test handle_errors with successful function.\n- `test_handle_errors_exception(self)` - Test handle_errors with exception.\n- `test_handle_errors_custom_return(self)` - Test handle_errors with custom return value.\n- `test_handle_errors_specific_exception(self)` - Test handle_errors with specific exception handling.\n- `test_handle_errors_logs_error(self)` - Test handle_errors logs errors.\n- `test_handle_file_error(self)` - Test handle_file_error function.\n- `test_handle_configuration_error(self)` - Test handle_configuration_error function.\n- `test_error_handling_in_function_chain(self)` - Test error handling in a chain of functions.\n- `test_error_handling_with_recovery(self, test_path_factory)` - Test error handling with recovery mechanisms and real side effects.\n- `test_error_handling_different_exception_types(self)` - Test error handling with different exception types and side effects.\n- `test_error_handler_with_args_kwargs(self)` - Test error_handler with function arguments.\n- `test_handle_errors_with_args_kwargs(self)` - Test handle_errors with function arguments.\n- `test_error_handler_nested_exceptions(self)` - Test error_handler with nested exceptions.\n- `test_handle_errors_with_logging_disabled(self)` - Test handle_errors when logging is disabled.\n- `test_function()` - Test Function.\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `test_function(exception_type)` - No description\n- `test_function(arg1, arg2, kwarg1)` - No description\n- `test_function(arg1, arg2, kwarg1)` - No description\n- `outer_function()` - No description\n- `inner_function()` - No description\n- `test_function()` - No description\n- `test_function()` - No description\n- `outer_function()` - No description\n- `inner_function()` - No description\n- `test_function()` - No description\n- `corrupt_data_function()` - No description\n- `recover_data_function()` - No description\n- `backup_function()` - No description\n- `cleanup_function()` - No description\n- `state_validation_function()` - No description\n- `test_function()` - No description\n**Classes:**\n- `TestCustomExceptions` - Test custom exception classes.\n  - `TestCustomExceptions.test_mhm_error_basic(self)` - Test basic MHMError creation.\n  - `TestCustomExceptions.test_mhm_error_with_details(self)` - Test MHMError with custom details.\n  - `TestCustomExceptions.test_data_error(self)` - Test DataError exception.\n  - `TestCustomExceptions.test_file_operation_error(self)` - Test FileOperationError exception.\n  - `TestCustomExceptions.test_config_error(self)` - Test ConfigError exception.\n  - `TestCustomExceptions.test_validation_error(self)` - Test ValidationError exception.\n- `TestErrorHandlerDecorator` - Test the handle_errors decorator.\n  - `TestErrorHandlerDecorator.test_error_handler_success(self)` - Test error_handler with successful function.\n  - `TestErrorHandlerDecorator.test_error_handler_exception(self)` - Test error_handler with exception.\n  - `TestErrorHandlerDecorator.test_error_handler_custom_return(self)` - Test error_handler with custom return value.\n  - `TestErrorHandlerDecorator.test_error_handler_logs_error(self)` - Test error_handler logs errors.\n- `TestHandleErrorsDecorator` - Test the handle_errors decorator.\n  - `TestHandleErrorsDecorator.test_handle_errors_success(self)` - Test handle_errors with successful function.\n  - `TestHandleErrorsDecorator.test_handle_errors_exception(self)` - Test handle_errors with exception.\n  - `TestHandleErrorsDecorator.test_handle_errors_custom_return(self)` - Test handle_errors with custom return value.\n  - `TestHandleErrorsDecorator.test_handle_errors_specific_exception(self)` - Test handle_errors with specific exception handling.\n  - `TestHandleErrorsDecorator.test_handle_errors_logs_error(self)` - Test handle_errors logs errors.\n- `TestErrorHandlingFunctions` - Test specific error handling functions.\n  - `TestErrorHandlingFunctions.test_handle_file_error(self)` - Test handle_file_error function.\n  - `TestErrorHandlingFunctions.test_handle_configuration_error(self)` - Test handle_configuration_error function.\n- `TestErrorHandlingIntegration` - Test error handling integration scenarios.\n  - `TestErrorHandlingIntegration.test_error_handling_in_function_chain(self)` - Test error handling in a chain of functions.\n  - `TestErrorHandlingIntegration.test_error_handling_with_recovery(self, test_path_factory)` - Test error handling with recovery mechanisms and real side effects.\n  - `TestErrorHandlingIntegration.test_error_handling_different_exception_types(self)` - Test error handling with different exception types and side effects.\n- `TestErrorHandlingEdgeCases` - Test error handling edge cases.\n  - `TestErrorHandlingEdgeCases.test_error_handler_with_args_kwargs(self)` - Test error_handler with function arguments.\n  - `TestErrorHandlingEdgeCases.test_handle_errors_with_args_kwargs(self)` - Test handle_errors with function arguments.\n  - `TestErrorHandlingEdgeCases.test_error_handler_nested_exceptions(self)` - Test error_handler with nested exceptions.\n  - `TestErrorHandlingEdgeCases.test_handle_errors_with_logging_disabled(self)` - Test handle_errors when logging is disabled.\n\n### tests/unit/test_file_operations.py\n**Functions:**\n- `test_load_json_data_success(self, temp_file)` - Test loading JSON data successfully.\n- `test_load_json_data_file_not_found(self)` - Test loading JSON data from non-existent file.\n- `test_load_json_data_corrupted_json(self, temp_file)` - Test loading corrupted JSON data.\n- `test_load_json_data_empty_file(self, temp_file)` - Test loading from empty file.\n- `test_save_json_data_success(self, temp_file)` - Test saving JSON data successfully.\n- `test_save_json_data_create_directory(self, test_data_dir)` - Test saving JSON data with directory creation.\n- `test_save_json_data_permission_error(self)` - Test saving JSON data with permission error.\n- `test_determine_file_path_user_file(self, test_data_dir)` - Test determining file path for user file.\n- `test_determine_file_path_default_messages(self, test_data_dir)` - Test determining file path for default messages.\n- `test_verify_file_access_success(self, temp_file)` - Test file access verification for accessible file.\n- `test_verify_file_access_missing_file(self)` - Test file access verification for missing file.\n- `test_verify_file_access_permission_error(self)` - Test file access verification with permission error.\n- `test_get_user_file_path_success(self, test_data_dir)` - Test getting user file path successfully.\n- `test_ensure_user_directory_success(self, test_data_dir)` - Test ensuring user directory exists.\n- `test_ensure_user_directory_already_exists(self, test_data_dir)` - Test ensuring user directory that already exists.\n- `test_load_json_data_unicode_content(self, temp_file)` - Test loading JSON data with unicode content.\n- `test_save_json_data_complex_objects(self, temp_file)` - Test saving JSON data with complex objects.\n- `test_determine_file_path_invalid_user_id(self)` - Test determining file path with invalid user ID.\n- `test_determine_file_path_invalid_file_type(self)` - Test determining file path with invalid file type.\n- `test_file_operations_lifecycle(self, test_data_dir, mock_config)` - Test complete file operations lifecycle using centralized utilities.\n- `test_save_large_json_data(self, temp_file)` - Test saving large JSON data with performance verification.\n- `test_load_large_json_data(self, temp_file)` - Test loading large JSON data.\n**Classes:**\n- `TestFileOperations` - Test file operations functions.\n  - `TestFileOperations.test_load_json_data_success(self, temp_file)` - Test loading JSON data successfully.\n  - `TestFileOperations.test_load_json_data_file_not_found(self)` - Test loading JSON data from non-existent file.\n  - `TestFileOperations.test_load_json_data_corrupted_json(self, temp_file)` - Test loading corrupted JSON data.\n  - `TestFileOperations.test_load_json_data_empty_file(self, temp_file)` - Test loading from empty file.\n  - `TestFileOperations.test_save_json_data_success(self, temp_file)` - Test saving JSON data successfully.\n  - `TestFileOperations.test_save_json_data_create_directory(self, test_data_dir)` - Test saving JSON data with directory creation.\n  - `TestFileOperations.test_save_json_data_permission_error(self)` - Test saving JSON data with permission error.\n  - `TestFileOperations.test_determine_file_path_user_file(self, test_data_dir)` - Test determining file path for user file.\n  - `TestFileOperations.test_determine_file_path_default_messages(self, test_data_dir)` - Test determining file path for default messages.\n  - `TestFileOperations.test_verify_file_access_success(self, temp_file)` - Test file access verification for accessible file.\n  - `TestFileOperations.test_verify_file_access_missing_file(self)` - Test file access verification for missing file.\n  - `TestFileOperations.test_verify_file_access_permission_error(self)` - Test file access verification with permission error.\n  - `TestFileOperations.test_get_user_file_path_success(self, test_data_dir)` - Test getting user file path successfully.\n  - `TestFileOperations.test_ensure_user_directory_success(self, test_data_dir)` - Test ensuring user directory exists.\n  - `TestFileOperations.test_ensure_user_directory_already_exists(self, test_data_dir)` - Test ensuring user directory that already exists.\n- `TestFileOperationsEdgeCases` - Test edge cases and error conditions.\n  - `TestFileOperationsEdgeCases.test_load_json_data_unicode_content(self, temp_file)` - Test loading JSON data with unicode content.\n  - `TestFileOperationsEdgeCases.test_save_json_data_complex_objects(self, temp_file)` - Test saving JSON data with complex objects.\n  - `TestFileOperationsEdgeCases.test_determine_file_path_invalid_user_id(self)` - Test determining file path with invalid user ID.\n  - `TestFileOperationsEdgeCases.test_determine_file_path_invalid_file_type(self)` - Test determining file path with invalid file type.\n  - `TestFileOperationsEdgeCases.test_file_operations_lifecycle(self, test_data_dir, mock_config)` - Test complete file operations lifecycle using centralized utilities.\n- `TestFileOperationsPerformance` - Test file operations performance and large data handling.\n  - `TestFileOperationsPerformance.test_save_large_json_data(self, temp_file)` - Test saving large JSON data with performance verification.\n  - `TestFileOperationsPerformance.test_load_large_json_data(self, temp_file)` - Test loading large JSON data.\n\n### tests/unit/test_logging_components.py\n**Functions:**\n- `test_component_logger_propagate_and_handlers(tmp_path, monkeypatch)` - No description\n- `test_errors_routed_to_tests_logs_in_verbose_mode(tmp_path, monkeypatch)` - No description\n\n### tests/unit/test_no_direct_env_mutation_policy.py\n**Functions:**\n- `test_no_direct_os_environ_mutations_in_tests()` - Policy: tests must use monkeypatch.setenv; no direct os.environ mutations.\n\nScans test files for forbidden patterns. Allows exceptions in tests/conftest.py.\n\n### tests/unit/test_no_prints_policy.py\n**Functions:**\n- `test_no_print_calls_in_tests_except_debug_marked()` - Policy: tests should not use print(); prefer logging or assertions.\n\nAllowed: files containing '@pytest.mark.debug' marker.\n\n### tests/unit/test_recurring_tasks.py\n**Functions:**\n- `temp_user_dir(self, test_path_factory)` - Provide a per-test user directory under tests/data/tmp.\n- `test_create_recurring_task(self, mock_get_user_data_dir, temp_user_dir)` - Test creating a recurring task.\n- `test_complete_recurring_task_creates_next_instance(self, mock_get_user_data_dir, temp_user_dir)` - Test that completing a recurring task creates the next instance.\n- `test_calculate_next_due_date_daily(self)` - Test calculating next due date for daily recurrence.\n- `test_calculate_next_due_date_weekly(self)` - Test calculating next due date for weekly recurrence.\n- `test_calculate_next_due_date_monthly(self)` - Test calculating next due date for monthly recurrence.\n- `test_calculate_next_due_date_yearly(self)` - Test calculating next due date for yearly recurrence.\n- `test_calculate_next_due_date_invalid_pattern(self)` - Test calculating next due date with invalid pattern.\n- `test_non_recurring_task_completion(self, mock_get_user_data_dir, temp_user_dir)` - Test that completing a non-recurring task doesn't create a new instance.\n**Classes:**\n- `TestRecurringTasks` - Test recurring tasks functionality.\n  - `TestRecurringTasks.temp_user_dir(self, test_path_factory)` - Provide a per-test user directory under tests/data/tmp.\n  - `TestRecurringTasks.test_create_recurring_task(self, mock_get_user_data_dir, temp_user_dir)` - Test creating a recurring task.\n  - `TestRecurringTasks.test_complete_recurring_task_creates_next_instance(self, mock_get_user_data_dir, temp_user_dir)` - Test that completing a recurring task creates the next instance.\n  - `TestRecurringTasks.test_calculate_next_due_date_daily(self)` - Test calculating next due date for daily recurrence.\n  - `TestRecurringTasks.test_calculate_next_due_date_weekly(self)` - Test calculating next due date for weekly recurrence.\n  - `TestRecurringTasks.test_calculate_next_due_date_monthly(self)` - Test calculating next due date for monthly recurrence.\n  - `TestRecurringTasks.test_calculate_next_due_date_yearly(self)` - Test calculating next due date for yearly recurrence.\n  - `TestRecurringTasks.test_calculate_next_due_date_invalid_pattern(self)` - Test calculating next due date with invalid pattern.\n  - `TestRecurringTasks.test_non_recurring_task_completion(self, mock_get_user_data_dir, temp_user_dir)` - Test that completing a non-recurring task doesn't create a new instance.\n\n### tests/unit/test_schedule_management.py\n**Functions:**\n- `test_validate_and_format_time(self)` - Ensure various time formats are normalized to HH:MM.\n- `test_time_conversion_helpers(self)` - Verify 12h/24h conversion helpers.\n- `test_schedule_period_lifecycle(self, mock_user_data, mock_config)` - Add, edit, deactivate, and delete a schedule period.\n**Classes:**\n- `TestPeriodValidation` - Tests for time validation and conversion helpers.\n  - `TestPeriodValidation.test_validate_and_format_time(self)` - Ensure various time formats are normalized to HH:MM.\n  - `TestPeriodValidation.test_time_conversion_helpers(self)` - Verify 12h/24h conversion helpers.\n- `TestScheduleManagement` - Tests for schedule period lifecycle operations.\n  - `TestScheduleManagement.test_schedule_period_lifecycle(self, mock_user_data, mock_config)` - Add, edit, deactivate, and delete a schedule period.\n\n### tests/unit/test_user_data_loader_idempotency.py\n**Functions:**\n- `test_loader_registry_identity_and_idempotency()` - No description\n\n### tests/unit/test_user_data_loader_order_insensitivity.py\n**Functions:**\n- `_reload_in_order(first_module, second_module)` - No description\n- `test_loader_registry_shared_and_complete_regardless_of_import_order()` - No description\n\n### tests/unit/test_user_management.py\n**Functions:**\n- `test_get_all_user_ids_empty(self, test_data_dir)` - Test getting user IDs when no users exist.\n- `test_get_all_user_ids_with_users(self, test_data_dir, mock_user_data, mock_config)` - Test getting user IDs when users exist.\n- `test_get_user_preferences_success(self, mock_user_data, mock_config)` - Test getting user preferences successfully.\n- `test_get_user_preferences_nonexistent_user(self, mock_config)` - Test getting preferences for non-existent user.\n- `test_get_user_context_success(self, mock_user_data, mock_config)` - Test getting user context successfully.\n- `test_get_user_context_nonexistent_user(self, mock_config)` - Test getting context for non-existent user.\n- `test_hybrid_get_user_data_success(self, mock_user_data)` - Test loading user data successfully using new hybrid API.\n- `test_hybrid_get_user_data_nonexistent_user(self, mock_config)` - Test loading non-existent user data using new hybrid API.\n- `test_save_user_data_success(self, test_data_dir, mock_config)` - Test saving user data successfully using centralized utilities.\n- `test_create_user_files_success(self, test_data_dir, mock_config)` - Test creating user files successfully.\n- `test_update_user_preferences_success(self, mock_user_data, mock_config)` - Test updating user preferences successfully.\n- `test_get_user_data_account_with_chat_id(self, mock_user_data, mock_config)` - Test getting user account with chat_id field.\n- `test_get_user_data_account_nonexistent_chat_id(self, mock_config)` - Test getting user account for non-existent user.\n- `test_get_user_data_account_with_discord_id(self, mock_user_data, mock_config)` - Test getting user account with discord_user_id field.\n- `test_get_user_data_account_nonexistent_discord_id(self, mock_config)` - Test getting user account for non-existent user.\n- `test_get_user_data_account_with_email(self, test_data_dir, mock_config)` - Test getting user account with email successfully.\n- `test_get_user_data_account_nonexistent_email(self, mock_config)` - Test getting user account for non-existent user.\n- `test_get_user_preferences_corrupted_file(self, test_data_dir, mock_config)` - Test getting preferences with corrupted JSON file.\n- `test_save_user_preferences_invalid_user_id(self)` - Test saving preferences with invalid user ID.\n- `test_update_user_preferences_nonexistent_user(self, mock_config)` - Test updating preferences for non-existent user.\n- `test_user_lifecycle(self, test_data_dir, mock_config)` - Test complete user lifecycle with real side effects and system state verification.\n- `test_get_user_data_single_type(self, mock_user_data, mock_config)` - Test getting single data type using hybrid API.\n- `test_get_user_data_multiple_types(self, mock_user_data, mock_config)` - Test getting multiple data types using hybrid API.\n- `test_get_user_data_invalid_type(self, mock_user_data, mock_config)` - Test getting invalid data type using hybrid API.\n- `test_get_user_data_nonexistent_user(self, mock_config)` - Test getting data for nonexistent user using hybrid API.\n**Classes:**\n- `TestUserManagement` - Test user management functions.\n  - `TestUserManagement.test_get_all_user_ids_empty(self, test_data_dir)` - Test getting user IDs when no users exist.\n  - `TestUserManagement.test_get_all_user_ids_with_users(self, test_data_dir, mock_user_data, mock_config)` - Test getting user IDs when users exist.\n  - `TestUserManagement.test_get_user_preferences_success(self, mock_user_data, mock_config)` - Test getting user preferences successfully.\n  - `TestUserManagement.test_get_user_preferences_nonexistent_user(self, mock_config)` - Test getting preferences for non-existent user.\n  - `TestUserManagement.test_get_user_context_success(self, mock_user_data, mock_config)` - Test getting user context successfully.\n  - `TestUserManagement.test_get_user_context_nonexistent_user(self, mock_config)` - Test getting context for non-existent user.\n  - `TestUserManagement.test_hybrid_get_user_data_success(self, mock_user_data)` - Test loading user data successfully using new hybrid API.\n  - `TestUserManagement.test_hybrid_get_user_data_nonexistent_user(self, mock_config)` - Test loading non-existent user data using new hybrid API.\n  - `TestUserManagement.test_save_user_data_success(self, test_data_dir, mock_config)` - Test saving user data successfully using centralized utilities.\n  - `TestUserManagement.test_create_user_files_success(self, test_data_dir, mock_config)` - Test creating user files successfully.\n  - `TestUserManagement.test_update_user_preferences_success(self, mock_user_data, mock_config)` - Test updating user preferences successfully.\n  - `TestUserManagement.test_get_user_data_account_with_chat_id(self, mock_user_data, mock_config)` - Test getting user account with chat_id field.\n  - `TestUserManagement.test_get_user_data_account_nonexistent_chat_id(self, mock_config)` - Test getting user account for non-existent user.\n  - `TestUserManagement.test_get_user_data_account_with_discord_id(self, mock_user_data, mock_config)` - Test getting user account with discord_user_id field.\n  - `TestUserManagement.test_get_user_data_account_nonexistent_discord_id(self, mock_config)` - Test getting user account for non-existent user.\n  - `TestUserManagement.test_get_user_data_account_with_email(self, test_data_dir, mock_config)` - Test getting user account with email successfully.\n  - `TestUserManagement.test_get_user_data_account_nonexistent_email(self, mock_config)` - Test getting user account for non-existent user.\n- `TestUserManagementEdgeCases` - Test edge cases and error conditions.\n  - `TestUserManagementEdgeCases.test_get_user_preferences_corrupted_file(self, test_data_dir, mock_config)` - Test getting preferences with corrupted JSON file.\n  - `TestUserManagementEdgeCases.test_save_user_preferences_invalid_user_id(self)` - Test saving preferences with invalid user ID.\n  - `TestUserManagementEdgeCases.test_update_user_preferences_nonexistent_user(self, mock_config)` - Test updating preferences for non-existent user.\n  - `TestUserManagementEdgeCases.test_user_lifecycle(self, test_data_dir, mock_config)` - Test complete user lifecycle with real side effects and system state verification.\n  - `TestUserManagementEdgeCases.test_get_user_data_single_type(self, mock_user_data, mock_config)` - Test getting single data type using hybrid API.\n  - `TestUserManagementEdgeCases.test_get_user_data_multiple_types(self, mock_user_data, mock_config)` - Test getting multiple data types using hybrid API.\n  - `TestUserManagementEdgeCases.test_get_user_data_invalid_type(self, mock_user_data, mock_config)` - Test getting invalid data type using hybrid API.\n  - `TestUserManagementEdgeCases.test_get_user_data_nonexistent_user(self, mock_config)` - Test getting data for nonexistent user using hybrid API.\n\n### tests/unit/test_validation.py\n**Functions:**\n- `test_is_valid_email_with_valid_emails(self)` - Test email validation with various valid email formats.\n- `test_is_valid_email_with_invalid_emails(self)` - Test email validation with various invalid email formats.\n- `test_is_valid_phone_with_valid_phones(self)` - Test phone validation with various valid phone formats.\n- `test_is_valid_phone_with_invalid_phones(self)` - Test phone validation with various invalid phone formats.\n- `test_validate_time_format_with_valid_times(self)` - Test time format validation with valid 24-hour times.\n- `test_validate_time_format_with_invalid_times(self)` - Test time format validation with invalid time formats.\n- `test_title_case_with_various_inputs(self)` - Test title case conversion with various text inputs.\n- `test_validate_user_update_account_success(self, test_data_dir)` - Test successful account update validation.\n- `test_validate_user_update_account_missing_username(self, test_data_dir)` - Test account update validation with missing internal_username.\n- `test_validate_user_update_account_invalid_status(self, test_data_dir)` - Test account update validation with invalid account status.\n- `test_validate_user_update_account_invalid_email(self, test_data_dir)` - Test account update validation with invalid email format.\n- `test_validate_user_update_preferences_success(self, test_data_dir)` - Test successful preferences update validation.\n- `test_validate_user_update_preferences_invalid_categories(self, test_data_dir)` - Test preferences update validation with invalid categories.\n- `test_validate_user_update_preferences_invalid_channel_type(self, test_data_dir)` - Test preferences update validation with invalid channel type.\n- `test_validate_user_update_context_success(self, test_data_dir)` - Test successful context update validation.\n- `test_validate_user_update_context_invalid_date(self, test_data_dir)` - Test context update validation with invalid date format.\n- `test_validate_user_update_context_invalid_custom_fields(self, test_data_dir)` - Test context update validation with invalid custom_fields type.\n- `test_validate_user_update_schedules_success(self, test_data_dir)` - Test successful schedules update validation.\n- `test_validate_user_update_schedules_invalid_time_format(self, test_data_dir)` - Test schedules update validation with invalid time format.\n- `test_validate_user_update_schedules_invalid_time_order(self, test_data_dir)` - Test schedules update validation with invalid time ordering.\n- `test_validate_user_update_schedules_invalid_days(self, test_data_dir)` - Test schedules update validation with invalid days.\n- `test_validate_schedule_periods_success(self)` - Test successful schedule periods validation.\n- `test_validate_schedule_periods_empty(self)` - Test schedule periods validation with empty periods.\n- `test_validate_schedule_periods_no_active_periods(self)` - Test schedule periods validation with no active periods.\n- `test_validate_schedule_periods_all_period_excluded(self)` - Test that ALL period is excluded from active period requirement.\n- `test_validate_schedule_periods_missing_times(self)` - Test schedule periods validation with missing start/end times.\n- `test_validate_schedule_periods_invalid_time_format(self)` - Test schedule periods validation with invalid time format.\n- `test_validate_schedule_periods_invalid_time_order(self)` - Test schedule periods validation with invalid time ordering.\n- `test_validate_schedule_periods_invalid_days_type(self)` - Test schedule periods validation with invalid days type.\n- `test_validate_schedule_periods_empty_days(self)` - Test schedule periods validation with empty days list.\n- `test_validate_schedule_periods_invalid_days(self)` - Test schedule periods validation with invalid day names.\n- `test_validate_new_user_data_success(self, test_data_dir)` - Test successful new user data validation.\n- `test_validate_new_user_data_missing_user_id(self)` - Test new user data validation with missing user_id.\n- `test_validate_new_user_data_empty_updates(self)` - Test new user data validation with empty updates.\n- `test_validate_new_user_data_user_already_exists(self, test_data_dir)` - Test new user data validation when user already exists.\n- `test_validate_new_user_data_missing_account(self)` - Test new user data validation with missing account data.\n- `test_validate_new_user_data_missing_username(self)` - Test new user data validation with missing internal_username.\n- `test_validate_new_user_data_missing_channel(self)` - Test new user data validation with missing channel.\n- `test_validate_new_user_data_invalid_channel_type(self)` - Test new user data validation with invalid channel type.\n- `test_validate_new_user_data_invalid_email(self)` - Test new user data validation with invalid email format.\n- `test_validate_new_user_data_invalid_account_status(self)` - Test new user data validation with invalid account status.\n- `test_validate_personalization_data_success(self)` - Test successful personalization data validation.\n- `test_validate_personalization_data_empty(self)` - Test personalization data validation with empty data.\n- `test_validate_personalization_data_invalid_string_fields(self)` - Test personalization data validation with invalid string field types.\n- `test_validate_personalization_data_invalid_list_fields(self)` - Test personalization data validation with invalid list field types.\n- `test_validate_personalization_data_invalid_custom_fields_type(self)` - Test personalization data validation with invalid custom_fields type.\n- `test_validate_personalization_data_invalid_custom_field_lists(self)` - Test personalization data validation with invalid custom field list types.\n- `test_validate_personalization_data_invalid_date_format(self)` - Test personalization data validation with invalid date format.\n- `test_validate_personalization_data_invalid_loved_ones_type(self)` - Test personalization data validation with invalid loved_ones type.\n- `test_validate_personalization_data_invalid_loved_one_item(self)` - Test personalization data validation with invalid loved_one item type.\n- `test_validation_functions_work_together(self, test_data_dir)` - Test that validation functions work together correctly.\n- `test_validation_error_propagation(self)` - Test that validation errors propagate correctly through the system.\n- `test_validation_with_real_file_operations(self, test_data_dir)` - Test validation with real file system operations.\n**Classes:**\n- `TestPrimitiveValidators` - Test basic validation functions with real behavior verification.\n  - `TestPrimitiveValidators.test_is_valid_email_with_valid_emails(self)` - Test email validation with various valid email formats.\n  - `TestPrimitiveValidators.test_is_valid_email_with_invalid_emails(self)` - Test email validation with various invalid email formats.\n  - `TestPrimitiveValidators.test_is_valid_phone_with_valid_phones(self)` - Test phone validation with various valid phone formats.\n  - `TestPrimitiveValidators.test_is_valid_phone_with_invalid_phones(self)` - Test phone validation with various invalid phone formats.\n  - `TestPrimitiveValidators.test_validate_time_format_with_valid_times(self)` - Test time format validation with valid 24-hour times.\n  - `TestPrimitiveValidators.test_validate_time_format_with_invalid_times(self)` - Test time format validation with invalid time formats.\n  - `TestPrimitiveValidators.test_title_case_with_various_inputs(self)` - Test title case conversion with various text inputs.\n- `TestUserUpdateValidation` - Test user update validation with real behavior verification.\n  - `TestUserUpdateValidation.test_validate_user_update_account_success(self, test_data_dir)` - Test successful account update validation.\n  - `TestUserUpdateValidation.test_validate_user_update_account_missing_username(self, test_data_dir)` - Test account update validation with missing internal_username.\n  - `TestUserUpdateValidation.test_validate_user_update_account_invalid_status(self, test_data_dir)` - Test account update validation with invalid account status.\n  - `TestUserUpdateValidation.test_validate_user_update_account_invalid_email(self, test_data_dir)` - Test account update validation with invalid email format.\n  - `TestUserUpdateValidation.test_validate_user_update_preferences_success(self, test_data_dir)` - Test successful preferences update validation.\n  - `TestUserUpdateValidation.test_validate_user_update_preferences_invalid_categories(self, test_data_dir)` - Test preferences update validation with invalid categories.\n  - `TestUserUpdateValidation.test_validate_user_update_preferences_invalid_channel_type(self, test_data_dir)` - Test preferences update validation with invalid channel type.\n  - `TestUserUpdateValidation.test_validate_user_update_context_success(self, test_data_dir)` - Test successful context update validation.\n  - `TestUserUpdateValidation.test_validate_user_update_context_invalid_date(self, test_data_dir)` - Test context update validation with invalid date format.\n  - `TestUserUpdateValidation.test_validate_user_update_context_invalid_custom_fields(self, test_data_dir)` - Test context update validation with invalid custom_fields type.\n  - `TestUserUpdateValidation.test_validate_user_update_schedules_success(self, test_data_dir)` - Test successful schedules update validation.\n  - `TestUserUpdateValidation.test_validate_user_update_schedules_invalid_time_format(self, test_data_dir)` - Test schedules update validation with invalid time format.\n  - `TestUserUpdateValidation.test_validate_user_update_schedules_invalid_time_order(self, test_data_dir)` - Test schedules update validation with invalid time ordering.\n  - `TestUserUpdateValidation.test_validate_user_update_schedules_invalid_days(self, test_data_dir)` - Test schedules update validation with invalid days.\n- `TestSchedulePeriodsValidation` - Test schedule periods validation with real behavior verification.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_success(self)` - Test successful schedule periods validation.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_empty(self)` - Test schedule periods validation with empty periods.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_no_active_periods(self)` - Test schedule periods validation with no active periods.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_all_period_excluded(self)` - Test that ALL period is excluded from active period requirement.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_missing_times(self)` - Test schedule periods validation with missing start/end times.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_invalid_time_format(self)` - Test schedule periods validation with invalid time format.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_invalid_time_order(self)` - Test schedule periods validation with invalid time ordering.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_invalid_days_type(self)` - Test schedule periods validation with invalid days type.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_empty_days(self)` - Test schedule periods validation with empty days list.\n  - `TestSchedulePeriodsValidation.test_validate_schedule_periods_invalid_days(self)` - Test schedule periods validation with invalid day names.\n- `TestNewUserDataValidation` - Test new user data validation with real behavior verification.\n  - `TestNewUserDataValidation.test_validate_new_user_data_success(self, test_data_dir)` - Test successful new user data validation.\n  - `TestNewUserDataValidation.test_validate_new_user_data_missing_user_id(self)` - Test new user data validation with missing user_id.\n  - `TestNewUserDataValidation.test_validate_new_user_data_empty_updates(self)` - Test new user data validation with empty updates.\n  - `TestNewUserDataValidation.test_validate_new_user_data_user_already_exists(self, test_data_dir)` - Test new user data validation when user already exists.\n  - `TestNewUserDataValidation.test_validate_new_user_data_missing_account(self)` - Test new user data validation with missing account data.\n  - `TestNewUserDataValidation.test_validate_new_user_data_missing_username(self)` - Test new user data validation with missing internal_username.\n  - `TestNewUserDataValidation.test_validate_new_user_data_missing_channel(self)` - Test new user data validation with missing channel.\n  - `TestNewUserDataValidation.test_validate_new_user_data_invalid_channel_type(self)` - Test new user data validation with invalid channel type.\n  - `TestNewUserDataValidation.test_validate_new_user_data_invalid_email(self)` - Test new user data validation with invalid email format.\n  - `TestNewUserDataValidation.test_validate_new_user_data_invalid_account_status(self)` - Test new user data validation with invalid account status.\n- `TestPersonalizationDataValidation` - Test personalization data validation with real behavior verification.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_success(self)` - Test successful personalization data validation.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_empty(self)` - Test personalization data validation with empty data.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_invalid_string_fields(self)` - Test personalization data validation with invalid string field types.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_invalid_list_fields(self)` - Test personalization data validation with invalid list field types.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_invalid_custom_fields_type(self)` - Test personalization data validation with invalid custom_fields type.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_invalid_custom_field_lists(self)` - Test personalization data validation with invalid custom field list types.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_invalid_date_format(self)` - Test personalization data validation with invalid date format.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_invalid_loved_ones_type(self)` - Test personalization data validation with invalid loved_ones type.\n  - `TestPersonalizationDataValidation.test_validate_personalization_data_invalid_loved_one_item(self)` - Test personalization data validation with invalid loved_one item type.\n- `TestValidationIntegration` - Test validation functions working together with real behavior verification.\n  - `TestValidationIntegration.test_validation_functions_work_together(self, test_data_dir)` - Test that validation functions work together correctly.\n  - `TestValidationIntegration.test_validation_error_propagation(self)` - Test that validation errors propagate correctly through the system.\n  - `TestValidationIntegration.test_validation_with_real_file_operations(self, test_data_dir)` - Test validation with real file system operations.\n\n### ui/dialogs/account_creator_dialog.py\n**Functions:**\n- `create_account_dialog(parent, communication_manager)` - Create and show the account creation dialog.\n- `__init__(self, parent, communication_manager)` - Initialize the account creator dialog.\n- `setup_dialog(self)` - Set up the dialog properties.\n- `load_widgets(self)` - Load all the widget UI files into the placeholder widgets.\n- `load_category_widget(self)` - Load the category selection widget.\n- `load_message_service_widget(self)` - Load the message service selection widget.\n- `load_task_management_widget(self)` - Load the task management widget.\n- `load_checkin_settings_widget(self)` - Load the check-in settings widget.\n- `setup_feature_group_boxes(self)` - Setup group boxes for task management and check-ins (no longer collapsible in tab structure).\n- `setup_profile_button(self)` - Setup the profile button.\n- `center_dialog(self)` - Center the dialog on the parent window.\n- `accept(self)` - Override accept to prevent automatic dialog closing.\n- `close_dialog(self)` - Close the dialog properly.\n- `setup_connections(self)` - Setup signal connections.\n- `keyPressEvent(self, event)` - Handle key press events for the dialog.\n- `on_username_changed(self)` - Handle username change.\n- `on_preferred_name_changed(self)` - Handle preferred name change.\n- `on_feature_toggled(self, checked)` - Handle feature enablement checkbox toggles.\n- `update_tab_visibility(self)` - Update tab visibility based on feature enablement.\n- `open_personalization_dialog(self)` - Open the personalization dialog.\n- `update_profile_button_state(self)` - Update the profile button to show if profile has been configured.\n- `validate_input(self)` - Validate the input and return (is_valid, error_message).\n- `_validate_and_accept__collect_basic_user_info(self)` - Collect basic user information from UI fields.\n- `_validate_and_accept__collect_feature_settings(self)` - Collect feature enablement states from UI.\n- `_validate_and_accept__collect_channel_data(self)` - Collect channel and contact information from widgets.\n- `_validate_and_accept__collect_widget_data(self)` - Collect data from all widgets.\n- `_validate_and_accept__build_account_data(self, username, preferred_name, timezone, channel_data, contact_info, categories, task_settings, checkin_settings, messages_enabled, tasks_enabled, checkins_enabled)` - Build the complete account data structure.\n- `_validate_and_accept__show_error_dialog(self, title, message)` - Show an error dialog with the given title and message.\n- `_validate_and_accept__show_success_dialog(self, username)` - Show a success dialog for account creation.\n- `validate_and_accept(self)` - Validate input and accept the dialog.\n- `_validate_and_accept__input_errors(self)` - Validate input and show error dialog if validation fails.\n- `_validate_and_accept__collect_data(self)` - Collect all data from UI and build account data structure.\n- `_validate_and_accept__create_account(self, account_data)` - Create the account and set up all necessary components.\n- `_validate_and_accept__handle_success(self, username)` - Handle successful account creation.\n- `create_account(self, account_data)` - Create the user account.\n- `_validate_and_accept__build_user_preferences(self, account_data)` - Build user preferences data structure.\n- `_determine_chat_id(self, channel_type, email, phone, discord_user_id)` - Determine chat_id based on channel type.\n- `_build_features_dict(self, features_enabled)` - Build features dictionary in the correct format.\n- `_validate_and_accept__add_feature_settings(self, user_preferences, account_data, features_enabled)` - Add feature-specific settings to user preferences.\n- `_validate_and_accept__setup_task_tags(self, user_id, account_data)` - Set up task tags for the new user.\n- `_validate_and_accept__update_user_index(self, user_id)` - Update user index for the new user.\n- `_validate_and_accept__schedule_new_user(self, user_id)` - Schedule the new user in the scheduler.\n- `get_account_data(self)` - Get the account data from the form.\n- `validate_account_data(self)` - Validate the account data.\n- `on_personalization_save(data)` - No description\n**Classes:**\n- `AccountCreatorDialog` - Account creation dialog using existing UI files.\n  - `AccountCreatorDialog.__init__(self, parent, communication_manager)` - Initialize the account creator dialog.\n  - `AccountCreatorDialog.setup_dialog(self)` - Set up the dialog properties.\n  - `AccountCreatorDialog.load_widgets(self)` - Load all the widget UI files into the placeholder widgets.\n  - `AccountCreatorDialog.load_category_widget(self)` - Load the category selection widget.\n  - `AccountCreatorDialog.load_message_service_widget(self)` - Load the message service selection widget.\n  - `AccountCreatorDialog.load_task_management_widget(self)` - Load the task management widget.\n  - `AccountCreatorDialog.load_checkin_settings_widget(self)` - Load the check-in settings widget.\n  - `AccountCreatorDialog.setup_feature_group_boxes(self)` - Setup group boxes for task management and check-ins (no longer collapsible in tab structure).\n  - `AccountCreatorDialog.setup_profile_button(self)` - Setup the profile button.\n  - `AccountCreatorDialog.center_dialog(self)` - Center the dialog on the parent window.\n  - `AccountCreatorDialog.accept(self)` - Override accept to prevent automatic dialog closing.\n  - `AccountCreatorDialog.close_dialog(self)` - Close the dialog properly.\n  - `AccountCreatorDialog.setup_connections(self)` - Setup signal connections.\n  - `AccountCreatorDialog.keyPressEvent(self, event)` - Handle key press events for the dialog.\n  - `AccountCreatorDialog.on_username_changed(self)` - Handle username change.\n  - `AccountCreatorDialog.on_preferred_name_changed(self)` - Handle preferred name change.\n  - `AccountCreatorDialog.on_feature_toggled(self, checked)` - Handle feature enablement checkbox toggles.\n  - `AccountCreatorDialog.update_tab_visibility(self)` - Update tab visibility based on feature enablement.\n  - `AccountCreatorDialog.open_personalization_dialog(self)` - Open the personalization dialog.\n  - `AccountCreatorDialog.update_profile_button_state(self)` - Update the profile button to show if profile has been configured.\n  - `AccountCreatorDialog.validate_input(self)` - Validate the input and return (is_valid, error_message).\n  - `AccountCreatorDialog._validate_and_accept__collect_basic_user_info(self)` - Collect basic user information from UI fields.\n  - `AccountCreatorDialog._validate_and_accept__collect_feature_settings(self)` - Collect feature enablement states from UI.\n  - `AccountCreatorDialog._validate_and_accept__collect_channel_data(self)` - Collect channel and contact information from widgets.\n  - `AccountCreatorDialog._validate_and_accept__collect_widget_data(self)` - Collect data from all widgets.\n  - `AccountCreatorDialog._validate_and_accept__build_account_data(self, username, preferred_name, timezone, channel_data, contact_info, categories, task_settings, checkin_settings, messages_enabled, tasks_enabled, checkins_enabled)` - Build the complete account data structure.\n  - `AccountCreatorDialog._validate_and_accept__show_error_dialog(self, title, message)` - Show an error dialog with the given title and message.\n  - `AccountCreatorDialog._validate_and_accept__show_success_dialog(self, username)` - Show a success dialog for account creation.\n  - `AccountCreatorDialog.validate_and_accept(self)` - Validate input and accept the dialog.\n  - `AccountCreatorDialog._validate_and_accept__input_errors(self)` - Validate input and show error dialog if validation fails.\n  - `AccountCreatorDialog._validate_and_accept__collect_data(self)` - Collect all data from UI and build account data structure.\n  - `AccountCreatorDialog._validate_and_accept__create_account(self, account_data)` - Create the account and set up all necessary components.\n  - `AccountCreatorDialog._validate_and_accept__handle_success(self, username)` - Handle successful account creation.\n  - `AccountCreatorDialog.create_account(self, account_data)` - Create the user account.\n  - `AccountCreatorDialog._validate_and_accept__build_user_preferences(self, account_data)` - Build user preferences data structure.\n  - `AccountCreatorDialog._determine_chat_id(self, channel_type, email, phone, discord_user_id)` - Determine chat_id based on channel type.\n  - `AccountCreatorDialog._build_features_dict(self, features_enabled)` - Build features dictionary in the correct format.\n  - `AccountCreatorDialog._validate_and_accept__add_feature_settings(self, user_preferences, account_data, features_enabled)` - Add feature-specific settings to user preferences.\n  - `AccountCreatorDialog._validate_and_accept__setup_task_tags(self, user_id, account_data)` - Set up task tags for the new user.\n  - `AccountCreatorDialog._validate_and_accept__update_user_index(self, user_id)` - Update user index for the new user.\n  - `AccountCreatorDialog._validate_and_accept__schedule_new_user(self, user_id)` - Schedule the new user in the scheduler.\n  - `AccountCreatorDialog.get_account_data(self)` - Get the account data from the form.\n  - `AccountCreatorDialog.validate_account_data(self)` - Validate the account data.\n\n### ui/dialogs/admin_panel.py\n**Functions:**\n- `__init__(self, parent)` - Initialize the AdminPanelDialog.\n\nArgs:\n    parent: Parent widget for the dialog\n- `setup_ui(self)` - Setup the UI components.\n- `get_admin_data(self)` - Get the admin panel data.\n\nReturns:\n    dict: Admin panel data (currently returns empty dict as placeholder)\n- `set_admin_data(self, data)` - Set the admin panel data.\n\nArgs:\n    data: Admin panel data to set (currently not implemented)\n**Classes:**\n- `AdminPanelDialog` - Dialog for admin panel functionality.\n  - `AdminPanelDialog.__init__(self, parent)` - Initialize the AdminPanelDialog.\n\nArgs:\n    parent: Parent widget for the dialog\n  - `AdminPanelDialog.setup_ui(self)` - Setup the UI components.\n  - `AdminPanelDialog.get_admin_data(self)` - Get the admin panel data.\n\nReturns:\n    dict: Admin panel data (currently returns empty dict as placeholder)\n  - `AdminPanelDialog.set_admin_data(self, data)` - Set the admin panel data.\n\nArgs:\n    data: Admin panel data to set (currently not implemented)\n\n### ui/dialogs/category_management_dialog.py\n**Functions:**\n- `__init__(self, parent, user_id)` - Initialize the object.\n- `load_user_category_data(self)` - Load user's current category settings\n- `on_enable_messages_toggled(self, checked)` - Handle enable automated messages checkbox toggle.\n- `save_category_settings(self)` - Save the selected categories back to user preferences\n- `get_selected_categories(self)` - No description\n- `set_selected_categories(self, categories)` - No description\n**Classes:**\n- `CategoryManagementDialog` - No description\n  - `CategoryManagementDialog.__init__(self, parent, user_id)` - Initialize the object.\n  - `CategoryManagementDialog.load_user_category_data(self)` - Load user's current category settings\n  - `CategoryManagementDialog.on_enable_messages_toggled(self, checked)` - Handle enable automated messages checkbox toggle.\n  - `CategoryManagementDialog.save_category_settings(self)` - Save the selected categories back to user preferences\n  - `CategoryManagementDialog.get_selected_categories(self)` - No description\n  - `CategoryManagementDialog.set_selected_categories(self, categories)` - No description\n\n### ui/dialogs/channel_management_dialog.py\n**Functions:**\n- `__init__(self, parent, user_id)` - Initialize the object.\n- `save_channel_settings(self)` - No description\n- `get_selected_channel(self)` - No description\n- `set_selected_channel(self, channel, value)` - No description\n**Classes:**\n- `ChannelManagementDialog` - No description\n  - `ChannelManagementDialog.__init__(self, parent, user_id)` - Initialize the object.\n  - `ChannelManagementDialog.save_channel_settings(self)` - No description\n  - `ChannelManagementDialog.get_selected_channel(self)` - No description\n  - `ChannelManagementDialog.set_selected_channel(self, channel, value)` - No description\n\n### ui/dialogs/checkin_management_dialog.py\n**Functions:**\n- `__init__(self, parent, user_id)` - Initialize the object.\n- `on_enable_checkins_toggled(self, checked)` - No description\n- `load_user_checkin_data(self)` - Load the user's current check-in settings\n- `save_checkin_settings(self)` - Save the check-in settings back to user preferences\n- `get_checkin_settings(self)` - Get the current check-in settings.\n- `set_checkin_settings(self, settings)` - Set the check-in settings.\n**Classes:**\n- `CheckinManagementDialog` - Dialog for managing check-in settings.\n  - `CheckinManagementDialog.__init__(self, parent, user_id)` - Initialize the object.\n  - `CheckinManagementDialog.on_enable_checkins_toggled(self, checked)` - No description\n  - `CheckinManagementDialog.load_user_checkin_data(self)` - Load the user's current check-in settings\n  - `CheckinManagementDialog.save_checkin_settings(self)` - Save the check-in settings back to user preferences\n  - `CheckinManagementDialog.get_checkin_settings(self)` - Get the current check-in settings.\n  - `CheckinManagementDialog.set_checkin_settings(self, settings)` - Set the check-in settings.\n\n### ui/dialogs/schedule_editor_dialog.py\n**Functions:**\n- `open_schedule_editor(parent, user_id, category, on_save)` - Open the schedule editor dialog.\n- `__init__(self, parent, user_id, category, on_save)` - Initialize the object.\n- `center_dialog(self)` - Center the dialog on the parent window.\n- `setup_functionality(self)` - Setup the functionality and connect signals.\n- `load_existing_data(self)` - Load existing schedule data using the new reusable function.\n- `add_new_period(self, period_name, period_data)` - Add a new period row using the PeriodRowWidget.\n- `resort_period_widgets(self)` - Re-sort the period widgets to maintain proper order (ALL at bottom).\n- `find_lowest_available_period_number(self)` - Find the lowest available number for new period names.\n- `remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n- `undo_last_delete(self)` - Undo the last deletion.\n- `collect_period_data(self)` - Collect period data using the new reusable function.\n- `handle_save(self)` - Handle save button click - prevents dialog closure on validation errors.\n- `save_schedule(self)` - Save the schedule data.\n- `cancel(self)` - Cancel the dialog.\n- `get_schedule_data(self)` - Get the current schedule data.\n- `set_schedule_data(self, data)` - Set the schedule data.\n- `sort_key(widget)` - No description\n**Classes:**\n- `ScheduleEditorDialog` - Dialog for editing schedules.\n  - `ScheduleEditorDialog.__init__(self, parent, user_id, category, on_save)` - Initialize the object.\n  - `ScheduleEditorDialog.center_dialog(self)` - Center the dialog on the parent window.\n  - `ScheduleEditorDialog.setup_functionality(self)` - Setup the functionality and connect signals.\n  - `ScheduleEditorDialog.load_existing_data(self)` - Load existing schedule data using the new reusable function.\n  - `ScheduleEditorDialog.add_new_period(self, period_name, period_data)` - Add a new period row using the PeriodRowWidget.\n  - `ScheduleEditorDialog.resort_period_widgets(self)` - Re-sort the period widgets to maintain proper order (ALL at bottom).\n  - `ScheduleEditorDialog.find_lowest_available_period_number(self)` - Find the lowest available number for new period names.\n  - `ScheduleEditorDialog.remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n  - `ScheduleEditorDialog.undo_last_delete(self)` - Undo the last deletion.\n  - `ScheduleEditorDialog.collect_period_data(self)` - Collect period data using the new reusable function.\n  - `ScheduleEditorDialog.handle_save(self)` - Handle save button click - prevents dialog closure on validation errors.\n  - `ScheduleEditorDialog.save_schedule(self)` - Save the schedule data.\n  - `ScheduleEditorDialog.cancel(self)` - Cancel the dialog.\n  - `ScheduleEditorDialog.get_schedule_data(self)` - Get the current schedule data.\n  - `ScheduleEditorDialog.set_schedule_data(self, data)` - Set the schedule data.\n\n### ui/dialogs/task_completion_dialog.py\n**Functions:**\n- `__init__(self, parent, task_title)` - Initialize the task completion dialog.\n- `setup_ui(self)` - Setup the UI components.\n- `setup_completion_time_components(self)` - Setup the completion time input components.\n- `setup_connections(self)` - Setup signal connections.\n- `get_completion_date(self)` - Get completion date as string.\n- `get_completion_time(self)` - Get completion time as 24-hour format string.\n- `get_completion_notes(self)` - Get completion notes.\n- `get_completion_data(self)` - Get all completion data as a dictionary.\n**Classes:**\n- `TaskCompletionDialog` - Dialog for specifying task completion details.\n  - `TaskCompletionDialog.__init__(self, parent, task_title)` - Initialize the task completion dialog.\n  - `TaskCompletionDialog.setup_ui(self)` - Setup the UI components.\n  - `TaskCompletionDialog.setup_completion_time_components(self)` - Setup the completion time input components.\n  - `TaskCompletionDialog.setup_connections(self)` - Setup signal connections.\n  - `TaskCompletionDialog.get_completion_date(self)` - Get completion date as string.\n  - `TaskCompletionDialog.get_completion_time(self)` - Get completion time as 24-hour format string.\n  - `TaskCompletionDialog.get_completion_notes(self)` - Get completion notes.\n  - `TaskCompletionDialog.get_completion_data(self)` - Get all completion data as a dictionary.\n\n### ui/dialogs/task_crud_dialog.py\n**Functions:**\n- `__init__(self, parent, user_id)` - Initialize the task CRUD dialog.\n- `setup_ui(self)` - Setup the UI components.\n- `setup_connections(self)` - Setup signal connections.\n- `load_data(self)` - Load all task data and update displays.\n- `refresh_active_tasks(self)` - Refresh the active tasks table.\n- `refresh_completed_tasks(self)` - Refresh the completed tasks table.\n- `update_statistics(self)` - Update the statistics display.\n- `get_selected_task_id(self, table)` - Get the task ID of the selected row in the given table.\n- `add_new_task(self)` - Open dialog to add a new task.\n- `edit_selected_task(self)` - Edit the selected task.\n- `complete_selected_task(self)` - Mark the selected task as completed.\n- `delete_selected_task(self)` - Delete the selected task.\n- `restore_selected_task(self)` - Restore a completed task to active status.\n- `delete_completed_task(self)` - Permanently delete a completed task.\n**Classes:**\n- `TaskCrudDialog` - Dialog for full CRUD operations on tasks.\n  - `TaskCrudDialog.__init__(self, parent, user_id)` - Initialize the task CRUD dialog.\n  - `TaskCrudDialog.setup_ui(self)` - Setup the UI components.\n  - `TaskCrudDialog.setup_connections(self)` - Setup signal connections.\n  - `TaskCrudDialog.load_data(self)` - Load all task data and update displays.\n  - `TaskCrudDialog.refresh_active_tasks(self)` - Refresh the active tasks table.\n  - `TaskCrudDialog.refresh_completed_tasks(self)` - Refresh the completed tasks table.\n  - `TaskCrudDialog.update_statistics(self)` - Update the statistics display.\n  - `TaskCrudDialog.get_selected_task_id(self, table)` - Get the task ID of the selected row in the given table.\n  - `TaskCrudDialog.add_new_task(self)` - Open dialog to add a new task.\n  - `TaskCrudDialog.edit_selected_task(self)` - Edit the selected task.\n  - `TaskCrudDialog.complete_selected_task(self)` - Mark the selected task as completed.\n  - `TaskCrudDialog.delete_selected_task(self)` - Delete the selected task.\n  - `TaskCrudDialog.restore_selected_task(self)` - Restore a completed task to active status.\n  - `TaskCrudDialog.delete_completed_task(self)` - Permanently delete a completed task.\n\n### ui/dialogs/task_edit_dialog.py\n**Functions:**\n- `__init__(self, parent, user_id, task_data)` - Initialize the task edit dialog.\n- `setup_ui(self)` - Setup the UI components.\n- `setup_due_time_components(self)` - Setup the due time input components.\n- `setup_recurring_task_components(self)` - Setup the recurring task input components.\n- `on_recurring_pattern_changed(self, pattern_text)` - Handle recurring pattern selection change.\n- `on_hour_changed(self, hour_text)` - Handle hour selection change.\n- `on_minute_changed(self, minute_text)` - Handle minute selection change.\n- `on_no_due_date_toggled(self, checked)` - Handle No Due Date checkbox toggle.\n- `setup_connections(self)` - Setup signal connections.\n- `load_task_data(self)` - Load existing task data into the form.\n- `load_recurring_task_data(self)` - Load recurring task data into the form.\n- `set_due_time_from_24h(self, time)` - Set due time components from 24-hour time.\n- `get_due_time_as_24h(self)` - Get due time as 24-hour format string.\n- `add_reminder_period(self)` - Add a new reminder period.\n- `render_reminder_periods(self)` - Render the reminder periods in the UI.\n- `render_reminder_period_row(self, index, period)` - Render a single reminder period row.\n- `delete_reminder_period(self, index)` - Delete a reminder period.\n- `validate_form(self)` - Validate the form data.\n- `collect_reminder_periods(self)` - Collect reminder period data from the UI.\n- `collect_quick_reminders(self)` - Collect quick reminder options.\n- `collect_selected_tags(self)` - Collect selected tags from the tag widget.\n- `collect_recurring_task_data(self)` - Collect recurring task settings from the form.\n- `save_task(self)` - Save the task data.\n**Classes:**\n- `TaskEditDialog` - Dialog for creating or editing tasks.\n  - `TaskEditDialog.__init__(self, parent, user_id, task_data)` - Initialize the task edit dialog.\n  - `TaskEditDialog.setup_ui(self)` - Setup the UI components.\n  - `TaskEditDialog.setup_due_time_components(self)` - Setup the due time input components.\n  - `TaskEditDialog.setup_recurring_task_components(self)` - Setup the recurring task input components.\n  - `TaskEditDialog.on_recurring_pattern_changed(self, pattern_text)` - Handle recurring pattern selection change.\n  - `TaskEditDialog.on_hour_changed(self, hour_text)` - Handle hour selection change.\n  - `TaskEditDialog.on_minute_changed(self, minute_text)` - Handle minute selection change.\n  - `TaskEditDialog.on_no_due_date_toggled(self, checked)` - Handle No Due Date checkbox toggle.\n  - `TaskEditDialog.setup_connections(self)` - Setup signal connections.\n  - `TaskEditDialog.load_task_data(self)` - Load existing task data into the form.\n  - `TaskEditDialog.load_recurring_task_data(self)` - Load recurring task data into the form.\n  - `TaskEditDialog.set_due_time_from_24h(self, time)` - Set due time components from 24-hour time.\n  - `TaskEditDialog.get_due_time_as_24h(self)` - Get due time as 24-hour format string.\n  - `TaskEditDialog.add_reminder_period(self)` - Add a new reminder period.\n  - `TaskEditDialog.render_reminder_periods(self)` - Render the reminder periods in the UI.\n  - `TaskEditDialog.render_reminder_period_row(self, index, period)` - Render a single reminder period row.\n  - `TaskEditDialog.delete_reminder_period(self, index)` - Delete a reminder period.\n  - `TaskEditDialog.validate_form(self)` - Validate the form data.\n  - `TaskEditDialog.collect_reminder_periods(self)` - Collect reminder period data from the UI.\n  - `TaskEditDialog.collect_quick_reminders(self)` - Collect quick reminder options.\n  - `TaskEditDialog.collect_selected_tags(self)` - Collect selected tags from the tag widget.\n  - `TaskEditDialog.collect_recurring_task_data(self)` - Collect recurring task settings from the form.\n  - `TaskEditDialog.save_task(self)` - Save the task data.\n\n### ui/dialogs/task_management_dialog.py\n**Functions:**\n- `__init__(self, parent, user_id)` - Initialize the object.\n- `on_enable_task_management_toggled(self, checked)` - No description\n- `save_task_settings(self)` - Save the task settings.\n- `get_statistics(self)` - No description\n**Classes:**\n- `TaskManagementDialog` - No description\n  - `TaskManagementDialog.__init__(self, parent, user_id)` - Initialize the object.\n  - `TaskManagementDialog.on_enable_task_management_toggled(self, checked)` - No description\n  - `TaskManagementDialog.save_task_settings(self)` - Save the task settings.\n  - `TaskManagementDialog.get_statistics(self)` - No description\n\n### ui/dialogs/user_profile_dialog.py\n**Functions:**\n- `open_personalization_dialog(parent, user_id, on_save, existing_data)` - Open the personalization dialog.\n\nArgs:\n    parent: Parent widget\n    user_id: User ID for the personalization data\n    on_save: Optional callback function to call when saving\n    existing_data: Optional existing personalization data\n    \nReturns:\n    QDialog.DialogCode: Dialog result code\n- `__init__(self, parent, user_id, on_save, existing_data)` - Initialize the object.\n- `center_dialog(self)` - Center the dialog on the parent window.\n- `setup_ui(self)` - Setup the user interface.\n- `keyPressEvent(self, event)` - Handle key press events for the dialog.\n- `create_custom_field_list(self, parent_layout, predefined_values, existing_values, label_text)` - Creates a multi-column list with preset items (checkbox + label) and custom fields (checkbox + entry + delete).\n- `add_custom_field(self, parent_layout, field_type, value, checked)` - Add a custom field row with checkbox, entry, and delete button.\n- `remove_custom_field(self, field_frame)` - Remove a custom field from the layout.\n- `create_health_section(self)` - Create the health section of the personalization dialog.\n\nReturns:\n    QGroupBox: Health section group box\n- `create_loved_ones_section(self)` - Create the loved ones section of the personalization dialog.\n\nReturns:\n    QGroupBox: Loved ones section group box\n- `add_loved_one_widget(self, parent_layout, loved_one_data)` - Add a loved one widget to the layout.\n\nArgs:\n    parent_layout: Parent layout to add the widget to\n    loved_one_data: Optional existing loved one data\n- `remove_loved_one_widget(self, frame)` - Remove a loved one widget from the layout.\n\nArgs:\n    frame: Frame widget to remove\n- `create_interests_section(self)` - Create the interests section of the personalization dialog.\n\nReturns:\n    QGroupBox: Interests section group box\n- `create_notes_section(self)` - Create the notes section of the personalization dialog.\n\nReturns:\n    QGroupBox: Notes section group box\n- `create_goals_section(self)` - Create the goals section of the personalization dialog.\n\nReturns:\n    QGroupBox: Goals section group box\n- `collect_custom_field_data(self, group_box)` - Collect data from custom field checkboxes and entries.\n\nArgs:\n    group_box: Group box containing custom fields\n    \nReturns:\n    list: List of selected values from checkboxes and custom entries\n- `collect_loved_ones_data(self)` - Collect data from loved ones widgets.\n\nReturns:\n    list: List of loved ones data dictionaries\n- `save_personalization(self)` - Save the personalization data.\n- `cancel(self)` - Cancel the personalization dialog.\n- `title_case(s)` - Convert snake_case or lowercase to Title Case.\n\nArgs:\n    s: String to convert to title case\n    \nReturns:\n    str: String converted to title case\n**Classes:**\n- `UserProfileDialog` - PySide6-based personalization dialog for user account creation and management.\n  - `UserProfileDialog.__init__(self, parent, user_id, on_save, existing_data)` - Initialize the object.\n  - `UserProfileDialog.center_dialog(self)` - Center the dialog on the parent window.\n  - `UserProfileDialog.setup_ui(self)` - Setup the user interface.\n  - `UserProfileDialog.keyPressEvent(self, event)` - Handle key press events for the dialog.\n  - `UserProfileDialog.create_custom_field_list(self, parent_layout, predefined_values, existing_values, label_text)` - Creates a multi-column list with preset items (checkbox + label) and custom fields (checkbox + entry + delete).\n  - `UserProfileDialog.add_custom_field(self, parent_layout, field_type, value, checked)` - Add a custom field row with checkbox, entry, and delete button.\n  - `UserProfileDialog.remove_custom_field(self, field_frame)` - Remove a custom field from the layout.\n  - `UserProfileDialog.create_health_section(self)` - Create the health section of the personalization dialog.\n\nReturns:\n    QGroupBox: Health section group box\n  - `UserProfileDialog.create_loved_ones_section(self)` - Create the loved ones section of the personalization dialog.\n\nReturns:\n    QGroupBox: Loved ones section group box\n  - `UserProfileDialog.add_loved_one_widget(self, parent_layout, loved_one_data)` - Add a loved one widget to the layout.\n\nArgs:\n    parent_layout: Parent layout to add the widget to\n    loved_one_data: Optional existing loved one data\n  - `UserProfileDialog.remove_loved_one_widget(self, frame)` - Remove a loved one widget from the layout.\n\nArgs:\n    frame: Frame widget to remove\n  - `UserProfileDialog.create_interests_section(self)` - Create the interests section of the personalization dialog.\n\nReturns:\n    QGroupBox: Interests section group box\n  - `UserProfileDialog.create_notes_section(self)` - Create the notes section of the personalization dialog.\n\nReturns:\n    QGroupBox: Notes section group box\n  - `UserProfileDialog.create_goals_section(self)` - Create the goals section of the personalization dialog.\n\nReturns:\n    QGroupBox: Goals section group box\n  - `UserProfileDialog.collect_custom_field_data(self, group_box)` - Collect data from custom field checkboxes and entries.\n\nArgs:\n    group_box: Group box containing custom fields\n    \nReturns:\n    list: List of selected values from checkboxes and custom entries\n  - `UserProfileDialog.collect_loved_ones_data(self)` - Collect data from loved ones widgets.\n\nReturns:\n    list: List of loved ones data dictionaries\n  - `UserProfileDialog.save_personalization(self)` - Save the personalization data.\n  - `UserProfileDialog.cancel(self)` - Cancel the personalization dialog.\n\n### ui/generated/account_creator_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog_create_account)` - Auto-generated Qt UI setup function for account_creator_dialog.\n- `retranslateUi(self, Dialog_create_account)` - Auto-generated Qt UI translation function for account_creator_dialog.\n**Classes:**\n- `Ui_Dialog_create_account` - No description\n  - `Ui_Dialog_create_account.setupUi(self, Dialog_create_account)` - Auto-generated Qt UI setup function for account_creator_dialog.\n  - `Ui_Dialog_create_account.retranslateUi(self, Dialog_create_account)` - Auto-generated Qt UI translation function for account_creator_dialog.\n\n### ui/generated/admin_panel_pyqt.py\n**Functions:**\n- `setupUi(self, ui_app_mainwindow)` - No description\n- `retranslateUi(self, ui_app_mainwindow)` - No description\n**Classes:**\n- `Ui_ui_app_mainwindow` - No description\n  - `Ui_ui_app_mainwindow.setupUi(self, ui_app_mainwindow)` - No description\n  - `Ui_ui_app_mainwindow.retranslateUi(self, ui_app_mainwindow)` - No description\n\n### ui/generated/category_management_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog_category_management)` - Auto-generated Qt UI setup function for category_management_dialog.\n- `retranslateUi(self, Dialog_category_management)` - Auto-generated Qt UI translation function for category_management_dialog.\n**Classes:**\n- `Ui_Dialog_category_management` - No description\n  - `Ui_Dialog_category_management.setupUi(self, Dialog_category_management)` - Auto-generated Qt UI setup function for category_management_dialog.\n  - `Ui_Dialog_category_management.retranslateUi(self, Dialog_category_management)` - Auto-generated Qt UI translation function for category_management_dialog.\n\n### ui/generated/category_selection_widget_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Form_category_selection_widget)` - Auto-generated Qt UI setup function for category_selection_widget.\n- `retranslateUi(self, Form_category_selection_widget)` - Auto-generated Qt UI translation function for category_selection_widget.\n**Classes:**\n- `Ui_Form_category_selection_widget` - No description\n  - `Ui_Form_category_selection_widget.setupUi(self, Form_category_selection_widget)` - Auto-generated Qt UI setup function for category_selection_widget.\n  - `Ui_Form_category_selection_widget.retranslateUi(self, Form_category_selection_widget)` - Auto-generated Qt UI translation function for category_selection_widget.\n\n### ui/generated/channel_management_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog)` - Auto-generated Qt UI setup function for channel_management_dialog.\n- `retranslateUi(self, Dialog)` - Auto-generated Qt UI translation function for channel_management_dialog.\n**Classes:**\n- `Ui_Dialog` - No description\n  - `Ui_Dialog.setupUi(self, Dialog)` - Auto-generated Qt UI setup function for channel_management_dialog.\n  - `Ui_Dialog.retranslateUi(self, Dialog)` - Auto-generated Qt UI translation function for channel_management_dialog.\n\n### ui/generated/channel_selection_widget_pyqt.py\n**Functions:**\n- `setupUi(self, Form_channel_selection)` - No description\n- `retranslateUi(self, Form_channel_selection)` - No description\n**Classes:**\n- `Ui_Form_channel_selection` - No description\n  - `Ui_Form_channel_selection.setupUi(self, Form_channel_selection)` - No description\n  - `Ui_Form_channel_selection.retranslateUi(self, Form_channel_selection)` - No description\n\n### ui/generated/checkin_element_template_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Form_checkin_element_template)` - Auto-generated Qt UI setup function for checkin_element_template.\n- `retranslateUi(self, Form_checkin_element_template)` - Auto-generated Qt UI translation function for checkin_element_template.\n**Classes:**\n- `Ui_Form_checkin_element_template` - No description\n  - `Ui_Form_checkin_element_template.setupUi(self, Form_checkin_element_template)` - Auto-generated Qt UI setup function for checkin_element_template.\n  - `Ui_Form_checkin_element_template.retranslateUi(self, Form_checkin_element_template)` - Auto-generated Qt UI translation function for checkin_element_template.\n\n### ui/generated/checkin_management_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog_checkin_management)` - Auto-generated Qt UI setup function for checkin_management_dialog.\n- `retranslateUi(self, Dialog_checkin_management)` - Auto-generated Qt UI translation function for checkin_management_dialog.\n**Classes:**\n- `Ui_Dialog_checkin_management` - No description\n  - `Ui_Dialog_checkin_management.setupUi(self, Dialog_checkin_management)` - Auto-generated Qt UI setup function for checkin_management_dialog.\n  - `Ui_Dialog_checkin_management.retranslateUi(self, Dialog_checkin_management)` - Auto-generated Qt UI translation function for checkin_management_dialog.\n\n### ui/generated/checkin_settings_widget_pyqt.py\n**Functions:**\n- `setupUi(self, Form_checkin_settings)` - Auto-generated Qt UI setup function for checkin_settings_widget.\n- `retranslateUi(self, Form_checkin_settings)` - Auto-generated Qt UI translation function for checkin_settings_widget.\n**Classes:**\n- `Ui_Form_checkin_settings` - No description\n  - `Ui_Form_checkin_settings.setupUi(self, Form_checkin_settings)` - Auto-generated Qt UI setup function for checkin_settings_widget.\n  - `Ui_Form_checkin_settings.retranslateUi(self, Form_checkin_settings)` - Auto-generated Qt UI translation function for checkin_settings_widget.\n\n### ui/generated/dynamic_list_field_template_pyqt.py\n**Functions:**\n- `setupUi(self, Form_dynamic_list_field_template)` - Auto-generated Qt UI setup function for dynamic_list_field_template.\n- `retranslateUi(self, Form_dynamic_list_field_template)` - Auto-generated Qt UI translation function for dynamic_list_field_template.\n**Classes:**\n- `Ui_Form_dynamic_list_field_template` - No description\n  - `Ui_Form_dynamic_list_field_template.setupUi(self, Form_dynamic_list_field_template)` - Auto-generated Qt UI setup function for dynamic_list_field_template.\n  - `Ui_Form_dynamic_list_field_template.retranslateUi(self, Form_dynamic_list_field_template)` - Auto-generated Qt UI translation function for dynamic_list_field_template.\n\n### ui/generated/period_row_template_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Form_period_row_template)` - Auto-generated Qt UI setup function for period_row_template.\n- `retranslateUi(self, Form_period_row_template)` - Auto-generated Qt UI translation function for period_row_template.\n**Classes:**\n- `Ui_Form_period_row_template` - No description\n  - `Ui_Form_period_row_template.setupUi(self, Form_period_row_template)` - Auto-generated Qt UI setup function for period_row_template.\n  - `Ui_Form_period_row_template.retranslateUi(self, Form_period_row_template)` - Auto-generated Qt UI translation function for period_row_template.\n\n### ui/generated/schedule_editor_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog_edit_schedule)` - Auto-generated Qt UI setup function for schedule_editor_dialog.\n- `retranslateUi(self, Dialog_edit_schedule)` - Auto-generated Qt UI translation function for schedule_editor_dialog.\n**Classes:**\n- `Ui_Dialog_edit_schedule` - No description\n  - `Ui_Dialog_edit_schedule.setupUi(self, Dialog_edit_schedule)` - Auto-generated Qt UI setup function for schedule_editor_dialog.\n  - `Ui_Dialog_edit_schedule.retranslateUi(self, Dialog_edit_schedule)` - Auto-generated Qt UI translation function for schedule_editor_dialog.\n\n### ui/generated/tag_widget_pyqt.py\n**Functions:**\n- `setupUi(self, Widget_tag)` - No description\n- `retranslateUi(self, Widget_tag)` - No description\n**Classes:**\n- `Ui_Widget_tag` - No description\n  - `Ui_Widget_tag.setupUi(self, Widget_tag)` - No description\n  - `Ui_Widget_tag.retranslateUi(self, Widget_tag)` - No description\n\n### ui/generated/task_completion_dialog_pyqt.py\n**Functions:**\n- `setupUi(self, Dialog_task_completion)` - No description\n- `retranslateUi(self, Dialog_task_completion)` - No description\n**Classes:**\n- `Ui_Dialog_task_completion` - No description\n  - `Ui_Dialog_task_completion.setupUi(self, Dialog_task_completion)` - No description\n  - `Ui_Dialog_task_completion.retranslateUi(self, Dialog_task_completion)` - No description\n\n### ui/generated/task_crud_dialog_pyqt.py\n**Functions:**\n- `setupUi(self, Dialog_task_crud)` - No description\n- `retranslateUi(self, Dialog_task_crud)` - No description\n**Classes:**\n- `Ui_Dialog_task_crud` - No description\n  - `Ui_Dialog_task_crud.setupUi(self, Dialog_task_crud)` - No description\n  - `Ui_Dialog_task_crud.retranslateUi(self, Dialog_task_crud)` - No description\n\n### ui/generated/task_edit_dialog_pyqt.py\n**Functions:**\n- `setupUi(self, Dialog_task_edit)` - No description\n- `retranslateUi(self, Dialog_task_edit)` - No description\n**Classes:**\n- `Ui_Dialog_task_edit` - No description\n  - `Ui_Dialog_task_edit.setupUi(self, Dialog_task_edit)` - No description\n  - `Ui_Dialog_task_edit.retranslateUi(self, Dialog_task_edit)` - No description\n\n### ui/generated/task_management_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog_task_management)` - Auto-generated Qt UI setup function for task_management_dialog.\n- `retranslateUi(self, Dialog_task_management)` - Auto-generated Qt UI translation function for task_management_dialog.\n**Classes:**\n- `Ui_Dialog_task_management` - No description\n  - `Ui_Dialog_task_management.setupUi(self, Dialog_task_management)` - Auto-generated Qt UI setup function for task_management_dialog.\n  - `Ui_Dialog_task_management.retranslateUi(self, Dialog_task_management)` - Auto-generated Qt UI translation function for task_management_dialog.\n\n### ui/generated/task_settings_widget_pyqt.py\n**Functions:**\n- `setupUi(self, Form_task_settings)` - No description\n- `retranslateUi(self, Form_task_settings)` - No description\n**Classes:**\n- `Ui_Form_task_settings` - No description\n  - `Ui_Form_task_settings.setupUi(self, Form_task_settings)` - No description\n  - `Ui_Form_task_settings.retranslateUi(self, Form_task_settings)` - No description\n\n### ui/generated/user_profile_management_dialog_pyqt.py\n**Functions:**\n- `qtTrId(id)` - No description\n- `setupUi(self, Dialog_user_profile)` - Auto-generated Qt UI setup function for user_profile_management_dialog.\n- `retranslateUi(self, Dialog_user_profile)` - Auto-generated Qt UI translation function for user_profile_management_dialog.\n**Classes:**\n- `Ui_Dialog_user_profile` - No description\n  - `Ui_Dialog_user_profile.setupUi(self, Dialog_user_profile)` - Auto-generated Qt UI setup function for user_profile_management_dialog.\n  - `Ui_Dialog_user_profile.retranslateUi(self, Dialog_user_profile)` - Auto-generated Qt UI translation function for user_profile_management_dialog.\n\n### ui/generated/user_profile_settings_widget_pyqt.py\n**Functions:**\n- `setupUi(self, Form_user_profile_settings)` - Auto-generated Qt UI setup function for user_profile_settings_widget.\n- `retranslateUi(self, Form_user_profile_settings)` - Auto-generated Qt UI translation function for user_profile_settings_widget.\n**Classes:**\n- `Ui_Form_user_profile_settings` - No description\n  - `Ui_Form_user_profile_settings.setupUi(self, Form_user_profile_settings)` - Auto-generated Qt UI setup function for user_profile_settings_widget.\n  - `Ui_Form_user_profile_settings.retranslateUi(self, Form_user_profile_settings)` - Auto-generated Qt UI translation function for user_profile_settings_widget.\n\n### ui/ui_app_qt.py\n**Functions:**\n- `main()` - Main entry point for the Qt-based UI application\n- `__init__(self)` - Initialize the object.\n- `validate_configuration_before_start(self)` - Validate configuration before attempting to start the service.\n- `is_service_running(self)` - Check if the MHM service is running\n- `start_service(self)` - Start the MHM backend service\n- `stop_service(self)` - Stop the MHM backend service\n- `restart_service(self)` - Restart the MHM backend service\n- `__init__(self)` - Initialize the object.\n- `load_ui(self)` - Load the UI from the .ui file\n- `load_theme(self)` - Load and apply the QSS theme from the styles directory\n- `connect_signals(self)` - Connect UI signals to slots\n- `initialize_ui(self)` - Initialize the UI state\n- `update_user_index_on_startup(self)` - Automatically update the user index when the admin panel starts\n- `update_service_status(self)` - Update the service status display\n- `start_service(self)` - Start the MHM service\n- `stop_service(self)` - Stop the MHM service\n- `restart_service(self)` - Restart the MHM service\n- `run_full_scheduler(self)` - Run the full scheduler for all users\n- `run_user_scheduler(self)` - Run scheduler for the selected user\n- `run_category_scheduler(self)` - Run scheduler for the selected user and category\n- `refresh_user_list(self)` - Refresh the user list in the combo box using user index\n- `on_user_selected(self, user_display)` - Handle user selection from combo box\n- `load_user_categories(self, user_id)` - Load categories for the selected user\n- `on_category_selected(self, category)` - Handle category selection\n- `enable_content_management(self)` - Enable content management buttons\n- `disable_content_management(self)` - Disable content management buttons\n- `create_new_user(self)` - Open dialog to create a new user\n- `manage_communication_settings(self)` - No description\n- `manage_categories(self)` - No description\n- `manage_checkins(self)` - No description\n- `manage_tasks(self)` - No description\n- `manage_task_crud(self)` - No description\n- `manage_personalization(self)` - No description\n- `manage_user_analytics(self)` - Open user analytics interface for selected user\n- `edit_user_messages(self)` - Open message editing interface for selected user\n- `open_message_editor(self, parent_dialog, category)` - Open the message editing window for a specific category\n- `edit_user_schedules(self)` - Open schedule editing interface for selected user\n- `open_schedule_editor(self, parent_dialog, category)` - Open the schedule editing window for a specific category\n- `_send_test_message__validate_user_selection(self)` - Validate that a user is selected.\n- `_send_test_message__validate_service_running(self)` - Validate that the service is running.\n- `_send_test_message__get_selected_category(self)` - Get and validate the selected category from the dropdown.\n- `send_test_message(self)` - Send a test message to the selected user\n- `confirm_test_message(self, category)` - Confirm and send test message\n- `send_actual_test_message(self, category)` - Send a test message via the running service\n- `toggle_logging_verbosity(self)` - Toggle logging verbosity and update menu.\n- `view_log_file(self)` - Open the log file in the default text editor.\n- `view_cache_status(self)` - Show cache cleanup status and information.\n- `force_clean_cache(self)` - Force cache cleanup regardless of schedule.\n- `validate_configuration(self)` - Show detailed configuration validation report.\n- `show_configuration_help(self, parent_window)` - Show help for fixing configuration issues.\n- `view_all_users_summary(self)` - Show a summary of all users in the system.\n- `system_health_check(self)` - Perform a basic system health check.\n- `closeEvent(self, event)` - Handle window close event\n- `shutdown_ui_components(self)` - Shutdown any UI-created components gracefully\n- `cleanup_old_requests()` - No description\n- `on_save(data)` - No description\n- `on_schedule_save()` - Callback when schedule is saved.\n**Classes:**\n- `ServiceManager` - Manages the MHM backend service process\n  - `ServiceManager.__init__(self)` - Initialize the object.\n  - `ServiceManager.validate_configuration_before_start(self)` - Validate configuration before attempting to start the service.\n  - `ServiceManager.is_service_running(self)` - Check if the MHM service is running\n  - `ServiceManager.start_service(self)` - Start the MHM backend service\n  - `ServiceManager.stop_service(self)` - Stop the MHM backend service\n  - `ServiceManager.restart_service(self)` - Restart the MHM backend service\n- `MHMManagerUI` - Main MHM Management UI using PySide6\n  - `MHMManagerUI.__init__(self)` - Initialize the object.\n  - `MHMManagerUI.load_ui(self)` - Load the UI from the .ui file\n  - `MHMManagerUI.load_theme(self)` - Load and apply the QSS theme from the styles directory\n  - `MHMManagerUI.connect_signals(self)` - Connect UI signals to slots\n  - `MHMManagerUI.initialize_ui(self)` - Initialize the UI state\n  - `MHMManagerUI.update_user_index_on_startup(self)` - Automatically update the user index when the admin panel starts\n  - `MHMManagerUI.update_service_status(self)` - Update the service status display\n  - `MHMManagerUI.start_service(self)` - Start the MHM service\n  - `MHMManagerUI.stop_service(self)` - Stop the MHM service\n  - `MHMManagerUI.restart_service(self)` - Restart the MHM service\n  - `MHMManagerUI.run_full_scheduler(self)` - Run the full scheduler for all users\n  - `MHMManagerUI.run_user_scheduler(self)` - Run scheduler for the selected user\n  - `MHMManagerUI.run_category_scheduler(self)` - Run scheduler for the selected user and category\n  - `MHMManagerUI.refresh_user_list(self)` - Refresh the user list in the combo box using user index\n  - `MHMManagerUI.on_user_selected(self, user_display)` - Handle user selection from combo box\n  - `MHMManagerUI.load_user_categories(self, user_id)` - Load categories for the selected user\n  - `MHMManagerUI.on_category_selected(self, category)` - Handle category selection\n  - `MHMManagerUI.enable_content_management(self)` - Enable content management buttons\n  - `MHMManagerUI.disable_content_management(self)` - Disable content management buttons\n  - `MHMManagerUI.create_new_user(self)` - Open dialog to create a new user\n  - `MHMManagerUI.manage_communication_settings(self)` - No description\n  - `MHMManagerUI.manage_categories(self)` - No description\n  - `MHMManagerUI.manage_checkins(self)` - No description\n  - `MHMManagerUI.manage_tasks(self)` - No description\n  - `MHMManagerUI.manage_task_crud(self)` - No description\n  - `MHMManagerUI.manage_personalization(self)` - No description\n  - `MHMManagerUI.manage_user_analytics(self)` - Open user analytics interface for selected user\n  - `MHMManagerUI.edit_user_messages(self)` - Open message editing interface for selected user\n  - `MHMManagerUI.open_message_editor(self, parent_dialog, category)` - Open the message editing window for a specific category\n  - `MHMManagerUI.edit_user_schedules(self)` - Open schedule editing interface for selected user\n  - `MHMManagerUI.open_schedule_editor(self, parent_dialog, category)` - Open the schedule editing window for a specific category\n  - `MHMManagerUI._send_test_message__validate_user_selection(self)` - Validate that a user is selected.\n  - `MHMManagerUI._send_test_message__validate_service_running(self)` - Validate that the service is running.\n  - `MHMManagerUI._send_test_message__get_selected_category(self)` - Get and validate the selected category from the dropdown.\n  - `MHMManagerUI.send_test_message(self)` - Send a test message to the selected user\n  - `MHMManagerUI.confirm_test_message(self, category)` - Confirm and send test message\n  - `MHMManagerUI.send_actual_test_message(self, category)` - Send a test message via the running service\n  - `MHMManagerUI.toggle_logging_verbosity(self)` - Toggle logging verbosity and update menu.\n  - `MHMManagerUI.view_log_file(self)` - Open the log file in the default text editor.\n  - `MHMManagerUI.view_cache_status(self)` - Show cache cleanup status and information.\n  - `MHMManagerUI.force_clean_cache(self)` - Force cache cleanup regardless of schedule.\n  - `MHMManagerUI.validate_configuration(self)` - Show detailed configuration validation report.\n  - `MHMManagerUI.show_configuration_help(self, parent_window)` - Show help for fixing configuration issues.\n  - `MHMManagerUI.view_all_users_summary(self)` - Show a summary of all users in the system.\n  - `MHMManagerUI.system_health_check(self)` - Perform a basic system health check.\n  - `MHMManagerUI.closeEvent(self, event)` - Handle window close event\n  - `MHMManagerUI.shutdown_ui_components(self)` - Shutdown any UI-created components gracefully\n\n### ui/widgets/category_selection_widget.py\n**Functions:**\n- `__init__(self, parent)` - Initialize the object.\n- `get_selected_categories(self)` - No description\n- `set_selected_categories(self, categories)` - No description\n**Classes:**\n- `CategorySelectionWidget` - No description\n  - `CategorySelectionWidget.__init__(self, parent)` - Initialize the object.\n  - `CategorySelectionWidget.get_selected_categories(self)` - No description\n  - `CategorySelectionWidget.set_selected_categories(self, categories)` - No description\n\n### ui/widgets/channel_selection_widget.py\n**Functions:**\n- `__init__(self, parent)` - Initialize the ChannelSelectionWidget.\n\nSets up the UI for channel selection with Discord and Email options,\nalong with timezone selection. Populates timezone options and sets default\ntimezone to America/Regina.\n\nArgs:\n    parent: Parent widget (optional)\n- `populate_timezones(self)` - Populate the timezone combo box with options.\n- `get_selected_channel(self)` - No description\n- `get_all_contact_info(self)` - Get all contact info fields from the widget.\n- `get_timezone(self)` - Get the selected timezone.\n- `set_selected_channel(self, channel, value)` - No description\n- `set_timezone(self, timezone)` - Set the timezone.\n- `set_contact_info(self, email, phone, discord_id, timezone)` - No description\n**Classes:**\n- `ChannelSelectionWidget` - No description\n  - `ChannelSelectionWidget.__init__(self, parent)` - Initialize the ChannelSelectionWidget.\n\nSets up the UI for channel selection with Discord and Email options,\nalong with timezone selection. Populates timezone options and sets default\ntimezone to America/Regina.\n\nArgs:\n    parent: Parent widget (optional)\n  - `ChannelSelectionWidget.populate_timezones(self)` - Populate the timezone combo box with options.\n  - `ChannelSelectionWidget.get_selected_channel(self)` - No description\n  - `ChannelSelectionWidget.get_all_contact_info(self)` - Get all contact info fields from the widget.\n  - `ChannelSelectionWidget.get_timezone(self)` - Get the selected timezone.\n  - `ChannelSelectionWidget.set_selected_channel(self, channel, value)` - No description\n  - `ChannelSelectionWidget.set_timezone(self, timezone)` - Set the timezone.\n  - `ChannelSelectionWidget.set_contact_info(self, email, phone, discord_id, timezone)` - No description\n\n### ui/widgets/checkin_settings_widget.py\n**Functions:**\n- `__init__(self, parent, user_id)` - Initialize the object.\n- `showEvent(self, event)` - Handle widget show event.\n\nCalled when the widget becomes visible. Currently just calls the parent\nimplementation but can be extended for initialization that needs to happen\nwhen the widget is shown.\n\nArgs:\n    event: The show event object\n- `setup_connections(self)` - Setup signal connections.\n- `connect_question_checkboxes(self)` - Connect all question checkboxes to track changes.\n- `on_question_toggled(self, checked)` - Handle question checkbox toggle.\n- `load_existing_data(self)` - Load existing check-in data.\n- `set_question_checkboxes(self, questions)` - Set question checkboxes based on saved preferences.\n- `get_default_question_state(self, question_key)` - Get default enabled state for a question.\n- `find_lowest_available_period_number(self)` - Find the lowest available integer (2+) that's not currently used in period names.\n- `add_new_period(self, checked, period_name, period_data)` - Add a new time period using the PeriodRowWidget.\n- `remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n- `undo_last_time_period_delete(self)` - Undo the last time period deletion.\n- `add_new_question(self)` - Add a new check-in question.\n- `undo_last_question_delete(self)` - Undo the last question deletion.\n- `get_checkin_settings(self)` - Get the current check-in settings.\n- `set_checkin_settings(self, settings)` - Set the check-in settings.\n**Classes:**\n- `CheckinSettingsWidget` - Widget for check-in settings configuration.\n  - `CheckinSettingsWidget.__init__(self, parent, user_id)` - Initialize the object.\n  - `CheckinSettingsWidget.showEvent(self, event)` - Handle widget show event.\n\nCalled when the widget becomes visible. Currently just calls the parent\nimplementation but can be extended for initialization that needs to happen\nwhen the widget is shown.\n\nArgs:\n    event: The show event object\n  - `CheckinSettingsWidget.setup_connections(self)` - Setup signal connections.\n  - `CheckinSettingsWidget.connect_question_checkboxes(self)` - Connect all question checkboxes to track changes.\n  - `CheckinSettingsWidget.on_question_toggled(self, checked)` - Handle question checkbox toggle.\n  - `CheckinSettingsWidget.load_existing_data(self)` - Load existing check-in data.\n  - `CheckinSettingsWidget.set_question_checkboxes(self, questions)` - Set question checkboxes based on saved preferences.\n  - `CheckinSettingsWidget.get_default_question_state(self, question_key)` - Get default enabled state for a question.\n  - `CheckinSettingsWidget.find_lowest_available_period_number(self)` - Find the lowest available integer (2+) that's not currently used in period names.\n  - `CheckinSettingsWidget.add_new_period(self, checked, period_name, period_data)` - Add a new time period using the PeriodRowWidget.\n  - `CheckinSettingsWidget.remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n  - `CheckinSettingsWidget.undo_last_time_period_delete(self)` - Undo the last time period deletion.\n  - `CheckinSettingsWidget.add_new_question(self)` - Add a new check-in question.\n  - `CheckinSettingsWidget.undo_last_question_delete(self)` - Undo the last question deletion.\n  - `CheckinSettingsWidget.get_checkin_settings(self)` - Get the current check-in settings.\n  - `CheckinSettingsWidget.set_checkin_settings(self, settings)` - Set the check-in settings.\n\n### ui/widgets/dynamic_list_container.py\n**Functions:**\n- `__init__(self, parent, field_key)` - Initialize the object.\n- `_add_blank_row(self)` - No description\n- `_on_row_edited(self, row)` - No description\n- `_on_row_deleted(self, row)` - No description\n- `_ensure_single_blank_row(self, current_blank)` - No description\n- `_deduplicate_values(self, trigger_row, skip_warning)` - No description\n- `get_values(self)` - No description\n- `set_values(self, selected)` - No description\n- `_first_blank_index(self)` - No description\n- `_on_preset_toggled(self, row)` - No description\n- `__post_init__(self)` - Post-initialization setup.\n**Classes:**\n- `DynamicListContainer` - Manages a vertical list of DynamicListField rows.\n  - `DynamicListContainer.__init__(self, parent, field_key)` - Initialize the object.\n  - `DynamicListContainer._add_blank_row(self)` - No description\n  - `DynamicListContainer._on_row_edited(self, row)` - No description\n  - `DynamicListContainer._on_row_deleted(self, row)` - No description\n  - `DynamicListContainer._ensure_single_blank_row(self, current_blank)` - No description\n  - `DynamicListContainer._deduplicate_values(self, trigger_row, skip_warning)` - No description\n  - `DynamicListContainer.get_values(self)` - No description\n  - `DynamicListContainer.set_values(self, selected)` - No description\n  - `DynamicListContainer._first_blank_index(self)` - No description\n  - `DynamicListContainer._on_preset_toggled(self, row)` - No description\n  - `DynamicListContainer.__post_init__(self)` - Post-initialization setup.\n\n### ui/widgets/dynamic_list_field.py\n**Functions:**\n- `__init__(self, parent, preset_label, editable, checked)` - Initialize the object.\n- `on_text_changed(self)` - Called when user types in the text field.\n- `on_checkbox_toggled(self)` - Called when user clicks the checkbox.\n- `on_editing_finished(self)` - Notify parent container that text editing has finished (for duplicate validation).\n- `_on_delete(self)` - No description\n- `is_checked(self)` - No description\n- `get_text(self)` - No description\n- `is_blank(self)` - No description\n- `set_checked(self, state)` - No description\n- `set_text(self, text)` - No description\n**Classes:**\n- `DynamicListField` - Single row consisting of checkbox + editable text + delete button.\n  - `DynamicListField.__init__(self, parent, preset_label, editable, checked)` - Initialize the object.\n  - `DynamicListField.on_text_changed(self)` - Called when user types in the text field.\n  - `DynamicListField.on_checkbox_toggled(self)` - Called when user clicks the checkbox.\n  - `DynamicListField.on_editing_finished(self)` - Notify parent container that text editing has finished (for duplicate validation).\n  - `DynamicListField._on_delete(self)` - No description\n  - `DynamicListField.is_checked(self)` - No description\n  - `DynamicListField.get_text(self)` - No description\n  - `DynamicListField.is_blank(self)` - No description\n  - `DynamicListField.set_checked(self, state)` - No description\n  - `DynamicListField.set_text(self, text)` - No description\n\n### ui/widgets/period_row_widget.py\n**Functions:**\n- `__init__(self, parent, period_name, period_data)` - Initialize the object.\n- `setup_functionality(self)` - Setup the widget functionality and connect signals.\n- `load_period_data(self)` - Load period data into the widget.\n- `load_days(self, days)` - Load day selections.\n- `on_select_all_days_toggled(self, checked)` - Handle 'Select All Days' checkbox toggle.\n- `on_individual_day_toggled(self, checked)` - Handle individual day checkbox toggle.\n- `get_period_data(self)` - Get the current period data from the widget.\n- `get_selected_days(self)` - Get the currently selected days.\n- `request_delete(self)` - Request deletion of this period row.\n- `set_period_name(self, name)` - Set the period name.\n- `get_period_name(self)` - Get the current period name.\n- `is_valid(self)` - Check if the period data is valid.\n- `set_read_only(self, read_only)` - Set the widget to read-only mode.\n- `_set_read_only__time_inputs(self, read_only)` - Set time input widgets to read-only mode.\n- `_set_read_only__checkbox_states(self, read_only)` - Set checkbox states based on read-only mode and period type.\n- `_set_read_only__all_period_read_only(self)` - Set ALL period to read-only with all days selected.\n- `_set_read_only__normal_checkbox_states(self, read_only)` - Set normal checkbox states for non-ALL periods.\n- `_get_day_checkboxes(self)` - Get list of day checkboxes.\n- `_set_read_only__delete_button_visibility(self, read_only)` - Set delete button visibility based on read-only state.\n- `_set_read_only__visual_styling(self, read_only)` - Apply visual styling for read-only state.\n- `_set_read_only__apply_read_only_styling(self)` - Apply read-only visual styling.\n- `_set_read_only__clear_read_only_styling(self)` - Clear read-only visual styling.\n- `_set_read_only__force_style_updates(self)` - Force style updates for all checkboxes.\n**Classes:**\n- `PeriodRowWidget` - Reusable widget for editing time periods with days selection.\n  - `PeriodRowWidget.__init__(self, parent, period_name, period_data)` - Initialize the object.\n  - `PeriodRowWidget.setup_functionality(self)` - Setup the widget functionality and connect signals.\n  - `PeriodRowWidget.load_period_data(self)` - Load period data into the widget.\n  - `PeriodRowWidget.load_days(self, days)` - Load day selections.\n  - `PeriodRowWidget.on_select_all_days_toggled(self, checked)` - Handle 'Select All Days' checkbox toggle.\n  - `PeriodRowWidget.on_individual_day_toggled(self, checked)` - Handle individual day checkbox toggle.\n  - `PeriodRowWidget.get_period_data(self)` - Get the current period data from the widget.\n  - `PeriodRowWidget.get_selected_days(self)` - Get the currently selected days.\n  - `PeriodRowWidget.request_delete(self)` - Request deletion of this period row.\n  - `PeriodRowWidget.set_period_name(self, name)` - Set the period name.\n  - `PeriodRowWidget.get_period_name(self)` - Get the current period name.\n  - `PeriodRowWidget.is_valid(self)` - Check if the period data is valid.\n  - `PeriodRowWidget.set_read_only(self, read_only)` - Set the widget to read-only mode.\n  - `PeriodRowWidget._set_read_only__time_inputs(self, read_only)` - Set time input widgets to read-only mode.\n  - `PeriodRowWidget._set_read_only__checkbox_states(self, read_only)` - Set checkbox states based on read-only mode and period type.\n  - `PeriodRowWidget._set_read_only__all_period_read_only(self)` - Set ALL period to read-only with all days selected.\n  - `PeriodRowWidget._set_read_only__normal_checkbox_states(self, read_only)` - Set normal checkbox states for non-ALL periods.\n  - `PeriodRowWidget._get_day_checkboxes(self)` - Get list of day checkboxes.\n  - `PeriodRowWidget._set_read_only__delete_button_visibility(self, read_only)` - Set delete button visibility based on read-only state.\n  - `PeriodRowWidget._set_read_only__visual_styling(self, read_only)` - Apply visual styling for read-only state.\n  - `PeriodRowWidget._set_read_only__apply_read_only_styling(self)` - Apply read-only visual styling.\n  - `PeriodRowWidget._set_read_only__clear_read_only_styling(self)` - Clear read-only visual styling.\n  - `PeriodRowWidget._set_read_only__force_style_updates(self)` - Force style updates for all checkboxes.\n\n### ui/widgets/tag_widget.py\n**Functions:**\n- `__init__(self, parent, user_id, mode, selected_tags, title)` - Initialize the tag widget.\n\nArgs:\n    parent: Parent widget\n    user_id: User ID for loading/saving tags\n    mode: \"management\" for full CRUD operations, \"selection\" for checkbox selection\n    selected_tags: List of currently selected tags (for selection mode)\n    title: Title for the group box\n- `setup_ui(self)` - Setup the UI components based on mode.\n- `setup_connections(self)` - Setup signal connections.\n- `load_tags(self)` - Load the user's tags.\n- `refresh_tag_list(self)` - Refresh the tag list display.\n- `update_button_states(self)` - Update button enabled states based on selection (management mode only).\n- `on_tag_selection_changed(self, item)` - Handle when a tag checkbox is changed (selection mode only).\n- `add_tag(self)` - Add a new tag.\n- `edit_tag(self)` - Edit the selected tag (management mode only).\n- `delete_tag(self)` - Delete the selected tag (management mode only).\n- `get_available_tags(self)` - Get the current list of available tags.\n- `get_selected_tags(self)` - Get the currently selected tags (selection mode only).\n- `set_selected_tags(self, tags)` - Set the selected tags (selection mode only).\n- `refresh_tags(self)` - Refresh the tags in the tag widget.\n- `undo_last_tag_delete(self)` - Undo the last tag deletion (account creation mode only).\n**Classes:**\n- `TagWidget` - Flexible tag widget that can work in management or selection mode.\n  - `TagWidget.__init__(self, parent, user_id, mode, selected_tags, title)` - Initialize the tag widget.\n\nArgs:\n    parent: Parent widget\n    user_id: User ID for loading/saving tags\n    mode: \"management\" for full CRUD operations, \"selection\" for checkbox selection\n    selected_tags: List of currently selected tags (for selection mode)\n    title: Title for the group box\n  - `TagWidget.setup_ui(self)` - Setup the UI components based on mode.\n  - `TagWidget.setup_connections(self)` - Setup signal connections.\n  - `TagWidget.load_tags(self)` - Load the user's tags.\n  - `TagWidget.refresh_tag_list(self)` - Refresh the tag list display.\n  - `TagWidget.update_button_states(self)` - Update button enabled states based on selection (management mode only).\n  - `TagWidget.on_tag_selection_changed(self, item)` - Handle when a tag checkbox is changed (selection mode only).\n  - `TagWidget.add_tag(self)` - Add a new tag.\n  - `TagWidget.edit_tag(self)` - Edit the selected tag (management mode only).\n  - `TagWidget.delete_tag(self)` - Delete the selected tag (management mode only).\n  - `TagWidget.get_available_tags(self)` - Get the current list of available tags.\n  - `TagWidget.get_selected_tags(self)` - Get the currently selected tags (selection mode only).\n  - `TagWidget.set_selected_tags(self, tags)` - Set the selected tags (selection mode only).\n  - `TagWidget.refresh_tags(self)` - Refresh the tags in the tag widget.\n  - `TagWidget.undo_last_tag_delete(self)` - Undo the last tag deletion (account creation mode only).\n\n### ui/widgets/task_settings_widget.py\n**Functions:**\n- `__init__(self, parent, user_id)` - Initialize the object.\n- `setup_connections(self)` - Setup signal connections.\n- `load_existing_data(self)` - No description\n- `showEvent(self, event)` - Handle widget show event.\n\nCalled when the widget becomes visible. Currently just calls the parent\nimplementation but can be extended for initialization that needs to happen\nwhen the widget is shown.\n\nArgs:\n    event: The show event object\n- `find_lowest_available_period_number(self)` - Find the lowest available integer (2+) that's not currently used in period names.\n- `add_new_period(self, checked, period_name, period_data)` - Add a new time period using the PeriodRowWidget.\n- `remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n- `undo_last_period_delete(self)` - Undo the last time period deletion.\n- `get_task_settings(self)` - Get the current task settings.\n- `set_task_settings(self, settings)` - Set the task settings.\n- `get_statistics(self)` - Get real task statistics for the user.\n- `get_available_tags(self)` - Get the current list of available tags from the tag widget.\n- `refresh_tags(self)` - Refresh the tags in the tag widget.\n- `undo_last_tag_delete(self)` - Undo the last tag deletion (account creation mode only).\n- `get_recurring_task_settings(self)` - Get the current recurring task settings.\n- `set_recurring_task_settings(self, settings)` - Set the recurring task settings.\n- `load_recurring_task_settings(self)` - Load recurring task settings from user preferences.\n- `save_recurring_task_settings(self)` - Save recurring task settings to user preferences.\n**Classes:**\n- `TaskSettingsWidget` - No description\n  - `TaskSettingsWidget.__init__(self, parent, user_id)` - Initialize the object.\n  - `TaskSettingsWidget.setup_connections(self)` - Setup signal connections.\n  - `TaskSettingsWidget.load_existing_data(self)` - No description\n  - `TaskSettingsWidget.showEvent(self, event)` - Handle widget show event.\n\nCalled when the widget becomes visible. Currently just calls the parent\nimplementation but can be extended for initialization that needs to happen\nwhen the widget is shown.\n\nArgs:\n    event: The show event object\n  - `TaskSettingsWidget.find_lowest_available_period_number(self)` - Find the lowest available integer (2+) that's not currently used in period names.\n  - `TaskSettingsWidget.add_new_period(self, checked, period_name, period_data)` - Add a new time period using the PeriodRowWidget.\n  - `TaskSettingsWidget.remove_period_row(self, row_widget)` - Remove a period row and store it for undo.\n  - `TaskSettingsWidget.undo_last_period_delete(self)` - Undo the last time period deletion.\n  - `TaskSettingsWidget.get_task_settings(self)` - Get the current task settings.\n  - `TaskSettingsWidget.set_task_settings(self, settings)` - Set the task settings.\n  - `TaskSettingsWidget.get_statistics(self)` - Get real task statistics for the user.\n  - `TaskSettingsWidget.get_available_tags(self)` - Get the current list of available tags from the tag widget.\n  - `TaskSettingsWidget.refresh_tags(self)` - Refresh the tags in the tag widget.\n  - `TaskSettingsWidget.undo_last_tag_delete(self)` - Undo the last tag deletion (account creation mode only).\n  - `TaskSettingsWidget.get_recurring_task_settings(self)` - Get the current recurring task settings.\n  - `TaskSettingsWidget.set_recurring_task_settings(self, settings)` - Set the recurring task settings.\n  - `TaskSettingsWidget.load_recurring_task_settings(self)` - Load recurring task settings from user preferences.\n  - `TaskSettingsWidget.save_recurring_task_settings(self)` - Save recurring task settings to user preferences.\n\n### ui/widgets/user_profile_settings_widget.py\n**Functions:**\n- `__init__(self, parent, user_id, existing_data)` - Initialize the object.\n- `populate_timezones(self)` - Populate the timezone combo box with options and enable selection.\n- `load_existing_data(self)` - Load existing personalization data into the form.\n- `set_checkbox_group(self, group_name, values)` - Set checkboxes for a specific group based on values.\n- `get_personalization_data(self)` - Get all personalization data from the form, preserving existing data structure.\n- `_get_personalization_data__extract_basic_fields(self, data)` - Extract basic text fields from the UI.\n- `_get_personalization_data__extract_gender_identity(self, data)` - Extract gender identity from checkboxes and custom input.\n- `_get_personalization_data__extract_date_of_birth(self, data)` - Extract date of birth from calendar widget with proper validation.\n- `_get_personalization_data__extract_dynamic_containers(self, data)` - Extract data from all dynamic list containers.\n- `_get_personalization_data__extract_loved_ones(self, data)` - Extract loved ones data from text field with structured parsing.\n- `_get_personalization_data__extract_notes(self, data)` - Extract notes for AI from text field.\n- `_get_personalization_data__ensure_required_fields(self, data)` - Ensure all required fields exist in the data structure.\n- `get_settings(self)` - Get the current user profile settings.\n- `set_settings(self, settings)` - Set the user profile settings.\n**Classes:**\n- `UserProfileSettingsWidget` - Widget for user profile settings configuration.\n  - `UserProfileSettingsWidget.__init__(self, parent, user_id, existing_data)` - Initialize the object.\n  - `UserProfileSettingsWidget.populate_timezones(self)` - Populate the timezone combo box with options and enable selection.\n  - `UserProfileSettingsWidget.load_existing_data(self)` - Load existing personalization data into the form.\n  - `UserProfileSettingsWidget.set_checkbox_group(self, group_name, values)` - Set checkboxes for a specific group based on values.\n  - `UserProfileSettingsWidget.get_personalization_data(self)` - Get all personalization data from the form, preserving existing data structure.\n  - `UserProfileSettingsWidget._get_personalization_data__extract_basic_fields(self, data)` - Extract basic text fields from the UI.\n  - `UserProfileSettingsWidget._get_personalization_data__extract_gender_identity(self, data)` - Extract gender identity from checkboxes and custom input.\n  - `UserProfileSettingsWidget._get_personalization_data__extract_date_of_birth(self, data)` - Extract date of birth from calendar widget with proper validation.\n  - `UserProfileSettingsWidget._get_personalization_data__extract_dynamic_containers(self, data)` - Extract data from all dynamic list containers.\n  - `UserProfileSettingsWidget._get_personalization_data__extract_loved_ones(self, data)` - Extract loved ones data from text field with structured parsing.\n  - `UserProfileSettingsWidget._get_personalization_data__extract_notes(self, data)` - Extract notes for AI from text field.\n  - `UserProfileSettingsWidget._get_personalization_data__ensure_required_fields(self, data)` - Ensure all required fields exist in the data structure.\n  - `UserProfileSettingsWidget.get_settings(self)` - Get the current user profile settings.\n  - `UserProfileSettingsWidget.set_settings(self, settings)` - Set the user profile settings.\n\n### user/context_manager.py\n**Functions:**\n- `__init__(self)` - Initialize the UserContextManager.\n\nSets up conversation history storage for tracking user interactions.\n- `get_current_user_context(self, include_conversation_history)` - Get context for the currently logged-in user using the existing UserContext singleton.\n\nArgs:\n    include_conversation_history: Whether to include recent conversation history\n    \nReturns:\n    Dict containing all relevant user context for current user\n- `get_ai_context(self, user_id, include_conversation_history)` - Get comprehensive user context for AI conversation.\n\nArgs:\n    user_id: The user's ID\n    include_conversation_history: Whether to include recent conversation history\n    \nReturns:\n    Dict containing all relevant user context for AI processing\n- `_get_user_profile(self, user_id)` - Get basic user profile information using existing user infrastructure.\n- `_get_recent_activity(self, user_id)` - Get recent user activity and responses.\n- `_get_conversation_insights(self, user_id)` - Get insights from recent chat interactions.\n- `_get_user_preferences(self, user_id)` - Get user preferences using new structure.\n- `_get_mood_trends(self, user_id)` - Analyze recent mood and energy trends.\n- `_get_conversation_history(self, user_id)` - Get recent conversation history with this user.\n- `add_conversation_exchange(self, user_id, user_message, ai_response)` - Add a conversation exchange to history.\n\nArgs:\n    user_id: The user's ID\n    user_message: The user's message\n    ai_response: The AI's response\n- `_get_minimal_context(self, user_id)` - Fallback minimal context if full context generation fails.\n\nArgs:\n    user_id: The user's ID (can be None for anonymous context)\n    \nReturns:\n    dict: Minimal context with basic information\n- `format_context_for_ai(self, context)` - Format user context into a concise string for AI prompt.\n\nArgs:\n    context: User context dictionary\n    \nReturns:\n    str: Formatted context string for AI consumption\n**Classes:**\n- `UserContextManager` - Manages rich user context for AI conversations.\n  - `UserContextManager.__init__(self)` - Initialize the UserContextManager.\n\nSets up conversation history storage for tracking user interactions.\n  - `UserContextManager.get_current_user_context(self, include_conversation_history)` - Get context for the currently logged-in user using the existing UserContext singleton.\n\nArgs:\n    include_conversation_history: Whether to include recent conversation history\n    \nReturns:\n    Dict containing all relevant user context for current user\n  - `UserContextManager.get_ai_context(self, user_id, include_conversation_history)` - Get comprehensive user context for AI conversation.\n\nArgs:\n    user_id: The user's ID\n    include_conversation_history: Whether to include recent conversation history\n    \nReturns:\n    Dict containing all relevant user context for AI processing\n  - `UserContextManager._get_user_profile(self, user_id)` - Get basic user profile information using existing user infrastructure.\n  - `UserContextManager._get_recent_activity(self, user_id)` - Get recent user activity and responses.\n  - `UserContextManager._get_conversation_insights(self, user_id)` - Get insights from recent chat interactions.\n  - `UserContextManager._get_user_preferences(self, user_id)` - Get user preferences using new structure.\n  - `UserContextManager._get_mood_trends(self, user_id)` - Analyze recent mood and energy trends.\n  - `UserContextManager._get_conversation_history(self, user_id)` - Get recent conversation history with this user.\n  - `UserContextManager.add_conversation_exchange(self, user_id, user_message, ai_response)` - Add a conversation exchange to history.\n\nArgs:\n    user_id: The user's ID\n    user_message: The user's message\n    ai_response: The AI's response\n  - `UserContextManager._get_minimal_context(self, user_id)` - Fallback minimal context if full context generation fails.\n\nArgs:\n    user_id: The user's ID (can be None for anonymous context)\n    \nReturns:\n    dict: Minimal context with basic information\n  - `UserContextManager.format_context_for_ai(self, context)` - Format user context into a concise string for AI prompt.\n\nArgs:\n    context: User context dictionary\n    \nReturns:\n    str: Formatted context string for AI consumption\n\n### user/user_context.py\n**Functions:**\n- `__new__(cls)` - Create a new instance.\n- `load_user_data(self, user_id)` - Loads user data using the new user management functions.\n\nArgs:\n    user_id (str): The user ID whose data needs to be loaded.\n- `save_user_data(self, user_id)` - Saves user data using the new user management functions.\n\nArgs:\n    user_id (str): The user ID whose data needs to be saved.\n- `set_user_id(self, user_id)` - Sets the user_id in the user_data dictionary.\n\nArgs:\n    user_id (str): The user ID to be set.\n- `get_user_id(self)` - Retrieves the user_id from the user_data dictionary.\n\nReturns:\n    str: The current user ID, or None if not set.\n- `set_internal_username(self, internal_username)` - Sets the internal_username in the user_data dictionary.\n\nArgs:\n    internal_username (str): The internal username to be set.\n- `get_internal_username(self)` - Retrieves the internal_username from the user_data dictionary.\n\nReturns:\n    str: The current internal username, or None if not set.\n- `set_preferred_name(self, preferred_name)` - Sets the preferred_name in the user_data dictionary.\n\nArgs:\n    preferred_name (str): The preferred name to be set.\n- `get_preferred_name(self)` - Retrieves the preferred_name from the user_data dictionary.\n\nReturns:\n    str: The current preferred name, or None if not set.\n- `set_preference(self, key, value)` - Sets a user preference using UserPreferences.\n\nArgs:\n    key (str): The preference key to be set.\n    value (any): The preference value to be set.\n- `get_preference(self, key)` - Retrieves a user preference using UserPreferences.\n\nArgs:\n    key (str): The preference key to retrieve.\n\nReturns:\n    any: The current preference value, or None if not set.\n- `update_preference(self, key, value)` - Updates a user preference using UserPreferences.\n\nArgs:\n    key (str): The preference key to be updated.\n    value (any): The preference value to be set.\n- `get_instance_context(self)` - Get basic user context from the current UserContext instance.\n\nReturns:\n    dict: Dictionary containing basic user context information\n**Classes:**\n- `UserContext` - No description\n  - `UserContext.__new__(cls)` - Create a new instance.\n  - `UserContext.load_user_data(self, user_id)` - Loads user data using the new user management functions.\n\nArgs:\n    user_id (str): The user ID whose data needs to be loaded.\n  - `UserContext.save_user_data(self, user_id)` - Saves user data using the new user management functions.\n\nArgs:\n    user_id (str): The user ID whose data needs to be saved.\n  - `UserContext.set_user_id(self, user_id)` - Sets the user_id in the user_data dictionary.\n\nArgs:\n    user_id (str): The user ID to be set.\n  - `UserContext.get_user_id(self)` - Retrieves the user_id from the user_data dictionary.\n\nReturns:\n    str: The current user ID, or None if not set.\n  - `UserContext.set_internal_username(self, internal_username)` - Sets the internal_username in the user_data dictionary.\n\nArgs:\n    internal_username (str): The internal username to be set.\n  - `UserContext.get_internal_username(self)` - Retrieves the internal_username from the user_data dictionary.\n\nReturns:\n    str: The current internal username, or None if not set.\n  - `UserContext.set_preferred_name(self, preferred_name)` - Sets the preferred_name in the user_data dictionary.\n\nArgs:\n    preferred_name (str): The preferred name to be set.\n  - `UserContext.get_preferred_name(self)` - Retrieves the preferred_name from the user_data dictionary.\n\nReturns:\n    str: The current preferred name, or None if not set.\n  - `UserContext.set_preference(self, key, value)` - Sets a user preference using UserPreferences.\n\nArgs:\n    key (str): The preference key to be set.\n    value (any): The preference value to be set.\n  - `UserContext.get_preference(self, key)` - Retrieves a user preference using UserPreferences.\n\nArgs:\n    key (str): The preference key to retrieve.\n\nReturns:\n    any: The current preference value, or None if not set.\n  - `UserContext.update_preference(self, key, value)` - Updates a user preference using UserPreferences.\n\nArgs:\n    key (str): The preference key to be updated.\n    value (any): The preference value to be set.\n  - `UserContext.get_instance_context(self)` - Get basic user context from the current UserContext instance.\n\nReturns:\n    dict: Dictionary containing basic user context information\n\n### user/user_preferences.py\n**Functions:**\n- `__init__(self, user_id)` - Initialize UserPreferences for a specific user.\n\nArgs:\n    user_id: The user's unique identifier\n- `load_preferences(self)` - Load user preferences using the new user management functions.\n- `save_preferences(self)` - Save user preferences using the new user management functions.\n- `set_preference(self, key, value)` - Set a preference and save it.\n- `get_preference(self, key)` - Get a preference value.\n- `update_preference(self, key, value)` - Update a preference (alias for set_preference for consistency).\n- `remove_preference(self, key)` - Remove a preference.\n- `get_all_preferences(self)` - Get all preferences.\n- `set_schedule_period_active(user_id, category, period_name, is_active)` - Wrapper for :func:`core.schedule_management.set_schedule_period_active`.\n- `is_schedule_period_active(user_id, category, period_name)` - Wrapper for :func:`core.schedule_management.is_schedule_period_active`.\n**Classes:**\n- `UserPreferences` - Manages user preferences and settings.\n\nProvides methods for loading, saving, and managing user preferences\nincluding schedule period settings and general user preferences.\n  - `UserPreferences.__init__(self, user_id)` - Initialize UserPreferences for a specific user.\n\nArgs:\n    user_id: The user's unique identifier\n  - `UserPreferences.load_preferences(self)` - Load user preferences using the new user management functions.\n  - `UserPreferences.save_preferences(self)` - Save user preferences using the new user management functions.\n  - `UserPreferences.set_preference(self, key, value)` - Set a preference and save it.\n  - `UserPreferences.get_preference(self, key)` - Get a preference value.\n  - `UserPreferences.update_preference(self, key, value)` - Update a preference (alias for set_preference for consistency).\n  - `UserPreferences.remove_preference(self, key)` - Remove a preference.\n  - `UserPreferences.get_all_preferences(self)` - Get all preferences.\n  - `UserPreferences.set_schedule_period_active(user_id, category, period_name, is_active)` - Wrapper for :func:`core.schedule_management.set_schedule_period_active`.\n  - `UserPreferences.is_schedule_period_active(user_id, category, period_name)` - Wrapper for :func:`core.schedule_management.is_schedule_period_active`.\n",
      "error": ""
    },
    "audit_module_dependencies": {
      "success": true,
      "output": "[SCAN] Scanning all Python files for imports...\n[DOC] Parsing MODULE_DEPENDENCIES_DETAIL.md...\n\n================================================================================\nMODULE DEPENDENCIES AUDIT REPORT\n================================================================================\n\n[STATS] OVERALL STATISTICS:\n   Files scanned: 139\n   Total imports found: 1789\n   Dependencies documented: 139\n   Standard library imports: 566\n   Third-party imports: 413\n   Local imports: 810\n\n[ENHANCEMENT] Manual Enhancement Status:\n   Modules with manual enhancements: 139\n\n[DIR] BREAKDOWN BY DIRECTORY:\n   core/: 21 files, 379 imports, 208 local deps\n   root/: 2 files, 10 imports, 1 local deps\n   tasks/: 1 files, 16 imports, 10 local deps\n   tests/: 71 files, 1032 imports, 410 local deps\n   ui/: 41 files, 325 imports, 163 local deps\n   user/: 3 files, 27 imports, 18 local deps\n\n================================================================================\nENHANCED MODULE ANALYSIS REPORT\n================================================================================\n\n#### `core/auto_cleanup.py`\n- **Complexity**: LOW\n- **Dependencies**: 6\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/backup_manager.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/checkin_analytics.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/checkin_dynamic_manager.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/config.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/error_handling.py`\n- **Complexity**: HIGH\n- **Dependencies**: 19\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `core/file_operations.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/logger.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/message_management.py`\n- **Complexity**: LOW\n- **Dependencies**: 8\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/response_tracking.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/schedule_management.py`\n- **Complexity**: LOW\n- **Dependencies**: 8\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/schedule_utilities.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/scheduler.py`\n- **Complexity**: HIGH\n- **Dependencies**: 19\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `core/schemas.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/service.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 13\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Review core dependency usage, Verify if this module is still needed\n\n#### `core/service_utilities.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/ui_management.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/user_data_handlers.py`\n- **Complexity**: HIGH\n- **Dependencies**: 31\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `core/user_data_manager.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 13\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Review core dependency usage, Verify if this module is still needed\n\n#### `core/user_data_validation.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 10\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `core/user_management.py`\n- **Complexity**: HIGH\n- **Dependencies**: 42\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `run_mhm.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `run_tests.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `tasks/task_management.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 10\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `tests/behavior/test_account_management_real_behavior.py`\n- **Complexity**: HIGH\n- **Dependencies**: 35\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage\n\n#### `tests/behavior/test_ai_chatbot_behavior.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 10\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_ai_context_builder_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_ai_context_builder_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_ai_conversation_history_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_auto_cleanup_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_backup_manager_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_checkin_analytics_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_command_parser_coverage_expansion_phase3_simple.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_communication_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_communication_command_parser_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_communication_factory_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_communication_interaction_manager_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_communication_manager_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_config_coverage_expansion_phase3_simple.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_conversation_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_core_message_management_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_core_service_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_discord_bot_behavior.py`\n- **Complexity**: HIGH\n- **Dependencies**: 19\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules\n\n#### `tests/behavior/test_dynamic_checkin_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_email_bot_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_enhanced_command_parser_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_error_handling_coverage_expansion_phase3_final.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_interaction_handlers_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 8\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_interaction_handlers_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_logger_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_logger_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_logger_coverage_expansion_phase3_simple.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_message_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_observability_logging.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_response_tracking_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_schedule_management_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_scheduler_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_scheduler_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_service_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_service_utilities_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 6\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_static_logging_check.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_task_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_task_management_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_ui_app_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/behavior/test_user_context_behavior.py`\n- **Complexity**: LOW\n- **Dependencies**: 7\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/behavior/test_user_management_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/behavior/test_utilities_demo.py`\n- **Complexity**: HIGH\n- **Dependencies**: 23\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage\n\n#### `tests/conftest.py`\n- **Complexity**: HIGH\n- **Dependencies**: 28\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage\n\n#### `tests/debug_file_paths.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/integration/test_account_lifecycle.py`\n- **Complexity**: HIGH\n- **Dependencies**: 65\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage\n\n#### `tests/integration/test_account_management.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 13\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/integration/test_user_creation.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 11\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/test_utilities.py`\n- **Complexity**: HIGH\n- **Dependencies**: 23\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage\n\n#### `tests/ui/test_account_creation_ui.py`\n- **Complexity**: HIGH\n- **Dependencies**: 25\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage\n\n#### `tests/ui/test_channel_management_dialog_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/ui/test_dialog_behavior.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 11\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/ui/test_dialog_coverage_expansion.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/ui/test_dialogs.py`\n- **Complexity**: LOW\n- **Dependencies**: 7\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/ui/test_ui_widgets_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/ui/test_user_profile_dialog_coverage_expansion.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/ui/test_widget_behavior.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 12\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/ui/test_widget_behavior_simple.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n\n#### `tests/unit/test_cleanup.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/unit/test_config.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/unit/test_error_handling.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/unit/test_file_operations.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/unit/test_logging_components.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/unit/test_no_direct_env_mutation_policy.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/unit/test_no_prints_policy.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/unit/test_recurring_tasks.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/unit/test_schedule_management.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `tests/unit/test_user_data_loader_idempotency.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/unit/test_user_data_loader_order_insensitivity.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/unit/test_user_management.py`\n- **Complexity**: LOW\n- **Dependencies**: 6\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n\n#### `tests/unit/test_validation.py`\n- **Complexity**: LOW\n- **Dependencies**: 1\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n\n#### `ui/dialogs/account_creator_dialog.py`\n- **Complexity**: HIGH\n- **Dependencies**: 21\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `ui/dialogs/admin_panel.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/category_management_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 7\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/channel_management_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/checkin_management_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 8\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/schedule_editor_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 7\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/task_completion_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/task_crud_dialog.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 13\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/task_edit_dialog.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/task_management_dialog.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/dialogs/user_profile_dialog.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/account_creator_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/admin_panel_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/category_management_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/category_selection_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/channel_management_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/channel_selection_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/checkin_element_template_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/checkin_management_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/checkin_settings_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/dynamic_list_field_template_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/period_row_template_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/schedule_editor_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/tag_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/task_completion_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/task_crud_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/task_edit_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/task_management_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/task_settings_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/user_profile_management_dialog_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/generated/user_profile_settings_widget_pyqt.py`\n- **Complexity**: LOW\n- **Dependencies**: 0\n- **Used by**: 0 modules\n- **Key Insights**: Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/ui_app_qt.py`\n- **Complexity**: HIGH\n- **Dependencies**: 31\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Consider breaking down into smaller modules, Review core dependency usage, Verify if this module is still needed\n\n#### `ui/widgets/category_selection_widget.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/channel_selection_widget.py`\n- **Complexity**: LOW\n- **Dependencies**: 3\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/checkin_settings_widget.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 11\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/dynamic_list_container.py`\n- **Complexity**: LOW\n- **Dependencies**: 2\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/dynamic_list_field.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/period_row_widget.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/tag_widget.py`\n- **Complexity**: LOW\n- **Dependencies**: 5\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/task_settings_widget.py`\n- **Complexity**: MEDIUM\n- **Dependencies**: 9\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `ui/widgets/user_profile_settings_widget.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: User interface dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `user/context_manager.py`\n- **Complexity**: LOW\n- **Dependencies**: 8\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `user/user_context.py`\n- **Complexity**: LOW\n- **Dependencies**: 6\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n#### `user/user_preferences.py`\n- **Complexity**: LOW\n- **Dependencies**: 4\n- **Used by**: 0 modules\n- **Key Insights**: Heavy core system dependencies, Not imported by other modules\n- **Recommendations**: Verify if this module is still needed\n\n[DOC] GENERATING UPDATED DEPENDENCY SECTIONS...\n\n================================================================================\nUPDATED DEPENDENCY SECTIONS TO ADD:\n================================================================================\n\n#### `core/auto_cleanup.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger, core.logger, core.message_management, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `core/backup_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.error_handling, core.logger, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `core/checkin_analytics.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.response_tracking\n- **Used by**: [Add usage information]\n\n#### `core/checkin_dynamic_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.file_operations, core.logger\n- **Used by**: [Add usage information]\n\n#### `core/config.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `core/error_handling.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.logger, core.service_utilities\n- **Used by**: [Add usage information]\n\n#### `core/file_operations.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger, core.message_management, core.user_data_manager\n- **Used by**: [Add usage information]\n\n#### `core/logger.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config\n- **Used by**: [Add usage information]\n\n#### `core/message_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_operations, core.logger, core.schemas, core.user_data_manager, core.user_data_manager, core.user_data_manager\n- **Used by**: [Add usage information]\n\n#### `core/response_tracking.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_operations, core.logger, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `core/schedule_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.service_utilities, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, user.user_context\n- **Used by**: [Add usage information]\n\n#### `core/schedule_utilities.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger\n- **Used by**: [Add usage information]\n\n#### `core/scheduler.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.logger, core.logger, core.schedule_management, core.schedule_management, core.scheduler, core.scheduler, core.scheduler, core.service_utilities, core.user_data_handlers, core.user_data_handlers, core.user_management, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, user.user_context\n- **Used by**: [Add usage information]\n\n#### `core/schemas.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.message_management\n- **Used by**: [Add usage information]\n\n#### `core/service.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.auto_cleanup, core.config, core.config, core.config, core.config, core.error_handling, core.file_operations, core.logger, core.logger, core.scheduler, core.user_data_handlers, core.user_data_handlers, core.user_management\n- **Used by**: [Add usage information]\n\n#### `core/service_utilities.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.error_handling, core.logger\n- **Used by**: [Add usage information]\n\n#### `core/ui_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, ui.widgets.period_row_widget, ui.widgets.period_row_widget\n- **Used by**: [Add usage information]\n\n#### `core/user_data_handlers.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config, core.config, core.config, core.config, core.config, core.config, core.error_handling, core.file_operations, core.file_operations, core.logger, core.message_management, core.schemas, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_validation, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management\n- **Used by**: [Add usage information]\n\n#### `core/user_data_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_operations, core.logger, core.message_management, core.response_tracking, core.response_tracking, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_management, core.user_management\n- **Used by**: [Add usage information]\n\n#### `core/user_data_validation.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.logger, core.message_management, core.schemas, core.schemas, core.schemas, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `core/user_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config, core.config, core.config, core.config, core.error_handling, core.file_operations, core.logger, core.message_management, core.schemas, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_validation\n- **Used by**: [Add usage information]\n\n#### `run_mhm.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling\n- **Used by**: [Add usage information]\n\n#### `tasks/task_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.error_handling, core.file_operations, core.logger, core.service, core.service, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_account_management_real_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.file_operations, core.message_management, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tasks.task_management, tests.conftest, tests.conftest, tests.conftest, tests.conftest, tests.conftest, tests.conftest, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_ai_chatbot_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.response_tracking, core.user_data_handlers, core.user_data_handlers, core.user_management, tests.conftest, tests.test_utilities, tests.test_utilities, tests.test_utilities, user.context_manager\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_ai_context_builder_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_ai_context_builder_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_ai_conversation_history_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_auto_cleanup_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.auto_cleanup\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_backup_manager_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.backup_manager, core.config, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_checkin_analytics_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.checkin_analytics\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_communication_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_communication_command_parser_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_communication_factory_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_communication_interaction_manager_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_communication_manager_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_config_coverage_expansion_phase3_simple.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_conversation_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, core.user_management, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_core_message_management_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.message_management\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_core_service_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.service\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_discord_bot_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.user_data_handlers, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tasks.task_management, tasks.task_management, tasks.task_management, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_dynamic_checkin_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.checkin_dynamic_manager\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_error_handling_coverage_expansion_phase3_final.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_interaction_handlers_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, core.user_management, core.user_management, core.user_management, tasks.task_management, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_interaction_handlers_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, tasks.task_management, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_logger_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.logger\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_logger_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_logger_coverage_expansion_phase3_simple.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_message_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.message_management\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_observability_logging.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_response_tracking_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.response_tracking, core.response_tracking, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_schedule_management_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.schedule_management, core.schedule_management, core.schedule_management, core.schedule_management\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_scheduler_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.scheduler, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_scheduler_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.scheduler, core.user_data_handlers, core.user_data_handlers, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_service_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.service\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_service_utilities_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.service_utilities, core.service_utilities, core.user_data_validation, tests.conftest, tests.conftest, tests.conftest\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_task_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_task_management_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_ui_app_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: ui.ui_app_qt\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_user_context_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.schedule_utilities, core.user_management, core.user_management, tests.test_utilities, user.context_manager, user.user_context, user.user_preferences\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_user_management_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_management, core.user_management, core.user_management, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/behavior/test_utilities_demo.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/conftest.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config, core.config, core.config, core.config, core.config, core.config, core.logger, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/debug_file_paths.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n#### `tests/integration/test_account_lifecycle.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_data_manager, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tests.conftest, tests.conftest, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/integration/test_account_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_data_validation, core.user_management, tests.conftest, tests.conftest, tests.test_utilities, user.user_context\n- **Used by**: [Add usage information]\n\n#### `tests/integration/test_user_creation.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, core.user_data_validation, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tests.test_utilities, tests.test_utilities, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/test_utilities.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.config, core.config, core.config, core.file_operations, core.user_data_handlers, core.user_data_handlers, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, core.user_management, tests.conftest\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_account_creation_ui.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_data_validation, core.user_management, tests.conftest, tests.conftest, tests.conftest, tests.test_utilities, tests.test_utilities, tests.test_utilities, ui.dialogs.account_creator_dialog, ui.widgets.category_selection_widget, ui.widgets.channel_selection_widget, ui.widgets.checkin_settings_widget, ui.widgets.task_settings_widget\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_channel_management_dialog_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, core.user_data_validation, ui.dialogs.channel_management_dialog\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_dialog_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_data_handlers, ui.dialogs.category_management_dialog, ui.dialogs.channel_management_dialog, ui.dialogs.checkin_management_dialog, ui.dialogs.schedule_editor_dialog, ui.dialogs.task_completion_dialog, ui.dialogs.task_crud_dialog, ui.dialogs.task_edit_dialog, ui.dialogs.task_management_dialog, ui.dialogs.user_profile_dialog\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_dialog_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.schedule_management, core.user_data_handlers, tests.test_utilities, ui.dialogs.schedule_editor_dialog, ui.dialogs.task_completion_dialog, ui.dialogs.task_crud_dialog, ui.dialogs.task_edit_dialog, ui.dialogs.user_profile_dialog\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_dialogs.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_handlers, core.user_data_handlers, tests.conftest, tests.conftest, tests.conftest, ui.dialogs.account_creator_dialog, ui.dialogs.user_profile_dialog\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_ui_widgets_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: ui.widgets.dynamic_list_container, ui.widgets.period_row_widget, ui.widgets.tag_widget\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_user_profile_dialog_coverage_expansion.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tests.test_utilities, ui.dialogs.user_profile_dialog\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_widget_behavior.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.file_operations, core.user_data_handlers, tests.test_utilities, ui.widgets.category_selection_widget, ui.widgets.channel_selection_widget, ui.widgets.checkin_settings_widget, ui.widgets.dynamic_list_container, ui.widgets.dynamic_list_field, ui.widgets.period_row_widget, ui.widgets.tag_widget, ui.widgets.task_settings_widget, ui.widgets.user_profile_settings_widget\n- **Used by**: [Add usage information]\n\n#### `tests/ui/test_widget_behavior_simple.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: ui.widgets.category_selection_widget, ui.widgets.channel_selection_widget, ui.widgets.checkin_settings_widget, ui.widgets.dynamic_list_container, ui.widgets.dynamic_list_field, ui.widgets.tag_widget, ui.widgets.tag_widget, ui.widgets.task_settings_widget, ui.widgets.user_profile_settings_widget\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_cleanup.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.logger\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_config.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_error_handling.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_file_operations.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.config, core.error_handling, core.file_operations, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_logging_components.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.logger\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_recurring_tasks.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: tasks.task_management\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_schedule_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.schedule_management\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_user_management.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.config, core.user_data_handlers, core.user_management, core.user_management, tests.test_utilities, tests.test_utilities\n- **Used by**: [Add usage information]\n\n#### `tests/unit/test_validation.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_data_validation\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/account_creator_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.file_operations, core.file_operations, core.logger, core.message_management, core.service, core.user_data_manager, core.user_data_validation, core.user_data_validation, core.user_data_validation, core.user_management, tasks.task_management, tasks.task_management, ui.dialogs.user_profile_dialog, ui.dialogs.user_profile_dialog, ui.generated.account_creator_dialog_pyqt, ui.widgets.category_selection_widget, ui.widgets.channel_selection_widget, ui.widgets.checkin_settings_widget, ui.widgets.task_settings_widget, user.user_context\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/category_management_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.user_data_handlers, core.user_data_handlers, ui.generated.category_management_dialog_pyqt, ui.widgets.category_selection_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/channel_management_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_data_handlers, core.user_data_validation, ui.generated.channel_management_dialog_pyqt, ui.widgets.channel_selection_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/checkin_management_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.user_data_handlers, core.user_data_handlers, core.user_data_validation, ui.generated.checkin_management_dialog_pyqt, ui.widgets.checkin_settings_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/schedule_editor_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.ui_management, core.user_data_validation, ui.generated.schedule_editor_dialog_pyqt, ui.widgets.period_row_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/task_completion_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, ui.generated.task_completion_dialog_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/task_crud_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, tasks.task_management, ui.dialogs.task_completion_dialog, ui.dialogs.task_edit_dialog, ui.dialogs.task_edit_dialog, ui.generated.task_crud_dialog_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/task_edit_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, tasks.task_management, ui.generated.task_edit_dialog_pyqt, ui.widgets.tag_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/task_management_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.user_data_handlers, core.user_data_handlers, core.user_data_validation, tasks.task_management, ui.generated.task_management_dialog_pyqt, ui.widgets.task_settings_widget\n- **Used by**: [Add usage information]\n\n#### `ui/dialogs/user_profile_dialog.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.user_data_handlers, core.user_data_validation, core.user_management, ui.generated.user_profile_management_dialog_pyqt, ui.generated.user_profile_settings_widget_pyqt, ui.widgets.dynamic_list_container, ui.widgets.user_profile_settings_widget\n- **Used by**: [Add usage information]\n\n#### `ui/ui_app_qt.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.auto_cleanup, core.auto_cleanup, core.config, core.config, core.config, core.config, core.config, core.config, core.error_handling, core.logger, core.logger, core.scheduler, core.scheduler, core.scheduler, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_handlers, core.user_data_manager, core.user_data_manager, core.user_data_validation, ui.dialogs.account_creator_dialog, ui.dialogs.category_management_dialog, ui.dialogs.channel_management_dialog, ui.dialogs.checkin_management_dialog, ui.dialogs.schedule_editor_dialog, ui.dialogs.task_crud_dialog, ui.dialogs.task_management_dialog, ui.dialogs.user_profile_dialog, ui.generated.admin_panel_pyqt, user.user_context\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/category_selection_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_data_validation, ui.generated.category_selection_widget_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/channel_selection_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_management, ui.generated.channel_selection_widget_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/checkin_settings_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.checkin_dynamic_manager, core.checkin_dynamic_manager, core.checkin_dynamic_manager, core.error_handling, core.logger, core.schedule_management, core.ui_management, core.user_data_handlers, core.user_data_handlers, ui.generated.checkin_settings_widget_pyqt, ui.widgets.period_row_widget\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/dynamic_list_container.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.user_management, ui.widgets.dynamic_list_field\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/dynamic_list_field.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: ui.generated.dynamic_list_field_template_pyqt, ui.widgets.dynamic_list_container, ui.widgets.dynamic_list_container, ui.widgets.dynamic_list_container\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/period_row_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, ui.generated.period_row_template_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/tag_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.user_data_handlers, tasks.task_management, ui.generated.tag_widget_pyqt\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/task_settings_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.ui_management, core.user_data_handlers, tasks.task_management, ui.generated.task_settings_widget_pyqt, ui.widgets.period_row_widget, ui.widgets.tag_widget\n- **Used by**: [Add usage information]\n\n#### `ui/widgets/user_profile_settings_widget.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.logger, core.user_management, ui.generated.user_profile_settings_widget_pyqt, ui.widgets.dynamic_list_container\n- **Used by**: [Add usage information]\n\n#### `user/context_manager.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.message_management, core.response_tracking, core.schedule_utilities, core.user_data_handlers, user.user_context, user.user_preferences\n- **Used by**: [Add usage information]\n\n#### `user/user_context.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_utilities, core.user_data_handlers, core.user_data_handlers, user.user_preferences\n- **Used by**: [Add usage information]\n\n#### `user/user_preferences.py`\n- **Purpose**: [Add purpose description]\n- **Dependencies**: core.error_handling, core.logger, core.schedule_management, core.user_data_handlers\n- **Used by**: [Add usage information]\n\n[CIRC] CIRCULAR DEPENDENCY ANALYSIS:\n   [OK] No circular dependencies detected\n",
      "error": ""
    },
    "analyze_documentation": {
      "success": true,
      "output": "[DOC] Analyzing documentation files...\n\n[STATS] DOCUMENTATION ANALYSIS REPORT\n============================================================\n\n[FILES] Files Found: 8\n   - ARCHITECTURE.md\n   - DEVELOPMENT_WORKFLOW.md\n   - DOCUMENTATION_GUIDE.md\n   - HOW_TO_RUN.md\n   - QUICK_REFERENCE.md\n   - TODO.md\n   - development_docs/FUNCTION_REGISTRY_DETAIL.md\n   - development_docs/MODULE_DEPENDENCIES_DETAIL.md\n\n[INFO] FILE PURPOSES & CONTENT:\n\n[FILE] ARCHITECTURE.md\n   Length: 8,105 characters\n   Sections: 15\n   Main sections: Introduction, ? Quick Reference, **Key Modules Decision Tree**, **Data Flow Patterns**, **Critical Files (Don't Break)**\n\n[FILE] DEVELOPMENT_WORKFLOW.md\n   Length: 9,587 characters\n   Sections: 40\n   Main sections: Introduction, ? Quick Reference, **Essential Commands**, **Development Decision Tree**, ?? Safety First\n\n[FILE] DOCUMENTATION_GUIDE.md\n   Length: 11,040 characters\n   Sections: 24\n   Main sections: Introduction, ? Quick Reference, **Document Selection Decision Tree**, **Documentation Categories**, ? Documentation Summary Table\n\n[FILE] HOW_TO_RUN.md\n   Length: 4,586 characters\n   Sections: 23\n   Main sections: Introduction, ? Quick Start (Recommended), Step 1: Set up Virtual Environment, Step 2: Install Dependencies, Step 3: Configure Environment (Optional)\n\n[FILE] QUICK_REFERENCE.md\n   Length: 6,100 characters\n   Sections: 31\n   Main sections: Introduction, ? Essential Commands, Running the App, Testing, Development\n\n[FILE] TODO.md\n   Length: 34,324 characters\n   Sections: 11\n   Main sections: Introduction, ? How to Add New TODOs, Test Data Cleanup Standards (Optional but Recommended), High Priority, Medium Priority\n\n[FILE] development_docs/FUNCTION_REGISTRY_DETAIL.md\n   Length: 654,839 characters\n   Sections: 17\n   Main sections: Introduction, ? **Overview**, **Function Documentation Coverage: 94.8% ?? NEEDS ATTENTION**, ? **Function Categories**, **Core System Functions** (404)\n\n[FILE] development_docs/MODULE_DEPENDENCIES_DETAIL.md\n   Length: 216,506 characters\n   Sections: 11\n   Main sections: Introduction, ? **Overview**, **Module Dependencies Coverage: 100.0% ? COMPLETED**, ? **Import Statistics**, ? **Module Dependencies by Directory**\n\n[DIR] COMMON TOPICS ACROSS FILES:\n\n   Setup Installation:\n      - ARCHITECTURE.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - development_docs/FUNCTION_REGISTRY_DETAIL.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - TODO.md\n      - development_docs/MODULE_DEPENDENCIES_DETAIL.md\n\n   Development Workflow:\n      - ARCHITECTURE.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - development_docs/FUNCTION_REGISTRY_DETAIL.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - TODO.md\n      - development_docs/MODULE_DEPENDENCIES_DETAIL.md\n\n   Testing:\n      - ARCHITECTURE.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - development_docs/FUNCTION_REGISTRY_DETAIL.md\n      - QUICK_REFERENCE.md\n      - TODO.md\n      - development_docs/MODULE_DEPENDENCIES_DETAIL.md\n\n   Ui Migration:\n      - ARCHITECTURE.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - development_docs/FUNCTION_REGISTRY_DETAIL.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - TODO.md\n      - development_docs/MODULE_DEPENDENCIES_DETAIL.md\n\n   Architecture:\n      - ARCHITECTURE.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - development_docs/FUNCTION_REGISTRY_DETAIL.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - TODO.md\n      - development_docs/MODULE_DEPENDENCIES_DETAIL.md\n\n   Troubleshooting:\n      - ARCHITECTURE.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - development_docs/FUNCTION_REGISTRY_DETAIL.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - TODO.md\n      - development_docs/MODULE_DEPENDENCIES_DETAIL.md\n\n   Code Quality:\n      - ARCHITECTURE.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - development_docs/FUNCTION_REGISTRY_DETAIL.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - TODO.md\n      - development_docs/MODULE_DEPENDENCIES_DETAIL.md\n\n   Project Structure:\n      - ARCHITECTURE.md\n      - DEVELOPMENT_WORKFLOW.md\n      - DOCUMENTATION_GUIDE.md\n      - development_docs/FUNCTION_REGISTRY_DETAIL.md\n      - HOW_TO_RUN.md\n      - QUICK_REFERENCE.md\n      - TODO.md\n      - development_docs/MODULE_DEPENDENCIES_DETAIL.md\n\n[IDEA] CONSOLIDATION RECOMMENDATIONS:\n\n   [WORKFLOW] Workflow Files (3 files):\n      - DEVELOPMENT_WORKFLOW.md\n      - development_docs/FUNCTION_REGISTRY_DETAIL.md\n      - development_docs/MODULE_DEPENDENCIES_DETAIL.md\n      -> Consolidate into single 'DEVELOPMENT.md'\n\n[REDUNDANT] REDUNDANT INFORMATION:\n   Sections appearing in multiple files:\n      - Introduction\n      - Testing\n      - `root/` - Root Files\n      - `tasks/` - Task Management\n      - `tests/` - Test Files\n      - `ui/` - User Interface Components\n      - `user/` - User Data and Context\n      - ? **Overview**\n      - ? Quick Reference\n\n[STRUCTURE] RECOMMENDED NEW STRUCTURE:\n   [FILE] README.md - Project overview and quick start\n   [FILE] SETUP.md - Installation and setup instructions\n   [FILE] DEVELOPMENT.md - Development workflow and guidelines\n   [FILE] ARCHITECTURE.md - System architecture and design\n   [FILE] API.md - Function registry and module dependencies\n   [FILE] CHANGELOG.md - Version history and changes\n   [FILE] TODO.md - Current priorities and planned work\n",
      "error": ""
    }
  }
}