LEGACY COMPATIBILITY CODE SEARCH REPORT
================================================================================
Generated: 2025-08-17 03:48:51
Files scanned: 35
Total matches: 515

‚ö†Ô∏è  LEGACY COMPATIBILITY CODE FOUND:

SUMMARY BY CATEGORY:
----------------------------------------
Backward Compatibility: 78 matches
Legacy Compatibility Comments: 70 matches
Legacy Warnings: 67 matches
Removal Plans: 58 matches
Legacy Data Structures: 52 matches
Legacy Methods: 48 matches
Legacy Format Handling: 40 matches
Legacy Validation: 25 matches
Legacy Tests: 16 matches
Legacy Imports: 15 matches
Legacy Comments: 13 matches
Legacy Attributes: 9 matches
Legacy Shims: 8 matches
Legacy Wrappers: 7 matches
Deprecated Functions: 5 matches
Legacy Documentation: 4 matches

DETAILED FINDINGS BY FILE:
================================================================================

üìÅ .\ai_tools\generate_module_dependencies.py
----------------------------------------------

  Legacy Format Handling:
    Line 628: # Format: "module_name.py" (legacy format)
           # Format: "module_name.py" (legacy format)
    Line 628: # Format: "module_name.py" (legacy format)
           # Format: "module_name.py" (legacy format)
    Line 730: # Format: "module_name.py" (legacy format)
           # Format: "module_name.py" (legacy format)
    Line 730: # Format: "module_name.py" (legacy format)
           # Format: "module_name.py" (legacy format)

üìÅ .\bot\ai_chatbot.py
-----------------------

  Legacy Data Structures:
    Line 28: # Legacy import removed - using get_user_data() instead
           # Legacy import removed - using get_user_data() instead

  Legacy Imports:
    Line 28: # Legacy import removed - using get_user_data() instead
           # Legacy import removed - using get_user_data() instead

  Backward Compatibility:
    Line 435: """Legacy fallback method for backwards compatibility."""
           """Legacy fallback method for backwards compatibility."""
    Line 435: """Legacy fallback method for backwards compatibility."""
           """Legacy fallback method for backwards compatibility."""
    Line 435: """Legacy fallback method for backwards compatibility."""
           """Legacy fallback method for backwards compatibility."""

  Legacy Methods:
    Line 435: """Legacy fallback method for backwards compatibility."""
           """Legacy fallback method for backwards compatibility."""

üìÅ .\bot\communication_manager.py
----------------------------------

  Legacy Compatibility Comments:
    Line 1230: # Legacy compatibility methods
           # Legacy compatibility methods
    Line 1230: # Legacy compatibility methods
           # Legacy compatibility methods

  Legacy Methods:
    Line 1230: # Legacy compatibility methods
           # Legacy compatibility methods

üìÅ .\bot\conversation_manager.py
---------------------------------

  Legacy Validation:
    Line 28: store_checkin_response as _legacy_store_checkin_response,
           store_checkin_response as _legacy_store_checkin_response,
    Line 28: store_checkin_response as _legacy_store_checkin_response,
           store_checkin_response as _legacy_store_checkin_response,
    Line 31: # LEGACY COMPATIBILITY: expose store_checkin_response for tests that patch it
           # LEGACY COMPATIBILITY: expose store_checkin_response for tests that patch it
    Line 32: store_checkin_response = _legacy_store_checkin_response
           store_checkin_response = _legacy_store_checkin_response
    Line 32: store_checkin_response = _legacy_store_checkin_response
           store_checkin_response = _legacy_store_checkin_response
    Line 443: # Store the check-in data (legacy alias retained for tests)
           # Store the check-in data (legacy alias retained for tests)

  Legacy Compatibility Comments:
    Line 31: # LEGACY COMPATIBILITY: expose store_checkin_response for tests that patch it
           # LEGACY COMPATIBILITY: expose store_checkin_response for tests that patch it
    Line 31: # LEGACY COMPATIBILITY: expose store_checkin_response for tests that patch it
           # LEGACY COMPATIBILITY: expose store_checkin_response for tests that patch it
    Line 44: # LEGACY COMPATIBILITY: Old constant name used in tests and modules
           # LEGACY COMPATIBILITY: Old constant name used in tests and modules
    Line 44: # LEGACY COMPATIBILITY: Old constant name used in tests and modules
           # LEGACY COMPATIBILITY: Old constant name used in tests and modules

  Legacy Tests:
    Line 31: # LEGACY COMPATIBILITY: expose store_checkin_response for tests that patch it
           # LEGACY COMPATIBILITY: expose store_checkin_response for tests that patch it
    Line 44: # LEGACY COMPATIBILITY: Old constant name used in tests and modules
           # LEGACY COMPATIBILITY: Old constant name used in tests and modules
    Line 443: # Store the check-in data (legacy alias retained for tests)
           # Store the check-in data (legacy alias retained for tests)
    Line 444: # Use exposed legacy-compatible function name so tests can patch it
           # Use exposed legacy-compatible function name so tests can patch it

  Removal Plans:
    Line 45: # TODO: Remove after all references updated
           # TODO: Remove after all references updated
    Line 46: # REMOVAL PLAN:
           # REMOVAL PLAN:
    Line 46: # REMOVAL PLAN:
           # REMOVAL PLAN:

  Legacy Data Structures:
    Line 443: # Store the check-in data (legacy alias retained for tests)
           # Store the check-in data (legacy alias retained for tests)

  Legacy Methods:
    Line 444: # Use exposed legacy-compatible function name so tests can patch it
           # Use exposed legacy-compatible function name so tests can patch it

üìÅ .\bot\discord_bot.py
------------------------

  Backward Compatibility:
    Line 417: # Backward compatibility: just message
           # Backward compatibility: just message
    Line 993: # Legacy methods for backward compatibility
           # Legacy methods for backward compatibility
    Line 993: # Legacy methods for backward compatibility
           # Legacy methods for backward compatibility
    Line 1039: Legacy method for backward compatibility.
           Legacy method for backward compatibility.
    Line 1039: Legacy method for backward compatibility.
           Legacy method for backward compatibility.

  Legacy Methods:
    Line 993: # Legacy methods for backward compatibility
           # Legacy methods for backward compatibility
    Line 997: Legacy start method.
           Legacy start method.
    Line 1010: Legacy stop method - thread-safe.
           Legacy stop method - thread-safe.
    Line 1039: Legacy method for backward compatibility.
           Legacy method for backward compatibility.

üìÅ .\bot\email_bot.py
----------------------

  Backward Compatibility:
    Line 182: # Legacy methods for backward compatibility
           # Legacy methods for backward compatibility
    Line 182: # Legacy methods for backward compatibility
           # Legacy methods for backward compatibility
    Line 212: Legacy method for backward compatibility.
           Legacy method for backward compatibility.
    Line 212: Legacy method for backward compatibility.
           Legacy method for backward compatibility.

  Legacy Methods:
    Line 182: # Legacy methods for backward compatibility
           # Legacy methods for backward compatibility
    Line 186: Legacy start method.
           Legacy start method.
    Line 199: Legacy stop method.
           Legacy stop method.
    Line 212: Legacy method for backward compatibility.
           Legacy method for backward compatibility.

üìÅ .\core\config.py
--------------------

  Legacy Compatibility Comments:
    Line 124: # LEGACY COMPATIBILITY: LOG_FILE_PATH env is deprecated. We now always derive
           # LEGACY COMPATIBILITY: LOG_FILE_PATH env is deprecated. We now always derive
    Line 124: # LEGACY COMPATIBILITY: LOG_FILE_PATH env is deprecated. We now always derive
           # LEGACY COMPATIBILITY: LOG_FILE_PATH env is deprecated. We now always derive
    Line 535: """LEGACY COMPATIBILITY: kept for tests; always raises to indicate removal.
           """LEGACY COMPATIBILITY: kept for tests; always raises to indicate removal.
    Line 535: """LEGACY COMPATIBILITY: kept for tests; always raises to indicate removal.
           """LEGACY COMPATIBILITY: kept for tests; always raises to indicate removal.

  Backward Compatibility:
    Line 533: # Legacy validation functions (kept for backward compatibility)
           # Legacy validation functions (kept for backward compatibility)
    Line 533: # Legacy validation functions (kept for backward compatibility)
           # Legacy validation functions (kept for backward compatibility)
    Line 533: # Legacy validation functions (kept for backward compatibility)
           # Legacy validation functions (kept for backward compatibility)

  Legacy Validation:
    Line 533: # Legacy validation functions (kept for backward compatibility)
           # Legacy validation functions (kept for backward compatibility)

  Legacy Methods:
    Line 533: # Legacy validation functions (kept for backward compatibility)
           # Legacy validation functions (kept for backward compatibility)

  Legacy Tests:
    Line 535: """LEGACY COMPATIBILITY: kept for tests; always raises to indicate removal.
           """LEGACY COMPATIBILITY: kept for tests; always raises to indicate removal.

  Removal Plans:
    Line 537: REMOVAL PLAN:
           REMOVAL PLAN:
    Line 537: REMOVAL PLAN:
           REMOVAL PLAN:

üìÅ .\core\file_operations.py
-----------------------------

  Legacy Data Structures:
    Line 132: # Try legacy structure
           # Try legacy structure

  Legacy Validation:
    Line 261: # Fallback to checking settings (legacy approach)
           # Fallback to checking settings (legacy approach)

üìÅ .\core\logger.py
--------------------

  Legacy Imports:
    Line 30: # Legacy support - these will be imported from config when available
           # Legacy support - these will be imported from config when available

üìÅ .\core\message_management.py
--------------------------------

  Backward Compatibility:
    Line 24: message_logger = logger  # Alias for backward compatibility
           message_logger = logger  # Alias for backward compatibility
    Line 24: message_logger = logger  # Alias for backward compatibility
           message_logger = logger  # Alias for backward compatibility

üìÅ .\core\response_tracking.py
-------------------------------

  Legacy Compatibility Comments:
    Line 26: # LEGACY COMPATIBILITY: Backward-compatible aliases for renamed functions
           # LEGACY COMPATIBILITY: Backward-compatible aliases for renamed functions
    Line 26: # LEGACY COMPATIBILITY: Backward-compatible aliases for renamed functions
           # LEGACY COMPATIBILITY: Backward-compatible aliases for renamed functions
    Line 35: logger.warning("LEGACY COMPATIBILITY: get_recent_checkins() called; use get_recent_checkins() instead")
           logger.warning("LEGACY COMPATIBILITY: get_recent_checkins() called; use get_recent_checkins() instea...
    Line 40: logger.warning("LEGACY COMPATIBILITY: store_checkin_response() called; use store_checkin_response() instead")
           logger.warning("LEGACY COMPATIBILITY: store_checkin_response() called; use store_checkin_response() ...

  Legacy Methods:
    Line 26: # LEGACY COMPATIBILITY: Backward-compatible aliases for renamed functions
           # LEGACY COMPATIBILITY: Backward-compatible aliases for renamed functions

  Removal Plans:
    Line 27: # TODO: Remove after tests and codebase have been migrated to new names
           # TODO: Remove after tests and codebase have been migrated to new names
    Line 28: # REMOVAL PLAN:
           # REMOVAL PLAN:
    Line 28: # REMOVAL PLAN:
           # REMOVAL PLAN:

  Legacy Validation:
    Line 33: @handle_errors("legacy get_recent_checkins", default_return=[])
           @handle_errors("legacy get_recent_checkins", default_return=[])
    Line 35: logger.warning("LEGACY COMPATIBILITY: get_recent_checkins() called; use get_recent_checkins() instead")
           logger.warning("LEGACY COMPATIBILITY: get_recent_checkins() called; use get_recent_checkins() instea...
    Line 38: @handle_errors("legacy store_checkin_response")
           @handle_errors("legacy store_checkin_response")
    Line 40: logger.warning("LEGACY COMPATIBILITY: store_checkin_response() called; use store_checkin_response() instead")
           logger.warning("LEGACY COMPATIBILITY: store_checkin_response() called; use store_checkin_response() ...
    Line 215: elif category == "checkin":  # LEGACY category name used by some tests
           elif category == "checkin":  # LEGACY category name used by some tests

  Legacy Warnings:
    Line 35: logger.warning("LEGACY COMPATIBILITY: get_recent_checkins() called; use get_recent_checkins() instead")
           logger.warning("LEGACY COMPATIBILITY: get_recent_checkins() called; use get_recent_checkins() instea...
    Line 35: logger.warning("LEGACY COMPATIBILITY: get_recent_checkins() called; use get_recent_checkins() instead")
           logger.warning("LEGACY COMPATIBILITY: get_recent_checkins() called; use get_recent_checkins() instea...
    Line 40: logger.warning("LEGACY COMPATIBILITY: store_checkin_response() called; use store_checkin_response() instead")
           logger.warning("LEGACY COMPATIBILITY: store_checkin_response() called; use store_checkin_response() ...
    Line 40: logger.warning("LEGACY COMPATIBILITY: store_checkin_response() called; use store_checkin_response() instead")
           logger.warning("LEGACY COMPATIBILITY: store_checkin_response() called; use store_checkin_response() ...

  Legacy Tests:
    Line 215: elif category == "checkin":  # LEGACY category name used by some tests
           elif category == "checkin":  # LEGACY category name used by some tests

üìÅ .\core\schedule_management.py
---------------------------------

  Legacy Format Handling:
    Line 471: # All data now uses periods wrapper format - no legacy migration needed
           # All data now uses periods wrapper format - no legacy migration needed
    Line 471: # All data now uses periods wrapper format - no legacy migration needed
           # All data now uses periods wrapper format - no legacy migration needed

  Legacy Data Structures:
    Line 471: # All data now uses periods wrapper format - no legacy migration needed
           # All data now uses periods wrapper format - no legacy migration needed

üìÅ .\core\scheduler.py
-----------------------

  Backward Compatibility:
    Line 898: Legacy function for backward compatibility.
           Legacy function for backward compatibility.
    Line 898: Legacy function for backward compatibility.
           Legacy function for backward compatibility.

  Legacy Methods:
    Line 898: Legacy function for backward compatibility.
           Legacy function for backward compatibility.

üìÅ .\core\schemas.py
---------------------

  Legacy Format Handling:
    Line 86: # Accept any non-empty string; tests and legacy data may use username#discriminator format
           # Accept any non-empty string; tests and legacy data may use username#discriminator format

  Legacy Data Structures:
    Line 86: # Accept any non-empty string; tests and legacy data may use username#discriminator format
           # Accept any non-empty string; tests and legacy data may use username#discriminator format
    Line 180: def _accept_legacy_shape(cls, data: Any):
           def _accept_legacy_shape(cls, data: Any):

  Legacy Tests:
    Line 86: # Accept any non-empty string; tests and legacy data may use username#discriminator format
           # Accept any non-empty string; tests and legacy data may use username#discriminator format

  Backward Compatibility:
    Line 127: # If invalid, keep as-is for backward compatibility (tests may set placeholders)
           # If invalid, keep as-is for backward compatibility (tests may set placeholders)
    Line 127: # If invalid, keep as-is for backward compatibility (tests may set placeholders)
           # If invalid, keep as-is for backward compatibility (tests may set placeholders)

  Legacy Methods:
    Line 180: def _accept_legacy_shape(cls, data: Any):
           def _accept_legacy_shape(cls, data: Any):

üìÅ .\core\service.py
---------------------

  Backward Compatibility:
    Line 19: main_logger = logger  # Alias for backward compatibility
           main_logger = logger  # Alias for backward compatibility
    Line 19: main_logger = logger  # Alias for backward compatibility
           main_logger = logger  # Alias for backward compatibility

üìÅ .\core\user_data_handlers.py
--------------------------------

  Legacy Compatibility Comments:
    Line 264: # LEGACY COMPATIBILITY: Preserve legacy account fields
           # LEGACY COMPATIBILITY: Preserve legacy account fields
    Line 264: # LEGACY COMPATIBILITY: Preserve legacy account fields
           # LEGACY COMPATIBILITY: Preserve legacy account fields
    Line 277: "LEGACY COMPATIBILITY: 'account.channel' was provided and preserved. Move channel to preferences.channel."
           "LEGACY COMPATIBILITY: 'account.channel' was provided and preserved. Move channel to preferences.cha...
    Line 285: "LEGACY COMPATIBILITY: 'account.enabled_features' was provided and preserved. Use account.features subkeys instead."
           "LEGACY COMPATIBILITY: 'account.enabled_features' was provided and preserved. Use account.features s...
    Line 295: # LEGACY COMPATIBILITY: Detect nested 'enabled' flags in preferences and warn.
           # LEGACY COMPATIBILITY: Detect nested 'enabled' flags in preferences and warn.
    Line 295: # LEGACY COMPATIBILITY: Detect nested 'enabled' flags in preferences and warn.
           # LEGACY COMPATIBILITY: Detect nested 'enabled' flags in preferences and warn.
    Line 309: "LEGACY COMPATIBILITY: Found nested 'enabled' flags under preferences. "
           "LEGACY COMPATIBILITY: Found nested 'enabled' flags under preferences. "
    Line 331: "LEGACY COMPATIBILITY: Removed preferences.task_settings because tasks are disabled "
           "LEGACY COMPATIBILITY: Removed preferences.task_settings because tasks are disabled "
    Line 346: "LEGACY COMPATIBILITY: Removed preferences.checkin_settings because checkins are disabled "
           "LEGACY COMPATIBILITY: Removed preferences.checkin_settings because checkins are disabled "

  Removal Plans:
    Line 265: # TODO: Remove after callers no longer write 'channel' or 'enabled_features' into account.json
           # TODO: Remove after callers no longer write 'channel' or 'enabled_features' into account.json
    Line 266: # REMOVAL PLAN:
           # REMOVAL PLAN:
    Line 266: # REMOVAL PLAN:
           # REMOVAL PLAN:
    Line 296: # TODO: Remove after all callers stop writing nested enabled flags
           # TODO: Remove after all callers stop writing nested enabled flags
    Line 297: # REMOVAL PLAN:
           # REMOVAL PLAN:
    Line 297: # REMOVAL PLAN:
           # REMOVAL PLAN:

  Legacy Warnings:
    Line 267: # 1. Log warnings whenever legacy fields are used (below)
           # 1. Log warnings whenever legacy fields are used (below)

  Backward Compatibility:
    Line 271: # This block preserves backward compatibility only.
           # This block preserves backward compatibility only.

  Legacy Validation:
    Line 346: "LEGACY COMPATIBILITY: Removed preferences.checkin_settings because checkins are disabled "
           "LEGACY COMPATIBILITY: Removed preferences.checkin_settings because checkins are disabled "

  Legacy Imports:
    Line 459: outside modules decoupled from the legacy path.
           outside modules decoupled from the legacy path.

üìÅ .\core\user_data_validation.py
----------------------------------

  Backward Compatibility:
    Line 77: # This function is kept for backward compatibility but delegates to Pydantic
           # This function is kept for backward compatibility but delegates to Pydantic
    Line 77: # This function is kept for backward compatibility but delegates to Pydantic
           # This function is kept for backward compatibility but delegates to Pydantic
    Line 77: # This function is kept for backward compatibility but delegates to Pydantic
           # This function is kept for backward compatibility but delegates to Pydantic
    Line 81: # This maintains backward compatibility with the old validation approach
           # This maintains backward compatibility with the old validation approach
    Line 106: # This function is kept for backward compatibility but delegates to Pydantic
           # This function is kept for backward compatibility but delegates to Pydantic
    Line 106: # This function is kept for backward compatibility but delegates to Pydantic
           # This function is kept for backward compatibility but delegates to Pydantic
    Line 106: # This function is kept for backward compatibility but delegates to Pydantic
           # This function is kept for backward compatibility but delegates to Pydantic
    Line 142: # This function is kept for backward compatibility but delegates to Pydantic
           # This function is kept for backward compatibility but delegates to Pydantic
    Line 142: # This function is kept for backward compatibility but delegates to Pydantic
           # This function is kept for backward compatibility but delegates to Pydantic
    Line 142: # This function is kept for backward compatibility but delegates to Pydantic
           # This function is kept for backward compatibility but delegates to Pydantic

üìÅ .\core\user_management.py
-----------------------------

  Legacy Format Handling:
    Line 523: def migrate_legacy_schedules_structure(schedules_data: Dict[str, Any]) -> Dict[str, Any]:
           def migrate_legacy_schedules_structure(schedules_data: Dict[str, Any]) -> Dict[str, Any]:
    Line 524: """Migrate legacy schedules structure to new format."""
           """Migrate legacy schedules structure to new format."""
    Line 524: """Migrate legacy schedules structure to new format."""
           """Migrate legacy schedules structure to new format."""
    Line 533: # This is legacy format - convert to new format
           # This is legacy format - convert to new format
    Line 571: # Migrate legacy structure if needed
           # Migrate legacy structure if needed
    Line 574: schedules_data = migrate_legacy_schedules_structure(schedules_data)
           schedules_data = migrate_legacy_schedules_structure(schedules_data)

  Legacy Data Structures:
    Line 523: def migrate_legacy_schedules_structure(schedules_data: Dict[str, Any]) -> Dict[str, Any]:
           def migrate_legacy_schedules_structure(schedules_data: Dict[str, Any]) -> Dict[str, Any]:
    Line 523: def migrate_legacy_schedules_structure(schedules_data: Dict[str, Any]) -> Dict[str, Any]:
           def migrate_legacy_schedules_structure(schedules_data: Dict[str, Any]) -> Dict[str, Any]:
    Line 524: """Migrate legacy schedules structure to new format."""
           """Migrate legacy schedules structure to new format."""
    Line 537: legacy_periods[period_name] = period_data
           legacy_periods[period_name] = period_data
    Line 544: for period_name, period_data in legacy_periods.items():
           for period_name, period_data in legacy_periods.items():
    Line 571: # Migrate legacy structure if needed
           # Migrate legacy structure if needed
    Line 573: logger.info(f"Migrating legacy schedules structure for user {user_id}")
           logger.info(f"Migrating legacy schedules structure for user {user_id}")
    Line 574: schedules_data = migrate_legacy_schedules_structure(schedules_data)
           schedules_data = migrate_legacy_schedules_structure(schedules_data)
    Line 574: schedules_data = migrate_legacy_schedules_structure(schedules_data)
           schedules_data = migrate_legacy_schedules_structure(schedules_data)
    Line 574: schedules_data = migrate_legacy_schedules_structure(schedules_data)
           schedules_data = migrate_legacy_schedules_structure(schedules_data)
    Line 860: @handle_errors("getting user data (legacy)", default_return={})
           @handle_errors("getting user data (legacy)", default_return={})
    Line 864: logger.warning("LEGACY get_user_data call ‚Äì switch to core.user_data_handlers.get_user_data")
           logger.warning("LEGACY get_user_data call ‚Äì switch to core.user_data_handlers.get_user_data")
    Line 872: @handle_errors("saving user data (legacy)", default_return={})
           @handle_errors("saving user data (legacy)", default_return={})
    Line 876: logger.warning("LEGACY save_user_data call ‚Äì switch to core.user_data_handlers.save_user_data")
           logger.warning("LEGACY save_user_data call ‚Äì switch to core.user_data_handlers.save_user_data")
    Line 880: @handle_errors("saving user data txn (legacy)", default_return=False)
           @handle_errors("saving user data txn (legacy)", default_return=False)
    Line 884: logger.warning("LEGACY save_user_data_transaction call ‚Äì switch to core.user_data_handlers.save_user_data_transaction")
           logger.warning("LEGACY save_user_data_transaction call ‚Äì switch to core.user_data_handlers.save_user...
    Line 1230: # LEGACY shim ‚Äì function now lives in core.user_data_validation
           # LEGACY shim ‚Äì function now lives in core.user_data_validation

  Legacy Methods:
    Line 523: def migrate_legacy_schedules_structure(schedules_data: Dict[str, Any]) -> Dict[str, Any]:
           def migrate_legacy_schedules_structure(schedules_data: Dict[str, Any]) -> Dict[str, Any]:
    Line 1230: # LEGACY shim ‚Äì function now lives in core.user_data_validation
           # LEGACY shim ‚Äì function now lives in core.user_data_validation

  Legacy Warnings:
    Line 864: logger.warning("LEGACY get_user_data call ‚Äì switch to core.user_data_handlers.get_user_data")
           logger.warning("LEGACY get_user_data call ‚Äì switch to core.user_data_handlers.get_user_data")
    Line 864: logger.warning("LEGACY get_user_data call ‚Äì switch to core.user_data_handlers.get_user_data")
           logger.warning("LEGACY get_user_data call ‚Äì switch to core.user_data_handlers.get_user_data")
    Line 876: logger.warning("LEGACY save_user_data call ‚Äì switch to core.user_data_handlers.save_user_data")
           logger.warning("LEGACY save_user_data call ‚Äì switch to core.user_data_handlers.save_user_data")
    Line 876: logger.warning("LEGACY save_user_data call ‚Äì switch to core.user_data_handlers.save_user_data")
           logger.warning("LEGACY save_user_data call ‚Äì switch to core.user_data_handlers.save_user_data")
    Line 884: logger.warning("LEGACY save_user_data_transaction call ‚Äì switch to core.user_data_handlers.save_user_data_transaction")
           logger.warning("LEGACY save_user_data_transaction call ‚Äì switch to core.user_data_handlers.save_user...
    Line 884: logger.warning("LEGACY save_user_data_transaction call ‚Äì switch to core.user_data_handlers.save_user_data_transaction")
           logger.warning("LEGACY save_user_data_transaction call ‚Äì switch to core.user_data_handlers.save_user...

  Legacy Shims:
    Line 1230: # LEGACY shim ‚Äì function now lives in core.user_data_validation
           # LEGACY shim ‚Äì function now lives in core.user_data_validation
    Line 1230: # LEGACY shim ‚Äì function now lives in core.user_data_validation
           # LEGACY shim ‚Äì function now lives in core.user_data_validation

  Legacy Validation:
    Line 1230: # LEGACY shim ‚Äì function now lives in core.user_data_validation
           # LEGACY shim ‚Äì function now lives in core.user_data_validation

üìÅ .\core\validation.py
------------------------

  Deprecated Functions:
    Line 1: """Deprecated.  Use core.user_data_validation instead."""
           """Deprecated.  Use core.user_data_validation instead."""

  Backward Compatibility:
    Line 10: from core.user_data_validation import *  # re-export all symbols for backward compatibility
           from core.user_data_validation import *  # re-export all symbols for backward compatibility
    Line 10: from core.user_data_validation import *  # re-export all symbols for backward compatibility
           from core.user_data_validation import *  # re-export all symbols for backward compatibility

üìÅ .\scripts\audit_legacy_channels.py
--------------------------------------

  Legacy Attributes:
    Line 30: 'legacy_attributes': [],
           'legacy_attributes': [],
    Line 46: 'legacy_attributes': [
           'legacy_attributes': [
    Line 47: r'_legacy_channels\b',  # _legacy_channels attribute
           r'_legacy_channels\b',  # _legacy_channels attribute
    Line 48: r'self\._legacy_channels',  # self._legacy_channels access
           r'self\._legacy_channels',  # self._legacy_channels access
    Line 61: r'LEGACY.*channels.*property.*accessed',
           r'LEGACY.*channels.*property.*accessed',
    Line 114: 'legacy_attributes': [],
           'legacy_attributes': [],

  Legacy Methods:
    Line 32: 'legacy_methods': [],
           'legacy_methods': [],
    Line 54: 'legacy_methods': [
           'legacy_methods': [
    Line 55: r'_create_legacy_channel_access\b',  # Legacy method
           r'_create_legacy_channel_access\b',  # Legacy method
    Line 56: r'is_initialized\b',  # Legacy method
           r'is_initialized\b',  # Legacy method
    Line 57: r'start\b',           # Legacy method (context dependent)
           r'start\b',           # Legacy method (context dependent)
    Line 58: r'stop\b',            # Legacy method (context dependent)
           r'stop\b',            # Legacy method (context dependent)
    Line 116: 'legacy_methods': [],
           'legacy_methods': [],
    Line 273: report.append("- Remove any remaining legacy method stubs")
           report.append("- Remove any remaining legacy method stubs")

  Legacy Warnings:
    Line 33: 'legacy_warnings': [],
           'legacy_warnings': [],
    Line 60: 'legacy_warnings': [
           'legacy_warnings': [
    Line 117: 'legacy_warnings': []
           'legacy_warnings': []

  Legacy Wrappers:
    Line 52: r'class LegacyChannelWrapper',  # Class definition
           r'class LegacyChannelWrapper',  # Class definition

  Legacy Validation:
    Line 174: # Check for files that might still reference legacy code
           # Check for files that might still reference legacy code
    Line 185: # Check if file contains any legacy references
           # Check if file contains any legacy references

üìÅ .\scripts\focused_legacy_audit.py
-------------------------------------

  Legacy Wrappers:
    Line 38: 'legacy_wrapper_class': r'LegacyChannelWrapper\b(?!\s*#)',  # LegacyChannelWrapper but not in comments
           'legacy_wrapper_class': r'LegacyChannelWrapper\b(?!\s*#)',  # LegacyChannelWrapper but not in commen...
    Line 38: 'legacy_wrapper_class': r'LegacyChannelWrapper\b(?!\s*#)',  # LegacyChannelWrapper but not in comments
           'legacy_wrapper_class': r'LegacyChannelWrapper\b(?!\s*#)',  # LegacyChannelWrapper but not in commen...

  Legacy Methods:
    Line 39: 'create_legacy_method': r'_create_legacy_channel_access\b(?!\s*#)',  # Legacy method but not in comments
           'create_legacy_method': r'_create_legacy_channel_access\b(?!\s*#)',  # Legacy method but not in comm...

üìÅ .\scripts\migration\migrate_messaging_service.py
----------------------------------------------------

  Legacy Validation:
    Line 185: # Check for legacy field
           # Check for legacy field

üìÅ .\scripts\migration\migrate_schedule_format.py
--------------------------------------------------

  Legacy Format Handling:
    Line 6: 1. Converts legacy flat schedule format to new nested format with 'periods' sub-dict
           1. Converts legacy flat schedule format to new nested format with 'periods' sub-dict
    Line 28: def migrate_legacy_schedules_structure(schedules_data):
           def migrate_legacy_schedules_structure(schedules_data):
    Line 29: """Convert legacy flat schedule structure to new nested format."""
           """Convert legacy flat schedule structure to new nested format."""
    Line 43: # Legacy format - convert to new format
           # Legacy format - convert to new format
    Line 132: # Convert legacy format to new format
           # Convert legacy format to new format
    Line 133: migrated_schedules = migrate_legacy_schedules_structure(schedules)
           migrated_schedules = migrate_legacy_schedules_structure(schedules)

  Legacy Data Structures:
    Line 28: def migrate_legacy_schedules_structure(schedules_data):
           def migrate_legacy_schedules_structure(schedules_data):
    Line 28: def migrate_legacy_schedules_structure(schedules_data):
           def migrate_legacy_schedules_structure(schedules_data):
    Line 29: """Convert legacy flat schedule structure to new nested format."""
           """Convert legacy flat schedule structure to new nested format."""
    Line 133: migrated_schedules = migrate_legacy_schedules_structure(schedules)
           migrated_schedules = migrate_legacy_schedules_structure(schedules)

  Legacy Methods:
    Line 28: def migrate_legacy_schedules_structure(schedules_data):
           def migrate_legacy_schedules_structure(schedules_data):

üìÅ .\scripts\search_legacy_compatibility.py
--------------------------------------------

  Legacy Compatibility Comments:
    Line 3: Legacy Compatibility Code Search Script
           Legacy Compatibility Code Search Script
    Line 5: This script searches through the entire codebase for legacy compatibility code patterns:
           This script searches through the entire codebase for legacy compatibility code patterns:
    Line 6: 1. LEGACY COMPATIBILITY comments and warnings
           1. LEGACY COMPATIBILITY comments and warnings
    Line 39: """Define search patterns for legacy compatibility code"""
           """Define search patterns for legacy compatibility code"""
    Line 42: r'LEGACY COMPATIBILITY',
           r'LEGACY COMPATIBILITY',
    Line 43: r'# LEGACY COMPATIBILITY',
           r'# LEGACY COMPATIBILITY',
    Line 43: r'# LEGACY COMPATIBILITY',
           r'# LEGACY COMPATIBILITY',
    Line 44: r'"""LEGACY COMPATIBILITY',
           r'"""LEGACY COMPATIBILITY',
    Line 44: r'"""LEGACY COMPATIBILITY',
           r'"""LEGACY COMPATIBILITY',
    Line 45: r"'''LEGACY COMPATIBILITY",
           r"'''LEGACY COMPATIBILITY",
    Line 45: r"'''LEGACY COMPATIBILITY",
           r"'''LEGACY COMPATIBILITY",
    Line 172: """Search a single file for legacy compatibility patterns"""
           """Search a single file for legacy compatibility patterns"""
    Line 200: """Search entire directory tree for legacy compatibility code"""
           """Search entire directory tree for legacy compatibility code"""
    Line 201: print(f"Searching for legacy compatibility code in: {os.path.abspath(root_dir)}")
           print(f"Searching for legacy compatibility code in: {os.path.abspath(root_dir)}")
    Line 229: report.append("LEGACY COMPATIBILITY CODE SEARCH REPORT")
           report.append("LEGACY COMPATIBILITY CODE SEARCH REPORT")
    Line 237: report.append("‚úÖ NO LEGACY COMPATIBILITY CODE FOUND!")
           report.append("‚úÖ NO LEGACY COMPATIBILITY CODE FOUND!")
    Line 239: report.append("The codebase appears to be clean of legacy compatibility code.")
           report.append("The codebase appears to be clean of legacy compatibility code.")
    Line 242: report.append("‚ö†Ô∏è  LEGACY COMPATIBILITY CODE FOUND:")
           report.append("‚ö†Ô∏è  LEGACY COMPATIBILITY CODE FOUND:")
    Line 283: report.append("‚úÖ EXCELLENT! No legacy compatibility code found.")
           report.append("‚úÖ EXCELLENT! No legacy compatibility code found.")
    Line 292: report.append("üîß LEGACY COMPATIBILITY COMMENTS:")
           report.append("üîß LEGACY COMPATIBILITY COMMENTS:")
    Line 293: report.append("   - Review each LEGACY COMPATIBILITY comment")
           report.append("   - Review each LEGACY COMPATIBILITY comment")
    Line 343: parser = argparse.ArgumentParser(description="Search codebase for legacy compatibility code")
           parser = argparse.ArgumentParser(description="Search codebase for legacy compatibility code")
    Line 364: print(f"\n‚ö†Ô∏è  Found {searcher.file_count} files with legacy compatibility code")
           print(f"\n‚ö†Ô∏è  Found {searcher.file_count} files with legacy compatibility code")
    Line 367: print(f"\n‚úÖ No legacy compatibility code found in {searcher.file_count} files")
           print(f"\n‚úÖ No legacy compatibility code found in {searcher.file_count} files")

  Legacy Warnings:
    Line 6: 1. LEGACY COMPATIBILITY comments and warnings
           1. LEGACY COMPATIBILITY comments and warnings
    Line 95: 'legacy_warnings': [
           'legacy_warnings': [
    Line 96: r'logger\.warning.*legacy',
           r'logger\.warning.*legacy',
    Line 97: r'warn.*legacy',
           r'warn.*legacy',
    Line 98: r'legacy.*warning',
           r'legacy.*warning',

  Legacy Methods:
    Line 7: 2. Legacy wrapper classes and functions
           2. Legacy wrapper classes and functions
    Line 39: """Define search patterns for legacy compatibility code"""
           """Define search patterns for legacy compatibility code"""
    Line 50: r'def.*legacy.*wrapper',
           r'def.*legacy.*wrapper',
    Line 51: r'def.*wrapper.*legacy',
           r'def.*wrapper.*legacy',
    Line 107: 'legacy_methods': [
           'legacy_methods': [
    Line 108: r'def.*legacy',
           r'def.*legacy',
    Line 109: r'legacy.*method',
           r'legacy.*method',
    Line 110: r'legacy.*function',
           r'legacy.*function',
    Line 300: report.append("   - Identify legacy wrapper classes and functions")
           report.append("   - Identify legacy wrapper classes and functions")

  Backward Compatibility:
    Line 8: 3. Backward compatibility shims
           3. Backward compatibility shims
    Line 59: 'backward_compatibility': [
           'backward_compatibility': [
    Line 60: r'backward.*compatibility',
           r'backward.*compatibility',
    Line 61: r'backwards.*compatibility',
           r'backwards.*compatibility',
    Line 61: r'backwards.*compatibility',
           r'backwards.*compatibility',
    Line 62: r'for.*backward.*compatibility',
           r'for.*backward.*compatibility',
    Line 62: r'for.*backward.*compatibility',
           r'for.*backward.*compatibility',
    Line 63: r'kept.*for.*compatibility',
           r'kept.*for.*compatibility',

  Legacy Format Handling:
    Line 10: 5. Legacy format handling
           5. Legacy format handling
    Line 77: 'legacy_format_handling': [
           'legacy_format_handling': [
    Line 78: r'legacy.*format',
           r'legacy.*format',
    Line 79: r'format.*legacy',
           r'format.*legacy',
    Line 80: r'migrate.*legacy',
           r'migrate.*legacy',
    Line 81: r'legacy.*migration',
           r'legacy.*migration',
    Line 312: if 'legacy_format_handling' in category_totals:
           if 'legacy_format_handling' in category_totals:
    Line 313: report.append("üîß LEGACY FORMAT HANDLING:")
           report.append("üîß LEGACY FORMAT HANDLING:")
    Line 314: report.append("   - Identify legacy data format support")
           report.append("   - Identify legacy data format support")
    Line 316: report.append("   - Remove legacy format conversion code")
           report.append("   - Remove legacy format conversion code")

  Removal Plans:
    Line 11: 6. Removal plans and timelines
           6. Removal plans and timelines
    Line 11: 6. Removal plans and timelines
           6. Removal plans and timelines
    Line 71: 'removal_plans': [
           'removal_plans': [
    Line 72: r'REMOVAL PLAN',
           r'REMOVAL PLAN',
    Line 72: r'REMOVAL PLAN',
           r'REMOVAL PLAN',
    Line 73: r'# TODO: Remove',
           r'# TODO: Remove',
    Line 74: r'# REMOVE:',
           r'# REMOVE:',
    Line 75: r'removal.*plan',
           r'removal.*plan',
    Line 305: if 'removal_plans' in category_totals:
           if 'removal_plans' in category_totals:
    Line 306: report.append("üîß REMOVAL PLANS:")
           report.append("üîß REMOVAL PLANS:")
    Line 306: report.append("üîß REMOVAL PLANS:")
           report.append("üîß REMOVAL PLANS:")
    Line 307: report.append("   - Review removal plans and timelines")
           report.append("   - Review removal plans and timelines")
    Line 307: report.append("   - Review removal plans and timelines")
           report.append("   - Review removal plans and timelines")

  Legacy Wrappers:
    Line 48: r'class.*Legacy.*Wrapper',
           r'class.*Legacy.*Wrapper',
    Line 49: r'class.*Wrapper.*Legacy',
           r'class.*Wrapper.*Legacy',
    Line 50: r'def.*legacy.*wrapper',
           r'def.*legacy.*wrapper',
    Line 51: r'def.*wrapper.*legacy',
           r'def.*wrapper.*legacy',

  Legacy Shims:
    Line 53: 'legacy_shims': [
           'legacy_shims': [
    Line 54: r'# LEGACY SHIM',
           r'# LEGACY SHIM',
    Line 54: r'# LEGACY SHIM',
           r'# LEGACY SHIM',
    Line 55: r'# SHIM:',
           r'# SHIM:',
    Line 56: r'def.*shim',
           r'def.*shim',
    Line 57: r'legacy.*shim',
           r'legacy.*shim',

  Deprecated Functions:
    Line 66: r'@deprecated',
           r'@deprecated',
    Line 67: r'# DEPRECATED',
           r'# DEPRECATED',
    Line 68: r'"""DEPRECATED',
           r'"""DEPRECATED',
    Line 69: r"'''DEPRECATED",
           r"'''DEPRECATED",

  Legacy Data Structures:
    Line 83: 'legacy_data_structures': [
           'legacy_data_structures': [
    Line 83: 'legacy_data_structures': [
           'legacy_data_structures': [
    Line 84: r'legacy.*data',
           r'legacy.*data',
    Line 85: r'data.*legacy',
           r'data.*legacy',
    Line 86: r'legacy.*structure',
           r'legacy.*structure',
    Line 87: r'structure.*legacy',
           r'structure.*legacy',
    Line 314: report.append("   - Identify legacy data format support")
           report.append("   - Identify legacy data format support")

  Legacy Validation:
    Line 89: 'legacy_validation': [
           'legacy_validation': [
    Line 90: r'legacy.*validation',
           r'legacy.*validation',
    Line 91: r'validation.*legacy',
           r'validation.*legacy',
    Line 92: r'legacy.*check',
           r'legacy.*check',
    Line 93: r'check.*legacy',
           r'check.*legacy',

  Legacy Comments:
    Line 101: r'# LEGACY:',
           r'# LEGACY:',
    Line 101: r'# LEGACY:',
           r'# LEGACY:',
    Line 101: r'# LEGACY:',
           r'# LEGACY:',
    Line 102: r'# Legacy:',
           r'# Legacy:',
    Line 102: r'# Legacy:',
           r'# Legacy:',
    Line 102: r'# Legacy:',
           r'# Legacy:',
    Line 103: r'# legacy:',
           r'# legacy:',
    Line 103: r'# legacy:',
           r'# legacy:',
    Line 103: r'# legacy:',
           r'# legacy:',
    Line 104: r'# LEGACY -',
           r'# LEGACY -',
    Line 104: r'# LEGACY -',
           r'# LEGACY -',
    Line 105: r'# Legacy -',
           r'# Legacy -',
    Line 105: r'# Legacy -',
           r'# Legacy -',

  Legacy Attributes:
    Line 112: 'legacy_attributes': [
           'legacy_attributes': [
    Line 114: r'legacy.*attribute',
           r'legacy.*attribute',
    Line 115: r'legacy.*property',
           r'legacy.*property',

  Legacy Imports:
    Line 117: 'legacy_imports': [
           'legacy_imports': [
    Line 118: r'from.*legacy',
           r'from.*legacy',
    Line 119: r'import.*legacy',
           r'import.*legacy',
    Line 120: r'legacy.*import',
           r'legacy.*import',

  Legacy Tests:
    Line 122: 'legacy_tests': [
           'legacy_tests': [
    Line 123: r'test.*legacy',
           r'test.*legacy',
    Line 124: r'legacy.*test',
           r'legacy.*test',
    Line 125: r'# LEGACY TEST',
           r'# LEGACY TEST',
    Line 125: r'# LEGACY TEST',
           r'# LEGACY TEST',
    Line 323: report.append("   4. Update tests after legacy code removal")
           report.append("   4. Update tests after legacy code removal")

  Legacy Documentation:
    Line 127: 'legacy_documentation': [
           'legacy_documentation': [
    Line 128: r'LEGACY.*NOTE',
           r'LEGACY.*NOTE',
    Line 129: r'NOTE.*LEGACY',
           r'NOTE.*LEGACY',
    Line 130: r'legacy.*documentation',
           r'legacy.*documentation',

üìÅ .\scripts\testing\ai\test_data_integrity.py
-----------------------------------------------

  Backward Compatibility:
    Line 143: # Test legacy list field access (backward compatibility): emulate legacy behavior via centralized loader
           # Test legacy list field access (backward compatibility): emulate legacy behavior via centralized lo...

  Legacy Tests:
    Line 143: # Test legacy list field access (backward compatibility): emulate legacy behavior via centralized loader
           # Test legacy list field access (backward compatibility): emulate legacy behavior via centralized lo...

  Legacy Data Structures:
    Line 144: categories_legacy = load_user_preferences_data(user_id).get('categories', [])
           categories_legacy = load_user_preferences_data(user_id).get('categories', [])

üìÅ .\scripts\utilities\cleanup\cleanup_test_data.py
----------------------------------------------------

  Backward Compatibility:
    Line 123: "cleanup/remove_timestamp_backward_compatibility.py",
           "cleanup/remove_timestamp_backward_compatibility.py",
    Line 126: "remove_backwards_compatibility.py",
           "remove_backwards_compatibility.py",
    Line 126: "remove_backwards_compatibility.py",
           "remove_backwards_compatibility.py",

üìÅ .\scripts\utilities\refactoring\find_legacy_get_user_data.py
----------------------------------------------------------------

  Legacy Data Structures:
    Line 3: Find all files that import or use legacy get_user_data from core.user_management.
           Find all files that import or use legacy get_user_data from core.user_management.
    Line 8: LEGACY_IMPORT_PATTERN = re.compile(r"from\s+core\.user_management\s+import\s+.*get_user_data")
           LEGACY_IMPORT_PATTERN = re.compile(r"from\s+core\.user_management\s+import\s+.*get_user_data")
    Line 9: LEGACY_CALL_PATTERN = re.compile(r"core\.user_management\.get_user_data")
           LEGACY_CALL_PATTERN = re.compile(r"core\.user_management\.get_user_data")
    Line 24: print("Legacy get_user_data found in:")
           print("Legacy get_user_data found in:")
    Line 28: print("No legacy get_user_data calls found!")
           print("No legacy get_user_data calls found!")

  Legacy Imports:
    Line 3: Find all files that import or use legacy get_user_data from core.user_management.
           Find all files that import or use legacy get_user_data from core.user_management.
    Line 8: LEGACY_IMPORT_PATTERN = re.compile(r"from\s+core\.user_management\s+import\s+.*get_user_data")
           LEGACY_IMPORT_PATTERN = re.compile(r"from\s+core\.user_management\s+import\s+.*get_user_data")
    Line 20: if LEGACY_IMPORT_PATTERN.search(line) or LEGACY_CALL_PATTERN.search(line):
           if LEGACY_IMPORT_PATTERN.search(line) or LEGACY_CALL_PATTERN.search(line):
    Line 20: if LEGACY_IMPORT_PATTERN.search(line) or LEGACY_CALL_PATTERN.search(line):
           if LEGACY_IMPORT_PATTERN.search(line) or LEGACY_CALL_PATTERN.search(line):

üìÅ .\scripts\utilities\refactoring\migrate_legacy_imports.py
-------------------------------------------------------------

  Legacy Format Handling:
    Line 3: Migrate legacy imports from core.user_management to core.user_data_handlers.
           Migrate legacy imports from core.user_management to core.user_data_handlers.
    Line 118: print("=== LEGACY IMPORT MIGRATION ===")
           print("=== LEGACY IMPORT MIGRATION ===")

  Legacy Data Structures:
    Line 3: Migrate legacy imports from core.user_management to core.user_data_handlers.
           Migrate legacy imports from core.user_management to core.user_data_handlers.

  Legacy Imports:
    Line 3: Migrate legacy imports from core.user_management to core.user_data_handlers.
           Migrate legacy imports from core.user_management to core.user_data_handlers.
    Line 118: print("=== LEGACY IMPORT MIGRATION ===")
           print("=== LEGACY IMPORT MIGRATION ===")

  Legacy Validation:
    Line 154: print("2. Check for any remaining legacy warnings")
           print("2. Check for any remaining legacy warnings")

  Legacy Warnings:
    Line 154: print("2. Check for any remaining legacy warnings")
           print("2. Check for any remaining legacy warnings")

üìÅ .\scripts\utilities\restore_custom_periods.py
-------------------------------------------------

  Legacy Format Handling:
    Line 23: def migrate_legacy_schedules_structure(schedules_data):
           def migrate_legacy_schedules_structure(schedules_data):
    Line 24: """Convert legacy flat schedule structure to new nested format."""
           """Convert legacy flat schedule structure to new nested format."""
    Line 38: # Legacy format - convert to new format
           # Legacy format - convert to new format
    Line 80: migrated_schedules = migrate_legacy_schedules_structure(original_schedules)
           migrated_schedules = migrate_legacy_schedules_structure(original_schedules)

  Legacy Data Structures:
    Line 23: def migrate_legacy_schedules_structure(schedules_data):
           def migrate_legacy_schedules_structure(schedules_data):
    Line 23: def migrate_legacy_schedules_structure(schedules_data):
           def migrate_legacy_schedules_structure(schedules_data):
    Line 24: """Convert legacy flat schedule structure to new nested format."""
           """Convert legacy flat schedule structure to new nested format."""
    Line 80: migrated_schedules = migrate_legacy_schedules_structure(original_schedules)
           migrated_schedules = migrate_legacy_schedules_structure(original_schedules)

  Legacy Methods:
    Line 23: def migrate_legacy_schedules_structure(schedules_data):
           def migrate_legacy_schedules_structure(schedules_data):

üìÅ .\tests\integration\test_user_creation.py
---------------------------------------------

  Legacy Tests:
    Line 107: # Telegram support removed: legacy test removed
           # Telegram support removed: legacy test removed

üìÅ .\tests\test_utilities.py
-----------------------------

  Legacy Compatibility Comments:
    Line 49: # LEGACY COMPATIBILITY PATH - REMOVE AFTER VERIFYING NO USAGE
           # LEGACY COMPATIBILITY PATH - REMOVE AFTER VERIFYING NO USAGE
    Line 49: # LEGACY COMPATIBILITY PATH - REMOVE AFTER VERIFYING NO USAGE
           # LEGACY COMPATIBILITY PATH - REMOVE AFTER VERIFYING NO USAGE

  Removal Plans:
    Line 50: # TODO: Remove after confirming all tests use test_data_dir parameter
           # TODO: Remove after confirming all tests use test_data_dir parameter
    Line 51: # REMOVAL PLAN:
           # REMOVAL PLAN:
    Line 51: # REMOVAL PLAN:
           # REMOVAL PLAN:

  Legacy Warnings:
    Line 53: # 2. Monitor app.log for legacy usage warnings for 1 week
           # 2. Monitor app.log for legacy usage warnings for 1 week
    Line 56: logger.warning("LEGACY test user creation path used - switch to test_data_dir parameter")
           logger.warning("LEGACY test user creation path used - switch to test_data_dir parameter")
    Line 56: logger.warning("LEGACY test user creation path used - switch to test_data_dir parameter")
           logger.warning("LEGACY test user creation path used - switch to test_data_dir parameter")

  Legacy Data Structures:
    Line 56: logger.warning("LEGACY test user creation path used - switch to test_data_dir parameter")
           logger.warning("LEGACY test user creation path used - switch to test_data_dir parameter")

  Legacy Tests:
    Line 56: logger.warning("LEGACY test user creation path used - switch to test_data_dir parameter")
           logger.warning("LEGACY test user creation path used - switch to test_data_dir parameter")

  Backward Compatibility:
    Line 57: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 57: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 343: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 343: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 484: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 484: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 622: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 622: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 769: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 769: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 858: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 858: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 1008: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 1008: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 1116: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 1116: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 1249: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 1249: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 1383: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 1383: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 1517: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 1517: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 1651: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 1651: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 1783: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 1783: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 1915: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 1915: # Use real user directory (for backward compatibility)
           # Use real user directory (for backward compatibility)
    Line 2299: # Convenience functions for backward compatibility
           # Convenience functions for backward compatibility
    Line 2299: # Convenience functions for backward compatibility
           # Convenience functions for backward compatibility

üìÅ .\ui\dialogs\account_creator_dialog.py
------------------------------------------

  Legacy Compatibility Comments:
    Line 347: LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
           LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
    Line 362: LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
           LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
    Line 377: LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
           LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
    Line 392: LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
           LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
    Line 407: LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
           LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE

  Legacy Methods:
    Line 347: LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
           LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
    Line 350: 1. Add usage logging to track legacy method calls
           1. Add usage logging to track legacy method calls
    Line 362: LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
           LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
    Line 365: 1. Add usage logging to track legacy method calls
           1. Add usage logging to track legacy method calls
    Line 377: LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
           LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
    Line 380: 1. Add usage logging to track legacy method calls
           1. Add usage logging to track legacy method calls
    Line 392: LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
           LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
    Line 395: 1. Add usage logging to track legacy method calls
           1. Add usage logging to track legacy method calls
    Line 407: LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
           LEGACY COMPATIBILITY METHOD - REMOVE AFTER VERIFYING NO USAGE
    Line 410: 1. Add usage logging to track legacy method calls
           1. Add usage logging to track legacy method calls

  Removal Plans:
    Line 349: REMOVAL PLAN:
           REMOVAL PLAN:
    Line 349: REMOVAL PLAN:
           REMOVAL PLAN:
    Line 364: REMOVAL PLAN:
           REMOVAL PLAN:
    Line 364: REMOVAL PLAN:
           REMOVAL PLAN:
    Line 379: REMOVAL PLAN:
           REMOVAL PLAN:
    Line 379: REMOVAL PLAN:
           REMOVAL PLAN:
    Line 394: REMOVAL PLAN:
           REMOVAL PLAN:
    Line 394: REMOVAL PLAN:
           REMOVAL PLAN:
    Line 409: REMOVAL PLAN:
           REMOVAL PLAN:
    Line 409: REMOVAL PLAN:
           REMOVAL PLAN:

  Legacy Warnings:
    Line 351: 2. Monitor app.log for legacy usage warnings for 1 week
           2. Monitor app.log for legacy usage warnings for 1 week
    Line 355: logger.warning("LEGACY on_category_changed() called - switch to modern widget-based category handling")
           logger.warning("LEGACY on_category_changed() called - switch to modern widget-based category handlin...
    Line 355: logger.warning("LEGACY on_category_changed() called - switch to modern widget-based category handling")
           logger.warning("LEGACY on_category_changed() called - switch to modern widget-based category handlin...
    Line 366: 2. Monitor app.log for legacy usage warnings for 1 week
           2. Monitor app.log for legacy usage warnings for 1 week
    Line 370: logger.warning("LEGACY on_service_changed() called - switch to modern widget-based service handling")
           logger.warning("LEGACY on_service_changed() called - switch to modern widget-based service handling"...
    Line 370: logger.warning("LEGACY on_service_changed() called - switch to modern widget-based service handling")
           logger.warning("LEGACY on_service_changed() called - switch to modern widget-based service handling"...
    Line 381: 2. Monitor app.log for legacy usage warnings for 1 week
           2. Monitor app.log for legacy usage warnings for 1 week
    Line 385: logger.warning("LEGACY on_contact_info_changed() called - switch to modern widget-based contact handling")
           logger.warning("LEGACY on_contact_info_changed() called - switch to modern widget-based contact hand...
    Line 385: logger.warning("LEGACY on_contact_info_changed() called - switch to modern widget-based contact handling")
           logger.warning("LEGACY on_contact_info_changed() called - switch to modern widget-based contact hand...
    Line 396: 2. Monitor app.log for legacy usage warnings for 1 week
           2. Monitor app.log for legacy usage warnings for 1 week
    Line 400: logger.warning("LEGACY on_task_group_toggled() called - switch to modern tab-based task management")
           logger.warning("LEGACY on_task_group_toggled() called - switch to modern tab-based task management")
    Line 400: logger.warning("LEGACY on_task_group_toggled() called - switch to modern tab-based task management")
           logger.warning("LEGACY on_task_group_toggled() called - switch to modern tab-based task management")
    Line 411: 2. Monitor app.log for legacy usage warnings for 1 week
           2. Monitor app.log for legacy usage warnings for 1 week
    Line 415: logger.warning("LEGACY on_checkin_group_toggled() called - switch to modern tab-based check-in management")
           logger.warning("LEGACY on_checkin_group_toggled() called - switch to modern tab-based check-in manag...
    Line 415: logger.warning("LEGACY on_checkin_group_toggled() called - switch to modern tab-based check-in management")
           logger.warning("LEGACY on_checkin_group_toggled() called - switch to modern tab-based check-in manag...

  Legacy Validation:
    Line 415: logger.warning("LEGACY on_checkin_group_toggled() called - switch to modern tab-based check-in management")
           logger.warning("LEGACY on_checkin_group_toggled() called - switch to modern tab-based check-in manag...

üìÅ .\ui\ui_app_qt.py
---------------------

  Legacy Compatibility Comments:
    Line 1497: # LEGACY COMPATIBILITY PATH - REMOVE AFTER VERIFYING NO USAGE
           # LEGACY COMPATIBILITY PATH - REMOVE AFTER VERIFYING NO USAGE
    Line 1497: # LEGACY COMPATIBILITY PATH - REMOVE AFTER VERIFYING NO USAGE
           # LEGACY COMPATIBILITY PATH - REMOVE AFTER VERIFYING NO USAGE

  Removal Plans:
    Line 1498: # TODO: Remove after confirming no UI creates communication manager instances
           # TODO: Remove after confirming no UI creates communication manager instances
    Line 1499: # REMOVAL PLAN:
           # REMOVAL PLAN:
    Line 1499: # REMOVAL PLAN:
           # REMOVAL PLAN:

  Legacy Warnings:
    Line 1501: # 2. Monitor app.log for legacy usage warnings for 1 week
           # 2. Monitor app.log for legacy usage warnings for 1 week
    Line 1504: logger.warning("LEGACY UI communication manager instance used - switch to service-based communication")
           logger.warning("LEGACY UI communication manager instance used - switch to service-based communicatio...
    Line 1504: logger.warning("LEGACY UI communication manager instance used - switch to service-based communication")
           logger.warning("LEGACY UI communication manager instance used - switch to service-based communicatio...

üìÅ .\ui\widgets\user_profile_settings_widget.py
------------------------------------------------

  Legacy Compatibility Comments:
    Line 393: # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
           # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
    Line 393: # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
           # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
    Line 407: # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
           # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
    Line 407: # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
           # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
    Line 438: # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
           # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
    Line 438: # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
           # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
    Line 469: # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
           # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
    Line 469: # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
           # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
    Line 488: # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
           # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
    Line 488: # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE
           # LEGACY COMPATIBILITY FALLBACK - REMOVE AFTER VERIFYING NO USAGE

  Removal Plans:
    Line 394: # TODO: Remove after confirming all UI uses dynamic list containers
           # TODO: Remove after confirming all UI uses dynamic list containers
    Line 395: # REMOVAL PLAN:
           # REMOVAL PLAN:
    Line 395: # REMOVAL PLAN:
           # REMOVAL PLAN:
    Line 408: # TODO: Remove after confirming all UI uses dynamic list containers
           # TODO: Remove after confirming all UI uses dynamic list containers
    Line 409: # REMOVAL PLAN:
           # REMOVAL PLAN:
    Line 409: # REMOVAL PLAN:
           # REMOVAL PLAN:
    Line 439: # TODO: Remove after confirming all UI uses dynamic list containers
           # TODO: Remove after confirming all UI uses dynamic list containers
    Line 440: # REMOVAL PLAN:
           # REMOVAL PLAN:
    Line 440: # REMOVAL PLAN:
           # REMOVAL PLAN:
    Line 470: # TODO: Remove after confirming all UI uses dynamic list containers
           # TODO: Remove after confirming all UI uses dynamic list containers
    Line 471: # REMOVAL PLAN:
           # REMOVAL PLAN:
    Line 471: # REMOVAL PLAN:
           # REMOVAL PLAN:
    Line 489: # TODO: Remove after confirming all UI uses dynamic list containers
           # TODO: Remove after confirming all UI uses dynamic list containers
    Line 490: # REMOVAL PLAN:
           # REMOVAL PLAN:
    Line 490: # REMOVAL PLAN:
           # REMOVAL PLAN:

  Legacy Warnings:
    Line 397: # 2. Monitor app.log for legacy usage warnings for 1 week
           # 2. Monitor app.log for legacy usage warnings for 1 week
    Line 400: logger.warning("LEGACY health_conditions fallback used - switch to dynamic list container")
           logger.warning("LEGACY health_conditions fallback used - switch to dynamic list container")
    Line 400: logger.warning("LEGACY health_conditions fallback used - switch to dynamic list container")
           logger.warning("LEGACY health_conditions fallback used - switch to dynamic list container")
    Line 411: # 2. Monitor app.log for legacy usage warnings for 1 week
           # 2. Monitor app.log for legacy usage warnings for 1 week
    Line 414: logger.warning("LEGACY medications fallback used - switch to dynamic list container")
           logger.warning("LEGACY medications fallback used - switch to dynamic list container")
    Line 414: logger.warning("LEGACY medications fallback used - switch to dynamic list container")
           logger.warning("LEGACY medications fallback used - switch to dynamic list container")
    Line 442: # 2. Monitor app.log for legacy usage warnings for 1 week
           # 2. Monitor app.log for legacy usage warnings for 1 week
    Line 445: logger.warning("LEGACY allergies fallback used - switch to dynamic list container")
           logger.warning("LEGACY allergies fallback used - switch to dynamic list container")
    Line 445: logger.warning("LEGACY allergies fallback used - switch to dynamic list container")
           logger.warning("LEGACY allergies fallback used - switch to dynamic list container")
    Line 473: # 2. Monitor app.log for legacy usage warnings for 1 week
           # 2. Monitor app.log for legacy usage warnings for 1 week
    Line 476: logger.warning("LEGACY interests fallback used - switch to dynamic list container")
           logger.warning("LEGACY interests fallback used - switch to dynamic list container")
    Line 476: logger.warning("LEGACY interests fallback used - switch to dynamic list container")
           logger.warning("LEGACY interests fallback used - switch to dynamic list container")
    Line 492: # 2. Monitor app.log for legacy usage warnings for 1 week
           # 2. Monitor app.log for legacy usage warnings for 1 week
    Line 495: logger.warning("LEGACY goals fallback used - switch to dynamic list container")
           logger.warning("LEGACY goals fallback used - switch to dynamic list container")
    Line 495: logger.warning("LEGACY goals fallback used - switch to dynamic list container")
           logger.warning("LEGACY goals fallback used - switch to dynamic list container")

üìÅ .\user\user_context.py
--------------------------

  Legacy Format Handling:
    Line 23: # Warn only once per process for legacy format bridges
           # Warn only once per process for legacy format bridges
    Line 57: logger.warning("LEGACY user data format conversion used - switch to new data structure")
           logger.warning("LEGACY user data format conversion used - switch to new data structure")
    Line 59: # Combine into legacy format for compatibility
           # Combine into legacy format for compatibility
    Line 92: logger.warning("LEGACY user data format extraction used - switch to new data structure")
           logger.warning("LEGACY user data format extraction used - switch to new data structure")
    Line 94: # Extract data from legacy format and update using new functions
           # Extract data from legacy format and update using new functions

  Legacy Warnings:
    Line 23: # Warn only once per process for legacy format bridges
           # Warn only once per process for legacy format bridges
    Line 24: _warned_legacy_load = False
           _warned_legacy_load = False
    Line 25: _warned_legacy_save = False
           _warned_legacy_save = False
    Line 56: if not UserContext._warned_legacy_load:
           if not UserContext._warned_legacy_load:
    Line 57: logger.warning("LEGACY user data format conversion used - switch to new data structure")
           logger.warning("LEGACY user data format conversion used - switch to new data structure")
    Line 57: logger.warning("LEGACY user data format conversion used - switch to new data structure")
           logger.warning("LEGACY user data format conversion used - switch to new data structure")
    Line 58: UserContext._warned_legacy_load = True
           UserContext._warned_legacy_load = True
    Line 91: if not UserContext._warned_legacy_save:
           if not UserContext._warned_legacy_save:
    Line 92: logger.warning("LEGACY user data format extraction used - switch to new data structure")
           logger.warning("LEGACY user data format extraction used - switch to new data structure")
    Line 92: logger.warning("LEGACY user data format extraction used - switch to new data structure")
           logger.warning("LEGACY user data format extraction used - switch to new data structure")
    Line 93: UserContext._warned_legacy_save = True
           UserContext._warned_legacy_save = True

  Legacy Compatibility Comments:
    Line 55: # LEGACY COMPATIBILITY: bridge to legacy user_data shape (log only once)
           # LEGACY COMPATIBILITY: bridge to legacy user_data shape (log only once)
    Line 55: # LEGACY COMPATIBILITY: bridge to legacy user_data shape (log only once)
           # LEGACY COMPATIBILITY: bridge to legacy user_data shape (log only once)
    Line 90: # LEGACY COMPATIBILITY: extracting from legacy shape (log only once)
           # LEGACY COMPATIBILITY: extracting from legacy shape (log only once)
    Line 90: # LEGACY COMPATIBILITY: extracting from legacy shape (log only once)
           # LEGACY COMPATIBILITY: extracting from legacy shape (log only once)

  Legacy Data Structures:
    Line 55: # LEGACY COMPATIBILITY: bridge to legacy user_data shape (log only once)
           # LEGACY COMPATIBILITY: bridge to legacy user_data shape (log only once)
    Line 57: logger.warning("LEGACY user data format conversion used - switch to new data structure")
           logger.warning("LEGACY user data format conversion used - switch to new data structure")
    Line 57: logger.warning("LEGACY user data format conversion used - switch to new data structure")
           logger.warning("LEGACY user data format conversion used - switch to new data structure")
    Line 92: logger.warning("LEGACY user data format extraction used - switch to new data structure")
           logger.warning("LEGACY user data format extraction used - switch to new data structure")
    Line 92: logger.warning("LEGACY user data format extraction used - switch to new data structure")
           logger.warning("LEGACY user data format extraction used - switch to new data structure")
    Line 94: # Extract data from legacy format and update using new functions
           # Extract data from legacy format and update using new functions

  Legacy Imports:
    Line 90: # LEGACY COMPATIBILITY: extracting from legacy shape (log only once)
           # LEGACY COMPATIBILITY: extracting from legacy shape (log only once)
    Line 94: # Extract data from legacy format and update using new functions
           # Extract data from legacy format and update using new functions

  Legacy Methods:
    Line 94: # Extract data from legacy format and update using new functions
           # Extract data from legacy format and update using new functions

================================================================================
RECOMMENDATIONS:
================================================================================
‚ö†Ô∏è  LEGACY CODE FOUND - ACTION REQUIRED:

üîß LEGACY COMPATIBILITY COMMENTS:
   - Review each LEGACY COMPATIBILITY comment
   - Check if the compatibility period has expired
   - Remove code if no longer needed

üîß LEGACY WRAPPERS:
   - Identify legacy wrapper classes and functions
   - Update callers to use modern interfaces
   - Remove wrapper code after migration

üîß REMOVAL PLANS:
   - Review removal plans and timelines
   - Execute removals that are past their deadline
   - Update documentation after removal

üîß LEGACY FORMAT HANDLING:
   - Identify legacy data format support
   - Migrate to modern data formats
   - Remove legacy format conversion code

üìã NEXT STEPS:
   1. Review each file with legacy code
   2. Determine if legacy code is still needed
   3. Create removal tickets for unnecessary legacy code
   4. Update tests after legacy code removal
   5. Monitor for new legacy code introduction